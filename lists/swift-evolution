<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="container">
  <h2>swift-evolution</h2>
  <p>Discussion of the evolution of Swift, including new language features and new APIs.</p>

  <ul>
    <li>
<a href="/threads/17437775a06432b79ce337ed284d9c7213263091">API Guidelines for Asynchronous Completion Handlers?</a>      &mdash; <em>Dan Stenmark</em>
    </li>
    <li>
<a href="/threads/4051ef91e8dfaf90ea929da7f2f710e06852831f">Proposal: Optional Binding Shorthand Syntax</a>      &mdash; <em>Zef Houssney</em>
    </li>
    <li>
<a href="/threads/c286a9e5c6e06a94f1cdd6b73f625cfd71581e33">Expanded support for numeric types in stdlib?</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/b1d9100469a8b850e00253770a3a3fb7939f1f6b">Idea for declaring expected types and value ranges</a>      &mdash; <em>Sean Heber</em>
    </li>
    <li>
<a href="/threads/571780026de1452531f2938bb6a289cc4948295b">Pluggable hash algorithm for containers</a>      &mdash; <em>Ray Fix</em>
    </li>
    <li>
<a href="/threads/b0c5b3c95427d88c468da6dd07c1b96a51f6287b">Change the name of the boolean operators?</a>      &mdash; <em>Sean Heber</em>
    </li>
    <li>
<a href="/threads/65723ca4119788c4bbab8f5d5ec286ad05a531e9">C-style For Loops</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/b8e3e69d67a93a8664e883fa4384b9a4b487d8a1">NDAs, Open Source, and the Iron Curtain</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/2b8e098ed99f6881a0599ab0a1d4a5fbe1adae06">Please remove obscure &quot;!&quot; requirements for implicitly unwrapped optionals</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/b8b2b44a9a82e1a8cb747bf1db079037487f9053">? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/2962996c75a2ee21ac088e717fc1eefb71100825">Revisiting Optionals as Sequences</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/9edfee3083280a30872e89cd335215ccfea71ba7">You should be able to label a 1-tuple return value as a way to document the return value.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/6a39dab99c1e7895ff994cb14561ad47abfc1c0e">if case 1, 2, 3 = x { ... } results in error in swift 2</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/3d5a74b113a00fa19ce31e371c8858ca98032a23">KVO/KVC in Swift</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/0c2159c495fc27db28c479d9f0503481a49a52f9">ternary operator ?: suggestion</a>      &mdash; <em>Jose Cheyo Jimenez</em>
    </li>
    <li>
<a href="/threads/5a83aabf3431ff0137ce2661bb6a44993488e7f3">Proposal for generic protocols</a>      &mdash; <em>Tal Atlas</em>
    </li>
    <li>
<a href="/threads/58245a6513710017ff36b13f1a1eba84eda22fb8">KVO/KVC in Swift</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/cccaa1ab2a70764f9325ceea527bdfd74e2d9b12">If-let Shortcut Syntax</a>      &mdash; <em>Richard Fox</em>
    </li>
    <li>
<a href="/threads/9481a24761a5634250e71bf372d4bbb977f0af16">General take on &quot;special&quot; code in Swift</a>      &mdash; <em>Timothy J. Wood</em>
    </li>
    <li>
<a href="/threads/2155520cf8634d1a4df06542d5964d3db0b5c8d2">Idea for enabling DSLs: bind to self in closures</a>      &mdash; <em>David Waite</em>
    </li>
    <li>
<a href="/threads/5b16c56acd167aaa91f5afc768f683999932e460">Proposal: Sealed protocols</a>      &mdash; <em>Felix Gabel</em>
    </li>
    <li>
<a href="/threads/e3ae49dfa1a2e2f0d38aca7786bc70c51449959f">SwiftScript</a>      &mdash; <em>Dave Thornton</em>
    </li>
    <li>
<a href="/threads/7448e2ad3235863742a8863214343452cbbbed12">Proposal: Typed throws</a>      &mdash; <em>Adrian Kashivskyy</em>
    </li>
    <li>
<a href="/threads/ce6137c8b7a17eceafe912f0213313fb7b68c246">SE-0005: Ambiguous NS prefix removals</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/8f2d94c1e35579dd5a52a046bf380df55c8bb525">Proposal : Introduction of System Defined UI Variables - ScreenSize, IsPad.</a>      &mdash; <em>Tarun Tyagi</em>
    </li>
    <li>
<a href="/threads/392cfd157b83bc9bdd200b1980c8fbad446db9a9">abstract keyWord proposal</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/118835f52d494219c5444fc863898f355d2b1a04">mandatory &quot;?&quot; suffix for identifiers associated with optional types</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/3488ce3de291cafd049a59abadc2e69e05bf5f80">More verbose logical operators</a>      &mdash; <em>Bee</em>
    </li>
    <li>
<a href="/threads/4ea7db2250eafa10c3eef5e6238e4cdda3586c78">Proposal: Access control for protocols</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/6a7dcd30570a31a1e8f01e869973d138d2312333">Process question: breaking proposals for API changes to stdlib?</a>      &mdash; <em>Andy Matuschak</em>
    </li>
    <li>
<a href="/threads/402acb367bf22c4dcae968bc7f1f3354617ebffe">swift for ios?</a>      &mdash; <em>Bee</em>
    </li>
    <li>
<a href="/threads/356959e957fa28d125f3d89a8b7578b68ce4a8d8">Control Flow Expressions</a>      &mdash; <em>Sergey Shulepov</em>
    </li>
    <li>
<a href="/threads/2c2ef38121af25a145f46039ea4e5f2047f2488b">Proposal: Bridging for Swift Structs in Objective-C</a>      &mdash; <em>Dan Stenmark</em>
    </li>
    <li>
<a href="/threads/6cacbf20601499ed2b514366024556fd7a39ca68">Request for Discussion: Setup closures</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/034ed8aeb5e8a021b8fb6bee4c04b38cec72f5a4">Failable arithmetic</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/42ef638876dc6909b6fff280b87f341bfe2c6975">lazy keyword vs lazy initialization pattern</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/c235b324322feeef098f332b29022b8ef48255c7">Ability to set access control independently for getter &amp; setter of a property</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/877d2081cb76888f171975f4f30d22154891fd93">Proposal: CustomConvertible protocol</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/befaa32a6532678a4aef0b23e685b2e812eb5b67">Proposal: Optional unwrap resulting in exception.</a>      &mdash; <em>Nikolay Petrov</em>
    </li>
    <li>
<a href="/threads/813fd70f58a63cd1f312eba0a453368fd8dcdda9">Proposal: Automatic Wrapper Synthesis / &quot;deriving&quot;</a>      &mdash; <em>plx</em>
    </li>
    <li>
<a href="/threads/0b5b6e115b5dbd902276037147d80d91e5ca792e">Reconsidering the (Element -&gt; T?) variant of SequenceType.flatMap</a>      &mdash; <em>Andy Matuschak</em>
    </li>
    <li>
<a href="/threads/6309eb338f849516c7a2686b5e6fc41100a028a7">Fw: Re: Proposal: CustomConvertible protocol</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/56e66f80a117624e7eedbaab54dd10e60c60c6bf">Proposal: Protocol methods should accept default arguments</a>      &mdash; <em>Ben</em>
    </li>
    <li>
<a href="/threads/6f7d6acfc2c34a088ef68f2c85db4f9bd93b1120">Proposal: Remove the &quot;fallthrough&quot; keyword</a>      &mdash; <em>jalkut at red-sweater.com</em>
    </li>
    <li>
<a href="/threads/470fd58976bd73fac64f507d3134e6c5c7c0886d">Type-safe selectors</a>      &mdash; <em>Michel Fortin</em>
    </li>
    <li>
<a href="/threads/f354f6a605adf2eaad3f7d8ea69856c4bb02edb3">lazy keyword vs lazy initialization pattern</a>      &mdash; <em>Cameron Knight</em>
    </li>
    <li>
<a href="/threads/44c82c11236b367fc24d39d214039e0c3390c0bf">Allow Selectors to be used as Closures</a>      &mdash; <em>Chris Byatt</em>
    </li>
    <li>
<a href="/threads/b17a2bf15ba66612cdd121128ffaed50ffc466b3">&quot;bad smells&quot; should be compiler errors with suggestions on how to fix them</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/1a3872fab3b641663150b1eb58d15dd6657ba3a4">Type Inferencing For Error Handling (try catch blocks)</a>      &mdash; <em>Manav Gabhawala</em>
    </li>
    <li>
<a href="/threads/86436f993bcb0ea243dc034f177fbac57b4d0753">Generic `typealias`s</a>      &mdash; <em>Dapeng Gao</em>
    </li>
    <li>
<a href="/threads/d72006fb28f1ee665e95d8fa233bc2a3c9017b0b">Extending Failable Initializers</a>      &mdash; <em>Manav Gabhawala</em>
    </li>
    <li>
<a href="/threads/9cb3676c98d3b296e43b7fb81eb253bc418f31af">Idea for declaring expected types and value ranges</a>      &mdash; <em>Jaden Geller</em>
    </li>
    <li>
<a href="/threads/743056fcbea4c058bcc2c43564a7ea3ae11abbc1">Proposal: Re-instate mandatory self for accessing instance properties and functions</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/1299e6e521fdff8ce5da8c09e14fb62d838146cd">C-style For Loops</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/806172a3339495e9ab40ccdb50ff6510afbe2439">Lazy flatMap for Optionals</a>      &mdash; <em>Donnacha Oisín Kidney</em>
    </li>
    <li>
<a href="/threads/d43805d35c688603fe39fed57f09d23ab0a920f5">Proposal: helpers for initializing properties of same name as parameters</a>      &mdash; <em>Tal Atlas</em>
    </li>
    <li>
<a href="/threads/91752457ac2cce058fde3e2d154c177f653097da">C-style For Loops</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/d4b8b416372f31ab2a566ac1e71b3729dd7cd3e8">Proposal: Re-instate mandatory self for accessing	instance properties and functions</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/0b31b52ab132ce93e8607eed7ed7584b6cc71f44">fcntl() should be added to the standard library.</a>      &mdash; <em>Bill Abt</em>
    </li>
    <li>
<a href="/threads/186a4143ddd8f366cbf66d2c9c8c1061cb6a6e80">Revisiting Optionals as Sequences</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/fb92196e350e7e94f7a4e77536ea1d853dfc7de9">Type information containing multiple additional protocols</a>      &mdash; <em>Daniel Muhra</em>
    </li>
    <li>
<a href="/threads/7d634ad932a6f1cf96da3ca994d7f83d7a308166">Proposal: Automatic Wrapper Synthesis / &quot;deriving&quot;</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/98ddf5987cf249c6ed470f6a8ad30f2db7fc1e3e">Proposal: Auto-convert for numbers when safe</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/1e179a700601a9374cc71e8e42b0026d5954dd16">Proposal: More Command-line Compatibilities</a>      &mdash; <em>Stark Shaw</em>
    </li>
    <li>
<a href="/threads/c234db6258a918c335a2528a905727ced701e56d">&quot;if case&quot; syntax is ugly</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/4b66cb3b9677e7e3d8d6f929dd702a7279b41848">Proposal: floating point static min / max properties</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/6e5892788396f3c29126a685d5aa104def2a6e90">ternary operator ?: suggestion</a>      &mdash; <em>Paul Ossenbruggen</em>
    </li>
    <li>
<a href="/threads/180d46bacfa3eaa10050dd3340c158afaccdb0d2">reinitializing part of an object where calling super.init is optional</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/b2d88d6697b9d7fa8c47e405efe292ac563f054f">swift tool project init command</a>      &mdash; <em>Lander Brandt</em>
    </li>
    <li>
<a href="/threads/0209e507b9fd2865c4d5152b77324d86d283b2a3">Proposal: weakStrong self in completion handler closures</a>      &mdash; <em>Robert Vojta</em>
    </li>
    <li>
<a href="/threads/bceff4aff9c8e55382230eb8f8e216f676cc0f1f">Redundant parentheses should result in compile errors.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/6e50da4199252b0962a5c23e124ffb0e577e67b1">Inquiry: Improved Composability of stdlib Collections?</a>      &mdash; <em>plx</em>
    </li>
    <li>
<a href="/threads/e67f6d7da1498f43ac508a9df111085557cb424b">Feedback for SE-0004: Remove the ++ and -- operators</a>      &mdash; <em>David Zarzycki</em>
    </li>
    <li>
<a href="/threads/da3566b5f341a718d7df570e6a7d58b7597cb391">A mode with no type checking to compete with Python.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/43eb30e4d1f63461def0efaa03b514f2421621ce">Proposal: Allow willChange and didChange observers on a property</a>      &mdash; <em>Nathan de Vries</em>
    </li>
    <li>
<a href="/threads/2dc2066e97b4e5392b90f87e3c902e4be8cc398e">Proposal: Finalization in protocol extensions and default implementations</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/e4fedb2a1836f1277a62be5b18639172d1faa1bd">Proposal: Tail Call Optimization keyword/attribute</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/6ca547d3988eea6d424aa618690a892335f4ad26">Proposal: standard logging facility</a>      &mdash; <em>Alexander Kolov</em>
    </li>
    <li>
<a href="/threads/b91b45ea923a1d188a331d470caa9a5c2d1b2be0">Proposal: Allow Getters and Setters to Throw</a>      &mdash; <em>Nikolai Vazquez</em>
    </li>
    <li>
<a href="/threads/9a93662d49566dc3f8d9288bb2413ec8f523f633">Proposal: Stored properties in extensions</a>      &mdash; <em>Tomáš Linhart</em>
    </li>
    <li>
<a href="/threads/2f52a99420549b2dd3ef3687002814f5782cb014">Proposal: Add StaticString.UnicodeScalarView</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/8bc0343472a3539307aba8ebe46d0450f1662cd7">Proposal: Stored properties in extensions</a>      &mdash; <em>Tomáš Linhart</em>
    </li>
    <li>
<a href="/threads/43f3f62ae5d55919d82f70fa0cd3e501cd742207">Introduce &quot;associated_type&quot; keyword</a>      &mdash; <em>Loïc Lecrenier</em>
    </li>
    <li>
<a href="/threads/4e67cbae9d01ba87b94172e868c613de51f12e3a">Request for Discussion: Setup closures</a>      &mdash; <em>ilya</em>
    </li>
    <li>
<a href="/threads/54ae0563442f3bfa88e6c6c2852d7f24ba154c4e">access control proposal</a>      &mdash; <em>Ilya</em>
    </li>
    <li>
<a href="/threads/6f145954e2d922c1ac83f7845597611bc216792a">Overloading assignment operator</a>      &mdash; <em>Don Wills</em>
    </li>
    <li>
<a href="/threads/8055ecdd2973066505468ca9254a7ce36de79726">Swift support for automatically sharing small code fragments with other iOS developers.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/7b277ffafab87ed31aeed6aaf84eeba3659d7522">Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/41d7f3d42f026612c7cb7d8545caf7b1f918561a">C-style For Loops</a>      &mdash; <em>Clemens Wagner</em>
    </li>
    <li>
<a href="/threads/a3fde472e4d376f0212e48245c392f20d73e4836">C-style For Loops</a>      &mdash; <em>Kelly Gerber</em>
    </li>
    <li>
<a href="/threads/47b362aa096b3314ec5a47f2e8e32d3259b31983">C-style For Loops</a>      &mdash; <em>Clemens Wagner</em>
    </li>
    <li>
<a href="/threads/f881a340159b28febad6fe30d03cd5ae033e09ea">Proposal: failable numeric conversion initializers</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/3955003788debe2c6f35b2600ec7ef4228fdd001">zip3, zip4, ...</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/fc1b52fbbfbd55e54799ae5f4217462e36686148">Proposal: Optional Binding Shorthand Syntax</a>      &mdash; <em>Tyler Mandry</em>
    </li>
    <li>
<a href="/threads/c91d4e4cbde3476f92b2e20486c78a4fc92e6fee">Proposal: External variable in extension</a>      &mdash; <em>QQ Mail</em>
    </li>
    <li>
<a href="/threads/3315e8e9bf7aaafbc048be59f9ea97a99fb215fd">ternary operator ?: suggestion</a>      &mdash; <em>Alex Lew</em>
    </li>
    <li>
<a href="/threads/2acbfc7930a313b3541c28c1d88b6a14530e8e0b">mandatory &quot;?&quot; suffix for identifiers associated with optional types</a>      &mdash; <em>Tyler Mandry</em>
    </li>
    <li>
<a href="/threads/bb03f6a3340f677a6e6b5d7be81a0e705c22e781">Proposal: typealias support protocol constraint</a>      &mdash; <em>QQ Mail</em>
    </li>
    <li>
<a href="/threads/f2f6657ff548cf2713b27de2d7c002b4ed50f76b">Should be able to initialize list of lists with 2d static data without unexpected errors.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/28d58ca9c7c1611c6fcbd59cda589e159b16ed01">Proposal: Syntax sugar for cps or async functions similar to the &quot;do try catch&quot; for error handling.</a>      &mdash; <em>Roy Fu</em>
    </li>
    <li>
<a href="/threads/56a39907a14119b1d246e1e17da11a20a011b7c7">Auto-convert for numbers when safe</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/751092becffcaedbfbab945e540d538d32c046bb">Proposal: Universal dynamic dispatch for method calls</a>      &mdash; <em>Paul Cantrell</em>
    </li>
    <li>
<a href="/threads/dd4a602d5c895cb939372050dbadac1e3b8df639">Proposal: Tuple Convertible</a>      &mdash; <em>Nikolai Vazquez</em>
    </li>
    <li>
<a href="/threads/5bd422b4f4cafd58bb02115f5223ec83e00f0e03">Reading from Standard In</a>      &mdash; <em>Kyle Bashour</em>
    </li>
    <li>
<a href="/threads/8900a43aafd43c977576ddfb28f3230645d6f43e">throws!</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/27ce5d4524bae349040003eef10da7dcc885d39f">Adding an operator to return the &quot;lowest common type&quot; of two types?</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/88e01b539ef5bc6150173d73e09de86949fcaf4e">Proposal: A standard library Fraction type</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/95d613eae5fc67ef6d1bf0a883cd081987b0f8af">Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</a>      &mdash; <em>Michael M. Mayer</em>
    </li>
    <li>
<a href="/threads/10c62a755e3e8cceea5b84e62e371cc754f74cfd">Proposal: Change of syntax for class protocols</a>      &mdash; <em>Matthew Cheok</em>
    </li>
    <li>
<a href="/threads/7f3b03a70d75d85eff53aced7351203d58db839b">do try catch?</a>      &mdash; <em>Don Arnel</em>
    </li>
    <li>
<a href="/threads/bfbfa0baafaf6cb870a7c4f5b95966afca6dfd36">Unify `static` and `class` keywords</a>      &mdash; <em>Ling Wang</em>
    </li>
    <li>
<a href="/threads/34238c2c88d1bff5ce8b988f043a5df2841cab29">Make access control private by default.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/c5fef4f41f9da71a705a321c212bc31d60fcf2d5">Will these two features be included in Swift 3?</a>      &mdash; <em>tuuranton at tutanota.de</em>
    </li>
    <li>
<a href="/threads/cace65678917ad193267e9bc628ef76cbb54b457">Proposal: Implement == and &lt; for tuples where possible, up to some high arity</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/7f81390da9449ad3c326df62ff56ed7bcdd53ce1">Proposal: Allow class cluster pattern via dynamic initializer return type</a>      &mdash; <em>Riley Testut</em>
    </li>
    <li>
<a href="/threads/4a40d31a4fd51d5bec61272f8095575661f1d8b1">restricting AnySequence.init</a>      &mdash; <em>Maxim Moiseev</em>
    </li>
    <li>
<a href="/threads/86bfb77a9f1c2008eb981ba5e43181a86349b341">Review for: Remove C-style for-loops with conditions and incrementers</a>      &mdash; <em>Dmitri Gribenko</em>
    </li>
    <li>
<a href="/threads/a3ee528b62cbe98f7fc3f18c2915ef9f6f971114">protocol based invocation forwarding</a>      &mdash; <em>David Owens II</em>
    </li>
    <li>
<a href="/threads/76be2b8be639daf2f4824da4fb3f6471e9e145c4">Swift 2.2: Removing partial application of super method calls</a>      &mdash; <em>David Farler</em>
    </li>
    <li>
<a href="/threads/2f67310a68b55dff444dc2152c210ba119699723">Swift standard libraries should support simple 2d graphics and music on all platforms.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/fee6554a913d7c6711c119c7089ada564852d625">HTTP webserver protocol&#39;s</a>      &mdash; <em>Coen Wessels</em>
    </li>
    <li>
<a href="/threads/a648726037494a7de763390b8bff946051e9372d">Proposal: Typed throws</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/8cfb2fabfb1a48fb610064095cadf3f3430faa21">Print stack trace for fatalError</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/e940fb60b433ae22e7928a77110bf63f711b2e06">Requiring self. to access properties and methods</a>      &mdash; <em>Florian Reinhart</em>
    </li>
    <li>
<a href="/threads/59aec7ca22ed8b0bcab6152e4ec5c9bcc9c89191">Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</a>      &mdash; <em>Alex Chan</em>
    </li>
    <li>
<a href="/threads/d9ccfd34e8f899cfd6b375a1f406220850c67e5d">Final by default for classes and methods</a>      &mdash; <em>Javier Soto</em>
    </li>
    <li>
<a href="/threads/8f58e4a742f8395373a0c75314e10d598fc525c1">Will these two features be included in Swift 3?</a>      &mdash; <em>Radosław Pietruszewski</em>
    </li>
    <li>
<a href="/threads/6e5dcca56226c6ce9d4393f0677453f408f89b70">Proposal: Add @noescape to the transform parameter of &#39;SequenceType.flatMap&#39;</a>      &mdash; <em>Meador Inge</em>
    </li>
    <li>
<a href="/threads/c0a347a6f8e6c533d7829b9064bcc30ae829a718">Proposal: extend Optional-specific syntax to arbitrary types with CustomOptionalConvertible</a>      &mdash; <em>Krzysztof Siejkowski</em>
    </li>
    <li>
<a href="/threads/5a12ec48bc143d5238daf266de8dfc0e07abfe2f">API Guidelines for Asynchronous Completion Handlers?</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/43b20175271fb0fee9af1b9f1ca3d756984efa5f">Print stack trace for fatalError</a>      &mdash; <em>Radoslaw Pietruszewski</em>
    </li>
    <li>
<a href="/threads/87489ac4a72aaf091af2863fe02dfc369ac11738">Allowing non-binding pattern matching as a Bool expression?</a>      &mdash; <em>Alex Lew</em>
    </li>
    <li>
<a href="/threads/353ac7e0d61786b28131ad83d7dde3022256fabc">Unmanaged, and COpaquePointer vs. Unsafe(Mutable)Pointer</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/1d2f328792845b053d40c049fd48eb4ea379fb83">Proposal: Specifying local parameter names for closures to generate strict argument list</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/ebca53dc8e2255c90ac2124e2c883ea9f4d582f0">Optional &quot;endfor&quot;, &quot;endif&quot;, etc after closing &quot;}&quot;</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/cb02eca944eb59c14044bdd16b27f9d5835a1437">Optional precondition after else and #else</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/064e0eb4d04fec02fce50c79d2adc19e38201f29">Proposal: Closures capture weak by default</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/31d01af8ad1a58d65a4a7ea539ba5e09261a6241">isEqual to replace == Equatable Requirement</a>      &mdash; <em>Richard Fox</em>
    </li>
    <li>
<a href="/threads/2410864a535080bc1b46eb1e900f0c3963d6e68b">Proposal - Allow properties in Extensions</a>      &mdash; <em>Kevin Kachikian</em>
    </li>
    <li>
<a href="/threads/329f67d1cbc6360ccf23fd3708c28ba927baaf6c">SR-104: Improve Crash-Safety when Importing Objective-C Code Without Nullability Attributes</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/8b78a6cbc918d6568e41e424c8714cf91414a9af">Proposal: Change rules for implicit captures due to nested closure captures</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/acc0a0c400e8fa71f18e56d7819c0e3d541268e9">Observable event streams in Swift?</a>      &mdash; <em>Aron Allen</em>
    </li>
    <li>
<a href="/threads/48598a57bc3c0504ec5d6945750582886143de71">else clause for loops like that in Python</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/53783a974dbf3e11fa1504ff5ca9506bf49093cb">Discussion: Move range (..., ..&lt;) to a range() function</a>      &mdash; <em>Kyle Bashour</em>
    </li>
    <li>
<a href="/threads/372daf76ea0a98f871e3226e52958dd5097c79ed">Remove forEach?</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/80363c8b4992a248efe16bfb99b549c5ff5cd0a6">repeat loop enhancement</a>      &mdash; <em>Jason Pollack</em>
    </li>
    <li>
<a href="/threads/4640cad758e68922049b655e76af1d85a6161de6">Add a type like Double but with much more precision?</a>      &mdash; <em>tuuranton at tutanota.de</em>
    </li>
    <li>
<a href="/threads/335cfc0e3f6ef8ef1a47cf3a7b064e528ca3ddf4">Proposal: Improve switch control flow substituting fallthrough with a more safe one</a>      &mdash; <em>Jacopo Andrea Giola</em>
    </li>
    <li>
<a href="/threads/ff99eaba21296f2e05477a3e71c6f7a095741ad5">Calling default implementation of protocols</a>      &mdash; <em>Mateusz Zając</em>
    </li>
    <li>
<a href="/threads/5a97b0ff54a1994296cc84c4b8af6950de25d8c6">Review on SE-0007 (Remove C-style for-loops with conditions and incrementers)</a>      &mdash; <em>Nicky Gerritsen</em>
    </li>
    <li>
<a href="/threads/6eed2c90911a6afa41cdbc6105a9dedd203bf0e7">Proposal: Add Initializers For Converting UnsafePointers to Int and Unit</a>      &mdash; <em>Michael Buckley</em>
    </li>
    <li>
<a href="/threads/ff0d0b31d0dba091a64e72abeee515c5d651185a">Run Swift code at compile time</a>      &mdash; <em>Alejandro Martinez</em>
    </li>
    <li>
<a href="/threads/8b7a6d1641a4ab3eb766c1df5ec9284c91cd5c5c">Empower String type with regular expression</a>      &mdash; <em>Jerome Paschoud</em>
    </li>
    <li>
<a href="/threads/e5af212a5b3ebd8faa6ca33e469080122718e44a">List of all Enum values (for simple enums)</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/5ff924102cd99ae1ab897e0ee7a9778066cab8d9">Proposal: Closures capture weak by default</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/197d1adc3f659a0c06b389640b76e432876e1f31">Inheritance with a Constrain</a>      &mdash; <em>Thane Gill</em>
    </li>
    <li>
<a href="/threads/13b7b7149548dca4a8f3344d10505e8b4b1d7300">Covariance and Contravariance</a>      &mdash; <em>Simon Pilkington</em>
    </li>
    <li>
<a href="/threads/abcbe88d348aa8fe683df87d511bc939c657ecb3">Polymorphic behavior for overloaded == (and other) operators</a>      &mdash; <em>Frederick Kellison-Linn</em>
    </li>
    <li>
<a href="/threads/bed4011a8b0ce099c22b788e5e0bff48df29b822">Review on SE-0007 (Remove C-style for-loops with conditions and incrementers)</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/f919a4e4e076adf35d4d9466ad4815ba253f5766">Proposal: Do not allow redundant unwrapping.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/d6efccbaafd6b7c0f8901424d9d9016801e81c45">? suffix for &lt;, &gt;, &lt;=, &gt;= comparisons with optionals to prevent subtle bugs</a>      &mdash; <em>Al Skipp</em>
    </li>
    <li>
<a href="/threads/75a42c38e23c48cea8394f3726b9b76bb757b1fd">What is the real reason for wanting to remove the C style for loop?</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/53917814096a3f06a6b0600e3638cffab1339f54">Proposal: Add Flags to Disable [Optional] Conversions</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/b0bf92f8f4aa8ba1247dadb7952da937bfce39bf">Extending the for loop to have multiple clauses</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/230307dbc59ca0417cc16ecc12ee67c4f54b2a7b">Remove default case in switch-case</a>      &mdash; <em>Mustafa Yusuf</em>
    </li>
    <li>
<a href="/threads/fe500e76551a569afc39633ed403f75e2d440ec5">Proposal: Allow @objc(name) on enum declarations</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/c5888c3482453663ce58c6e4ed1130abdde7f977">Proposal: Change Obj-C name for nested types to include enclosing types</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/eeab7aa8bc59e8357434081381cee7755a680f6f">Proposal: &quot;break for&quot;, &quot;break do&quot;, &quot;break if&quot;, &quot;break case&quot;, &quot;break repeat&quot;, etc.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/b50a77da400927c04241e25c8ab9ca9957740557">Making asynchronous operations first-class citizens in Swift</a>      &mdash; <em>Tommy van der Vorst</em>
    </li>
    <li>
<a href="/threads/f8cad3fec3397b389d43b3c8af3d50461832eb55">SwiftyBeaver Logger supports Swift Package Manager</a>      &mdash; <em>Sebastian Kreutzberger</em>
    </li>
    <li>
<a href="/threads/b61c0918d6e3e975e81d48d40922cf5b4f19cd63">Swift Core Crypto</a>      &mdash; <em>Travis Beech</em>
    </li>
    <li>
<a href="/threads/d9457051951c0d4c36fe7d3a6793b8bdbc842a18">Proposal: An Either Type in the STL</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/2f5d6c49146582b354e0ab08743a8c22f33ffb73">Searchable Swift Package Manager index?</a>      &mdash; <em>Matias Piipari</em>
    </li>
    <li>
<a href="/threads/ac02509bbb88bed979323b601e0c9d4f24342f46">Reconsidering the (Element -&gt; T?) variant of SequenceType.flatMap</a>      &mdash; <em>Al Skipp</em>
    </li>
    <li>
<a href="/threads/71c0a8124c26a4323aa9d3d971c6afdbbdc4b717">Proposal: Stored properties for enums</a>      &mdash; <em>Jonathan Hise Kaldma</em>
    </li>
    <li>
<a href="/threads/20278080c26be5b14210e82461563f16fe500812">Extending the for loop to have multiple clauses</a>      &mdash; <em>Al Skipp</em>
    </li>
    <li>
<a href="/threads/e6bf34985e2872b340951eb61c833bb9964e1664">User Defined Attributes/Annotations</a>      &mdash; <em>Akiva Leffert</em>
    </li>
    <li>
<a href="/threads/7d378196fa751c424102542ab4a09768c886a044">Proposal: Replace labels with keywords and &quot;*&quot; suffixes</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/22f64be2c68489d4c59f4f9225efddaaa8105542">Enforcing guidelines</a>      &mdash; <em>Steven Van Impe</em>
    </li>
    <li>
<a href="/threads/2008c8881017e7a183e6b8d383dd17364b899e49">Proposal: String literal suffixes for defining types</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/680816c594c0813a0f167349b108b6f63dd643d3">Mailman?</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/d23ff302a168cf557d382d0e7f9acc89f74eb168">Proposal Review Schedules</a>      &mdash; <em>Tyler Cloutier</em>
    </li>
    <li>
<a href="/threads/930a0e24a5041ba125c84387d237f5b68cb45efe">Proposal: Extend unnamed let variable scope</a>      &mdash; <em>Jason Pollack</em>
    </li>
    <li>
<a href="/threads/1d11ca204b87d591c28b96d8586f7be396b7206f">Remove isUniquelyReferenced or isUniquelyReferencedNonObjC?</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/6eebf974632bb70a60e020a283d972279d0aaaf7">access control proposal</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/3751f46b9fe3fbbb945ee1b15457e60c448c1283">Proposal: An Either Type in the STL</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/eea01909afc2f127d1dbcbc81057700e9fe76029">Proposal: Intermediate mutation qualifier for protocol functions on reference-types</a>      &mdash; <em>Josh Avant</em>
    </li>
    <li>
<a href="/threads/04d423f9cc6b55817155d9f634339de54eb2f137">Proposal: Weak Native Swift Containers</a>      &mdash; <em>Riley Testut</em>
    </li>
    <li>
<a href="/threads/5a9f14e1695fe01ea7e4c7b9aa230fcd21b686d7">Proposal: Extend CG(Rect)Geometry with center methods</a>      &mdash; <em>D. Felipe Torres</em>
    </li>
    <li>
<a href="/threads/2d86dc6589fe1ac4b72d524854199d545b8387fa">[Review] Remove C-style for-loops with conditions and incrementers</a>      &mdash; <em>Denis Nikitenko</em>
    </li>
    <li>
<a href="/threads/fc0cd24c181103ec8059f923a0446d6a16a9c99e">multi-line string literals</a>      &mdash; <em>Travis Tilley</em>
    </li>
    <li>
<a href="/threads/cc74ccfdafa90d9b3deb48d1061bab28ddd5e3a8">Request: Ability to refer to an enum case in abstract (without its associated value)</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/ffd75cc8b61365eaab274c9ac7632dc686eae9d6">Warning when &quot;overriding&quot; an extension method that&#39;s not in the protocol?</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/b426725dd2b8a6dfcda1cfe3c5ca851d4f243b6a">Swift 3 Generics</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/eb3b3a28f3ec73a4a16e308b791c1aaee8d00ebf">Making protocol conformance inheritance controllable</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/327ee9dca04c30cd7451b0463938f286f88fde76">Foundation and value types</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/48d83d412e293fd47146df7b4d64b7d8f470527b">Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</a>      &mdash; <em>Seth Friedman</em>
    </li>
    <li>
<a href="/threads/cd312ebb1d3e3489c25056ed1db2e277d88c36d5">Swift source code formatting tool like clang-format for objective-c</a>      &mdash; <em>Håkon Bogen</em>
    </li>
    <li>
<a href="/threads/a5970c40a4677f8070cfed03ce4d58b321c4194e">Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</a>      &mdash; <em>Feijian Sun</em>
    </li>
    <li>
<a href="/threads/115b8b64609dcb9d5d202e201ba6106a8b3478eb">=?windows-1256?q?Proposal_for_Replacing_Keyword?= =?windows-1256?q?_=22subscript=22_with_=22subs=22=FE?=</a>      &mdash; <em>Feijian Sun</em>
    </li>
    <li>
<a href="/threads/239703b14522fcfc0045e44f08ed5162a4e537d4">Review: SE-0007 (Remove C-style for-loops with conditions and incrementers)</a>      &mdash; <em>thorsten at portableinnovations.de</em>
    </li>
    <li>
<a href="/threads/5c7faf2c866dcb28a6c488d6e71cb493180cb6a3">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Adrian Kashivskyy</em>
    </li>
    <li>
<a href="/threads/bf4bbd715cdb496579c2e45a8a7510733a3f4d0c">Making protocol conformance inheritance controllable</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/be3b6bac4b7fb9381e76fc8cfc3ded9ace6a9c9e">Protocol declaration inside a class</a>      &mdash; <em>Виктор Шаманов</em>
    </li>
    <li>
<a href="/threads/d74f28350a159a7bae1a83195ad197cbe0ac869a">Equality of optional arrays</a>      &mdash; <em>Jake Heiser</em>
    </li>
    <li>
<a href="/threads/b29b3ccec492df491f2452a2efdad284caad8aea">Proposal: &quot;inout&quot; in for loops</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/6be2c889e377800ee414247a10124d4839515953">Proposal: Auto-implemented computed properties</a>      &mdash; <em>Nathan Yee</em>
    </li>
    <li>
<a href="/threads/6b6a843cfcb45c0da7ddb6dd963bc3c7b4c08d2f">Closure delegation</a>      &mdash; <em>Pierre Monod-Broca</em>
    </li>
    <li>
<a href="/threads/828d2c81368c4d89d8cc45cb4f9741cbf6743f48">(no subject)</a>      &mdash; <em>John Siracusa</em>
    </li>
    <li>
<a href="/threads/989466e42e70461c62a9bf368c8e798964f51097">multi-line string literals</a>      &mdash; <em>John Siracusa</em>
    </li>
    <li>
<a href="/threads/0ea5cbc03e9cca73b942792f107258d26008954f">Proposal: Namespaces</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/f25aac56907f56dea3f73aaf4d4da4601c271757">Proposal Sketch: simplify optional unwrapping syntax</a>      &mdash; <em>Daniel Hooper</em>
    </li>
    <li>
<a href="/threads/14a4784b6a14109d2d44c57d418f256740ddc22d">Equality of enum with payload</a>      &mdash; <em>Jérôme Duquennoy</em>
    </li>
    <li>
<a href="/threads/3890342fd96b340e68e4805286a7f6c104803c75">Proposal: Add generator functions to the language</a>      &mdash; <em>David Waite</em>
    </li>
    <li>
<a href="/threads/3c09b2e1f96397bf2eaa6010a24917872792c37d">union types</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/1cda128c66be29dddefb067b61e9b83a8f06ec22">Proposal: newtype feature for creating brand new types from existing types</a>      &mdash; <em>tuuranton at tutanota.de</em>
    </li>
    <li>
<a href="/threads/54801c17a5eb7c3a55344a2460e179cac63d41e7">Object declarations</a>      &mdash; <em>Marc Knaup</em>
    </li>
    <li>
<a href="/threads/a5a28becd19b42aaf632f20e03d2f8787f0784dd">Proposal: An Either Type in the STL</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/d378750c599f81f56534a2fe1fd79f0d51d501f4">Proposal for Passing Arrays to Variadic Functions</a>      &mdash; <em>Arthur Ariel Sabintsev</em>
    </li>
    <li>
<a href="/threads/d0ab3633740e8879fbb974d5b277e0e6c4c1a640">Should we consider Swift improvements for indie solo programmers?</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/6b83915cc0c830a79e43d1a5616f2dfc157a9707">Explicit Protocol Conformance for Child Classes</a>      &mdash; <em>Arthur Ariel Sabintsev</em>
    </li>
    <li>
<a href="/threads/6e7bb68a8e85baec1e239a44c4acd9d7c809ae38">Is there a need for a BigNumber library in Objective-C/Swift?</a>      &mdash; <em>Otto van Verseveld</em>
    </li>
    <li>
<a href="/threads/f2963adb9be03a7edc944b2efa982c0e1280bcca">Review for: Remove C-style for-loops with conditions and incrementers</a>      &mdash; <em>Rainer Brockerhoff</em>
    </li>
    <li>
<a href="/threads/fd97d1f2e9c98989f6f68bef65b91b8fc5a10ffb">Add unless/if single line syntax</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/43b3b90a2660122977ea6c6157803a0adbe38cb5">Remove forEach?</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/67b22b90e90b54e6beb738c3a75ccfe8e1a86aeb">More flexible guard statement</a>      &mdash; <em>Jakob Egger</em>
    </li>
    <li>
<a href="/threads/45fe589a5c27509ca0f980e8ccaf0e33d7cff427">Proposal: conversion protocol naming conventions</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/e998d92625674d4017faf2d0e1770bac20278fe0">Proposal: allow delegating from a throwing initializer to a failable initializer</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/e855c0b727b74af40f8da65918f28776a6910ebf">Proposal: Re-instate mandatory self for accessing instance properties and functions</a>      &mdash; <em>Rob Napier</em>
    </li>
    <li>
<a href="/threads/d7b1b8c4ae4fd3c2e72b2cfbf7799328d952fbc3">Streamlining closures</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/16ef236acf3119e03bef56e90a16936e11ba7bb7">Proposal: Add generator functions to the language</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/1c5c5dd9db33117ae801c9ba53f7cac17f91fff4">Proposal: label-only constructors</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/7929297fb022e1de963a6131bf82ba31c37f3bb8">Proposal: Implement a rotate algorithm, equivalent to std::rotate() in C++</a>      &mdash; <em>Sergey Bolshedvorsky</em>
    </li>
    <li>
<a href="/threads/bf7962ac86031e96a8481795c41ef74522a4fc7a">Proposal: willGet</a>      &mdash; <em>Paul Cantrell</em>
    </li>
    <li>
<a href="/threads/281ecaa1608f5ca4c1ca5b45e604499cbe2f88f4">ASCIIString</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/8ed65496e84c06c770131e69fc3085a6d5da9aac">Proposal: Add replace(_:with:) function to the stdlib</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/16837ae1fb554419f29b3ce6dc2b818764536ce9">Proposal: Allow for/in to take GeneratorType in addition to SequenceType</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/901ab6b33d09af6da9d9863532c68e1fc9e3691a">Proposal to remove semicolons</a>      &mdash; <em>João Nunes</em>
    </li>
    <li>
<a href="/threads/375e38fb2d3d5d96f4df53fa1f993f665f3ad0cc">Proposal: Expose getter/setters in the same way as regular methods</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/85ef7072f088203bea925fb4e5c3526aa2067c16">Proposal: Give weak references the ability to notify reference-holders when they transition to nil</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/fa68d29761028751800eda0a5bc5bdfa8add6efe">protocol can only be used as a generic constraint because it has Self or associated type requirements</a>      &mdash; <em>Marc Knaup</em>
    </li>
    <li>
<a href="/threads/62db73fb2aa5bb7013bbab5f030a8e86adccf20d">Proposal: Enclosed variable in extension scope</a>      &mdash; <em>Nutchaphon Rewik</em>
    </li>
    <li>
<a href="/threads/2c352d9e37c25c62d9d17aaf24236c58d42b5ce3">Proposal: Add Safe Subquence Access Via subscript For ColloctionType</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/d8ce367ae058845c50f6bcd0dcb4b35a9b0485cb">Disappearing AnyGenerator/AnySequence/AnyCollection wrapper types</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/09504a4b5b0ce8022e3cc256026b2013c884358a">WYSIWYG Swift</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/a998ca534fef6a90321f1cda8baa7088fd9851d7">Proposal to remove semicolons</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/e0331e80806be61e8cf813e954767a9c1d4a4a3b">access control proposal</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/3dbbab019acaa8257ccdd51bb73356dd13ef93b6">access control proposal</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/14f0af2e002f1a6bcece144e153917da25f3d227">Getting rid of willSet/didSet</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/bc5d4617d31f8d7b0ccf8da1bcc855346188476b">Getting rid of willSet/didSet</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/20db3cdcb1cf853c64a67dfb4c9c1171640c341a">Arrays and Optionals</a>      &mdash; <em>Sean Kosanovich</em>
    </li>
    <li>
<a href="/threads/d620a8d085cb6127eeb3be64a22280b31532e8d7">Proposal: Add public(objc) modifier</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/8cbd1e8b22d1801fe3afe426640bb3d48e03fba3">Changing postfix &quot;self&quot; to something clearer like &quot;type&quot;</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/b7ae90a6a0ba7c904e76bc51d39a5e1f2f1dbd47">[Proposal] Powerful enumerations built upon protocols, structures and classes</a>      &mdash; <em>Marc Knaup</em>
    </li>
    <li>
<a href="/threads/e22f7a3a40a25e7a87e0b42d5ba044fa3e925fc8">Better Self support with class funcs</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/fe1a6a18fc7d5eaf7866a81299920408c700e276">Remove (!) logical negation operator</a>      &mdash; <em>Bruno Berisso</em>
    </li>
    <li>
<a href="/threads/2c7181159e77aaf6da7f39ea618bbfadcbd2baad">Proposal: Allow `[strong self]` capture in closures and remove the `self` requirement therein</a>      &mdash; <em>Greg Parker</em>
    </li>
    <li>
<a href="/threads/ca1ccdc99b93505cc4c93e6f32f7ccc95ffe8e4b">Immediately-called closures should be considered @noescape</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/7b5adbf73d3a4d52604d2a9d59aef53c0f57cb77">Optional Setting</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/f6b6e8d2b6dad993d6c227e8ef959fe9753068e2">Proposal: Keep var on Function Parameters and Pattern Matching</a>      &mdash; <em>Francisco Costa</em>
    </li>
    <li>
<a href="/threads/49855aec8950d7e3180ed993c8351f56e033dd6f">Proposal: &#39;selfless&#39; keyword for refactoring duplicate code from initialisers</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/8367ce0cc963e4f44116de7af122657d73800940">Proposal: &#39;selfless&#39; keyword for refactoring duplicate code from initialisers</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/2fd908528bbfac8b7e384a4efdb330e8f7294129">[Proposal] Warn about implicit property access in own setter</a>      &mdash; <em>Marc Knaup</em>
    </li>
    <li>
<a href="/threads/0c945fa4401cc923c2eaa5adec394fdafb950626">Proposal: Add implicit/default else-behaviour for the guard statement</a>      &mdash; <em>Vester Gottfried</em>
    </li>
    <li>
<a href="/threads/692f0895ae6ffd3c2090105b47d84c550c87cb9d">[Proposal] Higher Kinded Types (Monads, Functors, etc.)</a>      &mdash; <em>Will Fancher</em>
    </li>
    <li>
<a href="/threads/2803d1740a5569a7252890f29d539a9c474a7599">Spread Operator as Shorthand for Map</a>      &mdash; <em>Sean Kosanovich</em>
    </li>
    <li>
<a href="/threads/b92c057173fdb6d73a98655ae7dd58bae3851f4b">Proposal: Bitmask-style syntax for Method Chaining</a>      &mdash; <em>Chuquimia, Max</em>
    </li>
    <li>
<a href="/threads/87fad0f48074419c0a2782e26d27f081b188c9da">Proposal: [stdlib] Remove withUnsafe[Mutable]Pointer[s]()</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/a76665ff578dd519fcf64b67b5f30201054e669a">Proposal: Extend the &amp;x -&gt; UnsafePointer behavior to work with immutable values</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/ee14f0a3851f0a7094152508dcbc206b6f32f347">[Review] Require self for accessing instance members</a>      &mdash; <em>Hirad Motamed</em>
    </li>
    <li>
<a href="/threads/2d4f0daecc41989598957d3a06d459e85d9be0d4">Proposal: Add syntactic sugar for iterating over an Optional&lt;SequenceType&gt;</a>      &mdash; <em>Marco Masser</em>
    </li>
    <li>
<a href="/threads/6a223aaa7fe55ff35f4cae508ec9a134fba7708f">Drafting a proposal: Make conflicting with protocol extension methods an error</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/7d9ef5bb05c0ccf3e01c763fa70d483fcf837b3b">Proposal: Add @requires_super attribute</a>      &mdash; <em>Vester Gottfried</em>
    </li>
    <li>
<a href="/threads/2a070a0ce5ba8b4f69a7159882948a7dc62125fd">[Review] SE-0009: Require self for accessing instance members</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/e3c171de7941c0b56c4995ce3e9beaf8232a718d">Allow strengthening argument types in functions declared for protocol conformance</a>      &mdash; <em>Terrence Katzenbaer</em>
    </li>
    <li>
<a href="/threads/abe2b6596dc4ea85e009aea856d4ffba6407fcb5"> [Review] Require self for accessing instance	members</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/fe4e7d5c8973f8e33e09b4f6ca01fac9be4a53e1">Allow strengthening argument types in functions declared for protocol conformance</a>      &mdash; <em>Terrence Katzenbaer</em>
    </li>
    <li>
<a href="/threads/6cbd100d4ded06c0fb2b5faab339fa02db982416">Allow strengthening argument types in functions declared for protocol conformance</a>      &mdash; <em>Terrence Katzenbaer</em>
    </li>
    <li>
<a href="/threads/2d4726d3c444f84adad73c37f1a50792245f1a14">Allow strengthening argument types in functions declared for protocol conformance</a>      &mdash; <em>Terrence Katzenbaer</em>
    </li>
    <li>
<a href="/threads/87f3f40ee87f52d057306a3eea771dcdb00eb2b0">Remove (!) logical negation operator</a>      &mdash; <em>Yichen Cao</em>
    </li>
    <li>
<a href="/threads/3db69050504aee362978fbedd22a18a3749adcad">[Proposal Idea] catching functions for composable and cps error handling</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/6f6301adbc248632f2e11a9f325ef8a4da186c2f">[Proposal Idea] catching functions for composable and cps error handling</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/6d49b01ba5d2cacb9af8bb64c98b3dba3bb07191">[Review] Require self for accessing instance members</a>      &mdash; <em>Radosław Pietruszewski</em>
    </li>
    <li>
<a href="/threads/aa9fcc5ea18fcc1b272e645304fa5ea885e6e0ee">[Review] Require self for accessing instance members</a>      &mdash; <em>Denis Nikitenko</em>
    </li>
    <li>
<a href="/threads/d3608555ce091aeb267ffb62b179a14798a030d9">[Review] Require self for accessing instance members</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/ae68817fb4415d0560aff1cb161cec3463e5f391">Bool vs. Optional&lt;Void&gt;</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/999e43477180ccb8bb2ee8662438f22d5abeba19">Proposal: Replace logical AND (&amp;&amp;) and OR (||) operators with natural language &quot;and&quot; and &quot;or&quot;</a>      &mdash; <em>Yannik Bloscheck</em>
    </li>
    <li>
<a href="/threads/61d4ab98163c7179c95469f5b8829dd1cd4f9300">Pre proposal: Should there be a way to distinguish class instances from struct instances</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/ca025d7433c350c1d8ce873617868dcc08f8697f">Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/4bf2330d4e7321c779f47a36982567e002c3142b">[Proposal] Property behaviors</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/fe1cbbece4258ae6d681611552effba612c17b0b">Proposal: partial initialization before returning nil from an initializer</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/c8476bef89285da1132c013e9240a9e01b3d4dd2">Proposal: Python&#39;s list, generator, and dictionary comprehensions</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/0f65a12823037586bd45430e01cd0509f21996c8">3.0 if-var workaround construction question</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/95e23791aeba7b37a030d9c192bcbecb5a90febb">let type binding</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/6581b7335e3b5f296c88e2c47361fbf70f0b2f67">Request to add middle dot (U+00B7) as operator character?</a>      &mdash; <em>Ethan Tira-Thompson</em>
    </li>
    <li>
<a href="/threads/140c452c971feef1d8d515dede0b98e48ca3bcd7">Fwd: let type binding</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/682575c3599591881fce34c92d4e3fd489c31fde">Proposal: Python&#39;s multiple comparisons and multiple assignments</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/b54d338e897ba141255f3cb636028f311e1fea8a">[Proposal] Factory Initializers</a>      &mdash; <em>Riley Testut</em>
    </li>
    <li>
<a href="/threads/7685c0f1bb683e3cd3d5f958da540bb6fac03109">Proposal to change subscript value type on Array and other collection types.</a>      &mdash; <em>mich at el.cx</em>
    </li>
    <li>
<a href="/threads/809741a4238035c105b0045a406a0858604a42ae">RFC: Proposed rewrite of Unmanaged&lt;T&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f673b2c715230705d7f59cb019d2f367871c9fd1">higher kinded types vs Python&#39;s syntactic sugars</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/1ebc135662987646f4a6827c9564d0abe6437f82">[Proposal Idea] dot shorthand for instance members</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/4cd868c1f816f32032cd4b68e3bd54f21fe8fc8b">Proposal: Allow Type Annotations on Throws</a>      &mdash; <em>David Owens II</em>
    </li>
    <li>
<a href="/threads/ff1871dbf53992944275244a166747ee244a025c">References in Value Types (Deep-Copy-OnWrite)</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/f6560518d78085a275577e6cb2e2f1202560fb20">[Proposal] Property behaviors</a>      &mdash; <em>Berik Visschers</em>
    </li>
    <li>
<a href="/threads/248113b3606b5b3c0633832571cb0fde7d62fe49">Readwrite reflection in Swift</a>      &mdash; <em>Gergely Orosz</em>
    </li>
    <li>
<a href="/threads/4b17af0b200934a8daad6bea02a43276886159c5">Proposal: Python&#39;s indexing and slicing</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/e48c80de0fd35d4fbf8e55e58334ad241c81503a">[Pitch] Use enums as enum underlying types</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/f3e471ad87faaddc4ce2819634a414cd2937df45">[Proposal] Swift 2.2: #if swift language version</a>      &mdash; <em>David Farler</em>
    </li>
    <li>
<a href="/threads/1c4282f0aaa3ba78e8a812f63a3e78174db1f30d">[Proposal] Replace thin arrows (-&gt;) with fat arrows (=&gt;)</a>      &mdash; <em>David Fekke</em>
    </li>
    <li>
<a href="/threads/c2a9eec443e47f1855da2101d4185d82fd12f1f7">Shift operator: the type of the second operand</a>      &mdash; <em>Jeremy Pereira</em>
    </li>
    <li>
<a href="/threads/8957ee17c762f5d141c7c3faa12d5e0aaff97a08">Require self for accessing instance members</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/85d8ba18835b948482e1fad06401f634e6e82068">Trial balloon: Ensure that String always contains valid Unicode</a>      &mdash; <em>Paul Cantrell</em>
    </li>
    <li>
<a href="/threads/c2139a9fe69944d9b54a429a9a201215f26d0a2d">Proposal: Remove % operator for floating-point types</a>      &mdash; <em>Stephen Canon</em>
    </li>
    <li>
<a href="/threads/69076c211cf7a5056455f3fc216f07c27a255144">[Review] Require self for accessing instance members</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/2d265c36035869ccbdac066a150210567c141792">Tuple accessor shorthand</a>      &mdash; <em>Alexandre Lopoukhine</em>
    </li>
    <li>
<a href="/threads/fb684d2acbbcb7f0c4e4905d9b388a88ce3d064e">[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/f20722b191edc7cc7d3c87a08b39358dd0925a55">Proposal: Add .times method to Integer type</a>      &mdash; <em>Cihat Gündüz</em>
    </li>
    <li>
<a href="/threads/8cb2b8ff5780785faa377e91f2ca9040e0cdacb8">Proposal - Allow properties in Extensions</a>      &mdash; <em>Nutchaphon Rewik</em>
    </li>
    <li>
<a href="/threads/cb5627a1b6b20fc7937102e698e738a6ebb92b3c">[SE-0011] Re-considering the replacement keyword for &quot;typealias&quot;</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/6c0a4e2ab75ff6622e3754ffc02d1ed63d0cb1be">[Pitch] make @noescape the default</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/a51baa478194839a35660c09901468b4cf6a801a">Proposal: Rewrite Swift compiler in swift to get ideas for further language evolution.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/a060baeebc5e60255c72157c0129542c6e6828b2">Fluent syntax (replacing void with a useful default return value)</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/0ad80955351be0a2bcdb2b9e2fa0ae8ab7bf72b7">[SE-0011] Re-considering the replacement keyword for &quot;typealias&quot;</a>      &mdash; <em>Loïc Lecrenier</em>
    </li>
    <li>
<a href="/threads/8adf0dc53569ccfba039279b17c7ee4219dcedc5">rethrows as first-class type annotation</a>      &mdash; <em>Alexandre Lopoukhine</em>
    </li>
    <li>
<a href="/threads/dbc673d8f356b5e20eed36b46263d16e511f391c">Using &quot;where&quot; to filter an array</a>      &mdash; <em>Charles Constant</em>
    </li>
    <li>
<a href="/threads/cc4a16d113b0e548ebc41d9dace31a534b4f7d03">[Proposal] function &quot;return&quot; optional keyword.</a>      &mdash; <em>Craig Cruden</em>
    </li>
    <li>
<a href="/threads/c3ef5a0a390d719e1895e4b4e83e9797d4d55a98">[Proposal idea] Support for pure functions</a>      &mdash; <em>Jimmy Sambuo</em>
    </li>
    <li>
<a href="/threads/128ba21c255d0d40965a9c810b9b382a487f1e76">[Proposal idea] Improved interop for ErrorType-&gt;NSError</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/f271112b54b22cf8c3230c2358d4bfd7224b05af">Brace syntax</a>      &mdash; <em>Alexander Regueiro</em>
    </li>
    <li>
<a href="/threads/da656a44dbeb2aa50e59dbcf8a15217b0541ed34">Proposal: Make braces optional much like semicolons.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/7564e827676bd752bbafce2e2abf7a89b032cd66">Proposal: Port open source productivity apps to Swift to gain insight into language evolution.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/a8b9c0fc053e2be5727f3e3ab3f9563e81095239">SR-227 Remove C-style for loops</a>      &mdash; <em>G Alexander</em>
    </li>
    <li>
<a href="/threads/60d22b5540bb784e20433e1a4db7b4750f5060cd">Character vs. String literals</a>      &mdash; <em>Andrew Duncan</em>
    </li>
    <li>
<a href="/threads/cf62bb807cb2bef83ad6c0e8a1e020658cb373e5">[Proposal] Lock file for Swift Package Manager</a>      &mdash; <em>Ankit Agarwal</em>
    </li>
    <li>
<a href="/threads/5c00734eca234fc663549e312230084fa8ba32ba">[Pitch] Clarify behavior of comments near operators</a>      &mdash; <em>Jesse Rusak</em>
    </li>
    <li>
<a href="/threads/6507835add6eea1547c09040960552522ce5885e">ternary operator ?: suggestion</a>      &mdash; <em>Alexandre Lopoukhine</em>
    </li>
    <li>
<a href="/threads/f706f26b78893ffa25c2e7325413ccfa11148303">ternary operator ?: suggestion</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/d0468c5da0ca6359496a62b694453ae57cbadf17">Psychology and sociology of Swift feature proposals.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/c45a5a6ae18d1a557773d80289045b2df330915d">FYI: Apple holiday shutdown</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/c729ae422bae4a211ec8671783965b9bb2a62854">[Review] Add a Lazy flatMap for Sequences of Optionals</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/654938cc457f94e397945a9e55ff822c2f1d6c1b">A native option set construct</a>      &mdash; <em>Dan Stenmark</em>
    </li>
    <li>
<a href="/threads/0f5bf449e6672ec5b992428589fbcb02629b4d94">Proposal: Add .times method to Integer type</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/137875b06c1a6e070536ca74fc16901f960e6e31">[Proposal Draft] Flexible memberwise initialization</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/7999b602fe017246688e9106b1cfa10c687ea482">Proposal: Support for commit comments</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/f0ce5272b4e70367d2d9348c48bdaea474e65e62">Fwd: [Pitch] Single-quotes for Character literals</a>      &mdash; <em>Andrew Duncan</em>
    </li>
    <li>
<a href="/threads/ef819456d938bdc2e7b0bb307f6fdfdc485c1528">[Pitch] Achieving a heterogeneous collection of Equatables</a>      &mdash; <em>Roopesh Chander</em>
    </li>
    <li>
<a href="/threads/1a7579e2b33ab0e82d476cce41aec3b7e6c6b7d0">Swift case conventions for Enums</a>      &mdash; <em>Michael Wells</em>
    </li>
    <li>
<a href="/threads/80bd9887a5ccdb33a40c8a5e898cd45242d4c6d0">Compile time assertion / checking?</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/1da20ec06400583e2d82d0d944d552cb4db00452">&lt;&lt; Operator to append to array</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/1b0744b5f618c822337c0f41958f73e013387b3e">Final by default for classes and methods</a>      &mdash; <em>Tomáš Linhart</em>
    </li>
    <li>
<a href="/threads/bfae80efe7448f7ed55e794009274fd8a116d38a">Long, multiline strings</a>      &mdash; <em>Carlos Rodríguez Domínguez</em>
    </li>
    <li>
<a href="/threads/a29319c0325c5403c5bf74262e408ba2b697b444">Lambda function syntax</a>      &mdash; <em>Alexander Regueiro</em>
    </li>
    <li>
<a href="/threads/cce32664da1c7e2247f54c5e0a6e74deb42b8a6f">Proposal: Enum &#39;count&#39; functionality</a>      &mdash; <em>Andyy Hope</em>
    </li>
    <li>
<a href="/threads/e99e99fa46b44d81e7c9ff89239fcba83ffd125c">Proposal Sketch: simplify optional unwrapping syntax</a>      &mdash; <em>Kyle Carson</em>
    </li>
    <li>
<a href="/threads/d22a591d9d3dea42878540a903dd0f00e8ed12a7">Optional dictionary subscripts</a>      &mdash; <em>John Holdsworth</em>
    </li>
    <li>
<a href="/threads/e65cec8ddad1528f14003cb7f3b74d78f6e12860">Proposal: Add a Future type to the language</a>      &mdash; <em>Thomas Visser</em>
    </li>
    <li>
<a href="/threads/9714f40a9f3bb1f84451097d060d82f5491beba4">Native Observer for Swift</a>      &mdash; <em>Mohamed Ebrahim Afifi</em>
    </li>
    <li>
<a href="/threads/3966fc24f7f7f8cc51596bb59ac11841435041c8">Pre-proposal: Convert reference params to tuples</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/2931b816ed48801604287b41660cf1ee099cd881">Coroutine for Swift</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/4c1e0a554f134ca120724511a3bab5d6a9a0803c">Proposal Sketch: Bring flexible array members in as Array|UnsafeReference</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/e38d7375415bfa2916472fee6fde7c0f5cc6ab65">[Pitch] Guarding on enum values</a>      &mdash; <em>Andrew Duncan</em>
    </li>
    <li>
<a href="/threads/cc64eed250e884e5c810abca5b901b8bf88885f4">Community Proposal: &quot;This Week In Swift&quot; newsletter</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/cdb415331c9c42c4ebceb133293fab8a5fedcc6c">Pitch: Copy constructors for structs</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/95d3a22e684ffa4ef6d79597c57f453ccd9f01f2">Pitch: Deinit for structs</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/d18f2a3c749cd910ce24af5167062d735f0d2a19">Immutable Structures</a>      &mdash; <em>Lino Rosa</em>
    </li>
    <li>
<a href="/threads/dbee1fbf436a054407caa932583032fa877f8a02">[SE-0011] Re-considering the replacement keyword for &quot;typealias&quot;</a>      &mdash; <em>Kyle Carson</em>
    </li>
    <li>
<a href="/threads/1d014475f877607217148ee2bf93c75b326709d5">[Proposal] Make `didSet` also available for `let` property, or something new such as `didInit`</a>      &mdash; <em>shengjia wang</em>
    </li>
    <li>
<a href="/threads/261ec06b23011f1aeb45be96c30ca4f32e08ad48">&quot;Assume&quot; directive for classes and methods</a>      &mdash; <em>D. Felipe Torres</em>
    </li>
    <li>
<a href="/threads/cc40b449364119a5b0f4b172acf604d3a12f8107">Mixins</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/3b11800f3b752ebda971f73fd3856a6956018d68">Convention to avoid conflicts with keywords</a>      &mdash; <em>Rudolf Adamkovič</em>
    </li>
    <li>
<a href="/threads/d7e859ea8e44c395c119393ff47c9fedb809f96e">Replace &quot;continue&quot; keyword</a>      &mdash; <em>Rudolf Adamkovič</em>
    </li>
    <li>
<a href="/threads/66568f19045ca291dbd979dc99990eb2a1f048bb">Proposal: One-past-end array pointers and convertibility of nil for interaction with C APIs</a>      &mdash; <em>Árpád Goretity</em>
    </li>
    <li>
<a href="/threads/cb5f6abaffbba416d41805015a409daca68912fc">Final by default for classes and methods</a>      &mdash; <em>Rod Brown</em>
    </li>
    <li>
<a href="/threads/15f54aec4bc010f3b7b9d5d1bad2052d94785a43">Community Proposal: &quot;This Week In Swift&quot; newsletter</a>      &mdash; <em>John Muchow</em>
    </li>
    <li>
<a href="/threads/02ae4c76d8eaa5223982879d7f75fc5574e8ccff">Epic: Typesafe calculations</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/55aed440c13434d70d401a12623c335b920cad35">Support Transducers</a>      &mdash; <em>Jason Jobe</em>
    </li>
    <li>
<a href="/threads/e002490986f47db11703e2f93727e3f0a42e4e49">[Proposal] allow protocol extensions to contain inheritance clauses</a>      &mdash; <em>Sash Zats</em>
    </li>
    <li>
<a href="/threads/d4f77936783c0cf139529683b9ab0bf0740dbe04">Rename joinWithSeparator() to join() and make it work with all classes.</a>      &mdash; <em>Sebastian Mecklenburg</em>
    </li>
    <li>
<a href="/threads/78c7a00566507fb3648072535a737317b394fce1">Support Transducers</a>      &mdash; <em>Jason Jobe</em>
    </li>
    <li>
<a href="/threads/8bfac405c6860436a68092cc42a01472b2741717">Add stable sort algorithm</a>      &mdash; <em>Arsen Gasparyan</em>
    </li>
    <li>
<a href="/threads/98e118bfd8da563ea041c36d53e1c4e01264b59f">Proposal: console input reader/handler in swift</a>      &mdash; <em>Sergo Beruashvili</em>
    </li>
    <li>
<a href="/threads/150ea7d62345b0a6945c9bbbe4f590c5f5d76eff">Advanced type system for preventing data races.</a>      &mdash; <em>Nickolas Pohilets</em>
    </li>
    <li>
<a href="/threads/32a5ec32892fb08eda8ae0e963f5fb91578a804b">Support for custom attributes</a>      &mdash; <em>JOSE MARIA GOMEZ CAMA</em>
    </li>
    <li>
<a href="/threads/d86d43f5a719432576089c1cfeeab27d74cc25c7">Adding custom attributes</a>      &mdash; <em>Radosław Smogura</em>
    </li>
    <li>
<a href="/threads/42a62dc200ac285c27a7d69e7b91a4af3cf7a63e">Pitch: Guard for declaration</a>      &mdash; <em>Angelo Villegas</em>
    </li>
    <li>
<a href="/threads/34c4257e9bde666b2976f46bd88d9599b3f47409">[Proposal draft] Generalized Naming for Any Function</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/d94908062b5efab4d86e7be81087cf91c15532db">[Idea] Expression to retrieve the Objective-C selector of a method</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/6e612eecb9616bcd8af1d54079cff873f5ea9001">Beef up Imports</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/e442a6b579b1903e525461e1ce44c2599685652d">use standard syntax instead of &quot;do&quot; and &quot;repeat&quot;</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/5f32cf2a84dd82a3c570ecb76f4468fd85313bb6">Closure Syntax</a>      &mdash; <em>Ethan Diamond</em>
    </li>
    <li>
<a href="/threads/975fca4c786a1458ad70f95cdd6ec901a98a6ca9">[Idea] Add an (Index, Element) sequence to CollectionType</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/bf54cece7184e19e1543d213532ed4c73a0a5fd0">[Proposal] Lexical scope statement (with .. do)</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/0d593a744e0d07c9a5de0e3e7e3837bf9d8dd6d9">Failable Initializer Suggestion</a>      &mdash; <em>Manfred Lau</em>
    </li>
    <li>
<a href="/threads/4af55aaf2840551b6644086736ae0e39be5f6167">Proposal: CollectionType.cycle property for an infinite sequence</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/34e9eb2a6abcb8c397fa86abe17e1cc7f232870a">[Pitch] Option parameters (potential resilience advantages)</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/84b0a0c0d0f7a091ae7367ed9e50e6188645a25d">Self behaves inconsistently in protocol method signatures</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/3180952b0187b74b9583dce2ed3c36141b61f864">Asserts should not cause undefined behaviour</a>      &mdash; <em>Joseph Lord</em>
    </li>
    <li>
<a href="/threads/60f6cde759ceae91c40a8b06ddd105d88dc50c25">rename dropFirst() and dropLast()</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/1ac35b1d42e5aace2986cc3e05ebfde1ac72ec20">Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/8afd027ecb42e7866bb376d70aa4b05ff2ae0c04">JIT compilation and execution</a>      &mdash; <em>Joseph Bell</em>
    </li>
    <li>
<a href="/threads/5a5a2d7587b4d79ad9a8babfc91a766db6c4f8d4">Proposal Idea: A way to organize generated interface for modules</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/bc5113230c6aa840ca87e31cb7fd7bc75796df8e">Performance and Tooling support</a>      &mdash; <em>Nabeel Imtiaz</em>
    </li>
    <li>
<a href="/threads/f18a6db8e7f2eeaf026113c7750a0015fe61c9c3">[Draft Proposal] Require `final` on protocol extension members</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/e6e06e05303ebddc87718d82b99e2158cefabb2a">Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/69178069cf1619a4aae714bc519f81621db1501d">[Proposal Draft] automatic protocol forwarding</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/760b9e063f550333cd628506b4f53ac5f5366229">Performance and Tooling support</a>      &mdash; <em>Nabeel Imtiaz</em>
    </li>
    <li>
<a href="/threads/f4259a3e9c9464a78654f761fd1101b4e47512a4">Why aren&#39;t source to source transformations part of the Swift language standard?</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/113799cd8b3b5d596196516a265ded97330a0ad6">Proposal: Add function SequenceType.find()</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/065677156763902c03cf120ebdea9a7071079cdd">Custom summary for Mirrors?</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/1530539f5959d9253612e4f1d264be8936f8004b">[Proposal] Scoped resources (like C# using statement)</a>      &mdash; <em>Trent Nadeau</em>
    </li>
    <li>
<a href="/threads/4ba80e539a93f8fc23fba6911c152742140557c4">[Proposal draft] Generalized Naming for Any Function</a>      &mdash; <em>Patrick Smith</em>
    </li>
    <li>
<a href="/threads/728466efd1ff2d94796571efc312a14be565972a">[Proposal Draft] automatic protocol forwarding</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/11e948624332b0add307fcf8d6b728482cae5c04">Keeping unused values around until containing scope exits?</a>      &mdash; <em>Ollie Wagner</em>
    </li>
    <li>
<a href="/threads/a9d9ceb4e432dc5d3ab69d905a9b078532832176">Proposal: Add SequenceType.first</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/b5744df4131019b98ac96ee1d691d6c96e927760">Proposal: Allow @available(*, unavailable) methods to block resolving to an inherited protocol method</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/717ec674d493109312605faebbd7f76502e4b68f">Pitch: &quot;while&quot; clause on for-loops</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/1b5c589fe5556a5249a2538d78514697f22e80ca">Remove forEach?</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/06ac2be04a41a5ff6009923d9b999098b805e647">[Proposal] Protocols on Steroids</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/058c2d2b4981251c6b566710aa7ab13b49034015">About the PermutationGenerator</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/b2a0802081d9224486ee37802424ec0d6372b87b">[Pitch] Version-pinned patching of public declarations</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/18df3d07c95c9ef2eee7db882aa30caf6b8cb5b8">Testing Assertions</a>      &mdash; <em>Mohamed Ebrahim Afifi</em>
    </li>
    <li>
<a href="/threads/5226699dc59f3b1c439988b9edf698ab8411f7cb">sortBy, minElementBy and maxElementBy methods</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/74fc2040081b71dd8378e791ae333d6b1c5be74c">missing proposal about missing @noescape of &#39;SequenceType.flatMap&#39;</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/f7e9da1be3c8bab3445f518a1f93a0e3902ebc15">Philosophy question: Foundation and Standard Library</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/d0571cc5cbe85fd17496d90bde35c9076d4519a5">Proposal: Add types BufferedSequence, BufferedGenerator</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/b06f7b6683e5ea77745fbc72a98be45761b51034">Proposal: Support constant expressions in enum case raw values.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/e18e52b815a7097e694cb9f90b2b4e0dcef95041">Proposal: Variable invariants</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/a48fa5aa458f81d1abf5dd94e015da9d69e9c5b9">Proposal: Allow comparisons of arrays possibly containing nil</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/2855b16bd5f35792b1bfa0cde19d8e81bb61c2ba">Inquiry: Status of SR-122 ?</a>      &mdash; <em>plx</em>
    </li>
    <li>
<a href="/threads/017e2e919e75ec820470537a586665974c7050e4">Swift-Native Alternative to KVO</a>      &mdash; <em>Jared Sinclair</em>
    </li>
    <li>
<a href="/threads/78bd515a662080b71298d619b0de24fd181539f0">Empower String type with regular expression</a>      &mdash; <em>John Joyce</em>
    </li>
    <li>
<a href="/threads/1b5e4e4566caf9fbad59087d6bf56bf3a00fd5c7">[SR-119] AnySequence --&gt; Any*Collection promotion</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/a42f3f6d3e88e003247a6c273a42f04952bb238a">[Proposal]: Free the &#39;$&#39; Symbol!</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/793377a7dbcb19b4cf56ee9d33fe857c36c887e7">Customized Inline Init Closure</a>      &mdash; <em>Weston Catron</em>
    </li>
    <li>
<a href="/threads/9e5ffb50654ea4a35a97fe53b9d66c70df5711df">[Proposal] Separate protocols and interfaces</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/de751ec13889ee072d4de7ffaa2617a0174ceb0b">Declaring a function that always returns nil</a>      &mdash; <em>Andrew Duncan</em>
    </li>
    <li>
<a href="/threads/166e26821b30716572d8bcde2d5fe898d3dc4e8f">[Proposal] Separate protocols and interfaces</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e8b64094897a28103a11c809dd45dd2964eb4422">Idea: delegates as protocols and property types with specialised behaviours.</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/179376071292c3fd2b18486ea2a71e08ca562a58">[Draft Proposal] Require `final` on protocol extension members</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/6a780c5f543322f8798364800cb9f6e1340fc878">Proposal: named invariants for variable declarations</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/67413160b0c977789863dd825decbef5dfb40604">Thoughts on clarity of Double and Float type names?</a>      &mdash; <em>Alex Johnson</em>
    </li>
    <li>
<a href="/threads/812f3a98152fba197194226b354e6647ef001a02">Then Support</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/8ac89b643cba3b7bdc4287aa5d922086f035984d">[Proposal]: Drastically improve searching API (indexOf(…)) of CollectionType</a>      &mdash; <em>Vincent Esche</em>
    </li>
    <li>
<a href="/threads/3d5db8c489b9bff27bba3177dd892609ed199235">Keyword Discoverability</a>      &mdash; <em>John Joyce</em>
    </li>
    <li>
<a href="/threads/0648ca9940afbb0cf40d272cf1970a4e35be430d">[Proposal] Add zip2WithNilPadding function</a>      &mdash; <em>Антон Миронов</em>
    </li>
    <li>
<a href="/threads/13c31853258aa636dbf67256028c2ef62ab8d184">[Mini-proposal] Require @nonobjc on members of @objc protocol extensions</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/13083f07191a13ea84048bfeea7c389787158085">[Proposal]: support disable to trailing closure syntax</a>      &mdash; <em>QQ Mail</em>
    </li>
    <li>
<a href="/threads/17d1a923c61c40fe358248e5da9510f5494595f9">Require use of override keyword to override dynamically dispatched methods defined in a protocol with a default implementation</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/fdd7cc79d1496b9e68a2b437ffce222b2a3318c8">Be able to initialise empty dict with array constrcutor</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/68ab7a2a83cace63c895887e5b7648edf96d9ed2">API Guideline bugs and enhancements</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/b79e003fe81cc22b44b4d11a1b0055e6073b3609">Default lazy constructor</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/b2327ffb6418b1f83b25e9ddb0f3c99f0479eab8">Pre-proposal: &quot;private(extension)&quot; access modifier?</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/e34f89a183e4035bf465fbfb56fdd938e4ebb3f4">Support for newtype feature/typesafe calculations</a>      &mdash; <em>Grzegorz Adam Hankiewicz</em>
    </li>
    <li>
<a href="/threads/cfba4ac0209aed1056a00234b679eb9a25bc3a1e">[Proposal]: Rectangles and other common structures.</a>      &mdash; <em>John Randolph</em>
    </li>
    <li>
<a href="/threads/5c2f5f39c57e98972e1054f5883eb2b16e15d826">[Proposal]: Rectangles and other common structures.</a>      &mdash; <em>John Randolph</em>
    </li>
    <li>
<a href="/threads/c75cb0ff2ab22095d5c33648a7468bc9c3f4224c">Require use of override keyword to override dynamically dispatched methods defined in a protocol with a default implementation</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/33d33afe4fee775c4cb43a1a360ec4e13f7719d4">Require use of override keyword to override dynamically dispatched methods defined in a protocol with a default implementation</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/6a1da45c3e0b392a91d3b4269d8877facf8d41a1">Rename &quot;guard&quot; to &quot;unless&quot;</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/ab9ea33dbd37987a0a57f54ea73d6bca47f9ee55">Unify covariant return type behaviour</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/cdc3e0c581773696d00ea7e89b5afce21deb21dd">STDLibs</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/b3180928adaf6aa45e4f8e84abc59ee8db624599">[Review] SE-0018 Flexible Memberwise Initialization</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/ebd6f166964c3be170478646aece05f9feba359e">Type Safe Algorithms</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/38efa057ac3eeddf1ff4327dabb917f47bf7ed97">removeFirst, optional equiviliant</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/17be74bc6a824d60fae276bc40fc3976476afa75">Explicity Size Clipping</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/e8dfb09865f165b9838c1a54ee74f760b0f5f5c7">Allow let binding of non-optionals</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/7118f7fc3debfb14c47a997dd25696000f56563a">SignedNumberType</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/81e3dc7bf9691b02a82a146ac99d6d7f8200504f">Improve Number Type</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/7e53cdc1c95761a42b232a4067b209e111ce314b">Fwd: ternary operator ?: suggestion</a>      &mdash; <em>John Randolph</em>
    </li>
    <li>
<a href="/threads/2691dc6c7a058b9a5bdf6f7eddabd3917d067f6c">Allowing Characters for use as Custom Operators</a>      &mdash; <em>Jo Albright</em>
    </li>
    <li>
<a href="/threads/1a4ad9c5b9760397c5edfdb02ce6b5f0dcf282cb">Support for newtype feature/typesafe calculations</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/0996d458ee667c9b9107226f61bd33c926211115">Support for newtype feature/typesafe calculations</a>      &mdash; <em>John Randolph</em>
    </li>
    <li>
<a href="/threads/d2b5a515c641ec0256db3effc4f78dff6ff198ae">[Proposal Draft] Flexible memberwise	initialization</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/640b34597d6285bf5f029f98bf39707fa6a11875">two protocols with the same method name</a>      &mdash; <em>Grzegorz Leszek</em>
    </li>
    <li>
<a href="/threads/084e24c2c3e365173a4fa62946b7219f8d921502">Initialize associated Types</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/1bf2442c84b9c06c07809e4c1ac4797b30f96734">Changing postfix &quot;self&quot; to something clearer like &quot;type&quot;</a>      &mdash; <em>Ethan Diamond</em>
    </li>
    <li>
<a href="/threads/e34eab05b763fd67f6ac76d43178e1dc4a13c17c">Proposal: Add &quot;none&quot; and simplify the language.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/4e6cf45d5edb04fc8f46de7d188cee511707938d">Low-level Swift</a>      &mdash; <em>Romain Goyet</em>
    </li>
    <li>
<a href="/threads/cad91522e1b586c6edbef4f8718d53afeeb2b200">ternary operator ?: suggestion</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/0f9cc76fbe9199681be0ac0ef4fd9dc2a08e4f61">Optimization attributes</a>      &mdash; <em>Charles Kissinger</em>
    </li>
    <li>
<a href="/threads/69dade3f7970cc4dbf6f287a59ade5e4415a380b">Support for pure setters</a>      &mdash; <em>David James</em>
    </li>
    <li>
<a href="/threads/05c2303c6902a5990d924933231fcffe63c76a04">Fwd: [Proposal Draft] Flexible memberwise initialization</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/400a8a0427ebb781c92e0776b3a36121697bc3cb">Add &quot;maybe&quot; keyword / Explicit Support for Ternary Logic</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/9051f1f8f7a962d3bcdbaf41c1f94091e4d1065f">[Draft] @intendedcontext to hint at symbol relevance</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/eb4c997d356b61c1f3eee0359647acc55067d2a7">[Proposal draff] abstract classes and methods</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/f4a72a37e1254f06a2ea2fdd0f6a74435bf10794">[Proposal] Scoped import (of weirdly overladed logical operators)</a>      &mdash; <em>Marcel Jackwerth</em>
    </li>
    <li>
<a href="/threads/2f8dc4c5f4de62b072d5e1e4da987c4dd414f748">Dictionary Syntax Awkward for specifying generic key</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/42b60cbe07d32b746e64b1b5aeed732ec0fea122">Dynamic checks are much more powerful than static checks.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/b8dc58ba60bc41d84fffb638f94058a21e776cc3">Faster/lower-level external String initialization</a>      &mdash; <em>Zach Waldowski</em>
    </li>
    <li>
<a href="/threads/08caa39f8ad6cd5a159629a53e4ed2e68464e6ed">[Design Question] Unexpected forced optional unwrapping behavior</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/04a17a1811b3d083acdc4ad0b47f4cbe1d492966">[Review] SE-0018 Flexible Memberwise Initialization</a>      &mdash; <em>Federico Zanetello</em>
    </li>
    <li>
<a href="/threads/d4555dcb02d9312bf8e054e84793bb210099e307">Pitch: @autoreleasepool attribute for loops</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/00aa3b30e5b9dda253b55f345abe54745dbd6b16">[Idea] Add dynamicType casting</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/08b650edd0796319865836bdccb0f6a0f04f8bf3">[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;: Clarification</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/6fbc62f06742259fe31ca3ed4b70ba890b293a59">回复:  [Design Question] Unexpected forced optional	unwrapping behavior</a>      &mdash; <em>品雪</em>
    </li>
    <li>
<a href="/threads/38fdcdf61301f875416989174a07de22a521eecb">[Draft] Clarify interaction between comments &amp; operators</a>      &mdash; <em>Jesse Rusak</em>
    </li>
    <li>
<a href="/threads/abdd18645967ead9ba7ee82a02bb80a8ba9d309d">[proposal] Either in the Swift Standard Library</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/7ff6543e73e374f75f4f8de27dc12f7939aaf3a7">Unify covariant return type behaviour</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/8177163b9d81faca3a4b6596a8ee6168797e6e07">Bridging the gap between protocols and protocol extensions</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/cba532cfc39bec9023ef9234749747727aca444f">[Proposal Draft] Importing Objective-C Lightweight Generics</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/8e033259d723f11e8267edead9ef83dd4ef46da8">Proposal: XCTest Support for Swift Error Handling</a>      &mdash; <em>Chris Hanson</em>
    </li>
    <li>
<a href="/threads/d38e7028a7f62c0eac3d250d6c68a7cccdc819c5">Proposal proposal: @pure keyword</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/799bdc72a795ef0b9b27c65b88e80e3e61b56eda">[Proposal draft] Remove objc requirement for optional protocol methods/properties</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/9a36263d88b9d9a94e6e54b5946915c206cfb900">[Discussion] Dynamic code loading</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/181081e71bdcae12d9160c4b11230d5150edb665">map-like operation that returns a dictionary</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/ee78cd5b9f85ea914ab8adad98e626c07d06d4c1">[swift-evolution-announce] [Review] SE-0013 Remove Partial Application of Non-Final Super Methods</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/152fef270bc68091ab94ac92e5e33b5080abd9c0">Draft proposal: multi-property assignment .= operator</a>      &mdash; <em>Michel Fortin</em>
    </li>
    <li>
<a href="/threads/f63446ed3b579d253c94d905380b770d088820c3">[Review] SE-0018 Flexible Memberwise Initialization</a>      &mdash; <em>Alex Burke</em>
    </li>
    <li>
<a href="/threads/940ab07ac52e20309b7ce75eea6f58740172b2fb">[Review] SE-0018 Flexible Memberwise Initialization</a>      &mdash; <em>Step C</em>
    </li>
    <li>
<a href="/threads/a8719810589da8ece14bb813b2e367859b7c4895">Add stableSort() to the standard library.</a>      &mdash; <em>Davide Italiano</em>
    </li>
    <li>
<a href="/threads/18d86e18e96b3df58aca21f3b6df017c7d5853f3">Proposal: &quot;if switch x case&quot; and &quot;for switch x case ... in&quot;</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/86aca05ed00302def197bb862740306821afb19d">[Proposal Draft] parameter forwarding</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/d4926db5b6f1db99a4f8036399c13672c17c420c">[Proposal Draft] partial initializers</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/a8949a28c5d354f0c2d4e72ec8e5cad28a8db1f0">[Proposal Draft] property lists</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/99a219af0489605c62c1cc0d114905c2b9e90737">Properties on Default Protocol Implementations</a>      &mdash; <em>Wallacy</em>
    </li>
    <li>
<a href="/threads/b1e4b39e20d1561a7a6ef73ee6e64da1db7c59ac">[Proposal draft #2] Naming Functions with Argument Labels</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/cae5de9837a339ed82deb38c7eb6f30ad6c1928b">What are the rules for including @ with attributes/keywords and the possibility of removing it</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/a996a2b56c78f092d31e48ab79afb0c40592d8ab">[Proposal draft] Referencing the Objective-C selector of a method</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/1f491be2741b311bde43e35290b7d0a4be6c7d9f">Proposal Idea: Use of =?utf-8?Q?=3D=3D_?=outside of comparisons should be treated as an error.</a>      &mdash; <em>Jared Sinclair</em>
    </li>
    <li>
<a href="/threads/63d3124373e6d4889d7921d95d71288f562a505a">Rethink about the SequenceType, GeneratorType and CollectionType</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/611a010e8f13a9e285833fa99150a7663072fe14">private(call) and internal(call)</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/dbe9d1ea8d00af612fa4f7790249e61d759cc97a">Initializer labelling and forwarding</a>      &mdash; <em>David James</em>
    </li>
    <li>
<a href="/threads/3d8959be5e276513b5a148908960bc49e6b1e36b">Shorthand Optional Notation proposal</a>      &mdash; <em>Pranjal Satija</em>
    </li>
    <li>
<a href="/threads/10fffb248d38de89bd750993849dc0412b5694ab">Custom didSet methods</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/ac0afd50cd43e76cdd7beac640aa0f731e56c53b">[Idea] Type erasure for protocols with Self or associated type requirements.</a>      &mdash; <em>Vatsal Manot</em>
    </li>
    <li>
<a href="/threads/5f1672445da0a36d29bb32ede37eb8a3c58d881c">[Idea] Type erasure for protocols with Self or associated type requirements.</a>      &mdash; <em>Vatsal Manot</em>
    </li>
    <li>
<a href="/threads/7a1a876b830188306a93e9ecbbd395b5e126b1fd">Idea for Restricted &quot;Pseudo-Dynamic&quot; Typing</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/27bf5f797ca5a5f8faa1d0c72161538d5334d39a">Make generics covariant and add generics to protocols</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/0fe4d203fdc5f7a0514cf6b5887f76743bd17c68">Email</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/a6925e26c6895c4c5734a1b4dfc27375a89e8c0b">Proposal: switchValue</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/6d4e1956d44b2953235fb7e46ba076a8ebbbe3cd">Proposals folder</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/0d9f20d3464f252712c429c3ac15ecb525137df5">Custom annotation processors?</a>      &mdash; <em>Talin</em>
    </li>
    <li>
<a href="/threads/cf17102d0cc4f821ab4b11a6ffd29a05beb186f4">[swift-evolution-announce] [Review] Naming Functions with Argument Labels</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/6526bd057928daa3317d9c3a8418f2be1672a2f3">[Proposal idea] Support for pure functions</a>      &mdash; <em>Andrew Trick</em>
    </li>
    <li>
<a href="/threads/daf0a59f467997633f6c42bdc015ed94bec9caaf">[Draft Proposal] Refactor SILParser::parseSILInstruction</a>      &mdash; <em>Sergey Bolshedvorsky</em>
    </li>
    <li>
<a href="/threads/98a2e9e3b0e66d013ae98132ed8cf7dd59ac1f98">Code Contracts</a>      &mdash; <em>Suminda Dharmasena</em>
    </li>
    <li>
<a href="/threads/c2a86b29add67ec3b3823adc7929572fdf863582">Effects Typing | Type Extensions | Attributes</a>      &mdash; <em>Suminda Dharmasena</em>
    </li>
    <li>
<a href="/threads/ec9df259b442ba9a98f3080eeab49487e3c54a8e">Active Objects | Actors | Synchronisations</a>      &mdash; <em>Suminda Dharmasena</em>
    </li>
    <li>
<a href="/threads/856c99f3c16f96a4d9bf9ca913c1abe3b1ec6b35">[Heads up] Upcoming review of API Design Guidelines, Standard Library API, and Clang Importer changes</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/af4fd6ae1c8920e5cf3c8d7a82e5d3e2494cfa1d">Proposal: Remove the space before the colon in compiler-generated [Key : Value] dictionary types</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/7811e6efb013ac5afd54c4ec29ad4826cdf81823">Proposal Idea : Library (third party) Importable Checking</a>      &mdash; <em>Jo Albright</em>
    </li>
    <li>
<a href="/threads/17bd48bc8ce0c114c0d587bab4e212f6070c7399">Proposal: for loops with return values</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/8e6816baa08cb06cc15e899cc008a415055ab2af">[Preemptive Proposal] Operator for Lenses</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/d2be41787de59f21a0e446ed3e546117b00797e1">[Idea] Extend &quot;required&quot; to methods other than init()</a>      &mdash; <em>Nate Birkholz</em>
    </li>
    <li>
<a href="/threads/429de6dd0cb0cbb63d80d5728a9b1db087798a63">[Draft proposal] Faster/lower-level external String initialization</a>      &mdash; <em>Zach Waldowski</em>
    </li>
    <li>
<a href="/threads/3e9c580ae35543aa5897edba44110200636e2f03">Proposal: Make it easier to use unicode identifiers in Swift.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/a89f58a60254d3e2dcd9a7f0c0d038683bfc2321">[Proposal] Partial initializers</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/6786c14585a1584607d0f62ebbb21014ec3e997c">Simplified Conversion of Integer Types</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/dd92b918cf05669642bd72da34694717053673e1">Adding a new filter method which returns 2 arrays</a>      &mdash; <em>Arman Shan</em>
    </li>
    <li>
<a href="/threads/f37be9cefd6dc5f6c52c2b0e5dfcd7448f555bc4">Swift should support generics as arguments to closures in any context</a>      &mdash; <em>Spencer Kohan</em>
    </li>
    <li>
<a href="/threads/ec35afa2691a5d636ce2664bd7c39a0f0a14ed7f">Proposal: Add a sequence-based initializer to Dictionary</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/f003671e26d0202cbe81c28140da67b4b8e0880c">Proposal: Add a sequence-based initializer to Dictionary</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/4ab65449fa0499d36afe64ae705359cf132d0d66">[Proposal draft #2] Naming Functions with Argument Labels</a>      &mdash; <em>Patrick Smith</em>
    </li>
    <li>
<a href="/threads/1302dce7a879efd905726069eed6388ea654adcd">[Proposal draft] Importing Objective-C Lightweight Generics</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/6e140da7ad4cfec9520bc2856282382244601697">Dotless case names in switch cases</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/7247eaf2a0335d88c85d2cb006bb5a062437a68d">Dot notation as shorthand in subscripts and functions</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/e237776691073b7353ec81cae8fbd2f9f3096ba7">Proposal: Adding precedence option for prefix and postfix operators</a>      &mdash; <em>Jason Nielsen</em>
    </li>
    <li>
<a href="/threads/324cfea7e6c131d23a1ad2290642a8de725a24fa">Proposal: Unicode visualization annotations in declarations.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/18ecfe8f70922dfea52851a31c39108f05a8dbeb">[Proposal] Allow protocols to require functions with default parameter values.</a>      &mdash; <em>Vatsal Manot</em>
    </li>
    <li>
<a href="/threads/1e22bd7af5e5d607e4d023bccd967b0d0cd1f04c">Dot notation as shorthand in subscripts and functions</a>      &mdash; <em>Vatsal Manot</em>
    </li>
    <li>
<a href="/threads/72eab0f33b32b9405b168156cab5869af62cd8a3">Protocol extension function overrides the default value in implementations</a>      &mdash; <em>Zhao Xin</em>
    </li>
    <li>
<a href="/threads/be2b3a3ac69cd911074f2b1758d46badc9a47836">Optional safe subscripting for arrays</a>      &mdash; <em>Rudolf Adamkovič</em>
    </li>
    <li>
<a href="/threads/9fb23767f1878348470805861a2325e140ba4cd2">Make generics covariant and add generics to protocols</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/fc2065b13a82821f640575252f1f228aad651f18">Draft Proposal: count property for enum types</a>      &mdash; <em>Martin Crossley</em>
    </li>
    <li>
<a href="/threads/0dca7ce9a1c7926afedcfc18ed351d75c2770e9d">Pre-proposal: CaseEnumerable protocol (derived collection of enum cases)</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/4c8acda69e4e6c78cc5bd54329a6d8b9987e571d">Proposal: support multi-line string text when assign a string variable</a>      &mdash; <em>杨晖</em>
    </li>
    <li>
<a href="/threads/738669bc5e82ecfc14ea3a09bf8aa30f6bca7055">Pitch: Progress Tracking in Swift</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/aed668e3e35dac0f5b0bb659043b38f4d0272100">[Pitch] Version-pinned patching of public declarations</a>      &mdash; <em>Curt Clifton</em>
    </li>
    <li>
<a href="/threads/15cef8aa9a62d625d22615c3bc3e86eb6d478a39">Pitch: Import Objective-C Constants as Enums</a>      &mdash; <em>Jeff Kelley</em>
    </li>
    <li>
<a href="/threads/0793ae42ce72633c7db1c9b98b379f29e2e266e0">Compiler should generate code base on the functions that have default values</a>      &mdash; <em>Zhao Xin</em>
    </li>
    <li>
<a href="/threads/77b97d5c217aeb2ef1253730382aa9788ac22c50">Custom summary for Mirrors?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a84f9305a1a19f2e1315c27c655b191e603320d6">Custom summary for Mirrors?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2963f6c476dc76e59736d5678ae2900690536eab">Is swift.org documentation on GitHub?</a>      &mdash; <em>Will Entriken</em>
    </li>
    <li>
<a href="/threads/3e389b39f6fe393409afefc34518646b1759485b">[Pre-proposal] Standard Protocol for Bitwise Shifts and Binary-based Integers</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/7037c1bc6f4c3d6e00bf55619e54b94b76e54226">[Proposal] Set literal and Set type syntax</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/4b060f80c5b6c11457b215af868d81937d4a79bd">[Proposal] Property behaviors</a>      &mdash; <em>Seán Labastille</em>
    </li>
    <li>
<a href="/threads/4805a493d5174a39f05a3dafb0d86e590009d4ac">[pitch]:generate == function</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/144e10817cdb9ce0a6a797a6bf7ba6e0c8a00cba">Factory initializers</a>      &mdash; <em>Claus Ruete</em>
    </li>
    <li>
<a href="/threads/3de1554edd2d9267effda12abfab90d0f655d4da">Padding structs</a>      &mdash; <em>Alexandre Lopoukhine</em>
    </li>
    <li>
<a href="/threads/38fe6ee52485d4a386d22ec94be3369effa3a8a1">[Review] SE-0022: Referencing the Objective-C selector of a method</a>      &mdash; <em>Pj Fechner</em>
    </li>
    <li>
<a href="/threads/64315c0ed1e200917ac24c35967240d3d079704d">Proposal: Make $0 always refer to a closure’s first argument</a>      &mdash; <em>Paul Cantrell</em>
    </li>
    <li>
<a href="/threads/462fb9be9c6b7f794f71229ade142cc178ce263c">Let range operators always return empty ranges if the upper bound is smaller than the lower bound.</a>      &mdash; <em>Uwe Falck</em>
    </li>
    <li>
<a href="/threads/f23f5bbc9a249d00f7064d8d4f6d604faf2139fe">Make link to main proposals always on top</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/888a5479d8cd26ed883fbc2443b6acec7e69d88a">Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7e71281a6e960aeb49083892759f55069f156516">Epic: Typesafe calculations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/af0fc4ee659091ed66add789e385c78f078d6350">Add stableSort() to the standard library.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/73180d6bb7079e338ffdc767e14d310c401f446b">[Draft proposal] Faster/lower-level external String initialization</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3b7396343d48879a7ae442d18bd72d6a554aeb7a">Is swift.org documentation on GitHub?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/de62598301b0e603967d4f4a7f1af988229dc687">Pitch: Progress Tracking in Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/62a8dc0391243c01a158620ad96b5b4c88bb31bb">Fwd: [Proposal] Property behaviors</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/cc41dd80388949c93bab6b5f14dec3ee26f3dd0b">[Proposal] Property behaviors</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/16fe2ff3567e080cab346d1e2fbfd3e3e0d0c894">Generic parameters in &quot;as?&quot; checks</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/22ffefa30b3b11c0466e17ef840ece868fcbdfa7">Proposal: Allow Type Annotations on Throws</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/0c61a73780363c3b45070d9b0e92c4d7679f0270">[Proposal] Built-in &quot;bridge&quot; feature</a>      &mdash; <em>Jerome ALVES</em>
    </li>
    <li>
<a href="/threads/00b67240c3ff18c54599781a14bb9028f9691cf3">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>David Owens II</em>
    </li>
    <li>
<a href="/threads/4908359315bae32a6f16a737f1b2679da48be138">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/360770f9fa41adc757450f0c5a04569a3b40cea9">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/15d73adc1dbfe59123fedb0c8b069c60274de991">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/349370b981824da444f112b0eced2ec980f102e8">Let range operators always return empty ranges if the upper bound is smaller than the lower bound.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2dc45f8f4701fb369866172a52c0b000276a7a89">Let range operators always return empty ranges if the upper bound is smaller than the lower bound.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7239a3426c78bc8fdc0435ec0cc68576e5033ed2">Epic: Typesafe calculations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5d93d6e5dd6504dddac0fc2826c3bb82cf8d5bdc">Language feature for progress tracking (was: Pitch: Progress Tracking in Swift)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7da61e957b85e3a66ee60a78db405af2ab7b9df3">[Proposal] Property behaviors</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/3811d11da6851770e680466d20aa01143190a567">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>David Farler</em>
    </li>
    <li>
<a href="/threads/950aa7e6e93d4abb1249221a0cf875ab8b5d174f">Epic: Typesafe calculations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0b985c6e934fb8a11ced47eeeeefed4ff43e872b">Changing __LINE__ to #line (was Re: [Review] SE-0022: Referencing the Objective-C selector of a method)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a781d4d87997247d6e7860ae7265f9a467cd5763">Add stableSort() to the standard library.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/17c82d2387a6bce10a23d6f84f7af0683b34c27b">Proposal: Add scan, takeWhile, dropWhile,	and iterate to the stdlib</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/a3350ffe5cd203816bee841698e93e97b7ecc921">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9ebe7db7640880e82d69af4633d89e85109226eb">[Proposal] Eliminating Swift&#39;s Screaming Snake Case Identifiers</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/db02f27fd11f897e933fba1512aa5989dd8f9155">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/76e2b2cc2a23e4527519638d57574e76d6354d53">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/426651f70ed29c13dc4bbc87309f243f2798a8d6">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/80c44e11879cf8288a1ed3876e4ad6449deeddf8">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cb8dc9eb137408c505eb17962634c11b65e8864f">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/60ef8f9580e6270af6410fcb1965106ca86162e0">named parameters</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eb67d5d6d12ed0de8ef0faa4f89df12f035c1bfb">Proposal: Nicer way to enter tabular static data.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/0a7ed832f73ab833346252981c122e85793a5862">For... else</a>      &mdash; <em>Lee M</em>
    </li>
    <li>
<a href="/threads/2694b2512ec09522ca5934dd2416ece4d0b13f98">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1e0e9d43bbdd33c16050da0aedddf26dc05ea7ee">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/82b335881cc72f4f6868350038d079ed7367f494">[Update] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5c658492b1ae5acc934889bb0d6fd167386b1501">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/720244c75d3e77f994f8afce600336a4643a9306">access control</a>      &mdash; <em>Ilya Belenkiy</em>
    </li>
    <li>
<a href="/threads/273754dc13cfa4ace283b6be95ed2a4b14bcc7aa">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eeb2aa6f6247e5c41f78a5fc5ed333f2796aa5b9">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/212af7062907d8cbf3e1bba45513d1cdb3ec698e">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4970d284ca609b534f2ac7361024d9bacafbcfab">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1aceb6c96a0627b0a3b18ba3d16a094947c5adc5">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fd2b82f4355b12b24e3508580ceae1194e791464">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c7fdf954b1c934d80ee6c78021c58c807e70fcef">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5f0e734126df5fb946bb6540e457571010a2e874">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c176dcfe52099d3e0dc4df0263001f3ea10a370b">Idea: Let Generic Parameters Have Labels &amp; Default Values</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/1fd9d0aecffd50e969cc869758db4ef262e0757e">access control</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d4eedf20737ae6b6b0f191e275cec549fed3f593">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/70b0860b4f54059983fcef6e79022a97b71ee49f">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/49203205ebfcb65ff45c50a7b24897e5a08cb36a">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/221a8f8d79cce52aa92ede7cebedccf580465851">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bce6cc2c905df37241288e52b4c177d1b80a2656">Draft Proposal: Declare variables in &#39;case&#39; labels with multiple patterns</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/62145a2c5a018a537204b7297a5ea3d54b944db6">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dabef23d4eccc7b03d1c04f3f5c9e77edec7233d">Idea: Let Generic Parameters Have Labels &amp; Default Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/48adcf647334285956f98102409cf944df896e67">access control</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8881b74115862a9f200ee74db15800abf57cbabb">[Design Question] Metaprogramming as a non-goal</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/55dccbc882a96b38a039ef758f839c1cd400af82">named parameters - why hidden first?/proposal interest</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9e1a496d7ef6283c4553fedf45a448c7dfb7725f">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4b5473ebe0d48367cc52bc4660ab5c0fa32a8ade">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/76d3adadbe67d2e1608648f67d0fa6f679d7bec5">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f3f524f5737b4f67c54c6419561d159f12d86c4c">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e8c6f553c12a438cfe14aa70605cc2d7cec0fdd0">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5048b21ac25cef1b645d3a6e027696904590c1e0">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4a3ae3711705c5c884fd00144f5a8faebef09d70">[Idea] A way to build an arguments list dynamically</a>      &mdash; <em>Eugene Gubin</em>
    </li>
    <li>
<a href="/threads/2cac278b1a0e896ec258c19e943969a872e1b777">Evolving UnsafeMutablePointer.alloc (was Re: [Review] SE-0006 Apply API Guidelines to the Standard Library)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/181bd870b7dc32bd58af9af4f373d57cc5cdfb37">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a7d192699855d35f3e1e5061bd3b0a0bfe63bace">[Design Question] Metaprogramming as a non-goal</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9886fe2c693f690b9d58a0068ec690e9d85e04e7">[Update] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/83e67f2914c87f206cd7e537da81a0da4bdb22d3">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/87eccee004b49242c4a062011fe4c2c8609130b0">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4fb4a0e9dff9165a193fd97839bc26d406af3ea2">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f05d63acb38be9e368448efa47e0956d95c3074d">Delegate Method Conventions (was:[Review] SE-0023 API Design Guidelines)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bc41b8fe4b2337d17e920c2c5604e8003140f250">SE-0023 API Design Guidelines: Mutating vs Functional</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/76bda2a864fa724e88d30e82d6b62c26d174d2b9">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7e1127eb92f9272c918a8b6fa5a58a793b2e8b81">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8914dfe87823dafcd79dd5b81657fd636ee12718">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5fe9359ac1d6bc093d63a91bde0955637bece29e">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e24b7ee415c136a1df07afec1a1170594047251d">access control</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8358c9f91e3a761eaf939805b6d2fbf47ac1aa1e">Proposal: Replace ?? by an (optional) argument to ?</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/4feb37c45ddf9b837a3511a97694d88148db7cd0">Pre-imported modules (sort of PCH)</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/a4fbf42fb9a0f4eb8d7e8658780806d645af3efe">Thoughts on making NSOperatingSystemVersion Comparable?</a>      &mdash; <em>Robert S Mozayeni</em>
    </li>
    <li>
<a href="/threads/29385189c2e65b9fdc8d0553b6aebf0f3d0a8ae0">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9cb67f68afcfefe1ef8d05b60c2ca5992b423ff1">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/236a336c2617017b871d4e7a44bf5a8964504114">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/90518ae74b656e9170bd404ad0a387c568ae55aa">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d42c03de5f0b68f32090932c1a1d9d6d91171b6c">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3cda56d5acac8e02e35b96ae8141cfe98b0027fa">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/989c1a1cc50c8aa6bd205347b691524e5f9e5466">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e11dbda1ddbc4d413df26685a95873a1572ff187">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d8350ac5c45ac70f7abeeb09e5de0a1b3a223bcf">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9b4fa46be047fa494f684f283e608b79d6a65ed0">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Tian Zhang</em>
    </li>
    <li>
<a href="/threads/6bf70c8b322d93540442bd854688e676b0d17987">Delegate Method Conventions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b7e507d310ca41f3d37f1956d6c5075873b52f4f">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fe4eabb2d04af8cecec88f479ec22d29486ff8ea">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e371d6ce7d25b3bfba96fa7e39fb5e174899f66f">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cfbd95e490839f0d9fca48c768c4aad2c920e381">deinit and failable initializers</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/334a8ad591c19d8fb37baf17573a6baf860368d5">#if Support for Module Presence</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/f840749d0793add22639f1193f868b0c07da35ac">Proposal: Remove implicit tuple splat behavior from function applications</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/032fb4466e5181769a1e7f0dcc52535b65c9b15c">[proposal] Either in the Swift Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a72a782b87effefccd6973c19aed996496f63abc">[proposal] Either in the Swift Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ecd1543f1405aab3e02230ce297349fc89aed5ac">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aa07f1db660a035f803112b2f69557316590a815">[proposal] Either in the Swift Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0fa23a6bdfb92527dd5d4ddf0cd038d4c3cc02fa">Pitch: (Almost) std libs</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/3947abeb815b83dc10a51b3fde4b3b9e02723077">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7778ddadca75f60bdd3f10407e00a9639b6709d1">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3caf8a0f2c6e69e478c7b6356d6576b6bfc9c591">[proposal] default func ==(_:_:)</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/aab21191f71ca9d2b47ed722779f1f189834dc52">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9b568ca1441098e3a45f5891869083651162887c">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/954c2efe4f3a51b8ef1c9b2d23233bc3c4db90a7">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d04cc627823a56b0d9a63c23b3a73a9e84a2c818">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d1a535126ea4433dc6d400ead126468875f5274c">Renaming &quot;Build Configuration&quot;</a>      &mdash; <em>Jordan Rose</em>
    </li>
    <li>
<a href="/threads/e6cb4ceb639689372252c7f0ceb79bdbbb6aeb4e">Seven Swift traps explained by David Ungar from IBM Research</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/f5d473cfd06d13798e7f82908604b93a4be51ddd">XCTest</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/3a46f3370be04fcbbd096131979a5a82b3d1307c">Modernize Switch/Case Statements?</a>      &mdash; <em>Joseph Essin</em>
    </li>
    <li>
<a href="/threads/68cd39ec34b9aef08233f31d9b827e019c953767">Proposal: Contiguous Variables (A.K.A. Fixed Sized Array Type)</a>      &mdash; <em>Justin Kolb</em>
    </li>
    <li>
<a href="/threads/b0f546040ddc64b90496998db60085a3ec5df098">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/611e1796415598cc6efae422de389d96096a982a">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7eff86a68109a6854806cc8c635210ab5592c074">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/39fabecdac67ea4f3ecba096e09128e80380cf4f">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ee827894b64dc7beca467503326da53b520010d6">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1901e4d32af638ed91a5db4942c7daa9f1bee58a">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ccac1ea2273d217d4de86026fabf9e522d9f7116">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/69caa5002729cbd060e7f33e8ea7f2d0d43a3476">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e4c0949c4914ccfc5f26d93bf947c96c626735d3">Apply for closure</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/99e9759783de30b7c9cc18202663df2466cebefd">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5339ad6521a3e48e6c7ee166dcc56f7361e3310d">Isolated and failable green threads?</a>      &mdash; <em>Niklas Saers</em>
    </li>
    <li>
<a href="/threads/2fb50f336590335b2c531b64ff6cb0cc06f38af3">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/760e312d5fb16151110e8377dfdb98c1e43ab4cc">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/16a91f954a953f3ab32ec58ba6fcc564219c8e3d">undefined</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6ea26c55acbe5fe22988efd512f99c50419fe03f">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d5838423e4a142756953bd9deb1efde8fc4882c9">Pitch: only allow capture of inout parameters in @noescape closures</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/6d9a4b0f41cbaf6bae7f971ff2f1ef3e1e85de47">Brainstorming: Optional sugar inferred map</a>      &mdash; <em>Craig Cruden</em>
    </li>
    <li>
<a href="/threads/266c9257179cd8d372a618fb3d2f696f491de66e">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/95d49a2e7c7429c79ada797aea3e7b4f2465a55b">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/25bc701af23820b701456026fb94bff91705edd3">Pitch: only allow capture of inout parameters in @noescape closures</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2cd1a5dbc3a371156937f45068ca7c2a2539665c">undefined</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/6a467f22416746d2ce2f39378eca1070e13dbb2c">undefined</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7d21921546846e06e011101f1beeebede3e0b574">Static Subscript</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/a2b04afd552ed9f5d04177e6eae9b2794f693c06">SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/0ce350a5af8ba3604e9586302e8d98590d620d2e">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/74c47b65321039e9880abe47ecb414c9529da3a8">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/baccf965c0b8f16e863b3af5206c3327dc12932f">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2a72b1c62083d82283d563c90c52173afe6eefe8">Guaranteed closure execution</a>      &mdash; <em>Gwendal Roué</em>
    </li>
    <li>
<a href="/threads/f732ad537b28c67743c775689f0da10f8504e24e">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f040349223854d3a378799bd8da28a9a1137c68b">[proposal] Either in the Swift Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0b563c741e98594272353123124a20eb9ff32873">Reconsidering SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8a9ef06d1ec7a7f777ee066878facf59c00ad0ad">Proposal: Replace ?? by an (optional)	argument to ?</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/b61701284461e37f85e80bcdf33313e2266401cd">Proposal: Contiguous Variables (A.K.A. Fixed Sized Array Type)</a>      &mdash; <em>Benedikt Terhechte</em>
    </li>
    <li>
<a href="/threads/c855bf45f60736502e4b6ad2366d4c93f7505669">Guaranteed closure execution</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/66818af2e57f8b34c92f378afa92748acce98417">[Proposal] Adjusting `inout` Declarations for Type Decoration</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/15bc1bca217709a02e96520fefabc36633ae22d2">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c6e8dc320ae0d779cbc9bbbe2ce09adf87618467">access control</a>      &mdash; <em>Carlos Rodríguez Domínguez</em>
    </li>
    <li>
<a href="/threads/494c71b47850e1a7adac60d9e318379cfa8ecc00">Proposal: Contiguous Variables (A.K.A. Fixed Sized Array Type)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b72364694c62b813f45287d573443f3061bc2553">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Craig Cruden</em>
    </li>
    <li>
<a href="/threads/575f8b069033b36f27ea11f1b2873890d6d83d3a">Protocols and var { get }</a>      &mdash; <em>Frank Ecsedy</em>
    </li>
    <li>
<a href="/threads/238974a47fd47e8db13cd2a4d51298e34d015ebb">[Proposal] Use inout at function call sites</a>      &mdash; <em>Trent Nadeau</em>
    </li>
    <li>
<a href="/threads/efcc772dc385492a15b62c52033ecee9ebd2325c">SE-0003 Removing var from Function Parameters and Pattern Matching</a>      &mdash; <em>Benedikt Terhechte</em>
    </li>
    <li>
<a href="/threads/2c91869553298e58811743b0bd7ffdc62e0b51dd">[Proposal] Use inout at function call sites</a>      &mdash; <em>Benedikt Terhechte</em>
    </li>
    <li>
<a href="/threads/e5cba29aa58cdbf87309f41505696cc6b8256c6e">[proposal] default func ==(_:_:)</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/2ee72ebe23b8ded667959dfdc5f45608dcdbf1a2">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/88ed9f153fe26992dd13d3dd1ca35c2912824320">Proposal: Contiguous Variables (A.K.A. Fixed Sized Array Type)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e770d2a88be49cab4387daa2810320c6d09e4589">Fwd: [Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/720bd97869830a77da7cc61b042c1ccde3fad2e7">Proposal: Compile-time parameters</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/10b52f324e942cb4d24f232c353a1a399aa918d1">Reconsider ++ and -- operators removal and prevent other well-known operators from change</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/a68dfdcde9056e44225363f3575d2bf953570464">Constant generic properties in mutable contexts</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/d7a295d6425cf7a0946bcf094357c71c9fe95fbb">#import (project scope import) (former: &quot;Pre-imported modules (sort of PCH)”)</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/23a0594c04a4641cdcd17a655d0b56ae5a0c98b5">Swift 4 evolution mailing list for not Swift 2.x/Swift 3 suitable proposals (async/await, for example)</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/4b7c0fa24b326aa8da6fe7ba2a255b6c6dc5eb2f">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8e95db2a04a78d0032186e2d8ee1dfb93cbd7e3f">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a5119d5ff76b009dc6b02f55db7e030497fb0e9a">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2c0da6cacaa35e4a93833773890901764ebae347">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8552060178c0f8db497095d955b973929742322c">[Review] SE-0023 API Design Guidelines (when to use properties)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cd786dc83bde02f57344255c29daa81f7248a4db">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d87cb43dce6dce0571079c6315788e7fc9d7a8e7">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e64833c23186378574cf5f60355497344b9ccc4a">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/53ab08a0aef78337b65d6e62c89eef99ec4f4e3a">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7510e93da90a93119b17d991b07f643a2c6e9628">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ac39d832d0458a664b382a8eceb4a91bc14fbe34">Proposal: Allow @available(*, unavailble) to getter or setter.</a>      &mdash; <em>Hoon H.</em>
    </li>
    <li>
<a href="/threads/5e3c88c4263f5f66ea8cdb72edea4c011d4a836f">[pitch] Printing versions of try! and try?</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/16c863e61225e025d0a534c107566c6248f5ab62">Brainstorming: New operator type - chaining</a>      &mdash; <em>Joseph Lord</em>
    </li>
    <li>
<a href="/threads/32bff48a292eb3b282c66bf759bd16092065267e">Operator implementation inside struct/class body</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/52e68f87d3862c2ac13411828d68889a17925d48">Proposal: Require functions to have a cyclomatic complexity of &lt;= 10.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/f522ebc25e8a37c018e3511c79f79af9ecf16a8b">Default implementation for protocols</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/b10c5172b25e90f3da0308877790f86c9c44d590">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/76d5502448fde296c31d3e68030f1010f99b92fe">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7a6068fa2cd46038694aacf6b113738dd02961da">Email To Post</a>      &mdash; <em>Logan Wright</em>
    </li>
    <li>
<a href="/threads/c86efd5b7d1f6d0c8791a72a6c84b9d7ae84817c">Tuple conversion and type composition</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/35d7a117f6d493f7dbe10a8c49d404f43dc9be2b">Proposal: Remove implicit tuple splat behavior from function applications</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/9282a489b10a0db0099242989817b7d7aab0b216">Empower String type with regular expression</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/48135547a788a19e85222b698a294ffe8b2c1230">Missing warnings for unused literals (and results)?</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/5994c7d2ddabfcd19789318fff638caa618f17bc">The bind thread</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/16b0ce967a5fea288b860b4a4b58f2036a77919b">[Draft proposal] Faster/lower-level external String initialization</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7ddbb85f5385e44c53fb00ccb41f9c28e8da3ba8">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c99040c7e9b60146272c1a9d7f2080a9aa681f68">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/082b14e86c9901a9113633b39a97a2d02d7bd668">Wanted: syntactic sugar for [weak self] callbacks</a>      &mdash; <em>Kurt Werle</em>
    </li>
    <li>
<a href="/threads/2476b5b613e136b3e766e42cbf95c2c31b37ae29">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/680bd519757652e1a08615868908bd1b08f59aee">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f7c2effa8bcdc1de860a281841836aab30a0da0">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0c2094b9d5c392e46dea61a36f0629a9288c6829">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7ad502e5856c9a010524eaca962372ce0d1cc7a0">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a66a0aa76fb87dbade6cfc8d4a9c3384e266a5b2">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/65a7874a410742dd02d266c942328760adcf23b4">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3567771c145c077f72aec9df2398804d8e5404f9">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9adc3807a09f589e4bea0451138b69ed5d6dcdc9">Proposal: enum labels for switch cases</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/1ddb7bcdf4dd3ba3f3869e64a83489adbf9e5c55">[Review] SE-0005 Better Translation of	Objective-C APIs Into Swift</a>      &mdash; <em>Colin Cornaby</em>
    </li>
    <li>
<a href="/threads/e7cd2eeb4de2fadafd06b4d3d0169462111c94c2">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/da7eb6e0027657f0d1120a78c740b6069cf341ce">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c90369e251887a9ca312b9d9e1703e21197934f4">#available has a huge anti-pattern.</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/9d8145b364afc607acf5641ce23f3fff52e4f219">[Proposal] Automating Partial Application via Wildcards</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/3e787edce1f062e37e6f1857be189427bacdbb09">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b7f7bf85b130640da8363f3db019b74381827e9a">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1bf29f75a9e948481c3237946dabbde8f73ceec3">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fc2504d881b0655d8d18e8c7b08d89560d682fc6">[Proposal] Automating Partial Application via Wildcards</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/92811948b02323a609c557b29fd4c3dbcd08f58f">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/31dbf0f5ea59324d79f24800a8ee1380f58dcbb8">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Kevin Schlei</em>
    </li>
    <li>
<a href="/threads/c9dec8e79691278b7c97f3722f407ce594272c42">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8bb442e46c9fa731f663ab4c2f581a690426cc7e">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a789eb5510c5dd52adb09ee2bb7b79edc360a80c">[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/42d87759e1316fc468209ca9b3f7c3fe19df9d44">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/552c912cdcd0f8bb9b0201a0b304654e9bfa8c20">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/643efd41d6b79391e62e6352d2fbdb256bbdf0c9">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/10d1aa8e7f54c18d49c774f0bec839cbc0a66b06">A use for semi-colons: alternating between if and if let</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a296cd757abfdf7b878950665a786554cf1fe7f1">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a30366b11198f3f95ab6496881f973782ab3f2e5">Issues with 0005-Better Translation of Objective-C APIs Into Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f87c2cbe654e80db9322120867c6f293d3c5423">proposal to add &quot;in range&quot; operator</a>      &mdash; <em>Gmail 2</em>
    </li>
    <li>
<a href="/threads/000c25d28e586c240837eb5a0320e7509896941b">[Pitch] Add overrides with UnsafePointer sources to non-destructive copying methods on UnsafeMutablePointer</a>      &mdash; <em>Janosch Hildebrand</em>
    </li>
    <li>
<a href="/threads/350b357672b894dfbb524a17cc4c22e1ea3d59b7">A use for semi-colons: alternating between if and if let</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/8429e03b1931e1b49a0ba6e196545a8ed44b058d">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d0b49f484fc203bd033f11708aa3cee979baa65d">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/591c4c99202e8b84dc784f40015fcf05a6055fa6">[Draft proposal] Extending read-only properties with setters</a>      &mdash; <em>Jarod Long</em>
    </li>
    <li>
<a href="/threads/fcc103906b01fe9ab0b5c5cc2cbf87d2f4328308">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/876b0b673af9147e35b5b82c04bd035ba58def65">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b6f3c502d93cea23b8474111133b3673191fbadf">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fc451dae19cb00b46c32332a00010508990f29cb">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/08f9486fad1ef65da15bc959581e8774352da11e">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/45a3d264b93e6297faa1fa64a2bdc125b4f08dd9">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ac62d1f775a52b91d629f0a9a44ae8a595683874">Support for pure setters</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/18896b679622ec3fc57a0b71cc259b8a758611a3">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a551dcaa8ba084f17ede376beb1304b8543fcaff">Obsoleting `if let`</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/1bed07d95f99ed0c8799b5a692b1e709e3351472">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bda87afa0346cb8feab51f9b6e1598b889fdbf12">Support for pure setters</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/2e9cfbf9db641cf192a9f077cc00c1bc7b07b198">swift-evolution Digest, Vol 3, Issue 7</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4d4f2b72ab659f07a1568623b453e2c784d7f44d">Representation of natural numbers with a distinct type</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/11c4921c6a2745bac9f482487b70a7e50bea4e51">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fce69ff09104868f994d3b58608dac0d5b9353c6">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b92e02f67146e3992481ff1f3743caf05cba72cb">Computed properties: get and set using shorthand notation?</a>      &mdash; <em>Chris Liscio</em>
    </li>
    <li>
<a href="/threads/725b5b12771d96c9779839b3d525d46119b4d144">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c86b933ef1b0eee76fd3759ef42f5dccac49e436">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/92b7c8d11c3845bc1de4494ccfd6e3a3957254cd">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/acb9e7b8c6cb109d9dc59c9f506149286f8e01a6">Representation of natural numbers with a distinct type</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/daf87bcd8010b06dbe31af5739afd00d0308d7b2">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2e81e71b719525a3cc8e8c63b6e78174dca4b85f">[Discussion]: Renaming #line, the line control statement</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/a78ce40f1248987b830f203b18afa073bf89971a">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3d7d177c81db1c7959f61a62bf9baf57dad89ae4">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/81d4a260182fe8eecf337b50ffdd205e32076b69">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f4e40a731d9d6300b6a1ea334845f9a2da836336">Static Subscript</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/c36e4bf186d54653838f200c5842e9f3e0d24deb">When to use argument labels (a new approach)</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/86bdc65dd62747cd944a38006fc372522b44409a">[Accepted] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e50aafb2d18c006e0ed8b78246958de8120af26f">Utilizing arguments without meaningful internal names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d27f925c64838080044a51d8a57e8d7f944cb88c">Proposal Draft: Optional Upgrading Assignment.</a>      &mdash; <em>Paul Ossenbruggen</em>
    </li>
    <li>
<a href="/threads/3de465028e529810f9da53655d84b91fb8e1a4f4">Utilizing arguments without meaningful internal names</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/034837e1b7e86f2b3221a965f40cf2ba416d783a">Proposal Draft: Optional Upgrading Assignment.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3781db77f7840e88e1014c062e6f63a418f5e703">Proposal Draft: Optional Upgrading Assignment.</a>      &mdash; <em>Radosław Pietruszewski</em>
    </li>
    <li>
<a href="/threads/76ff97ecae9c2aea5f10b5b3c7779e26215c7cca">[Discussion] Removing tuple labels from the type signature</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/e1afb7cfe559733db44b8d14bd55b99054778fd1">Support for pure setters</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/53e64e7ce746c51d4347be52f48760cb38e198a2">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4efabe7bd9adc4887d43138acd6fb2ea542c94d9">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e0cbee572d9cb37356112203855430818afb6e26">[Discussion]: Renaming #line, the line control statement</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8809cf2d8173e456f2af603e6bc654ed6bcece36">Support for pure setters</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/12ccef02995d4d413db6da927ede9c9cf359b709">Proposal: Pattern Matching Partial Function	(#111)</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/6ac40bc0439804701651eef8dfef1a30ebd4f1c9">@avaliable and #avaliable</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/227cdf8aec716abea692ee5508c5f879ad37586b">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/989243320676895106c22bb09fad2905fc422b9d">[Idea] Switching Comparable types: a new operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/605f5ccfe488fa761e499fe00163bd7551f4e42a">[Accepted] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bb0e46f1c020679871b06316d42fdff55b5d1b01">If let syntactic sugar</a>      &mdash; <em>Massimo Frasson</em>
    </li>
    <li>
<a href="/threads/46e40bf4980f6d1cd6125dd59d48bbb45f2f963a">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Maximilian Hünenberger</em>
    </li>
    <li>
<a href="/threads/264e136edad4fc7d9a5d9223fd4dd52f8ad2c9b3">[Idea] Typealias for protocols with associated types</a>      &mdash; <em>Eugene Gubin</em>
    </li>
    <li>
<a href="/threads/808a76fd28c054b3c76e1d41ec5ffb7f7195a26d">[Idea] Switching Comparable types: a new operator</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/72f4853d53955daf4aa030ad6bf643330924f9a7">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/42660ad95844dbfddb62c98e4bd3d1bcc14852b3">When to use argument labels (a new approach)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/642d3d41ff228327db59cd457361b0c5f1bff0ca">[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ff6b172f10bfc0e6e9398f98391f567d7b792581">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ecd0f1a5ed955e97a4e64de3133564e2d687c3fc">When to use argument labels, part DEUX (was: when to use argument labels (a new approach))</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1f003b81960796aad5ce4f0f576fdc788d6a1bc7">[Review] SE-0006 Apply API Guidelines to the Standard Library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f2176cd4094d66df4b96ff9ead62c618341287f3">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7c08cac64866707944a97f7d1c3e5cdc5f198923">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ca17d3ece546b9bd10c1c23594d7490470a7f8d1">Colon vs. equals</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/2737f0a934ef936e4972980e9241893798974444">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2fcb5551bd53967ff0f4f68d9001a57d74517d0c">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a6ea886d92564fd8175fe74f6c53b0abc4ccec2d">[Proposal]: Escaping another (unused) scope pyramide with &#39;guard try catch&#39;</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/d72801e030c4df1c3a95ece0a83284c8a19081f0">Proposal: Remove implicit tuple splat behavior from function applications</a>      &mdash; <em>Michael Henson</em>
    </li>
    <li>
<a href="/threads/8a184062c807c6beff619740dc844d1b53a72715">[Draft Proposal] A simplified notation for avoiding the weak/strong dance with closure capture lists</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/3d493ccd1128bef9ab5afd36a9b1e03f4222f6c5">Colon vs. equals</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/04ff638d9d9cd9b37329f565fe35be2a0105dc80">Language design philosophy, Swift vs Other recent languages</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/a0e70f462f84288fa7c4e39070f23af61848b3d5">Draft: Add @noescape and rethrows to ManagedBuffer API</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/c6a9d163118ac68fabdbe87999328158a402698d">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/226dd6c640b3f7975276a1ade81135cfe6f1946f">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6e6630f17e210fd18c27217c1690c5b2744f7ea1">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c6dedb81db1e9bc96108b7778fcc47e2c7ebf753">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d552b7e58bb3104d8ca99860ae9c3056e5f335a1">Draft: Add @noescape and rethrows to ManagedBuffer API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/db8c2d8f71d1176a4b2af00892d0869776da7c23">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d05d84a5427d74ddaf55e69ba63d7209ade424b9">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ee34d12d5edfdbe5d5589ca967d12dd437abacc2">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f12ce7f12ad28d42f0b00d739a375fb265e2e2b6">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/410e6f5962cc73e22a94ad5470812aeaf5310f39">Proposal: optionally define nested functions elsewhere</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/46a7d0d6da7c469bb9514d825b6dd75027ab9c6d">Proposal: optionally define nested functions elsewhere</a>      &mdash; <em>Jessy Catterwaul</em>
    </li>
    <li>
<a href="/threads/243dcbed0adfff1dd192779eb46c0d79f1d98beb">[Idea] Omit argument labels from the call site when the argument is the same as the label</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/5c9f313fbd966b6ba66d17f7d9e653793dfab391">Potential problamatic initializers, solved by removing tuple splat?</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/fca2985f9f99d4e2232b0ed9125547133a4559eb">[proposal] default func ==(_:_:)</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/9307a15b30499f906841777b772698cdca741b33">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/67ad7ad5fc0162a05003bb0d30a3d5ca660a6b11">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dfae49afee00c5e14b76acdf96d94dd3dafb8ad9">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f4680e8d158677b32b19ac59897c13d0b4bcc465">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ae239221c64ce12484a1142ef6aa24ecc5bd0b1e">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8a0742d1b2c17033b8674a322080ee6498962b7b">Proposal: allow arbitrary compile-time code execution</a>      &mdash; <em>Steve Richey</em>
    </li>
    <li>
<a href="/threads/4fbf8af88dcf1a7c7cd634453ad42a0fa010a8d0">Unable to do unnamed binding in swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b0f378fe90825cffd6dcd4c673e9aeb916453f34">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/774e2a3fed7efc3347dee624499b0a55e18e9275">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/166b2fc2a03c8b1bc5d4eeb9493fc79510b73802">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6740e5a373a800c17aae0ad0569b736b0c4df425">Github Issues</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f04cf2248abd8cac5a3ffafa895588db46a151ea">Colon vs. equals</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ad1de34f300a4271dc899ccd80cc66fc95319c38">[Discussion]: Renaming #line, the line control statement</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/468e3b03d3273e543d32dc880f87fb9dcd737411">Unable to do unnamed binding in swift</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/5b53f9230e7a10d841bfbbb264937d6e113bb196">When to use argument labels, part DEUX</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/b767eff4dae2749d054084586a06299bc20a2ee9">What about garbage collection?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/724fccf96e1a392c6a2ad7b8a1d42808baeabd17">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aecd39c82ffcfc35fde7aaf96b69b12b6c28ee86">Github Issues</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/635cba23f3eefc66ff6786e9b517676c1ebd70bc">What about garbage collection?</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/d0ae44ae97472fa2a0c29bedc081feee0590367f">Github Issues</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/13bc9b698b91daa2ca017309f3a6eba855a341e5">[RFC] &quot;Library Evolution Support in Swift (&#39;Resilience&#39;)&quot;</a>      &mdash; <em>Jordan Rose</em>
    </li>
    <li>
<a href="/threads/bfac44473308057c00423cf86e60acd50d24ceb4">Module importation at project scope</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/5b362f6afed72039fc71c651751db1336edc3798">Draft: Add @noescape and rethrows to ManagedBuffer API</a>      &mdash; <em>Arnold</em>
    </li>
    <li>
<a href="/threads/9d0e97ba5680140302b6ee8f09e06907c347b1c0">Warning on the &#39;(T...) -&gt; U&#39; to &#39;(T...) -&gt; ()&#39; conversion</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/7898453691244dff46f8907adba17cfaad6713c3">Opt-out for first unnamed parameter instead of opt-in</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/d942500e25de07ea95284b226c4f1a2a32067aa3">Proposal: Keep var on Function Parameters and Pattern Matching</a>      &mdash; <em>Myles Schultz</em>
    </li>
    <li>
<a href="/threads/b0d866fed73a8d1137c586fc55640f2909e278c0">Opt-out for first unnamed parameter instead of opt-in</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cbdc5513ed032427cefc0f1eeb9b69a285b25899">Language syntax proposal - shorthand for super invocations</a>      &mdash; <em>Petroules Jake</em>
    </li>
    <li>
<a href="/threads/72a2ba35c573a95aaf1bd2d0a2a624c643bcc42b">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2a5565c40a5ae38afcdd8f3f05dd8411ebc3dac2">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f04fceb1f7a8f52cfd29546d6bb21c43fabaed5f">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2d7b052e6e800e9634e98587f89d28eee28d0d36">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6e62dd42c1c9cb712c5c5a1acc6f2cfb77529261">Proposal: Pattern Matching Partial Function (#111)</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/b7fd3d17b7f28849531c664afab4d746a891b128">Specify type of a delegate which conforms to a protocol</a>      &mdash; <em>Inder Kumar Rathore .</em>
    </li>
    <li>
<a href="/threads/f78619b5ea125f1cd8f9ae27818f3b2a694766fa">an observation on colons in variable type declarations</a>      &mdash; <em>Oliver M</em>
    </li>
    <li>
<a href="/threads/4aad446d1c87090b382cad9079bb264d1e968870">Splat</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/e203a4b2b898b76fa5a568f4f32f0d6edd2c8115">[RFC] &quot;Library Evolution Support in Swift (&#39;Resilience&#39;)&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b836c02fb566d5eb4f2fbb72a80b86ab401aeea0">Splat</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/058f60d2ec690d0c6078b9770b226b49634aaeee">Specify type of a delegate which conforms to a protocol</a>      &mdash; <em>Inder Kumar Rathore .</em>
    </li>
    <li>
<a href="/threads/fc0e97f7b095aa3938924bb8dbbeec3ad0c62443">[Pitch] Overridable Members in Extensions</a>      &mdash; <em>Jordan Rose</em>
    </li>
    <li>
<a href="/threads/a9e27585da13dfd12f751b08e509641fcc64d12a">Guard Implicit Fallback</a>      &mdash; <em>Tighe Racicot</em>
    </li>
    <li>
<a href="/threads/25ad34745a392f61453adb28f49887524ea769c5">Protocol-Oriented Number System</a>      &mdash; <em>Dan Kogai</em>
    </li>
    <li>
<a href="/threads/6b0db1e04bbbe46ad8f06c8d118285323665c388">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/171fe6d0fd7c805f54351db2f71aa5c6ba8a84a0">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/95ea5e355b2be0ee9c6930aeb19fa9f5103b764e">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e80ce4f4436b4e0851417328839286a4db90a439">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4aae7f95dfb7411ad429a00a5859e93fd13bbc94">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a52b99c8620046094315671f9355c924dd71e5b0">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/711b3bd2f7c780e25cf514855ef8da11f2754ad3">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ce806556ce37cf07f9e83a432189ed76ca8236fa">CollectionType on uniform tuples [forked off Contiguous Variables]</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/2292087cbb26a33a2ec98fc627012e6030d33643">[Discussion]: Renaming #line, the line control statement</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/55d33252c9a21d0048f702a8044386ef30c46732">AnyProtocol proposal</a>      &mdash; <em>João Nunes</em>
    </li>
    <li>
<a href="/threads/7cfae18603d7e61c4b51616778c76e0a9d22bd01">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3cceea5e7feaf924d365f65773d56a4257434061">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d982ea213a7ba34a82828268482db2dcb3801f3c">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/15a58a596859f47af3405a68eb8cfcd30419307a">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/09304b6180e79b2405b27bcfa61ac5e7c2628d4a">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/429a17b0592c3c84e6f6c7d59ce7d171aaeb7c40">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c723069d6e4d10fefb8a667b6e00d0e4ff3fb04f">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6affb509cc1448b3d517283376f535a79e535cb4">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e480c2af75b3b2a98db380d12ec89e5ca35553c0">Proposal: x == 2 should not be a valid statement</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/72bd7ee54e09135686cbb8014b1b7214197cb368">[Discussion] Enum Leading Dot Prefixes</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/f09093cab3bbcf369de35dbc0cdb5fb25b3f1e2e">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7940024220c109d591479acea42cdade4c1b716d">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e0e487b9dcf54e0eb86bbb2c45155f737473eee8">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c5a8f8dd9bbd9d1a06d83c099af94ed99a2bb18a">[Guidelines, First Argument Labels]: Prepositions inside the parens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cc703757a58a012ff7812c5cea187d9bdb554421">[Discussion] Enum Leading Dot Prefixes</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/241c1f15e84b9d21026f840c96cb8bf2991c011f">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bf8cb473fe1f61cd391aa3cc02fdb56d88dddc5a">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f2820fd2f43059c4364ced52030cbc1c84eb9801">thoughts on &#39;inout&#39;</a>      &mdash; <em>Oliver M</em>
    </li>
    <li>
<a href="/threads/3dacb1e923b5364dd9d6647a6fd7342fb3f0a5e7">Specify type of a delegate which conforms to a protocol</a>      &mdash; <em>Team AOL</em>
    </li>
    <li>
<a href="/threads/8edc1b96d8cd3275bce58230c43bc7ec849811fb">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1a2838d4c0e9424d6a3c9133d6359a87360ca5dc">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8c982c38c975e90bf3932ac71985ea86701c08e2">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2d35716d9bd2f19f3ff7f094f9bd36e4d6b7e566">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b373fb5f485f42f8a9ff637cf6795fa5653bdb6c">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5e2b2f61281b3b1f4230a32a60082b4574d4f363">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/454391c8aff315923ca668efa020d6415352c961">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1320124614cc0d2eaca32c403240804989b2e6b5">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d644f32fb54f4b9c6ae3f74d9c5848ebab0c5379">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4f2abd5b25a010dab34bab184644d4fdd9d62c2b">Guard Implicit Fallback</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/4ea98f2c8f0c552719c451db3eea0fc43d895d27">thoughts on &#39;inout&#39;</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/553e300795df7ff2c6e9e8eb39a801d7ba9d1d50">[Draft Proposal] A simplified notation for avoiding the weak/strong dance with closure capture lists</a>      &mdash; <em>Jason Gregori</em>
    </li>
    <li>
<a href="/threads/85c9cce073d4b00a50db039d6a12bf98cfb3b3bb">Proposal: Initialization should not be required in precondition(false) case.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/28a9587717945c7454622235f3ff2b4f59c2790a">Make integer conversion initializers failable</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/d3afb189626f99d5a019b663213dc457f9dd6263">[Proposal Update 1] A simplified notation for avoiding the weak/strong dance with closure capture lists</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/1129f8a4c7073be54704f9b45fe09869e9997cf0">Analysis of case conventions for initialisms</a>      &mdash; <em>Scott James Remnant</em>
    </li>
    <li>
<a href="/threads/8542758d5dd27ae2f1941e7bd3905e7926088119">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/50691337a33d3d8d2b60a5acbfbba3228dae6e59">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ae8df777b7e7ceb2b06271345545a35d06ae20cf">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f795765de829af82c2e5e32e924a1f6b85ff508">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0662becc4155aa285193ca5560668a793c4a1c97">Auto-generate op==?</a>      &mdash; <em>Daniel Tartaglia</em>
    </li>
    <li>
<a href="/threads/811ebb519cdb491b1aa7b3f60450478721e128e8">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c2ef3b6028856f69d7c8dc22b5cc77bfad474e04">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/914cf5bdbdf2206248f304d0267b4d791c43d9e9">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6cd1d2c4d7c82c5cdd1104afe0134a1c140bcf4d">Proposal: Allow functions to participate in the compile so they can generate warnings about their usage.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/4f36669d4dc9c1a122515ce06cbfaa6937df051d">Proposal: Initialization should not be required in precondition(false) case.</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/02e25db8d2bf0e93727b654674852c7ce0be3dba">For discussion: Including source code alongside binaries</a>      &mdash; <em>Maxim Veksler</em>
    </li>
    <li>
<a href="/threads/8a43208fcc7dc79b1db3051b5ca6d0b22b290af5">SE-0030 Property Behaviors</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/45f7a941d76ccd6604a84a8f9172a5cd52cdfafe">Standard operator precedence</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/43cd487f4e7d1dd830e3cdfeea4f675baa39542d">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f5ec0cbc6e938552879012f3bfd9b969d50f569d">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3bf694c240c2110746d492a53210af4e0709ad71">Revise GCD API to conform to API Design Guidelines</a>      &mdash; <em>Scott Gardner</em>
    </li>
    <li>
<a href="/threads/39838d5fb39bd08acd9489de405fa758770ba41e">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a34b2e890b9da0c3c218e6b2b581a89399d06214">When to use argument labels, part DEUX</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a5f5617d7d47988e85efeedd753245e429f0dd26">For discussion: Including source code alongside binaries</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/f3a0e946d948b2ea87a1084552dde947b1e5daf6">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b3e29c9d7bf54e7b71c917a67d0ff70aac78c87b">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2ebd2ca19f6cbb2a89efce1b74a1d0c52579d2ac">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4a8bacce238b4c990f3fe83cd374a8a5b368486d">Is there a need for a Decimal type?</a>      &mdash; <em>Dale Buckley</em>
    </li>
    <li>
<a href="/threads/6476c80f75ea11e773045361d095bcbea26a0855">Is there a need for a Decimal type?</a>      &mdash; <em>Dale Buckley</em>
    </li>
    <li>
<a href="/threads/5249c7816b8ab840f36c5af5f03b4099ccb03f85">Is there a need for a Decimal type?</a>      &mdash; <em>Dale Buckley</em>
    </li>
    <li>
<a href="/threads/d95679eb61b9e5faf818f1f01f9942c09f7fe920">[Idea] Custom default names for arguments of closures</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/0550e1b96cd0b98a680ba339949d7136616d5574">[Idea] Custom default names for arguments of closures</a>      &mdash; <em>Eugene Gubin</em>
    </li>
    <li>
<a href="/threads/bc24d33ce8680608b971514df285d18c341581a4">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/898103369bff6ecb80b4d45d1bed0af1e80e6169">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1c750a7137364a14ae6c55b832223635ab0f978c">Prosposal: LazyCollectionType.prefix() to return a lazy collection</a>      &mdash; <em>Mark Aron Szulyovszky</em>
    </li>
    <li>
<a href="/threads/75916942c7e6631e80763a8ee1d5833063b409a4">Proposal: instance variable declarations inside methods</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/e5a09946cacf3405cd8686bc1543eb83c76846e5">Analysis of case conventions for initialisms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/882616867b2dea90b524bc44077f7583329ce114">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/50f0f20a909b40c95359015b85629c2504da4a4a">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a2270d0f441815f7b468a5011ed132f2cd022d08">Proposal: instance variable declarations inside methods</a>      &mdash; <em>Team AOL</em>
    </li>
    <li>
<a href="/threads/46b799655c97bd76c3c9d1fbea984203748292a2">Is there a need for a Decimal type?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/31268539cfabbb968537b00aa9a0d75e0b8ba733">[Review] SE-0027 Expose code unit initializers on String</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7b8211d5e48563e21e67383d2ca39cfd36690c86">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5ae038031f4ba5ee5b2521143c7a14481f2a7756">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5eee7c9464d4017d2becddf806c02cb062fbc8b7">[Discussion] Using dot prefixes to infer non-enumeration static members</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/de894696b3133cb4311fcc3e57282d7804c6138d">[Review] SE-0027 Expose code unit initializers on String</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/65c2571c6b78ff632b2bccdaf78af0344e517093">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/262bedf245cc8a869e276d0abd15a17fe4ad0a9b">Protocol-Oriented Number System</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e8dd25acd579ebe8015d5cf42952de5650a9e2e9">Standard operator precedence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3fb17bcca0496607fe023e7af4973136a1550783">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/064a6e208317abd41e23f5738c91c4ba3d181275">[Discussion] Modernizing Playground Literals</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/ea8bcb5085855e36af862ec623acbd90e7b326eb">[Discussion] Binary search, lower bound, upper bound, equal range</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a54e75b1751962d556d2417f4ad29e37bb4fab68">[Discussion] Binary search, lower bound, upper bound, equal range</a>      &mdash; <em>Jeff Hajewski</em>
    </li>
    <li>
<a href="/threads/0dcd093fc42a85e4d4a667ee712ff0b161e7fa57">[Review] SE-0027 Expose code unit initializers on String</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f21537864a6a2894d2bfee1b759a6830a93812f3">Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</a>      &mdash; <em>Florian Liefers</em>
    </li>
    <li>
<a href="/threads/cc6b0afcdab1b28a523950722ad54d110c437e6a">Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</a>      &mdash; <em>Team AOL</em>
    </li>
    <li>
<a href="/threads/63d1cc21d2c43df308e0433237926ae9ad2318a8">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9449397d92a8bf0dc64815ede735018bc9fc6a31">ed/ing, InPlace, Set/SetAlgebra naming resolution</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b3f6758261f79308310b5d5e1b908454ab4b01e3">Warning for possible overflow or optional</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/44d293df84d9fc1e215fcb7d4b5bf0eea0a7ff33">Swift Generic Subclass Type System Problem</a>      &mdash; <em>Cao Jiannan</em>
    </li>
    <li>
<a href="/threads/0c88cf0a90b9d6575fa26a502a274a18e3a40509">Operators on optional values</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/e55147a9a97e01746d38bde8f64e9da15817cb86">Swift Generic Subtype Problem</a>      &mdash; <em>Cao Jiannan</em>
    </li>
    <li>
<a href="/threads/49baeec9825e88ed84c32f7cb105fc530eabc1a2">Swift Generic Subtype Problem</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/306b0dbb9ddeaed1c68734f7ecc87d1cbfa94e33">Operators on optional values</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/335c69f28e7e990dc316ff040b09e4d050ecdc4d">Renaming bitPattern and truncatingBitPattern</a>      &mdash; <em>David Turnbull</em>
    </li>
    <li>
<a href="/threads/c1083e87d2ab91a8a86ae9ba8c5487b30a78a4e2">Warning for possible overflow or optional</a>      &mdash; <em>Stéphane Lizeray</em>
    </li>
    <li>
<a href="/threads/0315e19fb840d9dcaa05625a37d4765c3a2cd3b7">Fwd: Swift Generic Subtype Problem</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/bf876fd76585ba586b2d34917be0004ce09a4be6">Tuple subtype problem</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d6526e97b249ac837a1ffadeca49dd6c9f4584fb">Brainstorming: Optional sugar inferred map</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/d711ac8e168e4b88fa0b6243473f012f392c63f7">[Discussion] Replacing Equal Signs with Colons For Attribute Arguments</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/9fe7863b13f31f5c4a9a144e7c89093ff96ff066">Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/9e671d82289e395550e208dc687f23ab0e51975f">Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</a>      &mdash; <em>Alexey Demedetskiy</em>
    </li>
    <li>
<a href="/threads/2f8b83c2b3ab4625e3e51148d4cbd2cef99253d8">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b4fb72d71355f3a9eb7759566c881bc97b5915ab">Currying and noescape/throws</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/ffc96d9a09806b4d863c71c82391f4fb3ad31ef0">[swift-evolution-announce] [Review] SE-0027 Expose code unit initializers on String</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/afe26315e06d27184aa608f26aa88b4d0926fae3">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/67b2b6f8fa75d15d645bc2fb060ae3f0665a5d82">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/7aaa68765ba39d105ecb6427bbfca84f0f5b4ee3">Proposal: Define and call a named nested function in one step.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/c40df15a2bfddb2e4159fe3f32e3abef21748204">Replace the override keyword by &#39;extend&#39; and &#39;replace&#39; or add an annotation like @SuppressSuperCall</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/9947e305b4c7ae5c35b97a7cfce6d2cc525fedd6">[Discussion] Modernizing Attribute Case and Attribute Argument Naming</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/525bd7bd7e40de8ec0f7ff75e844619ced957be8">[Idea] Add blockreturn keyword</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/b64717cd346f7e91259a4ff36ba43eb7e3d0a462">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d74a0ce88b33b969c968253d838744437473294b">Please allow me to introduce myself</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/98c75c7d43cbe810f483c8498b34c14b64641927">Proposal: Add function SequenceType.find()</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/10ebf055326239273939fcbb234cd7b34a5ce804">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9027b1826e14c6fe62e245fc0029ad66bf2c7239">Add clamp(value: Bound) -&gt; Bound to ClosedInterval</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/6e492a6ccc4064f4b8f87e0fdd20888266b5f419">Add clamp(value: Bound) -&gt; Bound to ClosedInterval</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/25f8d0144476436854cb78e3df857b6a5423af6f">Brainstorming: Optional sugar inferred map</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/fdd80cc6013be135a10d9b6ee68725156415ee7a">Please allow me to introduce myself</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/a2012e21e9d503c85eb55e31027cc62e461b51d7">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5fc3dcf81e2500792a13da518ec7e75a1408a974">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/733376c159261b5143fb7cdf404009e7dd63d198">Custom equality/hash for Sets</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/603df8c6dd1d47432931f22d7be026f7d6bad52c">Custom equality/hash for Sets</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0aaaccf90a4e6b7100f872f1652faaeb6960289a">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2b55c15679df3abaad3f6475c9a2e4c02917d688">Enum case count</a>      &mdash; <em>João Nunes</em>
    </li>
    <li>
<a href="/threads/dbc8e82966992f0d16e87144a756c964dc9a7874">Thoughts on property behavior out-of-band members</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/afd5b98faf8d077df738e8b098025cdc27e3cd24">[Review] SE-0030 Property Behaviors</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/24fae0eb9037a2a0fa7714f3dce83117c5af4be0">Custom equality/hash for Sets</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/501df29538150777fb610f1593ec55675fe4dce9">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fe6aa03097e3ba22ed4a41b6406d915ac13cdbc8">Idea: Support #if os(Darwin) as shorthand for os(iOS) || os(OSX) || os(watchOS) || os(tvOS)</a>      &mdash; <em>Kevin Ballard</em>
    </li>
    <li>
<a href="/threads/f45ee40758e3073093029a5ad8a460433d63fe72">[Further Discussion] Naming Attributes</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/cf8d882f6b018e18a572dcd41274846e6fe67850">[Proposal] Allow upgrading weak self to strong self by assignment</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/a4985680d7d295f70dfa536e35d4366ce733320e">Rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>John Flanagan</em>
    </li>
    <li>
<a href="/threads/f2c9f80e9944a5576c411fb48b6718f0c76a7608">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9a65d7dbea470011eaed3a25287ec68a0bce1a14">Thoughts on property behavior out-of-band members</a>      &mdash; <em>Myles Schultz</em>
    </li>
    <li>
<a href="/threads/f87a5b77515461ff2af047baff094f521a8a89cb">[Review] SE-0030 Property Behaviors</a>      &mdash; <em>Myles Schultz</em>
    </li>
    <li>
<a href="/threads/aa4020a8c7573f0c7a63aae18ce5bca4ab05e8fa">Swift Performance (JSON parsing, for example)</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/9b6be2b6e6dbd6e2494cdd5c8fc6966fc6c23633">[Review] SE-0030 Property Behaviors</a>      &mdash; <em>Patrick Smith</em>
    </li>
    <li>
<a href="/threads/7d93e661b1edf936ec167832867f404938aba8be">[Proposal] Allow using optional binding to upgrade self from a weak to strong reference</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/dff4a412a23266e15243cff637111fa4f6f0e0a5">Anonymous Enums</a>      &mdash; <em>Yong hee Lee</em>
    </li>
    <li>
<a href="/threads/2d5bc3bb7927bb91af5b4af942ad2b19638f5351">Feature Idea: Namespace keyword for grouping related internal entities without resorting to non-initializable structs.</a>      &mdash; <em>Jared Sinclair</em>
    </li>
    <li>
<a href="/threads/354b1b0d8911e40d5280819f6e0a73a43b4aaeac">[Discussion][Expericment] D-like slicing syntax</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/950b5cd2f359440c43c2bf7a0be94c8f9c48a485">Anonymous Enums (Updated)</a>      &mdash; <em>Yong hee Lee</em>
    </li>
    <li>
<a href="/threads/a163a462b42fb942b34b408230bc35199111f7b8">[Discussion][Expericment] D-like slicing syntax</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/92190184a70d131e64aa735c41eb7b31510b4948">Custom equality/hash for Sets</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cef235086ab4558c93190c91638ac49cc6be1f13">Custom equality/hash for Sets</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/53d23d4de385448ba53a52c27d494987681f8f36">Custom equality/hash for Sets</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d6df943ede30bcb6922f88fbe175067f9487caf8">Custom equality/hash for Sets</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2180d178cc46cca5d8da4303985748f68f0bbe67">Argument of &#39;#selector&#39; cannot refer to a property?</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/04aa50ed5e51f2ef0a040ce13307b27082f4c665">[Review] SE-0030 Property Behaviors</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/d7599bd0f1baf69b1edfb38d3eb627cdcf7b4be1">[Further Discussion] Naming Attributes</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5e4803b6493ce3689fceaa86dbc11d07526af3dd">[Review] SE-0023 API Design Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cc81a3d399d9714447273406d9f8a9168571e1c0">Rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d8305babff0d30b664a0aa92a2e18892ea4a157d">Rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d212fe82a79327872c594b4152f0f3cb0fd8ebb1">[Pitch] Flattening the function type of unapplied instance methods</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/cf62c80c855b751b9fbe3684523c3168d4abe4f6">[Pitch] Flattening the function type of unapplied instance methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cfab2b9859fb87cf3fcd9cb3d64cca7428ebd726">Rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5dae97d51577011b67d588384e28f214129dae8a">Anoymous Enums (Updated)</a>      &mdash; <em>Yong hee Lee</em>
    </li>
    <li>
<a href="/threads/bef6b29389678443b97c81e700f14f5f5c0c9440">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/7943b33dc318488488cf1325012ba6fe8a45ef24">Compiler directive for current closure reference</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/1fdf34537b8faa408fa9474c70649592b73d9613">Proposal: pattern match based on associated value(s) only</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/9931eda87309b2ce61247bd340f65e25ad58caa9">String type re-evaluation</a>      &mdash; <em>Norbert Lindenberg</em>
    </li>
    <li>
<a href="/threads/2e769b720c3a0245e033ec26ac549d6761826b7f">String type re-evaluation</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5e2b28e2a9b9f2789475e458a812b6406b8ddb2e">[Idea] Make Boolean @objc properties reflect better into Objective-C</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/f839560f620c670731da0e14557476c2a8c1eb3d">Rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7f24e15d65bf71c4a105ddb4c341254122bb1dcb">[Idea] Make Boolean @objc properties reflect better into Objective-C</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b110e3ecc2858c8e74a3966f0b129eef637182a4">Closure identity (was Re: Compiler directive for current closure reference)</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/5bbe96e559379d9f383f893d35e2f5e865e28f4c">[Last Call] Allow using optional binding to upgrade self from a weak to strong reference</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/2b8416160eeb7ccb63c2aa6209465cd7f3867b96">[Idea] &quot;Add needless words&quot; to Objective-C method names</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/613855de0aac8ad03887a7813ee86e313ccfeb64">Mutability inference</a>      &mdash; <em>Darko Damjanovic</em>
    </li>
    <li>
<a href="/threads/f57e6104937a258216a150fc1213ab1fe1f0c434">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/abc1cd88935696f4317cae5a79863f69c99c8502">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/32ca14630bb8a5364f0fc442bdf86eb1859d146a">[Idea] &quot;Add needless words&quot; to Objective-C method names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a45f6219e37a1af31b4e586053e5e0a5c76ef52a">[Submitted] Allow using optional binding to upgrade self from a weak to strong reference</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/d9bf9134e39cf98baed9d440cd0d0b7f5c729bc7">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2bbfe9b334b32824b08c61254d01a7541b482aed">API Guidelines Update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8e4f8119115a2b30ace661683112d1a0acfeb85b">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Janosch Hildebrand</em>
    </li>
    <li>
<a href="/threads/b5a6d85e0ebf544bb68f5faf14788ec2be75f18d">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/fc66f9ad9c1be9ce6ef4519853db5f239f964683">[Discussion] Referencing the Objective-C selector of property getters and setters</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/1433895b8500987072ac9ce66c0e68c1d77e5077">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/4c9ec062c0ae851cda224183ed2612b9b9a5fc23">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7d76907c557feed6a05b5e47998235431692b706">[Idea] ObjectiveCBridgeable</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/fe47892790f7fc0f4d0fe516734e2a81ab20cd22">Idea: change &quot;@noreturn func f()&quot; to &quot;func f() noreturn&quot;</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/73cf025ed43fe315a9c50dae8ce0a57aa416f2ae">Why Any.Type and not AnyObject</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2192b42b1052fd6ef6cf1da9423aa9d145c91fc2">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/470d3c2c515846efb6ba771817d0eee6ea15e33a">SE-0030 Property behaviours</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a08c1088b08fc09dddbd27b1d55ed8462019ef31">Casting Bug Swift</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/37cd2923f85bb94cab01e234403fec4430633271">[Proposal] Instance Operators</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/d89db3ecdafe944f41e94d8eae4521738875ff70">[stdlib] CString.swift initializers</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/c0a73508dc6e9b30d3879f45c3390f841469df40">[Discussion] Here we go again: Extension Functions</a>      &mdash; <em>Stephen Celis</em>
    </li>
    <li>
<a href="/threads/e34fdda930d6410e6c82b2e52f8b373a8faed014">For-loop revisited</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5762cbaeedc069f5f149d4a81327f5b17a2eb9f8">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/9149ecffdcfb1ce56b655425d2318449e7808985">[proposal]Decouple definition of Int8 from target char type</a>      &mdash; <em>William Dillon</em>
    </li>
    <li>
<a href="/threads/aaf5af87910f02e2565b09d387d08b6fd9e27055">[Discussion] Naming directives</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/78340fed1f701c8574a7e8cb5cffc8431108165d">Why Any.Type and not AnyObject</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/e726b253589bae4f1e7296ff67a57dca5b8d056b">Casting Bug Swift</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4e3f8a6cd32c1421c496259b676a80d6b6a435e9">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/fc95f64dd4768d3b7cc0ee7617104117577ae3c3">For-loop revisited</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/ded466d01cdd7e19170c3e844a71f81c754fae17">Mutability inference</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/f65fc80dc75ce4b5b0b1b1f02e170c58878134ba">[Idea] [Pitch] Distinguishing code comments from text comments</a>      &mdash; <em>Doug McKenna</em>
    </li>
    <li>
<a href="/threads/77b042c95291903499ca458845884c311a462b1c">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/9f6382731a1c0e1c5c1210d63911cd73968f1366">[Proposal] Instance Operators</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/56a4ecda0844cb425310c573724c67646982ab85">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ecb00d449391b4bb574cc671e405c3435f14ef26">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>David Beck</em>
    </li>
    <li>
<a href="/threads/6facdba0a2c2dd71221a246a5ef947e1e05d3fa2">[Pre-proposal] Use of angle bracket type generics with protocols</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/7a8a5bb7e3dbef56147a79c12e496ada55fa7dc9">[Proposal] Instance Operators</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/b70bcc71ba96a4ae3a7c64a69a89d6b03d075b9b">[Idea] Allowing most keywords after &quot;.&quot;</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/857dacacee94cce77cada1a83d2a5d2a2585d2ed">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Vinicius Vendramini</em>
    </li>
    <li>
<a href="/threads/7b3504c9f16ee9236011cc0ab2b6ae58163d1e00">[Pre-proposal] Allow multiple compatible enum cases in switch cases with named variables</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/1a5fe991fcb734cae0a2a93b7d5ff1aeb243fd64">[Draft] Allow declaration of abstract functions and properties on classes</a>      &mdash; <em>Vinicius Vendramini</em>
    </li>
    <li>
<a href="/threads/81794c653174bedc06249ce392af316b6f77d14d">[Idea] Remove variadic parameters or pass an array of matching type through to the callee</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/78a625e1009b00e00d995df7968d07b5435ab2e5">[Idea] [Pitch] Distinguishing code comments from text comments</a>      &mdash; <em>Doug McKenna</em>
    </li>
    <li>
<a href="/threads/c1bf067a53575875f9d651cca0f7fffe3ca3812a">Better Swift interface for NSDecimal</a>      &mdash; <em>Florian Reinhart</em>
    </li>
    <li>
<a href="/threads/bb542e718fdd4bf2534eadda20e80be4e0a9a06b">[Discussion] stride behavior and a little bit of a call-back to digital numbers</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/925944edf08598e0ec3d00a67173e1d9c791c6ef">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Mirek Petricek</em>
    </li>
    <li>
<a href="/threads/5c7704994852d47ad009c45eca8011dee4679d12">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/a96d460caac9f50d65c8decee1cf540c32c5d472">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/4d56ad98880b771a7427c5ea1b914c9933422d3c">[Review] SE-0025 Scoped Access Level</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/0c0979bc90f3d005451077ad74ee663de0634daa">[Pitch] Flattening the function type of unapplied instance methods</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/621d08eaba3e0667e000cbbbd2a791f17b43995a">Proposal: An assignment operator := that ensures nil before assignment.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/bfd1aa23677abd6f25a674aaf5a4cd9650cc910e">[Proposal] Allow static protocol extension methods to be called directly on the protocol</a>      &mdash; <em>Rasmus Kjeldsen</em>
    </li>
    <li>
<a href="/threads/f1f32feee4ae4275aa1f98a51edbaa2c6ca97f5b">[Draft] Mixins</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/71286ee3edcf3339ea5ddb639a63187f24415733">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/7d5878e977f74337ece0dd4382bb4e1584b79534">[Idea] Deprecate the &#39;default&#39; keyword.</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/f1aee590a2ce970c0cfbd96fa4bbeb4db5cc6901">[Idea] Improved bridging of NSNumber and NSValue types</a>      &mdash; <em>Mike Kasianowicz</em>
    </li>
    <li>
<a href="/threads/4337272c93b8748d8127e7aef67cac71bc3ef44e">[Idea] Deprecate the &#39;default&#39; keyword.</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/c60dc1c184e81f445ca831be6d2f0b2c286ed716">[Idea] Deprecate the &#39;default&#39; keyword.</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/fb5f0ecd9bd3f90a6f6280974ea6e2dc5c5203d3">[Idea] Deprecate the &#39;default&#39; keyword.</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/6354e91f73d56f3c32b770400d96100346449914">[Idea] Allowing most keywords after</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/91cf77858583d5b4797e07f6525cbd385c3a6a11">[Idea] Allowing most keywords after &quot;.&quot;</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/9d4d1d097d59c2f44017eb2de1efc3d9e3b41db0">[Draft] Mixins</a>      &mdash; <em>David Scrève</em>
    </li>
    <li>
<a href="/threads/2797d5860c96480f8c4a823e37b9f8ab57517b14">[Draft] Mixins</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/5935967aeb448d0a476934b37101054173a5243a">[swift-evolution-announce] [Review] SE-0025 Scoped Access Level</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/8f55c6ef63c210b02518255bd1d848eb6ed49eab">[Proposal] Allow static protocol extension methods to be called directly on the protocol</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/23b2b2ed7dd15ff84817fdf36f6cc95b8250a4ed">[Discussion] stride behavior and a little bit of a call-back to digital numbers</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/0d4c29461ea2cd60ee47c57d28eba9dfb1bd451a">[Draft] Mixins</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/18526d782e7395899dc38c94e0aa68beb51f3487">[Discussion] stride behavior and a little bit of a call-back to digital numbers</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/e534888016a32aa80f9cc564e22d6bdbab63a86b">[Discussion][Expericment] D-like slicing syntax</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/a0b5b7503c6c90c431a10ec82decee9c9097a896">[Discussion] stride behavior and a little bit of a call-back to digital numbers</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/8b6543829520aaf5f120a58633a9560457fe18ed">Proposal: &quot;out&quot; variables</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/cc1a54a71efa6e20ba24004a2aab524d52e246bc">[Discussion]: Deprecate !-Unwrapping of Optionals</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/6b70ef0d97684a4f87b1fe06a6aa88d8a331ed35">Type based reference cycle detection</a>      &mdash; <em>Darko Damjanovic</em>
    </li>
    <li>
<a href="/threads/f0299dc0fb15150e837f238d2ad111c2fb7242cc">Changes to RangeReplaceableCollectionType</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/7bcd84ab440d3d37d131937a6949254aa0fafec4">Type based reference cycle detection</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/ea2a335ffd46c1fe991e447641f442da4125ad63">[Review] SE-0025 Scoped Access Level</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/61ec6bc74ce78dc8181901056f9ee2beb8464042">[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/15bf3524230b920c2dfd9dee064ad365ffbfeacd">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Alsey Miller</em>
    </li>
    <li>
<a href="/threads/64586f06b7f2b6112071bc214b5ef59fe2f372b8">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Alsey Miller</em>
    </li>
    <li>
<a href="/threads/6403d2ecb40aa4bfa5d9ae630e18c0ee50b7891c">[Discussion/Draft] Allow Precedence For Prefix And Postfix Operators</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/fbf6a786e28633515a1863ed53455b4004f96a7d">Idea: Extend &quot;guard&quot; to try-statements, with a catch block</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/d488a59bc4373530b6ba946329c257b5b8ccec86">[Administrative] Update proposals with Accepted/Rejected status</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/c6359990479f85890e1e95fb3b45c3631be18c02">[Discussion][Expericment] D-like slicing syntax</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f26879335a187d8fecff3a3e596cf759ca36ff9f">[Discussion]: Deprecate !-Unwrapping of Optionals</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ffd025a04c977ff974dca057520ea1d5703dbfce">[Discussion]: Deprecate !-Unwrapping of Optionals</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f05117306bb4bc6127e813953d92590affb7a63e">[Discussion/Draft] Allow Precedence For Prefix	And Postfix Operators</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/16b0c99e3045e5e7d2e0f27c601ced1ecee06b00">Pitch: make class initialization complexity more progressively disclosed</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/943c1e1fe752b8f3c048aeca9e3e1a982bf7aa8c">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Jeremy W. Sherman</em>
    </li>
    <li>
<a href="/threads/443a14769a333be5c55595208b08ad7848dc520f">[Discussion] Enforcing Calling Super</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/d9e7953c11a7aea932c92adca541b491bd7bc924">[swift-evolution-announce] [Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/0050b00a6b6205b4c0f5dbc994c7204d0984a774">.stride: using real ( floating point) number ranges</a>      &mdash; <em>Ted F.A.van Gaalen</em>
    </li>
    <li>
<a href="/threads/4d960af501a691b9bad99b50979fe41e9b852112">.stride with real (floating point) number ranges</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/4e2beee6b9d37f4b344277f516cecdac78317939">Pull requests on Swift Evolution</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/f6269a1a9ffae8f34346c30126d70b72d6b6361c">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dmitri Gribenko</em>
    </li>
    <li>
<a href="/threads/03f8056d14903f306b070142e28700118364610a">implementing real (floating point) number comparison tolerance as a compiler directive.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/b3fa95060cededa4e6d3bab099a66ea25abcc913">[swift-evolution-announce] [Review] SE-0025 Scoped Access Level</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/a71d22822335a6dc362309e46882f5e022a8d560">[Discussion] Modernizing Attribute Case and Attribute Argument Naming</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3e953f2a443150fd00fef4d08a2bd63b519cd39b">[Draft] Target-specific CChar</a>      &mdash; <em>William Dillon</em>
    </li>
    <li>
<a href="/threads/ffd155374349c1c822cdfd02442e5d6bba15bced">[Proposal draft] Import as member</a>      &mdash; <em>Michael Ilseman</em>
    </li>
    <li>
<a href="/threads/2284c8f7fb1a02cdfd6e72f57c09eae25ade62f5">Make non-void functions @warn_unused_result by default</a>      &mdash; <em>Davide De Franceschi</em>
    </li>
    <li>
<a href="/threads/031e903f5d0e64d0fd1819fdb188b08554983bdc">[Draft] Mixins</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ab4e85ee050b11f872099bf596234cf47999c778">Remove Failable Initializers</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/1442c190e5f2e4117f28919687b925262e8272a3">Proposal: conversion protocol naming conventions</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/b5438d002837d2e63ae953bae704efd31193a99d">[Manifesto] Completing Generics</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/f575e2649fbc84165325423751141e2c74b4e60a">Remove Failable Initializers</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/70c8d357c2351513f2e8c8528a15d2bd63eab4ed">[swift-evolution-announce] [Review] SE-0026 Abstract classes and	methods</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/0b425254e8814445089ca9dad4d509cdc68d293e">[Proposal] Conventionalizing stride semantics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/57c897c47ed8b4a847f0c8ce5216e4662bdfb421">[Proposal] Conventionalizing stride semantics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6ff2680129c59910e21ea28daf5a7639221e3982">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5d0f32d7fc73b00451a89cfd47cb18e1dca8ff3b">[Review] SE-0040 Replacing Equal Signs with Colons For Attribute Arguments</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/49fa56110c508b86061b2428b2280fd90ad1f73d">[Pitch] Move @noescape</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/a84941bda85f31194c1ccc92ba93fd0fcd2bd2db">[Completing Generics] Completing protocol extension diagnostics</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/65dadfcd2f6f402e528883c0c10ce390f028ddb9">[Manifesto] Completing Generics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/add757e5aa2a2b0836eb2fa05ffdf253d7e34884">[Manifesto] Completing Generics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/18e7a80b5b8a0f3a99434ce1168875a22bee8fcd">Proposal: conversion protocol naming conventions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e35094cb0e9a4e3ee27056f306fbdec34a078d04">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/6670354e420c35547e9709da3a0aec6046748410">Exceptions with guard-clause as shorthand instead of do/try/catch</a>      &mdash; <em>Matis Schotte</em>
    </li>
    <li>
<a href="/threads/9d2a6a68930110bf1d91ef33e75439307f23bdcd">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/badebaea61a77d22e142da93f4ff22d910691c27">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Dietmar Planitzer</em>
    </li>
    <li>
<a href="/threads/d6544c7119fbf909f6a40d260b865d06f459d1f4">Strider with &#39;from&#39;, &#39;to&#39;, &#39;by &#39;and &#39;tolerance&#39; parameters .</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/11e9ea57b9ccc4330e2f602b04df8dea671ed6f4">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/e4cbe3a0c3bc77762029e65177a670e7f5ed025a">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7c153f1d0ce98747c419008cc70d03dbbb247e55">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9aeb7e6d6f08be4afb707b240f58962d0e7bcb66">[Manifesto] Completing Generics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/024f63f2c56d34eaa5811679340352b3777ed6b4">[Pitch] Instance var/let property as type member could be unbound function</a>      &mdash; <em>Tikitu de Jager</em>
    </li>
    <li>
<a href="/threads/bcac89cf81b701a653af4ba19c47b0100ab82333">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4c17f68551cc42710e4ac86955724bb142dadc3c">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3a5a515adebacb082081a702663dbaa87b9d4ee2">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/200d54b2d53e91a633c2699420ba107ff813e2cb">[Draft] Obejctive-C Keypaths</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/82d779ba9f6ac5ccaf0b2af6efde4560bf250cf5">[Proposal] Mixins</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/6d8e87cf7b644995d46d6afca7d063f7fd261e64">Proposal: Swift should automatically modify your code to improve compile times.</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/685bc5a72fb78658c9f90b7d940e5de7fd1cafd2">Is there an underlying reason why optional protocol requirements need @objc? (from -dev)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b6f06da145b4dec910585e2cca3d3ff5c72cf07a">[Completing Generics] Opening existentials — A use case: type-safe dependency injection container</a>      &mdash; <em>Adam Sharp</em>
    </li>
    <li>
<a href="/threads/3fc160c28e09dbc43fcb630e6edbe59d3f49b1f1">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e8874234a68a807f242a4773e6b8d47c24dae14d">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1532dab7f81a9063e47a6c4dcfc81a12c7d96889">Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/baaa59b3cbaad9484512c56652d26ef04363b552">Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</a>      &mdash; <em>Kevin Lundberg</em>
    </li>
    <li>
<a href="/threads/4b66cb946976a7d4cf7cd957b454f7913c42c3e3">[Discussion] Adopting a new common error type outside the bounds of NSError</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/22f9e5125c3295638aae69f09be47a0206e1f2f7">[Proposal] Change infix operator attributes syntax to be more consistent with the rest of the language</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/930d85d9475c22b837a308a60dd5e307aa1b5ac7">Remove Failable Initializers</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a35a2fc97376056616d91da49f41160f3daf0516">[Draft] Conventionalize #setline</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/3eab2c3e821b0a299abbf4658f564915dd3775bd">[Discussion] Updating Struct Values While Looping</a>      &mdash; <em>Paul Ossenbruggen</em>
    </li>
    <li>
<a href="/threads/bf7fe70352a2a30c6023b414d12425018bc9dd67">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b21248c8272772341e9c8f81e5d6ad80044c8cff">Allow protocol vars to match derived types</a>      &mdash; <em>Mark Anders</em>
    </li>
    <li>
<a href="/threads/07a08d6b2dcf9e6d8c9d987d1e014f2e7fef1d4f">[Discussion] Adopting a new common error type outside the bounds of NSError</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6d8274e60a5d111cece01e7b863f903617aea1ed">[Accepted] SE-0033 Import Objective-C Constants as Swift Types</a>      &mdash; <em>John McCall</em>
    </li>
    <li>
<a href="/threads/15165e2e91cc7eb3e4e9c3e2e65f3ad6ed7fed48">Remove Failable Initializers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6a123c89eb2297dcae72b6a0941f11048c446497">[Discussion] Adopting a new common error type outside the bounds of NSError</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/10263e98003a8f5c68506edad3cd821961729745">Make distinction between ?? -&gt; T and ?? -&gt; T?</a>      &mdash; <em>Sébastien Blondiau</em>
    </li>
    <li>
<a href="/threads/2d54a9adb5409688de5cfeb3e9e0dd1ab8c881dd">[Deferred] SE-0026 Abstract classes and methods</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/df1e513f038b64238f93220d876336731b33653f">For loop</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/2f365243a3227acc4cf4eba25261f401d49e8881">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ecba2b827e894defe25c2b3bbd6e680becb66bf9">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1e0c5fb60f8fcb3cd95d3ce93afbf83e459b11bc">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/313d247041019b249bc7001fbf2e8d1913ef1274">[Idea] #suppress(warning-identifier)</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/2b00c772ff9e47bffa95a2bf92aa5ab9929d7371">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e0af1d8afc3a1d465b432eb433eabb20716f54ec">Universal Equatability, Hashability, and Comparability</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/709204d2a38b3370c583d1914781b9237196d770">[Review] SE-0039 Modernizing Playground Literals</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8c7194d59e2921d12d8d4706ae063abd2b04f8f4">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/b29dd794d2b318221770ba1af4a3d39364b1f676">[Draft] Unify &quot;import Darwin/Glibc&quot; to simply &quot;Libc&quot;</a>      &mdash; <em>Brian Gesiak</em>
    </li>
    <li>
<a href="/threads/a3a1387fe7d98edc810bedfb0b1ddca490fff9e0">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/242715865d831d8ad96ce3aec2c49d05ca8cc3a7">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/c128f9e97df452486f704f45ad41c532b3c3c422">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/8c06fb63f1b2eda22dadfe326a6369104480f464">Add @noescape to output parameter of &#39;UnicodeCodecType.encode&#39;</a>      &mdash; <em>rintaro ishizaki</em>
    </li>
    <li>
<a href="/threads/f4949658b54a448ea6eaa2acd7328fa24c572b36">Get rid of #endif</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/aaf409f149df7f0463774d0fbd8f684d8862633d">For-loop revisited</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4b107bec7866972c3e8394781261ffec21a80a50">For-loop revisited</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cddf1b7903d1062189152fe619e6f959e489f365">[Draft] Resolving operator precedence conflicts</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/833067776917dcac9ef1de1b5285024309174317">[RFC] New collections model: collections advance indices</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/4421a102b165676363dc9a18cf1a87a65029bf9e">Pre-proposal: CaseEnumerable protocol (derived collection of enum cases)</a>      &mdash; <em>Jose Cheyo Jimenez</em>
    </li>
    <li>
<a href="/threads/3454a2e451a5218b9ed174455e723e68261ad48d">For-loop revisited</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/24e75a46912d3c97a6ed0fa8fe16aee31b0fe79b">Proposal: change infix operator attributes syntax to be more consistent with the rest of the language</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/19ef1da5eb4afae5e5e71fa9bcfdcc6af97308d3">[Draft] Allow trailing commas in argument lists</a>      &mdash; <em>Grant Paul</em>
    </li>
    <li>
<a href="/threads/ce547fdbd7c69917c5ae0e7c3a0581bc98b030f1">[Draft] Resolving operator precedence conflicts</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/74ec8193553a88c4fada2df5001da0531683ff34">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/57353437961a8e7843577dd36983a5cec5ae88ab">Communication :o( :o| :o/ :o))</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/089798e588c949aa0c0aaf02d9ae9adbda61f7ae">[Draft] Allow trailing commas in argument lists</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5b81cb72a97147545f2488cd8c438b795faed606">[Review] SE-0026 Abstract classes and methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0c509b7433151c509fef2ddebf0a91b0616ee671">Making `.self` After `Type` Optional</a>      &mdash; <em>Tanner Nelson</em>
    </li>
    <li>
<a href="/threads/b5a0f70dbb6347f8588806bc020ad956c153d702">Making `.self` After `Type` Optional</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/407e0a8ce1ffb491bc6a5c6967c2d72dccc64d66">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/71e91554cfde00130c44ca1433bb131f3fe048b0">Allowing trailing commas in argument lists</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/ad2b1819c526cd1a1dbe595a31787c0e9c251853">[proposal] Generic type aliases</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/a5ce7d185faa4ea83a036a707a43d723e91b9552">[proposal] Move @noescape and @autoclosure to type attributes</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/c8fe39a5574bc798629153fa037459fda6d2fff5">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>David Condrau</em>
    </li>
    <li>
<a href="/threads/be76d1711019efb8c29f652443466895c12507c4">[Completing Generics] Variadic generics</a>      &mdash; <em>Jonathan Tang</em>
    </li>
    <li>
<a href="/threads/411e3f2587ddc0a9d456bceff32704a306d9c0dc">[Completing Generics] Opening existentials</a>      &mdash; <em>Jonathan Tang</em>
    </li>
    <li>
<a href="/threads/8b9fd607b22894d02a5fffc75688e9ba41006b3e">[proposal] Generic type aliases</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/178dcedf7043c076bd7b731ac5a686ee9fc23154">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e05232c30b767a5c85a04edd3b9b121d73bb8119">[META] Re-invigorating the compiler directive discussion</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/f4dda496250573cede4384dbc98b09ad2b13895d">[Draft] Operator precedence and syntax</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/9cabb6ab8b536244868c3841311a80f5cc62cf15">[Accepted] SE-0039: Modernizing Playground Literals</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8f75a79ad65ddcad0c2dbef7d9784876eb81d058">Add an ifPresent function to Optional</a>      &mdash; <em>Lammert Westerhoff</em>
    </li>
    <li>
<a href="/threads/55f2c79aab980af52e939b31355fe0ec1e4ed884">[Manifesto] Completing Generics</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/06230ec387b76134d4f4e165a67600fc018c8eb8">&quot;where&quot; on a switch case with multiple items is misleading</a>      &mdash; <em>Amir Michail</em>
    </li>
    <li>
<a href="/threads/8c400e3375a1be0109d39f17d02ebcc741e7cf8a">Universal Equatability, Hashability, and Comparability</a>      &mdash; <em>Jose Cheyo Jimenez</em>
    </li>
    <li>
<a href="/threads/69a9f1c97faf85788bad38e474a7bc8ec81e4ee2">Allowing mutable members in structs</a>      &mdash; <em>Dan Raviv</em>
    </li>
    <li>
<a href="/threads/6c31ed35777ef70f607a6e82670b9c7156083cfe">[Request] Variadic parameters as arguments in closures</a>      &mdash; <em>Ramon Gilabert</em>
    </li>
    <li>
<a href="/threads/99db8961bc909f791c1433d81f63560d29e2108d">&quot;where&quot; on a switch case with multiple items is misleading</a>      &mdash; <em>Lucas Neiva</em>
    </li>
    <li>
<a href="/threads/6335672f3e342cbbfaf0d69175838f0b729a0723">[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/cd65a34ba823ffd843ff04150c2b9a7c35a6541d">Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/2d3f799abc73b3be32c7f7ebce8a1ce3c23f172f">Source Formatting</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/a2749933484501f110e4baf2d48582698c711dd9">Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/ce07f76603bd3d7bcbdb0ebd30e53c00b534e1d9">[Revision requested] SE-0025: Scoped Access Level</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/bfe22bf73bb90ee8ac24b4facec592f82de4f77f">Proposal: Allow Getters and Setters to Throw</a>      &mdash; <em>Morten Bek Ditlevsen</em>
    </li>
    <li>
<a href="/threads/9d8a1f22178a471d7adab72f553c83e8bd0db7a6">[Revision] SE-0034 - Disambiguating Line Control Statements from Debugging Identifiers</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/c70ff82b42a900883c1ae4e7123759a79d6a937d">[swift-evolution-announce] [Review] SE-0046 Establish consistent label behavior across all parameters including first labels</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/f664dc9aa55bb061f8d19d653f45f949ae08d28e">Idea: Extend &quot;guard&quot; to try-statements, with a catch block</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ef8035e9613c96d0944b7257080ad22100a8349a">[Pitch] Introducing #fileName debug identifier</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/775aa0db4d790c03f64a791cb7702351d4620cdf">Changing the curried static methods</a>      &mdash; <em>Brandon Williams</em>
    </li>
    <li>
<a href="/threads/0ed1b6cbeb87d05ebb034a052188afb3c099b2e3">Alternative For Nested If Repetiion</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/22ac868260354879791731ba6b319af29daf539b">Proposal: Allow Getters and Setters to Throw</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4a4cece052d3a305c704c6f22ec04630e121615e">Solving the issue of unit-testing precondition with the Standard Library?</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/86d392eec8113b8f0f0d9e4b56903909dd29826d">[Review] SE-0046 Establish consistent label behavior across all parameters including first labels</a>      &mdash; <em>Kyle Sherman</em>
    </li>
    <li>
<a href="/threads/cc2a10eb88355093e21fe63e0db0c379cee4ea06">[Draft] Throwing Properties and Subscripts</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/bea660fa2bfacb0f25ec2cfcd0f6da2c99a6d0aa">[Pitch] Limit Implicit Capture</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/35374f37aafd3cd77ea3ef9f045dc97e545e3e88">[Pitch] Limit Implicit Capture</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/7f6e9395d04979a875b309907e42b07d7a7feb51">[Proposal] Add an API to Unmanaged to get the instance it holds &quot;@guaranteed&quot;</a>      &mdash; <em>Arnold</em>
    </li>
    <li>
<a href="/threads/85af573b78775f534a8cbf638a24b986547dffeb">[Draft] Expanding Build Configuration Tests for Simulator and Device targets</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/7666698978e73f66c3cad16df4bd580dc89c4d5f">[DRAFT] Introducing a Debug Build Configuration Test</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/4bf4d59bfc227e05d8ed2105f777d5162dd3af58">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/438f75da0cbf5b8418c39964c9737d569861819c">[Revision] SE-0034 - Disambiguating Line Control Statements from Debugging Identifiers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5d67e7c2bf60a3784f8894e4c354664b533f30a1">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/126004f35d0cbbdbc346000104a14313ad0f2764">throws as returning a Result</a>      &mdash; <em>Yuta Koshizawa</em>
    </li>
    <li>
<a href="/threads/af323410fca37005e6b6056a8bb60670ebf5ff03">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/e56acd5f63db340521e1465c196322de7d7fe222">Simplifying Function Parameter List (when calling)</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/435580ec820da5c0ed0b5fb4a4b774a7ea748dc6">Removing Variadic Parameters.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/5578d0fae3f0a96eccc2f677e5f3aa20fe275310">Should all GeneratorTypes also be SequenceTypes?</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/09f46066893636504839a86557693188c9dc6e9e">Two-for-Tuesday: Resettable Properties</a>      &mdash; <em>Patterson, Jason</em>
    </li>
    <li>
<a href="/threads/02a3f6f0265fd8c57d5e78af5c381b5e7ecb9c09">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ff8b354839cedeb4a8077db3ace447cb21610eed">Add an ifPresent function to Optional</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/d019e85bf22cbef654a603eb969e3396c6c45733">[Draft] Introducing Build Configuration Tests for Platform Conditions</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/dc4122968ab0124c16731f4f218050f6c1d75b72">Simplifying Function Parameter List (when calling)</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/c1f9a06302d0b78e8f2afa04bf618205dc56a22d">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/6b64e41e4228ee0de3776879a8e90fb7cfc049ff">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/c432f20185b7880f5a4b84d8457b581c59a3ed3a">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ef36fc7aa7cb21eeb6e1456ccd9b9943a0f66c9d">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>David Ungar</em>
    </li>
    <li>
<a href="/threads/3c6eb23c09b26890353f44bac0729079d866e3d6">Thank you, bye for now.</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/60a75014942467e5209336d9517cdfc288486eb6">Thank you, bye for now.</a>      &mdash; <em>Ted F.A.van Gaalen</em>
    </li>
    <li>
<a href="/threads/cf52dcb68d0d34e4b4349e30ced444e74fd9a383">Thank you, bye for now.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/dc58fd00dea92e74085d88cf297e1c86b2084700">Two-for-Tuesday: Resettable Properties</a>      &mdash; <em>Patterson, Jason</em>
    </li>
    <li>
<a href="/threads/2854fbe309098b668daf4d6924d980f2b5a75136">[META] Re-invigorating the compiler directive discussion</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/db2bb4cb522ada94198ff9c01d96581bec0f1410">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/b0438ccae67b80195d01a91c75f82f6a8b6068e2">[Draft] Allow trailing commas in argument lists</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e28f4a61c05669f920a647f9fb28b3c22347978c">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ad0e0cea879d7793da627f267cceaecebea85464">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Lorenzo Racca</em>
    </li>
    <li>
<a href="/threads/e62c1241c9ae9a1d4dfea2f08a7071774c3f6e70">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/55322e5c90dd87a5a42433ef80b555571320a2b5">swift-evolution Digest, Vol 4, Issue 35</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7f2aee726576c0189a02cfbd568ba0c975843fbd">[META] Re: Mailman?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5222e4c78f70e7a284549424e02c0de0121f20d7">[Pitch] Make the first parameter in a function declaration follow the same rules as the others</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3a04ed53f0fac53374261a54e1c41ecaa8054b8a">Draft Proposal: Declare variables in &#39;case&#39; labels with multiple patterns</a>      &mdash; <em>Andrii Chernenko</em>
    </li>
    <li>
<a href="/threads/5174798c869eff52dbfaa8f76dfcebbd1d321e3d">[Draft] Abolish IUO type</a>      &mdash; <em>Chris Willmore</em>
    </li>
    <li>
<a href="/threads/0c0f6533b6e74ea9f87dd1bb87e5c3b55762df31">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/f386136b7e200cd7ab6301cbd7aa08ca6e92b59e">Proposal to remove semicolons</a>      &mdash; <em>Chris Wood</em>
    </li>
    <li>
<a href="/threads/26582ada07acb000d2393b27b1ff0b40e2e4c25d">Notes from Swift core team 2016-03-15 design discussion</a>      &mdash; <em>Alex Martini</em>
    </li>
    <li>
<a href="/threads/59739e07dc89393fecce465ad21040db1a43a305">SE-0047</a>      &mdash; <em>Michael M. Mayer</em>
    </li>
    <li>
<a href="/threads/37a7e578de5aca1c75b309f06d69caa3af03eb7a">[Pitch] Limit Implicit Capture</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/92e0edd16756c6559bfb4ffcfe2dfc457fadf21e">[Draft 2] Throwing Properties and Subscripts</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/89f22c9e39634647e2249b9905c7b3a9e9e00dac">[Draft] Abolish IUO type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/5af6da2948ebab795402f1356a661a7416339e9c">Removing explicit use of `let` from Function Parameters</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/de2a5e7ecd63e264977403864651af784ee757c3">What&#39;s the best replacement if &quot;Remove C-style for loops&quot;?</a>      &mdash; <em>nebulabox</em>
    </li>
    <li>
<a href="/threads/9e8182da18b3a776ca78e6a8198b254fcf84df20">[Review] SE-0042 Flattening the function type of unapplied method references</a>      &mdash; <em>jazzbox)</em>
    </li>
    <li>
<a href="/threads/e01689d35b2a77d2dde5e0b6ca2eb222974664ae">struct subtyping</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/5f5918224fe0d8cecb2c3431e993a5bd984df4ea">Should all GeneratorTypes also be SequenceTypes?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fef988771ee9850e6dfb0c3def27ff448a327566">[Pitch] Remove bit shift traps</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c6ecdee300b26ccf2f7c2b43886f44ad7aca3f5b">Draft of proposal for autoreleasepool signature change</a>      &mdash; <em>Timothy J. Wood</em>
    </li>
    <li>
<a href="/threads/ee5f94f9133cc6041d40d55879fdb18406d53c5b">[Draft] Adding a Build Configuration Import Test</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/251d2bbf9c5970b1b394c391dc945b8520514b0f">[Proposal] Factory Initializers</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/2dfce0cb71030705ceb2ee63c87df64322b422f8">#selector and Void methods</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/44318f53e206ee4468f80ce031ad11561034c44f">[Proposal] Remove behavior on AnyObject that allows any obj-c method to be called on it</a>      &mdash; <em>Kevin Lundberg</em>
    </li>
    <li>
<a href="/threads/50c48097824148ce4c98ad9d2194e04c89b10166">[proposal] Allow trailing closures in &#39;guard&#39; conditions</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/e9f291224fb3e610d4b2b39df55177ddc2a0a7ef">idea: immutable setters for structs and tuples?</a>      &mdash; <em>Zsolt Szatmári</em>
    </li>
    <li>
<a href="/threads/75eda77600b399d103f847f157fad78c4a49521a">[Idea] Find alternatives to `switch self`</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/3e73fb1873290e11ded93cb58e7e2005b6f44279">++ and --</a>      &mdash; <em>Biala</em>
    </li>
    <li>
<a href="/threads/880b50ef83bac58a3d4a5a02a7e4dbd010c41448">Draft Proposal SwiftPM System Module Search Paths</a>      &mdash; <em>Max Howell</em>
    </li>
    <li>
<a href="/threads/10dc5adfe28a89e2356bc7dba24ed0a3e70d7336">Alternate proposal for multi-line string literial</a>      &mdash; <em>Steve K. Chiu</em>
    </li>
    <li>
<a href="/threads/2d1f5449de7f1069e55ca33957e09b84528a2a13">Draft idea about user defined annotation and processor</a>      &mdash; <em>Steve K. Chiu</em>
    </li>
    <li>
<a href="/threads/866e40414d70ad02d0bd4a3042dbde4057b10d2c">[Idea] Find alternatives to `switch self`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4fa202ba9768f4c7143719ca373e9e803643f5c3">[Pitch] Change the endIndex value for closed Ranges and Collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bed38983934e7f2bc620900e21c74b41563b412c">[Pitch] Change the endIndex value for closed Ranges and Collections</a>      &mdash; <em>Pedro Vieira</em>
    </li>
    <li>
<a href="/threads/731d0db0ffa6d4badb6fb68f2201604e38323c1e">Feature proposal: Range operator with step</a>      &mdash; <em>David Knothe</em>
    </li>
    <li>
<a href="/threads/a7e6132e824a4b3cbbabd2128542ea909deee623">allowing to specify optionality with type inference</a>      &mdash; <em>Hugues Bernet-Rollande</em>
    </li>
    <li>
<a href="/threads/63e6432119c16cba49456cfb0f16c83f404a58db">Fwd: Draft Proposal SwiftPM System Module Search Paths</a>      &mdash; <em>Nicky Gerritsen</em>
    </li>
    <li>
<a href="/threads/dad64b9534d045833a60f21dc2523cddaa3d2cbc">Notes from Swift core team 2016-03-23 design discussion</a>      &mdash; <em>Alex Martini</em>
    </li>
    <li>
<a href="/threads/941b273ce3e93d3f79bc7fd8a213923d9a64a7e7">Catching NSException</a>      &mdash; <em>Jon Brooks</em>
    </li>
    <li>
<a href="/threads/688ea325f70f572a727c446991708c458bb97cb1">SetAlgebra naming update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/137ef317bd2f4155439d85c857e6f13238dbd73a">[Proposal] Change guarantee for GeneratorType.next() to always return nil past end</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fd4553254fbf95ce8ea5e2f794dc9e69ef2084d0">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a33a1f57a0bac2abb05f6cb359f281d763c49aef">[proposal] Generic type aliases</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e2dfadce2e1194d8ec8a73b1a65860743deb752c">Deprecating Trailing Closures</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/f949268e090020f3fc7774c478b0983f8ae56046">[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/87e9d35b3dc33415e59783bc98fc98400ce97e72">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6b939c15da9bd84746f6d6619c77fbb8f41e5ceb">[Pitch] Change the endIndex value for closed Ranges and Collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/51e438023da2780ef02f3689fcaa0ceebc1f1e84">Bike-shedding alternate collections API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fc890aeb0a9178d277856c1f51e1d734cb08c94e">[Pitch] Change the endIndex value for closed Ranges and Collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/675236014524a63b01cadcbb1e5eda3958c8414a">SetAlgebra naming update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aa5552cc68a0d075dc17769b67d5af0769c3128e">SetAlgebra naming update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d265557ecf10ca5161498cd052eaab16128be16b">[Idea] allValues for RawRepresentable enums</a>      &mdash; <em>Kevin Randrup</em>
    </li>
    <li>
<a href="/threads/6e92c31b6161f0485c4835c1be336aecc9cddf39">SetAlgebra naming update</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/65784bdb25d29728e22dc2d7d5f9ff4a0e94913e">Bike-shedding alternate collections API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a891ab3e1123d2751fca743623484135d4141238">[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1307ce462596b81089abaa057ad0d89a4e1d557d">Bike-shedding alternate collections API</a>      &mdash; <em>Howard Lovatt</em>
    </li>
    <li>
<a href="/threads/b07495e425c4768e0d7c8215c8a1cbcec0f2309b">NSCoding-like Persistence</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/848f010124e89995616d80240a6d4428610908c1">Promote &quot;primitive&quot; types to enums in extensions</a>      &mdash; <em>Carlos Rodríguez Domínguez</em>
    </li>
    <li>
<a href="/threads/02bc21d6a44b4c6a017c35bf31a42928410dfe19">Update the signature of ObjectiveC.autoreleasepool [SR-842]</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/52b3d6da2c153eba499f712cc42c00a03bd0ce55">[Review] SE-0016 - Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a18f7b5b47c2a9f77d6a373e8addb827bfa79ab8">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d833f82db58a6765c8dd6469db21dbbd630ca908">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/089ddb7d17b4b9172bccbf50600eeb8b7a818953">[Review] SE-0054: Abolish ImplicitlyUnwrappedOptional type</a>      &mdash; <em>Kurt Werle</em>
    </li>
    <li>
<a href="/threads/2f3cc270f3578d6f078e49494a6b25c2790038b1">NSCoding-like Persistence</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/776c900f7b7f033db058b7af119af4ea592767f3">Request: Multiple Bool signatures</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/ea593310b075163e0e5e95a4e826b046a70846ba">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0cc08f0e379ffb022dd46edd3600df3895d73857">[Review] SE-0054: Abolish ImplicitlyUnwrappedOptional type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/43700948ff2e2fd24044ca3c7ebb6932ced4b144">[Review] SE-0055 Make unsafe pointer nullability explicit using Optional</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/3fb21e10ee21611012e91802eaf5847bd7e976c5">Request: Multiple Bool signatures</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2e47e99f278f0eb6c021fb4fb6e0504f801e0ac5">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c7cbf43be161a1e434e84ca6f6acb201d648a709">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ac6a3272a71330cc232b422e49819fdb8908940e">[Review] SE-0016 - Adding initializers to Int and UInt to convert from UnsafePointer and UnsafeMutablePointer</a>      &mdash; <em>fukurokujo</em>
    </li>
    <li>
<a href="/threads/50c3439d07f9dea650b84ec706865ea6d0020b68">Base types casting and hidden function calls in SWIFT</a>      &mdash; <em>Biala</em>
    </li>
    <li>
<a href="/threads/37f06fe906af6b71de94e2df783810acdc463120">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6d46c2564abd25478212b7a3367748e9fc12bbbc">Hidden initiallizations ...</a>      &mdash; <em>Biala</em>
    </li>
    <li>
<a href="/threads/573e8fe392ef2605164f40d2569f793435c2745b">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7df69e51205dc3b5ce3bd7cf7a9a6b5894adf9a9">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0bcc898e58c311132c741a7f3ae0c8793c0f8fd5">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f4e2ab5aa6ee85aeb27ace7db87a3121f96a3d8d">[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9e3acd5ebe9abeea1b2da43dbfd85d4e87d173a4">Disambiguate Return Type With Void</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/0026ad601298f0f785f2094fdacaeabb60a38dcb">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/7e8862c61cfa98fd4b903d76df4dc2c80be01a95">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/ab332f1bb2d8c85521343c3888afd61586ed725c">Protected access level / multiple class/struct/protocol APIs</a>      &mdash; <em>Andrey Tarantsov</em>
    </li>
    <li>
<a href="/threads/24b2d98baa1ed2b19a6fd15346441edf2631ea24">Update the signature of ObjectiveC.autoreleasepool [SR-842]</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f258c93747f79153f22418c622207a17dd22706e">Default access control / Access control blocks</a>      &mdash; <em>Dan Raviv</em>
    </li>
    <li>
<a href="/threads/98c0a23f9768b743a96c8bc793007c3c5815a269">Question about heterogeneous collections</a>      &mdash; <em>Jason Sadler</em>
    </li>
    <li>
<a href="/threads/4635b5d6165925c151f9e215f3bc56d2d41f8303">[Pitch] Enforce argument order for defaulted parameters</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/ab6053314d536c19a3234b7a79bb745287aebe88">[Proposal] Make optional protocol methods first class citizens</a>      &mdash; <em>Yuval Tal</em>
    </li>
    <li>
<a href="/threads/907487a37687ce55f733d230d2a1ef24b6c88b0b">SetAlgebra naming update</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7bf98e3a5a46536c84353429f73e494c6c9af16a">[Draft] Expand Document Markup for Mutating/Non-Mutating Cross References</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/3d76930b2a12ee7270685574bb1b828b7af121f6">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/acde6e58a02006e8ee298e48d89a8e1b910c13d7">Implicit Type Conversion For Numerics Where Possible.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/88a2f3d8a57350552d79036823aaeedf419b35c3">[Draft] Adding a Build Configuration Import Test</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/d2e41e272e8e2fb8615831e1285fc68458a11428">Still Missing: Fixed Decimal Numerical Type.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/529db5d06d2ae95b9bf4ebe8ea2eff29d7c59e66">Implicit Type Conversion For Numerics Where Possible.</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/132cbb69a59589715483077cc809ec13cba8e433">Missing initializers from/to FloatingPointType</a>      &mdash; <em>Dan Raviv</em>
    </li>
    <li>
<a href="/threads/89d70403c2b368037a4a71c12a5d3c5cc35be9b0">[Pitch] Custom Namespaces</a>      &mdash; <em>Niels Andriesse</em>
    </li>
    <li>
<a href="/threads/28755175663f47b734e370d9e386bff07fda5a72">Question about heterogeneous collections</a>      &mdash; <em>Jason Sadler</em>
    </li>
    <li>
<a href="/threads/ed8e0305fa4633cab193c20f3b9f876a0fccc338">IUO type, treat nil as normal error, not fatal error</a>      &mdash; <em>Cao Jiannan</em>
    </li>
    <li>
<a href="/threads/d8116730f4019606a66a03c0920c8dcc600976c3">Thoughts regarding readable INTENT of Loop keywords</a>      &mdash; <em>Nathanial Burton-Bradford</em>
    </li>
    <li>
<a href="/threads/56206a4602b0b6fab249227c5ed0682dce357266">A (better) Swift Equivalent For The Classical For-Loop With Numeric Scalars</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/2bcac8a6e802e2785239fb411b53374b72e1004c">Protected access level / multiple	class/struct/protocol APIs</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/6a6395236ca5aa12e910c2ef4e452af1cbe9f844">[Proposal] Make optional protocol methods	first class citizens</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/e58e62568b1c16c306dd63c0a32460f53a1e538d">Question about heterogeneous collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/24f0f6e2cb25f4cf681ef0feec02c13a527886c1">[Review] SE-0055 Make unsafe pointer nullability explicit using Optional</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/56d5deaa696abe663903aee58cfd7bd02e3bbfe6">[Proposal] Make optional protocol methods first class citizens</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4c5b834093c2c74167f8fc40d40b8fd3c2b5ff95">SetAlgebra naming update</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/d91b8d4778e75bc6fd5f4de44ab5198a0a6af1db">[Suggestion] Case-based dispatch for enum methods</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/7a0fd6624fa98422bb8155d2724d4a8831e7e3ec">[pre-proposal] Automatic unwrapper boolean properties using unless keyword</a>      &mdash; <em>Guilherme Torres Castro</em>
    </li>
    <li>
<a href="/threads/91b396d53b1d02fb57d17d968f503a4907777fa5">[Review] SE-0059: Update API Naming	Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/15029eb13a46a94b13b832b51ea78676e979012a">[Review] SE-0056: Allow trailing closures in `guard` conditions</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/70a3a312e4db79b37cb85d85db845782c5e0278e">[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/52434e84a623595f2306f77594d7ba86f29dc8b3">Question about heterogeneous collections</a>      &mdash; <em>Jason Sadler</em>
    </li>
    <li>
<a href="/threads/9e7d221a756f92d1bb2be0e025569db84c314cbb">A shortcut for weakly referencing functions</a>      &mdash; <em>Radosław Pietruszewski</em>
    </li>
    <li>
<a href="/threads/d2191cc0c0875ab24393125bae86000f18dc201b">SE-0059: Update API Naming - leading dot prefix for enum instances.</a>      &mdash; <em>John Heerema</em>
    </li>
    <li>
<a href="/threads/d42c7da4a7503008c8e5c84d567948edafe73b27">Enable omitting `let` for constant declarations</a>      &mdash; <em>Yuta Koshizawa</em>
    </li>
    <li>
<a href="/threads/167f577e1bb649adcca8dd91fb927efdb5e0073f">SE-0025: Scoped Access Level, next</a>      &mdash; <em>John Heerema</em>
    </li>
    <li>
<a href="/threads/a97663e52d93e28478e44d7a18208b69c1190b4f">[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e02742fbe21495324777480f875aaa48f2459d16">[Review] SE-0036: Requiring Leading Dot Prefixes for Enum Instance Member Implementations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c62e91d2de73a78f19b3eb3014eb00553b5568e4">Revisiting 0004 etc. - Swift deprecations</a>      &mdash; <em>John Heerema</em>
    </li>
    <li>
<a href="/threads/bf2d5c54ffd01e90062457a3fd1c42fdc09c8336">Feature proposal: Range operator with step</a>      &mdash; <em>Milos Rankovic</em>
    </li>
    <li>
<a href="/threads/489b416a426ef454a882752b92e1a9f03ef69064">[Proposal] Custom operators</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4f464d369c7007700eecdea7e0dd0258fb872035">[Proposal] Custom operators</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/4358b25dfb07e5cabe7531b192fbb51cff5eb356">Revisiting 0004, 0007 etc. - Swift deprecations</a>      &mdash; <em>John Heerema</em>
    </li>
    <li>
<a href="/threads/bc7979f66e1b6935fb66696a0a5477c713a615f3">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0ec1d38320858431ce38a2cc174ad4ccbdb7921b">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2e81e5491d714d2493f9c35e1d43eef279d4860a">My personal beef with leading-dot syntax</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/22b04b474ec29c0bb24ece414b550154820cfc37">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/2d8de7487fb5a96752f6f130f8ebdf2efe783ba9">[Proposal]Add support for extension variables</a>      &mdash; <em>Yogev Sitton</em>
    </li>
    <li>
<a href="/threads/bb7bb8f9d5b8bd25962ff179f7e45762294b3fd5">Question about heterogeneous collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a0d4257983008912f7205e4c2ac3664f2721e47d">[Pitch] Enforce argument order for defaulted parameters</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dd0715e081c60322c74fcdf755b04851ce2cc2f9">My personal beef with leading-dot syntax</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/25d4ef2b655facf403111c484fc1cb547772fbd0">Proposal: Contiguous Variables (A.K.A. Fixed Sized Array Type)</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/41dcf89514f48a13d8bfaf70fef6f84272d970cb">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a502dcef77d1d65f5fb9d58cd1ffe3d00fa93257">[Proposal] Custom operators</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/bb44bef9a669974bb73de51bcd756e6b52cf6883">deployment targets and frameworks</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/e24a4f73a7a96a76a02bfb23201d24863468e12b">Revisiting 0004, 0007 etc. - Swift deprecations</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/8f9d0e80f8c02145bd734652174d60a9fe3cab06">[Pre-proposal/Idea] Auto-generate Type-Erased Wrappers</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/82508c36ddc4c2df0ff32a6e6a60d2cc90b561d8">[Pitch] Add namespacing to associatedTypes</a>      &mdash; <em>Noah Blake</em>
    </li>
    <li>
<a href="/threads/4ac80d4326dbadf5c56af3d42b61bffa720dc5cb">[Review] SE-0058: Allow Swift types to provide custom Objective-C representations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9e277a81a90f2d9b99ab21fcf97549e1388351a4">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9a48c7213aa6399bf792e953a67602e6df0f16bc">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/15bdd91d4982a469e6a373cd87b733314140f482">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/33c7384c20be53a41fd3756ebfddbd0f6d3a0903">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/625e8c3c6d94a1b0641aa83c8e90493c6ddf88c8">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/417bd285e7c10b5f4044184bfd53073554278d79">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8f4980f1ef18ac4d0ae6f65abc59d8bb824ef2f1">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d6c801a3db275b8e8072929921ab774b8d3fc596">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4c99afa4b466d26b4f58aa85966a58705f01d67b">Notes from Swift core team 2016-04-05 design discussion</a>      &mdash; <em>Alex Martini</em>
    </li>
    <li>
<a href="/threads/a7054021fb2e6fbf2934ea9b28dacfbd274164d0">[Pre-Draft] Nil-coalescing and errors</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/8b488a702d317240df949e785d78077885c79512">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>jazzbox)</em>
    </li>
    <li>
<a href="/threads/b3d71878dc55b2af979f8bbe5f728521c8174bf4">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f5d558ba1e89ca1d472a5a8326add01f5f9d9609">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1be1cca0db8ee1d0f3d248a30c74edb316fab43b">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/48ce60847963a0f7992ae0c0fea9c9b9021c138a">[Review] SE-0058: Allow Swift types to provide custom Objective-C representations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/02452252f82c852f0ba1eba374b900bc0a477f49">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/939935b383990b134c1ca9c4595b21960dcbbc1a">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3c5a4f9a91100686f4746b89b8ef61aa4a9ba6b1">Notes from Swift core team 2016-04-05 design discussion</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e69a15b47c9c4a1999dc78b22926a21be93231d5">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/71457dff69d43e9bda8ac244328b876f4dfe5d39">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bfecc54a8c6d06da582f5ca7d0e52a4c0aaaec54">[Pitch] Moving where Clauses Out Of Parameter Lists</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/323c752decf7f3011868175e45df7ed3de27c9bc">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4cb047a90db7bb42548e1813394f4a5b4acd23af">divisible-by operator</a>      &mdash; <em>Milos Rankovic</em>
    </li>
    <li>
<a href="/threads/56c488d2ff78033845d958b032918bdb68665b65">Generic Alaises</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/83eec564bf6fef41ff4c86df58bc6ab6204dbf3f">Feature proposal: Range operator with step</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/be00a88b31f8f14482acb1ffc72224eec511bd9e">SE-0025: Scoped Access Level, next steps</a>      &mdash; <em>Michael M. Mayer</em>
    </li>
    <li>
<a href="/threads/12a05d03c5293e139e700f3da1df006e122677ac">[Proposal] Threadsafe lazy vars</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/df42a79b082552d6f05686816e193a334db1788b">Improvement proposal: change overflow behavior in successor()/predecessor() methods for Int types</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/e6629f2b524e77af7260fa8df23564c94587db6c">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cc6360919abb8b2e960240642083644cebd8b9d7">[Proposal] Invert the order of pattern match operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/36b8240dc6d3336e00502def6b58dd4b1991ed2c">[Pre-Draft] Nil-coalescing and errors</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/616dfda28735460178fa281392e24fbc22e1effa">[Pitch] Adding a Self type name shortcut for	static member access</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/84d2a07e93102e44d13628fc4220f171c60d36f1">[Proposal] Invert the order of pattern match operator</a>      &mdash; <em>David Rodrigues</em>
    </li>
    <li>
<a href="/threads/8423a6515838882d1f5bfce5f572e84c44703e7e">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Arsen Gasparyan</em>
    </li>
    <li>
<a href="/threads/87dba7697f4db6c7930acebc9c4ff06dae6475fb">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/24610e6e9a1bfab0924ebd14174c1cf74475f48b">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/54cc63091f1baa811c5380649a254950a01ff08c">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7e3e22eee29156d5408fcc88dda35d6be07686cb">Proposal: Add scan, takeWhile, dropWhile, and iterate to the stdlib</a>      &mdash; <em>David Rönnqvist</em>
    </li>
    <li>
<a href="/threads/19e822cada398820ca84cd86d72b346f20ddd2ce">Limit checking syntax</a>      &mdash; <em>Maury Markowitz</em>
    </li>
    <li>
<a href="/threads/219da4f5ae263ad8686446a5cfd23bf4cbb0abfc">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/702f1586efba9a3a4670264f679f7e0b7209f54a">[Review] SE-0058: Allow Swift types to provide custom Objective-C representations</a>      &mdash; <em>David P Grove</em>
    </li>
    <li>
<a href="/threads/4d409f0f8935b07647af82e0f6e6faa3befb2346">Ability to pack, order and align certain types of Structs (like in C)</a>      &mdash; <em>hitstergtd+swiftevo at gmail.com</em>
    </li>
    <li>
<a href="/threads/9276fb53c1a87f503d8fbff9d1849140c1ab1521">[Discussion] Deprecation Linking</a>      &mdash; <em>Paul Ossenbruggen</em>
    </li>
    <li>
<a href="/threads/7f07b5ca9dd8d3045562d10af2c9c0b493018e7a">SE-0062 Referencing Objective-C key-paths</a>      &mdash; <em>Les Pruszynski</em>
    </li>
    <li>
<a href="/threads/4ad12f18f47f881558bd0858531e992228622646">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/49eec9c4105f5c77ffc424ccab78a17228b81801">[Discussion] Difference between static and lazy variables regarding evaluation of closure</a>      &mdash; <em>David Rönnqvist</em>
    </li>
    <li>
<a href="/threads/d7d995abb16aa3d535a9be3db6e710a0ac1d5162">Limit checking syntax</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/0105e9e2da93ed9fc3183d128b3b4bd563d4d09f">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/c61e08c7cd5c4d6dd0f6fd70de434f185665fe49">[Pre-Draft] Nil-coalescing and errors</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7cf3a2e6b9ec142d805e2c809acc1f2a03ab7de8">[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/184e22ad52f15d9f93b59dfef6b6903e66abcb8f">Limit checking syntax</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/15ecfd11872d289a47b875ad1cbb1a5984bc21f0">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/35307ad015f0e5ccbec67e5014edc5d002353686">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7e739d32f3c96ccb5029ccf56fa7d4b851e0ced9">Shortcut for creating arrays</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6e1e5a69259c58128bc11c389cec4b53be033a9c">Requesting default values for Cocoa/Cocoa Touch APIs</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/46fc2af0cd52b53541abb93e0c00fc94a6e75707">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/5f58bd409c18363aaaed97bceaa319f365594a7c">Shortcut for creating arrays</a>      &mdash; <em>Arsen Gasparyan</em>
    </li>
    <li>
<a href="/threads/6794f8fdbec6b554516969f8762c5a39581f1a4c">[Pitch] Add namespacing to associatedTypes</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/a92ea902983f1395abaaf2037c4ef5b9d023f3de">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/acf29a1f557f80e44d4708616f131525af43163c">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e6f2e2c55f23dc4aca174dd75988e8b8581d9e7f">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/868f353b516e6ffe30f01799127af1f51ae5ad4f">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/62f17011089c3eb63cda54ff002fb1a942f0304b">[Pitch] Adding a Self type name shortcut for static member access</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e80a06d7285dc266217cba09702424525b838d5b">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b2559fa8a5f287396093f2c5cd48bf39ae8770d8">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/40a4df1ee75fbb1ec98a71e0624638b9f1f2f689">Remove the Need for &#39;self&#39; to Access &#39;dynamicType&#39;</a>      &mdash; <em>Mohamed Ebrahim Afifi</em>
    </li>
    <li>
<a href="/threads/22938531f349db8924541764819add30aeecec8d">[Idea] How to eliminate &#39;optional&#39; protocol requirements</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/305e72558ff042293407073832d955dfbca5387b">[Idea] Continue to abolish IUO</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8dbcabc3c8278acbe1895f552afa554de72a0f84">[Idea] Allow more operators as custom operators</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/92406260d837da111b326509d6fb45b3782287d6">Proposal: disallow nil in favor of .None</a>      &mdash; <em>Paul Young</em>
    </li>
    <li>
<a href="/threads/0eb994be21843d6e6585dbbb0ad8cd7f04cdb443">Classical For Loop</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/000bfd20a5d67b8750a301d3449431c94d2f3876">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/d700aa605ea5b9787aefe89e07d6c2e3c2660391">[Completing Generics] Arbitrary requirements in protocols</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/d9d320bebb67657c15343177f2daf86ac791fbca">[Proposal] Allow optional binding of instance variables in constructors</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/db7cf01f223aef7a096ae6f0f2f33a5ed2f73ae8">[Proposal] Add .order() family of methods to Collection</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/9028b16773d4c3734f8968c9c371affe88359bbc">[Completing Generics] Arbitrary requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d22aa349c0cc6bc55b7404a79bf542735b800d3e">[Proposal] Safer half-open range operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/31c5bf46574f943dc8306134671c6923653381ef">[swift-users] Replacement for NSNumber?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/279fea6f570dad9f05a85384a7eea358b5b96112">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9edf61aa209709740905304fae5c480afc493916">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d7f8a46a4259904baaf614550a7eafb87c9a177c">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5df0844c8eba9a0446ebd36c25ced001ed30334b">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bbc72ee058c569d1783becdaf2d3cb4cb9a110f8">[Proposal] Safer half-open range operator</a>      &mdash; <em>Luis Henrique B. Sousa</em>
    </li>
    <li>
<a href="/threads/ba25380df967c4161d2c5547e91ca8d0ca82e97f">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/eaa2eaa391595a5d55db36baf952582c47b78376">[Proposal] Add .order() family of methods to Collection</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/94e0a7403a3448a49e5ef2bba1b9fd43e9b08c94">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/680ac5ef22c2822f582139d2dfe32576b6f31c23">Requesting default values for Cocoa/Cocoa Touch APIs</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fcdd890088fc8367817e9324309eb9c68c90270c">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/82250d914ddf008173c9ca9e3fbed17794be61ad">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/253a5b16c0052db586715f54ea691c68aae65e9f">SE-0028 Debugging Identifier #filename</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/e1c860d4e366d20e00487f8504ec36b3626e1936">[Proposal]Make .map return the calling collection type</a>      &mdash; <em>Yogev Sitton</em>
    </li>
    <li>
<a href="/threads/070295c6422dd09c358f36aeb7a300b64497f042">[Completing Generics] Arbitrary requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a8db350ad8765ba1029b7efd40166c5b87e928b1">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/353b3215dca359a9df33886659ca8e6d94003b1c">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aa24fc4ca01601213be1101f9dd5ab224041828f">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/95ff4e6dd1117b395730a09f5cf075f379d2dcbd">[Review] Tiny Update: SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/72b271ecb25f0f8a5224bcc3b79d8840c741a9e6">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Patrick Smith</em>
    </li>
    <li>
<a href="/threads/974fcb7c425283961440db4d5f9cb3e9fd7c945a">[Proposal] mapValues</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/f6a15a6ff0e26e8cf213f840a853de74531fbfee">What about failable literal convertibles?</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/1f2b3befa4c8d05c1b77f201015289693583b386">Crypto routines as part of the core library</a>      &mdash; <em>Travis Beech</em>
    </li>
    <li>
<a href="/threads/d155315bac8b5dabd57e42f3b32740aad08b675b">SE-0063: SwiftPM System Module Search Paths - JSON output of install dependencies of a package</a>      &mdash; <em>Vadim Eisenberg</em>
    </li>
    <li>
<a href="/threads/8d9a5367650df87a1d9fb411b14b760b447f461a">[Proposal] mapValues</a>      &mdash; <em>Miguel Angel Quinones</em>
    </li>
    <li>
<a href="/threads/42fa56a97541a92c14711ef21127d7421b951c40">[Proposal] mapValues</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3d9a9f63ca421a5840b6af41548fe8d7c2485ce1">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a88187aa48933f9da554cfc1715314e451bc658a">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/effaa67a8c709a888f892b42d1d06e27d365a090">What about a VBA style with Statement?</a>      &mdash; <em>李海珍</em>
    </li>
    <li>
<a href="/threads/e2b14b1af59f4619be1a2a4ab28e626f9fd78098">What about a VBA style with Statement?</a>      &mdash; <em>Benzi</em>
    </li>
    <li>
<a href="/threads/f90c2db14716a3f1ced6c8701bfb273b8b58b25b">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ef83b67bd192039c10a1c8817ad3e03e608164ec">[Proposal] Safer half-open range operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5843fe1bcae5c3ca801be30803db381d5bca7007">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/df285a8f2f956f6d5acae291ba304e618aab044e">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8faffbe9d04ba101f7e87e2b92d0a1fe2b404d0a">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/214031e51c7b52bccab162561f9ad37134b1e234">[Proposal] mapValues</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ae24a7f0eb44e7c9c6cef5c1f513cf53d5760076">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a306218ccf2f9b034c50fe9a079992818713f23e">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5a6a2819d1f7f62150db68888bdfcbcd91078c44">[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/3fe0dd44218b82af9879be8115b3d5fab10f1133">[Pitch] Rename `x.dynamicType` to `x.Self`</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/e3af58d718c424a23954c61ba965b4366ee2f0a4">What about a VBA style with Statement?</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/0b0fde6e8a2216a2578249a9d25299a1d6e28572">What about a VBA style with Statement?</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/bcb982105d9f13aecee7552f8a006e05160e666c">[Proposal] Add keyword &quot;by&quot; as syntactic sugar to streamline For-In-loop</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/21026780fb22b57c9318cfbefe314ef529326c4d">[Random Thought] Optional Protocol Methods + Mixins</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/af4a171a2091b051d8b4216ca5b6db6c23541ca1">[Proposal] Custom operators</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/e845046adae2fd21d7afff22fca7e6fb14d31422">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fdc54ecc94b87d2c07f77ecb402d7f2c4425e02f">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/201a56404fb1e9c457c5ef7c1d0c452c1a8cd8ff">[Pitch] Rename `x.dynamicType` to `x.Self`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d3b137e3b73a58dc1a018e62db5c3733e1400257">Implementing a protocol with default implementations</a>      &mdash; <em>Daniel Eggert</em>
    </li>
    <li>
<a href="/threads/be14a2a91392a6abb44e3031aeb07d14fe13294c">Feature proposal: Range operator with step</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/24033ddfecfd3fe301eccfeedb384e1109aa17d4">TreeLiteralConvertible</a>      &mdash; <em>Milos Rankovic</em>
    </li>
    <li>
<a href="/threads/651d8c5914ab621f62fe92767119f3982e6eb1f5">[Pitch] Unifying init parameters with properties</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/fa5b23da051bf439ba96a8ea3703ee02f3416a79">[SR-933] Rename flatten to flattened</a>      &mdash; <em>David Rönnqvist</em>
    </li>
    <li>
<a href="/threads/2939dc872ce17e65b89a059c1fdc5fb2c1f02fdb">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Stephen Canon</em>
    </li>
    <li>
<a href="/threads/3b81f864acdefc711ffd62d840b8f7ccd79ac4ce">TreeLiteralConvertible</a>      &mdash; <em>Milos Rankovic</em>
    </li>
    <li>
<a href="/threads/67eae7eed7bb7ccfaa95e174b6a9211e6ea782e4">[Proposal] Shadowing imported functions</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ab86989d9e4510d4e3ff7a41689dd699d3145a10">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/444e12d395116e2065ac345a2df6d6e2710134d7">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/73c7e63c6e9b95e6841356439e762044eaa68cb0">Question about SE-0057 &quot;Importing Objective-C Lightweight Generics&quot;</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/bff71113869ebcec322e5bb1bc1358b9a797ad4a">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/e815a14b4b7dc551dd2daa296256d308adcd4583">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/13660ea9ec32c261a75c57902e9002293c85873a">Open Source version of &quot;The Swift Programming Language&quot;</a>      &mdash; <em>Hugues Bernet-Rollande</em>
    </li>
    <li>
<a href="/threads/e5b88aa1cca316dd08e376c6c8bd1fdb745f5157">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/d49ebcf2f5399e8a2bafd850d92f37b34782d388">[Idea] Replace enumerate() with something more explicit</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/c5e12dcc2513bffc9d3cf929a4a0a3d1e55f08f8">ValueEnumerable protocol with derived implementation for enums</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/fed730f77a90d9bab3458a9e46530375e9cdce8b">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/3c1428b7c553a3a3317d8b4420f191583d6dd50c">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/bbf055fdb01f5801203f14e894492f4e084387a8">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/7988f7ab7bda51107164bafe4c6f669f5f112d0e">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/98197b961f83ded3d23ecf44259cb6baed482875">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/3c7452634b6fd6b8f699ef0ec763eefbbd40ca7d">SE-0031 and Swift 2</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/69889cbc7ea3aa652b8ba8793999f6a541a32b2f">[Pitch] Unifying init parameters with properties</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/7e8f2fe3158edf99cb17ff0e686998ea339e65e6">[Accepted] SE-0048: Generic Type Aliases</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/8566aeffe747f3d8c6082b0492300ebdbbaebde6">[Discussion] Dictionary Key as Index</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/72032f6cca2481578ee86f894c65584d42623d58">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/5fd59233b8c41f9316d13820fc32bae4702a8780">[Draft] Expanded min/max algorithms</a>      &mdash; <em>Nate Cook</em>
    </li>
    <li>
<a href="/threads/54359bfd86dae362313cf59c05e90260896a3e0b">[Proposal] mapValues</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/f47b7e8245ced72ce958c422b55c03c3fffd13fc">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/ce1d6c00d5491a254deb5b1e61e008a8c0e98f04">[PROPOSAL]Return subclass type to a protocol where a superclass is defined without the need for associatedtype</a>      &mdash; <em>Yogev Sitton</em>
    </li>
    <li>
<a href="/threads/89a5d5fae6fe2a527508c6de53a35440144be465">[Pitch] Unifying init parameters with properties</a>      &mdash; <em>Yogev Sitton</em>
    </li>
    <li>
<a href="/threads/fb2bb082b416e3fdde199d59d593c0671a6fab71">[Pitch] Extend Any.Type to allow construction of bound generic types</a>      &mdash; <em>Joanna Carter</em>
    </li>
    <li>
<a href="/threads/7a2b365382cd23c401922fd7fec72b075200885f">[META] Fast Track Reviews</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/fb8ed629dbc36649907fc4705929f57cfb93b2ca">[Proposal] Custom operators</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/c883757dd7b2ec8bedec14eb878f9df745f22d80">[PROPOSAL]Return subclass type to a protocol where a superclass is defined without the need for associatedtype</a>      &mdash; <em>Yogev Sitton</em>
    </li>
    <li>
<a href="/threads/0158814bd282e4ca67fd025e2776d44682771e02">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/33c3d5ff74cd1c677287304a9730a8640859f676">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5c6a23d10c77811442c94a72240fb2e316e2b0b7">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bbcf396d345d9978222beb70f259f59624a23b35">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e7e615a0a4a1380f4fd4bea067b14b18b93f7ec0">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5d7628224d52ff4771aa414d33eacb652ff2dfff">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0f457482b29f421a789eb4d0110d36f146467edf">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e00c800e85b49bc9d97c6a3faf8ba0e5a138fb51">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f2bec50e29af5c704dcb2ed64750c2c26baded62">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/19652a10bb51da5476ecce6846a069673b0830ae">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7ae5ca57c160736881923f24f3d65243e50a8cff">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/fec7e5ff3ace9383bd5f22b6d44caa2d655876f8">[Pitch] Fully eliminate implicit bridging conversions in Swift 3</a>      &mdash; <em>Joe Pamer</em>
    </li>
    <li>
<a href="/threads/5a5a404d02f5a2a350cb50a655d791429da797b4">[META] Fast Track Reviews</a>      &mdash; <em>Les Pruszynski</em>
    </li>
    <li>
<a href="/threads/3fcf5418aeb612eb96c00026330f12705f73991f">[Draft] Expanded min/max algorithms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0ebb1a1cbea71e00680955a00d589b0087e148f0">[Idea] Replace enumerate() with something more explicit</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3bcd8c32f1e00a41aa27e2d349c17fc574afc30f">[Idea] Replace enumerate() with something more explicit</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e1d52476580fd8ca5063d0abca39b63897c59662">[Idea] Replace enumerate() with something more explicit</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c50cddd506625fa8763c076d798ce4c8e6837117">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/db5e3405c3fc7d6aab6a382f144fa57118b6fc59">[SR-933] Rename flatten to flattened</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3398042ba590242a4594d00efb19a21818a17d86">[Draft] Expanded min/max algorithms</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6c14f19e1f1df2430e007a57935a3e0be2477a8b">[Pitch] Fully eliminate implicit bridging conversions in Swift 3</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/450ab7c9b6c1ee366c965ed9cb25dec7d0de0441">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/5337f0c1272888f9edd090afc88f4c8ff677bb72">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/c1db443315c3126025474de5f9aed0a7d7b9bb22">[Draft] Expanded min/max algorithms</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/8b228c16118aad46f7f5b97f94558bd97d07663f">[Draft] Expanded min/max algorithms</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/bc30619ac0d3cc14807813008b043d9758e0240e">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>BJ Homer</em>
    </li>
    <li>
<a href="/threads/f333a440cd5b63509926078f2fe02a506acf36f2">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>BJ Homer</em>
    </li>
    <li>
<a href="/threads/52211751080f88663a42609fdfd2b28ff20538af">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a0b5a0d876503f06b8b65a5a50d5b735c21de151">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/381ade9d2f09d61f4f02bfea5aeb79a5ecb7a15a">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6815d65295bc3d1ba5aeab465d70b20ec1f48b03">[Pitch] Extend Any.Type to allow construction of bound generic types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/deb87e2f60dcf17b599b5763a008c56aaf69dd2c">[Review] SE-0068: Expanding Swift Self to class members and value types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cfc88f9de3840a343eb392c9bebb6d9b941f20b9">[Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/1fd2b92acab60a00da7c90c43a288773ae3b2378">[Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1fe4b7c70c7d8bf267240692c9095a12fad49e74">[Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/409ae5f794750a36a9112b17d16ebb9fc884b486">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4d367fa24055f2989029e14bbc07c94e6a3f9c52">[Discussion] Enforce argument labels on tuples</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/b5002c0b4400b1b5a86df732993f61f9e4e8e0ed">[Review] SE-0068: Expanding Swift Self to class members and value types</a>      &mdash; <em>Pelaia II, Tom</em>
    </li>
    <li>
<a href="/threads/0194af827511c89d88e72cae6e1fbb209ad39f2d">Extensions to add observers</a>      &mdash; <em>Cody Weaver</em>
    </li>
    <li>
<a href="/threads/797da44b3b1627bf98696fc53ebffe65f9dade13">String(validatingUTF8:) doesn&#39;t</a>      &mdash; <em>Drew Crawford</em>
    </li>
    <li>
<a href="/threads/e67b2e39c865a00534621bef0c3163bed40cd330">Notes from Swift core team 2016-04-20 design discussion</a>      &mdash; <em>Alex Martini</em>
    </li>
    <li>
<a href="/threads/2e8c9f23425e0b248f5561e85579465b90e25dec">Localization support for string interpolation</a>      &mdash; <em>Daniel Höpfl</em>
    </li>
    <li>
<a href="/threads/4bf306588a8bc2e88289a132ea0aa83e28c06191">[Idea] Passing an Array to Variadic Functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c7f106adfafd5239dc83fdfc976734e79732480e">[Draft] Mixins</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/c1bed1e548b9f7c701211927fb3235d9fa1d9ea8">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/07a15485919f880c6284253e654dad43b44f564c">Lazy var and deinit</a>      &mdash; <em>Alexandr.moq</em>
    </li>
    <li>
<a href="/threads/dbaf7c328f4071532989c26b9e154a9bb96fbd17">[Proposal draft] Enhanced floating-point protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1d267c68f10e2ed5f8d225adcc5040ed2a52c4d8">[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6fe1a613cfd81e56fd97e3daf23a52ae3bdf9c8e">[Draft] Mixins</a>      &mdash; <em>Niall Young</em>
    </li>
    <li>
<a href="/threads/43008b3f04814848563051365de34f8a08e02dae">[Draft Proposal for pre discussion]NS_ENUM&#39;s should be considered Open</a>      &mdash; <em>Joseph Lord</em>
    </li>
    <li>
<a href="/threads/f6b2aab35ccbaaf4c17c826a227f3d3022dd15f1">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/20fc499c10c3d024ad0f8fd13833b670fb98c40f">[Proposal] Safer half-open range operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6b794ddf2e22ce8d0f515bc8394257a0d6106829">Mutability for Foundation types in Swift</a>      &mdash; <em>Tony Parker</em>
    </li>
    <li>
<a href="/threads/5b0904fe08ea004f10db8919522d62ca988410aa">[Draft] Mixins</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/d9acbecc3934339254431b65dd20af5a3e087994">[Draft] Mixins</a>      &mdash; <em>Niall Young</em>
    </li>
    <li>
<a href="/threads/943fe0784ccc503323283b8bea372e8e17440ec9">[Review] SE-0061: Add Generic Result and Error Handling to autoreleasepool()</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/39df9374f78183d2c75cb7640e1aefbeb4009a89">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/78a908304ccc4a65a23b67dc8b661ce7bc4f4a52">Mutability for Foundation types in Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/57071a79a15f819cb892921e22480e232a6f5029">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/faa0deefd2aae5f6eb0e5068754ad899038c2976">[Proposal draft] Make Optional Requirements Objective-C-only</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/2a9589c19359d8ef2591e4744ee768a1245f1211">[Idea] custom infix functions</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/12203553f346c739aa8ca590200984f3623f5d0a">[idea] Make functions with @noescape syntax behave like control structures</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/26945b618d68c46e31b2ad7a55831b6c02dea04d">[Idea] implicit protocols and type oriented protocols</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/332ad58be9fb4191d3bb4af875168fa00c055e12">SR-1246: Inconsistent naming and declaration of String &amp; NSString derivative properties and functions</a>      &mdash; <em>Gwendal Roué</em>
    </li>
    <li>
<a href="/threads/07c80a1983add6312c502392a6ed5f855aec952b">[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/aa9eff44ce722055563401e2d4d117df6ef90779">Overriding computed properties with let constants?</a>      &mdash; <em>Roman Zhikharevich</em>
    </li>
    <li>
<a href="/threads/25cfed993a39be0fc71ba3500d292db69ef1e718">Properties with parameters</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/680a907f2413091f21e929104cdfd3084c91df27">[Idea] Bringing the partial/total ordering distinction into Comparable</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/2dc88070b20e433ee315754b30f7f30234bd7ae5">Properties with parameters</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/aa2e7c6374941c207b8d47fa431caae5c3e45245">[Review] SE-0061: Add Generic Result and Error Handling to autoreleasepool()</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/5529da43a3c71736ee0162c4e13c6c9e053ba3aa">Overriding computed properties with let constants?</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/33398cc64947845807e88c047676038ccf5332de">Carriage Return in Collection Array Literal Initializer</a>      &mdash; <em>Ivan Oparin</em>
    </li>
    <li>
<a href="/threads/173c9aae9a8d5ca4dfd827f89936f5aaef539d54">[Idea] Repurpose Void</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/3f52ff8ff372e86e4b661cf3c975abdd7fcbc8b6">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/2544ce3a843ba96dd95f6752101a488b4de8b935">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/4f1791bf61fcfe9acb1c9cf519841a56d49da92f">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/edec4e24b21d9ddf4a3ae31b97763992b46b75df">Properties with parameters</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/711026906247d68f7662930ee984f34cc54e5ccc">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/39bbd6be995a01e5de1e19568e9525975f987ee8">[Proposal] More Powerful Constraints for Associated Types</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/de1b77a52f8cf2da8e9a7ec0afed15e8c58b31dd">Mutability for Foundation types in Swift</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/baa6318831ae0edb6f41a2bdec5f2e9b877427ac">multi-line string literals.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/41fb2f473487f2dd997f1e4612ddea244ae14be8">Ability to mark a class as publicly final while	remaining internally non-final</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7a52545285be99b05c0b8211c0d078f2efa53182">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7c1cbee982c9a8afee5c3eb1a057fae0613ad8b9">[Discussion] &quot;with&quot; statement/method</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/8664dc8454492ffdcfdaf3e3bfc2ceaa07aa8996">Ability to mark a class as publicly final while remaining internally non-final</a>      &mdash; <em>Matt Comi</em>
    </li>
    <li>
<a href="/threads/408c887ce1f94e3e4f1e40f3eb9c87d830e209c9">Improvement proposal: change overflow behavior in successor()/predecessor() methods for Int types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9667604bd21add5716325e48dc1cd53f09d6e966">[Proposal] Safer half-open range operator</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f0d04b4d7b171faf166fcc69dfebd058d0503b5c">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e87eaa680e7523e10086c2cceef7a37e58f648cb">Localization support for string interpolation</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3a1eace365938f10a806d5d38901268ed4a08529">[Proposal] More Powerful Constraints for Associated Types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ef0ad2ae1d7fe1056ce5fecaf4f39fd665df3ba4">[Proposal draft] Make Optional Requirements Objective-C-only</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/96c60245d4ef0245f461655cde94f86b003951cc">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bf89aff7807f08467d4afbf0f59b58d1d93f163f">[Idea] Repurpose Void</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/29d1c949782465a45ff1fb6c9e9a1ef9d94190c9">Warning for vacuously complying to an all-optional protocol.</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/a5627b192d6e14a73ca9d99af16af7d14b92804a">[Idea] Bringing the partial/total ordering distinction into Comparable</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/14e1c36ffd296fd7f736ba89c765cba8a376a26e">[Idea] Bringing the partial/total ordering distinction into Comparable</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e78146f409d0b5a32ba4a221741763db7e9a9377">[Idea] Bringing the partial/total ordering distinction into Comparable</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4123a73b1693a15794b36900db10dead21d3d347">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4ff8fe66d8389e09621c66856f29f93ac089efa2">[Review] SE-0070: Make Optional Requirements Objective-C only</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/a87b16290b3deb406b70de05fda58bc57095dded">multi-line string literals.</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/637ef302e768c49d329064240ea736b0ca61908f">multi-line string literals.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/744afe3c5d5cf3a6ab566d823d76df3dad652f11">SE-0069: Mutability and Foundation Value Types</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/5cf6e8b1441c0814362932dbaa3bd2ebf488f99a">swift generics not generic enough?</a>      &mdash; <em>Baojun Wang</em>
    </li>
    <li>
<a href="/threads/14b7b681302323eb6e950bdb6a6de0f94f40adc2">swift generics not generic enough?</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/6484111009f7c402f56f100fb14d33a99a400537">@noescape and nil</a>      &mdash; <em>Aleksandar Petrovic</em>
    </li>
    <li>
<a href="/threads/124a7e889d4cb1f2f2dea037328dbb54486dfe0b">SE-0066 Reaction</a>      &mdash; <em>Mishal Awadah</em>
    </li>
    <li>
<a href="/threads/80e447756555ec55485783cb2d9c0e5f174a79e0">[swift-evolution-announce] [Review] SE-0069: Mutability and Foundation Value Types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bde67298bdbd39ccc863acdccd466a225a0f0509">[Draft]: Introducing a striding(by:) method on 3.0 ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7b15e6d835d3c59142ad7501bf78c4e0d7853af1">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/34b38c8428ebcb3c285acb0a9958288f9b3ea0ad">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/26803b3bf538a074e51a426ab75e0a04a77e8138">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f25bc22df3c1690eb3de064d0dbab36cfc83528a">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/120a59ff3571819c2c935cf6594cbb33559d782e">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9c62c0d9012de856ce39daa96a1deaa97610e117">[Review] SE-0066: Standardize function type argument syntax to require parentheses</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/6321552bdcf19998acf505a1124873c349b42275">[Review #2] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/966c2836632e86786bee6495f764e0896c857ba5">Disambiguate Return Type With Void</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/35612e0e4950e1cdf2278dbccce095743fab58da">Specialization of functions with default parameters or discardable result</a>      &mdash; <em>Guoye Zhang</em>
    </li>
    <li>
<a href="/threads/a1136932ade7d7fcd311a56dea56ecfdfba65790">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Tony Allevato</em>
    </li>
    <li>
<a href="/threads/9df210751310ccfd72fd1c98328fdcbfdb2e8f35">[Review] SE-0061: Add Generic Result and Error Handling to autoreleasepool()</a>      &mdash; <em>John Lin</em>
    </li>
    <li>
<a href="/threads/8bd2a34face0eb3cc2f616cd212db4fe530b2669">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/7b4b8641bcd87d9f8332935efdfab4dc522fa211">mutating/non-mutating suggestion from	a	Rubyist</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/cf1a57d9f1678245701e351aeb3b5e98c4879580">[Review] SE-0066: Standardize function type	argument syntax to require parentheses</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/285dea3b2af0377dccdd8eab6df9c7d51c849693">[Review] SE-0066: Standardize function type	argument syntax to require parentheses</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/d3d7e1fdc635bcf8d5752ca3f6d50789052fc1d0">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/d5c1e7b8f96ab87150a883598a35b4a8adb4f1da">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/46579ddea01550c64f9b0d5d0b26c3085323a811">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/231fde69abc8e4c3ae5f6120f2d4c3a590c9a1f8">[Pitch] Requiring proactive overrides for default protocol implementations.</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/1493cff81ade851bd0b8d56e916495cf35a8c65e">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8b47db220eeb1f1b86198ac07be6458552fc0756">[Proposal] More lenient half-open range operator (was: [Proposal] Safer half-open range operator)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/816f17dc76753b7f8559ba865555c79c414796a6">[Pitch] Requiring proactive overrides for default protocol implementations.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/40a39eabe6e7d93de285ea6e693a38af92b71886">Extending init checks for property initialization</a>      &mdash; <em>Shannon Potter</em>
    </li>
    <li>
<a href="/threads/c575b116b499f1f9ac68c10f7ccc90e7ce1f2363">[Proposal] Type safe NSPredicate</a>      &mdash; <em>Jerome ALVES</em>
    </li>
    <li>
<a href="/threads/df7ce0039c3bb65b73c5beea7d8f067e4e0c0435">[Review] SE-0066: Standardize function type argument syntax to require parentheses</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/4e893545aca31dc675d0efaf6fed2c255efa35ca">multi-line string literals.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/3ead52ea6c03baa26f4289eef9acbc8cd0258a60">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/857984ccf5c1683ed1fb451b80e8c66772a974a2">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/26b052cbe5e4ba2caef2069772863a548dfe23f9">[Pitch] Allow nested protocol declarations</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/e597577ac56847a20d87669ceee3fd28460a1e49">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4c93c1bedff9aa0b3651ed5c8277617c08e1b2c7">[Proposal] More lenient subscript methods over Collections (was: [Proposal] Safer half-open range operator)</a>      &mdash; <em>Luis Henrique B. Sousa</em>
    </li>
    <li>
<a href="/threads/350fa00d7352394076ea4ad1c588b9b56630a906">[Pitch] Richer function identifiers, simpler function types</a>      &mdash; <em>Pyry Jahkola</em>
    </li>
    <li>
<a href="/threads/e0c540cb332be8166714d0805252ac54e639bd3a">[Pitch] Richer function identifiers, simpler function types</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/7fadc0174410db7acd84487b19d4186ee0209a8a">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/84155f37a8cb40c2d24c5ee1d7189f1f3606d567">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9b0bf9e962fb476c03872df4a8e2517204590d2d">mutating/non-mutating suggestion from a Rubyist</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bb0613529bbdb82b3b8de29cdd4981664d90fa5b">[Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/708fb927003d8e72110eb4d588bb64ba67f0c3cd">[swift-evolution-announce] [Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/54cbe53b7936d17907812aab1ce64c2cc3a2f8a8">Disallow arbitrary expressions in selectors</a>      &mdash; <em>Alex Hoppen</em>
    </li>
    <li>
<a href="/threads/fa86b0f58c2b08724884f793ecb71f94b5045cb1">[Pitch] Richer function identifiers, simpler function types</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8ac1ad7c5561e7b7dce4e43d15d36978307fc19d">[Review] SE-0032: Add find method to SequenceType</a>      &mdash; <em>Maksim Odnoletkov</em>
    </li>
    <li>
<a href="/threads/d5ec47917c96ad277d10e44f24917f79b8be1b2c">[Idea] Pin down IteratorProtocol&#39;s mutation semantics</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/9cb09a6c028704f4f14e88dc4bbe44d558a83115">Protocol non-conformance clause</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/715dd2d30cb85795279546469812882595e19422">[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/53be097c81c2b48100d8a646d9d0d45d083f0293">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/418a5ef64453435149fa4d4fcac40c0839116aac">[Proposal] Add Binary Search functions to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/500a7caaa8ce758b36358efa3becb620b341dc72">Auto Unwrapping Of Optionals</a>      &mdash; <em>Tod Cunningham</em>
    </li>
    <li>
<a href="/threads/afcfb8da6bd523aa9f4a1e27ed4c76cbb5735258">[Pitch] Reducing the bridging magic in dynamic casts</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/5c41530d1d88f463f029ab778642148032102c04">[Idea] Pin down IteratorProtocol&#39;s mutation semantics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/efb3d0281bc270344b8e36127303d7ec805f2a62">Eliminate inconsistencies among primary collection types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f1d89559680bbf6ed20b8cf60e74bf12bdcb11e1">[swift-evolution-announce] [Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4433ed3d9e329d4a51db6108df22013f54985101">[swift-evolution-announce] [Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/99b159da14814b660cdf60b500e053fa500b4cc2">[Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/40354fc6ad2c6c6f2798a03aad30a888662e481e">[Review] SE-0032: Add find method to SequenceType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cacf4cda9caa97ee03037e24c960b8611be62da8">Eliminate inconsistencies among primary collection types</a>      &mdash; <em>swiftevo.w.husmann at spamgourmet.com</em>
    </li>
    <li>
<a href="/threads/0d39234ebd9cfda91668527d1a83524964e7b311">multi-line string literals.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/7108a32e08bf3a643361418bc3e4689726473abb">SE-0045 Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/4129d25974ec739195c5db5b12a3ae1aa60f8b9e">[Bug?] Reference types and mutating methods</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/9d96407342c060728027a06ea5762407a4743747">[Pitch] Requiring proactive overrides for default protocol implementations.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e9f076218f32b475dd91621bd75511eefffe3a6f">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4744e44cc8845b44afbab774db556b900088bacd">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b270e3a2cc1014114ef82d950be0ffa32f126659">multi-line string literals proposal</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/d659f61e263c419e6448a9fbf3616b853b1fd31d">[Idea] Remove optional pattern binding</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/572dd7f9d8939955a26bdd816ee26e1a0de61671">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f3dc5af9e7469c68acfa3eb91adf2a4eb6b0a719">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3665b2d2d38c470d43044bc80322bb4cae0a4a8b">[Review] SE-0045: Add scan, prefix(while:), drop(while:), and iterate to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8a74ea62568879c48c265a02a55595402e4616fd">Protocol non-conformance clause</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/deae7d9f74c213a9a8714d4dcd5751a0c5a050d9">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/22ea49ed634de7e110a2e61bbca540d33cf11bc5">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dd17965cbcb26131d055426f1a7f6cab16ef4c7b">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fd9b5504f2580f5797ee91bf77807efa12b83d85">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/f0346d1d3ee4751bb1beb4ddabbf42169746bffd">Move where clause to end of declaration</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/65758157d9dddecb111b847f2e6a4aa01c67c55c">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/837fca37f96cbf9326cb9aeacea3f8a494e9548e">Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/24759d02d42d859c69f95ba55cf6b8703dd635e1">[Proposal] Improving operator requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8e0af4a589b14d4130e4056cecf511f50036ce06">[Proposal] Improving operator requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bd50c629fae3ab6175b78c39d23c202af8e3ff1b">[Proposal] Improving operator requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a1ea5db753dcf78f5a28d3b7e18028e615dab4a2">throw expressions in ternary operators</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/a2612294f5cafe41c98de712cb30032448fae9fe">[Pitch] Permit self in type-inferred property initializers</a>      &mdash; <em>Marc Prud&#39;hommeaux</em>
    </li>
    <li>
<a href="/threads/b1caa6b73b33f2c2c61cf6513834c44b091dbbb0">[Proposal] Improving operator requirements in protocols</a>      &mdash; <em>Tony Allevato</em>
    </li>
    <li>
<a href="/threads/eff1ba9dfc3f7c134494f39a86deb1e393ca314f">proposal for a even simpler guard.. =&gt; guard!</a>      &mdash; <em>Dominik Pich</em>
    </li>
    <li>
<a href="/threads/6b5bd4ad44d58fae230d8bfc86025bd40c0c2ab7">[Idea] Make lazy an attribute</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8b483035a9e95ebbbf6802bcbae5030ba467574a">[Review] SE-0065 A New Model for Collections and Indices</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/9ceca8dbc8aadf0e623a7cd4181c87db3b87e029">Auto Unwrapping Of Optionals</a>      &mdash; <em>Cristián Arenas Ulloa</em>
    </li>
    <li>
<a href="/threads/669c682a0b465b311127417dd761ff9e72f09a33">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/be050c7684447011a1ccbd7b0fa607f249234530">[Pitch] Reference storage for enum associated values</a>      &mdash; <em>Marc Prud&#39;hommeaux</em>
    </li>
    <li>
<a href="/threads/bf1a90a2b83cf2810754426fe3404d4342ee8269">proposal for a even simpler guard.. =&gt; guard!</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ba0a7d08876cc44c439e98138ce4c72003495baa">[Proposal] More Powerful Constraints for Associated Types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b8bec4f17369496488efe77c6b48bcc106f55201">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/9ca7b2b4f7729b8e7610a5705501aac077da74b0">[Pitch] Reducing the bridging magic in dynamic casts</a>      &mdash; <em>J.D. Healy</em>
    </li>
    <li>
<a href="/threads/03865556d6726e186db371d2498596fdf2e6130f">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cb71935be15044e93b39670030f5120e0ba2617c">multi-line string literals.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d2680f5dbca724c2adfc9e7a1d06f9dec31a0de2">#if os(Windows) and MSVC/Cygwin Compatibility</a>      &mdash; <em>Sangjin Han</em>
    </li>
    <li>
<a href="/threads/0442d212fe9f0eb4d5477b96ba616336e9b07039">[Proposal] Improving operator requirements in protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/f4bfa6e5308b4e98b6e89885810bbc6708280f47">[Pitch] Reference storage for enum associated values</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/a059adf90a28a310f408f6413b4061b2056ec98a">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/1ccee56c3202fb06735ab0557eec93b1855757ad">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/2326764d7afd27aa96ce67ef21256a0126a42991">[Proposal/Pitch] Function decorators</a>      &mdash; <em>apetrovic@outlook.com</em>
    </li>
    <li>
<a href="/threads/2db78fe558a2b666fec2da0e91affd4906906f05">[Review] SE-0078: Implement a rotate algorithm, equivalent to std::rotate() in C++</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/c8e07fbf2507819b8bd84be67151dd224681763e">[Proposal] Tuple Extensions</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/47ee1d91f18f4115309b2f34f110df861c7a90ad">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eb5a8e3d7a24c797de5ab26c47e63ad853d12a57">Introduce OrderedSet type</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/9e1017464c31a304cfd8a94ef0b13fd9407c1cd6">[Review] SE-0073: Marking closures as executing	exactly once</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/b1787d221a235ecf4f3091945181727cf7d8c533">[Pitch] Including yes/no in stdlib as aliases for true/false</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/a49a69f90692d6b8ac5745ad2a67a2a62ec754df">[Review] SE-0074: Implementation of Binary Search functions</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/1fa871b1b0f5783331a4efc0d94d9a5aa9e15249">[Pitch] Reference equivalent to value-type &#39;enum&#39;</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/06b69ddd35619f31d9b9687db0ce4bfcc9aebb0a">Property observers in protocol extensions</a>      &mdash; <em>Andru Felipe Zuniga</em>
    </li>
    <li>
<a href="/threads/73e37a1716e4675b3c8fa01a8d4b5fb58cc7e202">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8af03a1ed8ea55a785606980ba8463c371f94f73">[Proposal] Tuple Extensions</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/29c2abb63c862575a4549cae38e4fd69eed904b0">[Pitch] merge types and protocols back together with type&lt;Type, Protocol, ...&gt;</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/105a5636db7afa03b008758313f6e3469082860c">SE-0080: Failable Numeric Conversion Initializers</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/fa47c20512c8e70ed2bc13134f250ebe4da44594">Case conventions for mixed-case words (like &quot;iPad&quot; and &quot;NaN&quot;)</a>      &mdash; <em>Jordan Rose</em>
    </li>
    <li>
<a href="/threads/3661fc4357d5b02d26632f6414bcfb7afc47929d">[Pitch] Reference equivalent to value-type &#39;enum&#39;</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/c9682172acbe54d3fffc7cdfd3c3a9b152cbc155">Switch on an optional enum -- `case: nil`?</a>      &mdash; <em>Eric Miller</em>
    </li>
    <li>
<a href="/threads/4959ccec4ae168918700bce88684ae4470df3da4">[Pitch] make == more restrictive at compile time</a>      &mdash; <em>Gerd Castan</em>
    </li>
    <li>
<a href="/threads/cae10daa5a8e26e3715a28d7f699f7bea5e2cbe4">[Pitch] Consistent bridging for NSErrors at the language boundary</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/8996b82683f3ce2df6f220810ee0d6a336f604f6">Referencing zero-parameter functions</a>      &mdash; <em>Alex Hoppen</em>
    </li>
    <li>
<a href="/threads/0b81f14f88043d4d00f504cccc4aad3718a6f405">Case conventions for mixed-case words (like &quot;iPad&quot; and &quot;NaN&quot;)</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/0d247beed04e68d587902d874fe98391766a4809">[Review] SE-0060: Enforcing order of defaulted parameters</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d3e4d84f7962797c10ce63c7a9437025c0817016">Case conventions for mixed-case words (like</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/9d58c4b764af2abf55647fe27b035da0ab330446">[Pitch] Tuple Destructuring in Parameter Lists</a>      &mdash; <em>Dennis Weissmann</em>
    </li>
    <li>
<a href="/threads/7c777b8488f2d7e8c04d0fa770119acc8abbdcf3">[Pitch] Tuple Destructuring in Parameter Lists</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/a2c09f81293166fb79687393ec29b7f42005f460">Allow FloatLiteralType in FloatLiteralConvertible to be aliased to String</a>      &mdash; <em>Morten Bek Ditlevsen</em>
    </li>
    <li>
<a href="/threads/1746f87a93e8d6bf971c482b90e4b94514cab71e">Idea: Allow/require &quot;let&quot; in property setter name declarations</a>      &mdash; <em>Ian Partridge</em>
    </li>
    <li>
<a href="/threads/7197f93c2a92b7b2bbdf640350f40d1dba961174">[Proposal] More Powerful Constraints for Associated Types</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/601dba8668e60798394abc6048bcc2755622a2d9">[Review] SE-0078: Implement a rotate algorithm, equivalent to std::rotate() in C++</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2e6909b381f1129e3854f9e9d34f954d4c48d17d">[Review] SE-0073: Marking closures as executing exactly once</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c264abc39cdf6ad122415ad8fb102681caf0ad4d">Dropping NS Prefix in Foundation</a>      &mdash; <em>Tony Parker</em>
    </li>
    <li>
<a href="/threads/7e42c49707939cb52befe599c1641ed2ac322727">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4b4c292d45718c34cb34f173b5176c1f8e6c22ce">[Review] SE-0074: Implementation of Binary Search functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/889da607297b6024a7d0b2d4c567e06baa212cf8">[Pitch] New enum syntax.</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/898d12d673d4f38f912359227238ef9b2d150999">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a764a716ee0d25dc7e4e1a4fa66d124c8f39aa9e">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8df1510e38658ba6a967169ccf521da36fde6fa5">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/da26d0bcd4a3956f4e9ca29514fff3735cdd767b">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/87fa6ec1ec02dfffb3a02ba330c506fbf40e833b">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/33a7063f5d14172b31aa9357389bb2c788048cc8">[swift-evolution-announce] [Review] SE-0080: Failable Numeric Conversion Initializers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1f20a5074462d64eb2b4ef555bef1e1d65b4bb47">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b8b0f00009807576c663c95decc266877ffbf65d">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2879272e79e0e6025e8dff47b24b55e42be9333c">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/805973a10eed7c2e7646782b1998dcd7f7341aae">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ded17e4820a77243bbdb12bcee13958becb1609c">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a3a3df94ac2fd821466d6c2646b546e9580fa293">[Review] SE-0073: Marking closures as executing exactly once</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/cbe9e0d753f2215bda78f53f5cf549c7bd424622">[Proposal] Multiline string literals</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/4add50b15baae8ec34fe7d4b7c08fcdd5e25b028">Dropping NS Prefix in Foundation</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/bc6ef800afa27e30af6398d0fa42c9d8557fbc19">[Pitch] Memos for Struct Calculated Properties</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/eea7d0c1b45987f41975dfe327e687887d9b4d41">[Proposal] Memorization for running function only once</a>      &mdash; <em>Muse M</em>
    </li>
    <li>
<a href="/threads/14f21808753746454410f6664696fe1eb3af3810">Standardize arguments in closures</a>      &mdash; <em>João Nunes</em>
    </li>
    <li>
<a href="/threads/cd926ab099d72dfc0c2ed28d0a4d62b2b65160b8">multi-line string literals.</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/ee832ac1d4ab4a48495ff0d03b03802c7ce59fd8">unums in Swift?</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/bea7b70411173804a9a56dc969368c3d770ac95a">[Pitch] alternative multiline string literals</a>      &mdash; <em>L. Mihalkovic</em>
    </li>
    <li>
<a href="/threads/02b13773967cb4145200bb33e1ce13f1a617e8a0">Proposal: Drop parentheses for initalization from tuple</a>      &mdash; <em>Daniele Riccardelli</em>
    </li>
    <li>
<a href="/threads/634646ac1ac2ae30fca6a905152f2e6dcf22cb56">[Idea] Represent a point in time as a Swift immutable scalar type TimePoint</a>      &mdash; <em>Steve Weller</em>
    </li>
    <li>
<a href="/threads/9b3a60f55f9c162bd712b8d07988e5d1e1d81e57">[Opinion] Thoughts about the SE-0025 (Scoped Access Level) proposal</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/9a8b168aa867a7819e01fad4cbe155b00d22578d">NSRange and Range</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/2cb3d575d1032c0d4e2f672f732876501226cfa0">[Pitch] Require tuple conversions to be explicit when labels don&#39;t match</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/8395cb148e4e9e9d96ab32f51176736abfcc9e3f">Typealiases in protocols and protocol extensions</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/ea1f39abcb8ab0da611ef2957661c3cbf3d66d86">[RFC] UnsafeBytePointer API for In-Memory Layout</a>      &mdash; <em>Andrew Trick</em>
    </li>
    <li>
<a href="/threads/48c60cbf715af277646581f663cc6afd607f7df1">[RFC] #Self</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/5d846f098fdc23f0c4286d25a742be1e46f9efc7">[Swift 4] Support an official reactive library</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/0b05d47bb1468ca1e109128234676acbc413a3b4">[proposal] Allow function argument type to be omitted when passing a default value from which it can be inferred</a>      &mdash; <em>Sam Dods</em>
    </li>
    <li>
<a href="/threads/df00fb5df76c4400518fc9e6855e05fc340feac1">[Accepted] SE-0082: Package Manager Editable Packages</a>      &mdash; <em>Anders Bertelrud</em>
    </li>
    <li>
<a href="/threads/f48392944e782847c3ace3293ea7ffe608a1081d">[proposal] Treat (case .Foo = bar) as a Boolean expression</a>      &mdash; <em>Sam Dods</em>
    </li>
    <li>
<a href="/threads/4947b030f898f82d8efc896eb9dc24a0971497ba">(Draft) Add last(where:) and lastIndex(where:) methods</a>      &mdash; <em>Nate Cook</em>
    </li>
    <li>
<a href="/threads/37ee15dc311f78baf46106188c2425fa8474fa9c">Change `repeat` to loop indefinitely if no while clause is present</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/2bab2c0c250694f8fb4e4e7e265c324bd5b66779">[Review] SE-0086: Drop NS Prefix in Swift Foundation</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/15f401b9db6fa1cbbdea410f5e439a4c1f5d7231">[proposal] default returns</a>      &mdash; <em>Eduardo Mourey Lopez Ne</em>
    </li>
    <li>
<a href="/threads/c3be2b1e0355dff846bb79650b1379cda0496d30">[proposal] extra if syntax</a>      &mdash; <em>Piotr)</em>
    </li>
    <li>
<a href="/threads/4815ba51bd51cdd227f099fc30d61c0c42eff982">Standard library &#39;Data&#39; type pre-proposal</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/dd29efb90d991ebf4791170ff2b1a60ce9038d8d">Pitch: Soft unwrapping of optionals</a>      &mdash; <em>Basem Emara</em>
    </li>
    <li>
<a href="/threads/bccee7142566b9d07ae34c2db798f0325f125725">[proposal] Allow &quot;let&quot; for computed properties which only reference immutable data</a>      &mdash; <em>Alexander Momchilov</em>
    </li>
    <li>
<a href="/threads/77786cb3acfbb6ccc3860d9cab46774706467dd3">[review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>Darren Mo</em>
    </li>
    <li>
<a href="/threads/d6c80689f241f98dbca55e238e4be858991097d4">[proposal] Treat (case .Foo = bar) as a	Boolean expression</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/922aec5dfd25bbf24a92ed193619f6a9027912fc">[proposal] Allow function argument type to be	omitted when passing a default value from which it can be inferred</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/8d2c72a515330b16e18c7b1c51aaedc2a0baab10">[Pitch] Align @objc inference with the semantic model</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/c53f0b376bc3891fe0816f9c10cf289a25b4613a">SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/33feafd21e638810f5b7cf06f8f423df622a15e1">[RFC] #Self</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/31575248c74a8fb27a48ef928d48c77fec345939">Why can&#39;t protocols define constants or subtypes?</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/3bc65c8d6c439021d823ff12c0758b2ee24c6902">Pitch: Soft unwrapping of optionals</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/599b7e3ec01ee71d375636ae8fe99aafe56f7143">[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>Darren Mo</em>
    </li>
    <li>
<a href="/threads/b3f635fa4111669e17050ee250363f4747852afd">Re-Visit Proposal: Weak Native Swift Containers (12 2015)</a>      &mdash; <em>Dominik Pich</em>
    </li>
    <li>
<a href="/threads/72289f5ca6aa242bcbb3ab645736dfa9c8c4c528">[Review] SE-0084: Allow trailing commas in parameter lists and tuples</a>      &mdash; <em>Doug McKenna</em>
    </li>
    <li>
<a href="/threads/75cff8df34dc7949e4f8270597ae3cf2e79cd0f4">Fwd: [Review] SE-0084: Allow trailing commas in parameter lists and tuples</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/f3411a32dec572c9271f3d38dc97cb87aaa222f1">[Pitch] Constrains for numeric types: Int&lt;1...10&gt; Double&lt;0.0...1.0&gt;</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/55bdcedadc9b63fca796a57cbed367a73eb82148">[proposal] extra if syntax</a>      &mdash; <em>Piotr)</em>
    </li>
    <li>
<a href="/threads/c346fe2a3fb2549b8402f209ccb618a4b56ddeef">[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>Dan Appel</em>
    </li>
    <li>
<a href="/threads/17f9dafde4ab1823c8b77d357934f9d8b73f9eb1">[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>Dan Appel</em>
    </li>
    <li>
<a href="/threads/184704f72bf8c9e1be17fd7d49d0f336a58acf52">[Review] SE-0088: Modernize libdispatch for Swift 3 naming conventions</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/cb17a6c1308fc363415aceb24a5df2db248225e9">Optional assignment operator</a>      &mdash; <em>Jose Manuel Sánchez Peñarroja</em>
    </li>
    <li>
<a href="/threads/e37b7c4098cee5b6562e7c1ff65730b78e2ec432">[Pitch] Nesting types without nesting in place (additional)</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/4a623cddef78d504c40759a2520d7d16886d407e">Swift 3 and cross platform development</a>      &mdash; <em>Michael Peternell</em>
    </li>
    <li>
<a href="/threads/bcb218ac8380c78edf841e812d9772bf1ac8b147">[Draft] Introducing StaticSelf, an Invariant Self</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/e697e51a30e463508b422e4da739fa97e89a9d9e">[Review] SE-0084: Allow trailing commas in parameter lists and tuples</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/d09ea3e233a57fd83cbc678b02ed7cf7e11a4535">[Pitch] Add toplevel keyword for protocols</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/ea0cead026773ecedc101e99cfadc7aed4e46369">[Draft] Introducing StaticSelf, an Invariant Self</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/60cb1a2371313f800a748e1669908f68f6749c98">[proposal] Allow &quot;let&quot; for computed properties which only reference immutable data</a>      &mdash; <em>Andru Felipe Zuniga</em>
    </li>
    <li>
<a href="/threads/137642f9a5c32bf808f0f37ccbdce9dd29a58551">[draft-proposal] allow access to the underlying collection of a slice</a>      &mdash; <em>Max Moiseev</em>
    </li>
    <li>
<a href="/threads/227f31a63e6fcd17087c17751ee59a8fc41b0831">Is SE-0088 (Modernize libdispatch for Swift 3 naming conventions) open for comments?</a>      &mdash; <em>Josh Osborne</em>
    </li>
    <li>
<a href="/threads/c7c895dc5f03772dcbc2b71e552477af5ac63773">Could enums have their rawValue type inferred?</a>      &mdash; <em>Eric Miller</em>
    </li>
    <li>
<a href="/threads/672d0ece6f5b76ee7c214336de90d5292ef63e0a">Removing &quot;_ in&quot; from empty closures</a>      &mdash; <em>Rob Napier</em>
    </li>
    <li>
<a href="/threads/fc3e22b7374cf197e0f83be58ba8377d62a3b99c">Interspersing guard let with guard boolean</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/4075c59772e38e83b91590e1dd0602f067e416af">[Draft] Introducing StaticSelf, an Invariant Self</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/06c4a972285892ef526ac92cd705b2794ea37872">[Draft] Introducing StaticSelf, an Invariant Self</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/edd5de1ca34e55990ef82c078c905bdeb148af4b">Fwd: [Pitch] merge types and protocols back together with type&lt;Type, Protocol, ...&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/b1cbb484d4b9ac78a71f09ea1a35743e07bb8257">[Pitch] merge types and protocols back together with type&lt;Type, Protocol, ...&gt;</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/6036b2888cb9da245064a886add8d63284f81485">[Draft] Introducing StaticSelf,	an Invariant Self</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/e71e68ef7c3dedd9a981cd49f2b9cea480453b75">[Idea] &quot;guard not let&quot; optional binding</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/fb40796beafa12e3c0db6e0f582cdf159b715399">[Review] SE-0081: Move where clause to end of declaration</a>      &mdash; <em>Tony Allevato</em>
    </li>
    <li>
<a href="/threads/6c400ace6f34ea911ac6f32b23370807d63a6fec">Could enums have their rawValue type inferred?</a>      &mdash; <em>Eric Miller</em>
    </li>
    <li>
<a href="/threads/f645a93fd72a35070fd1006612ac3ccf11616dbb">[Review] SE-0081: Move where clause to end of declaration</a>      &mdash; <em>Tony Allevato</em>
    </li>
    <li>
<a href="/threads/24f5de06a3e3d93e0e1196c89668d44351210f66">[Review] SE-0081: Move where clause to end of	declaration</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/1ff9c0b0a618edd84bd880241c6cf8b2613697d3">Allow commits or branches in the Swift Package Manager instead of Version</a>      &mdash; <em>Tyler Cloutier</em>
    </li>
    <li>
<a href="/threads/c35e6e75b9525eb87c71cdb15899dcb57225e35a">Small Enhancement Request for Swift Protocol</a>      &mdash; <em>Sreejith K R</em>
    </li>
    <li>
<a href="/threads/df37d2b171d1fc0cf15f894a9faa4afdf9be03d0">[Review] SE-0081: Move where clause to end of declaration</a>      &mdash; <em>L. Mihalkovic</em>
    </li>
    <li>
<a href="/threads/977771854ee0ea7277a6696477cdd85669f3b54a">&quot;AnyValue&quot;, &quot;protocol MyProtocol : value&quot; as counterpart to &quot;AnyObject&quot;, &quot;: class&quot;</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/4cb7332ed5ec10e320bdaba1328b6afcf2cb007f">Union instead of Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/e7f81c0ee546a37012f3edd29d986432ac6ba12d">Fwd: Union instead of Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/10a4d80f254e24a7744722264cdc2aca85c91e86">Fwd: Union instead of Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/c30b2c60511bb7070b2c7f8bb27cdcb2d788a800">Union instead of Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/ff492f5dd06065c4cacfc137eae8b4a96722709a">[Review] SE-0081: Move where clause to end of	declaration</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/a37b07f7d729d011a694dc458334fbcfc7d6a70c">Removing &quot;_ in&quot; from empty closures</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5bf012261a1c5f0b612b7ae7f265ea93e4e809e4">Fwd: Union instead of Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/5b8d06ed2b626c7c27812a57cdace4c21083a41d">[Proposal] Using Union instead of Generic Enum to implement Optional</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/e8a35a8fd51500775ab65ba32cf9af43f55b479f">Make access control private by default.</a>      &mdash; <em>Knut Lorenzen</em>
    </li>
    <li>
<a href="/threads/10e58ae11685b6d9e2e3ede241f13f1e4dcc197a">[Review] SE-0041: Updating Protocol Naming Conventions for Conversions</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/dfda5b8718cddb047bcb40fca317a37fab252bfb">StringInterpolationConvertible and StringLiteralConvertible inheritance</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/8328f6f16b6996b0e8926fd8a44d265a27f65287">[RFD] Non-Self Protocol Requirements</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/1304804359028fb445a98766a4c4166fab0f0eeb">Winding down the Swift 3 release</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/c05d0f6245769a3c328c0df469fb0afe71f050b4">[Review] SE-0041: Updating Protocol Naming Conventions for Conversions</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/3fd068e672703be727388ce3ede05abe8baa019a">[proposal] Allow &quot;let&quot; for computed properties which only reference immutable data</a>      &mdash; <em>Andru Felipe Zuniga</em>
    </li>
    <li>
<a href="/threads/e0b8a04802791c633955f294b7cc959fcd68cd6a">[Idea] &quot;guard not let&quot; optional binding</a>      &mdash; <em>John Morgan</em>
    </li>
    <li>
<a href="/threads/3b7ffb71cea38c18933f9123a12223df2b723a35">[Idea] &quot;guard not let&quot; optional binding</a>      &mdash; <em>John Morgan</em>
    </li>
    <li>
<a href="/threads/b58eb9b4df9b9ac42ef9479299ae22389ae60e48">[META] Using escapes in Swift Evolution Proposal discussion links</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/32a6a8568f16537961eb053ef3c525f2ca78d80c">Could enums have their rawValue type inferred?</a>      &mdash; <em>Eric Miller</em>
    </li>
    <li>
<a href="/threads/c5be3541863d6f96eb1bca8bf469896a1d9b0ee6">Idea: Named extensions</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/b9b74154cedfc067120389b75ea27fe0c827bbac">[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/696f5c06f7174e1ef42b8e5501dc98cf71f4f982">[Proposal] New mechanism to combine Types with/or Protocols</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/67282dfeb71b7ada943d8765dde2387ede8ae085">[proposal] Union Type</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/ad9e10aad6031622702c97e9c5223ae933f6e624">Support for coding styles and &quot;swift-format&quot; tool</a>      &mdash; <em>Daniel Martín</em>
    </li>
    <li>
<a href="/threads/a61b1d473bb686d86f72a8bd2a50ffbf83a969cc">Winding down the Swift 3 release</a>      &mdash; <em>Haris Amin</em>
    </li>
    <li>
<a href="/threads/b41a275e0de1aa5c035b5a4310583e17368013f7">[Pitch] merge types and protocols back	together with type&lt;Type, Protocol, ...&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/3b251e34220e92d814985004daaf879a6a22ddd7">[Pitch] merge types and protocols back	together with type&lt;Type, Protocol, ...&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/3f95345ac68ac8cc122826b6091719cb390280fd">Enhanced existential types proposal discussion</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/59c7362277a2b66f908fa109cf76d69069f0a93f">OFFICIAL NOTIFICATION HL/5574/41/07/MICS</a>      &mdash; <em>Microsoft Internet E-mail lottery Awards</em>
    </li>
    <li>
<a href="/threads/ddd61171d929f76fdb370f25738c8060d11fe7dd">[Proposal]Simple pattern matching with Horspool algorithm</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/6b341a2877552ddc7f2630ba4bac7f017eb4033c">`once` keyword for use with loops</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/c79a2fad4a1680aa7f2ce2270c109a804da9dedc">[Review] SE-0074: Implementation of Binary Search functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2c7323f0317a99bdb795bbc0d6f481154fedb382">[Review] SE-0074: Implementation of Binary Search functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b8d22733da66a213c39d4f26a3871443837a5d98">[Review] SE-0074: Implementation of Binary Search functions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d85a6b59c43d3bb597683d6d2c36c0528eafce59">SE-0084 spinoff: Newlines as item separators</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/b5daffe909c55499c328e3ad99d1f60d0157037e">[Idea] A 128-bit unsigned integer value type</a>      &mdash; <em>Muse M</em>
    </li>
    <li>
<a href="/threads/666b19df15c009e0d05b5486887fd6af79e237f8">Proposal SE-0009 Reconsideration</a>      &mdash; <em>Krystof Vasa</em>
    </li>
    <li>
<a href="/threads/511b27e9ad156e584bc4b75e1438eab17bcf11e6">RFC: didset and willset</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/1e4028c59ecc88fc86b6e28af4b62923dfae3ed6">Pitch: Modify the meaning of IBOutlet to remove the ! from the type</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/33c6142dbd339c4a962df51258f8d2cc0da43880">[Pitch] Requiring special keyword to mark protocol implementation methods</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/fae0a61542f1881f1823284961925ea37e6169d6">[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/2e8ef8d981161e5ce5dd6a90f5d33179c93e1161">[Review] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/17dc667c3a6d1e49e885e12d4ae8a2c748e301af">Support for coding styles and &quot;swift-format&quot;	tool</a>      &mdash; <em>Vincent Coetzee</em>
    </li>
    <li>
<a href="/threads/3e0279e7cfaeabf1dd9b26a10998c92eecb79a5a">[Review] SE-0091: Improving operator requirements in protocols</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/c6c5dccb295e5233807bffe2739481ee0daae86f">Proposal: Deprecate optionals in string interpolation</a>      &mdash; <em>Krystof Vasa</em>
    </li>
    <li>
<a href="/threads/d3152ca1e564813b41ce2398f81937a7b6ba6f18">[Proposal] Switch Let</a>      &mdash; <em>Eduardo Mourey Lopez Ne</em>
    </li>
    <li>
<a href="/threads/45085bdcf08dac82e2c1bcbca9d38408d0e1f44f">[Pitch] Rename protocol&lt;&gt; to Any&lt;&gt;</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/b867f6d575202a9659413965d39e6c4dd7262690">[Review] SE-0050: Decoupling Floating Point	Strides from Generic Implementations</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/36dc6c4a402d2126c8b125ea3217f3ec2b19ce42">SE-0005 ==&gt; Please keep well know acronyms capitalized!</a>      &mdash; <em>Pavel Kapinos</em>
    </li>
    <li>
<a href="/threads/eb9ba165ba2ed7ee99438ff0c5beabaae9594ead">ADC Swift Blog</a>      &mdash; <em>Pavel Kapinos</em>
    </li>
    <li>
<a href="/threads/a08208a18089001f74641bc807dec76c17687b72">(Draft) Add last(where:) and lastIndex(where:) methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f54222d7aeddf750faa7396512e1a7037cb5082d">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/50f2faeb3f25c827290e5c8dce3bcfd91490bbb8">[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/811995380d6262898de706b36957e21eb846721f">[swift-evolution-announce] [Review] SE-0041: Updating Protocol Naming Conventions for Conversions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d4aa2e7b6d92a78fdcec79a6e780f4fd06c836c2">Enhanced existential types proposal discussion</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f1990ea89a821b4be139f00af95ce594c9c7fd44">[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/44a0ca94326983483ca7dd945798c47451a08159">lifecycle hooks/scripts in swift package manager</a>      &mdash; <em>Vadim Eisenberg</em>
    </li>
    <li>
<a href="/threads/eaf130cd8d5e8c639ebaeaaa3b3603ccaa7dbaf4">[Review] SE-0093: Adding a public base property to slices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2cea4d9b39e06919a3e131605cb0f0989b51ed33">[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a02db006da4eb4444e5c00384c8bcef87c0046ad">[Review] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/d54fede8fe4dfd45ef665915575bf2c1c79d6bfa">[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ca267b986e131dfb7b586634c4187b12f76be5b0">[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/238adb00c147da6c0599a25d53f985222bfbfc1e">Static Dispatch Pitfalls</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f9307c403d1b56f8fd8d4e7c2a318cfa7594c697">[Pitch] making where and , interchangeable in guard conditions.</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/eab489595dcf88a931e2f46c26b23546cc19f47b">[Proposal] Disallow redundant `Any&lt;...&gt;` constructs</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/04d68034af081acca1f66f3099c2fd5e3e1f86b8">Static Dispatch Pitfalls</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/48491ad57ed838fc92f95c58044a801562c0afef">[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/ec3e92279a8cfc21c0ef938aa8816bfa79434451">[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a991050364c6ecd218034c46c325f9fda5732752">Custom Covariance/Contravariance</a>      &mdash; <em>Peter Livesey</em>
    </li>
    <li>
<a href="/threads/fb2c927d2e07e9f66d25ce89cee3fe978d4cdf9b">[Discussion] Allowing subclasses to override requirements satisfied by defaults</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/d949cff1a7299c4852c887c19c4d05c0e21af6d3">Add a stride(by:) method to ClosedRange</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/3dce92b460e071e556622e9ab92cb40c94dc23aa">[Pitch] Add `mapValues` method to Dictionary</a>      &mdash; <em>Honza Dvorsky</em>
    </li>
    <li>
<a href="/threads/2e1f69b601082856769fa00637a3aed2fe123437">[Pitch] &#39;Double modulo&#39; operator</a>      &mdash; <em>Adam Nemecek</em>
    </li>
    <li>
<a href="/threads/00f01790b7ec8061cb3398d3d32843536c4d7749">[Idea] A 128-bit unsigned integer value type</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/944291f5f76a058c31f2c76d111b2138ddf3412f">[Proposal] Add property for negation to Bool</a>      &mdash; <em>Антон Миронов</em>
    </li>
    <li>
<a href="/threads/326b98b970135dac23984321165e3a31eb437ad2">[Pitch] Add the sign method to the SignedNumberType protocol.</a>      &mdash; <em>Adam Nemecek</em>
    </li>
    <li>
<a href="/threads/925abf5f2d987e8bc8ec557c6deae9bede287c1a">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/af4f2d4f6489b3d14077d9c009be48fbd8658c47">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ca761620530147f18acd88b1aa37a8cae3874125">[Proposal] Add property for negation to Bool</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/665094dd6191b468a28065fa5b0d1d4f31f77cab">[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9467830f9f4a3c0db101b9f33d091b3a432bc10f">[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/870cb1e0e8ef03fc2e1b49299a71e36c85469384">[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/673a74103d8cdb6f41f6c1eb0186075d839d49d2">[Pitch] Make Self an alias for object type in object definition</a>      &mdash; <em>Adam Nemecek</em>
    </li>
    <li>
<a href="/threads/603cfd5a8599d773e96789115edf9553af45d0ed">[summary] Protocol extension method dispatch - was [Static Dispatch Pitfalls]</a>      &mdash; <em>L. Mihalkovic</em>
    </li>
    <li>
<a href="/threads/2d53b4bdbaf33899cfb0c109560db12374b4c443">[Pitch] Add `mapValues` method to Dictionary</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1d9ed8c1ded0c7bd5542cfac4ddf4f5813e30af6">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2917980972ecc8f85efdd2afa32cd3c8816bd542">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1f8ea8d514c873dc74c6e47b409700b954e6016e">[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/37544de6360d6a5c4673dca32ef24accec76c040">[Pitch] &#39;Double modulo&#39; operator</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/eb24d81e1b3512672fca204b3d8c9db0b472018b">[Pitch] Rename `AnyObject` to `AnyClass` and drop current `AnyClass`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2f96c74cbf476012c00519256b027e5d9eff33e9">[Pitch] Use &quot;where&quot; in combination with &quot;??&quot; to provide Ternary-like functionality</a>      &mdash; <em>Charles Constant</em>
    </li>
    <li>
<a href="/threads/7fd15cd5808ce50aa6ed2ad02319c3f9acac5b6c">[swift-evolution-announce] [Review] SE-0041: Updating Protocol Naming Conventions for Conversions</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/db7ebb34d9b6d84aa66a7f6073518956b9c658f6">Should we rename &quot;class&quot; when referring to protocol conformance?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3b35591b7067b90c1db0a140bc818ae746bed2a8">[Pitch] Add `mapValues` method to Dictionary</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/ede459fe907662caa8597e4db4e6801ff0dbf03d">Initialiser Helper</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/3efd5bfd1ac1bfdff2e9862ed2bc66d4c788aea1">Proposal: Automatic initializer generation</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/84063db3d51ab829e309c6a82c87e071e162f635">Proposal: Deprecate optionals in string	interpolation</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/b25769b10854cdc0a589df26d19c8d79176e7dc8">[Pitch] Exhaustive pattern matching for protocols and classes</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/97c6a56953385a71c280eabb863f2d078d58aba9">[review] SE-0096: Converting dynamicType from a property to an operator</a>      &mdash; <em>David Ungar</em>
    </li>
    <li>
<a href="/threads/6fb18b2501b32493d69767a15aa6466d3f3f7391">[Pitch] Brace omission for single-statement n-ary closures</a>      &mdash; <em>Marc Prud&#39;hommeaux</em>
    </li>
    <li>
<a href="/threads/8d1e17960ea5d6aa1c28c47086be05fbff506f12">Thoughts on &quot;Fully eliminate implicit bridging conversions from Swift&quot;</a>      &mdash; <em>simon gladman</em>
    </li>
    <li>
<a href="/threads/444677f297e58bbaaa102ee365640bee103600bf">[Pre-proposal] Replace [Foo] With CollectionType</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/bc859431f1eaa72f29da1a7b02308e4d345b25c9">[Pitch] Add `mapValues` method to Dictionary</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/62251424e802da043e03ebe7fc6d1d0c4b2a9cd7">Thoughts on clarity of Double and Float type names?</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/d737f723656df4306f6d0e69a0b8cd7e1864e091">[swift-evolution-announce] [Review] SE-0089:	Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/b9af5b8e4f975c9b23251d966254c821c6f1d9be">[swift-evolution-announce] [Review] SE-0089:	Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/3f42113d3fad804efcc696819ce291b13ade12d5">[swift-evolution-announce] [Review] SE-0089:	Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/dd1fbc890198022e25ec59c5388804282057d3e4">[swift-evolution-announce] [Review] SE-0089:	Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/1060335b9ddf242d3ed46bb4ead52e72603fb2aa">[Pitch] Circling back to `with`</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/64eeae2d210939d3d087b419ec6376d9bcbd2aea">[Review] SE-0089: Replace protocol&lt;P1,	P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/be8439f55098b6bcdc8951ed9ae5707dee20fc0b">[swift-evolution-announce] [Review] SE-0089:	Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/fa6ca4beabd2b1a84ea374844da56a20e9c3ae83">[Proposal] Enums with static stored properties for each case</a>      &mdash; <em>Jānis Kiršteins</em>
    </li>
    <li>
<a href="/threads/ecbd6822655c049ed66078cfc6a14c5305f8d7f9">[Idea] A 128-bit unsigned integer value type</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aa57d3b51d1b13f6badd1aa974067008ff5d482d">[Draft] Automatically deriving Equatable and Hashable for certain value types</a>      &mdash; <em>Tony Allevato</em>
    </li>
    <li>
<a href="/threads/c2341c836b3dbc407aa434091492a5982dadce83">[Pitch] Exhaustive pattern matching for protocols and classes</a>      &mdash; <em>Leonardo Pessoa</em>
    </li>
    <li>
<a href="/threads/3e53090897e400bc360ade20efe11587c926e941">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/0a818de1351c7c42cc4137fe86824b2b7b81a29c">[Pitch] Remove associated type inference</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/6f3bd85ac33e2a098229a23bc709ee3cc05e6cb7">[Pitch] Allow explicit specialization of generic functions</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/f3cb6d9f3edfbfd3d6c4ab72a84d4b92e94fce87">Fwd: [Draft] Automatically deriving Equatable and Hashable for certain value types</a>      &mdash; <em>L. Mihalkovic</em>
    </li>
    <li>
<a href="/threads/9de7e6af1ac34c67eeac7bc8fc376da9989f637e">Discussion: Enforce usage of @available on enum cases</a>      &mdash; <em>Stuart Breckenridge</em>
    </li>
    <li>
<a href="/threads/6bfb2882514e763b506e2423bd1aba4e85ba088a">Add a stride(by:) method to ClosedRange</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f9f577e064ad3302ca209dcc2eba75f67caf165b">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a48c2519bc5999efc995db2c38075562f2348237">[Draft] Automatically deriving Equatable and Hashable for certain value types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c09430895fbe6fd88fe5100c2d021ba2f85ec8f2">[Accepted] SE-0093: Adding a public base property to slices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/844ba69db7d93035553627ef15710a1e13427fd0">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b5b00355f753b0b6ce0f8a57121935d8730b7052">[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/abd338c1be14104444fbea6dd06fe6909a1b554a">[Pitch] Add `mapValues` method to Dictionary</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c6ab683dac1fafd197f44de5e95a44f392edf795">Enhanced existential types proposal discussion</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/60f5410127985b12619415b1b325af943a1e1ebe">[Pitch] Property reflection</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/782db961ab007a3bdc0f32f25cd1cf9397e00789">[PITCH] ADD AN @RESTRICTED DECLARATION ATTRIBUTE</a>      &mdash; <em>Stuart Breckenridge</em>
    </li>
    <li>
<a href="/threads/263b69d009ef1f7a566ea8419cb272c55a2d6241">[Idea] Switch Statement with Optional Binding</a>      &mdash; <em>Natthan Leong</em>
    </li>
    <li>
<a href="/threads/e128ace474906b2c19dacc7665dd890d4e442837">Foundational Algorithms prototype</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/12c5cf36b7ea7975cf1482b54c1649fa43386671">Pitch: Small fix to where clauses in generics</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/253958d9067a77ea9f0e099b9fe0525ef57e3ee5">[Pre-proposal] Replace [Foo] With CollectionType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/db62bb7cfbed5ca2da80b2fcd54f8ed62c017e27">[Pre-proposal] Replace [Foo] With CollectionType</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eddcc1cc1e744fdd7f6b9ee40783ec56cef90700">[swift-evolution-announce] [Returned for revision] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/88fdc87aed20ce76ffddc2db3306bf2c90084b6f">[swift-evolution-announce] [Returned for revision] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/38f0bcbe023ee7a907f8ff70648332a47ced19a0">[Pitch] Make `return` optional in computed properties for a single case</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/5d02435b3ec39a8845960347523afabc185d76b4">Allow partial applications of mutating methods in @noescape contexts</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/7736150cedd8ffef31ff9632ff27e11d388b0065">Variadic generics discussion</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/a2bf6f5eec5bb4ad7af096c9c7bc49b869be8192">[Review] SE-0091: Improving operator requirements in protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/1124f2ddcd34f86994ac61301a37615e19b8bca9">[Pitch] #warning</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/c5fbc4528b60ba30431babc282a30833daf90a6d">No access to list of environment variables possible from within Swift</a>      &mdash; <em>Johannes Schriewer</em>
    </li>
    <li>
<a href="/threads/10afa0de8386df0e00623d60ecfc0cb0c22bdc4f">[Proposal] Protected Access Level</a>      &mdash; <em>Vanderlei Martinelli</em>
    </li>
    <li>
<a href="/threads/65a91ecd6fbeec8b20ded903ba429ecdd774e2db">[Pitch] Expose assert configuration functions in standard library</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/7f8bf0d08beacb1480eaeb6832221194096bb426">Core team review process update</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/d2a57dba66d02a84b6134d95f35b2eadd557535a">[Proposal] Protected Access Level</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/641d289c7d22452e5bccf6495e027a7f23ef102f">[Proposal] Shorthand Argument Renaming</a>      &mdash; <em>Frédéric Blondiau</em>
    </li>
    <li>
<a href="/threads/baaf5f0057904a8c5d9a73e3e69c31c43dd2ad5e">[Draft] Lazy evaluation when assigning static variables</a>      &mdash; <em>David Rönnqvist</em>
    </li>
    <li>
<a href="/threads/090dba62e8e628b07c233df90b5aeb568df41a5f">[Proposal] Shorthand Argument Renaming</a>      &mdash; <em>Chris Williams</em>
    </li>
    <li>
<a href="/threads/daa4e30f59a06afa9161a98f584ee66c00813ef0">[swift-evolution-announce] [Returned for revision] SE-0050: Decoupling Floating Point Strides from Generic Implementations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/81f79a6bec118c8e2dec5312cb62861e0a1e0e77">Ad hoc enums / options</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/566ea711f6127febb485a1a62b3240259e15752d">[Proposal] Shorthand Argument Renaming</a>      &mdash; <em>James F</em>
    </li>
    <li>
<a href="/threads/96beb8f4a27639594afb99b01d42fe00c3b5cfca">[Discussion] Type for matching a closure</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/b2424110e1cad5c1e488029a78d189a302931a89">Ad hoc enums / options</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/b6229996a9dcdc3209c926de1422e5973c74f61a">[Pre-proposal] Forward/Reverse Only Indexing Methods</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/38eb9bc4c40dc2c9b60635ec983c72150a26d814">[swift-evolution-announce] [Returned for revision] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a1a522be5abe0e7d6b3a926a8481e546247ba598">Working with enums by name</a>      &mdash; <em>Leonardo Pessoa</em>
    </li>
    <li>
<a href="/threads/8633192969fb498985405b9fc650591bc328d50b">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/550759732d4509fac12ef778d83da7d771ca95f3">Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</a>      &mdash; <em>John McCall</em>
    </li>
    <li>
<a href="/threads/2ae57371726148433c008f3b30f0a879d769d9f5">[Proposal] Enum subsets</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/fbf57fc1040f703eb2031d231ad3dd4ec36bff94">[Pitch] Unify preset static &quot;initializers&quot;</a>      &mdash; <em>Bas Broek</em>
    </li>
    <li>
<a href="/threads/eba57abd97f5faa8bb427b8d2fa28f7701e66d5e">[Pitch] Unify preset static &quot;initializers&quot;</a>      &mdash; <em>Bas Broek</em>
    </li>
    <li>
<a href="/threads/121b22f423f87ff4dbcd17db4dbc5886e3a318c0">[Pitch] Unify preset static &quot;initializers&quot;</a>      &mdash; <em>Bas Thomas Broek</em>
    </li>
    <li>
<a href="/threads/3cabd02c5b396371351230ca8288024c7545e595">[Review] SE-0099: Restructuring Condition Clauses</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/e15ddecdbc9b85ad0c427805cbfc1d47dd7382b4">Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/f8e60d4158cc5893058ede21f9fbaa9855f13234">SE-0064 Property Selectors and KVO</a>      &mdash; <em>Rob Napier</em>
    </li>
    <li>
<a href="/threads/53027de1193119421e5eadff02b329c09e0b6a8d">[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/1667af13153b3d3286f2c40085351d05767bef27">Add conversion String -&gt; Bool</a>      &mdash; <em>Arsen Gasparyan</em>
    </li>
    <li>
<a href="/threads/90cbf1e4b0b30670d00c1b02822c7d0b33af6b73">Swift request list</a>      &mdash; <em>Vladimir Goncharov</em>
    </li>
    <li>
<a href="/threads/08be5a367169b304a0d5bf636c0fac7bcb3a4a56">[Proposal] Conditional Conformance on Protocols/Generic Types</a>      &mdash; <em>Dan Zimmerman</em>
    </li>
    <li>
<a href="/threads/15784a34fec1847274a064ce2a609a7ed613697c">Name disambiguation of computed property/function with same type defined in extensions</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/671846a31874d3285c46881c862d36faa8530ee6">Name disambiguation of computed property/function with same type defined in extensions</a>      &mdash; <em>Paulo Faria</em>
    </li>
    <li>
<a href="/threads/f11b0875ca3d2cc5323871fe5e1274d9b7740189">[Review #2] SE-0089: Renaming String.init&lt;T&gt;(_: T)</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/91b28b2fd29ee672910b812468060529ce6fb88a">Pitch: @required attribute for closures</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/b9f0de17a59908b79839beeed9bc2c094d48eab2">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3a36c6f0c6666020f3aac10b75ab5c926d67b315">Discussion: Why is &quot;nil&quot; not &quot;none&quot;</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/caf9c5cb3105a2203497e53aeeb6479de9b482ff">Marking sort and sorted with rethrows</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c0a9de27362126cfcc5ef50eb2f4041120546805">[Pre-proposal] Forward/Reverse Only Indexing Methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/22aaf8275ba46232a9b530fa12dadc61c1ba98a6">[Pre-proposal] Forward/Reverse Only Indexing Methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bcb0bbcb85dd93d429bcd080fb05adb0e988adb3">Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0af2d2b9ebe71d7345568bcf50496fc626eb7bde">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b12dc8a7bd1f6c651330fe67f9ffe2c5defa3e7a">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c038c7433fc9a600dfe229ca59ed8d29a6546a2f">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/113e3d4958c217d369c1988b1446680d5c97823b">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/23d5d41b467fac59a28ef1b10f858c0bf1ad96b4">[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2dfefcab7bdf294f64cac40c0ed90b3a7f7fce46">Marking sort and sorted with rethrows</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/530a0ad4a789d57a4c473857212f65c010dc2825">[Draft] Change @noreturn to unconstructible return type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/7c038b0a9945affd8f47636bba651586ea6908e6">[Proposal] Make non-escaping closures the default</a>      &mdash; <em>Trent Nadeau</em>
    </li>
    <li>
<a href="/threads/051055cf44c929eeb73eb3ef8bb96a3135da7eda">SE-0045 status?</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/d3039420dde09fe915c712122a5a5a0812a5e753">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/a48455b8b01da73d3d95e2859ec0f42fb2aa8940">Proposed changes to SE-0033 Import Objective-C Constants as Swift Types</a>      &mdash; <em>Michael Ilseman</em>
    </li>
    <li>
<a href="/threads/e7dea8863e1a7dccfdd09414b409fd5f6bff553a">[Proposal] Make non-escaping closures the default</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/5039b2c2dcaf67a9cdce6b8021e6874f02fe366c">Arrays Returning Optionals instead of Index Out of Bounds</a>      &mdash; <em>Rob Norback</em>
    </li>
    <li>
<a href="/threads/28fb43014e6dba0253490af91a1b4a993967e6a6">Marking sort and sorted with rethrows</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0fd088ee303c2e40c1b0f4e0f3642585fc9c8a62">Feature proposal: Range operator with step</a>      &mdash; <em>Hans Huck</em>
    </li>
    <li>
<a href="/threads/b07eb86d99b3d2ce42df2fa4c31f4808fbc1c2c9">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/8ef45dd730d16ae0606f0fd640bdd46bd49df30c">[Proposal] A more liberal placement of defer</a>      &mdash; <em>donny wals</em>
    </li>
    <li>
<a href="/threads/6394e43f26081040c40bc51b0fc3a8936e315e70">[Pitch] Allow sub-protocols to define typealiases for protocols&#39; associatedtypes</a>      &mdash; <em>Ross O&#39;Brien</em>
    </li>
    <li>
<a href="/threads/094236532c74483fe0a5fadefa49bfdc9b676353">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5f20effe1fbb31ffce4f51f2a0d62f402e7a04a6">[Proposal] A more liberal placement of defer</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/f66c58db71e72caa71a2150e58573d4f50de6c74">Proposed changes to SE-0033 Import Objective-C Constants as Swift Types</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/0443edaf861c072fcc77a42490faaba6999ff287">Studying the evolution of the Swift project</a>      &mdash; <em>Gustavo Henrique Lima Pinto</em>
    </li>
    <li>
<a href="/threads/73b70104548c2956a618700ee48e5a754289cbfd">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5b936cc1df58a099d473c6b7f6fecb197d89fea4">Proposed changes to SE-0033 Import Objective-C Constants as Swift Types</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/4a8c92f5ff4d15b0c51c619aca4160e911ab6bdc">Proposed changes to SE-0033 Import Objective-C Constants as Swift Types</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/dd91a06bba363315895ebc4c16481192f1938a73">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/52d4b9428c604fef139e89f7f84f188ceaeabd30">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/03ca4cf90c2719b331394f3eac4938fc10967923">Fwd: Name disambiguation of computed property/function with same type defined in extensions</a>      &mdash; <em>Paulo Faria</em>
    </li>
    <li>
<a href="/threads/79656ad140aa1bda242b0d28fea563000846aa9a">Marking sort and sorted with rethrows</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/039f24b087044164e8bf37126cee11a0fc3fae51">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/11b26e7b902e8e6b64168c372571361630764b29">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/20003327471d73192f97936461d45f683b95e84b">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/cd51b7afd3f5bba4619f33357de2c406967a49d8">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/e8959a879dd1d90f6852e4a564ef06ab443e492b">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/93d3867bbcb6acd7e017431403f267b52006ab32">Philosophy of Swift</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/c9d8e304b564ce24bf1a1368d040ce9313e1e90e">Proposal: Filter split extension on Sequence to return tuple of sequences that meet criteria and that do not</a>      &mdash; <em>gadiraju praneeth</em>
    </li>
    <li>
<a href="/threads/423a1e91476971b46969a8a539be0432b6c30987">[Draft] Change @noreturn to unconstructible return type</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/1e2cc1679c1b7b64524d6604584f14bb32143262">[Draft] Change @noreturn to unconstructible return type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/5e63d8c2a6868a192b05c42e039ed62bff1cc07c">Sketch: Teach init a &#39;defer&#39;-like ability to deinit</a>      &mdash; <em>Graham Perks</em>
    </li>
    <li>
<a href="/threads/a68fa3b75ac5b35a3758d133bde6b142467ca1d6">Enhanced existential types proposal discussion</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e8472f59c9bb349ecbb6ba2c60af7276341a830d">[swift-evolution-announce] [Review] SE-0041: Updating Protocol Naming Conventions for Conversions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7bdb39c8d770e2ec8dd09bf85bff6399f6e973ca">extend trailing closure rule</a>      &mdash; <em>Matt Neuburg</em>
    </li>
    <li>
<a href="/threads/ece3969633b7188306b1af982d21501819234f62">[Pre-proposal/Question] Exposing the Unboxing Capabilities of AnyIndex (and similar types)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c084f84ddeaaf2beeadf266bd10f3cfb760ea787">Proposal: Filter split extension on Sequence to return tuple of sequences that meet criteria and that do not</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2511a834fd8490b82adeb105bddf1c7840020d6c">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/93206eeee17f39242769aa7c19cc4cd1616a1221">Marking sort and sorted with rethrows</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/cddde26b0e37ca02b3ab5f8282fe991f42672e13">Proposal: Filter split extension on Sequence to return tuple of sequences that meet criteria and that do not</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e3107eba8775721807ad21eed2cf0dd2cd4fa55f">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Spromicky</em>
    </li>
    <li>
<a href="/threads/de4c673b8176a2c048cbaec4cabca5501b11453b">[Pre-proposal/Question] Exposing the Unboxing Capabilities of AnyIndex (and similar types)</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/07ebeafd484927fd612273a1a9f8b5824d15e5e2">Philosophy of Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/35bf19c2962cc71c40d4b1c7eb828e9004297dd6">removing logical operators</a>      &mdash; <em>Pranjal Satija</em>
    </li>
    <li>
<a href="/threads/3bdfb1504c46f09ead3ce6f36da23d8316d99ad8">Discussion: Why is &quot;nil&quot; not &quot;none&quot;</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e8ae727dab9020fe946459ec113b3694512fb365">[Proposal] XCTFail should be @noreturn</a>      &mdash; <em>Alexander Momchilov</em>
    </li>
    <li>
<a href="/threads/069ed16417f966c8541ad7aa7e6708db80a32e84">Marking sort and sorted with rethrows</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/edb5cfd253129ad082c94fc313d5eec05922feb8">[Proposal] Add support for compile-time function execution</a>      &mdash; <em>Alexander Momchilov</em>
    </li>
    <li>
<a href="/threads/09f35b37c08f8669b11e913c55268d528b802ffa">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/c9473203de72e9fff353313a411a373c20f9f445">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/12d8de1838ea5309bc2d796e650771653c4d3fb9">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/bb5b248c9ade1545f1f1a0ab3ec6d1c6bc818c10">[Pitch] Retiring `where` from for-in loops</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/ff35a083a75462647ddbc09da027cd3049e5e595">[Draft] Allow multiple conformances to the same protocol</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/f34a009014e126c4c1ef581a2e6cdf459a161492">Remove nil and NilLiteralConvertible</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a4c82057b6cb71c6a9fcdda2c6e2f36675c2368a">custom attribute in userland (annotation).</a>      &mdash; <em>Axel Etcheverry</em>
    </li>
    <li>
<a href="/threads/55d8d85d4b35e7881e00e63fdbe85ab3f4b11550">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/f3303b440093de19d70b78771ccd896197968e34">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/efb3a5f99753db640202c541172a89ae6e1a6186">Add a while clause to for loops</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/bc70a5be3a67bbcf099b4aa6e704b7419b9bf68d">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f2cb5796218126e93ca74b19f6162db8c6be92b3">Philosophy of Swift</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bed690ea3b65a8acfed71915976f535e017eb082">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Spromicky</em>
    </li>
    <li>
<a href="/threads/2282f39b1f913fe4acef960934e58d9cfd980f5c">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Spromicky</em>
    </li>
    <li>
<a href="/threads/f3dc6f0956d42c4097fb8710a2e314e544769d7a">[Pitch] Retiring `where` from for-in loops</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/01b75bb0c3d2dc2a419784ae191c13e37c7e38b6">[Accepted with Revision] SE-0099 Restructuring Condition Clauses</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/9a7dba570564b7459aea9e80157ecec216c17bcb">[Pitch] &quot;unavailable&quot; members shouldn&#39;t need an impl</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/cfec73cdf980f301ee2cdacf01978abd7cd7eaa9">Add max/min to floating point types</a>      &mdash; <em>Darren Mo</em>
    </li>
    <li>
<a href="/threads/0a9a4c9c72366b8a17e3ee3e0ce6554e5360f92e">[DRAFT] Regularizing Where Grammar (was Re: Add a while clause to for loops)</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/05b4c4facf932a801b3ab1f0ac429e2ce7bb7117">[Pitch] Retiring `where` from for-in loops</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/b0b058475990cf3af292cebdd8fc5159cd558561">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/47781270457cadc7d4a9154c78f5b1e71a8c3875">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ab44d4a8e6616ce14478c714c8970eb7fbeb6aff">[swift-evolution-announce] [Review] SE-0091: Improving operator requirements in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/868e13555d7fcee618bf8ffef197df9255394d6e">[Pitch] Retiring `where` from for-in loops</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/ac3c91c29bd5ba55c5c847d91854b5985ca1fe06">Sketch: Teach init a &#39;defer&#39;-like ability to deinit</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/a72984be26320bb83b070da82cd9fec0b2e7da48">[Draft] Allow multiple conformances to the same protocol</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/c48dacfb1db0b62604d107f2dfd230ec923d32e0">[DRAFT] Regularizing Where Grammar</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/16596f362b13b84cceeef34eb1daae9e62a473f9">[swift-evolution-announce] [Review] SE-0089: Replace protocol&lt;P1, P2&gt; syntax with Any&lt;P1, P2&gt;</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/efc63ac12dfca158fbc654f841c5fbec0cb8b250">Add a while clause to for loops</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/8793650dce53769d5380fcd6e6baedc97d33a2bf">[Pitch] Make `default` function parameter values more transparent</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/fec3d60a7228a42e0045f967274aef7fe28037cc">[Discussion] Type hierarchy translation consistency</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/6b44fbecd2f78331431cc33b80d8016b14f39453">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/67b3d9a17b9218a5d47adabfdd89572d3e4bf860">[Draft] Tuple-Based Compound Optional Binding</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/9b3bb03996c35a47762f74f8c82d9c3bcde3273a">Nil coalescing operator precedence</a>      &mdash; <em>Andrey Fidrya</em>
    </li>
    <li>
<a href="/threads/f1604e7b08825a393627bb0e26b3768d4e3628b4">updated documentation with each snapshot?</a>      &mdash; <em>Dave Yost</em>
    </li>
    <li>
<a href="/threads/be27e5a9b3c0e7fb380011d212993e7152ec7ffa">[Pitch] Allow nested protocol declarations</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/da4443249e6888a0920d476964ba0ab89b8c36b8">Access modifier blocks</a>      &mdash; <em>Raphaël Wach</em>
    </li>
    <li>
<a href="/threads/a3060d496633abf4822a9207fe68b7fe15e226f9">[Pitch] Retiring `where` from for-in loops</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8ba31e8657eb9adec88ee6e74e3229c68facf936">[Pitch] Make `default` function parameter values more transparent</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/87f06d32b070dd8d6041c6fdb537f5ba7aebdb00">Swift Sanctioned Crypto in Core Libraries</a>      &mdash; <em>Travis Beech</em>
    </li>
    <li>
<a href="/threads/bbcafadd79a66014d8b3ad3b5b695e27eacfec6d">Property with class and protocol type</a>      &mdash; <em>Adrian Śliwa</em>
    </li>
    <li>
<a href="/threads/b0a79889e377464e1ae09c0b00968043714b568e">Nil coalescing operator precedence</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/ca51c85d0c1942416e7d95b83f738e85ee02611e">[Discussion] Default Closure Arguments</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/bf379bd1a06431d860b52398b369b94610627696">Arbitrary-sized integers</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/331d23ef03c939a44e138acc91e38f29ae75988f">Bitshift operators</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/e24dd5bcf4e2cb64e0c27bd10e24ec44491423f0">[idea] Quick Help working for Keywords</a>      &mdash; <em>Jo Albright</em>
    </li>
    <li>
<a href="/threads/cba3de84c1cd2fe7dc22e001749ee6bf5b3bb20c">Allow a typealias to be named after the corresponding type</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/efdb09bf44cb9ebf99eaa4d3144c3dc7dce180db">[Discussion] A Problem With SE-0025?</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/b1d78295bf2d041fca420b90330a0441f7e8af88">libdispatch renaming feedback</a>      &mdash; <em>Guillaume Lessard</em>
    </li>
    <li>
<a href="/threads/a004c4ba0aa889eed6afbff92a914c2346de9546">[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/196305aa350e79ace43f9dcde5e743c7127be882">Nil coalescing operator precedence</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/877edfb1ca1553041e2ea557a83dbf5e017e4b54">Normalizing operator&#39;s types</a>      &mdash; <em>J. Charles M. N.</em>
    </li>
    <li>
<a href="/threads/1c050f8c02d96dffd411deac03b1624ce5867d50">[Discussion] A Problem With SE-0025?</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/d7fbd40018b53d54551322aedd865782f40512f3">[Discussion] A Problem With SE-0025?</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/8cf00b0b37de730d5e66508992f39379487b4db8">[Discussion] A Problem With SE-0025?</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/6d84c56641cd96f8f2cc02c554693184baf4b9fe">[Idea] Set variables to &quot;_&quot; in two-stage init; remove IUO</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/604cd493dfeb3522de5bc9c190d74a3e1136baa8">API Guidelines: dropFirst?</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/bdd34e9e357065f64bcdc0db08dee784b0e9546f">Arbitrary-sized integers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3ac0b432ae8ef7e459dd53932e3c9e6b0b41c72f">Bitshift operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1fa5396c6e87cb33660e22d3802f94a4103598d8">API Guidelines: dropFirst?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e5b4b5a84ccc28ad79f076c9f206269e41c28665">API Guidelines: dropFirst?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6c7d626874d48faecc56bfb255a8f95f85eab02a">[DRAFT]</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/0266a925705a6ed1415acb701e5b8d414c27632a">[DRAFT] Aliasing the OS X Platform Configuration Test</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/422ae62d8370d04d3271027835adc04d6899213f">API Guidelines: dropFirst?</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/903b1eb21bf9096cb1139ef099b32684cdc0a84e">Removal of dispatch_once() in Swift 3?</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/dafe353a5f58c3fe357d189d997021b6fadf03ea">[DRAFT] Enhancing the Platform Configuration Test Suite for Conditional Compilation Blocks</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/14c8a07bc41d673f0b4822372c1a1d19f1e17ed5">Compiler Warning on Unextended Classes</a>      &mdash; <em>Rehat Kathuria</em>
    </li>
    <li>
<a href="/threads/88e8811a562a93030bc20611996526e1b4059732">Bitshift operators</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/01ca086a30128f7c3ca7f96f609e95f90efa440d">Fixing Apple Framework APIs in regard to the Swift Design Guidelines</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/283ce2486d394cb8ddbaf82e6fb39c6c3998553d">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/989472fc47f4911a1930d76a4e2d42777c70f051">Normalizing operator&#39;s types</a>      &mdash; <em>J. Charles M. N.</em>
    </li>
    <li>
<a href="/threads/0703b358ff56684bfcc597d1ac5c3887ceda878c">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Patrick Pijnappel</em>
    </li>
    <li>
<a href="/threads/ed06f90159538aee51e0dedc6b6cbfa1b2cb76c5">Removal of dispatch_once() in Swift 3?</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/45f4f33e16cb2ed4e59811e123d9be7627768a40">[Pitch] String prefix operator</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/a9de01be79aaf13e503239e042e9181fd261b582">[Pitch] String prefix operator</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/9cfc3af1af903df6d9369b38c1dcbe5f0e717064">[Discussion] access control modifier inconsistency</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/d6bbee619d8ac91c66a5e5b0cd53d11232686faa">Removal of dispatch_once() in Swift 3?</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/79e0f87980fb3ca2ce2a6306f9ec1c2029436e3e">Suppress unused result warnings on try? if attempted statement does not return</a>      &mdash; <em>Jonathan Cotton</em>
    </li>
    <li>
<a href="/threads/9a29bfcb3266e75e579a3fe10471b1e4d6f5ba71">Permutations</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/04aa5d831af9467db033794d358725fa3388c7eb">Bitshift operators</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/054c7932cd518bf7e06cc1365373c3a14ee8f06a">[Pitch] Allow use of the name &quot;default&quot; for enum cases and function names</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/05e411cbfb1cfa55e307e0d7ff5d2695377e80cc">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/75d7d737c43f9b72481a7ab6a95c457f7cae395e">[swigt-evolution] [Pitch] Make NSOrderedSet behave like any other collections from Foundation</a>      &mdash; <em>Remy Demarest</em>
    </li>
    <li>
<a href="/threads/fd26f24f2d112448b74bdcf31b6d074f319d5b8b">Why hard-code octet-sized bytes?</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/4a771d09393dd5b1bd07c3c9db79bf13b6eadc2e">Bitshift operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7585f42ddb269e336998b2bdc2ef7e0a7a9d8591">Fixing modules that contain a type with the same name</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/1cd6b7ac7bdd1bc15c263546078c0b6387000d2a">generic typealias inside generic type</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/65c0f00a5a256b011cfba91185110de75f10e010">[Pitch] Allow use of the name</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/e07a1effb38335df9b23b991571ed5230e093a39">Suppress unused result warnings on try? if attempted statement does not return</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/e01f2b82f96b3469b7f238fee2db5924cf8dd3af">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/e6165554f31dde64e86ebd92e12bd122177cae1f">[Discussion] A Problem With SE-0025?</a>      &mdash; <em>Antoine Cœur</em>
    </li>
    <li>
<a href="/threads/5f4c15ca189172578bb7f00a8f35e164ef04896d">Allow a typealias to be named after the corresponding type</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/d3c6178a06e6979f2463cd083619e05a5a37baf4">[Pitch] remove(at: Set&lt;Index&gt;)</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/29894eff00bb5a92e8782394a96119b94ab557ce">[Proposal] Fix lazy filter</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f4bc7104a4d15baa825f2cc552d344161a48d82">[Proposal] Fix lazy filter</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a2987023ccf5953967461bde6ef711d088238e62">[Proposal] Remove eager `map` and `filter`</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/0bdb064d934d61d275cb8fdd953a26a53e226b87">[Proposal] Fix lazy filter</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a55c824b5b42b11bf374969486fe2a3c876d5409">[Proposal] Fix lazy filter</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/be0d1f86b9ccfd2f4ba518de6c4b14fb713e403b">[Proposal] Fix lazy filter</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/7d0ea99b1c4ff213718340aac35ca04ee672d0f0">LibDispatch : access to current queue, or queue name</a>      &mdash; <em>Jérôme Duquennoy</em>
    </li>
    <li>
<a href="/threads/02113349533a17229d1e97ecc1c8fb4feb20def9">[Proposal] Remove eager `map` and `filter`</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/2be89972f678422f699fa91598b2a0bf3dfcf5ba">An implicit return for guard</a>      &mdash; <em>Yarden Eitan</em>
    </li>
    <li>
<a href="/threads/09709cc0c8234db47652aa58ce2727b98237188f">[Proposal] Generic and `throw`ing subscripts</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/a12617b562b595d93568adf3c82ea9bd514b9ebb">Thoughts on clarity of Double and Float type names?</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/39955403560788c97db5cbe9e024019e18994f6e">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/53b62cd4bfd4437a7053f5f8bd70b301f8beb3d6">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/12da4f232a03f77e27852144901a3b19dfa7ddb3">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e4aea6285004d11232dded3f7cefd70872dac942">Prohibit invisible characters in identifier names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/74a8f1bf644dcccde1ad29a62be9437704e130a8">[Pitch] remove(at: Set&lt;Index&gt;)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3840a0a3eb6ccdfd1daae90159dba33eab1771d7">[Proposal] Make non-escaping closures the default</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e480220f964fca34c2b3ea3970cbd852971de436">State of @noescape ?</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/66201122a4981521a84e75c176f2e38418186f05">Prohibit invisible characters in identifier names</a>      &mdash; <em>João Pinheiro</em>
    </li>
    <li>
<a href="/threads/3111687b120922c427898361e55f284d533892ae">Make UUID conform to RawRepresentable</a>      &mdash; <em>Alsey Miller</em>
    </li>
    <li>
<a href="/threads/203a461b5c26269fec95f23355cff2552a154b8b">specialize a generic type in a method</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/62277aba4710bb48acc4c891eb917b46fe474c22">[SE-0088] Dispatch API names</a>      &mdash; <em>Darren Mo</em>
    </li>
    <li>
<a href="/threads/ed7c5500d12fe669c445fd3e2769ad9310dc81d9">[Discussion] File-level declarations having highest priority for shadowing</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/36cdef0bd2d561c11de56922fe4f6133a83dc87e">[Idea] Allowing definition of custom behaviors for `as` casting</a>      &mdash; <em>Yaman JAIOUCH</em>
    </li>
    <li>
<a href="/threads/093f3640afa3e795a9b7e489ff9fce27d0d2a290">the &quot;guard&quot; keyword, again</a>      &mdash; <em>Dave Yost</em>
    </li>
    <li>
<a href="/threads/a03815160b08447a2dd1180baabfa4cd2f12dd84">[Pitch] Detecting and working with Optionals from Any</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/a674e61c00d042046af02f61e870d171a01db47f">Placeholder in UITextView as UITextField</a>      &mdash; <em>Sunil Sharma</em>
    </li>
    <li>
<a href="/threads/2da62d92387124aa4d56c1a697fec39757fc45ec">Thoughts on replacing \() with $() or some other symbol</a>      &mdash; <em>Kenny Wyland</em>
    </li>
    <li>
<a href="/threads/4ae6cdc804b6b24ce4c59b9e86dda2d7b385ee21">[Draft] Apply -ed/-ing rule to core functional methods (e.g. filter =&gt; filtered)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a14e5753121bb00643b0c75754cfffa94f726d28">[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d3c113aadb66b9c9a9504dbd99b2f7e2592b47ec">Thoughts on replacing \() with $() or some other symbol</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/10770943daab9cc4e369d8dc22820cb9fe06fab6">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3b249440e2acbe77e55a55d26350f7ba370e2743">Thoughts on replacing \() with $() or some other symbol</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ce83b30f0755e88f7052a4290768a7ba8dcde96e">[Review] SE-0102: Remove &lt;at&gt; noreturn attribute and introduce an empty NoReturn type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8d8f587e9952dcfd8467d3a3928ab23e6d398e78">[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/b9c53b101814f367373fe02349377854b8c77f36">[Discussion] func/closure parameters and tuples</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/6313f45e867b1b15942f53cd295a00e9e79a5f65">IUO in Swift 3.0</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/df09315197e594dbce6f765877d97a47e4a35f07">Swift 3 vs &quot;additive&quot; proposals</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/d50316224ade0dc6a349fd643571177f2005178b">[Pitch] Remove transparent bridging between Swift strings and char *</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/0ef24ec24e0181c16af49a20d5a5a3282779a94d">viewWill/DidAppear and viewWill/DidDisappear should have &quot;animated&quot; argument label (Victor Gao)</a>      &mdash; <em>Victor Gao</em>
    </li>
    <li>
<a href="/threads/270342ffbe8012e449c4a1fbc46904af96f90d03">viewWill/DidAppear and viewWill/DidDisappear should have &quot;animated&quot; argument label (Victor Gao)</a>      &mdash; <em>Victor Gao</em>
    </li>
    <li>
<a href="/threads/944a0a09365de3fb1fa2370f7d6f231f26d167c6">[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4eada0dedd8aeee41892b2b15a09517bb559993d">[Discussion] Design guideline rule for `:`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7944e93757eec606901b29fb8956bc1f04064a8b">Swift *less* safe than C for imported API that uses opaque struct pointers</a>      &mdash; <em>Timothy J. Wood</em>
    </li>
    <li>
<a href="/threads/b0da7eb2ae695feac5f6862766bcb305194048d7">Revisiting SE-0041 Names</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/38f65875e98eec8f368762da8220de0b30b48b9d">[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bd6712aa1eebff9a18d44b68261a8c70723d1c55">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>David Waite</em>
    </li>
    <li>
<a href="/threads/f3a6b6e1fb17a4790210adcea406b4a9824e6a68">[Review] SE-0102: Remove  &lt;at&gt; noreturn	attribute	and introduce an empty NoReturn type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ee71bca4aaa620db1dd024381c5e1edd77d272b3">[Discussion] Design guideline rule for `:`</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/ac05573b985864661c6323da3a954336039809b4">Revisiting SE-0041 Names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f98c887ef5ff884a2ad6d0169a1722f7693d65e">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/efc8369a30bf76bafbf67bb585219d0d98907a66">SE-0103: Make non-escaping closures the default</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/1e2ec892a3d59e7504f8104d5c1fc882efc4bd82">Add an implicit return nil if function reaches end before return explicitly called</a>      &mdash; <em>Logan Sease</em>
    </li>
    <li>
<a href="/threads/b7d7d2134e8b722426b82a93c098d32d59fea793">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9db05d3d6f5962a88ddd990186e58b6806f3d708">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/912d6d9e70072b7a140d77bbd3cf489894fdfef5">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ec2af5e84ebb6d32e15d7445781387822b6d2949">Revisiting SE-0041 Names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7e4100f1424ea20248ef192da823869abfa7077c">Partial list of open Swift 3 design topics</a>      &mdash; <em>Chris Lattner</em>
    </li>
    <li>
<a href="/threads/d5c4a4efef8887d5c34fe44ded4ce2fcf79af427">[PITCH] WatchKit API Design Change to use properties instead of methods to set properties</a>      &mdash; <em>michie.swift at riffic.io</em>
    </li>
    <li>
<a href="/threads/96adebf85fb0560eaf3a59070fa9c1789437b7c1">[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/1e313e0660b64048e7ee30433c9f46bec7ade94b">Add an implicit return nil if function reaches end before return explicitly called</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/2564ed20c3db57d007a3c8c354f97aab29ca66c2">[Pitch] Add Null struct to Foundation</a>      &mdash; <em>Alsey Miller</em>
    </li>
    <li>
<a href="/threads/9239d15c74fc63cf1bb762a99c912c0c399e47a2">[Draft] Rationalizing Sequence end-operation names</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/f941a0d2274399b9e7e95df9532edfb3ffc94ba7">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/c70723b57d0350ef635c28d7cb05cadd84e67416">[Review] SE-0105: Removing Where Clauses from For-In Loops</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/ae6ebb6d2f690274bab160f82299436cee569204">final class performance</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/b41a2decb114101caccc8d449bb972312b9600a4">[Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Matthew Johnson</em>
    </li>
    <li>
<a href="/threads/f30cf90d9c7ddfcdbf8c523ab8b7e733fc995c22">[Review] SE-0105: Removing Where Clauses from For-In Loops</a>      &mdash; <em>Denis Nikitenko</em>
    </li>
    <li>
<a href="/threads/7654e914bbddb569a7444fedebe3c83131531a27">modifying Array&lt;Element&gt; to return Element! when subscripted</a>      &mdash; <em>Pranjal Satija</em>
    </li>
    <li>
<a href="/threads/6d0f77c7164c7c5dbb057b089d3c4605861c9350">Arrays Returning Optionals instead of Index Out of Bounds</a>      &mdash; <em>Andreas Ley</em>
    </li>
    <li>
<a href="/threads/2786311afbc29ec44142d8e6ec58cace561435b5">[Pitch] Make the formal type of &#39;self&#39; consistent in class methods</a>      &mdash; <em>Slava Pestov</em>
    </li>
    <li>
<a href="/threads/d7566d785c395e6c986dda918435085368f1da92">[Pitch] Simpler interpretation of a reference to a generic type with no arguments</a>      &mdash; <em>Slava Pestov</em>
    </li>
    <li>
<a href="/threads/ce01561b7d4db3d77e6e5d389fa46181304172f3">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/2adaeca7a57cc3e1bdf228c12a3a2cfca70b166e">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a200b4a7a0e7ab3e39cbfda7644a769936889625">Shorthand unwrap proposal</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/114c425b7dcbfedf5e88935708d7a0a37fec5236">[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</a>      &mdash; <em>Denis Nikitenko</em>
    </li>
    <li>
<a href="/threads/26db616b820daa2944c4c14842157fe952c61614">SE-0105: Removing Where Clauses from For-In Loops</a>      &mdash; <em>William Shipley</em>
    </li>
    <li>
<a href="/threads/566f5b9bb608888ce92ada63faefa7009fb9d2b3">[Draft] UnsafeRawPointer API</a>      &mdash; <em>Andrew Trick</em>
    </li>
    <li>
<a href="/threads/4dfbdc089887e67cbce261d901e2d697acc50575">[Review] SE-0105: Removing Where Clauses from For-In Loops</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ea8e224d4fe15c4987fdea1ae28478396d455e4e">[Draft] Rationalizing Sequence end-operation names</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/11c048baea71cb1c2b4354f5e2db4c6a34f54028">[Returned for revision] SE-0077: Improved	operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/08e378c74da3771d294d08d5dde26020b831f207">Shorthand unwrap proposal</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/93cb494633830b9abc603874bca42e6234771cb0">Shorthand unwrap proposal</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/916bb8a1b0aa40fc6039e4302fe20082b7c227de">Shorthand unwrap proposal</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5449a126b27fa7810804ffb127a092e0f927aacc">[Pitch] Remove destructive consumption from	Sequence</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/8829cae8bfb7325f537fdfe99a7431fa9dfaadda">[Pitch] Simpler interpretation of a reference to a generic type with no arguments</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/2013b496079079c07ee312dc0c6dad1d552cbd5c">Shorthand unwrap proposal</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/e066559182d8b9c31fdcef81910a6382c729240c">[Proposal] Remove Boolean</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4600f335aea13181405a7a56814ddbcf5484b537">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/b9133c31c273476ad8528460ad729424b798a2b3">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/84ac737fded1b7995798658aa36e48f15032dacf">operator or wrapper for NSLocalizedString</a>      &mdash; <em>Kwanghoon Choi</em>
    </li>
    <li>
<a href="/threads/5a6364c806666691ff4801b4cbacd578ebf4783b">[Returned for revision] SE-0077:	Improved	operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/f3c5669f8bc9f16d12b8555daa03e66f1f8117ea">Having reference semantics counterpart of value types in an easier way</a>      &mdash; <em>Amir Abbas Mousavian</em>
    </li>
    <li>
<a href="/threads/2c040b313af91ff68264b6f86a2c2c9b1fa31e41">Collection index complexity and data structures</a>      &mdash; <em>David Waite</em>
    </li>
    <li>
<a href="/threads/d526b46235c6070618c214a5453c1b532fc249b3">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/db6574421b302adc798e865d851581e43e099c2e">[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a77094fc010c80a6f7c10cb54aa7a8fb9ed44b32">Fwd: [Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>L. Mihalkovic</em>
    </li>
    <li>
<a href="/threads/849e496acd678d19c378cf9ab341402878971f6c">Fw: Re: [Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/b3ae55246dd71f23a4792e13fc59b7e21568869e">[Pitch] Remove type inference for associated types</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/e80eff9d2ffe27fe5a13cbe0bcfd0277e302355c">[Proposal] Revising access modifiers on extensions</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/c05acdef0a03880fdd7b8c219dfa6fea491ae674">[Proposal] Add floor() and ceiling() functions to FloatingPoint</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/f549504c0d464d4cab9bbc32ebccdaeaf972c617">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Nicola Salmoria</em>
    </li>
    <li>
<a href="/threads/bdb3778b5fb0de99f4f1891f35af4831cde80a52">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/9bc4a3ee37682659a4619e17b6cee87217a17dc5">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/483cc1eaf41584aa1cb97a902ddc02981bc7709e">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/38816361b5862b0ccdb89e1d35fc56c62355342b">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Spromicky</em>
    </li>
    <li>
<a href="/threads/e456cd4dd93005b5cfb4cc3b9d91e022018cdd14">[Proposal] Disallow implicit conversion between function/closure with a list of parameters and with tuple parameter. Remove function type inconsistency.</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/a7dcf290e9dd7178a2aa2eb606a9173429a43e2a">[Returned for revision] SE-0077: Improved	operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/bf380d11498b1bd073428cbadcb6afc1f8d6bf9f">BigDecimal functionalities or modulus support for NSDecimalNumber</a>      &mdash; <em>Andrea Leganza</em>
    </li>
    <li>
<a href="/threads/2962d564d96804bff51dcf35f0771f2f63b05ba7">Fixed-sized arrays</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/a27880b175671480feaa04eaaf5f58b92f3af53d">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/99eb00b025ae1976cedc756a7f569d7738220775">An upcoming proposal for simplifying leak free, safe closures.</a>      &mdash; <em>Christopher Kornher</em>
    </li>
    <li>
<a href="/threads/9e59e34a454ad1d4715cbc6399e01eb1d71072e4">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/760899824f9a2ad201701b3119ca452b1dbc2427">An upcoming proposal for simplifying leak free, safe closures.</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/c18f4846c4bc4da65f0e049232152996713aa6be">Revisiting SE-0041 Names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5a66e07e4a819c5bdf72d9ff67bb53aaacb0fe14">Revisiting SE-0041 Names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/75a9cb1fc0ea2b4c1d2fe606a3e86407f9ac9668">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/97b2805ca215b66f74d934caa33c288de056331f">[Proposal draft] NSError bridging</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/f49799b402f97044acef2d25136efc7999d2015f">[Idea] Syntactic sugar for using methods as functions</a>      &mdash; <em>admin at wheerd.de</em>
    </li>
    <li>
<a href="/threads/461e4fa1ba0f483f9f2689a8b16ca5e0ef12a582">[Discussion] Terms of Art Swiftification</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2625f065051e35fc7e5d157e055f44fdc49e5194">[Pitch] Remove type inference for associated types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6cf462c62e4897d8b9d2e0934849c9022d8e0ec6">[discussion] Change the behavior of @objc on a class?</a>      &mdash; <em>Jordan Rose</em>
    </li>
    <li>
<a href="/threads/2a966a2304b770ab704722069b2e6b561a280e32">[Discussion] Terms of Art Swiftification</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/88d26bc85de6f558f63fefe2ae430904b6b03e55">[discussion] Change the behavior of @objc on a class?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/62740d5366e642e20b25d97d4701bd59823d9e5b">Revisiting SE-0041 Names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/941889bf8bf81cacca78a8a844fc598dc1fef9a3">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/feb6422f901be38e69caa0da5ae6ca4453f5d9b5">Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8255d58f77c5f540ea56055bf450280d44104781">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0955ba742fa4a703469989328717cc600bdc09f5">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9b0ab1f650e2bdeb45e20d9f0c7c3e2dce2fe1de">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4cd8540a762b6d72d4be93622dd99aac3d557a28">[Idea] Syntactic sugar for using methods as	functions</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e06562b7445eddb89e8687da2401a21215e67b34">[Question] Grand Renaming and Delegate/Datasource protocols !</a>      &mdash; <em>Jerome ALVES</em>
    </li>
    <li>
<a href="/threads/c0a2cb557d3bd196c25fabd3f49175ddf480d0e5">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/77c073e700759adc31e9898f8ca29923a736fd87">[Idea] Syntactic sugar for using methods	as	functions</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/38d9a02d5f61aaa4b332d6ee5d193f1370627b8b">[Proposal] Sealed classes by default</a>      &mdash; <em>Javier Soto</em>
    </li>
    <li>
<a href="/threads/9d6ca2e9825dfe9a61707551dfff9f1cd0adfd01">Optionals and nil in Switch statement</a>      &mdash; <em>Lucas Jordan</em>
    </li>
    <li>
<a href="/threads/4b84b0e488249886e74e1f724c41d79b14c5f350">[Returned for revision] SE-0077: Improved operator declarations</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7db31662a783c6bcb00a9a31289f1f9665ad3d52">modifying Array&lt;Element&gt; to return Element! when subscripted</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bee7bdae2a93af5df9bab3f61918031cf75ea357">[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a316eb27e91f71493def38904d0f0e4bcbc64d4a">[Pitch] Simpler interpretation of a reference to a generic type with no arguments</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6ae6c3efdbbb54b067111c6206461899473a289c">Shorthand unwrap proposal</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2210cf6ff2502e86131c69c569204e322077b6b0">[Proposal] Sealed classes by default</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4db472c02cbb539ef3b203176c0ed6f884afc3b7">[Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a97ee4eb2465f362575b58a3219af0de2b3ae38b">Collection index complexity and data structures</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dab76a794f030a734a11f6969ab72c85d474496b">Setter methods for vars</a>      &mdash; <em>Austin Feight</em>
    </li>
    <li>
<a href="/threads/8abc9f54c5595fcc880b5baa9c26af14c1d24aa3">[Pitch] Changing the behavior of Subsequences of String Views</a>      &mdash; <em>Loïc Lecrenier</em>
    </li>
    <li>
<a href="/threads/80b3ad432b5fdd5b47c14f5b60b7c7108920a7ae">Request for quickie proposal and review</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f605963fbd4de1ec833ebda9a7f514ebbcaf1f7d">[Returned for revision] SE-0077: Improved	operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/b849320f4bbb7e7460f425511e6024bb695c1080">Fix or remove Swift.min and Swift.max?</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/303d94553071afe945cd7765e25e25746c6a4024">Take 2: Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/322f1f70fc31f912d9485fa167f74ce253d58b87">[Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/036cb3693cb8777c4d8db93b0e5fac37bc950ca0">[Review] SE-0109: Remove the Boolean protocol</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/9de77264c5ee77339114c336ccb70f906779d01f">[Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a3aa1689b0e79fa1bfcfb8da2b3dd180bb3be0ae">[Pitch] Remove type inference for associated types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1e6d1e5ec8964c28b04b7b9be3d12f87bbfc821d">[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7be473e761ec3338b9b127eb2cb120a1dd99e661">[discussion] Fixing Protocols with Self or Associated Type Requirements</a>      &mdash; <em>Riley Testut</em>
    </li>
    <li>
<a href="/threads/7755cdd0c90021ab0d176ec0ee3c6e2d540f4176">[Review] SE-0107: UnsafeRawPointer API</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/56da6b6ed57fe47eaec662c039aaf1e50745fc36">[DRAFT] Enhancing the Platform Configuration Test Suite for Conditional Compilation Blocks</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/4dc628673ce11701a5476fdd2d096b7f6180a440">Extend FloatingPoint with tau!</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/47e9746a55c7f681aff051a68e3c9977cf9d1fb7">Take 2: Stdlib closure argument labels and	parameter names</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/ba32a11efbdfc3b72fba74341a1f4c153780acbd">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>Spromicky</em>
    </li>
    <li>
<a href="/threads/e465e35ca1181e166ec1103b66aea27f87145211">[Pitch] Change custom operator rules to reserve operators for future use?</a>      &mdash; <em>Austin Zheng</em>
    </li>
    <li>
<a href="/threads/731a2de04879235288abbd75e5472a1eba9a6d6d">[Post Swift 3] [Proposal] Introducing `group` mechanism</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/2e676838c1eb712ea64c48780c7bd943f7a2183b">[Pitch] Make NSNotification names a protocol like ErrorProtocol</a>      &mdash; <em>Kenny Leung</em>
    </li>
    <li>
<a href="/threads/bc20728820a0f9bb365a7bd1ab339b78498b2830">Notification.Name</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/8e11709e55bb33ecb7b17bf44c202b22a892c807">Extend FloatingPoint with tau!</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/3b8ed17f6bdcd13f2a6483ec4c5814cdb4fde154">[Pitch] Change custom operator rules to reserve operators for future use?</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/4595013b3d220d82f29027353d8221c0c8a75a72">[Review] SE-0077 v2: Improved operator	declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/795e9e78188acd83f0d19817a06f04a7c0a99317">Re : [Post Swift 3] [Proposal] Introducing `group` mechanism</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/d5d7b4ca34ca1a204a47619a21db3959d0f2acec">[Review] SE-0077 v2: Improved	operator	declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/0494ec2d396c5b01b0d9037cafcf66850d1a2e7d">Objective-C’s @compatibility_alias =&gt; Swift’s typealias?</a>      &mdash; <em>Ayaka Nonaka</em>
    </li>
    <li>
<a href="/threads/aebd43833e171efe57094f350c42e60c0f53a83b">Allowing enum extensions to also be able to expand case options</a>      &mdash; <em>Edward Valentini</em>
    </li>
    <li>
<a href="/threads/13a06e8b6f8dae223c4f6ff99423613735347978">[Proposal] Remove force unwrapping in function signature.</a>      &mdash; <em>J.E. Schotsman</em>
    </li>
    <li>
<a href="/threads/2b498bbb5928fe2f618d047151a59d21fb056d97">Allowing enum extensions to also be able to	expand case options</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/a2a9d9cb2ba6c21977dca58b2808fdefea55599b">[Probe] The automatically generated init for structs</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/d4585dbcd616e83fe738fc50afdc8b26141000b8">[Review] SE-0111: Remove type system significance of function argument labels</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/50d48ee6bdda9e20c798416b4c04ddb471e6c102">[Review] SE-0113: Add integral rounding functions to FloatingPoint</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/7292918c41bb75a5659327efb064f8baba01668c">[Proposal] Add floor() and ceiling() functions to FloatingPoint</a>      &mdash; <em>Björn Forster</em>
    </li>
    <li>
<a href="/threads/4773fecaac9feb8f137e11b835fc413ba0779a42">[Pitch] Self.withoutSpecialization</a>      &mdash; <em>T.J. Usiyan</em>
    </li>
    <li>
<a href="/threads/2b4aa9a4f081aac47792ad3fbf21bdbb1a7deec3">renaming CustomStringConvertible</a>      &mdash; <em>Eric Habberstad</em>
    </li>
    <li>
<a href="/threads/6710cefa29e0ea4c5a2cf17d24e707274b8360b6">Overrides in class extensions</a>      &mdash; <em>Rudolf Adamkovič</em>
    </li>
    <li>
<a href="/threads/25cfeb149e964e0fb177000ecc651656de48d42e">[Review] SE-0113: Add integral rounding functions to FloatingPoint</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/0304cf01aab83fd11aec31696d7fdbbcd152d22b">Besides pi, include also e as a builtin mathematical constant into floats</a>      &mdash; <em>Björn Forster</em>
    </li>
    <li>
<a href="/threads/d865aa840668df695be0adfdd77a143bb251e0df">Include sqrt and remainder into FloatingPoint protocol as built in functions as required by IEEE754</a>      &mdash; <em>Björn Forster</em>
    </li>
    <li>
<a href="/threads/0b911e5436c47af2b5ccd5490cdb82b82269e374">[Discussion] Rename BitwiseOperations protocol</a>      &mdash; <em>Riley Testut</em>
    </li>
    <li>
<a href="/threads/7dfe00b6d13d2ae18211dead736aa33509dff2a9">Variadics through tuples</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/175a2f03f217281147fc9227023c42548c54bff8">[Discussion] Can we make `.Type` Hashable?</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/2444165e9eda8e46b0eace9d045fd268eccc1005">[Draft] Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e8e3b01ef27b11ba6d42e064d528562e77e9037c">Fwd: [Draft] Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/673117d14752923aa9ed219affb843d4daa16c0a">[Pitch] Remove destructive consumption from Sequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3dc378d32c5228c1994b010a687471883b63c82c">[Review] SE-0077 v2: Improved	operator	declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/273eef1b7f870a2e36ab26ab00926a2e4712d5d3">[Review] SE-0077 v2: Improved operator declarations</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/e323ddc4bfb9c5f13842a0bcafd53a8e62654226">[Pitch] Importing Objective-C &#39;id&#39; as Swift &#39;Any&#39;</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/52730a8cd198ed7f73fc2a1fa32dbbb1dff7c050">[Proposal Draft] Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3a6f7acc9cbb5f91fc6e63bdb2418642eaa94162">Take 2: Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e24230f14b0d6c95946fe8cea2bf8fad6ddaca87">Take 2: Stdlib closure argument labels and parameter names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2b35fd9883e699f4742d49c6a8fd14424c021760">[Proposal] Union Type</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/5176fe268e534e3b9f088f30f06cc23d4f90e44a">[Review] SE-0104: Protocol-oriented integers</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5ab366bd15b06849df4857236ef763f170e8f383">[Discussion] Rename BitwiseOperations protocol</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c942474b7e9b297756ebb45f64c7cae0a6b184ae">renaming CustomStringConvertible</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9b6ee38c4a450dd74c9ca3a028700cd4281d6802">Proposal: Remove the underscore and `in` for `for` loop</a>      &mdash; <em>Diego Barros</em>
    </li>
    <li>
<a href="/threads/fdeef1c96043b314cf54adbd4afefc5526a380bf">[apple/swift-evolution] Proposal: Union Type</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/206e419b0410ea7930d6d79e34a648bd0e9e746a">[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/0dec886ffed275da0e8eb7766c348cbac7ccccb1">[Pitch] Importing Objective-C &#39;id&#39; as Swift &#39;Any&#39;</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/70570ab298d548edd7c08689d1ce88206b8550f5">Bridging Python Packages to Swift</a>      &mdash; <em>Muhammad Tahir Vali</em>
    </li>
    <li>
<a href="/threads/cfa5f3c1c9923a4daf585d6c48bab2f58bd70a93">[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</a>      &mdash; <em>Daniel Duan</em>
    </li>
    <li>
<a href="/threads/93e62d190f72f5b626bb179fbaa8db55de00071e">Fwd: [Proposal] Union Type</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/4ec64db3972ca990fd313763db940dd233383c72">[Review] SE-0111: Remove type system significance of function argument labels</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/c425cf1b6ab2d1b35ecba2e0f2398aecd2ca2de3">[swift-evolution-announce] [Review] SE-0111: Remove type system significance of function argument labels</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/c9d179ec58cc95bc7c548a0db65d7b42f62c21a0">[Review] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/06066fee5246cb01d142912e1e49d63cd5a230a3">[Review] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fbb3e4c1010a775b647322f394cb7c387cc637e1">[Pitch] Self.withoutSpecialization</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6f8d3af1f4e046d49766e87296b53edf95dece4c">[Review] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/65f3df9f16b305640a89db4128098dff48cea78e">[Discussion] Static curried versions for variables and constants.</a>      &mdash; <em>Nikita Leonov</em>
    </li>
    <li>
<a href="/threads/f295810eab9c6828d5061a2308baaa1777bd6c99">[Review] SE-0115: Rename Literal Syntax	Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/abe1f15a8c9b1f4958f2e3c2f2de1acc7b478b5d">Proposal: Remove the underscore and `in`for	`for` loop</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/5193a716fd6360d4618af4fad9e9f41ccd54f73e">[Review] SE-0115: Rename Literal Syntax	Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/dd8351c7b92136dfef3cbc0ba7bcd9f879a0a41e">[Review] SE-0115: Rename Literal	Syntax	Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/bab270f28115582a01bec76990705368dfa2eb4d">[Review] SE-0115: Rename Literal Syntax	Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/c98be1de9ea9b4b251e0d0c0a4e9a60044952f05">[Review] SE-0115: Rename	Literal	Syntax	Protocols</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a05773e18c43229dd4f7c0e3ffa4ba7c95f4f461">[Review] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bba452094504f68d6a67650adff5c9a21b048660">Random ideas: goto, loop, multiple dispatch, explicit aliasing</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/04836ef46545f84d0ef35704e54411daa0b72cf4">[Review] SE-0112: Improved NSError Bridging</a>      &mdash; <em>Mohsen Ramezanpoor</em>
    </li>
    <li>
<a href="/threads/5d561d32397cc9557361341f7c748cfef780bba7">[Pre-proposal] Fix function type grammar</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/80dcbc1a1358a3af479edb31743dd52604e06044">[Pre-proposal] Fix function type grammar</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/84f2d4e063b42f8c975b98e2121ca0dcfcb869f0">Bit arrays</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/7226c9aa4032f6bba6b1fec87be7e6029b10ce82">[Pre-proposal] Fix function type grammar</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4e41b9337643e3fa991f881f3c0332e930f52390">[Discussion] Zero-element tuple glitch</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/63bf880b0b928e3999c3df7f9a462776f0ec1401">[Discussion] Determining argument count from context</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a7b9e40529276ac13ed43f91610da4470fb24690">[Idea] Large integer literals</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/346765a0445dbb4628a624c0a17d7bdf20e0c537">[Pre-proposal] Fix function type grammar</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/a9764672eb13cafedaf40986d53d4776cbf9f838">[Discussion] Zero-element tuple glitch</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/4d0b7a35b65f74a5d19e08df4f41a56d7487a461">Multiple protocols variable - automatic class-type inference</a>      &mdash; <em>Jakub Skotnicki</em>
    </li>
    <li>
<a href="/threads/1e72d92d7132daeb7bf76e199e28cd0663002d0a">Proposal: Deprecate optionals in string interpolation</a>      &mdash; <em>David Beck</em>
    </li>
    <li>
<a href="/threads/9aa34b5dfb95e0af4165d7bf4962784d566bc825">Public classes with private superclass</a>      &mdash; <em>Tino Heth</em>
    </li>
    <li>
<a href="/threads/2170672e4710c9ac2dba69e6d2111adf003361a8">[Review] SE-0107: UnsafeRawPointer API (initialize:with:)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f902a8fe3c0cbef2cb95df292dfecedfb8d167f3">[Proposal] Disallow implicit conversion between function/closure with a list of parameters and with tuple parameter. Remove function type inconsistency.</a>      &mdash; <em>Greg Lutz</em>
    </li>
    <li>
<a href="/threads/826830136e1d20a01c4f6c742734b5e3a2a63c99">[Review] SE-0107: UnsafeRawPointer API (binding memory to type)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5ca9f5ad31573f1d7b148ad5a12426ac35073b0e">[Idea] Modification to Mirror struct to support dynamic reference cycle detection</a>      &mdash; <em>Uri Brecher</em>
    </li>
    <li>
<a href="/threads/2a557d8a3ac65cd9259539384188aee55f9ebcef">Fix or remove Swift.min and Swift.max?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/272169d16cfb0ba96b247ce2a3d31bdf6fcb92e7">[Review] SE-0107: UnsafeRawPointer API &quot;initialize(from:forwardToCount:)&quot;</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0e10077ebd921ebe63afc077dc3f352c0c501ffc">Class mutation model and value-constrained protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d5db1031639a1823105e5c749cacd175bbb76fb0">[Draft] Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/52886a893494804d1d55a6b7a0f244cadca27071">Class mutation model and value-constrained protocols</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/6c6cec5fb75770c29cfd539626bdc491455a049b">[swift-evolution-announce] [Review] SE-0107: UnsafeRawPointer API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/be91881f455a4dd4350e9fec99c3e8ad2e0cf6ca">[swift-evolution-announce] [Review] SE-0107: UnsafeRawPointer API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0976b1ac4af72af8828c96d5a5ea9b7c9becca90">Separating the finite-vs-infinite distinction from single-vs-multi-pass</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/45a4c58cb8b868652dd2d941fcd7964274f839f2">Open Issues Affecting Standard Library API Stability</a>      &mdash; <em>Dmitri Gribenko</em>
    </li>
    <li>
<a href="/threads/e0b69b9d886c8b09ae911226f4b34e17b1cfbbd7">Dropping Comparable requirement for indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7773dd74be0e9584998b3fa248a910c19affccb7">[Draft] Fix the Collection Partition API</a>      &mdash; <em>Nate Cook</em>
    </li>
    <li>
<a href="/threads/0134a32545ad330542ce8927ac3f225decd4ff9f">[Discussion] Parentheses</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/723906a93a4d262dca0c3b66a5ab7670658443b8">Proposal to copy C++&#39;s mismatch</a>      &mdash; <em>Daryle Walker</em>
    </li>
    <li>
<a href="/threads/6d35af863a7dd2353abb51a06408e5f2ad66db02">[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/e6ee91c8868706009749ffc80fd6ddd7229b11f9">[Review] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/727e205dad8591cb0fd10bec25033092ad460ea7">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/eb0f08c6fdd87e3af3e2eba470c819eca5321e83">[Draft] Fix the Collection Partition API</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6063fc649a0d8f19b4d6da48d3ab8f3fcbf56864">[Review] SE-0118: Closure Parameter Names and Labels</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/76d36ecf8f6b003d1976bf9b1d7c0a1aa51c0aad">Open Issues Affecting Standard Library API Stability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bb4e5a3e515d44745be74783d569efd79feef273">Dropping Comparable requirement for indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4f9215726da7f091d466ec3154bbc779f2fad5d3">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/bcc10f762a6a38d8f61578a487e406fd838e5097">Seriously! Freeze Swift For Two Years After Release 3.0 !</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/4496a56b7f18b06831ae18fd26f6c1780b72b002">[swift-evolution-announce] [Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/8d131fa8b77ba05b5ed7117f16f9b48961cea740">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Jakub Suder</em>
    </li>
    <li>
<a href="/threads/7b8754dd9109593f7c1536d6deb311905f7a4e3c">[Pitch] Removing the empty initialiser requirement from RangeReplaceableCollection</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5f97dc78f958a045071561a7d1311835455569f1">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>David Beck</em>
    </li>
    <li>
<a href="/threads/6630c23df059095894a18e9d37e5f7ca0dd4ea9f">Fwd: [swift-evolution-announce] [Accepted] SE-0111: Remove type system significance of function argument labels</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d187af1f3f4a4aa763f038c2fc9a634763c39334">[Idea] Deferable type for swift and smaller defer scope</a>      &mdash; <em>Kwanghoon Choi</em>
    </li>
    <li>
<a href="/threads/160d1ceac1ab2e3076dab52307c34530b962b891">[swift-evolution-announce] [Accepted] SE-0111: Remove type system significance of function argument labels</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/942ff031618587c09b6c579f70190ce9f718ac89">[Review #2] SE-0091: Improving operator requirements in protocols</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/8ca1788d1a4433634cc7a473c1440ceceb5e2145">[Idea] Wrap switch cases in curly braces</a>      &mdash; <em>G B</em>
    </li>
    <li>
<a href="/threads/a5581d9fd39fb7fe93e647bca0721976c23a13a4">Optional comparison operators</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/5371d9a97a04d6f777499ae229cab3353e43600f">[Discussion][Pre-Proposal] diverges/converges methods for Collection</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e95b4b95004aef838eb5ab2e180f605ea44caee6">Dropping Comparable requirement for indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1845a81640614aecb27322477d765be9ea7140d5">Dropping Comparable requirement for indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/92b7120eaab003c978bf4bad24c8df24068df468">[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/38a1ff66d01a8650bab4e4b8253ec32f527fe266">[Idea] Wrap switch cases in curly braces</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/c9322221c599f7e506acf1fa0183aefe5c08d5bc">[Idea] Wrap switch cases in curly braces</a>      &mdash; <em>Roth Michaels</em>
    </li>
    <li>
<a href="/threads/cab3f4c358d093ce15e92a1a40a9dc971f31bac0">Proposal: SwiftPM Target Access Control</a>      &mdash; <em>Tanner Nelson</em>
    </li>
    <li>
<a href="/threads/98289c0961b26d9eb3db60632172c716fce4bc87">[Pitch] Removing the empty initialiser requirement from RangeReplaceableCollection</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c6df150630751ae33ac05677a7af97b61fd2e307">[Pitch] Removing the empty initialiser requirement from RangeReplaceableCollection</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fa7b45eddd0977c193cc9e05644a4184af43f718">[Discussion] &quot;try&quot; for function that does not throw</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/41efd8c26ed2a5023c244f2dc59ca5f38cca08a9">[Proposal] Variadics as Attribute</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/f15ceb54ebd0b3c6fcdd53b0b8003ff77eddd46c">[Accepted] SE-0111: Remove type system	significance of function argument labels</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/6e70c58a794a19428d1a0ed2a6191fb8b6d1e6e6">[Review] SE-0118: Closure Parameter Names and Labels</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ba3caf1dc7539b356a6336cbb1d4d3d7b7ceb562">[Discussion] Allow injection of `didSet` and `willSet`</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/02d128948d63ae4a526d5961559c6a086dbac993">[Review] SE-0117: Default classes to be	non-subclassable publicly</a>      &mdash; <em>Thorsten Seitz</em>
    </li>
    <li>
<a href="/threads/9e5e8944fc09d8df61e84595f80e3c6bd4c222e9">Dropping Comparable requirement for indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/17c02c3b7cc7a92b4fab0c90b950d40cba5599a8">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/a100356a713d79055dacc69ef5b646e8edff341e">[Proposal] Variadics as Attribute</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/1796c6420270ed2a7f2b12cfe715264ba665bb16">[Discussion] Seal `T.Type` into `Type&lt;T&gt;`</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/8bad770a75964b1fa68bd7f9de2af765ac06c6e0">Addition of a standardError OutputStream</a>      &mdash; <em>Saagar Jha</em>
    </li>
    <li>
<a href="/threads/eb3b795cc267fff7ea73bdc131452f1174b26747">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/f075b0b55560f0dee217e85d5ef7d94613d32368">Change subscripts to use colons</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/b0b702a6b59b000c9e80f4dfcf6103e199b0d7fe">Swift-based Metal Shading Language</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/1efe9054aa7452252749c2d438fdc20c4c6357c4">[swift-evolution-announce] [Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/0ae7733696ab3a26fff9a5b518f5d73de47ce7e7">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/438427b8f4ecd50fff67a9faf96479775dff41ce">Swift-based Metal Shading Language</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/73eab0c27311efc603e861c67e70ff143e9c5edf">Swift-based Metal Shading Language</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/e4449eae010207ea8a00dd710e00372eef8e6670">Swift-based Metal Shading Language</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/e42206de4e7c8ec3abcb1736300067ec5d641c22">[Pitch] Introduce continue to switch statements</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/c6f165668d61abc7f0b8dbb449faafe223237d22">[Proposal] Allow Static Function Properties to Satisfy Static Function Protocol Requirements</a>      &mdash; <em>Jasdev Singh</em>
    </li>
    <li>
<a href="/threads/ccbf03f5cb3180222a9ebf9abd534ce67688f2de">[Pitch] Extending Swift Literals</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/1c149fbb51503f529d569d3a274d2e3ef5fd0e40">[Idea] Wrap switch cases in curly braces</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/83957c9ebcd73acf8b5b7d24fa527b33a9671937">[meta] additional input during public reviews</a>      &mdash; <em>Jose Cheyo Jimenez</em>
    </li>
    <li>
<a href="/threads/6af1de92492c8ee0742e7f96ab637193ba3fd22d">[Pitch] Removing the empty initialiser requirement from RangeReplaceableCollection</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/72b6171a82e438258ca2a00df3a1995b64b4fd2f">Addition of a standardError OutputStream</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/50ea0b8824f5b9e7479774c4fd73db63a8251f05">[Proposal] Allow Static Function Properties to Satisfy Static Function Protocol Requirements</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4b71bc849eb8f2b4bde85e0b4b99dc9485c984dd">[Review] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Kurt Werle</em>
    </li>
    <li>
<a href="/threads/01e1c2c1a1e586581d6b7dedcd26654e5543c4bf">[pitch] remove global sqrt&lt;T: FloatingPoint&gt;</a>      &mdash; <em>Stephen Canon</em>
    </li>
    <li>
<a href="/threads/b22dc6983d53777304eba1bc90fccf1b1cbf2158">[Pitch] Require &quot;infix&quot; for infix operator function declarations</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/ac25f67024b053bc4d751cf285a88c017230e532">[Pitch] Removing the empty initialiser requirement from RangeReplaceableCollection</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/3436ae91346790de11059d42d68b4b2e3537e638">[Pitch] Extending Swift Literals</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/b922eac8ca6648c3abfbb1f4d4371862970ef6c2">Change subscripts to use colons</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/0786c8f5e551019490f87b78667e90b0c573bd4f">[Review] SE-0117: Default classes to benon-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/d1d220f2dd28a8fe9d6ffc87f03e7949504567f7">An Alternative for Extensibility Modifiers</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/0bd2be795236f60be22b74ff578f3139c9bb2de8">An Alternative for Extensibility Modifiers</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/75475b1866c0e4f1eb2858f96383c231bad69fff">adding Obj-C syntax to Swift?</a>      &mdash; <em>Ford Prefect</em>
    </li>
    <li>
<a href="/threads/d0192fd39cca3d229d1344cf6b959c226ab0d08a">Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</a>      &mdash; <em>Liam Stevenson</em>
    </li>
    <li>
<a href="/threads/ba21fea5286c7a44edf8d898be2b2dc0a44f8828">[swift-evolution-announce] [Accepted] SE-0115: Rename Literal Syntax Protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a3f4ae36e196e50209b93a94280c13d02c49dbbb">Improve Swift APIs for NSExpression and NSIncrementalStore</a>      &mdash; <em>Andrew Tetlaw</em>
    </li>
    <li>
<a href="/threads/9692825a29fcde1038a57fb6d6d6d81078f2d21c">An Alternative for Extensibility Modifiers</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/cbeadeb4d93ccdde3c00631e4001fa79e3fe7325">IDEA: Optional parameters bridge to Obj-C as distinct selectors</a>      &mdash; <em>Jared Sorge</em>
    </li>
    <li>
<a href="/threads/cba72c916bad5f72a84ddf78a1e0b9152d4eee3a">Fixing the confusion between non-mutating algorithms and single-pass sequences</a>      &mdash; <em>Dmitri Gribenko</em>
    </li>
    <li>
<a href="/threads/35ab04f622b7134e3922f06f3b086297f0c5221f">[Review] SE-0120: Revise &#39;partition&#39; Method Signature</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c56e448589377239e7cac6b309a893b396a9e10c">Optional comparison operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0b4a46e7968bd04fea83dc28b7f9bfbf57d7c060">[swift-evolution-announce] [Review] SE-0120: Revise &#39;partition&#39; Method Signature</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b18ca6e0135c4e78f4f23c47cd161b51b503059a">Searchable list</a>      &mdash; <em>David Shaw</em>
    </li>
    <li>
<a href="/threads/29afd526573b9890074d7d82406085de4c7dea05">[Review] SE-0120: Revise &#39;partition&#39; Method Signature</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/f22b614f7fa461503178f5bcee9bd2b2016d3bd5">[Pitch] `Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a `bitPattern:` label</a>      &mdash; <em>Arnold</em>
    </li>
    <li>
<a href="/threads/5ea7e5a60d6993171ba841d6248915fba19a3fbb">[swift-evolution-announce] [Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0004a3f226005fde0716fe4a4247bc2d0b922d08">[Pitch] Giving functions default return values</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5167eb232576723210408dca5936cb6129be79b1">[Idea][Swift 3] Change &#39;DispatchQueue.after&#39; to take a relative time + clock (with default). Maybe replace clocks with an enum?</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/67b8ccb40c53de09df84c36327f81da28f7ec075">[Meta] Proposal status page</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/7ab492c4705e1667cfd92838821cecf101916d40">Fixing the confusion between non-mutating algorithms and single-pass sequences</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/a3aafc36545f06ce6c9f99815cf1506bcb7bd2d5">[PITCH] Improved error handling for async Cocoa methods</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/c0c9aa3a43e77e34925f68cda94438ca0e5b42bf">executing a string</a>      &mdash; <em>Ford Prefect</em>
    </li>
    <li>
<a href="/threads/403900aa57110761f4dd65be926a2536280ef981">Proposals: (1) Forbidding custom `==` for value types, (2) `dispatch` keyword, (3) `default`-result for methods with `Self`, and (4) Poor-Mans-Existentials</a>      &mdash; <em>Johannes Neubauer</em>
    </li>
    <li>
<a href="/threads/5862782c8d45fba51d53f74ef5b18e03fc934a54">[Review #2] SE-0101: Reconfiguring sizeof and related functions into a unified MemoryLayout struct</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8e1ef913a33275890fcdb47e5ac5aa76ad4efcad">[Pitch] `Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a `bitPattern:` label</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/48e3216dc7bb831cc38829ff5c1073e94b4a0161">Discussion: Last chance to rename .self and .Self?</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/8e0369c80279bbc7891e06eb7a92cb5bbd4193c7">Visibility into timeline for proposals left in &quot;Awaiting Review&quot; for a while?</a>      &mdash; <em>Evan Maloney</em>
    </li>
    <li>
<a href="/threads/60e25ddb5a6f164e97110175e257b377daab462e">[Review #2] SE-0117: Default classes to be	non-subclassable publicly</a>      &mdash; <em>Rod Brown</em>
    </li>
    <li>
<a href="/threads/97d8a11a6bfcdefefeb0ba8c81b27386c3262ab1">Pitch: Remove `NonObjectiveCBase` and replace `isUniquelyReferenced` by `isUniquelyReferencedUnsafe`</a>      &mdash; <em>Arnold</em>
    </li>
    <li>
<a href="/threads/64ee88949f8332287d03b6bf85135a6e570a6238">[Draft] Harmonize access modifiers for extensions</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/edc643a9d07fde6b83f58e6f11065b0952ff9dea">[Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/12dfba26d699c640611de933671a7c6278aaa84c">[Pitch] Set of AnyObject by reference</a>      &mdash; <em>Guoye Zhang</em>
    </li>
    <li>
<a href="/threads/a0bda609540401d8e5f395fce940e978106f83d4">Nested for-in loops syntax</a>      &mdash; <em>Maxim Bogdanov</em>
    </li>
    <li>
<a href="/threads/277710d61a41fcb692b070b4ee54230214cfb1e1">[Discussion] Additional generics specialization</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/a81e9d9705bd5ef3c7a740c43ce8e121f79eb168">Extending declaration scope to condition for `repeat { } while ()`</a>      &mdash; <em>Braeden Profile</em>
    </li>
    <li>
<a href="/threads/ee16433880f749d9825bef46768ebab5e6752772">[Pitch]: Default values for enum associated values</a>      &mdash; <em>African Swift</em>
    </li>
    <li>
<a href="/threads/1cef438fa4a770acdd2fc4ae519ee9980f962732">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/c75608f544a96bc4ae4ed148d8ed0d78f91d38b1">[Proposal] Qualified Imports and Modules</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/d6852a1b165470379d63ec386e0a5296a244631c">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0dc134946f51eb39a270def3d8600f95a2889fb7">[Pitch] Eliminate `ManagedProtoBuffer`</a>      &mdash; <em>Erik Eckstein</em>
    </li>
    <li>
<a href="/threads/d1ac9f90d66c092087642d2a090486cf88209c4f">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</a>      &mdash; <em>Chris Denter</em>
    </li>
    <li>
<a href="/threads/3eec82e580db80e4bc34ecb375071d17056c94df">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true&amp;References=89F5D710-D05F-4FB2-BD08-1084C6ED8FCF@charliemonroe.net&amp;In-reply-to=89F5D710-D05F-4FB2-BD08-1084C6ED8FCF@charliemonroe.net</a>      &mdash; <em>Tal Atlas</em>
    </li>
    <li>
<a href="/threads/e6918946c1a1a04f7f15843da98635a3d3572f5c">[Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/6e06253ab2f9b21be68f42825d76c1b58626a3c3">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/a24ef3c2a430556a1c2269bb94033db4a54c4ba7">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/656295b24597bb51314f288aef35c1669664eea2">: [Proposal] Change UnicodeScalar initializer to failable</a>      &mdash; <em>Xin Tong</em>
    </li>
    <li>
<a href="/threads/dd06bfa138dcc478dc5602f43c930a419405a0bb">[Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/1334bae7c84e2cdeb4c6fbf944a82cc535c70a54">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/3e481575d006189fe59c2c2aed9d5801eb48e2c2">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/639c12b6d4ce6b6d76f0e66e3809a2036fe7e73e">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/2c513a6744ba75204a4eb5d379100d922acfd96e">Pitch: Replace UnsafeMutablePointer by UnsafePointer in non-mutating APIs</a>      &mdash; <em>Arnold</em>
    </li>
    <li>
<a href="/threads/be87b44117f2e47a74026a0a91d2dbc6af4e472a">Fixing the confusion between non-mutating algorithms and single-pass sequences</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9d6cdddbc3d25ddfe62568e270e2d630dbe9a541">Disallow local parameter names in protocols</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eab06a82cf6a4042f939c002258c70eb6a0ec713">Pitch: Replace UnsafeMutablePointer by UnsafePointer in non-mutating APIs</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e6136a502e45d8aa2e095032509229e1e4702a62">Disallow local parameter names in protocols</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/0b0aca1592be3068e0573e40b87a849bfd9650b5">[swift-evolution-announce] [Review #2] SE-0117: Default classes to be non-subclassable publicly</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/cfc4fbc25e7fa85ffa7bf09ea53b28e5aab71cb9">Throws, rethrows and declaration-modifiers in function declarations</a>      &mdash; <em>Matthieu Oger</em>
    </li>
    <li>
<a href="/threads/3e6c35f0717e92a95e7d6438cf84e2bd2d2f5832">Throws, rethrows and declaration-modifiers in function declarations</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/39c87e4fe6b008e2bff4e4097c2efad8a46c9681">[Review #2] SE-0117: Default classes to be non-subclassable publicly&amp;References=2C9B4C5A-52C2-4E0E-8B9E-6E5444629D85@apple.com&amp;In-reply-to=2C9B4C5A-52C2-4E0E-8B9E-6E5444629D85@apple.com</a>      &mdash; <em>Tal Atlas</em>
    </li>
    <li>
<a href="/threads/0b3b3a19bbfe0910eb2ba7ecc0ed635474757fae">[Proposal] Refactor Metatypes, repurpose T[dot]self and Mirror</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/0e423c6a05ea6c4ebd878380cf9b6c08f6e50868">[swift-evolution-announce] [Review] SE-0125: Remove NonObjectiveCBase and isUniquelyReferenced</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ffdb09020b133b512e099c696342078c1b9e34ae">Tuple</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/93b15b39a9325dd0f288340d0ff798eb2851a05f">Disallow local parameter names in protocols</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/0a43a323e4585175968755d19b6b83ed4861ef00">[Pitch] unavailable(*) attribute as alias for available(*, unavailable)</a>      &mdash; <em>Dan Loewenherz</em>
    </li>
    <li>
<a href="/threads/e8e2d48d142c09eec1bdc2930c0c34ba22dd2057">[Proposal][Discussion] Qualified Imports</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/75345cc9f5bf758b15738b79bd0bef5813957d92">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e24deedf738fd3ba63695370314dc4983a379566">Fixing the confusion between non-mutating algorithms and single-pass sequences</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/8b627f2805ad8e13ec9c736cf9dd4fa35e1a2bcb">[Review] SE-0122: Use colons for subscript declarations</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/2bd3c8d6dde7581471d4e8ee2fa9752810bed72f">[Pitch] Memberwise initialisers adopt the same access modifiers as the struct</a>      &mdash; <em>Ian Keen</em>
    </li>
    <li>
<a href="/threads/f4fb13cf7e9fd7b659c0cc45078fec27f20c7b6e">Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/6cc535641fbd2096636b3eba5523dc46c8d2ea05">[Meta] Updating the proposal template to prompt backward compatibility concerns</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/35dd74b6eb6281139d0b488c5ea4800cae2256bb">[Pitch] Memberwise initialisers adopt the same access modifiers as the struct</a>      &mdash; <em>Ian Keen</em>
    </li>
    <li>
<a href="/threads/718244a07066eb4adf8d6f3fb875548778a4e44e">[Proposal] Replace String.init(repeating repeatedValue: Character, count: Int) and String.init(repeating repeatedValue: UnicodeScalar, count: Int) by String.init(repeating repeatedValue: String, count: Int)</a>      &mdash; <em>Roman Levenstein</em>
    </li>
    <li>
<a href="/threads/d0bd88cc2429eee3e8908467790f15fd82b4d108">[Review] SE-0122: Use colons for subscript declarations</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/c3a7ab4326ee535c5e09bf8b1dab0760207b720d">[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</a>      &mdash; <em>Michael Gottesman</em>
    </li>
    <li>
<a href="/threads/884ff034c7227b4f2bd0c2fa08edf81a4216adb8">[swift-evolution-announce] [Review] SE-0125: Remove NonObjectiveCBase and isUniquelyReferenced</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f6eca0b145eeb258fa1cec1e875c436066064fc8">[Review] SE-0122: Use colons for subscript declarations</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/da9d4fc96e0e7c660d1889d9b02317f1cb4656ad">Fixing the confusion between non-mutating algorithms and single-pass sequences</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/67858bebd098b72199036148187e89cd7f36dbb2">[Review] SE-0122: Use colons for subscript declarations</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/7e39e4a50d914e66619f00b9a076784a3440af2d">[Proposal] Replace String.init(repeating repeatedValue: Character, count: Int) and String.init(repeating repeatedValue: UnicodeScalar, count: Int) by String.init(repeating repeatedValue: String, count: Int)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d9a3a80c6717aa2defd26a511586fb46eeabe1d1">[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7d304521912a8341d56e113926f62536c7b388c4">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/01416409cea2ad8a63fb5d9b0ccdcc664339014c">Returning nothing</a>      &mdash; <em>Daniel Steinberg</em>
    </li>
    <li>
<a href="/threads/a652088a46f55de49215687c9b730a98981f537f">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eeb83b8a497f6265e650a7ba6408e0c3086791ea">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6d3463a77cfddae2074e950da3f15c11b89f55fc">[Proposal] Struct syntax for requesting a copy with an ivar set to an explicit value</a>      &mdash; <em>Grant Sheldon</em>
    </li>
    <li>
<a href="/threads/980e692207a8185a1ed30d888e7604aa78bb8ef7">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f2e7c6150d6dba2d522cc671a24bc1b46cb5878a">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Robert Widmann</em>
    </li>
    <li>
<a href="/threads/a7f44c1f220ee866c253333d40923623207b5a34">[Pitch] Unify joined(separator:) and flatten()</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/bdfd3bd02efb8b8974c4b907a39a49387571553c">[Revision] [Pitch] Rename `T.Type`</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/358fb5c411e7e6bd41604c24b4acd8c4e549c934">[Pitch] Rename Mirror</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/80e3a32089a2b02be8e801b510a2549eaf44e7bb">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6d60577ddabca53815e864c96afdc91e2968cf7c">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/718774dac7753029dfd11c2c689b72ebda11d8ed">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/936de150b1269345015aac69e5a3f6885f45fff5">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e6b09e99c2141bdb6637acf76ab5294979c1cff1">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/55ef630204322f7eb91d4ffaea362a6bf1dd2717">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1f38723729fdc7ea2a2e0a043b93e27a49c1eb22">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0a10c8d624b791549ee5344293da231d2fb7d984">[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6032d448df351c82ab2b42022a8c1934697c6a86">Type access level as the default for its members?</a>      &mdash; <em>Eric-Paul Lecluse</em>
    </li>
    <li>
<a href="/threads/27d17f9b3d1ca0f5347a70eb3b5cea83027cd1df">[Proposal] Change some collection iterators to use custom types instead of IndexIterator&lt;T&gt;</a>      &mdash; <em>Michael Gottesman</em>
    </li>
    <li>
<a href="/threads/e28f68f8677b323f29c35ba4655fcc9a0f0b9fcb">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/251756745f9dd96d238e603f2aded7ed1f66ba7d">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f3ee03896b6391e1e15c8ee95804420fd54d791c">[swift-evolution-announce] [Review] SE-0127: Cleaning up stdlib Pointer and Buffer Routines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a28814becd7ca3f7e2ee0c52943a38de7eb1ea63">[Proposal] Move public AutoreleasingUnsafeMutablePointer API from StdlibCore -&gt; Objective C Overlay</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5078a32e5295198134d77c1a7522c552037c67d1">Add AnyHashable to the standard library</a>      &mdash; <em>Dmitri Gribenko</em>
    </li>
    <li>
<a href="/threads/8ad3a285c7f089c91f7f76ae08a68878b6d26405">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aad3bf7aab5c03e6ab92f704041f3ee07b77afe7">Returning nothing</a>      &mdash; <em>James Froggatt</em>
    </li>
    <li>
<a href="/threads/58f8d2fdce9e74c84df4e0cdbcf2f897034cca08">[Pitch] separate syntax of class inheritance and protocol conformance</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/0947addb0484f85147afd6c52ecd9bce16d4bacf">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9286e228bfbc81069c41a5dea8b76b011f641ae5">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/38dbefe6d38ef657903e1bd392151a593bc23975">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/22b09c0c50ed96fa50a044c3f9aed791fa670b60">[swift-evolution-announce] [Review] SE-0127: Cleaning up stdlib Pointer and Buffer Routines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4c06625158b1f7258d06edc1c1ca996601155adc">[Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Károly Lőrentey</em>
    </li>
    <li>
<a href="/threads/1f69d1d23f3439f27ba03264da75176ade694b3c">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8a15598291a5b0b8a4b6bc25a7c4d38881c24247">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6bebe82087f2b060ca5ee15477f68ac1badf78e6">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/fd5a5b5dd17edb786e89047af954c081447156ff">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/78cc742f4f23b9f42f7e714a23ae126dfa1e663d">[Pitch] Rename flatten() to joined() and give joined() for string sequences the empty string as the default parameter</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/6bf78d481c1421fa7ab5e20f93e0c61abe6e7130">[Pitch] separate syntax of class inheritance and protocol conformance</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/aa9c5963a9b7f6eaf5c3a2572fc27c7a32fa2a6f">[Pitch] separate syntax of class inheritance and protocol conformance</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/95fc8517e0b5c3b59b33609b885c73b32f5b79c1">[Draft] Fix a typo in two String methods</a>      &mdash; <em>Xiaodi Wu</em>
    </li>
    <li>
<a href="/threads/8f8d62633d206b368e01216f7e80a5efddc8bead">[Pitch] Rename `index(of:)` and `index(where:)` to `firstIndex(of:)` and `firstIndex(where:)` respectively</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/9d55754af90052193e77fb30460724b5c1060632">[Pitch] Rename `index(of:)`and	`index(where:)` to `firstIndex(of:)` and `firstIndex(where:)`	respectively</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5b249583beca6d202c903c14389434ceba70282a">[Draft] Fix a typo in two String methods</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5519bc9a72ebb6d40701bd590379a19838afede6">[Pitch] Rename `index(of:)` and `index(where:)` to `firstIndex(of:)` and `firstIndex(where:)` respectively</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/cdff894c34432a2d57126ef217a2fd687900cc53">[Pitch] Rename `index(of:)`and `index(where:)` to `firstIndex(of:)` and `firstIndex(where:)` respectively</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2a9a3caa530ac70d2abfd186837d1665fa5bf24e">[Draft][Proposal] Formalized Ordering</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/783a29c1244d4cd8e274e28fef71194e2cba1574">[Draft] Swift implementation Regex added</a>      &mdash; <em>Joshua Alvarado</em>
    </li>
    <li>
<a href="/threads/95fef50eae6bc1b6107711d866ba3c07d402514d">Swift 3.1 vs Swift 4</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/9f9cb0cb3d7a972fab931bc324438e899163824f">[SHORT Review] SE-0133: Rename `flatten()` to `joined()`</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/67286f516b772cc9d7ec4ccd63465ee542f6ab3f">[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dfdc058704997742a3c40bfa7da6db733a08c37f">[Proposal] Formalized Ordering, take 2</a>      &mdash; <em>Pyry Jahkola</em>
    </li>
    <li>
<a href="/threads/af9c47d9b1043fda52c332419c3833751c2b4b1d">[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</a>      &mdash; <em>Davor Jankolija</em>
    </li>
    <li>
<a href="/threads/3d7915adf05c35d78104c5ac127e7ba5a402d717">[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/07fa1987e1e476bde049ec49a48505e711894622">[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/25d5bc8563be14afab780a4b6c0612e16d63db9e">[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8e6959c1dae8ef9159449caf08bc1003a0a3bdfd">[SHORT Review] SE-0132: Rationalizing Sequence end-operation names</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2a79faee28d18474d76f2a3a42c0b85ad69212c0">Swift 3.1 vs Swift 4</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/e45682190466e0a1ab85376bcb9404e8b7914531">[Proposal] Normalize Unicode Identifiers</a>      &mdash; <em>João Pinheiro</em>
    </li>
    <li>
<a href="/threads/4f19744d4ac29bc9a0199fbdd330a18f44bd781c">asyncAfter(deadline: ...)</a>      &mdash; <em>Guillaume Lessard</em>
    </li>
    <li>
<a href="/threads/1ceaa2b86355bb40986d1f260fa83d1b8bdf6470">[Swift 3?] Add ContiguousArray -&gt; Array non-copying initialiser</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/fe800ab31354c1c9958bfbb40332e91f31e8dd55">End of source-breaking changes for Swift 3</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/3d89b33817733ac00eb936aee9a1b8dd9573d443">[Meta] What does the backlog mean to the process?</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/0d6863bae42e430d5b7e0c2eaeec25256df77b85">[Proposal]Allow constraints on associatedtype and shorten type constraints list in function</a>      &mdash; <em>Susan Cheng</em>
    </li>
    <li>
<a href="/threads/d7751715c038c66f0cc26b279849fcecf799e6c8">[Proposal] autocreate parameter for optional values</a>      &mdash; <em>Kwanghoon Choi</em>
    </li>
    <li>
<a href="/threads/558e348a21cec7dd5dbc017f47936c509ce1b359">Arrays and variadic parameters</a>      &mdash; <em>Alexandre Lopoukhine</em>
    </li>
    <li>
<a href="/threads/0fc7259c70e3c4d0edb4a0be7884cac9615bf771">Arrays and variadic parameters</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/69f3cb7f6295c076f7415ccfcd2211c60686ac1b">[Swift4] Priorities and Sugar</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/93237ffbd307427953ca9f8dee2f7105c2e1c460">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/83be937b94a78f8455363efbf57cfa3079c58fac">Improved value and move semantics</a>      &mdash; <em>Bram Beernink</em>
    </li>
    <li>
<a href="/threads/2588c6befa3cdeca274d6d9578825960fb845000">RFC: Preventing Retain Cycles (Memory Ownership Model)</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/705c94427a6b57225926d26512132331e1ecb1e5">[Swift 4] Cross-cutting concerns and patterns</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/0bdc363357a2ed15ddb8779facec12c52c6481d7">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5fe09ca275e8a0aabe80e38799340b39635f1761">[Swift 3.x] What to expect?</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/ae9c3607685f782c39f47ad3a21310c5e4da98a5">RFC: Preventing Retain Cycles (Memory Ownership Model)</a>      &mdash; <em>Andrew Bennett</em>
    </li>
    <li>
<a href="/threads/bcf6a4b4ea05d5567cde8cfa25d4fcea83722627">[Idea] Specialising based on function parameter values</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/0d2fc9bdf6a769806969f61843bfdb0445d9dd5f">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5f99eb93cb9bc38093eb35e3d4fc839f02f3f1c0">Swift 3.0 vs 3.x and Timing Clarification</a>      &mdash; <em>Robert Hedin</em>
    </li>
    <li>
<a href="/threads/4f30b1a4c25d2191678a4023e6908ede14f62947">ExpressibleByStringInterpolation vs. String re-evaluation vs. Regex</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/dea08c8efce70b65e0bab71a92c6df8e4484152f">Multi dimensional - iterator, Iterator2D, Iterator3D</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/a6ff40428c880e679f505e5899353e5ab277aec1">[Pitch] separate syntax of class inheritance and protocol conformance</a>      &mdash; <em>Sean Alling</em>
    </li>
    <li>
<a href="/threads/fe8e2d55a9fb1c9c7400907121970038cc61b8df">[META] Gmane and Swift Evolution</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/aa6b3e426ee3e57cfc575abdc14868dcbea9f11b">Swift 3.1 discussions, go?</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/37490a531c7c00060fa13d3232ec41029f3d84ac">[Discussion] Breaking precedence</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/93a62aeb41c00f54af940060b04be2f567425122">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Brad Hilton</em>
    </li>
    <li>
<a href="/threads/54a19fa07a0a6ce8cf236da49714ce48cac9736d">[Manifesto] Completing Generics</a>      &mdash; <em>Patrick Lind</em>
    </li>
    <li>
<a href="/threads/71c6197562a6872aab4a362a4cc3c71c5622ce0b">Improved value and move semantics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1ad5cd4bddbc8e75fb533e50ee47b8d2d390ef59">Multi dimensional - iterator, Iterator2D, Iterator3D</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/1574af074285c2e30a02fd0199ad3f645c6059db">Swift Generics: connection between equality constraints on generic parameters and GADTs</a>      &mdash; <em>Gabriel Scherer</em>
    </li>
    <li>
<a href="/threads/0e3a002e6a870f5af242e0f6f699d90fd801a8d5">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/4c41c7dbb4906d3c0bd31c1ae0de241d87c2eaae">[Idea] Generic subscripts</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/f8b1cb2ee70c50e3a6548b5b9b7b1e9339ed9d6d">[Pre-proposal/Discussion] Padding and Smaller Integer Types?</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/b99aa05cc2f94b524e34928f59f28797a719aa20">[Swift 4.0] Conditional conformances via protocol extensions</a>      &mdash; <em>Manav Gabhawala</em>
    </li>
    <li>
<a href="/threads/110f36fc5563be06c1f5ab7331a658454162e684">MemoryLayout for a value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1a6ebae62da3f84dd4513f6e39312d583e3372b5">Improved value and move semantics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3e89e7d522b6bf808f40a66b4839e1edc9e2b920">Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</a>      &mdash; <em>Björn Forster</em>
    </li>
    <li>
<a href="/threads/f95c32d3addc2b657d854507de260f6df759bbc3">[swift 4] static libs/modular code, fixed-size arrays, ref/pointer to structs, pointers, numeric types.</a>      &mdash; <em>Raphael Sebbe</em>
    </li>
    <li>
<a href="/threads/a5b6dd48a011a52677b2bf02473067460f8c96f3">[Idea] return if / return unless</a>      &mdash; <em>Julian Dunskus</em>
    </li>
    <li>
<a href="/threads/2fa54c52fd7c9a54da7d01f4dda090b4ded5b357">[Idea] return if / return unless</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/57af704bdb24c1374c28a80a1b9c090a8cc8b246">MemoryLayout for a value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1a65cb79202a20c7e19fde5c7ca200f04e07671b">[swift 4] static libs/modular code, fixed-size arrays, ref/pointer to structs, pointers, numeric types.</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6e12797b71a41d93a57627cbce8749d539b01c7f">Something lightweight to discuss: improvement to print(_:separator:terminator:) ?</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/d403305f11f744982c2f8b6d38eb38fbae7f4ad9">Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/b1d4283efbbe73b70e55636566aa7c8153cb7fe8">A unified error handling mechanism?</a>      &mdash; <em>Fernando Rodríguez</em>
    </li>
    <li>
<a href="/threads/7511cf595a68a170d9eea1aa157270801ffa46bf">Pitch: URL(fileURLWithPath:) to URL(filePath:)</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/291c6ba4dffe213fa4a005f7552d118233e1e5d7">Amendment to SE-0112: Default values for errorDomain and errorCode</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/bb509faa2125ed59ac9bc3a0449774f4578025a3">Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</a>      &mdash; <em>Taras Zakharko</em>
    </li>
    <li>
<a href="/threads/2676a03330d3ed0bb1cd9fc368e3afdf18684ea9">MemoryLayout for a value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6679a29b23f9c50e4a039fd8ff70d0cae3435cf3">Location of ! in Boolean negation expressions</a>      &mdash; <em>Darren Mo</em>
    </li>
    <li>
<a href="/threads/ee809246f539af252e2b3a7144f3e484bf53db32">MemoryLayout for a value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a4f8fd5a77d1ecda41fe456320ef498011356b27">ABI of throwing</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/3ae5ba9fbbeeb4d2ecd74779c36298e86952a2fe">Pitch: URL(fileURLWithPath:) to URL(filePath:)</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/c04ad422280603d794d0924f9b24485988ff7d0f">[Review] SE-0136: Memory Layout of Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5c7d21329c401874b086a73203ea8d520e18257a">Why does URL.checkResourceIsReachable() return a Bool?</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/f65f1e042a852efad30588dc73c4cc8909742800">Location of ! in Boolean negation expressions</a>      &mdash; <em>Phil Wigglesworth</em>
    </li>
    <li>
<a href="/threads/9353938179731a074c980bcae972f61e4a75c990">More fine tuning optimization to swift compiler</a>      &mdash; <em>Muse M</em>
    </li>
    <li>
<a href="/threads/12b5550b5306c15d997a8eab4e07a563d29b2b1c">Why does URL.checkResourceIsReachable() return a Bool?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6c92b171f84bd362cbc25068bca2bdf2cce290c5">ExpressibleByStringInterpolation vs. String re-evaluation vs. Regex</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6f981ea1e6e871099c8b80b424440bc94c3ac18a">[Review] SE-0136: Memory Layout of Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b1df6e36f2baf5a34f4c6e4b0e7248bae4ca82ae">What&#39;re the Swift team&#39;s thoughts on Go&#39;s concurrency?</a>      &mdash; <em>Dan Stenmark</em>
    </li>
    <li>
<a href="/threads/7c1fa6f4cdeb4dbee561f6bd216a2036a332a85e">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0ad88ad3337e8bfd8fa064f69c16f39b915bb6ce">ExpressibleByStringInterpolation vs. String re-evaluation vs. Regex</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f90cf9e9a512da962ae749360fb2f6a43c0b9556">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dfe929b428a72d4e9141c31124ccd92cbcddf98c">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/96df22c4a69e624e752b73f57bbf374ee0f141c4">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6bf7bcd41094d94e9b484352d41396b85a767999">Secure Coding Guideline and SWIFT 3.0 release</a>      &mdash; <em>Sunil Pandey</em>
    </li>
    <li>
<a href="/threads/50eb7ab94e84afecd7363ab310303e02c100db23">Binary framework distribution?</a>      &mdash; <em>晓敏 褚</em>
    </li>
    <li>
<a href="/threads/d4a3ca9832a6266a9a20ddab3bf17ec596a84388">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ff896b0d0f18696a2cd8e53eafb08ef8b756720d">Swiftier implementation of Measurement and Unit</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/bfebd6d3282d52a7a766d4dcf00f3b3f5fd29c13">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/9aff103c5bcad93d8d4a080637503800ee746bd0">Swiftier implementation of Measurement and Unit</a>      &mdash; <em>Joanna Carter</em>
    </li>
    <li>
<a href="/threads/ec190f5686eb37a8bdeaba25165b3fa7166593b5">ABI in Layman&#39;s terms?</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/dfa0983630a890514d0ac211c8fa0c871025201d">[Pre-Proposal-Discussion] Union Type - Swift 4</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/1db2dc910f7e64a8b0a3ffeac8745ecc2e027090">[Pre-Proposal-Discussion] Union Type - Swift 4</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/37d297d34f2449e8f4951d31dce18aee15d564d9">Use lowerCamelCase for @warn_unqualified_access attribute?</a>      &mdash; <em>Ben Rimmington</em>
    </li>
    <li>
<a href="/threads/067f44128fdcee8d8b735126a4c85d1402f43703">[swift-evolution-announce] [Review] SE-0137: Avoiding Lock-In to Legacy Protocol Designs</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f64aefb74859f293238d3489a206f6a0ad6d9a6b">[Swift 4.0] Conditional conformances via protocol extensions</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/921d16c86afcdd53216af74dc7857bdb0fc9c762">[Accepted] SE-0136: Memory Layout of Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9f51e0635ab67774efd650136e78c901aa509c5d">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/adc93743b44095a75e5133bc7f118392c65873d5">Why have both bit-wise and logical operators?</a>      &mdash; <em>David Sweeris</em>
    </li>
    <li>
<a href="/threads/ca4220087c5a5ebea8946c138ba9af6f8b46d525">[late pitch] UnsafeBytes proposal</a>      &mdash; <em>Andrew Trick</em>
    </li>
    <li>
<a href="/threads/f095c188773f3b63c27897414eff8e2daa6c15a1">[Late Pitch] Deprecations, Moves, and Renames</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/012b6f9bfe05c23d8232691a029791c79c54c5ad">Proposal for swift build linux on Mac os x</a>      &mdash; <em>jasonk at apps4u.com.au</em>
    </li>
    <li>
<a href="/threads/79b648764d25d573eec38f5bbe97c8c164724e22">[Proposal] Sealed classes by default</a>      &mdash; <em>John Holdsworth</em>
    </li>
    <li>
<a href="/threads/3bacaac48e443296fa2b27cd892dcb1e524d7476">InternalString class for easy String manipulation</a>      &mdash; <em>Michael Savich</em>
    </li>
    <li>
<a href="/threads/1485bb573cca524defde659785e8b2f46d2a3741">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/c6844b5ffd6802c0d292fb5de1e69435abe35c8f">[Idea] Use optionals for non-optional parameters</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/9679ee2a35dbe7003b838104ac4d6b01fa41ed1d">[Idea] Use optionals for non-optional parameters</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/fcf123e88e634387b9d65b6a5db48c8adb9e57c4">[Idea] Use optionals for non-optional parameters</a>      &mdash; <em>Justin Jia</em>
    </li>
    <li>
<a href="/threads/d42d0e34379fd334550d4df45d317795a138a5ab">Swift for bare-metal programming</a>      &mdash; <em>Rick Mann</em>
    </li>
    <li>
<a href="/threads/b6e3657ca51c78912300d15172b9df595266b0db">Required Callback</a>      &mdash; <em>James Campbell</em>
    </li>
    <li>
<a href="/threads/1a316e963155b3953b083866d819e9bc23115878">PITCH: New :== operator for generic constraints</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/4f29556cc97128ebe8240bf9b729d1c24cb704b4">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Braeden Profile</em>
    </li>
    <li>
<a href="/threads/a2f0ea2b1ddc3e3801fbf5262f2b731daa386990">[Discussion] Sortable Attribute</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/ce9fa406d9999089fdfee72687da239020e961a6">[Pitch][stdlib] Command Line Option Parsing &amp; Help</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/7fb4468343df205a302e1c10db5c03d97935fe81">PITCH: Return a subclass for a protocol method without the need for an associatedtype</a>      &mdash; <em>Sitton, Yogev</em>
    </li>
    <li>
<a href="/threads/67251036fb45ec65819b128b87c64c7c2c2c1f94">Allow use of ; in anonymous closures</a>      &mdash; <em>Braeden Profile</em>
    </li>
    <li>
<a href="/threads/3093b124fc8eca4af4af81b5e30534c513f58cd0">[Swift4][Pitch] Control struct layout with @layout, @offset, @order</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/e392dd7cdf8034c7bb3dd338b5bac590f5cd6679">Allow trailing comma in guard, if-let, et al</a>      &mdash; <em>Rick Mann</em>
    </li>
    <li>
<a href="/threads/65ba4f0bfcb6d4066fbf868e2c3ac5db1cae0944">Calling a Specific Implementation</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/13166e70bbe7893968f195c0d12e03c0301772de">try? shouldn&#39;t work on non-method-call</a>      &mdash; <em>Sikhapol Saijit</em>
    </li>
    <li>
<a href="/threads/3e9d0e9a5cff8213991dada48afdcaaff51d78ab">try? shouldn&#39;t work on non-method-call</a>      &mdash; <em>Braeden Profile</em>
    </li>
    <li>
<a href="/threads/a28670cd99d83998c46c19602a2573a1356c0620">OS/Environment check in Swift</a>      &mdash; <em>Muhammad Mominul Huque Nahid</em>
    </li>
    <li>
<a href="/threads/4ab4c06270a405096a08911a52090f6005f10bc3">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Sean Alling</em>
    </li>
    <li>
<a href="/threads/a0b3aa46e9b45661b2d2a8477ca486572c3d2339">[Swift4] Mailing list vs. Forum</a>      &mdash; <em>Muhammad Mominul Huque Nahid</em>
    </li>
    <li>
<a href="/threads/8c268c29db358d2a68b6669c6bae23f91174f3e4">OS/Environment check in Swift</a>      &mdash; <em>Muhammad Mominul Huque Nahid</em>
    </li>
    <li>
<a href="/threads/fea6aaa6f94d9a6f28d83375c786189016eb9a0d">[Idea] Typed Numerics</a>      &mdash; <em>Nur Ismail</em>
    </li>
    <li>
<a href="/threads/de7c2cc3b567fc058be29624489dbefbdc13f17c">[Late Pitch] open/public protocols</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/b7399c7bf0c6964bdcf27113e6385e7052013385">Renaming for Protocol Conformance</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/8b4ea389e1b2ac3e5014903dcc4d0a112f3367bd">Keyword for protocol conformance</a>      &mdash; <em>David Cordero</em>
    </li>
    <li>
<a href="/threads/8e71de1624361f9e7274c836b697a24c6ebd82c6">[late pitch] UnsafeBytes proposal</a>      &mdash; <em>Jason Cardwell</em>
    </li>
    <li>
<a href="/threads/5801358136e1879b019d89cb43128e7e4d5fe36c">[Proposal draft] Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/f969e9d3043ee6e041946adaf41d50fe127b2666">[Proposal draft] Bridge Optional As Its Payload Or NSNull</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/9e19081e8d7f3883283866c1d3649a0674033d38">[Proposal draft] Bridge Numeric Types to NSNumber and Cocoa Structs to NSValue</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/2ec7a5006aaf569b7ab65be249bcffea2f3292e2">[Pitch] Require Any for existentials</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/9a8151d5b75332e7bc46bdec09d8b66eb36bf453">Pitch: really_is and really_as operators</a>      &mdash; <em>Charles Srstka</em>
    </li>
    <li>
<a href="/threads/e4dd777baa8c4630597711154ede44c1ab231fe9">InternalString class for easy String manipulation</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d9a38df81682dccda5b637194a5da7eb3bc51b4b">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e945754b76c2c03b3022239ef87a0fc2a5ee50a1">[Idea] Typed Numerics</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f207f8246cc15c69566aa18123a4770f8c55046a">[Idea] Add `bounds` function to standard library</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/034cb7b76f6c676af542d1ee3caf3e22cba99818">[Idea] Add `bounds` function to standard library</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/74200ff87178851e52cc3bee64d384b7518e6588">@noescape loop hole</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/1bf588dab82370540c8a89230716dedd32ba02a3">Type-annotated throws</a>      &mdash; <em>Félix Cloutier</em>
    </li>
    <li>
<a href="/threads/5b04e569b0434896c1b63b39715ebd12500d87ce">Proposal: Local identifier for the newValue in didSet and willSet blocks</a>      &mdash; <em>Eric Miller</em>
    </li>
    <li>
<a href="/threads/563d0ac62063aad644bdde2c790c47b77c8a725e">[Accepted] SE-0121: Remove Optional Comparison Operators</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5fbd0493d06e361fd582c29c2317a2b2e61e2e9d">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/15df485f131c3b707cee1ecd2a1577b2ad4b2796">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/7b678b219151fe3e53789798af2c1a9f9791dd40">[Idea] Distinguishing code comments from text comments.</a>      &mdash; <em>DifferentApps info</em>
    </li>
    <li>
<a href="/threads/dbdb0b24d8294538c21e2ab530e805d11f24989a">Type-annotated throws</a>      &mdash; <em>Bouke Haarsma</em>
    </li>
    <li>
<a href="/threads/f73afa0ea2dbf44e6a8c274f0a8e170a9a085551">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/97deee874af0755f09e022382f8d57e8b32ebe92">Type-annotated throws</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/96f3b005987d798a462d03b82f52dad3f6755142">[Accepted] SE-0121: Remove Optional Comparison Operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/8749ea7feda13d9b2479e02704fd486e67987927">New feature request: syntactic sugar for &quot;if let&quot; scoped self assignment</a>      &mdash; <em>Nicholas Exner</em>
    </li>
    <li>
<a href="/threads/3298871a799890c78c2ca1113a9f5cb16c75154a">Allow failable initializers to return .none as well as nil</a>      &mdash; <em>Rui Costa</em>
    </li>
    <li>
<a href="/threads/1f3fe1c99fa206ac213afc45101410fa3fcad7df">[Pitch] [Stage 2] [Additional] Remove leading dot after closures</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/269e3c254df55b67c3a7e8adfa2d34e357ec38d1">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/42d35384e1e790d1a1eadd973ba217a88e9ecfb5">[Idea] Add `bounds` function to standard library</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/b144932540311caca4c474bab36f887d6521f80d">Customized Inline Init Closure</a>      &mdash; <em>Weston Catron</em>
    </li>
    <li>
<a href="/threads/8dd940289df45d64c96a03ffbce25aa03421cf0b">Built-In Remote Class Support</a>      &mdash; <em>Weston Catron</em>
    </li>
    <li>
<a href="/threads/1eabce97de27d6c58e16789a1f815ba3619f09a0">[PITCH] Add Ability To Specify Error Type On Throws</a>      &mdash; <em>Mark Robinson</em>
    </li>
    <li>
<a href="/threads/f232834d9d14dcc1e50f27d71cbc7e4a415206a9">Adopting the swift evolution process in a different OSS community</a>      &mdash; <em>Heiko Braun</em>
    </li>
    <li>
<a href="/threads/48b56b82c1e8db3085343b8c5a4b02bbf3c5f33e">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/0aa6ade40458d5bfd2a7b22104123e7158c87d76">Passing an optional first argument to sequence(first:next:)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/768312a8ba34efb7ba0849897125d0d300518d8f">[Pitch] Require parenthesis for ternary operator &#39;?:&#39; or change its priority</a>      &mdash; <em>Vladimir.S</em>
    </li>
    <li>
<a href="/threads/11c4eb640ade88ef01fe1b6afdfdfe9c01e4639d">SE-0138 UnsafeBytes</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/45a47a8ccc693afe5501906ce2db64abea388027">SE-0138 UnsafeBytes</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/791c18f507aff8074316dc1e70fdbbd0e252b506">The great renaming and the state of new Unified Logging in Swift</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/5a479939e1307ef54acb657dc0e4aabeaf728a8b">[Proposal draft] Add `Clamp` function to standard library</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/63af09b98b3f261a0cbe53bca7ce890bd7581309">The great renaming and the state of new Unified Logging in Swift</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/95f44341d5372479526dd5093db77b5f7df6eefe">[Last second] Precedence of nil-coalescing operator seems too low</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/76276b649165a72f4d8d3db8626732370ee6b05d">[Idea]Why not get dynamically named variables?</a>      &mdash; <em>Fayez Hellani</em>
    </li>
    <li>
<a href="/threads/7b2e762d7f6a58e9e8e53d97b746faca8ac75abb">#pragma</a>      &mdash; <em>isidoro carlo ghezzi</em>
    </li>
    <li>
<a href="/threads/c413ba719cf446f7419f2bdefc1140a61bfb0bb0">#pragma</a>      &mdash; <em>isidoro carlo ghezzi</em>
    </li>
    <li>
<a href="/threads/11e8d640eacdf97411db96126435d566678380d0">NSString.contains(_:) returns false for empty string argument</a>      &mdash; <em>Ole Begemann</em>
    </li>
    <li>
<a href="/threads/08e1f18af15665115d92742e6eb926e4902a193e">[Idea] Further directions for id-as-Any</a>      &mdash; <em>Brent Royal-Gordon</em>
    </li>
    <li>
<a href="/threads/bfa663fbb6106374b7b4b008a86271439f5cbda1">SPM support for branches and commits</a>      &mdash; <em>Said Sikira</em>
    </li>
    <li>
<a href="/threads/35e1f550b3d92a007d3d932af0a58176be8294d2">Swift 3 Ranges</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/5ff95568f7bfef09fab443a20b6bc567d5d16204">Dot notation as shorthand in subscripts and functions</a>      &mdash; <em>Brett Halladay</em>
    </li>
    <li>
<a href="/threads/1c9eed99ce827bcb4d5c7ffe2c80090163c198ea">pattern matching on variable-sized data type</a>      &mdash; <em>Jean-Denis Muys</em>
    </li>
    <li>
<a href="/threads/0a10a76fb2dfbe87ace7b60d17346393c72a8c6d">pattern matching on variable-sized data type</a>      &mdash; <em>Jean-Denis Muys</em>
    </li>
    <li>
<a href="/threads/effd29ddc88d840c210dd8e585619181a7652171">#pragma</a>      &mdash; <em>isidoro carlo ghezzi</em>
    </li>
    <li>
<a href="/threads/5f25d1741cd83b00b1f5bd5299a454d488a38fe2">[Proposal] Add Array binary search to the standard library</a>      &mdash; <em>Igor Vasilenko</em>
    </li>
    <li>
<a href="/threads/0f5a9b4c7d100e04adeb8bea91c80d1c9a151e07">[Idea] Add @pure annotation or keyword to force pure functions</a>      &mdash; <em>Guido Marucci Blas</em>
    </li>
    <li>
<a href="/threads/2cab36bc3adb1e4fb5edfcae460e395c6c5074ce">Mocking in Swift</a>      &mdash; <em>Mark DiFranco</em>
    </li>
    <li>
<a href="/threads/e7326932517d2be0ab6bb05873aa6110bde0f8bb">Class scoped access level</a>      &mdash; <em>Tom Bates</em>
    </li>
    <li>
<a href="/threads/2a98e0a665592b3e5c89dc1dc29ad63c0df6626f">Equatable auto-write func == Proposal</a>      &mdash; <em>Daniel Tartaglia</em>
    </li>
    <li>
<a href="/threads/e5e60435008af75a3c1ce43bb3608d12adeb8136">Add something like [unowned self] syntax for passing instance methods into closure parameters without creating retain cycles</a>      &mdash; <em>Nick Abalov</em>
    </li>
    <li>
<a href="/threads/61224f727a66da0b72b2a11d13fdb968251602fc">[Pitch] mutable `newValue` in willSet</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/7e944d270ba041d5bedc9d5e164082876ab92fa4">Add something like [unowned self] syntax for passing instance methods into closure parameters without creating retain cycles</a>      &mdash; <em>Benjamin Spratling</em>
    </li>
    <li>
<a href="/threads/e5cac68cad9ca3c06550bba75c94f66c3b5d0f54">Swift 3 Ranges</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/58cf4ca58746e869aa20b7837c584ab1c867a98d">[Proposal] Add Array binary search to the standard library</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/66c4247d6ad81073a05841b1b27a0c7e69d31c4b">Tuples as Named Types</a>      &mdash; <em>Muhammad Tahir Vali</em>
    </li>
    <li>
<a href="/threads/b884ac4dd57422e468e17451a05b222666227903">Tuples as NominalTypes</a>      &mdash; <em>Muhammad Tahir Vali</em>
    </li>
    <li>
<a href="/threads/8a693910146a6bc9a0da8124d37aae4f7e60d47c">Mark protocol methods with their protocol</a>      &mdash; <em>David Beck</em>
    </li>
    <li>
<a href="/threads/698eea843125f6220c3c678423686d26ed41203a">Mark protocol methods with their protocol</a>      &mdash; <em>David Beck</em>
    </li>
    <li>
<a href="/threads/7c48387e79844a0f3378fc542757ac54ba8eede7">Should closures support inout parameters?</a>      &mdash; <em>Braeden Profile</em>
    </li>
    <li>
<a href="/threads/94f59635a4dab938630688adf2c1a5ab1153b37f">generic associatedtype?</a>      &mdash; <em>Jens Persson</em>
    </li>
    <li>
<a href="/threads/377863da2cbd101c7a11f0951d68ee1ae6cfbb9d">Should closures support inout parameters?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/9754310bab4372b7a4607fee9f576543eaa825b0">Unicode identifiers &amp; operators</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/5e0acff721bfabf0fdea23625ea01200fd2dd224">Unicode identifiers &amp; operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f9b00f90dd5a8ad521dd63609b0ccb5e68c9b2f7">Equatable auto-write func == Proposal</a>      &mdash; <em>Jérôme Duquennoy</em>
    </li>
    <li>
<a href="/threads/44e47ebe14eb4fc40ef61e836f12d6b021deef46">[swift-dev] Rebinding UnsafePointer makes it mutable</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/174c3db24f3daea05eccb2390f98561ea73708f1">[swift-users] Problem with COW optimization</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c1543c38fd13ff0ab1b32f9afd55fe23b99ba49b">[swift-users] Problem with COW optimization</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/72bcc9b57939a94d606c135002092f575a57c942">[Pitch] Align label behavior for subscripts</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/88b222de5184767a5392e6666236a8340989ce9b">[Accepted] SE-0138: UnsafeRawBufferpointer</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/f12848cb8efdf053277f2dde5fbb03b41419bd3b">Testing access level, final, and static</a>      &mdash; <em>Benjamin Spratling</em>
    </li>
    <li>
<a href="/threads/0f97c51ba250073e1e09d8034eb94fab1626a36e">Range that goes both ways</a>      &mdash; <em>Mr Bee</em>
    </li>
    <li>
<a href="/threads/ad30984bcb1fe3e7d7ccd91cafd364f7d342c011">Testing access level, final, and static</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/e0eea47b92d14c84e98df167d7fbfde841a6303f">[Pre-Review] Permit where clauses to constrain associated types</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/0a1f926a9fc956c89b6d650cdc9762b0ba35dee7">Should Swift apply &quot;statement scope&quot; for ARC</a>      &mdash; <em>John Holdsworth</em>
    </li>
    <li>
<a href="/threads/9aa7dedc30c9aff5c59a84e3dd95fdc20f728f87">[Draft] Availability by Swift version</a>      &mdash; <em>Graydon Hoare</em>
    </li>
    <li>
<a href="/threads/aaeabd41403a8d0912a60223a8a176bddf29e2f9">Should Swift apply &quot;statement scope&quot; for ARC</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/641a5f9ed2dd7138d7653c81dbcbd76a214e629a">Mark UnicodeScalar.utf16 and UnicodeScalar.UTF16View as public</a>      &mdash; <em>Eli Perkins</em>
    </li>
    <li>
<a href="/threads/c4fd8799eaf6c654fa009fc18712098479c65ac0">Should Swift apply &quot;statement scope&quot; for ARC</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/aa4cffca2a3ea7cd35b2e75cf29b0f4f3cc539c6">[Review] SE-0142: Permit where clauses to constrain associated types</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/705ceb2a47f5565aea89db5dad6a492d3c0eeee4">Propagating Optionals</a>      &mdash; <em>Trans</em>
    </li>
    <li>
<a href="/threads/b1c51271e193f3a153ba987887cbfa955e65e54d">Source-breaking proposals?</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/1376bf776d3008ae15e993bf3c1ba9a3507979ef">Source-breaking proposals?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/45a77175552727aeafe292d2d4148803a36ee74b">[Proposal draft] Conditional conformances</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/ff7d2432e1c68d18f7b6a89324a76b4a5fa09bf2">[proposal draft] new syntax to access a given case&#39;s payload</a>      &mdash; <em>Jérôme Duquennoy</em>
    </li>
    <li>
<a href="/threads/4e462e7081581a246999f6822c4113842ace67aa">class/struct inner member access scope classifier</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/80128adaccb234d4de5788287e1fd739f9b47b17">Three questions about a more &quot;dynamic&quot; Swift for InfoQ</a>      &mdash; <em>sergio</em>
    </li>
    <li>
<a href="/threads/561a66bbb1d477e7f07b04353014c3ca19afa0c3">Java-style annotations (attributes?)</a>      &mdash; <em>Rick Mann</em>
    </li>
    <li>
<a href="/threads/d359c12a1bc87a3644cac442497dc0337a6310f5">Out of Scope Issues</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/8d35cf73adaf3e1a6b91c489fbb01e44b919b77e">[Draft] Availability by Swift version</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b893de2feb6fdfd53e0b0a48114962ed7f742b45">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/b799b94e5a584755f81a26ab8585f3c86fa6723b">[Pitch] Refactor Metatypes</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/07ba3f5567add8b173321664bafe4ded666ef523">draft proposals should be easier to find</a>      &mdash; <em>Jay Abbott</em>
    </li>
    <li>
<a href="/threads/5079bf3d09856c183198cb4a7144b493191b2728">associated objects</a>      &mdash; <em>Jay Abbott</em>
    </li>
    <li>
<a href="/threads/ce9a721f2195c43dd897a6ac6c0e60e6d9f2f2d0">Pitch: Renaming CharacterSet to UnicodeScalarSet</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/8851ed1734e29c575577b9ce8eb3217094406a5d">$self</a>      &mdash; <em>Paul Jack</em>
    </li>
    <li>
<a href="/threads/799a25515750cbc5ab8a4203af905276b54a2f9f">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/a172f6024f011a07e00e448da27bba76daf7b720">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/3cbbe6ba42fb1f919107e3e54fa0ef5571b81f01">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/c9b875116dedaef7260cc03ffe3ba2f83f1a2c1c">[Pre-proposal] Enforcing Correct use of Array Indices</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/644e7c666483f08efba3f63e0b719daacaba6ca7">[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</a>      &mdash; <em>Joe Groff</em>
    </li>
    <li>
<a href="/threads/8959aa5be9c2db789670a3fa6357f8b221b15289">[Pitch] improve import sentence: allow import specific nested types</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d2250559922e53240422e3b63d509bc46d1537d2">[Pitch] allow define submodule in Foundation or file group like Swift Standard Library?</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/126e4d12904e1cfa7712c6efd2d2a22a5033f5db">[Proposal draft] Conditional conformances</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/ebd554c1bd0cf23d0d7bf00e846c88a44387eb49">[Review] SE-0143: Conditional Conformances</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1244f6d24b068444dc7a0f7dad0e558b52bb6a2e">[Pre-proposal] Enforcing Correct use of Array Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3efa379a73568169c5e0167d45e5555b0a5a788b">Pitch: Renaming CharacterSet to UnicodeScalarSet</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/1372e3dc90eabf04212684da64c9e2053414c8c1">[Proposal draft] Conditional conformances</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/76534f1205388be5c311a996665d4929bf05bb94">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/26ff08a3ffb5e8f49aad3e37f001e7195ab4c8ad">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/71bd751680273fd561f58c751b0a7b36c2b6aa8a">associated objects</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/227cb7c967141242e4899603146775360ea5845c">[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/3d8dd14dcd87da148dcc68677473c9152a78b07f">Lexical matters: identifiers and operators</a>      &mdash; <em>Jonathan S. Shapiro</em>
    </li>
    <li>
<a href="/threads/67f652d64d59cf48c1f25bded50f93d8e5a40d39">protocol-scoped methods</a>      &mdash; <em>Benjamin Spratling</em>
    </li>
    <li>
<a href="/threads/db222aec4c7677729e3acf0fc466cb59599921d5">NSString.contains(_:) returns false for empty string argument</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b7ad79301c0c1c60a1c8086ee739cfab4bc50085">[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2e52f23d3d133a4624354e9ae93d9fe307bc0f35">[Pre-proposal] Enforcing Correct use of Array Indices</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/98cb157bed605c077aeb7b80dd845e07512c82f9">[Pitch] Can we make `default` on switches optional?</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/4d61733abddc9cf9158ad7a48af6545557b46750">[Proposal draft] Disallow Optionals in String Interpolation Segments</a>      &mdash; <em>Harlan Haskins</em>
    </li>
    <li>
<a href="/threads/fe482c7b7d9af942378e9a029f8bbb321b438538">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b8f7a2c60971a2d6c22618658ba22b88a48436d6">[pitch] replace (if/guard) case = with ~=</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/f7baf56c0e6bb3dad550d197348381aac13b92c7">[Pitch] Hashable types on RawRepresentable enums or a protocol for custom enum-like types</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/7c6abc1de60fea7947f75b52d19dfad71195e759">SE-0111 and Curried argument labels: Unintended Consequences</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/ec61d21983e9e1f9d03d2826a76465ed56177d9f">[Pitch] Can we make `default` on switches optional?</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/f610a9cd0679ba08eb94537e9ed88c1c5f9704e0">[Proposal draft] Introducing `indexed()` collections</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a32c2eb05df33fb7ceda1fd2fc21c548190a27dd">Currying/Partial Application</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/5e99da42b68226a8e72a4d8676e06bfcf734357e">[Question] Types of functions</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/9843ab6e83a90ab3f252ab6b8006a79b5c4049e2">[Pitch] Several improvements points about extension and typealias</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d77b7965d8556824b2a257e2067f800673e6ac1c">[Pitch] inout with capture variable</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/48a87e5f23181b9ef1ca921975f8f1bffea040d4">[Pitch] inout with capture variable</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d3333a26b5d20ab05badfb9362b0ce6afe192508">[Pitch] inout with capture variable</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/d5308fc295f847d1056a4621b286c5604797cd80">private &amp; fileprivate</a>      &mdash; <em>David Hart</em>
    </li>
    <li>
<a href="/threads/9d023a6b993f030950c77c4a2a78611ba73517ea">[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/59711c822d09652fe60c27d118d1f40d95695c7f">Protected Access</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/f28c10298e9c280c6c65759b13090210a43fc34e">private &amp; fileprivate</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/e8aae501c5d85ad227d9f961591d533a57715998">Taking advantage of our character space</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/17098499429ee2793aed025c3c3991b5666759b0">[Pich] allow embed type declaration in protocol &amp; allow throw in property getter/setter</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/52f67714e51f46d055967568364b67b53b39fed3">Parameter names in closures in Swift 3 are no longer possible</a>      &mdash; <em>Andrew Hart</em>
    </li>
    <li>
<a href="/threads/d3ed8c2a703d983676bc118af009e4fd99c75232">[Proposal] Enums with stored properties</a>      &mdash; <em>Mateusz Malczak</em>
    </li>
    <li>
<a href="/threads/199deae68939742f4ab4286f419a2719380b415b">[Proposal] Enums with stored properties</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/bd2d769842b4321d474cca8aac95d77092297097">private &amp; fileprivate</a>      &mdash; <em>Daniel Tartaglia</em>
    </li>
    <li>
<a href="/threads/7c5dfac052d48c6282251da0443360a836e24a73">Conditional casting and conditional binding: Wierd edge case or flawed design</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/d2d1457b8897d521f739c0e8b58a0de70baa04d7">[proposal] Allow convenience initializers to use &quot;self = Foo()&quot;</a>      &mdash; <em>Charles Constant</em>
    </li>
    <li>
<a href="/threads/82b64b81b89830c8f69a7964d867d5d0032dd2d3">[Pitch]Building a limited framework to develop Android Apps in Swift 3.0</a>      &mdash; <em>Tony Constantinides</em>
    </li>
    <li>
<a href="/threads/14777cb514ab10ee5b776d6ca83e14d8b7cd67f3">[Draft] Unify &quot;import Darwin/Glibc&quot; to simply &quot;Libc&quot;</a>      &mdash; <em>Sean Alling</em>
    </li>
    <li>
<a href="/threads/b9c3eecd1f33581917d77996f4ba766f18829091">[Pitch]Building a limited framework to develop Android Apps in Swift 3.0</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a34396735b94275ae6e0fb4c5b8c891f9e5336e9">[Pitch] deprecating ManagedBufferPointer</a>      &mdash; <em>Erik Eckstein</em>
    </li>
    <li>
<a href="/threads/517994e742493dfa64e39f12588f96f6a56d304c">Automatic generation of initializer including default values</a>      &mdash; <em>Guy Miller</em>
    </li>
    <li>
<a href="/threads/dc882cd0c00924e8baca23ce64aad9bfe865c649">[Pitch] Adding a `mutate` clause to computed properties and subscripts</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/2605958bc1d987010c86c6315eb3061df1392f89">[Pitch] Change location of &#39;try&#39; for infix operators</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/03686f1d79f5a13f8cdca4c925cd86fd3f686ab5">Pitch: disallow `()` from Switch statement case satisfaction</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/f9a57fa1dada0ecefdc399170402bf1e54de9d77">Dynamic Class/Struct Definition At Run Time</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/b9c74d168c0755140c13664eb61d24977cd59311">[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</a>      &mdash; <em>Nate Cook</em>
    </li>
    <li>
<a href="/threads/13ee815e99ee46e24288d5a3ee40cebc30910d7d">Is there information about phases/versions/releases and scope?</a>      &mdash; <em>Jay Abbott</em>
    </li>
    <li>
<a href="/threads/6c478a7751915e9def906c1db9473a56cf7d1e14">[Pitch] deprecating ManagedBufferPointer</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/459c6627c934d8300cd15d26227f8fad0fcf158c">[Pitch] Simpler interpretation of a reference to a generic type with no arguments</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2652faddd0b6f4520bc0e545e4e1ad6fb9744d68">[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/87b5e943b37fa53ac358d24ce8c5bff663e0ce8b">[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/dff3eedbd6bb5cc93c29bb82951cf6fc9e914efc">[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d3cf7fd8735d1b24953f28c76a40ed0d31154ddc">stored properties in extensions (was: associated objects)</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/5298d50628db56568d692c118552b59e73244599">private &amp; fileprivate</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/273e9ee40298643240f8612cc1715aa11a37d2ad">[Discussion] API Guidelines</a>      &mdash; <em>Charlie Monroe</em>
    </li>
    <li>
<a href="/threads/806776b8582f7fe4c7230b43c1f344d44d7ea433">Tuples as RawRepresentable</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/c29a041b7cd2bb2516553b52a25ac55b921386a7">[Out of scope][Gibberish]</a>      &mdash; <em>ted van gaalen</em>
    </li>
    <li>
<a href="/threads/844533b574c6cac0616b1d7787c78ed76795bd18">[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</a>      &mdash; <em>Daniel Müllenborn</em>
    </li>
    <li>
<a href="/threads/122f665e9464a6c6ed8ed95dab3b54c88e656284">[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/ad7220fab252417f8c6a87e428dade715e4d0b15">[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/1677e34e2da10069a3dbac57c0fc3166e6d93906">[pitch] &quot;import&quot; declaration, support for comma-separated modules</a>      &mdash; <em>Charles Constant</em>
    </li>
    <li>
<a href="/threads/8ea9df1dc9bbb54f7b931d11a82558aa731ff845">[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c73d57d44293bbedf0cf6b5ac0e8bb5d0309b3e4">[Discussion] API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/12ad3b48383b1e5f3a96b4e627781dfd3fa52937">[Discussion] API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/c7a9c5a4d8733707aae6d5856739f54bc95a6394">[Discussion] API Guidelines</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a1a0ea4d009b5b0e66ac6185638e832698cb8f97">Replace Fileprivate with Hidden + Import Hidden</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/ab8c9f95ceaafce0c30a9487fce4b4c5b208dee3">Proposal: Package Manager Version Pinning</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/a1cab15dff6c039a675e00c1eb60d4f99255e3ef">[Pitch] Adding in Optional Argument labels for completion handlers</a>      &mdash; <em>Grant Kemp</em>
    </li>
    <li>
<a href="/threads/abcac2ab35e58a0f44843b822bb98aa57ceab8ad">Why doesn&#39;t removeLast() on Collection return an optional?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/eff51ca4781f11ec8f8ef81cb15d27af3cde9bca">Import Conditionals</a>      &mdash; <em>Sean Alling</em>
    </li>
    <li>
<a href="/threads/e6aab37a4f837ce148b232a3ae19d7e0c679afc5">[Pitch] Nested types in protocols (and nesting protocols in types)</a>      &mdash; <em>Karl</em>
    </li>
    <li>
<a href="/threads/fdaa574f08e086c991eb86edba99a343555e2a65">Why doesn&#39;t removeLast() on Collection return an optional?</a>      &mdash; <em>Louis D&#39;hauwe</em>
    </li>
    <li>
<a href="/threads/8602bacebfa4d4a44ab4458cef70ff31aeed3129">[pitch] &quot;import&quot; declaration, support for comma-separated modules</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/84d9acdf4159ac6b1b413854665cabc0d9a0401f">[Review] SE-0144: Allow Single Dollar Sign as a Valid Identifier</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/11e87fbbeafcbe7c5cd5569a6ebb7a8da8bb2653">Swift Reflection</a>      &mdash; <em>Robert Goodman</em>
    </li>
    <li>
<a href="/threads/8fa91e414fc0e82d95f061761a406286f544deda">[stdlib] Collection mutators availability inconsistent</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2b77868d035b92c1042d317a46fc77e16a8bf032">[Pitch] Ban the top value in Int/UInt</a>      &mdash; <em>Guoye Zhang</em>
    </li>
    <li>
<a href="/threads/fee6264d5bfec2bf52c1dba0a3bd43158ea0130c">Some clarity lost from the great renaming</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/7143026543b7093047dfb92cfdaa9b5965c5d262">Some clarity lost from the great renaming</a>      &mdash; <em>Brandon Knope</em>
    </li>
    <li>
<a href="/threads/77b7211698d9b9e804479e6a83bfaf084504e84c">[stdlib] Collection mutators availability inconsistent</a>      &mdash; <em>Louis D&#39;hauwe</em>
    </li>
    <li>
<a href="/threads/70dbf0be1f497073a64f9f74e66e811c145863cd">[pitch] make @nonobjc the default</a>      &mdash; <em>Jay Abbott</em>
    </li>
    <li>
<a href="/threads/1aa88af7da2c35402bb1c1ce01a64258557119b1">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jacob Bandes-Storch</em>
    </li>
    <li>
<a href="/threads/a9c4e7cdc7e765b595b7f812108fbf7dcdac3c99">Constant initialization and unreachable code.</a>      &mdash; <em>David Goodine</em>
    </li>
    <li>
<a href="/threads/a1693e9c12fbd11dda4651ef94e262dd64891c59">[Pitch] Ban the top value in Int/UInt</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d7d742324b13550e466e21a8e5aae8f99bb8febd">[Pitch] Ban the top value in Int/UInt</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/b66bb73d8faba2b7ae6f3aa11b893652f36a0d45">[Pitch] Ban the top value in Int/UInt</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/d6004b524f0bcdf65ad452584a2c8748d43f2507">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/9da0eea8432ff974ad7d12b851ea50ece10a3614">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/7abffcba22dca2d03d6a8becd7d07cc57a895a66">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/53e515f2028e1bdd879ab6b4468006d55341cc3e">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/baa67cccee71b6b194374ce7e3efe6fb8d4231e0">[Proposal] Refining Identifier and Operator</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/d3c990eeb158516a7a5178df4feb03ebae408459">[Pitch] Non-class type requirements on protocols (eg : struct, : enum)</a>      &mdash; <em>Mike Kasianowicz</em>
    </li>
    <li>
<a href="/threads/913fc46659a7ad65f27874327be8c0afbfcdee30">[Pitch] Ban the top value in Int/UInt</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/4dc9c6290230d59e0b06cd3b77addab60a2c8bec">[Pitch] Non-class type requirements on protocols (eg : struct, : enum)</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/2104ffc803f94f94a78b837f78bb44f61b0fa7f7">[Pitch] allow non-nominal type extension</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/f26fa383ddb8909f32464e042c39333cd7f6082e">[Pitch] allow non-nominal type extension</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/2da84bc9ec06b728a74e963be07df6aa89c6f0e4">clang auto-attaching @discardableResult attribute on imported declarations</a>      &mdash; <em>Pär Strindevall</em>
    </li>
    <li>
<a href="/threads/db805e7523db77512184e1f7a130cdcc510568b4">[Pitch] #if swift version with third version component</a>      &mdash; <em>Richard Wei</em>
    </li>
    <li>
<a href="/threads/c47263db3356498df943cf78b069e8795e3ecfbf">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Georgios Moschovitis</em>
    </li>
    <li>
<a href="/threads/2ae7c7fa86d9c5235327ff73311bd96ca543d764">[Pitch] Reimagining guard case/if case</a>      &mdash; <em>Erica Sadun</em>
    </li>
    <li>
<a href="/threads/ffd44ea475842b7cf31833cba7fba8c223da7724">[Pitch] Nested types in protocols (and nesting protocols in types)</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/05bfb234b300d2be9c81249ab23539af76476f77">Using `map` and `flatMap` with implicit optionals</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/5ffd4f4b4780ac8b3498c7d1053ff65a25989503">Using `map` and `flatMap` with implicit optionals</a>      &mdash; <em>Nicholas Maccharoli</em>
    </li>
    <li>
<a href="/threads/211a806c1b28eb43e19643ba37aab51e2935afcd">[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Jay Abbott</em>
    </li>
    <li>
<a href="/threads/3c6da95e90fb2970e163bf7b6edac577973e1928">[Bug] Foundation.URL should support semicolon(; ) appearing in URL path</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/244cd84ffb73559c659a225f985195c6196eecaf">[pitch] rename &#39;guard&#39; to &#39;ensure&#39;</a>      &mdash; <em>Tim Vermeulen</em>
    </li>
    <li>
<a href="/threads/95843a7ca1bf1ff00ed1e74f15d3acecf14cd43a">[Bug] Foundation.URL should support semicolon(; ) appearing in URL path</a>      &mdash; <em>frogcjn at 163.com</em>
    </li>
    <li>
<a href="/threads/018d4b419b2105e885b8bd1637e1efb7909dcca2">guard let x = x</a>      &mdash; <em>David Goodine</em>
    </li>
    <li>
<a href="/threads/4d162f67b3f205f70ae6638dd1178520b1ca7ee0">[Pitch] Replace the ternary operator with an in-language function</a>      &mdash; <em>Charlotte Tortorella</em>
    </li>
    <li>
<a href="/threads/877f8cb75afa2f8aec782b6372300d75951dc639">[Pitch] Expanded type category constraints</a>      &mdash; <em>Russ Bishop</em>
    </li>
    <li>
<a href="/threads/d1ed67d25c92ba18a6b40392eba5e9edcd7305be">[Proposal] Refining Identifier and Operator Symbology</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/81e8c8837a5d47e1562b14eb87d31b065c9bdfb3">[Pitch] Replace the ternary operator with an in-language function</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/7f344e393bf021a9039fad20c8c4ec044d0e7e31">[Meta] Let&#39;s talk TouchBar + Unicode</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/49ecb19a4df4d9b899c8f5748a8e4d5286f94c60">guard let x = x</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/4d4fdb38b4a2bbdfc82ad4f20c01c1cf525a53fd">Promises, Futures and the death of the callback hell</a>      &mdash; <em>Florent Vilmart</em>
    </li>
    <li>
<a href="/threads/f0f56f9a1d01f051f83fd8ed8eea31a6bb4beaf8">Official Swift Slack team?</a>      &mdash; <em>Adrian Zubarev</em>
    </li>
    <li>
<a href="/threads/46bcc50e0860ed90c5e09afd8b550faf5794c255">[Review] SE-0145: Package Manager Version Pinning</a>      &mdash; <em>Anders Bertelrud</em>
    </li>
    <li>
<a href="/threads/277a90861ead88fd743ea1bbe29e2571e00b1b20">Extensions-visible &quot;private&quot; Access Level</a>      &mdash; <em>Uros Krkic</em>
    </li>
    <li>
<a href="/threads/de52e929a306c58c5ca88a618694fd61e529a54f">Postfix operators that start with ? or !</a>      &mdash; <em>Toni Suter</em>
    </li>
    <li>
<a href="/threads/4cea69e7eaf88853d5ad00f2c22ce3448456307b">guard let x = x</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/79bf3ab64daf9145702351cd6ad98948de61767f">[Pitch] Limiting member expression with right-bound period</a>      &mdash; <em>rintaro ishizaki</em>
    </li>
    <li>
<a href="/threads/021484c591db561971d00128914a6e9f303621bd">[Pitch] Make `errno`-setting functions more usable from Swift</a>      &mdash; <em>Johannes Weiß</em>
    </li>
    <li>
<a href="/threads/2bf1080c70ab96cda7f146b29a4bf389665082af">Forbid weak keyword for computed properties</a>      &mdash; <em>Andrew Volodin</em>
    </li>
    <li>
<a href="/threads/f91392362029019d7377c21ec7a599cda077385e">[Proposal] Type Narrowing</a>      &mdash; <em>Haravikk</em>
    </li>
    <li>
<a href="/threads/4daf79d2146a0dc61de970d16402c720076d0763">Sort Descriptors</a>      &mdash; <em>Chris Eidhof</em>
    </li>
    <li>
<a href="/threads/ac12b94e22d97604e8bfe8ddea08c507c3980f8e">Contiguous Memory and the Effect of Borrowing on Safety</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/6be4f954018cc8d5012ba5c4c9381439f3176385">Contiguous Memory and the Effect of Borrowing on Safety</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/852e40d7110e6897292bc5b0bc4413e77dc24a53">Contiguous Memory and the Effect of Borrowing on Safety</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/5047c200860d2cec477539db76c97f5b4b81e203">Contiguous Memory and the Effect of Borrowing on Safety</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a7212f7a20ef8a9d844944d47b5a5f049cfaec44">[Pitch] Nil struct</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/73080a424b84ac332597712db2f89e4598c6e637">[Out of scope] Discussion on general Darwin/GlibC module</a>      &mdash; <em>Alex Blewitt</em>
    </li>
    <li>
<a href="/threads/67eadca986e5e8153796f2cf6a4a443ac849cd71">Some concerns on custom operators</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/98d6150a5298f2ad1cbc1987540179e68e28de1e">Some concerns on custom operators</a>      &mdash; <em>Anton Zhilin</em>
    </li>
    <li>
<a href="/threads/cf4e0c73f3d5864f1cb4c32f93e890f2052730c4">gyb template for ZipSequence</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/a680a9a83608eb16fc310a26cba8c2f4c6d3e0cb">[Out of scope] Discussion on general Darwin/GlibC module</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/ad35d16f4f322cf9e0ad7f15b9655a42e02df24b">gyb template for ZipSequence</a>      &mdash; <em>Alexander Momchilov</em>
    </li>
    <li>
<a href="/threads/b3b62c10c04a59bd19581f52b3e1f6cfed1e5fd2">Swift Extensions on Overlay Structs</a>      &mdash; <em>Fabian Ehrentraud</em>
    </li>
    <li>
<a href="/threads/6e882ebb2864fc2f8c6f8ee74d907004d1a4de4d">Implicit Optionals for Tuples &amp; Tuples as Function Parameter</a>      &mdash; <em>Muhammad Tahir Vali</em>
    </li>
    <li>
<a href="/threads/15f2d034691da2f8699f2756c8b2e87719692921">[Pitch/plea] Recursive protocol constraints</a>      &mdash; <em>Douglas Gregor</em>
    </li>
    <li>
<a href="/threads/a3e81761d7e8bea106e541085d6afaa9949f89c5">Symmetrical operators</a>      &mdash; <em>Andrew Volodin</em>
    </li>
    <li>
<a href="/threads/0bd165d77084362a62770ee10f9b4bfeb043e67b">Symmetrical operators</a>      &mdash; <em>Jonathan Hull</em>
    </li>
    <li>
<a href="/threads/d5b99492fef9c32b534c3513a3e294a500795625">Selector for current method</a>      &mdash; <em>Rudolf Adamkovič</em>
    </li>
    <li>
<a href="/threads/d552bc1c8e9887a6c8b62991ae19d0d98c158dee">Will Swift ever support optional methods without @objc?</a>      &mdash; <em>Rick Mann</em>
    </li>
    <li>
<a href="/threads/38080eec2252b2075d7b4cfee071d7f7340a6db0">Will Swift ever support optional methods without @objc?</a>      &mdash; <em>Dave Abrahams</em>
    </li>
    <li>
<a href="/threads/33b205c49e813aa955b97b6692119de967a328a7">Getting a list of protocol conformers</a>      &mdash; <em>Jonathan Hull</em>
    </li>
  </ul>
</div>
    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
