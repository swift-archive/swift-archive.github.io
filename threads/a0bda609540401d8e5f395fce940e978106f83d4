<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/70668b2fb45e713b66f0dddfba55f9c0?s=50"></div><header><strong>Nested for-in loops syntax</strong> from <string>Maxim Bogdanov</string> &lt;bm at masax.ru&gt;<p>July 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello, community.<br></p><p>As I understood from documentation the only way to iterate multidimensional<br>array or a dictionary (with for loop) is this:<br></p><p>let multidimensionalDictionary = [&quot;a&quot;:[&quot;b&quot;: &quot;c&quot;], &quot;b&quot;:[&quot;c&quot;: &quot;d&quot;], &quot;c&quot;:<br>[&quot;d&quot;: &quot;e&quot;]]<br>for (key, value) in multidimensionalDictionary {<br>    for (nestedKey, nestedValue) in value {<br>        print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>    }<br>}<br></p><p>What do you think about this syntax?<br>for (key, nestedKey, nestedValue) in multidimensionalDictionary {<br>    print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>}<br></p><p><br>--<br>I&#39;m new to mailing list feature. If I do something wrong please let me know<br>about it.<br></p><p>Best regards,<br>Maxim<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/a0bd83d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Nested for-in loops syntax</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July 17, 2016 at 11:00:00am</p></header><div class="content"><p>I think this use-case is too narrow for dedicated syntax in the standard<br>library.<br></p><p>However, it should be simple enough for you to write your own function,<br>let’s call it `unpack`, which produces a sequence that does what you want.<br></p><p>While you’re at it you could also try writing a `cross` function that takes<br>two collections and produces all tuples of their elements, perhaps using<br>something like .lazy.map.zip internally, if you need that functionality.<br></p><p>One great aspect of Swift is that it makes implementing things like this<br>yourself readily achievable. Plus, once we get constrained extensions<br>(extension Collection where Element: Collection) you should be able to do<br>it that way too.<br></p><p>Alternatively, you might consider whether your data structure itself is<br>ideal or if you’d be better off flattening everything into, say, a single<br>dictionary that takes a compound key.<br></p><p>Nevin<br></p><p><br></p><p>On Sun, Jul 17, 2016 at 6:05 AM, Maxim Bogdanov via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello, community.<br>&gt;<br>&gt; As I understood from documentation the only way to iterate<br>&gt; multidimensional array or a dictionary (with for loop) is this:<br>&gt;<br>&gt; let multidimensionalDictionary = [&quot;a&quot;:[&quot;b&quot;: &quot;c&quot;], &quot;b&quot;:[&quot;c&quot;: &quot;d&quot;], &quot;c&quot;:<br>&gt; [&quot;d&quot;: &quot;e&quot;]]<br>&gt; for (key, value) in multidimensionalDictionary {<br>&gt;     for (nestedKey, nestedValue) in value {<br>&gt;         print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; What do you think about this syntax?<br>&gt; for (key, nestedKey, nestedValue) in multidimensionalDictionary {<br>&gt;     print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; --<br>&gt; I&#39;m new to mailing list feature. If I do something wrong please let me<br>&gt; know about it.<br>&gt;<br>&gt; Best regards,<br>&gt; Maxim<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/02266b06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Nested for-in loops syntax</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July 17, 2016 at 04:00:00pm</p></header><div class="content"><p>re: cross (nod to Dave Abrahams for the clean implementation)<br></p><p>/// &#39;Cartesian product&#39; of two sequences<br>public func cartesianProduct&lt;Left: Sequence, Right: Sequence&gt;(lhs:Left,<br>rhs:Right) -&gt; [(Left.Iterator.Element, Right.Iterator.Element)] {<br>    return lhs.flatMap { x in  rhs.map { (x, $0) } }<br></p><p>}<br>On Sun, Jul 17, 2016 at 11:54 AM, Nevin Brackett-Rozinsky via<br>swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think this use-case is too narrow for dedicated syntax in the standard<br>&gt; library.<br>&gt;<br>&gt; However, it should be simple enough for you to write your own function,<br>&gt; let’s call it `unpack`, which produces a sequence that does what you want.<br>&gt;<br>&gt; While you’re at it you could also try writing a `cross` function that<br>&gt; takes two collections and produces all tuples of their elements, perhaps<br>&gt; using something like .lazy.map.zip internally, if you need that<br>&gt; functionality.<br>&gt;<br>&gt; One great aspect of Swift is that it makes implementing things like this<br>&gt; yourself readily achievable. Plus, once we get constrained extensions<br>&gt; (extension Collection where Element: Collection) you should be able to do<br>&gt; it that way too.<br>&gt;<br>&gt; Alternatively, you might consider whether your data structure itself is<br>&gt; ideal or if you’d be better off flattening everything into, say, a single<br>&gt; dictionary that takes a compound key.<br>&gt;<br>&gt; Nevin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Jul 17, 2016 at 6:05 AM, Maxim Bogdanov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello, community.<br>&gt;&gt;<br>&gt;&gt; As I understood from documentation the only way to iterate<br>&gt;&gt; multidimensional array or a dictionary (with for loop) is this:<br>&gt;&gt;<br>&gt;&gt; let multidimensionalDictionary = [&quot;a&quot;:[&quot;b&quot;: &quot;c&quot;], &quot;b&quot;:[&quot;c&quot;: &quot;d&quot;], &quot;c&quot;:<br>&gt;&gt; [&quot;d&quot;: &quot;e&quot;]]<br>&gt;&gt; for (key, value) in multidimensionalDictionary {<br>&gt;&gt;     for (nestedKey, nestedValue) in value {<br>&gt;&gt;         print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; What do you think about this syntax?<br>&gt;&gt; for (key, nestedKey, nestedValue) in multidimensionalDictionary {<br>&gt;&gt;     print(&quot;\(key) -&gt; \(nestedKey) -&gt; \(nestedValue)&quot;)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; I&#39;m new to mailing list feature. If I do something wrong please let me<br>&gt;&gt; know about it.<br>&gt;&gt;<br>&gt;&gt; Best regards,<br>&gt;&gt; Maxim<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/b7868af6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
