<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Protocol-Oriented Number System</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 15, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Feb 10 2016, Dan Kogai &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Folks,<br>&gt;<br>&gt; Hi.  I just joined the list because I found this:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002445.html<br>&gt;<br>&gt;&gt; Related: I have been working for some time on a rewrite of all the<br>&gt; integer types and protocols &lt;<br>&gt;&gt;<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb&gt;.<br>&gt;&gt; One goal of this effort is to enable operations on mixed integer<br>&gt;&gt; types, which as you can see is partially completed.  In-place<br>&gt;&gt; arithmetic (anInt32 += aUInt64) is next.  Another important goal is<br>&gt;&gt; to make the integer protocols actually useful for writing generic<br>&gt;&gt; code, instead of what they are today: implementation artifacts used<br>&gt;&gt; only for code sharing.  As another litmus test of the usefulness of<br>&gt;&gt; the resulting protocols, the plan is to implement BigInt in terms of<br>&gt;&gt; the generic operations defined on integers, and make BigInt itself<br>&gt;&gt; conform to those protocols.<br>&gt;<br>&gt; Not knowing this, I started writing what I call Protocol-Oriented<br>&gt; Number System in Swift, or PONS for short.<br>&gt;<br>&gt; &lt;https://github.com/dankogai/swift-pons&gt;<br>&gt;<br>&gt; In PONS, BigInt is implemented exactly that way, purely in Swift.<br>&gt;<br>&gt; Suppose you have:<br>&gt;<br>&gt;     func fib&lt;T:POInteger&gt;(n:T)-&gt;T {<br>&gt;         if n &lt; T(2) { return n }<br>&gt;         var (a, b) = (T(0), T(1))<br>&gt;         for _ in 2...n {<br>&gt;             (a, b) = (b, a+b)<br>&gt;         }<br>&gt;         return b<br>&gt;     }<br>&gt;<br>&gt; You get this.<br>&gt;<br>&gt;     let F11 = fib(11 as Int8)       // 89 as Int8<br>&gt;     let F13 = fib(13 as UInt8)      // 233 as UInt8<br>&gt;     let F23 = fib(23 as Int16)      // 28657 as Int16<br>&gt;     let F24 = fib(24 as UInt16)     // 46368 as UInt16<br>&gt;     let F46 = fib(46 as Int32)      // 1836311903 as Int32<br>&gt;     let F47 = fib(47 as UInt32)     // 2971215073 as UInt32<br>&gt;     let F92 = fib(92 as Int64)      // 7540113804746346429 as Int64<br>&gt;     let F93 = fib(93 as UInt64)     // 12200160415121876738 as UInt64<br>&gt;<br>&gt; and of course,<br>&gt;<br>&gt;     let F666 = fib(666 as BigInt)<br>&gt;<br>&gt; and F666 =<br>&gt; 6859356963880484413875401302176431788073214234535725264860437720157972142108894511264898366145528622543082646626140527097739556699078708088<br>&gt; as BigInt .  Yup.  Swift swallows the beast(&#39;s number) so easily.<br>&gt;<br>&gt; It contains playground that lets you see it for yourself.<br>&gt;<br>&gt; Because the 0th raison d&#39;Ãªtre of PONS is to bring protocol-oriented<br>&gt; programming to numbers, BigInt is just a part of it.  It also comes<br>&gt; with Rational with numerator and denominator in any signed integer and<br>&gt; Complex either in integers (aka Gaussian integer) or &quot;real&quot; numbers --<br>&gt; not only Double and Float but also Rational.<br>&gt;<br>&gt; Working on PONS is about 93.75% joy and 6.25% agony, with that 6.25%<br>&gt; from swiftc puking Signal 11 (that happens rather often when I move<br>&gt; codes from actual types to protocol extensions :-).<br>&gt;<br>&gt; As for BigInt, it is far from the fastest arbitrary-precision integer<br>&gt; on Earth but fast enough for my needs.  For one thing it can tell M127<br>&gt; (also happens to be Int128.max should it come) is a prime instantly.<br>&gt; Don&#39;t you dare try that on ruby with &#39;require &quot;prime&quot;&#39; then<br>&gt; &quot;(2**127-1).prime?&quot; :-?<br>&gt;<br>&gt; And thanks to protocols it can be the denominator of Rational so I can<br>&gt; go not just as big as I like but also as small as I like.<br>&gt;<br>&gt; My heart aches a little to learn that the future Swift will definitely<br>&gt; make PONS obsolete yet I am far more glad to report that Swift 2.1<br>&gt; already passed your -- our litmus test.  You got to see for yourself<br>&gt; how beautiful litmus paper can be.<br>&gt;<br>&gt; Dan the &quot;Crusty&quot; Swift Programmer<br></p><p>Dan, this is supercool.  Max Moiseev has taken over the integer effort,<br>and Steve Canon has been working on the same kinds of changes for<br>floating point; it would be fantastic if you could work together with<br>them to ensure that PONS can be built atop our new protocols.<br></p><p>Thanks!<br></p><p>P.S. if you&#39;re interested in generic mixed-precision arithmetic, there&#39;s<br>also https://gist.github.com/dabrahams/ddeda3fbf919f71593d1, which could<br>be seen as a foundation for building BigInt and others.  (The reason for<br>making it all so generic is so that it could be exhaustively tested with<br>small units of precision).  But I wouldn&#39;t spend too much energy digging<br>into this code...<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
