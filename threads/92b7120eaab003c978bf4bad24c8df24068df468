<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  7, 2016 at 04:00:00pm</p></header><div class="content"><p>on Wed Jul 06 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; * *Remove unsafeAddressOf*. &quot;We are not aware of any real use cases for<br>&gt;&gt; it. If there are any, it should be renamed to unsafeAddress(of:) to follow<br>&gt;&gt; the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957<br>&gt;&gt; rdar://problem/18589289)<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;<br>&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>&gt; methods:<br>&gt;<br>&gt;     var description: String {<br>&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>&gt; here... }&quot;<br>&gt;     }<br>&gt;<br>&gt; I guess this would be covered by some generalized solution for format<br>&gt; specifiers in string interpolations, but I gather that won&#39;t happen for<br>&gt; quite a while...<br></p><p>If we remove unsafeAddressOf, we have no way to get the address of an<br>immutable variable.  A mutable variable can be passed inout to a<br>function taking an UnsafePointer, but you can&#39;t add &amp; to an immutable<br>binding.  <br></p><p>That&#39;s a loss I&#39;m willing to take.  I just wanted to point out exactly<br>what we will have no way to accomplish if we remove unsafeAddressOf.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  8, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 8, 2016, at 1:01 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Jul 06 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; * *Remove unsafeAddressOf*. &quot;We are not aware of any real use cases for<br>&gt;&gt;&gt; it. If there are any, it should be renamed to unsafeAddress(of:) to follow<br>&gt;&gt;&gt; the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957<br>&gt;&gt;&gt; rdar://problem/18589289)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;&gt; <br>&gt;&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>&gt;&gt; methods:<br>&gt;&gt; <br>&gt;&gt;    var description: String {<br>&gt;&gt;        return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>&gt;&gt; here... }&quot;<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; I guess this would be covered by some generalized solution for format<br>&gt;&gt; specifiers in string interpolations, but I gather that won&#39;t happen for<br>&gt;&gt; quite a while...<br>&gt; <br>&gt; If we remove unsafeAddressOf, we have no way to get the address of an<br>&gt; immutable variable.  A mutable variable can be passed inout to a<br>&gt; function taking an UnsafePointer, but you can&#39;t add &amp; to an immutable<br>&gt; binding.  <br>&gt; <br>&gt; That&#39;s a loss I&#39;m willing to take.  I just wanted to point out exactly<br>&gt; what we will have no way to accomplish if we remove unsafeAddressOf.<br></p><p>I&#39;m OK with removing it as long as:<br></p><p>- ObjectIdentifier provides a correct description (SR-2014)<br></p><p>- ObjectIdentifer.pointerValue returns just the opaque pointer (i.e. exposes private _value member) since I&#39;m not a big fan of having &quot;ObjectIdentifier&quot; in the logs. There should be an easy way of getting a pointer to an object without using Unmanaged.<br></p><p>- Ideally, the description would include dynamicType of the value + pointer:<br></p><p>ObjectIdentifier(NSObject&lt;0x00101234&gt;)<br></p><p>Which can always be achieved by storing Any.Type within ObjectIdentifier - something I believe can be useful on multiple occasions in the future as well.<br></p><p>I.e. full public API for ObjectIdentifier:<br></p><p>public struct ObjectIdentifier : Hashable, Comparable {<br>    // Existing:<br>    public var uintValue: UInt { get }<br>    public var hashValue: Int { get }<br>    <br>    public init(_ x: AnyObject)<br>    public init(_ x: Any.Type)<br>    <br>    // New:<br>    public var pointerValue: UnsafePointer&lt;Void&gt; { get }<br>    public var type: Any.Type { get }<br>}<br></p><p>// New:<br>extension ObjectIdentifier: CustomStringConvertible {<br>    public var description: String { get } // return &quot;ObjectIdentifier(\(self.type)&lt;\(self.pointerValue)&gt;)&quot;<br>}<br></p><p><br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Discussion] Cleaning up stdlib pointer and buffer routines (Open Issues Affecting Standard Library API Stability)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  8, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Jul 07 2016, Dave Abrahams &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org&gt; wrote:<br></p><p>&gt; on Wed Jul 06 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;&gt; * *Remove unsafeAddressOf*. &quot;We are not aware of any real use cases for<br>&gt;&gt;&gt; it. If there are any, it should be renamed to unsafeAddress(of:) to follow<br>&gt;&gt;&gt; the guidelines.&quot; (https://bugs.swift.org/browse/SR-1957<br>&gt;&gt;&gt; rdar://problem/18589289)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; Oops, I just responded to this on another thread. Pasting:<br>&gt;&gt;<br>&gt;&gt; It&#39;s minor, but I use unsafeAddressOf regularly for writing `description`<br>&gt;&gt; methods:<br>&gt;&gt;<br>&gt;&gt;     var description: String {<br>&gt;&gt;         return &quot;&lt;\(self.dynamicType): \(unsafeAddressOf(self))&gt;{ more info<br>&gt;&gt; here... }&quot;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; I guess this would be covered by some generalized solution for format<br>&gt;&gt; specifiers in string interpolations, but I gather that won&#39;t happen for<br>&gt;&gt; quite a while...<br>&gt;<br>&gt; If we remove unsafeAddressOf, we have no way to get the address of an<br>&gt; immutable variable.  <br></p><p>I take it back; we already have no way to do that.  unsafeAddressOf,<br>since it only applies to AnyObject, is totally dispensable.<br></p><p>Today you can do:<br></p><p>  Unmanaged.passUnretained(x).toOpaque()<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
