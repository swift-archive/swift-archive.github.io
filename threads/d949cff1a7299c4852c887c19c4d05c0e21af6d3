<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a stride(by:) method to ClosedRange</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>May 20, 2016 at 11:00:00pm</p></header><div class="content"><p>If ClosedRange (Range in Swift 2.2.1) has a stride(by:) method, we can change<br></p><p>stride(from: 0, to: 10, by: 3)<br></p><p>to<br></p><p>(0..&lt;10).stride(by: 3)<br></p><p>and similarly, we can change<br></p><p>stride(from: 0, through: 10, by: 3)<br></p><p>to<br></p><p>(0…10).stride(by: 3)<br></p><p>As we can see, this syntax can replace both stride(from:to:by:) and stride(from:through:by:), and in my opinion it is more in line with the rest of Swift 3, similar to how Range.init(start:end:) will be deprecated in Swift 3 in favor of the … and ..&lt; operators.<br></p><p>I’m not sure if this proposed stride(by:) method could replace all uses of stride(from:to:by:) and stride(from:through:by:), but I think that at the very least it would be a nice addition to the standard library.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a stride(by:) method to ClosedRange</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>We&#39;ve had this discussion on a few occasions. Unfortunately, copying links<br>at the moment is a little tough, but I hope to do so at a later time (or<br>others can jump in here).<br></p><p>The gist of the previous discussion centered on a few objections:<br>* that stride(by:), or rather striding(by:), was too verbose<br>* that both stride(from:to:by:) and Range.striding(by:) should not<br>co-exist, so one would have to be removed in favor of the other<br>* that there was no one obvious behavior with a negative stride size (range<br>operators require a smaller number on the lhs and a bigger one on the rhs,<br>so you can&#39;t write `9...0`, but stride(from:to:by) can start from a bigger<br>number to a smaller one, so there is a difference here that went through a<br>lot of bikeshedding; there were several important people that made it clear<br>that Range would not be modified for this use case, so it&#39;s stride<br>semantics that must change)<br>* that for floating point ranges, removing stride(from:to:by:) in favor of<br>striding(by:) would eliminate the possibility of expressing certain strides<br>with open lower bound and negative stride size, partially motivating new<br>range operators that are a whole nother issue<br></p><p><br>On Fri, May 20, 2016 at 4:19 PM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; If ClosedRange (Range in Swift 2.2.1) has a stride(by:) method, we can<br>&gt; change<br>&gt;<br>&gt; stride(from: 0, to: 10, by: 3)<br>&gt;<br>&gt; to<br>&gt;<br>&gt; (0..&lt;10).stride(by: 3)<br>&gt;<br>&gt; and similarly, we can change<br>&gt;<br>&gt; stride(from: 0, through: 10, by: 3)<br>&gt;<br>&gt; to<br>&gt;<br>&gt; (0…10).stride(by: 3)<br>&gt;<br>&gt; As we can see, this syntax can replace both stride(from:to:by:) and<br>&gt; stride(from:through:by:), and in my opinion it is more in line with the<br>&gt; rest of Swift 3, similar to how Range.init(start:end:) will be deprecated<br>&gt; in Swift 3 in favor of the … and ..&lt; operators.<br>&gt;<br>&gt; I’m not sure if this proposed stride(by:) method could replace all uses of<br>&gt; stride(from:to:by:) and stride(from:through:by:), but I think that at the<br>&gt; very least it would be a nice addition to the standard library.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/8672b0e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a stride(by:) method to ClosedRange</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>May 21, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; * that there was no one obvious behavior with a negative stride size (range operators require a smaller number on the lhs and a bigger one on the rhs, so you can&#39;t write `9...0`, but stride(from:to:by) can start from a bigger number to a smaller one, so there is a difference here that went through a lot of bikeshedding; there were several important people that made it clear that Range would not be modified for this use case, so it&#39;s stride semantics that must change)<br>&gt; * that for floating point ranges, removing stride(from:to:by:) in favor of striding(by:) would eliminate the possibility of expressing certain strides with open lower bound and negative stride size, partially motivating new range operators that are a whole nother issue<br></p><p><br>These are all great reasons why stride(from:to:by:) shouldn’t be removed, that I had not thought of. But isn’t this a good reason to let both function co-exist?<br></p><p>For example: (0..&lt;10).striding(by: 3) and stride(from: 0, to: 10, by: 3) look quite similar. However, in case we already have a range variable, someRange.striding(by: 3) is obviously a lot more readable than stride(from: someRange.startIndex, to: someRange.endIndex, by: 3). The reason I’m giving this example is that the two functions can have quite different use cases, so I’m unsure why one of them must be removed in favor of the other.<br></p><p>&gt; * that stride(by:), or rather striding(by:), was too verbose<br></p><p>striding(by:) doesn’t have the from, to, though parameter labels that the Swift 3 stride functions have, so to me this new method seems less verbose than the others. Maybe it depends on how you look at it. “to” and “through” basically refer to the “.” and “&lt;“ tails of the “…” and “..&lt;“ operators respectively, so that’s mainly why I think striding(by:) would be a cleaner and more intuitive way to stride through a sequence.<br></p><p>&gt; On 21 May 2016, at 00:07, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt; We&#39;ve had this discussion on a few occasions. Unfortunately, copying links at the moment is a little tough, but I hope to do so at a later time (or others can jump in here).<br>&gt; <br>&gt; The gist of the previous discussion centered on a few objections:<br>&gt; * that stride(by:), or rather striding(by:), was too verbose<br>&gt; * that both stride(from:to:by:) and Range.striding(by:) should not co-exist, so one would have to be removed in favor of the other<br>&gt; * that there was no one obvious behavior with a negative stride size (range operators require a smaller number on the lhs and a bigger one on the rhs, so you can&#39;t write `9...0`, but stride(from:to:by) can start from a bigger number to a smaller one, so there is a difference here that went through a lot of bikeshedding; there were several important people that made it clear that Range would not be modified for this use case, so it&#39;s stride semantics that must change)<br>&gt; * that for floating point ranges, removing stride(from:to:by:) in favor of striding(by:) would eliminate the possibility of expressing certain strides with open lower bound and negative stride size, partially motivating new range operators that are a whole nother issue<br>&gt; <br>&gt; <br>&gt; On Fri, May 20, 2016 at 4:19 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; If ClosedRange (Range in Swift 2.2.1) has a stride(by:) method, we can change<br>&gt; <br>&gt; stride(from: 0, to: 10, by: 3)<br>&gt; <br>&gt; to<br>&gt; <br>&gt; (0..&lt;10).stride(by: 3)<br>&gt; <br>&gt; and similarly, we can change<br>&gt; <br>&gt; stride(from: 0, through: 10, by: 3)<br>&gt; <br>&gt; to<br>&gt; <br>&gt; (0…10).stride(by: 3)<br>&gt; <br>&gt; As we can see, this syntax can replace both stride(from:to:by:) and stride(from:through:by:), and in my opinion it is more in line with the rest of Swift 3, similar to how Range.init(start:end:) will be deprecated in Swift 3 in favor of the … and ..&lt; operators.<br>&gt; <br>&gt; I’m not sure if this proposed stride(by:) method could replace all uses of stride(from:to:by:) and stride(from:through:by:), but I think that at the very least it would be a nice addition to the standard library.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/5c11735c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a stride(by:) method to ClosedRange</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, May 20, 2016 at 5:40 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; * that there was no one obvious behavior with a negative stride size<br>&gt; (range operators require a smaller number on the lhs and a bigger one on<br>&gt; the rhs, so you can&#39;t write `9...0`, but stride(from:to:by) can start from<br>&gt; a bigger number to a smaller one, so there is a difference here that went<br>&gt; through a lot of bikeshedding; there were several important people that<br>&gt; made it clear that Range would not be modified for this use case, so it&#39;s<br>&gt; stride semantics that must change)<br>&gt; * that for floating point ranges, removing stride(from:to:by:) in favor of<br>&gt; striding(by:) would eliminate the possibility of expressing certain strides<br>&gt; with open lower bound and negative stride size, partially motivating new<br>&gt; range operators that are a whole nother issue<br>&gt;<br>&gt;<br>&gt; These are all great reasons why stride(from:to:by:) shouldn’t be removed,<br>&gt; that I had not thought of. But isn’t this a good reason to let both<br>&gt; function co-exist?<br>&gt;<br>&gt; For example: (0..&lt;10).striding(by: 3) and stride(from: 0, to: 10, by: 3)<br>&gt; look quite similar. However, in case we already have a range variable,<br>&gt; someRange.striding(by: 3) is obviously a lot more readable than<br>&gt; stride(from: someRange.startIndex, to: someRange.endIndex, by: 3). The<br>&gt; reason I’m giving this example is that the two functions can have quite<br>&gt; different use cases, so I’m unsure why one of them must be removed in favor<br>&gt; of the other.<br>&gt;<br>&gt; * that stride(by:), or rather striding(by:), was too verbose<br>&gt;<br>&gt;<br>&gt; striding(by:) doesn’t have the from, to, though parameter labels that the<br>&gt; Swift 3 stride functions have, so to me this new method seems less verbose<br>&gt; than the others. Maybe it depends on how you look at it. “to” and “through”<br>&gt; basically refer to the “.” and “&lt;“ tails of the “…” and “..&lt;“ operators<br>&gt; respectively, so that’s mainly why I think striding(by:) would be a cleaner<br>&gt; and more intuitive way to stride through a sequence.<br>&gt;<br>&gt;<br>Not all of these bullet points I&#39;ve summarized above were points of view<br>that I personally espouse :)<br></p><p><br>&gt; On 21 May 2016, at 00:07, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; We&#39;ve had this discussion on a few occasions. Unfortunately, copying links<br>&gt; at the moment is a little tough, but I hope to do so at a later time (or<br>&gt; others can jump in here).<br>&gt;<br>&gt; The gist of the previous discussion centered on a few objections:<br>&gt; * that stride(by:), or rather striding(by:), was too verbose<br>&gt; * that both stride(from:to:by:) and Range.striding(by:) should not<br>&gt; co-exist, so one would have to be removed in favor of the other<br>&gt; * that there was no one obvious behavior with a negative stride size<br>&gt; (range operators require a smaller number on the lhs and a bigger one on<br>&gt; the rhs, so you can&#39;t write `9...0`, but stride(from:to:by) can start from<br>&gt; a bigger number to a smaller one, so there is a difference here that went<br>&gt; through a lot of bikeshedding; there were several important people that<br>&gt; made it clear that Range would not be modified for this use case, so it&#39;s<br>&gt; stride semantics that must change)<br>&gt; * that for floating point ranges, removing stride(from:to:by:) in favor of<br>&gt; striding(by:) would eliminate the possibility of expressing certain strides<br>&gt; with open lower bound and negative stride size, partially motivating new<br>&gt; range operators that are a whole nother issue<br>&gt;<br>&gt;<br>&gt; On Fri, May 20, 2016 at 4:19 PM, Tim Vermeulen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; If ClosedRange (Range in Swift 2.2.1) has a stride(by:) method, we can<br>&gt;&gt; change<br>&gt;&gt;<br>&gt;&gt; stride(from: 0, to: 10, by: 3)<br>&gt;&gt;<br>&gt;&gt; to<br>&gt;&gt;<br>&gt;&gt; (0..&lt;10).stride(by: 3)<br>&gt;&gt;<br>&gt;&gt; and similarly, we can change<br>&gt;&gt;<br>&gt;&gt; stride(from: 0, through: 10, by: 3)<br>&gt;&gt;<br>&gt;&gt; to<br>&gt;&gt;<br>&gt;&gt; (0…10).stride(by: 3)<br>&gt;&gt;<br>&gt;&gt; As we can see, this syntax can replace both stride(from:to:by:) and<br>&gt;&gt; stride(from:through:by:), and in my opinion it is more in line with the<br>&gt;&gt; rest of Swift 3, similar to how Range.init(start:end:) will be deprecated<br>&gt;&gt; in Swift 3 in favor of the … and ..&lt; operators.<br>&gt;&gt;<br>&gt;&gt; I’m not sure if this proposed stride(by:) method could replace all uses<br>&gt;&gt; of stride(from:to:by:) and stride(from:through:by:), but I think that at<br>&gt;&gt; the very least it would be a nice addition to the standard library.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/7f5e9794/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
