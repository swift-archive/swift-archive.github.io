<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 19, 2016 at 11:00:00pm</p></header><div class="content"><p>Thanks Brent,<br></p><p>I managed to confuse at least two people! I&#39;ve stated it in the grammar,<br>but forgot to give an example:<br></p><p>===begin===<br>Multiple precedence relationships can be stated for a single precedence<br>group. Example:<br>```swift<br>precedencegroup A { }<br>precedencegroup C { }<br>precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>```<br>By transitivity, precedence of C becomes greater than precedence of A.<br>===end===<br></p><p>As you can see, your suggested syntax would not look good, because there<br>can be any number of precedence declarations.<br></p><p>But I agree that bulkiness of my syntax is a problem.<br>I can think of two solutions:<br></p><p>1. Global-scope precedence relationships. Example:<br></p><p>precedencegroup B : associativity(left)<br>precedencerelation B &gt; A<br>precedencerelation B &lt; C<br>infix operator &lt;$&gt; : B<br></p><p>It&#39;s already included as an alternate solution.<br></p><p>2. Limit precedence relationships.<br></p><p>Do we really need a full-blown Directed Acyclic Graph?<br>Could `above` and `between` be enough?<br></p><p>Example:<br></p><p>precedencegroup B : between(A, C)<br></p><p>This is one of dark places of the proposal, obviously underdiscussed.<br>Are there practical situations other than `above` and `between`?<br>Do we really need unlimited relationships per one precedencegroup?<br></p><p>- Anton<br></p><p>Brent Royal-Gordon wrote:<br></p><p>&gt; I like this proposal, except for the `precedencegroup` syntax, which I<br>&gt; think is a bit overwrought. Rather than this proposal&#39;s:<br>&gt; precedencegroup Multiplicative {<br>&gt; associativity(left)<br>&gt; precedence(&gt; Additive)<br>&gt; }<br>&gt; I would prefer to see:<br>&gt; precedence Multiplicative &gt; Additive left<br>&gt; (Or possibly, if the `left` is deemed too inexplicable by itself,<br>&gt; `associativity(left)`.) I don&#39;t really think the `precedence` keyword or<br>&gt; the curly brackets bring much to the declaration, and dropping them allows<br>&gt; us to replace the awkward compound `precedencegroup` with the shorter and<br>&gt; equally explanatory `precedence`.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/d54f6bfa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 19, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 3:07 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Brent,<br>&gt; <br>&gt; I managed to confuse at least two people! I&#39;ve stated it in the grammar, but forgot to give an example:<br>&gt; <br>&gt; ===begin===<br>&gt; Multiple precedence relationships can be stated for a single precedence group. Example:<br>&gt; ```swift<br>&gt; precedencegroup A { }<br>&gt; precedencegroup C { }<br>&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt; ```<br>&gt; By transitivity, precedence of C becomes greater than precedence of A.<br>&gt; ===end===<br>&gt; <br>&gt; As you can see, your suggested syntax would not look good, because there can be any number of precedence declarations.<br>&gt; <br>&gt; But I agree that bulkiness of my syntax is a problem.<br>&gt; I can think of two solutions:<br>&gt; <br>&gt; 1. Global-scope precedence relationships. Example:<br>&gt; <br>&gt; precedencegroup B : associativity(left)<br>&gt; precedencerelation B &gt; A<br>&gt; precedencerelation B &lt; C<br>&gt; infix operator &lt;$&gt; : B<br>&gt; <br>&gt; It&#39;s already included as an alternate solution.<br></p><p>Your argument against this in the alternatives is compelling.  We should avoid this one.<br></p><p>&gt; <br>&gt; 2. Limit precedence relationships.<br>&gt; <br>&gt; Do we really need a full-blown Directed Acyclic Graph?<br>&gt; Could `above` and `between` be enough?<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; precedencegroup B : between(A, C)<br></p><p>Brainstorming some other options here based on Brent’s syntax<br></p><p>A list:<br>precedence NewGroup &gt; ExistingGroup, &lt; OtherExistingGroup left<br></p><p>Require braces for multiple precedence levels:<br>precedence NewGroup {<br>	left<br>	&gt; ExistingGroup<br>	&lt; OtherExistingGroup<br>}<br></p><p>I think my preference is this “lightweight” braced option when multiple relations are necessary, with Brent’s syntax as a shorthand for the common case.<br></p><p>&gt; <br>&gt; This is one of dark places of the proposal, obviously underdiscussed.<br>&gt; Are there practical situations other than `above` and `between`?<br>&gt; Do we really need unlimited relationships per one precedence group?<br></p><p>I don’t have a concrete example, but those would not allow you to place a group above two unrelated groups.  I can’t think of a good reason for this restriction unless there are implementation considerations that make it necessary.<br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; Brent Royal-Gordon wrote:<br>&gt; I like this proposal, except for the `precedencegroup` syntax, which I think is a bit overwrought. Rather than this proposal&#39;s:<br>&gt; 	precedencegroup Multiplicative {<br>&gt; 		associativity(left)<br>&gt; 		precedence(&gt; Additive)<br>&gt; 	} <br>&gt; I would prefer to see:<br>&gt; 	precedence Multiplicative &gt; Additive left<br>&gt; (Or possibly, if the `left` is deemed too inexplicable by itself, `associativity(left)`.) I don&#39;t really think the `precedence` keyword or the curly brackets bring much to the declaration, and dropping them allows us to replace the awkward compound `precedencegroup` with the shorter and equally explanatory `precedence`.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/8e8e6a45/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 19, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; I managed to confuse at least two people! I&#39;ve stated it in the grammar, but forgot to give an example:<br>&gt; <br>&gt; ===begin===<br>&gt; Multiple precedence relationships can be stated for a single precedence group. Example:<br>&gt; ```swift<br>&gt; precedencegroup A { }<br>&gt; precedencegroup C { }<br>&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt; ```<br>&gt; By transitivity, precedence of C becomes greater than precedence of A.<br>&gt; ===end===<br>&gt; <br>&gt; As you can see, your suggested syntax would not look good, because there can be any number of precedence declarations.<br></p><p>Ah, I see.<br></p><p>&gt; 2. Limit precedence relationships.<br>&gt; <br>&gt; Do we really need a full-blown Directed Acyclic Graph?<br>&gt; Could `above` and `between` be enough?<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; precedencegroup B : between(A, C)<br>&gt; <br>&gt; This is one of dark places of the proposal, obviously underdiscussed.<br>&gt; Are there practical situations other than `above` and `between`?<br>&gt; Do we really need unlimited relationships per one precedencegroup?<br></p><p>We probably do if you&#39;re serious about having operators whose precedence relative to each other is undefined. Moreover, you actually have to be prepared for *more than* two relationships, or two relationships which are both on the same &quot;side&quot;, so &quot;between&quot; doesn&#39;t cut the mustard.<br></p><p>I can see three ways to fit multiple relationships on one line:<br></p><p>1.	precedence Multiplicative &gt; Additive &lt; BitwiseShift left<br>2.	precedence Multiplicative &gt; Additive, &lt; BitwiseShift left<br>3.	precedence Multiplicative &gt; Additive, Multiplicative &lt; BitwiseShift left<br></p><p>Another option would be to have `precedence` lines declare-or-redeclare *all* of the precedence levels in them, not just the one on the left of the operator. Then you would write something like:<br></p><p>4.	precedence @associativity(left) Multiplicative &gt; Additive<br>	precedence Multiplicative &lt; BitwiseShift<br></p><p>It would be an error to have two `precedence` lines which marked the same precedence level with a different `@associativity`. Of course, we could instead put associativity on its own line, perhaps allowing multiple declarations for compactness:<br></p><p>5.	precedence Multiplicative &gt; Additive<br>	precedence Multiplicative &lt; BitwiseShift<br>	associativity left Cast, Comparative, Multiplicative, Additive<br></p><p>I think 5 is my preference, but if we want a single-line syntax, I&#39;d probably favor 2.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 19, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 19, 2016, at 3:36 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I managed to confuse at least two people! I&#39;ve stated it in the grammar, but forgot to give an example:<br>&gt;&gt; <br>&gt;&gt; ===begin===<br>&gt;&gt; Multiple precedence relationships can be stated for a single precedence group. Example:<br>&gt;&gt; ```swift<br>&gt;&gt; precedencegroup A { }<br>&gt;&gt; precedencegroup C { }<br>&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt; ```<br>&gt;&gt; By transitivity, precedence of C becomes greater than precedence of A.<br>&gt;&gt; ===end===<br>&gt;&gt; <br>&gt;&gt; As you can see, your suggested syntax would not look good, because there can be any number of precedence declarations.<br>&gt; <br>&gt; Ah, I see.<br>&gt; <br>&gt;&gt; 2. Limit precedence relationships.<br>&gt;&gt; <br>&gt;&gt; Do we really need a full-blown Directed Acyclic Graph?<br>&gt;&gt; Could `above` and `between` be enough?<br>&gt;&gt; <br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt; precedencegroup B : between(A, C)<br>&gt;&gt; <br>&gt;&gt; This is one of dark places of the proposal, obviously underdiscussed.<br>&gt;&gt; Are there practical situations other than `above` and `between`?<br>&gt;&gt; Do we really need unlimited relationships per one precedencegroup?<br>&gt; <br>&gt; We probably do if you&#39;re serious about having operators whose precedence relative to each other is undefined. Moreover, you actually have to be prepared for *more than* two relationships, or two relationships which are both on the same &quot;side&quot;, so &quot;between&quot; doesn&#39;t cut the mustard.<br>&gt; <br>&gt; I can see three ways to fit multiple relationships on one line:<br>&gt; <br>&gt; 1.	precedence Multiplicative &gt; Additive &lt; BitwiseShift left<br>&gt; 2.	precedence Multiplicative &gt; Additive, &lt; BitwiseShift left<br>&gt; 3.	precedence Multiplicative &gt; Additive, Multiplicative &lt; BitwiseShift left<br>&gt; <br>&gt; Another option would be to have `precedence` lines declare-or-redeclare *all* of the precedence levels in them, not just the one on the left of the operator. Then you would write something like:<br>&gt; <br>&gt; 4.	precedence @associativity(left) Multiplicative &gt; Additive<br>&gt; 	precedence Multiplicative &lt; BitwiseShift<br>&gt; <br>&gt; It would be an error to have two `precedence` lines which marked the same precedence level with a different `@associativity`. Of course, we could instead put associativity on its own line, perhaps allowing multiple declarations for compactness:<br>&gt; <br>&gt; 5.	precedence Multiplicative &gt; Additive<br>&gt; 	precedence Multiplicative &lt; BitwiseShift<br>&gt; 	associativity left Cast, Comparative, Multiplicative, Additive<br>&gt; <br>&gt; I think 5 is my preference, but if we want a single-line syntax, I&#39;d probably favor 2.<br></p><p>The problem with 5 is that the declaration can be spread out in code (especially if you really want to declare associativity of several groups together).<br></p><p>The advantage of this approach is that if you wanted / needed to declare precedence relation of two groups imported from different modules you could do that.<br></p><p>How do you feel about the idea of making single line declaration a shorthand, and using braces with lightweight syntax when multiple relations are necessary?  I think that is my preference (unless we decide we need the advantage of your #5 that I described).<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 20, 2016 at 12:00:00am</p></header><div class="content"><p>OK, question 2 closed, we do need unlimited relationships.<br>Some critique to Brent&#39;s options:<br>1. No separators, with multiple relations it becomes unobvious, which<br>comparison corresponds to which group<br>2. `left` appears suddenly, it may not be clear that it is associativity<br>3. Where is declaration of the precedence group? It looks like two<br>relationship declarations, but in Swift, all entities tend to be<br>pre-declared<br>4. Remove @, otherwise not that bad<br>5. Actually, that was the very first version of the proposal. Over time, it<br>morphed to version in alternative solutions:<br></p><p>precedencegroup B : associativity(left)<br>precedencerelation B &gt; A<br>precedencerelation B &lt; C<br></p><p>The specific syntax is discussable:<br></p><p>precedencegroup associativity(left) B<br>precedence B &gt; A<br>precedence B &lt; C<br></p><p>We could also stretch inheritance-like syntax:<br></p><p>precedence B : associativity(left), above(A), below(C)<br></p><p>That is my current favourite among one-liners, if we don&#39;t want separate<br>relationship declaration.<br></p><p><br>On Matthew&#39;s version: I like that it is lightweight, but I don&#39;t like that<br>`left` is a &quot;sudden&quot; word again, and that relationships turn into a mess<br>when written on a single line.<br></p><p>- Anton<br></p><p>2016-05-19 23:36 GMT+03:00 Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br></p><p>&gt; &gt; I managed to confuse at least two people! I&#39;ve stated it in the grammar,<br>&gt; but forgot to give an example:<br>&gt; &gt;<br>&gt; &gt; ===begin===<br>&gt; &gt; Multiple precedence relationships can be stated for a single precedence<br>&gt; group. Example:<br>&gt; &gt; ```swift<br>&gt; &gt; precedencegroup A { }<br>&gt; &gt; precedencegroup C { }<br>&gt; &gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt; &gt; ```<br>&gt; &gt; By transitivity, precedence of C becomes greater than precedence of A.<br>&gt; &gt; ===end===<br>&gt; &gt;<br>&gt; &gt; As you can see, your suggested syntax would not look good, because there<br>&gt; can be any number of precedence declarations.<br>&gt;<br>&gt; Ah, I see.<br>&gt;<br>&gt; &gt; 2. Limit precedence relationships.<br>&gt; &gt;<br>&gt; &gt; Do we really need a full-blown Directed Acyclic Graph?<br>&gt; &gt; Could `above` and `between` be enough?<br>&gt; &gt;<br>&gt; &gt; Example:<br>&gt; &gt;<br>&gt; &gt; precedencegroup B : between(A, C)<br>&gt; &gt;<br>&gt; &gt; This is one of dark places of the proposal, obviously underdiscussed.<br>&gt; &gt; Are there practical situations other than `above` and `between`?<br>&gt; &gt; Do we really need unlimited relationships per one precedencegroup?<br>&gt;<br>&gt; We probably do if you&#39;re serious about having operators whose precedence<br>&gt; relative to each other is undefined. Moreover, you actually have to be<br>&gt; prepared for *more than* two relationships, or two relationships which are<br>&gt; both on the same &quot;side&quot;, so &quot;between&quot; doesn&#39;t cut the mustard.<br>&gt;<br>&gt; I can see three ways to fit multiple relationships on one line:<br>&gt;<br>&gt; 1.      precedence Multiplicative &gt; Additive &lt; BitwiseShift left<br>&gt; 2.      precedence Multiplicative &gt; Additive, &lt; BitwiseShift left<br>&gt; 3.      precedence Multiplicative &gt; Additive, Multiplicative &lt;<br>&gt; BitwiseShift left<br>&gt;<br>&gt; Another option would be to have `precedence` lines declare-or-redeclare<br>&gt; *all* of the precedence levels in them, not just the one on the left of the<br>&gt; operator. Then you would write something like:<br>&gt;<br>&gt; 4.      precedence @associativity(left) Multiplicative &gt; Additive<br>&gt;         precedence Multiplicative &lt; BitwiseShift<br>&gt;<br>&gt; It would be an error to have two `precedence` lines which marked the same<br>&gt; precedence level with a different `@associativity`. Of course, we could<br>&gt; instead put associativity on its own line, perhaps allowing multiple<br>&gt; declarations for compactness:<br>&gt;<br>&gt; 5.      precedence Multiplicative &gt; Additive<br>&gt;         precedence Multiplicative &lt; BitwiseShift<br>&gt;         associativity left Cast, Comparative, Multiplicative, Additive<br>&gt;<br>&gt; I think 5 is my preference, but if we want a single-line syntax, I&#39;d<br>&gt; probably favor 2.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/3f6fe62b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 19, 2016, at 4:07 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; OK, question 2 closed, we do need unlimited relationships.<br>&gt; Some critique to Brent&#39;s options:<br>&gt; 1. No separators, with multiple relations it becomes unobvious, which comparison corresponds to which group<br>&gt; 2. `left` appears suddenly, it may not be clear that it is associativity<br>&gt; 3. Where is declaration of the precedence group? It looks like two relationship declarations, but in Swift, all entities tend to be pre-declared<br>&gt; 4. Remove @, otherwise not that bad<br>&gt; 5. Actually, that was the very first version of the proposal. Over time, it morphed to version in alternative solutions:<br>&gt; <br>&gt; precedencegroup B : associativity(left)<br>&gt; precedencerelation B &gt; A<br>&gt; precedencerelation B &lt; C<br>&gt; <br>&gt; The specific syntax is discussable:<br>&gt; <br>&gt; precedencegroup associativity(left) B<br>&gt; precedence B &gt; A<br>&gt; precedence B &lt; C<br>&gt; <br>&gt; We could also stretch inheritance-like syntax:<br>&gt; <br>&gt; precedence B : associativity(left), above(A), below(C)<br>&gt; <br>&gt; That is my current favourite among one-liners, if we don&#39;t want separate relationship declaration.<br>&gt; <br>&gt; <br>&gt; On Matthew&#39;s version: I like that it is lightweight, but I don&#39;t like that `left` is a &quot;sudden&quot; word again, and that relationships turn into a mess when written on a single line.<br></p><p>I suggested adopting two variants.  Use Brent&#39;s original syntax for single relation declarations and use the multi-line braced variant for multiple relations.  We could require the new line separator in the braced version.<br></p><p>If you don&#39;t want to have left unadorned maybe we do this for the shorthand:<br></p><p>precedence B &gt; A associativity left<br></p><p>And this for multiple relations:<br></p><p>precedence C {<br>    &gt; A<br>    &lt; B<br>    associativity left<br>}<br></p><p>In the multiple relation option we could allow associativity to appear at any position in the list or require it to be last for consistency with the single line syntax.<br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-19 23:36 GMT+03:00 Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;&gt; &gt; I managed to confuse at least two people! I&#39;ve stated it in the grammar, but forgot to give an example:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; ===begin===<br>&gt;&gt; &gt; Multiple precedence relationships can be stated for a single precedence group. Example:<br>&gt;&gt; &gt; ```swift<br>&gt;&gt; &gt; precedencegroup A { }<br>&gt;&gt; &gt; precedencegroup C { }<br>&gt;&gt; &gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt; &gt; ```<br>&gt;&gt; &gt; By transitivity, precedence of C becomes greater than precedence of A.<br>&gt;&gt; &gt; ===end===<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; As you can see, your suggested syntax would not look good, because there can be any number of precedence declarations.<br>&gt;&gt; <br>&gt;&gt; Ah, I see.<br>&gt;&gt; <br>&gt;&gt; &gt; 2. Limit precedence relationships.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Do we really need a full-blown Directed Acyclic Graph?<br>&gt;&gt; &gt; Could `above` and `between` be enough?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Example:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; precedencegroup B : between(A, C)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This is one of dark places of the proposal, obviously underdiscussed.<br>&gt;&gt; &gt; Are there practical situations other than `above` and `between`?<br>&gt;&gt; &gt; Do we really need unlimited relationships per one precedencegroup?<br>&gt;&gt; <br>&gt;&gt; We probably do if you&#39;re serious about having operators whose precedence relative to each other is undefined. Moreover, you actually have to be prepared for *more than* two relationships, or two relationships which are both on the same &quot;side&quot;, so &quot;between&quot; doesn&#39;t cut the mustard.<br>&gt;&gt; <br>&gt;&gt; I can see three ways to fit multiple relationships on one line:<br>&gt;&gt; <br>&gt;&gt; 1.      precedence Multiplicative &gt; Additive &lt; BitwiseShift left<br>&gt;&gt; 2.      precedence Multiplicative &gt; Additive, &lt; BitwiseShift left<br>&gt;&gt; 3.      precedence Multiplicative &gt; Additive, Multiplicative &lt; BitwiseShift left<br>&gt;&gt; <br>&gt;&gt; Another option would be to have `precedence` lines declare-or-redeclare *all* of the precedence levels in them, not just the one on the left of the operator. Then you would write something like:<br>&gt;&gt; <br>&gt;&gt; 4.      precedence @associativity(left) Multiplicative &gt; Additive<br>&gt;&gt;         precedence Multiplicative &lt; BitwiseShift<br>&gt;&gt; <br>&gt;&gt; It would be an error to have two `precedence` lines which marked the same precedence level with a different `@associativity`. Of course, we could instead put associativity on its own line, perhaps allowing multiple declarations for compactness:<br>&gt;&gt; <br>&gt;&gt; 5.      precedence Multiplicative &gt; Additive<br>&gt;&gt;         precedence Multiplicative &lt; BitwiseShift<br>&gt;&gt;         associativity left Cast, Comparative, Multiplicative, Additive<br>&gt;&gt; <br>&gt;&gt; I think 5 is my preference, but if we want a single-line syntax, I&#39;d probably favor 2.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/637a27cd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
