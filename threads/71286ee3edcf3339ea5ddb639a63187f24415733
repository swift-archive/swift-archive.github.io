<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>February 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>When I saw the header, I immediately wanted to press &quot;dislike&quot;.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to<br>Swift?<br>I&#39;m not 100% sure, but inclined to say &quot;yes&quot;.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>No. Protocols, which have been greatly enhanced in Swift 2.0, already<br>replaced inheritance in many places.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how<br>do you feel that this proposal compares to those?<br>I primarily associate Swift protocols with Java interfaces, which also got<br>`default` methods. Having &quot;played&quot; with Java in the last few years, I agree<br>that usage of interfaces leads to overall better code style than abstract<br>classes. I have also used Ruby (and Rails), where modules are actually<br>mixins. Their usage proved simple and straightforward.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>I have followed the discussion and have a position based mainly on<br>experience with other languages.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/71285733/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>February 27, 2016 at 01:00:00pm</p></header><div class="content"><p>Is this really becoming an ideological battleground of protocols oriented programming  vs inheritance? We are not discussing how to hold back POP unless making inheritance work better is a threat to it.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 27 Feb 2016, at 10:16, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; What is your evaluation of the proposal?<br>&gt; When I saw the header, I immediately wanted to press &quot;dislike&quot;.<br>&gt; <br>&gt; &gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; I&#39;m not 100% sure, but inclined to say &quot;yes&quot;.<br>&gt; <br>&gt; &gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; No. Protocols, which have been greatly enhanced in Swift 2.0, already replaced inheritance in many places.<br>&gt; <br>&gt; &gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; I primarily associate Swift protocols with Java interfaces, which also got `default` methods. Having &quot;played&quot; with Java in the last few years, I agree that usage of interfaces leads to overall better code style than abstract classes. I have also used Ruby (and Rails), where modules are actually mixins. Their usage proved simple and straightforward.<br>&gt; <br>&gt; &gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; I have followed the discussion and have a position based mainly on experience with other languages.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0026 Abstract classes and methods</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>February 27, 2016 at 05:00:00pm</p></header><div class="content"><p>If both mixins and abstract classes are implemented, we get duplicated<br>functionality, just with different names. Is it right?<br>And I guess I&#39;m biased. I rely on Swift team to decide, maybe include none<br>or both.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/f6f9728a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
