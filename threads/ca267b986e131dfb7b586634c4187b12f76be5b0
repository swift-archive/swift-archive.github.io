<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri May 20 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 19, 2016, at 5:57 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue May 17 2016, Chris Lattner<br>&gt;<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt;&gt;&gt; runs through May 23. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt; through constructive criticism and contribute to the direction of<br>&gt;&gt;&gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt;&gt; want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar<br>&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt;&gt; myself.<br>&gt;&gt; <br>&gt;&gt; We would like to accept the proposal with one modification: rather than<br>&gt;&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt;&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt;&gt; representation of `expression`.<br>&gt;<br>&gt; Is there some performance-driven motivation here, or is this just aesthetics?<br>&gt;<br>&gt; I ask b/c not having a name for this &quot;initializer&quot; here would seem<br>&gt; mildly annoying and asymmetric vis-a-vis `String.init(reflecting:)`;<br>&gt; sure, I can always add an equivalent with a name, but I’m curious if<br>&gt; there’s an argument-from-functionality for the removal.<br></p><p>It&#39;s mostly aesthetics and minimizing redundant API surface area.  We<br>don&#39;t love any of the proposed labels for this usage and feel this API<br>should be substantially lighter-weight than the `reflecting:` one.  We<br>could always go back to providing the global toString() function we once<br>had, but we don&#39;t feel that&#39;s a great answer either.  Since there&#39;s<br>already another way to do this, we think it&#39;s better to remove the API<br>than reshape it in an unsatisfying way.<br></p><p>&gt; Also FWIW I like the idea to use `init(describing:)`, although it’s<br>&gt; still a bit quirky when put side-by-side with `init(reflecting:)`<br>&gt; (since it doesn’t really capture the heart of the distinction between<br>&gt; the two, IMHO).<br>&gt;<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May 21, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 20, 2016, at 7:44 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri May 20 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 5:57 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue May 17 2016, Chris Lattner<br>&gt;&gt; <br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0089: Renaming String.init&lt;T&gt;(_: T)&quot; begins now and<br>&gt;&gt;&gt;&gt; runs through May 23. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt;&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt;&gt;&gt; through constructive criticism and contribute to the direction of<br>&gt;&gt;&gt;&gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt;&gt;&gt; want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;    * If you have used other languages or libraries with a similar<br>&gt;&gt;&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m posting this on behalf of Dmitri Gribenko, and Max Moiseev, and<br>&gt;&gt;&gt; myself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We would like to accept the proposal with one modification: rather than<br>&gt;&gt;&gt; add an argument label, we&#39;d like to drop the String initializer<br>&gt;&gt;&gt; altogether, making `&quot;\(expression)&quot;` the standard way to get a string<br>&gt;&gt;&gt; representation of `expression`.<br>&gt;&gt; <br></p><p>Considering this idea that swift is concerned with speed, and efficiency, and symetry... this is the LAST thing I would ever expect to happen... you&#39;re going to tell us that is does&#39;t matter because the compiler is going to parse the string and then realise that this is not a real printf type of interpolation, but is simple convertion?!<br>Well then lets do it, but in the name of that symetry and economy and efficiency that justifies this one, lets make sure that Int and Float and Double convertions go the same route, right?<br></p><p><br>&gt;&gt; Is there some performance-driven motivation here, or is this just aesthetics?<br>&gt;&gt; <br>&gt;&gt; I ask b/c not having a name for this &quot;initializer&quot; here would seem<br>&gt;&gt; mildly annoying and asymmetric vis-a-vis `String.init(reflecting:)`;<br>&gt;&gt; sure, I can always add an equivalent with a name, but I’m curious if<br>&gt;&gt; there’s an argument-from-functionality for the removal.<br>&gt; <br>&gt; It&#39;s mostly aesthetics and minimizing redundant API surface area.  We<br>&gt; don&#39;t love any of the proposed labels for this usage and feel this API<br>&gt; should be substantially lighter-weight than the `reflecting:` one.  We<br>&gt; could always go back to providing the global toString() function we once<br>&gt; had, but we don&#39;t feel that&#39;s a great answer either.  Since there&#39;s<br>&gt; already another way to do this, we think it&#39;s better to remove the API<br>&gt; than reshape it in an unsatisfying way.<br></p><p>I am quite shocked that forcing people to rhink about interpolation can be seen as a more intuitive, more &#39;swift&#39; soluttion than even a plain-obvious toString()...<br></p><p><br>&gt; <br>&gt;&gt; Also FWIW I like the idea to use `init(describing:)`, although it’s<br>&gt;&gt; still a bit quirky when put side-by-side with `init(reflecting:)`<br>&gt;&gt; (since it doesn’t really capture the heart of the distinction between<br>&gt;&gt; the two, IMHO).<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
