<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 15, 2016 at 03:00:00pm</p></header><div class="content"><p>on Fri May 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note<br>&gt;&gt; that the value is ignored. This makes sense in many cases, but<br>&gt;&gt; creates a bit of a mess in the case of an empty, void-returning<br>&gt;<br>&gt;&gt; closure:<br>&gt;&gt; <br>&gt;&gt; doThing(withCompletion: { _ in })<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to suggest that the compiler promote the empty closure<br>&gt;&gt; literal {} to any void-returning closure type so that this could be<br>&gt;&gt; written:<br>&gt;&gt; <br>&gt;&gt; doThing(withCompletion: {})<br>&gt;&gt; <br>&gt;&gt; This encourages the use of empty closures over optional closures,<br>&gt;&gt; which I think is open for debate. In general I try to avoid<br>&gt;&gt; optionals when they can be precisely replaced with a non-optional<br>&gt;&gt; value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt;&gt; <br>&gt;&gt; The alternative is to not do this, but encourage that any closure<br>&gt;&gt; that could reasonably be empty should in fact be optional. I would<br>&gt;&gt; then want Cocoa functions with void-returning closures to be<br>&gt;&gt; imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt;<br>&gt; +1. In general, I think we should allow implicit arguments, without<br>&gt; requiring the closure to use all the implicit $n variables like we do<br>&gt; today. These should all be valid:<br>&gt;<br>&gt; let _: () -&gt; () = {}<br>&gt; let _: (Int) -&gt; () = {}<br>&gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; let _: (Int, Int) -&gt; Int = { $1 }<br></p><p>+1<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>Removing &quot;_ in&quot; from empty closures</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>May 17, 2016 at 11:00:00am</p></header><div class="content"><p>+1<br></p><p><br>All the best,<br></p><p>Nicholas<br></p><p>Linked in:<br>http://lnkd.in/328U22<br></p><p><br>On Mon, May 16, 2016 at 7:27 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri May 13 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On May 13, 2016, at 9:13 AM, Rob Napier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Currently if a closure takes a value, it requires &quot;_ in&quot; to note<br>&gt; &gt;&gt; that the value is ignored. This makes sense in many cases, but<br>&gt; &gt;&gt; creates a bit of a mess in the case of an empty, void-returning<br>&gt; &gt;<br>&gt; &gt;&gt; closure:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: { _ in })<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I&#39;d like to suggest that the compiler promote the empty closure<br>&gt; &gt;&gt; literal {} to any void-returning closure type so that this could be<br>&gt; &gt;&gt; written:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; doThing(withCompletion: {})<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This encourages the use of empty closures over optional closures,<br>&gt; &gt;&gt; which I think is open for debate. In general I try to avoid<br>&gt; &gt;&gt; optionals when they can be precisely replaced with a non-optional<br>&gt; &gt;&gt; value. Furthermore, most Cocoa completion handlers are not optional.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The alternative is to not do this, but encourage that any closure<br>&gt; &gt;&gt; that could reasonably be empty should in fact be optional. I would<br>&gt; &gt;&gt; then want Cocoa functions with void-returning closures to be<br>&gt; &gt;&gt; imported as optionals to avoid &quot;{ _ in }&quot;.<br>&gt; &gt;<br>&gt; &gt; +1. In general, I think we should allow implicit arguments, without<br>&gt; &gt; requiring the closure to use all the implicit $n variables like we do<br>&gt; &gt; today. These should all be valid:<br>&gt; &gt;<br>&gt; &gt; let _: () -&gt; () = {}<br>&gt; &gt; let _: (Int) -&gt; () = {}<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { 5 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $0 }<br>&gt; &gt; let _: (Int, Int) -&gt; Int = { $1 }<br>&gt;<br>&gt; +1<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/9bc74f85/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
