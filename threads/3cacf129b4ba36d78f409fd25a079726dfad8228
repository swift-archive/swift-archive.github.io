<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at:<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 11, 2016 at 12:00:00pm</p></header><div class="content"><p>I’m sorta in favor… Reading the proposal, I agree that something needed to be done, but I think a better solution would’ve been to disallow comments between operators and their operands. Sorry, I didn’t see the thread about it, or I would’ve said something there.<br></p><p>Anyway, if it’s this vs leaving it alone, then +1 for this.<br></p><p>-Dave Sweeris<br></p><p>&gt; On Mar 11, 2016, at 12:00 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>+1 for the chosen path of the proposal.<br></p><p>However, one alternative is to remove /* ... */ style comments all together. Every example in the proposal are examples of commenting style that really have no business in the code.<br></p><p>-David<br></p><p>&gt; On Mar 11, 2016, at 10:12 AM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m sorta in favor… Reading the proposal, I agree that something needed to be done, but I think a better solution would’ve been to disallow comments between operators and their operands. Sorry, I didn’t see the thread about it, or I would’ve said something there.<br>&gt; <br>&gt; Anyway, if it’s this vs leaving it alone, then +1 for this.<br>&gt; <br>&gt; -Dave Sweeris<br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 12:00 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 11, 2016 at 11:00:00am</p></header><div class="content"><p>I can&#39;t agree that /*…*/ comments are useless. The examples in the proposal aren&#39;t things I would write, but I can certainly think of other places I use them.<br></p><p>if foo &gt; 0 {<br>} else if foo &lt; 0 {<br>} else /* foo == 0 */ {<br>}<br></p><p>// We can&#39;t use SpecificType here because of XXX.<br>let foo: protocol&lt;OtherType/*, SpecificType*/&gt; = bar()<br></p><p>…and then given that we have /**/ comments in the language, we should define their behavior even in places you and I personally don&#39;t intend to write them.<br></p><p>Jordan<br></p><p><br>&gt; On Mar 11, 2016, at 10:32 , David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 for the chosen path of the proposal.<br>&gt; <br>&gt; However, one alternative is to remove /* ... */ style comments all together. Every example in the proposal are examples of commenting style that really have no business in the code.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 10:12 AM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m sorta in favor… Reading the proposal, I agree that something needed to be done, but I think a better solution would’ve been to disallow comments between operators and their operands. Sorry, I didn’t see the thread about it, or I would’ve said something there.<br>&gt;&gt; <br>&gt;&gt; Anyway, if it’s this vs leaving it alone, then +1 for this.<br>&gt;&gt; <br>&gt;&gt; -Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 11, 2016, at 12:00 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/241f9a5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 11, 2016 at 01:00:00pm</p></header><div class="content"><p>Yeah, I use them for stuff like that a lot, or if my comments are more, um, “paragraphical&quot; in nature (I can be somewhat long-winded at times).<br>&gt; On Mar 11, 2016, at 1:29 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I can&#39;t agree that /*…*/ comments are useless. The examples in the proposal aren&#39;t things I would write, but I can certainly think of other places I use them.<br>&gt; <br>&gt; if foo &gt; 0 {<br>&gt; } else if foo &lt; 0 {<br>&gt; } else /* foo == 0 */ {<br>&gt; }<br>&gt; <br>&gt; // We can&#39;t use SpecificType here because of XXX.<br>&gt; let foo: protocol&lt;OtherType/*, SpecificType*/&gt; = bar()<br>&gt; <br>&gt; …and then given that we have /**/ comments in the language, we should define their behavior even in places you and I personally don&#39;t intend to write them.<br>&gt; <br>&gt; Jordan<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/3fb4d952/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>March 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; I can&#39;t agree that /*…*/ comments are useless.<br></p><p>I didn&#39;t say they are useless, but they are the source of many troubles. Sure, they do bring their own value to the table as well.<br></p><p>&gt; The examples in the proposal aren&#39;t things I would write, but I can certainly think of other places I use them.<br></p><p><br>I argue that your examples are comments I&#39;d red-flag and could be trivially written in a way with single-line comments.<br></p><p>} else /* foo == 0 */ {<br></p><p>vs.<br></p><p>} else { // foo == 0<br></p><p>The `// foo == 0` comment is what I&#39;d call a &quot;bad comment&quot; though. It is a comment that cannot be trusted as it cannot be verified by the compiler and has great potential for being misleading. Depending on the size of the blocks of the code in the condition statements, it&#39;s also fairly obvious.<br></p><p>// We can&#39;t use SpecificType here because of XXX.<br>let foo: protocol&lt;OtherType/*, SpecificType*/&gt; = bar()<br></p><p>vs.<br></p><p>// We can&#39;t use SpecificType here because of XXX.<br>// Ideally: &lt;OtherType, SpecificType&gt;<br>let foo: protocol&lt;OtherType&gt; = bar()<br></p><p>I&#39;d argue that both of these changes also make the code clearer as annotation data is not intermingled with what will actually be the code that will execute. In other words, as a code author, I don&#39;t need to parse out the comment block in my head to see what the code is really saying.<br></p><p>&gt; …and then given that we have /**/ comments in the language, we should define their behavior even in places you and I personally don&#39;t intend to write them.<br></p><p>Sure. I agreed +1 to the proposal as stated. However, I think there are other alternatives that weren&#39;t discussed in the thread or in the proposal.<br></p><p>-David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/ae2f95ef/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>March 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Mar 11, 2016, at 1:12 PM, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m sorta in favor… Reading the proposal, I agree that something needed to be done, but I think a better solution would’ve been to disallow comments between operators and their operands. Sorry, I didn’t see the thread about it, or I would’ve said something there.<br></p><p>I think there are cases where comments between operators &amp; operands can be useful in long expressions. Arguably there are nicer ways to write this, but this pattern is pretty common in mathy code:<br></p><p>let total = (a +      // base amount<br>             b / 2 +  // half of leftovers from last time<br>             c + 1)   // fudge factor<br></p><p>&gt; Anyway, if it’s this vs leaving it alone, then +1 for this.<br>&gt; <br>&gt; -Dave Sweeris<br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 12:00 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/c9bd697a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 11, 2016 at 02:00:00pm</p></header><div class="content"><p>That’s a good point. I was only thinking of the “/*…*/“ style. The inherent line breaks in the “//“ style make things much clearer.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 11, 2016, at 1:41 PM, Jesse Rusak &lt;me at jesserusak.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 11, 2016, at 1:12 PM, Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m sorta in favor… Reading the proposal, I agree that something needed to be done, but I think a better solution would’ve been to disallow comments between operators and their operands. Sorry, I didn’t see the thread about it, or I would’ve said something there.<br>&gt; <br>&gt; I think there are cases where comments between operators &amp; operands can be useful in long expressions. Arguably there are nicer ways to write this, but this pattern is pretty common in mathy code:<br>&gt; <br>&gt; let total = (a +      // base amount<br>&gt;              b / 2 +  // half of leftovers from last time<br>&gt;              c + 1)   // fudge factor<br>&gt; <br>&gt;&gt; Anyway, if it’s this vs leaving it alone, then +1 for this.<br>&gt;&gt; <br>&gt;&gt; -Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 11, 2016, at 12:00 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of “Clarify interaction between comments &amp; operators” begins now and runs through March 15, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0037-clarify-comments-and-operators.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/65e70bf6/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 11, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I’m in favour of it; comments shouldn’t conflict with parsing of operators, no matter where someone decides to put them. My preference is towards the “treat comments as absent” alternative however; while I do agree in principle that comments should be placed stupidly, I’m not sure that that’s something we should try to control here. That said, if use of whitespace as proposed would be easier for the compiler either in speed or complexity, then I’m fine with it as a solution too.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I’d say so; comments shouldn’t be allowed to affect the compiler IMO, yet currently they can.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read of the proposal, considered the alternatives.<br></p><p><br>Also I’m a -1 to suggestions that /* … */ style comments should be removed; I use these almost exclusively as I can never be 100% sure that a comment won’t need to spill onto more lines, and I hate how multi-line // comments look. I use // for end of line comments though, or for adding // MARK: tags to code sections.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 12, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I think the alternative to simply ignore comments would be a better direction, especially since the proposal breaks code.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Other languages ignore comments, and hence I think the alternative discussed in the proposal represents a better direction.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p><p>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Review] SE-0037 Clarify interaction between comments &amp; operators</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>March 12, 2016 at 02:00:00pm</p></header><div class="content"><p>Hey Patrick,<br></p><p>Thanks for the feedback. A couple comments below:<br></p><p>&gt; On Mar 12, 2016, at 2:16 PM, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 	• What is your evaluation of the proposal?<br>&gt; <br>&gt; I think the alternative to simply ignore comments would be a better direction, especially since the proposal breaks code.<br></p><p>Unfortunately, the alternative proposal (ignoring comments) could also break code because comments are currently treated as non-whitespace in most cases. For example, this currently works:<br></p><p>1 /* */+2<br></p><p>(Because the “+” has no whitespace on either side.) If comments were completely ignored, this would be an error since there is whitespace to the left of the “+” but not the right.<br></p><p>If you’re interested in a more complete discussion of this direction, you can see an earlier draft which proposed this in the history &lt;https://github.com/apple/swift-evolution/blob/c719adf87dae3382319e387fcf3145322a9f1239/proposals/0037-clarify-comments-and-operators.md&gt;.<br></p><p>&gt;&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No.<br></p><p>This is admittedly a small issue, so I can understand this point of view. The current state, though, seems pretty surprising to me — comments are treated as non-whitespace in most cases, ignored in others, and the contents of comments can affect the interpretation of the surrounding code. These are pretty clearly bugs which, to me at least, seem worth fixing.<br></p><p>&gt;&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; No.<br>&gt; <br>&gt;&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Other languages ignore comments, and hence I think the alternative discussed in the proposal represents a better direction.<br>&gt; <br>&gt;&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read.<br>&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/f462be51/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
