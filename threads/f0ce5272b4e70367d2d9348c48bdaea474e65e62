<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/62749cfcefbf700862299872a12b2d57?s=50"></div><header><strong>Fwd: [Pitch] Single-quotes for Character literals</strong> from <string>Andrew Duncan</string> &lt;andrewzboard at gmail.com&gt;<p>December 21, 2015 at 03:00:00pm</p></header><div class="content"><p>I am re-posting this with the [Pitch] header. I have had two responses, which I will include and to which I will respond.<br></p><p>We have all watched the evolution of the String class, and the amazing jockeying required to accommodate Unicode combining characters and the like. At this point, the distinction between Characters and Strings and Arrays of Characters (myString.characters) is becoming clearer.<br></p><p>But in the source code, there is ambiguity. What is &quot;a&quot;, a character literal or a string of length 1? I suggest reinstating the C convention of using single-quotes for delimiting Characters.<br></p><p>&gt; On 21 Dec, 2015, at 9:25, Stephen Celis &lt;stephen.celis at gmail.com&gt; wrote:<br>&gt; <br>&gt; What are you looking to solve for here? Have you encountered specific bugs because of this?<br></p><p>I am writing a compiler and need to be aware at all times of the distinction. In the playground, I was toying with<br></p><p>&quot;a b c&quot;.characters.split{$0 == &quot; &quot;}.map(String.init)  // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br>Array(&quot;abc&quot;.characters)	                              // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br></p><p>(Rant: my System Prefs have ‚Äúsmart‚Äù quotes turned off, but Mail insists. Please advise.)<br></p><p>The first expression yields an array of one-character Strings; the second an array of Characters. Hard to distinguish by eye. Important to distinguish by brain.<br></p><p>&gt; You can usually disambiguate by investigating where resolution takes place (using an IDE like Xcode right now makes this a lot easier).<br></p><p>Agreed, but I think this is still a pretty fundamental point. Not even syntactic but lexical.<br></p><p>&gt; On 21 Dec, 2015, at 14:06, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; In what context would a character literal (like say &#39;üá∫üá∏&#39;) have value?<br></p><p>Not sure what you mean; the word ‚Äúvalue‚Äù is ambiguous in that sentence. Clarify?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Fwd: [Pitch] Single-quotes for Character literals</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>December 22, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; I suggest reinstating the C convention of using single-quotes for delimiting Characters.<br>I rarely use chars, but from a theoretical standpoint, I&#39;m not so happy with the ambiguity as well‚Ä¶<br>But one suggestion if you want to make a proposal:<br>Char has a fixed length (well, at least that was the case before unicode ;-), so there is no need for a closing delimiter. Leaving the second &#39; (or whatever might be used) out would save one out of three keystrokes and no one could try to create characters like<br>&#39;this isn&#39;t allowed here&#39;<br></p><p>Best regards,<br>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Single-quotes for Character literals</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 21, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 15:55 , Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; I suggest reinstating the C convention of using single-quotes for delimiting Characters.<br>&gt; I rarely use chars, but from a theoretical standpoint, I&#39;m not so happy with the ambiguity as well‚Ä¶<br>&gt; But one suggestion if you want to make a proposal:<br>&gt; Char has a fixed length (well, at least that was the case before unicode ;-), so there is no need for a closing delimiter. Leaving the second &#39; (or whatever might be used) out would save one out of three keystrokes and no one could try to create characters like<br>&gt; &#39;this isn&#39;t allowed here&#39;<br></p><p>Unicode is incredibly important, as is deciding whether you want to create a Character or UnicodeScalar (or some other type). In practice I don&#39;t think either Character or UnicodeScalar is common enough to deserve a special syntax.<br></p><p>Andrew, you said your use case is a compiler? I believe Dmitri and Dave have some ideas for how better to work with text-like structural data (code, markup, JSON, etc), but they&#39;re not ready to share yet. Superficially making Character more convenient won&#39;t really help with the rest of the issues in this space; a larger model is needed.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151221/ddd8b93a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
