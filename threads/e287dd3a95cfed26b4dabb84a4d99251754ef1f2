<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/424a3f4fec228fa9e2ad948ca70f1791?s=50"></div><header><strong>changes to pointer data types in Xcode 8 beta 6</strong> from <string>davelist at mac.com</string> &lt;davelist at mac.com&gt;<p>August 15, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;m trying to convert the following code (from the Big Nerd Ranch&#39;s Freddy JSON parser) that works in Xcode 8 beta 5 and convert it to work with beta 6. Essentially it appears it needs to take a Data object and convert it to a UnsafeBufferPointer&lt;UInt8&gt; if I understand it correctly.<br></p><p><br>    /// Creates a `JSONParser` ready to parse UTF-8 encoded `NSData`.<br>    ///<br>    /// If the data is mutable, it is copied before parsing. The data&#39;s lifetime<br>    /// is extended for the duration of parsing.<br>    init(utf8Data inData: Data) {<br>        let data = (inData as NSData).copy() as! Data<br>        let buffer = UnsafeBufferPointer(start: UnsafePointer&lt;UInt8&gt;((data as NSData).bytes), count: data.count)<br>        self.init(buffer: buffer, owner: data)<br>    }<br></p><p>And this case appears to be going from a String to UnsafeBufferPointer&lt;Uint8&gt;<br></p><p><br>    /// Creates a `JSONParser` from the code units represented by the `string`.<br>    ///<br>    /// The synthesized string is lifetime-extended for the duration of parsing.<br>    init(string: String) {<br>        let codePoints = string.nulTerminatedUTF8<br>        let buffer = codePoints.withUnsafeBufferPointer { nulTerminatedBuffer in<br>            // don&#39;t want to include the nul termination in the buffer - trim it off<br>            UnsafeBufferPointer(start: nulTerminatedBuffer.baseAddress, count: nulTerminatedBuffer.count - 1)<br>        }<br>        self.init(buffer: buffer, owner: codePoints)<br>    }<br></p><p>}<br></p><p><br>I understand pointers from my C/C++/Objective-C days but I don&#39;t yet understand the various Swift pointer types. Any help is appreciated.<br></p><p>Note: I don&#39;t work for Big Nerd Ranch. I&#39;m just trying to use the code and better understand the various Swift pointer types.<br></p><p>Thanks,<br>Dave Reed<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>changes to pointer data types in Xcode 8 beta 6</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>August 15, 2016 at 06:00:00pm</p></header><div class="content"><p>Nerd here!<br></p><p>That part of the code ends up not needing to go through the<br>UnsafeRawPointer API, as it&#39;s processing UTF-8 bytes, see also:<br>&lt;https://github.com/bignerdranch/Freddy/pull/191&gt;.<br></p><p>That being said, good resources for reading about the new pointer system<br>are:<br>- [SE-0107]:<br>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>- [The Apple API reference], once it&#39;s updated:<br>&lt;https://developer.apple.com/reference/swift&gt;<br></p><p>You can also look up the documentation using the &quot;Documentation and API<br>Reference&quot; menu in Xcode 8 Beta 6, as it&#39;s currently updated.<br></p><p>Sincerely,<br>  Zachary Waldowski<br>  zachary at bignerdranch.com<br></p><p>On Mon, Aug 15, 2016, at 03:05 PM, Dave Reed via swift-users wrote:<br>&gt; I&#39;m trying to convert the following code (from the Big Nerd Ranch&#39;s<br>&gt; Freddy JSON parser) that works in Xcode 8 beta 5 and convert it to work<br>&gt; with beta 6. Essentially it appears it needs to take a Data object and<br>&gt; convert it to a UnsafeBufferPointer&lt;UInt8&gt; if I understand it correctly.<br>&gt; <br>&gt; <br>&gt;     /// Creates a `JSONParser` ready to parse UTF-8 encoded `NSData`.<br>&gt;     ///<br>&gt;     /// If the data is mutable, it is copied before parsing. The data&#39;s<br>&gt;     lifetime<br>&gt;     /// is extended for the duration of parsing.<br>&gt;     init(utf8Data inData: Data) {<br>&gt;         let data = (inData as NSData).copy() as! Data<br>&gt;         let buffer = UnsafeBufferPointer(start:<br>&gt;         UnsafePointer&lt;UInt8&gt;((data as NSData).bytes), count: data.count)<br>&gt;         self.init(buffer: buffer, owner: data)<br>&gt;     }<br>&gt; <br>&gt; And this case appears to be going from a String to<br>&gt; UnsafeBufferPointer&lt;Uint8&gt;<br>&gt; <br>&gt; <br>&gt;     /// Creates a `JSONParser` from the code units represented by the<br>&gt;     `string`.<br>&gt;     ///<br>&gt;     /// The synthesized string is lifetime-extended for the duration of<br>&gt;     parsing.<br>&gt;     init(string: String) {<br>&gt;         let codePoints = string.nulTerminatedUTF8<br>&gt;         let buffer = codePoints.withUnsafeBufferPointer {<br>&gt;         nulTerminatedBuffer in<br>&gt;             // don&#39;t want to include the nul termination in the buffer -<br>&gt;             trim it off<br>&gt;             UnsafeBufferPointer(start: nulTerminatedBuffer.baseAddress,<br>&gt;             count: nulTerminatedBuffer.count - 1)<br>&gt;         }<br>&gt;         self.init(buffer: buffer, owner: codePoints)<br>&gt;     }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; I understand pointers from my C/C++/Objective-C days but I don&#39;t yet<br>&gt; understand the various Swift pointer types. Any help is appreciated.<br>&gt; <br>&gt; Note: I don&#39;t work for Big Nerd Ranch. I&#39;m just trying to use the code<br>&gt; and better understand the various Swift pointer types.<br>&gt; <br>&gt; Thanks,<br>&gt; Dave Reed<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/424a3f4fec228fa9e2ad948ca70f1791?s=50"></div><header><strong>changes to pointer data types in Xcode 8 beta 6</strong> from <string>davelist at mac.com</string> &lt;davelist at mac.com&gt;<p>August 16, 2016 at 09:00:00am</p></header><div class="content"><p>Zach,<br></p><p>Thanks for the fix!<br></p><p>Ah, I think I now see the difference between a UnsafeBufferPointer (it essentially holds the address an array of data) vs. a UnsafePointer (it holds the address where one piece of data is stored), but I&#39;ll still need to read the final documentation when it&#39;s done.<br></p><p>Dave<br></p><p>&gt; On Aug 15, 2016, at 9:15 PM, Zach Waldowski via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Nerd here!<br>&gt; <br>&gt; That part of the code ends up not needing to go through the<br>&gt; UnsafeRawPointer API, as it&#39;s processing UTF-8 bytes, see also:<br>&gt; &lt;https://github.com/bignerdranch/Freddy/pull/191&gt;.<br>&gt; <br>&gt; That being said, good resources for reading about the new pointer system<br>&gt; are:<br>&gt; - [SE-0107]:<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; - [The Apple API reference], once it&#39;s updated:<br>&gt; &lt;https://developer.apple.com/reference/swift&gt;<br>&gt; <br>&gt; You can also look up the documentation using the &quot;Documentation and API<br>&gt; Reference&quot; menu in Xcode 8 Beta 6, as it&#39;s currently updated.<br>&gt; <br>&gt; Sincerely,<br>&gt;   Zachary Waldowski<br>&gt;   zachary at bignerdranch.com<br>&gt; <br>&gt; On Mon, Aug 15, 2016, at 03:05 PM, Dave Reed via swift-users wrote:<br>&gt;&gt; I&#39;m trying to convert the following code (from the Big Nerd Ranch&#39;s<br>&gt;&gt; Freddy JSON parser) that works in Xcode 8 beta 5 and convert it to work<br>&gt;&gt; with beta 6. Essentially it appears it needs to take a Data object and<br>&gt;&gt; convert it to a UnsafeBufferPointer&lt;UInt8&gt; if I understand it correctly.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;    /// Creates a `JSONParser` ready to parse UTF-8 encoded `NSData`.<br>&gt;&gt;    ///<br>&gt;&gt;    /// If the data is mutable, it is copied before parsing. The data&#39;s<br>&gt;&gt;    lifetime<br>&gt;&gt;    /// is extended for the duration of parsing.<br>&gt;&gt;    init(utf8Data inData: Data) {<br>&gt;&gt;        let data = (inData as NSData).copy() as! Data<br>&gt;&gt;        let buffer = UnsafeBufferPointer(start:<br>&gt;&gt;        UnsafePointer&lt;UInt8&gt;((data as NSData).bytes), count: data.count)<br>&gt;&gt;        self.init(buffer: buffer, owner: data)<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; And this case appears to be going from a String to<br>&gt;&gt; UnsafeBufferPointer&lt;Uint8&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;    /// Creates a `JSONParser` from the code units represented by the<br>&gt;&gt;    `string`.<br>&gt;&gt;    ///<br>&gt;&gt;    /// The synthesized string is lifetime-extended for the duration of<br>&gt;&gt;    parsing.<br>&gt;&gt;    init(string: String) {<br>&gt;&gt;        let codePoints = string.nulTerminatedUTF8<br>&gt;&gt;        let buffer = codePoints.withUnsafeBufferPointer {<br>&gt;&gt;        nulTerminatedBuffer in<br>&gt;&gt;            // don&#39;t want to include the nul termination in the buffer -<br>&gt;&gt;            trim it off<br>&gt;&gt;            UnsafeBufferPointer(start: nulTerminatedBuffer.baseAddress,<br>&gt;&gt;            count: nulTerminatedBuffer.count - 1)<br>&gt;&gt;        }<br>&gt;&gt;        self.init(buffer: buffer, owner: codePoints)<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I understand pointers from my C/C++/Objective-C days but I don&#39;t yet<br>&gt;&gt; understand the various Swift pointer types. Any help is appreciated.<br>&gt;&gt; <br>&gt;&gt; Note: I don&#39;t work for Big Nerd Ranch. I&#39;m just trying to use the code<br>&gt;&gt; and better understand the various Swift pointer types.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave Reed<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>changes to pointer data types in Xcode 8 beta 6</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>August 20, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Aug 15, 2016, at 3:05 PM, Dave Reed via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m trying to convert the following code (from the Big Nerd Ranch&#39;s Freddy JSON parser) that works in Xcode 8 beta 5 and convert it to work with beta 6. Essentially it appears it needs to take a Data object and convert it to a UnsafeBufferPointer&lt;UInt8&gt; if I understand it correctly.<br>&gt; <br>&gt; <br>&gt;    /// Creates a `JSONParser` ready to parse UTF-8 encoded `NSData`.<br>&gt;    ///<br>&gt;    /// If the data is mutable, it is copied before parsing. The data&#39;s lifetime<br>&gt;    /// is extended for the duration of parsing.<br>&gt;    init(utf8Data inData: Data) {<br>&gt;        let data = (inData as NSData).copy() as! Data<br>&gt;        let buffer = UnsafeBufferPointer(start: UnsafePointer&lt;UInt8&gt;((data as NSData).bytes), count: data.count)<br>&gt;        self.init(buffer: buffer, owner: data)<br>&gt;    }<br>&gt; <br>&gt; And this case appears to be going from a String to UnsafeBufferPointer&lt;Uint8&gt;<br>&gt; <br>&gt; <br>&gt;    /// Creates a `JSONParser` from the code units represented by the `string`.<br>&gt;    ///<br>&gt;    /// The synthesized string is lifetime-extended for the duration of parsing.<br>&gt;    init(string: String) {<br>&gt;        let codePoints = string.nulTerminatedUTF8<br>&gt;        let buffer = codePoints.withUnsafeBufferPointer { nulTerminatedBuffer in<br>&gt;            // don&#39;t want to include the nul termination in the buffer - trim it off<br>&gt;            UnsafeBufferPointer(start: nulTerminatedBuffer.baseAddress, count: nulTerminatedBuffer.count - 1)<br>&gt;        }<br>&gt;        self.init(buffer: buffer, owner: codePoints)<br>&gt;    }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; I understand pointers from my C/C++/Objective-C days but I don&#39;t yet understand the various Swift pointer types. Any help is appreciated.<br>&gt; <br>&gt; Note: I don&#39;t work for Big Nerd Ranch. I&#39;m just trying to use the code and better understand the various Swift pointer types.<br>&gt; <br>&gt; Thanks,<br>&gt; Dave Reed<br></p><p><br>I&#39;m too late to help, but just to follow up...<br></p><p>If you&#39;re wondering how to migrate pointer conversion like this to 3.0:<br></p><p>  UnsafePointer&lt;UInt8&gt;(data.bytes)<br></p><p>  UnsafeBufferPointer(start: nulTerminatedBuffer.baseAddress,<br>    count: nulTerminatedBuffer.count - 1)<br></p><p>then there&#39;s a quick explanation here &lt;https://gist.github.com/atrick/0283ae0e284610fd21ad6ed3f454a585&gt;.<br></p><p>The proposal that Zach posted has more background:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br></p><p>You can get something working easily enough with pointer bitcasts or binding memory, but converting UnsafePointers is not something you should be doing here.<br></p><p>If the JSON parser has its own copy of the data, then it should simply have its own array:<br></p><p>    private let input: [UInt8]<br>    //deleted private let owner: Any?<br></p><p>    init(utf8Data inData: Data) {<br>	input = [UInt8](inData)<br>    }<br></p><p>    init(string: String) {<br>	input = [UInt8](string.utf8)<br>    }<br></p><p>If the JSON parser wanted to operate on data that is owned by someone else, then we need something like the UnsafeBytes type proposed here:<br></p><p>https://github.com/atrick/swift-evolution/blob/unsafebytes/proposals/NNNN-UnsafeBytes.md#detailed-design<br></p><p>    private let input: UnsafeBytes<br>    private let owner: Any?<br></p><p>    init(utf8Data inData: Data) {<br>	// Data should directly provide a<br>        // withUnsafeBytes&lt;T&gt;(_ body: (UnsafeBytes) -&gt; R)<br>	input = inData.withUnsafeBytes { (p: UnsafePointer&lt;UInt8&gt;) in<br>            UnsafeBytes(start: UnsafeRawPointer(p), count: inData.count) }<br>	owner = inData<br>    }<br></p><p>Although, in the case of String input you still need to create a copy:<br></p><p>    init(string: String) {<br>	let utf8Array = [UInt8](string.utf8)<br>	input = utf8Array.withUnsafeBytes { $0 }<br>	owner = utf8Array<br>    }<br></p><p>Note that passing a String as an argument of type UnsafePointer&lt;UInt8&gt; works, but should never be done when calling Swift code. The lifetime of that pointer doesn&#39;t outlive the call.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160820/69e6862a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
