<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/524d03ef9e95c67a7bb100ab15808133?s=50"></div><header><strong>xcode8 segmentation fault help</strong> from <string>Luis Ferro</string> &lt;lferro9000 at gmail.com&gt;<p>September 27, 2016 at 10:00:00am</p></header><div class="content"><p>Hi everyone,<br></p><p>I&#39;m trying to follow some very simple code examples, and got this weird<br>situation with a playground:<br></p><p>//: Playground - noun: a place where people can play<br></p><p>import UIKit<br></p><p>let string = &quot;a simple test&quot;<br>if (string.characters.count &gt; 0) {<br>    let words = string.components(separatedBy: &quot; &quot;)<br>    let headline = words.map { (var word) -&gt; String in<br>        let firstCharacter = word.remove(at: word.startIndex)<br>        return &quot;\(String(firstCharacter).uppercased())\(word)&quot;<br>        }.joined(separator: &quot; &quot;)<br>}<br></p><p>This same code inside a func in a class on a normal project will generate a<br>segmentation fault error on xcode, when compiling the code.<br></p><p>Anyone has an idea of what is going wrong?<br></p><p>Regards,<br>LF<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160927/9875ea63/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>xcode8 segmentation fault help</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>September 27, 2016 at 01:00:00pm</p></header><div class="content"><p>On 27.09.2016 12:51, Luis Ferro via swift-users wrote:<br>&gt; let string = &quot;a simple test&quot;<br>&gt; if (string.characters.count &gt; 0) {<br>&gt;     let words = string.components(separatedBy: &quot; &quot;)<br>&gt;     let headline = words.map { (var word) -&gt; String in<br>&gt;         let firstCharacter = word.remove(at: word.startIndex)<br>&gt;         return &quot;\(String(firstCharacter).uppercased())\(word)&quot;<br>&gt;         }.joined(separator: &quot; &quot;)<br>&gt; }<br></p><p>Swift 3.0 does not support `var` in function/closure parameter list. For <br>some reason Swift parser didn&#39;t catch this as syntax error, I&#39;d suggest you <br>to report a bug on bugs.swift.org.<br></p><p>This version works:<br></p><p>let string = &quot;a simple test&quot;<br>if (string.characters.count &gt; 0) {<br>     let words = string.components(separatedBy: &quot; &quot;)<br>     let headline = words.map { wordParam -&gt; String in //&lt;&lt;&lt; immutable<br>         var word = wordParam //&lt;&lt;&lt; assign to mutable instance<br>         let firstCharacter = word.remove(at: word.startIndex)<br>         return &quot;\(String(firstCharacter).uppercased())\(word)&quot;<br>         }.joined(separator: &quot; &quot;)<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>xcode8 segmentation fault help</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 27, 2016, at 03:37, Vladimir.S via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On 27.09.2016 12:51, Luis Ferro via swift-users wrote:<br>&gt;&gt; let string = &quot;a simple test&quot;<br>&gt;&gt; if (string.characters.count &gt; 0) {<br>&gt;&gt;    let words = string.components(separatedBy: &quot; &quot;)<br>&gt;&gt;    let headline = words.map { (var word) -&gt; String in<br>&gt;&gt;        let firstCharacter = word.remove(at: word.startIndex)<br>&gt;&gt;        return &quot;\(String(firstCharacter).uppercased())\(word)&quot;<br>&gt;&gt;        }.joined(separator: &quot; &quot;)<br>&gt;&gt; }<br>&gt; <br>&gt; Swift 3.0 does not support `var` in function/closure parameter list. For some reason Swift parser didn&#39;t catch this as syntax error, I&#39;d suggest you to report a bug on bugs.swift.org.<br></p><p>This particular bug has been fixed already on the master branch of Swift, so no need to report it. :-)<br></p><p>Jordan<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
