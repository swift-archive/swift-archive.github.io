<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri May 06 2016, Andrew Bennett &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi Dave,<br>&gt;<br>&gt; Sorry, Dave, sending a second time as I forgot to Reply-All.<br>&gt;<br>&gt; I agree, this proposal doesn&#39;t allow multiple closures where only one of them<br>&gt; should be run, and it should only be run once. I personally don&#39;t think lacking<br>&gt; that functionality is worth blocking this proposal for, another proposal can be<br>&gt; built on top of this if it is desired.<br>&gt;<br>&gt; These cases can also be handled by a more meaningful if/switch statement, using<br>&gt; @noescape(once), for example:<br>&gt; let x: Int<br>&gt; functionThatCallsAClosure(someTest()) { x = $0 ? 1 : 2 }<br></p><p>Why is this better than <br></p><p>    let x = functionThatCallsAClosure(someTest()) { $0 ? 1 : 2 }<br></p><p>?<br></p><p>IMO separating initialization from declaration is *very* rarely needed<br>and very much better avoided altogether, because it leads to code that&#39;s<br>less clear.  Just because we *can* do this doesn&#39;t mean we should.<br></p><p>&gt; On Sat, May 7, 2016 at 6:24 AM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Tue May 03 2016, Chris Lattner<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; Hello Swift community,<br>&gt;     &gt;<br>&gt;     &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt;     &gt; begins now and runs through May 9. The proposal is available here:<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;     should be sent to the swift-evolution mailing list at<br>&gt;     &gt;<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;     &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;     review manager.<br>&gt;     &gt;<br>&gt;     &gt; What goes into a review?<br>&gt;     &gt;<br>&gt;     &gt; The goal of the review process is to improve the proposal under review<br>&gt;     &gt; through constructive criticism and contribute to the direction of<br>&gt;     &gt; Swift. When writing your review, here are some questions you might<br>&gt;     &gt; want to answer in your review:<br>&gt;     &gt;<br>&gt;     &gt; * What is your evaluation of the proposal?<br>&gt;<br>&gt;     I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt;     For example, you can&#39;t use this to construct something like<br>&gt;<br>&gt;     var x: Int<br>&gt;     functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt;<br>&gt;     If you need to initialize something in an outer scope with something<br>&gt;     computed by a closure, it&#39;s much better to arrange something like this:<br>&gt;<br>&gt;     var x = functionThatActsLikeIf( someTest(), then: { 1 }, else: { 2 } )<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>May  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Replies inline:<br></p><p>On Sat, May 7, 2016 at 12:37 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri May 06 2016, Andrew Bennett &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hi Dave,<br>&gt; &gt;<br>&gt; &gt; Sorry, Dave, sending a second time as I forgot to Reply-All.<br>&gt; &gt;<br>&gt; &gt; I agree, this proposal doesn&#39;t allow multiple closures where only one of<br>&gt; them<br>&gt; &gt; should be run, and it should only be run once. I personally don&#39;t think<br>&gt; lacking<br>&gt; &gt; that functionality is worth blocking this proposal for, another proposal<br>&gt; can be<br>&gt; &gt; built on top of this if it is desired.<br>&gt; &gt;<br>&gt; &gt; These cases can also be handled by a more meaningful if/switch<br>&gt; statement, using<br>&gt; &gt; @noescape(once), for example:<br>&gt; &gt; let x: Int<br>&gt; &gt; functionThatCallsAClosure(someTest()) { x = $0 ? 1 : 2 }<br>&gt;<br>&gt; Why is this better than<br>&gt;<br>&gt;     let x = functionThatCallsAClosure(someTest()) { $0 ? 1 : 2 }<br>&gt;<br>&gt; ?<br>&gt;<br>&gt;<br>I&#39;m not saying it&#39;s better, neither is the proposal. I do think both are<br>better than this though:<br></p><p>    functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br></p><p>My opinion is that cases where *the proposal* are limited by multiple<br>closures seem to be cases where you would be better off with a single<br>closure and more explicit control-flow. I&#39;d be interested if there are<br>other cases, but it currently seems like a straw-man argument to me.<br></p><p>--<br></p><p>It may be useful if Swift allowed things like this:<br></p><p>let x = switch { ... }<br>let x = if { ... } else { ... }<br>etc.<br></p><p>I think that&#39;s a much larger change/discussion, with no clear victor.<br></p><p>However until Swift has that support it&#39;s necessary to consider<br>separated initialization<br>and declaration. Likewise until all Swift is pure functional.<br></p><p>Even if this proposal didn&#39;t let you assign to let statements outside the<br>closure it still has value:<br></p><p>   - It lets the type system reduce programmer error<br>   - It allows protocol declarations to have a more explicit requirement<br>   - The user can guarantee that their code, and its side-effects, will be<br>   executed<br></p><p><br>IMO separating initialization from declaration is *very* rarely needed<br>&gt; and very much better avoided altogether, because it leads to code that&#39;s<br>&gt; less clear.  Just because we *can* do this doesn&#39;t mean we should.<br>&gt;<br>&gt; &gt; On Sat, May 7, 2016 at 6:24 AM, Dave Abrahams via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     on Tue May 03 2016, Chris Lattner<br>&gt; &gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; Hello Swift community,<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt; &gt;     &gt; begins now and runs through May 9. The proposal is available here:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews<br>&gt; &gt;     should be sent to the swift-evolution mailing list at<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; or, if you would like to keep your feedback private, directly to<br>&gt; the<br>&gt; &gt;     review manager.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; What goes into a review?<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The goal of the review process is to improve the proposal under<br>&gt; review<br>&gt; &gt;     &gt; through constructive criticism and contribute to the direction of<br>&gt; &gt;     &gt; Swift. When writing your review, here are some questions you might<br>&gt; &gt;     &gt; want to answer in your review:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; * What is your evaluation of the proposal?<br>&gt; &gt;<br>&gt; &gt;     I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt; &gt;     For example, you can&#39;t use this to construct something like<br>&gt; &gt;<br>&gt; &gt;     var x: Int<br>&gt; &gt;     functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt; &gt;<br>&gt; &gt;     If you need to initialize something in an outer scope with something<br>&gt; &gt;     computed by a closure, it&#39;s much better to arrange something like<br>&gt; this:<br>&gt; &gt;<br>&gt; &gt;     var x = functionThatActsLikeIf( someTest(), then: { 1 }, else: { 2 }<br>&gt; )<br>&gt; &gt;<br>&gt; &gt;     --<br>&gt; &gt;     Dave<br>&gt; &gt;<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/274b6a1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  6, 2016 at 10:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 6, 2016, at 10:10 PM, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Replies inline:<br>&gt; <br>&gt;&gt; On Sat, May 7, 2016 at 12:37 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri May 06 2016, Andrew Bennett &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; Hi Dave,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sorry, Dave, sending a second time as I forgot to Reply-All.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I agree, this proposal doesn&#39;t allow multiple closures where only one of them<br>&gt;&gt; &gt; should be run, and it should only be run once. I personally don&#39;t think lacking<br>&gt;&gt; &gt; that functionality is worth blocking this proposal for, another proposal can be<br>&gt;&gt; &gt; built on top of this if it is desired.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; These cases can also be handled by a more meaningful if/switch statement, using<br>&gt;&gt; &gt; @noescape(once), for example:<br>&gt;&gt; &gt; let x: Int<br>&gt;&gt; &gt; functionThatCallsAClosure(someTest()) { x = $0 ? 1 : 2 }<br>&gt;&gt; <br>&gt;&gt; Why is this better than<br>&gt;&gt; <br>&gt;&gt;     let x = functionThatCallsAClosure(someTest()) { $0 ? 1 : 2 }<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;&gt; <br>&gt; <br>&gt; I&#39;m not saying it&#39;s better, neither is the proposal. I do think both are better than this though:<br>&gt; <br>&gt;     functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt; <br>&gt; My opinion is that cases where the proposal are limited by multiple closures seem to be cases where you would be better off with a single closure and more explicit control-flow. I&#39;d be interested if there are other cases, but it currently seems like a straw-man argument to me.<br>&gt; <br>&gt; --<br>&gt; <br>&gt; It may be useful if Swift allowed things like this:<br>&gt; <br>&gt; let x = switch { ... }<br>&gt; let x = if { ... } else { ... }<br>&gt; etc.<br>&gt;  <br>&gt; I think that&#39;s a much larger change/discussion, with no clear victor.<br>&gt; <br>&gt; However until Swift has that support it&#39;s necessary to consider separated initialization and declaration. Likewise until all Swift is pure functional.<br>&gt; <br>&gt; Even if this proposal didn&#39;t let you assign to let statements outside the closure it still has value:<br>&gt; It lets the type system reduce programmer error<br>&gt; It allows protocol declarations to have a more explicit requirement<br>&gt; The user can guarantee that their code, and its side-effects, will be executed<br></p><p>+1.<br></p><p>&gt; <br>&gt;&gt; IMO separating initialization from declaration is *very* rarely needed<br>&gt;&gt; and very much better avoided altogether, because it leads to code that&#39;s<br>&gt;&gt; less clear.  Just because we *can* do this doesn&#39;t mean we should.<br>&gt;&gt; <br>&gt;&gt; &gt; On Sat, May 7, 2016 at 6:24 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     on Tue May 03 2016, Chris Lattner<br>&gt;&gt; &gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     &gt; Hello Swift community,<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt;&gt; &gt;     &gt; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; &gt;     should be sent to the swift-evolution mailing list at<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; &gt;     review manager.<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; What goes into a review?<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; &gt;     &gt; through constructive criticism and contribute to the direction of<br>&gt;&gt; &gt;     &gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt; &gt;     &gt; want to answer in your review:<br>&gt;&gt; &gt;     &gt;<br>&gt;&gt; &gt;     &gt; * What is your evaluation of the proposal?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt;&gt; &gt;     For example, you can&#39;t use this to construct something like<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     var x: Int<br>&gt;&gt; &gt;     functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     If you need to initialize something in an outer scope with something<br>&gt;&gt; &gt;     computed by a closure, it&#39;s much better to arrange something like this:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     var x = functionThatActsLikeIf( someTest(), then: { 1 }, else: { 2 } )<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     --<br>&gt;&gt; &gt;     Dave<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     _______________________________________________<br>&gt;&gt; &gt;     swift-evolution mailing list<br>&gt;&gt; &gt;     swift-evolution at swift.org<br>&gt;&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/7d8b4fcd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
