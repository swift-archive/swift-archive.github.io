<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Generic typealiases</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March  7, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi All,<br></p><p>I just landed an implementation of generic typealiases, e.g. things like:<br></p><p>    typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>    typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>    typealias MatchingTriple&lt;T&gt; = (T, T, T)<br>    typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br></p><p>etc now work.<br></p><p>I have tested various scenarios with them, but I wouldn’t be surprised if there are corner cases that aren’t working yet.  Please try kicking them around and let me know if you run into any problems, thanks!<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Generic typealiases</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>March  7, 2016 at 11:00:00pm</p></header><div class="content"><p>Awesome!<br></p><p>On Mon, Mar 7, 2016 at 11:09 PM, Chris Lattner via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi All,<br>&gt;<br>&gt; I just landed an implementation of generic typealiases, e.g. things like:<br>&gt;<br>&gt;     typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt;     typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt;     typealias MatchingTriple&lt;T&gt; = (T, T, T)<br>&gt;     typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br>&gt;<br>&gt; etc now work.<br>&gt;<br>&gt; I have tested various scenarios with them, but I wouldn’t be surprised if<br>&gt; there are corner cases that aren’t working yet.  Please try kicking them<br>&gt; around and let me know if you run into any problems, thanks!<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160307/116aca3f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecb50a99bf3b4cc0249312945dce7115?s=50"></div><header><strong>Generic typealiases</strong> from <string>Ben Langmuir</string> &lt;blangmuir at apple.com&gt;<p>March  8, 2016 at 07:00:00am</p></header><div class="content"><p>I tried doing a SourceKit cursor-info on a generic typealias of a tuple type, but it crashed when trying to mangle any of the typealias&#39;s generic parameters.  Should we be able to mangle the generic parameter, or do we need an early exit?<br></p><p>Assertion failed: (isa&lt;NominalTypeDecl&gt;(ctx) &amp;&amp; &quot;Only nominal types are contexts for mangleable entities&quot;), function mangleContext, file /Users/blangmuir/src/s/swift/lib/AST/Mangle.cpp, line 254.<br>&lt;snip&gt;<br>5  libsourcekitdInProc.dylib 0x0000000105a43591 __assert_rtn + 81<br>6  libsourcekitdInProc.dylib 0x000000010616b6a7 swift::Mangle::Mangler::mangleContext(swift::DeclContext const*, swift::Mangle::Mangler::BindGenerics) + 1735<br>7  libsourcekitdInProc.dylib 0x000000010616c0ba swift::Mangle::Mangler::mangleEntity(swift::ValueDecl const*, unsigned int) + 474<br>8  libsourcekitdInProc.dylib 0x00000001061af981 swift::ide::printDeclUSR(swift::ValueDecl const*, llvm::raw_ostream&amp;) + 1041<br></p><p><br>Ben<br></p><p>&gt; On Mar 7, 2016, at 11:09 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All,<br>&gt; <br>&gt; I just landed an implementation of generic typealiases, e.g. things like:<br>&gt; <br>&gt;    typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt;    typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt;    typealias MatchingTriple&lt;T&gt; = (T, T, T)<br>&gt;    typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br>&gt; <br>&gt; etc now work.<br>&gt; <br>&gt; I have tested various scenarios with them, but I wouldn’t be surprised if there are corner cases that aren’t working yet.  Please try kicking them around and let me know if you run into any problems, thanks!<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Generic typealiases</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks for catching this, and for the great testcase.  I implemented mangling/usr generation in ae919bd.<br></p><p>-Chris<br></p><p>&gt; On Mar 8, 2016, at 7:18 AM, Ben Langmuir &lt;blangmuir at apple.com&gt; wrote:<br>&gt; <br>&gt; I tried doing a SourceKit cursor-info on a generic typealias of a tuple type, but it crashed when trying to mangle any of the typealias&#39;s generic parameters.  Should we be able to mangle the generic parameter, or do we need an early exit?<br>&gt; <br>&gt; Assertion failed: (isa&lt;NominalTypeDecl&gt;(ctx) &amp;&amp; &quot;Only nominal types are contexts for mangleable entities&quot;), function mangleContext, file /Users/blangmuir/src/s/swift/lib/AST/Mangle.cpp, line 254.<br>&gt; &lt;snip&gt;<br>&gt; 5  libsourcekitdInProc.dylib 0x0000000105a43591 __assert_rtn + 81<br>&gt; 6  libsourcekitdInProc.dylib 0x000000010616b6a7 swift::Mangle::Mangler::mangleContext(swift::DeclContext const*, swift::Mangle::Mangler::BindGenerics) + 1735<br>&gt; 7  libsourcekitdInProc.dylib 0x000000010616c0ba swift::Mangle::Mangler::mangleEntity(swift::ValueDecl const*, unsigned int) + 474<br>&gt; 8  libsourcekitdInProc.dylib 0x00000001061af981 swift::ide::printDeclUSR(swift::ValueDecl const*, llvm::raw_ostream&amp;) + 1041<br>&gt; <br>&gt; <br>&gt; Ben<br>&gt; <br>&gt;&gt; On Mar 7, 2016, at 11:09 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All,<br>&gt;&gt; <br>&gt;&gt; I just landed an implementation of generic typealiases, e.g. things like:<br>&gt;&gt; <br>&gt;&gt;   typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt;&gt;   typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt;&gt;   typealias MatchingTriple&lt;T&gt; = (T, T, T)<br>&gt;&gt;   typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br>&gt;&gt; <br>&gt;&gt; etc now work.<br>&gt;&gt; <br>&gt;&gt; I have tested various scenarios with them, but I wouldn’t be surprised if there are corner cases that aren’t working yet.  Please try kicking them around and let me know if you run into any problems, thanks!<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
