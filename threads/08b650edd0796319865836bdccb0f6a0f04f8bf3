<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;: Clarification</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>January  8, 2016 at 09:00:00pm</p></header><div class="content"><p>Several people have already agreed that &#39;inout&#39; should be placed before<br>types in parameter lists:<br></p><p>func foo(x: inout Int)<br></p><p>I&#39;m strongly against such a change an will explain why.<br></p><p>&#39;The Swift Programming Language&#39; states that there are 2 distinct kinds of<br>modifiers:<br>1. Declaration attributes<br>2. Type attributes<br></p><p>Declaration attributes, specifically @autoclosure and @noescape, have no<br>meaning outside function parameter lists. They are therefore placed before<br>the variables themselves to visually differentiate them from actual type<br>attributes.<br></p><p>Type attributes, specifically @convention and @noreturn, are applied to<br>types. They are true type modifiers, and form a new type that can be used<br>everywhere a normal type can.<br></p><p>For example, I can declare a @convention(c) variable<br>let test: @convention(c) Int -&gt; Void<br>But I cannot declare an @autoclosure variable:<br>let test: @autoclosure () -&gt; Bool<br>And that&#39;s OK because @autoclosure makes no sense here. It is not a type<br>attribute at all.<br></p><p>Now look at &#39;inout&#39;. Currently, &#39;inout&#39; is (semantically) a declaration<br>attribute. We cannot return inout from function, we cannot declare an inout<br>variable. &#39;inout&#39; only makes sense in parameter lists. We should then treat<br>it like @autoclosure and not like @convention(c). It should then be placed<br>like them, i.e. before the parameter itself, like it is placed now.<br></p><p>TLDR: &#39;inout&#39; is placed before parameters for consistency with (other)<br>declaration attributes. (Parameter) declaration attributes are placed<br>before parameters to hint that they make sense only in parameter lists.<br></p><p>Another question is if we change &#39;inout&#39; to act like a type attribute,<br>essentially adding C++-style references to Swift. Only then would it be<br>logical to place &#39;inout&#39; before types.<br>It seems like there is no corresponding thread yet. I&#39;m personally against<br>it. If some people think otherwise, we could start a new thread.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/08b68bf3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Replace &#39;inout&#39; with &#39;&amp;&#39;: Clarification</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  8, 2016 at 03:00:00pm</p></header><div class="content"><p>For the record, this is not correct. &#39;inout&#39; already appears in function types:<br></p><p>let foo: (inout Int) -&gt; Void<br>foo = { $0 += 1 }<br></p><p>var x = 0<br>foo(&amp;x)<br>print(x) // 1<br></p><p>Jordan<br></p><p>&gt; On Jan 8, 2016, at 10:38, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Several people have already agreed that &#39;inout&#39; should be placed before types in parameter lists:<br>&gt; <br>&gt; func foo(x: inout Int)<br>&gt; <br>&gt; I&#39;m strongly against such a change an will explain why.<br>&gt; <br>&gt; &#39;The Swift Programming Language&#39; states that there are 2 distinct kinds of modifiers:<br>&gt; 1. Declaration attributes<br>&gt; 2. Type attributes<br>&gt; <br>&gt; Declaration attributes, specifically @autoclosure and @noescape, have no meaning outside function parameter lists. They are therefore placed before the variables themselves to visually differentiate them from actual type attributes.<br>&gt; <br>&gt; Type attributes, specifically @convention and @noreturn, are applied to types. They are true type modifiers, and form a new type that can be used everywhere a normal type can.<br>&gt; <br>&gt; For example, I can declare a @convention(c) variable<br>&gt; let test: @convention(c) Int -&gt; Void<br>&gt; But I cannot declare an @autoclosure variable:<br>&gt; let test: @autoclosure () -&gt; Bool<br>&gt; And that&#39;s OK because @autoclosure makes no sense here. It is not a type attribute at all.<br>&gt; <br>&gt; Now look at &#39;inout&#39;. Currently, &#39;inout&#39; is (semantically) a declaration attribute. We cannot return inout from function, we cannot declare an inout variable. &#39;inout&#39; only makes sense in parameter lists. We should then treat it like @autoclosure and not like @convention(c). It should then be placed like them, i.e. before the parameter itself, like it is placed now.<br>&gt; <br>&gt; TLDR: &#39;inout&#39; is placed before parameters for consistency with (other) declaration attributes. (Parameter) declaration attributes are placed before parameters to hint that they make sense only in parameter lists.<br>&gt; <br>&gt; Another question is if we change &#39;inout&#39; to act like a type attribute, essentially adding C++-style references to Swift. Only then would it be logical to place &#39;inout&#39; before types.<br>&gt; It seems like there is no corresponding thread yet. I&#39;m personally against it. If some people think otherwise, we could start a new thread.<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/cff0598b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
