<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 30, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0110: Distinguish between single-tuple and multiple-argument function types&quot; begins now and runs through July 4. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 30, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0110: Distinguish between single-tuple and multiple-argument function types&quot; begins now and runs through July 4. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 - I’ve encountered this a number of times and it’s always been confusing. I’m not sure the proposal is clear on what happens if you don’t actually name your parameters, though. I assume $0, $1, $2, etc are created automatically as expected? Am I required to then *use* all unnamed parameters for this to work? Ideally I would not have to and this would work:<br></p><p>let fn2 : (Int, Int) -&gt; Int = { return $1 }<br></p><p>I assume this is the intent - but the proposal might do with some clarification on that point.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I think most languages would probably do it this way?<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Mostly a quick glance.<br></p><p><br>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>Positive. I thought this was a bug, post SE-0029.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No. (n/a?)<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read; also felt the surprise.<br></p><p>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 30, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1.  This solves something that I find a bit annoying.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick glance<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>June 30, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A glance<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 30, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. The behaviour we are calrifying has always been fairly confusing to me. I think it comes from when arguments and tuples were semantically equivalent. Now that this is not the case anymore, this proposal seems logical.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, lets simplify the language so we can build great stuff upon it.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, lets simplify this tuple madness.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  1, 2016 at 12:00:00am</p></header><div class="content"><p>Just want to brought some things/questions that was not reflected in <br>proposal and that I think should be mentioned:<br></p><p>1. Should we be able to have such syntax to de-couple tuple&#39;s values in <br>parameter of closure:<br></p><p>let a : ((Int, Int, Int)) -&gt; Int = { ((x, y, z)) in return x + y + z }<br></p><p>or only as single parameter<br></p><p>let a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br></p><p><br>2. Currently type of `(Int,Int)-&gt;()` is actually `((Int,Int))-&gt;()`<br></p><p>typealias t1 = (Int, Int) -&gt; Int<br>print(t1.self) // ((Int, Int)) -&gt; Int<br></p><p>the proposal should change this to:<br></p><p>print(t1.self) // (Int, Int) -&gt; Int<br>where `((Int, Int)) -&gt; Int` means one tuple argument<br></p><p><br>3. It seems like we should keep the ability to explicitly convert one <br>function type to another as some(many?) code can depend on this current <br>behavior and so we need a way to convert old code to new.<br></p><p>I.e. I think such construction should work:<br></p><p>var a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br></p><p>a = { x, y, z in return x + y + z} as ((Int, Int, Int)) -&gt; Int<br></p><p>and<br></p><p>var b : (Int, Int, Int) -&gt; Int = { x, y, z in return x + y + z }<br></p><p>b = { x in return x.0 + y.1 + z.2} as (Int, Int, Int) -&gt; Int<br></p><p><br>Opinions/thoughts?<br></p><p><br>On 30.06.2016 21:22, Chris Lattner via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0110: Distinguish between single-tuple and multiple-argument function types&quot; begins now and runs through July 4. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>June 30, 2016 at 02:00:00pm</p></header><div class="content"><p>#1 was discussed in this thread:<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/16190. According to<br>Chris, &quot;FWIW, Swift 1 supported tuple destructuring in parameter lists, and<br>we took it out to simplify the language and eliminate special cases.&quot;<br></p><p>#2 may or may not naturally fall out of fixing the ambiguity. If it<br>doesn&#39;t, the proposal should definitely add it.<br></p><p>For #3, I would personally take the same approach as when tuple splat and<br>explicit currying were removed: it&#39;s pretty easy to manually write a<br>wrapper to convert between the old form and new form, so explicit bridging<br>support isn&#39;t worthwhile:<br></p><p>func tupleize&lt;T, U, V, R&gt;(_ original: (T, U, V) -&gt; R) -&gt; ((T, U, V)) -&gt; R {<br>  return { x in<br>    return original(x.0, x.1, x.2)<br>  }<br>}<br></p><p><br>Best,<br>Austin<br></p><p>On Thu, Jun 30, 2016 at 2:02 PM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Just want to brought some things/questions that was not reflected in<br>&gt; proposal and that I think should be mentioned:<br>&gt;<br>&gt; 1. Should we be able to have such syntax to de-couple tuple&#39;s values in<br>&gt; parameter of closure:<br>&gt;<br>&gt; let a : ((Int, Int, Int)) -&gt; Int = { ((x, y, z)) in return x + y + z }<br>&gt;<br>&gt; or only as single parameter<br>&gt;<br>&gt; let a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br>&gt;<br>&gt;<br>&gt; 2. Currently type of `(Int,Int)-&gt;()` is actually `((Int,Int))-&gt;()`<br>&gt;<br>&gt; typealias t1 = (Int, Int) -&gt; Int<br>&gt; print(t1.self) // ((Int, Int)) -&gt; Int<br>&gt;<br>&gt; the proposal should change this to:<br>&gt;<br>&gt; print(t1.self) // (Int, Int) -&gt; Int<br>&gt; where `((Int, Int)) -&gt; Int` means one tuple argument<br>&gt;<br>&gt;<br>&gt; 3. It seems like we should keep the ability to explicitly convert one<br>&gt; function type to another as some(many?) code can depend on this current<br>&gt; behavior and so we need a way to convert old code to new.<br>&gt;<br>&gt; I.e. I think such construction should work:<br>&gt;<br>&gt; var a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br>&gt;<br>&gt; a = { x, y, z in return x + y + z} as ((Int, Int, Int)) -&gt; Int<br>&gt;<br>&gt; and<br>&gt;<br>&gt; var b : (Int, Int, Int) -&gt; Int = { x, y, z in return x + y + z }<br>&gt;<br>&gt; b = { x in return x.0 + y.1 + z.2} as (Int, Int, Int) -&gt; Int<br>&gt;<br>&gt;<br>&gt; Opinions/thoughts?<br>&gt;<br>&gt;<br>&gt; On 30.06.2016 21:22, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0110: Distinguish between single-tuple and<br>&gt;&gt; multiple-argument function types&quot; begins now and runs through July 4. The<br>&gt;&gt; proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt; When writing your review, here are some questions you might want to answer<br>&gt;&gt; in your review:<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt;         * If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/9da36d20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  1, 2016 at 01:00:00am</p></header><div class="content"><p>On 01.07.2016 0:17, Austin Zheng wrote:<br>&gt; #1 was discussed in this<br>&gt; thread: http://thread.gmane.org/gmane.comp.lang.swift.evolution/16190.<br>&gt; According to Chris, &quot;FWIW, Swift 1 supported tuple destructuring in<br>&gt; parameter lists, and we took it out to simplify the language and eliminate<br>&gt; special cases.&quot;<br></p><p>OK. Got it.<br></p><p>&gt;<br>&gt; #2 may or may not naturally fall out of fixing the ambiguity. If it<br>&gt; doesn&#39;t, the proposal should definitely add it.<br></p><p>I just think that it is worth to mention how the function type with <br>multiply arguments represented currently.<br></p><p>&gt;<br>&gt; For #3, I would personally take the same approach as when tuple splat and<br>&gt; explicit currying were removed: it&#39;s pretty easy to manually write a<br>&gt; wrapper to convert between the old form and new form, so explicit bridging<br>&gt; support isn&#39;t worthwhile:<br>&gt;<br>&gt; func tupleize&lt;T, U, V, R&gt;(_ original: (T, U, V) -&gt; R) -&gt; ((T, U, V)) -&gt; R {<br>&gt;   return { x in<br>&gt;     return original(x.0, x.1, x.2)<br>&gt;   }<br>&gt; }<br>&gt;<br></p><p>Currently there could be a lot of code that relies on current behavior, so <br>IMO we should provide a easy way to convert to Swift 3.0. I feel like <br>explicit bridging the best solution here.<br>But from other point of view, Swift 3 is source breaking release anyway and <br>one will just need to change tuple to list of parameters (or vice-versa) in <br>code to conform to correct type of function.<br></p><p>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt; On Thu, Jun 30, 2016 at 2:02 PM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     Just want to brought some things/questions that was not reflected in<br>&gt;     proposal and that I think should be mentioned:<br>&gt;<br>&gt;     1. Should we be able to have such syntax to de-couple tuple&#39;s values in<br>&gt;     parameter of closure:<br>&gt;<br>&gt;     let a : ((Int, Int, Int)) -&gt; Int = { ((x, y, z)) in return x + y + z }<br>&gt;<br>&gt;     or only as single parameter<br>&gt;<br>&gt;     let a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br>&gt;<br>&gt;<br>&gt;     2. Currently type of `(Int,Int)-&gt;()` is actually `((Int,Int))-&gt;()`<br>&gt;<br>&gt;     typealias t1 = (Int, Int) -&gt; Int<br>&gt;     print(t1.self) // ((Int, Int)) -&gt; Int<br>&gt;<br>&gt;     the proposal should change this to:<br>&gt;<br>&gt;     print(t1.self) // (Int, Int) -&gt; Int<br>&gt;     where `((Int, Int)) -&gt; Int` means one tuple argument<br>&gt;<br>&gt;<br>&gt;     3. It seems like we should keep the ability to explicitly convert one<br>&gt;     function type to another as some(many?) code can depend on this current<br>&gt;     behavior and so we need a way to convert old code to new.<br>&gt;<br>&gt;     I.e. I think such construction should work:<br>&gt;<br>&gt;     var a : ((Int, Int, Int)) -&gt; Int = { x in return x.0 + x.1 + x.2 }<br>&gt;<br>&gt;     a = { x, y, z in return x + y + z} as ((Int, Int, Int)) -&gt; Int<br>&gt;<br>&gt;     and<br>&gt;<br>&gt;     var b : (Int, Int, Int) -&gt; Int = { x, y, z in return x + y + z }<br>&gt;<br>&gt;     b = { x in return x.0 + y.1 + z.2} as (Int, Int, Int) -&gt; Int<br>&gt;<br>&gt;<br>&gt;     Opinions/thoughts?<br>&gt;<br>&gt;<br>&gt;     On 30.06.2016 21:22, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt;         Hello Swift community,<br>&gt;<br>&gt;         The review of &quot;SE-0110: Distinguish between single-tuple and<br>&gt;         multiple-argument function types&quot; begins now and runs through July<br>&gt;         4. The proposal is available here:<br>&gt;<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt;<br>&gt;         Reviews are an important part of the Swift evolution process. All<br>&gt;         reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;         or, if you would like to keep your feedback private, directly to<br>&gt;         the review manager.<br>&gt;<br>&gt;         What goes into a review?<br>&gt;<br>&gt;         The goal of the review process is to improve the proposal under<br>&gt;         review through constructive criticism and contribute to the<br>&gt;         direction of Swift. When writing your review, here are some<br>&gt;         questions you might want to answer in your review:<br>&gt;<br>&gt;                 * What is your evaluation of the proposal?<br>&gt;                 * Is the problem being addressed significant enough to<br>&gt;         warrant a change to Swift?<br>&gt;                 * Does this proposal fit well with the feel and direction<br>&gt;         of Swift?<br>&gt;                 * If you have used other languages or libraries with a<br>&gt;         similar feature, how do you feel that this proposal compares to those?<br>&gt;                 * How much effort did you put into your review? A glance, a<br>&gt;         quick reading, or an in-depth study?<br>&gt;<br>&gt;         More information about the Swift evolution process is available at<br>&gt;<br>&gt;                 https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt;         Thank you,<br>&gt;<br>&gt;         -Chris Lattner<br>&gt;         Review Manager<br>&gt;<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>June 30, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1 Yes please.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Tuple ↔︎ arg conversion magic as it stands in the language is currently more confusing than useful. I’m in favor of all efforts to remove such magic, and hoping for future features that are both more explicit and more robust.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. The tuple/arg distinction grows ever stronger.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Many languages do just fine forcing individual access to arguments (i.e. no args tuples at all).<br></p><p>It is useful to be able to forward args en masse or call arbitrary functions with a single tuple, but Swift’s current functionality doesn’t really do this very well in practice. If we wanted either the higher-order meta-ness of functional languages or the fungibility of Javascript’s arguments var, Swift’s current behavior is not the starting point I’d choose for that.<br></p><p>We aren’t losing much with this proposal, either in current capability or room for future expansion.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Only a quick skim.<br></p><p>P<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0110: Distinguish between single-tuple and multiple-argument function types</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July  2, 2016 at 04:00:00am</p></header><div class="content"><p>Somehow managed to post in the wrong thread, sorry.<br></p><p>See:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160627/023221.html<br></p><p>From James F<br></p><p>&gt; On 30 Jun 2016, at 19:22, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0110: Distinguish between single-tuple and multiple-argument function types&quot; begins now and runs through July 4. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/f6c1cecd/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
