<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5b47db0ad05c288f5983599dce346aa5?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Lars-Jørgen Kristiansen</string> &lt;larsjk.84 at gmail.com&gt;<p>October  5, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;m working with a third party API for some external hardware. One of the functions takes a NSNumber, and it fails to interact correctly with the hardware if I cast a Float too NSNumber, but works as expected if I use Double..<br></p><p>I dont know if it is related to NSNumber.stringValue since I dont know what the third part lib does with the NSNumber, but I noticed this:<br></p><p>let float = 100_000_00 as Float<br>let floatNumber = float as NSNumber<br></p><p>let double = 100_000_00 as Double<br>let doubleNumer = double as NSNumber<br></p><p>hardware.doThing(number: floatNumber as NSNumber) // Hardware does not work<br>hardware.doThing(number: doubleNumer as NSNumber) // Hardware works<br></p><p>// Also noticed this:<br>&quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br></p><p>Is this expected behaviour?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/ce9238b0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>October  5, 2016 at 07:00:00pm</p></header><div class="content"><p>I think you should file a bug on the inconsistence of `description`.<br>However, the third-party API somehow using the `description` is not a good<br>idea.<br></p><p>Zhaoxin<br></p><p>On Wed, Oct 5, 2016 at 5:30 PM, Lars-Jørgen Kristiansen via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m working with a third party API for some external hardware. One of the<br>&gt; functions takes a NSNumber, and it fails to interact correctly with the<br>&gt; hardware if I cast a Float too NSNumber, but works as expected if I use<br>&gt; Double..<br>&gt;<br>&gt; I dont know if it is related to NSNumber.stringValue since I dont know<br>&gt; what the third part lib does with the NSNumber, but I noticed this:<br>&gt;<br>&gt; let float = 100_000_00 as Float<br>&gt; let floatNumber = float as NSNumber<br>&gt;<br>&gt; let double = 100_000_00 as Double<br>&gt; let doubleNumer = double as NSNumber<br>&gt;<br>&gt; hardware.doThing(number: floatNumber as NSNumber) // Hardware does not<br>&gt; work<br>&gt; hardware.doThing(number: doubleNumer as NSNumber) // Hardware works<br>&gt;<br>&gt; // Also noticed this:<br>&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br>&gt;<br>&gt; Is this expected behaviour?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/7a62d05e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5b47db0ad05c288f5983599dce346aa5?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Lars-Jørgen Kristiansen</string> &lt;larsjk.84 at gmail.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks,<br></p><p>Will file a bug. <br>Not sure how the library uses the NSNumber since it&#39;s closed source. So it might be other inconsistencies as well..<br></p><p>&gt; 5. okt. 2016 kl. 13.50 skrev Zhao Xin &lt;owenzx at gmail.com&gt;:<br>&gt; <br>&gt; I think you should file a bug on the inconsistence of `description`. However, the third-party API somehow using the `description` is not a good idea.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Wed, Oct 5, 2016 at 5:30 PM, Lars-Jørgen Kristiansen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; I&#39;m working with a third party API for some external hardware. One of the functions takes a NSNumber, and it fails to interact correctly with the hardware if I cast a Float too NSNumber, but works as expected if I use Double..<br>&gt; <br>&gt; I dont know if it is related to NSNumber.stringValue since I dont know what the third part lib does with the NSNumber, but I noticed this:<br>&gt; <br>&gt; let float = 100_000_00 as Float<br>&gt; let floatNumber = float as NSNumber<br>&gt; <br>&gt; let double = 100_000_00 as Double<br>&gt; let doubleNumer = double as NSNumber<br>&gt; <br>&gt; hardware.doThing(number: floatNumber as NSNumber) // Hardware does not work<br>&gt; hardware.doThing(number: doubleNumer as NSNumber) // Hardware works<br>&gt; <br>&gt; // Also noticed this:<br>&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br>&gt; <br>&gt; Is this expected behaviour?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/66339226/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>October  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 2:30 AM, Lars-Jørgen Kristiansen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; // Also noticed this:<br>&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br></p><p>Numbers around 10 million are too large to be represented exactly by a 32-bit float — the mantissa is 24 bits, including sign, so its range is ±8.3 million. (The specific number 10,000,000 does come out exactly, though, since it’s a multiple of 128.) <br></p><p>So even if Float.description did use non-scientific notation for numbers at this scale, they wouldn’t be accurate. In fact the implementor of the .description method may have decided intentionally to switch to scientific notation at this scale so that the number of significant figures can be limited to the available precision.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/5c9e9309/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5b47db0ad05c288f5983599dce346aa5?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Lars-Jørgen Kristiansen</string> &lt;larsjk.84 at gmail.com&gt;<p>October  5, 2016 at 08:00:00pm</p></header><div class="content"><p>Hmm, I actually thought about this being the reason but couldn&#39;t remember the limits.<br></p><p>And thought that i would receive a overflows when stored into &#39;Float&#39; error...?<br></p><p>&gt; 5. okt. 2016 kl. 19.26 skrev Jens Alfke &lt;jens at mooseyard.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 2:30 AM, Lars-Jørgen Kristiansen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; // Also noticed this:<br>&gt;&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt;&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br>&gt; <br>&gt; Numbers around 10 million are too large to be represented exactly by a 32-bit float — the mantissa is 24 bits, including sign, so its range is ±8.3 million. (The specific number 10,000,000 does come out exactly, though, since it’s a multiple of 128.) <br>&gt; <br>&gt; So even if Float.description did use non-scientific notation for numbers at this scale, they wouldn’t be accurate. In fact the implementor of the .description method may have decided intentionally to switch to scientific notation at this scale so that the number of significant figures can be limited to the available precision.<br>&gt; <br>&gt; —Jens<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/4f8737c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>October  5, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 11:36 AM, Lars-Jørgen Kristiansen &lt;larsjk.84 at gmail.com&gt; wrote:<br>&gt; <br>&gt; And thought that i would receive a overflows when stored into &#39;Float&#39; error...?<br></p><p>It doesn’t overflow. (I think the maximum value of Float is around 1e37.) There just isn’t enough precision to represent it exactly, which is pretty common; the usual example is that 0.1 can’t be represented exactly by any size binary floating-point.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/d006b4f0/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 2:30 AM, Lars-Jørgen Kristiansen via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m working with a third party API for some external hardware. One of the functions takes a NSNumber, and it fails to interact correctly with the hardware if I cast a Float too NSNumber, but works as expected if I use Double..<br>&gt; <br>&gt; I dont know if it is related to NSNumber.stringValue since I dont know what the third part lib does with the NSNumber, but I noticed this:<br>&gt; <br>&gt; let float = 100_000_00 as Float<br>&gt; let floatNumber = float as NSNumber<br>&gt; <br>&gt; let double = 100_000_00 as Double<br>&gt; let doubleNumer = double as NSNumber<br>&gt; <br>&gt; hardware.doThing(number: floatNumber as NSNumber) // Hardware does not work<br>&gt; hardware.doThing(number: doubleNumer as NSNumber) // Hardware works<br>&gt; <br>&gt; // Also noticed this:<br>&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br>&gt; <br>&gt; Is this expected behaviour?<br></p><p>cc&#39;ing Tony and Philippe, who might be able to comment on the intended behavior of NSNumber here. When you cast using `as`, Swift will do the conversion through its Objective-C bridge, and will attempt to use a custom subclass of NSNumber that remembers the exact Swift type it was bridged as, such as Float or Double. There&#39;s a small chance your library is making assumptions that it&#39;s working with one of the standard NSNumber subclasses used by the Foundation implementation. If you call the NSNumber initializer `NSNumber(value: floatNumber)` instead of using the `as` conversion, you&#39;ll get one of these standard NSNumbers instead of a Swift-bridged NSNumber. Try that and see if it works. If using the initializer does indeed fix the problem, we&#39;d appreciate a bug report, so we can investigate fixing the incompatibility with our NSNumber subclasses.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/637b99c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5b47db0ad05c288f5983599dce346aa5?s=50"></div><header><strong>Different behaviour when casting Float and Double to NSNumber</strong> from <string>Lars-Jørgen Kristiansen</string> &lt;larsjk.84 at gmail.com&gt;<p>October  5, 2016 at 08:00:00pm</p></header><div class="content"><p>Thanks I will give that a try on Friday when I have the hardware available! Posted an issue and will add to that when I have tried, or if the library authors can comment on how they use the NSNumber..<br></p><p>&gt; 5. okt. 2016 kl. 19.31 skrev Joe Groff &lt;jgroff at apple.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 2:30 AM, Lars-Jørgen Kristiansen via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m working with a third party API for some external hardware. One of the functions takes a NSNumber, and it fails to interact correctly with the hardware if I cast a Float too NSNumber, but works as expected if I use Double..<br>&gt;&gt; <br>&gt;&gt; I dont know if it is related to NSNumber.stringValue since I dont know what the third part lib does with the NSNumber, but I noticed this:<br>&gt;&gt; <br>&gt;&gt; let float = 100_000_00 as Float<br>&gt;&gt; let floatNumber = float as NSNumber<br>&gt;&gt; <br>&gt;&gt; let double = 100_000_00 as Double<br>&gt;&gt; let doubleNumer = double as NSNumber<br>&gt;&gt; <br>&gt;&gt; hardware.doThing(number: floatNumber as NSNumber) // Hardware does not work<br>&gt;&gt; hardware.doThing(number: doubleNumer as NSNumber) // Hardware works<br>&gt;&gt; <br>&gt;&gt; // Also noticed this:<br>&gt;&gt; &quot;\(floatNumber)&quot; // &quot;1e+07&quot;<br>&gt;&gt; &quot;\(doubleNumer)&quot; // &quot;10000000&quot;<br>&gt;&gt; <br>&gt;&gt; Is this expected behaviour?<br>&gt; <br>&gt; cc&#39;ing Tony and Philippe, who might be able to comment on the intended behavior of NSNumber here. When you cast using `as`, Swift will do the conversion through its Objective-C bridge, and will attempt to use a custom subclass of NSNumber that remembers the exact Swift type it was bridged as, such as Float or Double. There&#39;s a small chance your library is making assumptions that it&#39;s working with one of the standard NSNumber subclasses used by the Foundation implementation. If you call the NSNumber initializer `NSNumber(value: floatNumber)` instead of using the `as` conversion, you&#39;ll get one of these standard NSNumbers instead of a Swift-bridged NSNumber. Try that and see if it works. If using the initializer does indeed fix the problem, we&#39;d appreciate a bug report, so we can investigate fixing the incompatibility with our NSNumber subclasses.<br>&gt; <br>&gt; -Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161005/10fd5dd0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
