<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>Hello there,<br></p><p>I wonder if it is a good idea to be able to finalize in protocols and default implementations.<br></p><p>Here is an example:<br></p><p>protocol MagicType {<br>     <br>    final var foo: Int { get }<br>    final func boo()<br>}<br></p><p>class X: MagicType {<br>     <br>    final var foo: Int {<br>         <br>        return 42<br>    }<br>     <br>    final func boo() {<br>         <br>        print(&quot;magic&quot;)<br>    }<br>}<br></p><p>class Y: X {<br>     <br>    // can&#39;t override func boo or var foo in here<br>}<br></p><p>//===================================================//<br></p><p>protocol SomeType {}<br></p><p>extension SomeType {<br>     <br>    final func foo() {<br>         <br>        print(&quot;Hello World&quot;)<br>    }<br>}<br></p><p>class A: SomeType {}<br></p><p>class B: SomeType {<br>     <br>    /* this should raise an error, because the class B shouldn&#39;t */<br>    /* be able to override that function from SomeType */  <br>     <br>    func foo() {<br>        // do something else  <br>    }<br>}<br></p><p><br>— <br>Regards Adrian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/2dc2398e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 18, 2016 at 07:00:00pm</p></header><div class="content"><p>I’d like to revive this idea I posted long time ago. There is only one thing I need to update here:<br>protocol MagicType: class /* missed the class constraint */ {<br>      <br>    final var foo: Int { get }<br>    final func boo()<br>}<br>What do you guys think? Is there any technical reason why this is not possible?<br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev (adrian.zubarev at devandartist.com) schrieb:<br></p><p>Hello there,<br></p><p>I wonder if it is a good idea to be able to finalize in protocols and default implementations.<br></p><p>Here is an example:<br></p><p>protocol MagicType {<br>      <br>    final var foo: Int { get }<br>    final func boo()<br>}<br></p><p>class X: MagicType {<br>      <br>    final var foo: Int {<br>          <br>        return 42<br>    }<br>      <br>    final func boo() {<br>          <br>        print(&quot;magic&quot;)<br>    }<br>}<br></p><p>class Y: X {<br>      <br>    // can&#39;t override func boo or var foo in here<br>}<br></p><p>//===================================================//<br></p><p>protocol SomeType {}<br></p><p>extension SomeType {<br>      <br>    final func foo() {<br>          <br>        print(&quot;Hello World&quot;)<br>    }<br>}<br></p><p>class A: SomeType {}<br></p><p>class B: SomeType {<br>      <br>    /* this should raise an error, because the class B shouldn&#39;t */<br>    /* be able to override that function from SomeType */   <br>      <br>    func foo() {<br>        // do something else   <br>    }<br>}<br></p><p><br></p><p>— <br>Regards Adrian<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/497ab787/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 12:53 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’d like to revive this idea I posted long time ago. There is only one thing I need to update here:<br>&gt;&gt; protocol MagicType: class /* missed the class constraint */ {<br>&gt;&gt;       <br>&gt;&gt;     final var foo: Int { get }<br>&gt;&gt;     final func boo()<br>&gt;&gt; }<br>What benefit is there in defining a protocol requirement as final?<br></p><p>&gt; What do you guys think? Is there any technical reason why this is not possible?<br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev (adrian.zubarev at devandartist.com &lt;mailto:adrian.zubarev at devandartist.com&gt;) schrieb:<br>&gt; <br>&gt;&gt; Hello there,<br>&gt;&gt; <br>&gt;&gt; I wonder if it is a good idea to be able to finalize in protocols and default implementations.<br>&gt;&gt; <br>&gt;&gt; Here is an example:<br>&gt;&gt; <br>&gt;&gt; protocol MagicType {<br>&gt;&gt;       <br>&gt;&gt;     final var foo: Int { get }<br>&gt;&gt;     final func boo()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class X: MagicType {<br>&gt;&gt;       <br>&gt;&gt;     final var foo: Int {<br>&gt;&gt;           <br>&gt;&gt;         return 42<br>&gt;&gt;     }<br>&gt;&gt;       <br>&gt;&gt;     final func boo() {<br>&gt;&gt;           <br>&gt;&gt;         print(&quot;magic&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Y: X {<br>&gt;&gt;       <br>&gt;&gt;     // can&#39;t override func boo or var foo in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //===================================================//<br>&gt;&gt; <br>&gt;&gt; protocol SomeType {}<br>&gt;&gt; <br>&gt;&gt; extension SomeType {<br>&gt;&gt;       <br>&gt;&gt;     final func foo() {<br>&gt;&gt;           <br>&gt;&gt;         print(&quot;Hello World&quot;)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class A: SomeType {}<br>&gt;&gt; <br>&gt;&gt; class B: SomeType {<br>&gt;&gt;       <br>&gt;&gt;     /* this should raise an error, because the class B shouldn&#39;t */<br>&gt;&gt;     /* be able to override that function from SomeType */   <br>&gt;&gt;       <br>&gt;&gt;     func foo() {<br>&gt;&gt;         // do something else   <br>&gt;&gt;     }<br>&gt;&gt; }<br>How do you anticipate this would interact with retroactive modeling of types which would conform the requirements of `SomeType` but also happen to have a `foo` method?<br></p><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; — <br>&gt;&gt; Regards Adrian<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/46577451/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 18, 2016 at 04:00:00pm</p></header><div class="content"><p>Adrian, what would be the meaning of this final declaration? In my<br>understanding, a final means there can be no more overrides of that<br>method but there are no implementations in a protocol so I really<br>don&#39;t understand this use.<br></p><p>On 18 May 2016 at 16:15, Matthew Johnson via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On May 18, 2016, at 12:53 PM, Adrian Zubarev via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I’d like to revive this idea I posted long time ago. There is only one thing<br>&gt; I need to update here:<br>&gt;<br>&gt; protocol MagicType: class /* missed the class constraint */ {<br>&gt;<br>&gt;     final var foo: Int { get }<br>&gt;     final func boo()<br>&gt; }<br>&gt;<br>&gt; What benefit is there in defining a protocol requirement as final?<br>&gt;<br>&gt; What do you guys think? Is there any technical reason why this is not<br>&gt; possible?<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev<br>&gt; (adrian.zubarev at devandartist.com) schrieb:<br>&gt;<br>&gt; Hello there,<br>&gt;<br>&gt; I wonder if it is a good idea to be able to finalize in protocols and<br>&gt; default implementations.<br>&gt;<br>&gt; Here is an example:<br>&gt;<br>&gt; protocol MagicType {<br>&gt;<br>&gt;     final var foo: Int { get }<br>&gt;     final func boo()<br>&gt; }<br>&gt;<br>&gt; class X: MagicType {<br>&gt;<br>&gt;     final var foo: Int {<br>&gt;<br>&gt;         return 42<br>&gt;     }<br>&gt;<br>&gt;     final func boo() {<br>&gt;<br>&gt;         print(&quot;magic&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; class Y: X {<br>&gt;<br>&gt;     // can&#39;t override func boo or var foo in here<br>&gt; }<br>&gt;<br>&gt; //===================================================//<br>&gt;<br>&gt; protocol SomeType {}<br>&gt;<br>&gt; extension SomeType {<br>&gt;<br>&gt;     final func foo() {<br>&gt;<br>&gt;         print(&quot;Hello World&quot;)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; class A: SomeType {}<br>&gt;<br>&gt; class B: SomeType {<br>&gt;<br>&gt;     /* this should raise an error, because the class B shouldn&#39;t */<br>&gt;     /* be able to override that function from SomeType */<br>&gt;<br>&gt;     func foo() {<br>&gt;         // do something else<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; How do you anticipate this would interact with retroactive modeling of types<br>&gt; which would conform the requirements of `SomeType` but also happen to have a<br>&gt; `foo` method?<br>&gt;<br>&gt;<br>&gt;<br>&gt; —<br>&gt; Regards Adrian<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Putting “final” on a default method implementation that is inside of a protocol extension could maybe make some sense to prevent other implementations of that method, but final in the protocol itself doesn’t make sense to me.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On May 18, 2016, at 2:18 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Adrian, what would be the meaning of this final declaration? In my<br>&gt; understanding, a final means there can be no more overrides of that<br>&gt; method but there are no implementations in a protocol so I really<br>&gt; don&#39;t understand this use.<br>&gt; <br>&gt; On 18 May 2016 at 16:15, Matthew Johnson via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 18, 2016, at 12:53 PM, Adrian Zubarev via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’d like to revive this idea I posted long time ago. There is only one thing<br>&gt;&gt; I need to update here:<br>&gt;&gt; <br>&gt;&gt; protocol MagicType: class /* missed the class constraint */ {<br>&gt;&gt; <br>&gt;&gt;    final var foo: Int { get }<br>&gt;&gt;    final func boo()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What benefit is there in defining a protocol requirement as final?<br>&gt;&gt; <br>&gt;&gt; What do you guys think? Is there any technical reason why this is not<br>&gt;&gt; possible?<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev<br>&gt;&gt; (adrian.zubarev at devandartist.com) schrieb:<br>&gt;&gt; <br>&gt;&gt; Hello there,<br>&gt;&gt; <br>&gt;&gt; I wonder if it is a good idea to be able to finalize in protocols and<br>&gt;&gt; default implementations.<br>&gt;&gt; <br>&gt;&gt; Here is an example:<br>&gt;&gt; <br>&gt;&gt; protocol MagicType {<br>&gt;&gt; <br>&gt;&gt;    final var foo: Int { get }<br>&gt;&gt;    final func boo()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class X: MagicType {<br>&gt;&gt; <br>&gt;&gt;    final var foo: Int {<br>&gt;&gt; <br>&gt;&gt;        return 42<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    final func boo() {<br>&gt;&gt; <br>&gt;&gt;        print(&quot;magic&quot;)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Y: X {<br>&gt;&gt; <br>&gt;&gt;    // can&#39;t override func boo or var foo in here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //===================================================//<br>&gt;&gt; <br>&gt;&gt; protocol SomeType {}<br>&gt;&gt; <br>&gt;&gt; extension SomeType {<br>&gt;&gt; <br>&gt;&gt;    final func foo() {<br>&gt;&gt; <br>&gt;&gt;        print(&quot;Hello World&quot;)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class A: SomeType {}<br>&gt;&gt; <br>&gt;&gt; class B: SomeType {<br>&gt;&gt; <br>&gt;&gt;    /* this should raise an error, because the class B shouldn&#39;t */<br>&gt;&gt;    /* be able to override that function from SomeType */<br>&gt;&gt; <br>&gt;&gt;    func foo() {<br>&gt;&gt;        // do something else<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; How do you anticipate this would interact with retroactive modeling of types<br>&gt;&gt; which would conform the requirements of `SomeType` but also happen to have a<br>&gt;&gt; `foo` method?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; —<br>&gt;&gt; Regards Adrian<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 2:21 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Putting “final” on a default method implementation that is inside of a protocol extension could maybe make some sense to prevent other implementations of that method, but final in the protocol itself doesn’t make sense to me.<br></p><p>It makes sense until you consider retroactive modeling.  When you do that it becomes unclear whether the two are compatible and retroactive modeling is far more important.<br></p><p>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On May 18, 2016, at 2:18 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Adrian, what would be the meaning of this final declaration? In my<br>&gt;&gt; understanding, a final means there can be no more overrides of that<br>&gt;&gt; method but there are no implementations in a protocol so I really<br>&gt;&gt; don&#39;t understand this use.<br>&gt;&gt; <br>&gt;&gt; On 18 May 2016 at 16:15, Matthew Johnson via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 18, 2016, at 12:53 PM, Adrian Zubarev via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to revive this idea I posted long time ago. There is only one thing<br>&gt;&gt;&gt; I need to update here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol MagicType: class /* missed the class constraint */ {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   final var foo: Int { get }<br>&gt;&gt;&gt;   final func boo()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What benefit is there in defining a protocol requirement as final?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you guys think? Is there any technical reason why this is not<br>&gt;&gt;&gt; possible?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev<br>&gt;&gt;&gt; (adrian.zubarev at devandartist.com) schrieb:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello there,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I wonder if it is a good idea to be able to finalize in protocols and<br>&gt;&gt;&gt; default implementations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here is an example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol MagicType {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   final var foo: Int { get }<br>&gt;&gt;&gt;   final func boo()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class X: MagicType {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   final var foo: Int {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       return 42<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   final func boo() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       print(&quot;magic&quot;)<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Y: X {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   // can&#39;t override func boo or var foo in here<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; //===================================================//<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol SomeType {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension SomeType {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   final func foo() {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       print(&quot;Hello World&quot;)<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class A: SomeType {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class B: SomeType {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   /* this should raise an error, because the class B shouldn&#39;t */<br>&gt;&gt;&gt;   /* be able to override that function from SomeType */<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func foo() {<br>&gt;&gt;&gt;       // do something else<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How do you anticipate this would interact with retroactive modeling of types<br>&gt;&gt;&gt; which would conform the requirements of `SomeType` but also happen to have a<br>&gt;&gt;&gt; `foo` method?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —<br>&gt;&gt;&gt; Regards Adrian<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Proposal: Finalization in protocol extensions and default implementations</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>That is exactly what I was thinking about back then when I posted this idea, but this doesn’t work, at least right now. I’m not sure if this will change if we’ll be forced to use `override` when there is a default implementation provided by the protocol. I’d hope for that behavior. Described here: https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#allowing-subclasses-to-override-requirements-satisfied-by-defaults-<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 18. Mai 2016 bei 21:21:40, Sean Heber via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>Putting “final” on a default method implementation that is inside of a protocol extension could maybe make some sense to prevent other implementations of that method, but final in the protocol itself doesn’t make sense to me.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On May 18, 2016, at 2:18 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt; Adrian, what would be the meaning of this final declaration? In my<br>&gt; understanding, a final means there can be no more overrides of that<br>&gt; method but there are no implementations in a protocol so I really<br>&gt; don&#39;t understand this use.<br>&gt;  <br>&gt; On 18 May 2016 at 16:15, Matthew Johnson via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; On May 18, 2016, at 12:53 PM, Adrian Zubarev via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; I’d like to revive this idea I posted long time ago. There is only one thing<br>&gt;&gt; I need to update here:<br>&gt;&gt;  <br>&gt;&gt; protocol MagicType: class /* missed the class constraint */ {<br>&gt;&gt;  <br>&gt;&gt; final var foo: Int { get }<br>&gt;&gt; final func boo()<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; What benefit is there in defining a protocol requirement as final?<br>&gt;&gt;  <br>&gt;&gt; What do you guys think? Is there any technical reason why this is not<br>&gt;&gt; possible?<br>&gt;&gt;  <br>&gt;&gt; --<br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt;  <br>&gt;&gt; Am 5. Dezember 2015 bei 16:26:23, Adrian Zubarev<br>&gt;&gt; (adrian.zubarev at devandartist.com) schrieb:<br>&gt;&gt;  <br>&gt;&gt; Hello there,<br>&gt;&gt;  <br>&gt;&gt; I wonder if it is a good idea to be able to finalize in protocols and<br>&gt;&gt; default implementations.<br>&gt;&gt;  <br>&gt;&gt; Here is an example:<br>&gt;&gt;  <br>&gt;&gt; protocol MagicType {<br>&gt;&gt;  <br>&gt;&gt; final var foo: Int { get }<br>&gt;&gt; final func boo()<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; class X: MagicType {<br>&gt;&gt;  <br>&gt;&gt; final var foo: Int {<br>&gt;&gt;  <br>&gt;&gt; return 42<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; final func boo() {<br>&gt;&gt;  <br>&gt;&gt; print(&quot;magic&quot;)<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; class Y: X {<br>&gt;&gt;  <br>&gt;&gt; // can&#39;t override func boo or var foo in here<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; //===================================================//<br>&gt;&gt;  <br>&gt;&gt; protocol SomeType {}<br>&gt;&gt;  <br>&gt;&gt; extension SomeType {<br>&gt;&gt;  <br>&gt;&gt; final func foo() {<br>&gt;&gt;  <br>&gt;&gt; print(&quot;Hello World&quot;)<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; class A: SomeType {}<br>&gt;&gt;  <br>&gt;&gt; class B: SomeType {<br>&gt;&gt;  <br>&gt;&gt; /* this should raise an error, because the class B shouldn&#39;t */<br>&gt;&gt; /* be able to override that function from SomeType */<br>&gt;&gt;  <br>&gt;&gt; func foo() {<br>&gt;&gt; // do something else<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; How do you anticipate this would interact with retroactive modeling of types<br>&gt;&gt; which would conform the requirements of `SomeType` but also happen to have a<br>&gt;&gt; `foo` method?<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; —<br>&gt;&gt; Regards Adrian<br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/d91cafbf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
