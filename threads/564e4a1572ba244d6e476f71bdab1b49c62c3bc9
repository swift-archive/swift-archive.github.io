<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f163c0be9c7f32231614d28b2ceccab?s=50"></div><header><strong>Cross-Compiling For ARM Linux</strong> from <string>Donald Pinckney</string> &lt;djpinckney at ucdavis.edu&gt;<p>May 11, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br> <br>Perhaps this has been discussed a lot already, but I&#39;m a bit lost as to the current state of cross-compiling Swift source code from x86_64 Linux to ARM Linux.    Given the documentation for cross-compiling for Android, it seems that there is some cross-compiling support, but I&#39;m not sure how I should go about making it not Android specific.<br> <br></p><p> <br>To be more concrete,    I would like to experiment with Swift for the FIRST Robotics Competition, which uses ARM Cortex A9, running Real-Time Linux.    For now, a reasonable intermediate goal seems like figuring out cross-compiling to a Raspberry Pi, which has already seen some attention from the Swift community.<br> <br></p><p> <br>So, it would be awesome if anyone can point me in the right direction!<br> <br></p><p> <br>Thanks,<br> <br>Donald Pinckney<br> <br> <br> <br></p><p> <br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160511/564e3bc9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Cross-Compiling For ARM Linux</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 11 May 2016, at 20:41, Donald Pinckney via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; Perhaps this has been discussed a lot already, but I&#39;m a bit lost as to the current state of cross-compiling Swift source code from x86_64 Linux to ARM Linux.  Given the documentation for cross-compiling for Android, it seems that there is some cross-compiling support, but I&#39;m not sure how I should go about making it not Android specific.<br>&gt; <br>&gt; To be more concrete,  I would like to experiment with Swift for the FIRST Robotics Competition, which uses ARM Cortex A9, running Real-Time Linux.  For now, a reasonable intermediate goal seems like figuring out cross-compiling to a Raspberry Pi, which has already seen some attention from the Swift community.<br>&gt; <br>&gt; So, it would be awesome if anyone can point me in the right direction!<br>&gt; <br>&gt; Thanks,<br>&gt; Donald Pinckney<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>Hi,<br></p><p>I don’t know if anybody else is, but I’m working on cross-compiling the entire toolchain for the RPi. Currently I’m able to compile clang, swift, the standard library, llbuild and lldb (although lldb doesn’t seem to be able to find any symbols right now, so it can pause and step through processes, but can’t set breakpoints or start the REPL — it’s a work in progress).<br></p><p>See my mail to swift-dev: http://comments.gmane.org/gmane.comp.lang.swift.devel/1966 &lt;http://comments.gmane.org/gmane.comp.lang.swift.devel/1966&gt;<br>Note that initially my target triple was wrong; you should make binutils for &quot;arm-linux-gnueabihf”, and you should edit “build_toolchain.sh” and “build_common.sh”, not install_toolchain and install_common (they don’t exist anyway).<br></p><p>I’ve been doing it from a Mac, but I’d love to hear if you can replicate it from linux.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160512/bfb98cc8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
