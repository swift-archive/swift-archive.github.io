<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels (a new approach)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  3, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Feb 02 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for 1, with an asterisk<br>&gt; mixed feelings about 2<br>&gt; +1 for 3<br>&gt;<br>&gt; Notes inline below.<br>&gt;<br>&gt;&gt; On Feb 2, 2016, at 6:32 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here&#39;s what I&#39;m thinking<br>&gt;&gt; <br>&gt;&gt; 1. If and only if the first argument could complete a sentence*<br>&gt;&gt;   beginning in the base name and describing the primary semantics of<br>&gt;&gt;   the call, it gets no argument label:<br>&gt;<br>&gt; Yes. The thoughts of “sentence” and “primary semantics” succinctly<br>&gt; capture a lot of good ideas from previous discussion.<br>&gt;<br>&gt;&gt;     a.contains(b)  // b completes the phrase &quot;a contains b&quot;<br>&gt;&gt;     a.mergeWith(b) // b completes the phrase &quot;merge with b&quot;<br>&gt;&gt; <br>&gt;&gt;     a.dismiss(animated: b) // &quot;a, dismiss b&quot; is a sentence but <br>&gt;&gt;                            // doesn&#39;t describe the semantics at all, <br>&gt;&gt;                            // thus we add a label for b.<br>&gt;&gt; <br>&gt;&gt;     a.moveTo(x: 300, y: 400) // &quot;a, move to 300&quot; is a sentence <br>&gt;&gt;                              // but doesn&#39;t describe the primary <br>&gt;&gt;                              // semantics, which are to move in both<br>&gt;&gt;                              // x and y.  Thus, x gets a label.<br>&gt;&gt; <br>&gt;&gt;     a.readFrom(u, ofType: b) // &quot;a, read from u&quot; describes<br>&gt;&gt;                              // the primary semantics, so u gets no<br>&gt;&gt;                              // label. b is an<br>&gt;&gt;                              // option that tunes the primary<br>&gt;&gt;                              // semantics<br>&gt;<br>&gt; All these examples seem totally solid.<br>&gt;<br>&gt;&gt;   [Note that this covers all the direct object cases and, I believe,<br>&gt;&gt;   all the default argument cases too, so maybe that exception can be<br>&gt;<br>&gt; Not sure about this one in theory … but yes, I can see how it would<br>&gt; play out that way in practice.<br></p><p>This is important; we want to pick rules that are as simple as possible<br>and still play out the right way in practice.  I will be raising that<br>point again in this thread.<br></p><p>&gt;&gt;   dropped.  We still need the exceptions for full-width type<br>&gt;&gt;   conversions and indistinguishable peers]<br>&gt;&gt; <br>&gt;&gt;   Note: when there is a noun in the base name describing the role of the<br>&gt;&gt;   first argument, we skip it in considering this criterion:<br>&gt;&gt; <br>&gt;&gt;      a.addObserver(b) // &quot;a, add b&quot; completes a sentence describing <br>&gt;&gt;                       // the semantics.  &quot;Observer&quot; is omitted in <br>&gt;&gt;                       // making this determination.<br>&gt;<br>&gt; Not sure you need this complicating exception. “a, add observer b” is still a sentence.<br></p><p>Um, okay, I hadn&#39;t looked at it that way.  But if the variable wasn&#39;t b but<br>some more complicated name or expression, you probably wouldn&#39;t think<br>that it makes a sentence e.g.<br></p><p>  a.addObserver(backgroundController)<br></p><p>We could either say you&#39;re allowed to mentally transform that into<br></p><p>  a.addTheObserverIndicatedBy(backgroundController) <br></p><p>(don&#39;t forget that can be an arbitrary expression, so you really need<br>something like “IndicatedBy”, and not just “Called”) or we can say<br>you&#39;re allowed to skip over “Observer.”  I think the latter is simpler.<br></p><p>&gt;&gt; * We could say &quot;clause&quot; here but I think making it an *independent*<br>&gt;&gt;  clause doesn&#39;t rule out any important use-cases (see<br>&gt;&gt;  https://web.cn.edu/kwheeler/gram_clauses_n_phrases.html) and at that<br>&gt;&gt;  point, you might as well say &quot;sentence,&quot; which is a more<br>&gt;&gt;  universally-understood term.<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;&gt; 2. Words that describe attributes of an *already-existing* instance<br>&gt;&gt;   should go in the base name rather than in a label:<br>&gt;&gt; <br>&gt;&gt;      a.tracksHavingMediaType(&quot;Wax Cylinder&quot;)      // yes<br>&gt;&gt;      a.removeFirstTrackHavingMediaType(&quot;BetaMax&quot;) // yes<br>&gt;&gt; <br>&gt;&gt;      a.tracks(mediaType: &quot;Wax Cylinder&quot;)          // no<br>&gt;&gt;      a.removeFirstTrack(havingMediaType: &quot;BetaMax&quot;) // no<br>&gt;&gt; <br>&gt;&gt;   [yes, we could use &quot;With&quot; instead of &quot;Having&quot;, but it&#39;s more<br>&gt;&gt;   ambiguous]<br>&gt;<br>&gt; I have reservations about this. It doesn’t generalize perfectly well:<br>&gt;<br>&gt; 	a.tracksHavingMediaType(&quot;Wax Cylinder”, andPianist: “Brahms”)<br>&gt;<br>&gt; …strikes me as awkward compared to one of these:<br>&gt;<br>&gt; 	a.tracksHaving(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt; 	// or <br>&gt; 	a.tracksMatchingCriteria(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br>&gt; 	// or even<br>&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”, pianist: “Brahms”)<br></p><p>Yes, we can extend the guideline to add the distribution pattern used in<br>the first example above (and mentioned in my reply to Charles<br>Kissinger).  The latter two are more ambiguous than the first one, FWIW;<br>I can think of misreadings for both of those.<br></p><p>&gt; …especially since, in a method of that form, _all_ the arguments are<br>&gt; likely to have a default value of nil:<br>&gt;<br>&gt; 	a.tracks(mediaType: &quot;Wax Cylinder”)<br>&gt; 	a.tracks(pianist: “Brahms”)<br></p><p>Ah... you make an interesting point here.  If it was reasonable to leave<br>out all the parameters, you&#39;d have to allow<br></p><p>    a.tracksHaving()<br></p><p>and likely someone will want a “tracks” property to go with this.  I<br>know one way to disallow the above line without exorbitant cost to users<br>of the API, which is to build an API that supports this:<br></p><p>    a.tracksWhere(.pianist == &quot;Brahms&quot; &amp;&amp; .mediaType == &quot;Wax Cylinder&quot;)<br></p><p>or <br></p><p>    a.tracksWhere(.pianist == &quot;Brahms&quot;, .mediaType == &quot;Wax Cylinder&quot;)<br></p><p>That&#39;s doable in a library, but by no means simple to code.  So here I<br>think we&#39;re just bumping up against the limits of what the language allows<br>us to express easily.  I think we&#39;ll have to declare the &quot;a.tracksHaving()&quot;<br>problem out of scope for the naming convention discussion.<br></p><p>Since I&#39;ve rambled afar, please let me know if I&#39;ve addressed your<br>concern here.<br></p><p>&gt;&gt;   Words that describe attributes of an instance *to be created* should<br>&gt;&gt;   go in argument labels, rather than the base name (for parity with<br>&gt;&gt;   initializers):<br>&gt;&gt; <br>&gt;&gt;      AudioTrack(mediaType: &quot;BetaMax&quot;)                   // initializer<br>&gt;&gt;      trackFactory.newTrack(mediaType: &quot;Wax Cylinder&quot;)   // yes<br>&gt;&gt; <br>&gt;&gt;      trackFactory.newTrackWithMediaType(&quot;Wax Cylinder&quot;) // no<br>&gt;<br>&gt; Yes, definitely.<br>&gt;<br>&gt;&gt; 3. (this one is separable) When the first argument is the *name* or<br>&gt;&gt;   *identifier* of the subject in the base name, do not label it or<br>&gt;&gt;   describe it in the base name.<br>&gt;&gt; <br>&gt;&gt;      a.transitionToScene(.GreatHall)               // yes<br>&gt;&gt;      a.transitionToSceneWithIdentifier(.GreatHall) // no<br>&gt;&gt; <br>&gt;&gt;      let p = someFont.glyph(&quot;propellor&quot;)           // yes<br>&gt;&gt;      let p = someFont.glyphWithName(&quot;propellor&quot;)   // no<br>&gt;&gt;      let p = someFont.glyph(name: &quot;propellor&quot;)     // no<br>&gt;<br>&gt; Yes, seems solid.<br>&gt;<br>&gt; Cheers, P<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
