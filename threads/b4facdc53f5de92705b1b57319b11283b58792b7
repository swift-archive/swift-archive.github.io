<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April 10, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;m in the process of implementing SE-0035, which limits capturing inout<br>parameter to @noescape contexts. The proposal is clear on capture behavior for<br>the following:<br></p><p>1. closure literals<br>2. nested function passed as arguments.<br></p><p>But I&#39;m not sure what to do with this case, in which &#39;x&#39; escapes.<br></p><p>func captureAndEscape(inout x: Int) -&gt; () -&gt; Void { func foo()<br>{ _ = x } return foo }<br></p><p>The most obvious answer is it should be considered with the same rule as<br>a closure literal, but a nested function can not have @noescape in its type<br>(for now anyways).<br></p><p>So, should this be legal, then? If not, where/how should the error be?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 11, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Apr 10, 2016, at 12:46 PM, Daniel Duan via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;m in the process of implementing SE-0035, which limits capturing inout<br>&gt; parameter to @noescape contexts. The proposal is clear on capture behavior for<br>&gt; the following:<br>&gt; <br>&gt; 1. closure literals<br>&gt; 2. nested function passed as arguments.<br>&gt; <br>&gt; But I&#39;m not sure what to do with this case, in which &#39;x&#39; escapes.<br>&gt; <br>&gt; func captureAndEscape(inout x: Int) -&gt; () -&gt; Void { func foo()<br>&gt; { _ = x } return foo }<br>&gt; <br>&gt; The most obvious answer is it should be considered with the same rule as<br>&gt; a closure literal, but a nested function can not have @noescape in its type<br>&gt; (for now anyways).<br>&gt; <br>&gt; So, should this be legal, then? If not, where/how should the error be? <br></p><p>Ideally IMO, we would consider a reference to a local function to be `@noescape` or not based on how the reference is used, rather than the type of the function declaration itself:<br></p><p>func escapes(_: () -&gt; ())<br>func noescapes(_: @noescape () -&gt; ())<br></p><p>func foo(inout x: Int) -&gt; () -&gt; () {<br>  func local() { _ = x }<br></p><p>  local() // full application doesn&#39;t form a closure, ref is @noescape here<br></p><p>  noescapes(local) // parameter is noescape, so ref is noescape<br></p><p>  escapes(local) // parameter is escapable, so ref is escapable<br></p><p>  var x = local // assigning to var forms a closure, so ref is escapabale<br></p><p>  return local // returning forms a closure, so ref is escapable<br>}<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April 11, 2016 at 04:00:00pm</p></header><div class="content"><p>Great! I&#39;ll check return statements in addition to ApplyExpr arguments.<br></p><p>- Daniel Duan<br></p><p><br></p><p><br>On Mon, Apr 11, 2016 at 8:44 AM -0700, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>&gt; On Apr 10, 2016, at 12:46 PM, Daniel Duan via swift-dev  wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;m in the process of implementing SE-0035, which limits capturing inout<br>&gt; parameter to @noescape contexts. The proposal is clear on capture behavior for<br>&gt; the following:<br>&gt; <br>&gt; 1. closure literals<br>&gt; 2. nested function passed as arguments.<br>&gt; <br>&gt; But I&#39;m not sure what to do with this case, in which &#39;x&#39; escapes.<br>&gt; <br>&gt; func captureAndEscape(inout x: Int) -&gt; () -&gt; Void { func foo()<br>&gt; { _ = x } return foo }<br>&gt; <br>&gt; The most obvious answer is it should be considered with the same rule as<br>&gt; a closure literal, but a nested function can not have @noescape in its type<br>&gt; (for now anyways).<br>&gt; <br>&gt; So, should this be legal, then? If not, where/how should the error be? <br></p><p>Ideally IMO, we would consider a reference to a local function to be `@noescape` or not based on how the reference is used, rather than the type of the function declaration itself:<br></p><p>func escapes(_: () -&gt; ())<br>func noescapes(_: @noescape () -&gt; ())<br></p><p>func foo(inout x: Int) -&gt; () -&gt; () {<br>  func local() { _ = x }<br></p><p>  local() // full application doesn&#39;t form a closure, ref is @noescape here<br></p><p>  noescapes(local) // parameter is noescape, so ref is noescape<br></p><p>  escapes(local) // parameter is escapable, so ref is escapable<br></p><p>  var x = local // assigning to var forms a closure, so ref is escapabale<br></p><p>  return local // returning forms a closure, so ref is escapable<br>}<br></p><p>-Joe<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160411/15aa9a0c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
