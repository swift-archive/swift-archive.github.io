<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>April 21, 2016 at 01:00:00pm</p></header><div class="content"><p>Pardon me if this has been raised before.<br></p><p>I gave a short presentation at our Cleveland CocoaHeads this week on what is coming in Swift 3. One of the attendees stayed behind to ask about the naming guidelines for mutating vs non-mutating. He is fairly new to Swift - coming from Ruby. I have no Ruby experience but am passing his thoughts on to this list.<br></p><p>He said that in Ruby they decorate the name with a symbol (I believe in their case it is “!”) to distinguish between the two. Although usually I’m not a fan of such naming conventions, we do something similar with inout parameters.<br></p><p>For example, if we have<br></p><p>func myFunc(param: inout String) { …}<br></p><p>we call it like this (using the Swift 3 first label convention)<br></p><p>myFunc(param: &amp;aName)<br></p><p>We use the &amp; to signal that the value of aName might be changed by the call to myFunc().<br></p><p>Similarly, instead of settling on a naming convention for verb vs verbed/verbing we could name the methods descriptively and require a symbol (here I use &amp; but only for illustration) to distinguish between mutating and non-mutating<br></p><p>so we would have <br></p><p>myArray.sort&amp;()<br></p><p>and<br></p><p>sortedArray = myArray.sort()<br></p><p>Xcode and other tools could enforce this naming pattern and warn us that a mutating method must end in “&amp;” and that a non-mutating method is not allowed to.<br></p><p>Best,<br></p><p>Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2000c4913814c2ca9e16442ae908265?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Krishna Kumar</string> &lt;kkdevenda at gmail.com&gt;<p>April 22, 2016 at 12:00:00pm</p></header><div class="content"><p>Hey<br></p><p>I think adding “&amp;” to methods will reduce the readability of the code. Also, keyword “mutating” makes it super clear and readable that my method is mutating the values.<br></p><p>1. mutating func add(value: Double){…}<br></p><p>2. func add&amp;(value: Double){…}<br></p><p>I think it’s easy to skip the information encoded into the 2nd function which is this function is mutating a value as compared to 1st. When I read 1st function I start reading with keyword “mutating” making its intentions clear to me.<br></p><p>Also, it might become a symbol nightmare with following type signature of a function-<br></p><p>func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br></p><p>I can see the advantage of using “&amp;” when calling a function. It makes clear at the call site that this method is mutating but still I don’t find eliminating “mutating” a good step for the reasons mentioned above.<br></p><p>Maybe we can think of some better solution.<br></p><p>Thanks<br></p><p>-Krishna<br></p><p>&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/9a0b757e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>April 22, 2016 at 12:00:00am</p></header><div class="content"><p>If I recall correctly there was a thread with a similar idea which instead would create a new operator for mutation or a new way of method invocation, such that mutating methods would be called with &amp;. or something similar. e.g.<br></p><p>foo&amp;.add(5)<br></p><p>I think the consensus was that that was not a particularly familiar syntax and it would add a decent amount of noise.<br></p><p>There may have also been some issues with the grammar, I can&#39;t recall.<br></p><p>&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey<br>&gt; <br>&gt; I think adding “&amp;” to methods will reduce the readability of the code. Also, keyword “mutating” makes it super clear and readable that my method is mutating the values.<br>&gt; <br>&gt; 1. mutating func add(value: Double){…}<br>&gt; <br>&gt; 2. func add&amp;(value: Double){…}<br>&gt; <br>&gt; I think it’s easy to skip the information encoded into the 2nd function which is this function is mutating a value as compared to 1st. When I read 1st function I start reading with keyword “mutating” making its intentions clear to me.<br>&gt; <br>&gt; Also, it might become a symbol nightmare with following type signature of a function-<br>&gt; <br>&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt; <br>&gt; I can see the advantage of using “&amp;” when calling a function. It makes clear at the call site that this method is mutating but still I don’t find eliminating “mutating” a good step for the reasons mentioned above.<br>&gt; <br>&gt; Maybe we can think of some better solution.<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -Krishna<br>&gt; <br>&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; swift-evolution at swift.org<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/34e0df80/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>April 22, 2016 at 12:00:00am</p></header><div class="content"><p>That being said I try to follow most of the discussions on swift-evolution and there does seem to be a great deal of hand wringing regarding this and things related to or affected by this.<br></p><p>&gt; On Apr 22, 2016, at 12:00 AM, Tyler Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If I recall correctly there was a thread with a similar idea which instead would create a new operator for mutation or a new way of method invocation, such that mutating methods would be called with &amp;. or something similar. e.g.<br>&gt; <br>&gt; foo&amp;.add(5)<br>&gt; <br>&gt; I think the consensus was that that was not a particularly familiar syntax and it would add a decent amount of noise.<br>&gt; <br>&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br>&gt; <br>&gt;&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey<br>&gt;&gt; <br>&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the code. Also, keyword “mutating” makes it super clear and readable that my method is mutating the values.<br>&gt;&gt; <br>&gt;&gt; 1. mutating func add(value: Double){…}<br>&gt;&gt; <br>&gt;&gt; 2. func add&amp;(value: Double){…}<br>&gt;&gt; <br>&gt;&gt; I think it’s easy to skip the information encoded into the 2nd function which is this function is mutating a value as compared to 1st. When I read 1st function I start reading with keyword “mutating” making its intentions clear to me.<br>&gt;&gt; <br>&gt;&gt; Also, it might become a symbol nightmare with following type signature of a function-<br>&gt;&gt; <br>&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt;&gt; <br>&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It makes clear at the call site that this method is mutating but still I don’t find eliminating “mutating” a good step for the reasons mentioned above.<br>&gt;&gt; <br>&gt;&gt; Maybe we can think of some better solution.<br>&gt;&gt; <br>&gt;&gt; Thanks<br>&gt;&gt; <br>&gt;&gt; -Krishna<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/5d5df0a7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 01:00:00pm</p></header><div class="content"><p>From one point of view, it will be really awesome if we&#39;ll have some kind <br>of &#39;marker&#39; for mutating methods so we can clearly see in code if that <br>method changes the instance(just like we all agree that we must specify &amp; <br>for inout parameter).<br></p><p> From other point of view, this will add a much more noise(and typing) in <br>code as we often(in most cases?) use mutating methods. Have a code with a <br>huge number of &amp; symbols(or other) in it - not the best thing.<br></p><p>I don&#39;t see how we can unite both points.<br></p><p>On 22.04.2016 10:00, Tyler Cloutier via swift-evolution wrote:<br>&gt; If I recall correctly there was a thread with a similar idea which instead<br>&gt; would create a new operator for mutation or a new way of method invocation,<br>&gt; such that mutating methods would be called with &amp;. or something similar. e.g.<br>&gt;<br>&gt; foo&amp;.add(5)<br>&gt;<br>&gt; I think the consensus was that that was not a particularly familiar syntax<br>&gt; and it would add a decent amount of noise.<br>&gt;<br>&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br>&gt;<br>&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Hey<br>&gt;&gt;<br>&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the code.<br>&gt;&gt; Also, keyword “mutating” makes it super clear and readable that my method<br>&gt;&gt; is mutating the values.<br>&gt;&gt;<br>&gt;&gt; 1. mutating func add(value: Double){…}<br>&gt;&gt;<br>&gt;&gt; 2. func add&amp;(value: Double){…}<br>&gt;&gt;<br>&gt;&gt; I think it’s easy to skip the information encoded into the 2nd function<br>&gt;&gt; which is this function is mutating a value as compared to 1st. When I<br>&gt;&gt; read 1st function I start reading with keyword “mutating” making its<br>&gt;&gt; intentions clear to me.<br>&gt;&gt;<br>&gt;&gt; Also, it might become a symbol nightmare with following type signature of<br>&gt;&gt; a function-<br>&gt;&gt;<br>&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt;&gt;<br>&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It makes<br>&gt;&gt; clear at the call site that this method is mutating but still I don’t<br>&gt;&gt; find eliminating “mutating” a good step for the reasons mentioned above.<br>&gt;&gt;<br>&gt;&gt; Maybe we can think of some better solution.<br>&gt;&gt;<br>&gt;&gt; Thanks<br>&gt;&gt;<br>&gt;&gt; -Krishna<br>&gt;&gt;<br>&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 22, 2016 at 12:00:00pm</p></header><div class="content"><p>This is why I mentioned Xcode; while we can have ampersand as a language feature for marking such things explicitly (i.e- developer consents to doing it), we could also just have Xcode highlight inout parameters and mutating methods differently, but would these represent the same explicit “I know that what I’m doing here will have side-effects” impact (especially if other IDEs add Swift support but don’t do this).<br></p><p>&gt; On 22 Apr 2016, at 11:54, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; From one point of view, it will be really awesome if we&#39;ll have some kind of &#39;marker&#39; for mutating methods so we can clearly see in code if that method changes the instance(just like we all agree that we must specify &amp; for inout parameter).<br>&gt; <br>&gt; From other point of view, this will add a much more noise(and typing) in code as we often(in most cases?) use mutating methods. Have a code with a huge number of &amp; symbols(or other) in it - not the best thing.<br>&gt; <br>&gt; I don&#39;t see how we can unite both points.<br>&gt; <br>&gt; On 22.04.2016 10:00, Tyler Cloutier via swift-evolution wrote:<br>&gt;&gt; If I recall correctly there was a thread with a similar idea which instead<br>&gt;&gt; would create a new operator for mutation or a new way of method invocation,<br>&gt;&gt; such that mutating methods would be called with &amp;. or something similar. e.g.<br>&gt;&gt; <br>&gt;&gt; foo&amp;.add(5)<br>&gt;&gt; <br>&gt;&gt; I think the consensus was that that was not a particularly familiar syntax<br>&gt;&gt; and it would add a decent amount of noise.<br>&gt;&gt; <br>&gt;&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br>&gt;&gt; <br>&gt;&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hey<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the code.<br>&gt;&gt;&gt; Also, keyword “mutating” makes it super clear and readable that my method<br>&gt;&gt;&gt; is mutating the values.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. mutating func add(value: Double){…}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. func add&amp;(value: Double){…}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think it’s easy to skip the information encoded into the 2nd function<br>&gt;&gt;&gt; which is this function is mutating a value as compared to 1st. When I<br>&gt;&gt;&gt; read 1st function I start reading with keyword “mutating” making its<br>&gt;&gt;&gt; intentions clear to me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, it might become a symbol nightmare with following type signature of<br>&gt;&gt;&gt; a function-<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It makes<br>&gt;&gt;&gt; clear at the call site that this method is mutating but still I don’t<br>&gt;&gt;&gt; find eliminating “mutating” a good step for the reasons mentioned above.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe we can think of some better solution.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Krishna<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>April 22, 2016 at 12:00:00pm</p></header><div class="content"><p>What if we had a concept similar to errors and try ?<br></p><p>Given this function:<br></p><p>func sort() -&gt; Self {<br>}<br></p><p>mutating sort() -&gt; Self {<br>}<br></p><p><br>If a developer calls:<br></p><p>array.sort()<br></p><p>It will sort a copy of that array, in order to sort in place the developer<br>must confirm the mutation like so:<br></p><p>mutate array.sort()<br></p><p>This will then call the mutating version of sort :)<br></p><p>*___________________________________*<br></p><p>*James⎥Chief Of Fun*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On 22 April 2016 at 12:31, Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is why I mentioned Xcode; while we can have ampersand as a language<br>&gt; feature for marking such things explicitly (i.e- developer consents to<br>&gt; doing it), we could also just have Xcode highlight inout parameters and<br>&gt; mutating methods differently, but would these represent the same explicit<br>&gt; “I know that what I’m doing here will have side-effects” impact (especially<br>&gt; if other IDEs add Swift support but don’t do this).<br>&gt;<br>&gt; &gt; On 22 Apr 2016, at 11:54, Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; From one point of view, it will be really awesome if we&#39;ll have some<br>&gt; kind of &#39;marker&#39; for mutating methods so we can clearly see in code if that<br>&gt; method changes the instance(just like we all agree that we must specify &amp;<br>&gt; for inout parameter).<br>&gt; &gt;<br>&gt; &gt; From other point of view, this will add a much more noise(and typing) in<br>&gt; code as we often(in most cases?) use mutating methods. Have a code with a<br>&gt; huge number of &amp; symbols(or other) in it - not the best thing.<br>&gt; &gt;<br>&gt; &gt; I don&#39;t see how we can unite both points.<br>&gt; &gt;<br>&gt; &gt; On 22.04.2016 10:00, Tyler Cloutier via swift-evolution wrote:<br>&gt; &gt;&gt; If I recall correctly there was a thread with a similar idea which<br>&gt; instead<br>&gt; &gt;&gt; would create a new operator for mutation or a new way of method<br>&gt; invocation,<br>&gt; &gt;&gt; such that mutating methods would be called with &amp;. or something<br>&gt; similar. e.g.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; foo&amp;.add(5)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think the consensus was that that was not a particularly familiar<br>&gt; syntax<br>&gt; &gt;&gt; and it would add a decent amount of noise.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Hey<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the code.<br>&gt; &gt;&gt;&gt; Also, keyword “mutating” makes it super clear and readable that my<br>&gt; method<br>&gt; &gt;&gt;&gt; is mutating the values.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; 1. mutating func add(value: Double){…}<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; 2. func add&amp;(value: Double){…}<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I think it’s easy to skip the information encoded into the 2nd function<br>&gt; &gt;&gt;&gt; which is this function is mutating a value as compared to 1st. When I<br>&gt; &gt;&gt;&gt; read 1st function I start reading with keyword “mutating” making its<br>&gt; &gt;&gt;&gt; intentions clear to me.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Also, it might become a symbol nightmare with following type signature<br>&gt; of<br>&gt; &gt;&gt;&gt; a function-<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It makes<br>&gt; &gt;&gt;&gt; clear at the call site that this method is mutating but still I don’t<br>&gt; &gt;&gt;&gt; find eliminating “mutating” a good step for the reasons mentioned<br>&gt; above.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Maybe we can think of some better solution.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Thanks<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Krishna<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution<br>&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/54c8022e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 22, 2016 at 12:00:00pm</p></header><div class="content"><p>Well, you could actually have something like this now, and use whether the returned result was used or not to know if was a mutating or nonmutating method or not.<br></p><p>Patrick<br></p><p><br></p><p><br>On Fri, Apr 22, 2016 at 4:53 AM -0700, &quot;James Campbell via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>What if we had a concept similar to errors and try ? <br>Given this function:<br>func sort() -&gt; Self {}<br>mutating sort() -&gt; Self {}<br></p><p>If a developer calls:<br>array.sort()<br>It will sort a copy of that array, in order to sort in place the developer must confirm the mutation like so:<br>mutate array.sort()<br>This will then call the mutating version of sort :)<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>___________________________________<br></p><p>James⎥Chief Of Fun<br></p><p>james at supmenow.com⎥supmenow.com<br></p><p>Sup<br></p><p>Runway East <br></p><p>10 Finsbury Square<br></p><p>London<br></p><p> EC2A 1AF <br></p><p>On 22 April 2016 at 12:31, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>This is why I mentioned Xcode; while we can have ampersand as a language feature for marking such things explicitly (i.e- developer consents to doing it), we could also just have Xcode highlight inout parameters and mutating methods differently, but would these represent the same explicit “I know that what I’m doing here will have side-effects” impact (especially if other IDEs add Swift support but don’t do this).<br></p><p><br></p><p>&gt; On 22 Apr 2016, at 11:54, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br></p><p>&gt; From one point of view, it will be really awesome if we&#39;ll have some kind of &#39;marker&#39; for mutating methods so we can clearly see in code if that method changes the instance(just like we all agree that we must specify &amp; for inout parameter).<br></p><p>&gt;<br></p><p>&gt; From other point of view, this will add a much more noise(and typing) in code as we often(in most cases?) use mutating methods. Have a code with a huge number of &amp; symbols(or other) in it - not the best thing.<br></p><p>&gt;<br></p><p>&gt; I don&#39;t see how we can unite both points.<br></p><p>&gt;<br></p><p>&gt; On 22.04.2016 10:00, Tyler Cloutier via swift-evolution wrote:<br></p><p>&gt;&gt; If I recall correctly there was a thread with a similar idea which instead<br></p><p>&gt;&gt; would create a new operator for mutation or a new way of method invocation,<br></p><p>&gt;&gt; such that mutating methods would be called with &amp;. or something similar. e.g.<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; foo&amp;.add(5)<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; I think the consensus was that that was not a particularly familiar syntax<br></p><p>&gt;&gt; and it would add a decent amount of noise.<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution<br></p><p>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>&gt;&gt;<br></p><p>&gt;&gt;&gt; Hey<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the code.<br></p><p>&gt;&gt;&gt; Also, keyword “mutating” makes it super clear and readable that my method<br></p><p>&gt;&gt;&gt; is mutating the values.<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; 1. mutating func add(value: Double){…}<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; 2. func add&amp;(value: Double){…}<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; I think it’s easy to skip the information encoded into the 2nd function<br></p><p>&gt;&gt;&gt; which is this function is mutating a value as compared to 1st. When I<br></p><p>&gt;&gt;&gt; read 1st function I start reading with keyword “mutating” making its<br></p><p>&gt;&gt;&gt; intentions clear to me.<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; Also, it might become a symbol nightmare with following type signature of<br></p><p>&gt;&gt;&gt; a function-<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It makes<br></p><p>&gt;&gt;&gt; clear at the call site that this method is mutating but still I don’t<br></p><p>&gt;&gt;&gt; find eliminating “mutating” a good step for the reasons mentioned above.<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; Maybe we can think of some better solution.<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; Thanks<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; -Krishna<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution<br></p><p>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>&gt;&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br></p><p>&gt;&gt;&gt;<br></p><p>&gt;&gt;&gt; _______________________________________________<br></p><p>&gt;&gt;&gt; swift-evolution mailing list<br></p><p>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br></p><p>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>&gt;&gt;<br></p><p>&gt;&gt;<br></p><p>&gt;&gt; _______________________________________________<br></p><p>&gt;&gt; swift-evolution mailing list<br></p><p>&gt;&gt; swift-evolution at swift.org<br></p><p>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>&gt;&gt;<br></p><p>&gt; _______________________________________________<br></p><p>&gt; swift-evolution mailing list<br></p><p>&gt; swift-evolution at swift.org<br></p><p>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>_______________________________________________<br></p><p>swift-evolution mailing list<br></p><p>swift-evolution at swift.org<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/9fa8e174/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>April 22, 2016 at 03:00:00pm</p></header><div class="content"><p>The benefit, as I see it, to this approach is not that it reduces noise. It<br>is that it standardizes the naming decision in a broadly applicable manner.<br>Look at the discussion that took place around `union` and `formUnion` to<br>see that this standardization could be beneficial. The argument that this<br>would &#39;add noise&#39; seems flawed to me, since there is at least as much<br>&#39;noise&#39; in distinguishing between `sort` and `sorted`.<br></p><p>All of that said, I do have a concern that whatever character we use might<br>be too subtle or easily confused with some other meaning. I understand that<br>`&amp;` was just a suggestion but, for example, the proximity to another place<br>where that glyph would be valid and have a different meaning is a potential<br>issue.<br></p><p>I think that we should seriously consider this, &#39;noise&#39; ideas aside. If we<br>could agree on a convention that didn&#39;t need to consider the specific<br>grammar of the methods,  we would have removed a major wrinkle in designing<br>Swift APIs.<br></p><p>TJ<br></p><p>On Fri, Apr 22, 2016 at 8:04 AM, Patrick Smith via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Well, you could actually have something like this now, and use whether the<br>&gt; returned result was used or not to know if was a mutating or nonmutating<br>&gt; method or not.<br>&gt;<br>&gt; Patrick<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Fri, Apr 22, 2016 at 4:53 AM -0700, &quot;James Campbell via<br>&gt; swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What if we had a concept similar to errors and try ?<br>&gt;&gt;<br>&gt;&gt; Given this function:<br>&gt;&gt;<br>&gt;&gt; func sort() -&gt; Self {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; mutating sort() -&gt; Self {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If a developer calls:<br>&gt;&gt;<br>&gt;&gt; array.sort()<br>&gt;&gt;<br>&gt;&gt; It will sort a copy of that array, in order to sort in place the<br>&gt;&gt; developer must confirm the mutation like so:<br>&gt;&gt;<br>&gt;&gt; mutate array.sort()<br>&gt;&gt;<br>&gt;&gt; This will then call the mutating version of sort :)<br>&gt;&gt;<br>&gt;&gt; *___________________________________*<br>&gt;&gt;<br>&gt;&gt; *James⎥Chief Of Fun*<br>&gt;&gt;<br>&gt;&gt; *james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com<br>&gt;&gt; &lt;http://supmenow.com&gt;*<br>&gt;&gt;<br>&gt;&gt; *Sup*<br>&gt;&gt;<br>&gt;&gt; *Runway East *<br>&gt;&gt;<br>&gt;&gt; *10 Finsbury Square*<br>&gt;&gt;<br>&gt;&gt; *London*<br>&gt;&gt;<br>&gt;&gt; * EC2A 1AF *<br>&gt;&gt;<br>&gt;&gt; On 22 April 2016 at 12:31, Haravikk via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; This is why I mentioned Xcode; while we can have ampersand as a language<br>&gt;&gt;&gt; feature for marking such things explicitly (i.e- developer consents to<br>&gt;&gt;&gt; doing it), we could also just have Xcode highlight inout parameters and<br>&gt;&gt;&gt; mutating methods differently, but would these represent the same explicit<br>&gt;&gt;&gt; “I know that what I’m doing here will have side-effects” impact (especially<br>&gt;&gt;&gt; if other IDEs add Swift support but don’t do this).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On 22 Apr 2016, at 11:54, Vladimir.S via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; From one point of view, it will be really awesome if we&#39;ll have some<br>&gt;&gt;&gt; kind of &#39;marker&#39; for mutating methods so we can clearly see in code if that<br>&gt;&gt;&gt; method changes the instance(just like we all agree that we must specify &amp;<br>&gt;&gt;&gt; for inout parameter).<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; From other point of view, this will add a much more noise(and typing)<br>&gt;&gt;&gt; in code as we often(in most cases?) use mutating methods. Have a code with<br>&gt;&gt;&gt; a huge number of &amp; symbols(or other) in it - not the best thing.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I don&#39;t see how we can unite both points.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On 22.04.2016 10:00, Tyler Cloutier via swift-evolution wrote:<br>&gt;&gt;&gt; &gt;&gt; If I recall correctly there was a thread with a similar idea which<br>&gt;&gt;&gt; instead<br>&gt;&gt;&gt; &gt;&gt; would create a new operator for mutation or a new way of method<br>&gt;&gt;&gt; invocation,<br>&gt;&gt;&gt; &gt;&gt; such that mutating methods would be called with &amp;. or something<br>&gt;&gt;&gt; similar. e.g.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; foo&amp;.add(5)<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I think the consensus was that that was not a particularly familiar<br>&gt;&gt;&gt; syntax<br>&gt;&gt;&gt; &gt;&gt; and it would add a decent amount of noise.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; There may have also been some issues with the grammar, I can&#39;t recall.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; On Apr 21, 2016, at 11:40 PM, Krishna Kumar via swift-evolution<br>&gt;&gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Hey<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I think adding “&amp;” to methods will reduce the readability of the<br>&gt;&gt;&gt; code.<br>&gt;&gt;&gt; &gt;&gt;&gt; Also, keyword “mutating” makes it super clear and readable that my<br>&gt;&gt;&gt; method<br>&gt;&gt;&gt; &gt;&gt;&gt; is mutating the values.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; 1. mutating func add(value: Double){…}<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; 2. func add&amp;(value: Double){…}<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I think it’s easy to skip the information encoded into the 2nd<br>&gt;&gt;&gt; function<br>&gt;&gt;&gt; &gt;&gt;&gt; which is this function is mutating a value as compared to 1st. When I<br>&gt;&gt;&gt; &gt;&gt;&gt; read 1st function I start reading with keyword “mutating” making its<br>&gt;&gt;&gt; &gt;&gt;&gt; intentions clear to me.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Also, it might become a symbol nightmare with following type<br>&gt;&gt;&gt; signature of<br>&gt;&gt;&gt; &gt;&gt;&gt; a function-<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I can see the advantage of using “&amp;” when calling a function. It<br>&gt;&gt;&gt; makes<br>&gt;&gt;&gt; &gt;&gt;&gt; clear at the call site that this method is mutating but still I don’t<br>&gt;&gt;&gt; &gt;&gt;&gt; find eliminating “mutating” a good step for the reasons mentioned<br>&gt;&gt;&gt; above.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Maybe we can think of some better solution.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Thanks<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; -Krishna<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/6e109f3d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>April 22, 2016 at 10:00:00am</p></header><div class="content"><p>Sorry I left mutating off by mistake. I&#39;m referring to the call site more<br></p><p>&gt; On Apr 22, 2016, at 8:40 AM, Krishna Kumar &lt;kkdevenda at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hey<br>&gt; <br>&gt; I think adding “&amp;” to methods will reduce the readability of the code. Also, keyword “mutating” makes it super clear and readable that my method is mutating the values.<br>&gt; <br>&gt; 1. mutating func add(value: Double){…}<br>&gt; <br>&gt; 2. func add&amp;(value: Double){…}<br>&gt; <br>&gt; I think it’s easy to skip the information encoded into the 2nd function which is this function is mutating a value as compared to 1st. When I read 1st function I start reading with keyword “mutating” making its intentions clear to me.<br>&gt; <br>&gt; Also, it might become a symbol nightmare with following type signature of a function-<br>&gt; <br>&gt; func nightmare&amp;(title: String?) -&gt; String? -&gt; String?{…}<br>&gt; <br>&gt; I can see the advantage of using “&amp;” when calling a function. It makes clear at the call site that this method is mutating but still I don’t find eliminating “mutating” a good step for the reasons mentioned above.<br>&gt; <br>&gt; Maybe we can think of some better solution.<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; -Krishna<br>&gt; <br>&gt;&gt; On Apr 21, 2016, at 10:38 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; swift-evolution at swift.org<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/0ee25b40/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 22, 2016 at 11:00:00am</p></header><div class="content"><p>I think that Swift has this fairly well covered so long as your mutating methods don’t need to return anything, as the type system will handle that, while @warn_unused_result (which I think is becoming the default on methods with return types?) will cover the non-mutating cases. The only place where it gets awkward is if a mutating method needs to return something, but the name of the method should ideally be something clear in such cases.<br></p><p>Basically I think that as long as type-checking/unused result checking and a clear naming scheme solve the problem there should be no need for a custom syntax.<br></p><p><br>Aside from that I think that is something that an Xcode feature could solve; for example if mutating methods were coloured differently from non-mutating ones.<br></p><p>&gt; On 21 Apr 2016, at 18:08, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Pardon me if this has been raised before.<br>&gt; <br>&gt; I gave a short presentation at our Cleveland CocoaHeads this week on what is coming in Swift 3. One of the attendees stayed behind to ask about the naming guidelines for mutating vs non-mutating. He is fairly new to Swift - coming from Ruby. I have no Ruby experience but am passing his thoughts on to this list.<br>&gt; <br>&gt; He said that in Ruby they decorate the name with a symbol (I believe in their case it is “!”) to distinguish between the two. Although usually I’m not a fan of such naming conventions, we do something similar with inout parameters.<br>&gt; <br>&gt; For example, if we have<br>&gt; <br>&gt; func myFunc(param: inout String) { …}<br>&gt; <br>&gt; we call it like this (using the Swift 3 first label convention)<br>&gt; <br>&gt; myFunc(param: &amp;aName)<br>&gt; <br>&gt; We use the &amp; to signal that the value of aName might be changed by the call to myFunc().<br>&gt; <br>&gt; Similarly, instead of settling on a naming convention for verb vs verbed/verbing we could name the methods descriptively and require a symbol (here I use &amp; but only for illustration) to distinguish between mutating and non-mutating<br>&gt; <br>&gt; so we would have <br>&gt; <br>&gt; myArray.sort&amp;()<br>&gt; <br>&gt; and<br>&gt; <br>&gt; sortedArray = myArray.sort()<br>&gt; <br>&gt; Xcode and other tools could enforce this naming pattern and warn us that a mutating method must end in “&amp;” and that a non-mutating method is not allowed to.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; Daniel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 22, 2016 at 11:00:00am</p></header><div class="content"><p>I think that Swift has this fairly well covered so long as your mutating methods don’t need to return anything, as the type system will handle that, while @warn_unused_result (which I think is becoming the default on methods with return types?) will cover the non-mutating cases. The only place where it gets awkward is if a mutating method needs to return something, but the name of the method should ideally be something clear in such cases.<br></p><p>Basically I think that as long as type-checking/unused result checking and a clear naming scheme solve the problem there should be no need for a custom syntax.<br></p><p><br>Aside from that I think that is something that an Xcode feature could solve; for example if mutating methods were coloured differently from non-mutating ones.<br></p><p>&gt; On 21 Apr 2016, at 18:08, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Pardon me if this has been raised before.<br>&gt; <br>&gt; I gave a short presentation at our Cleveland CocoaHeads this week on what is coming in Swift 3. One of the attendees stayed behind to ask about the naming guidelines for mutating vs non-mutating. He is fairly new to Swift - coming from Ruby. I have no Ruby experience but am passing his thoughts on to this list.<br>&gt; <br>&gt; He said that in Ruby they decorate the name with a symbol (I believe in their case it is “!”) to distinguish between the two. Although usually I’m not a fan of such naming conventions, we do something similar with inout parameters.<br>&gt; <br>&gt; For example, if we have<br>&gt; <br>&gt; func myFunc(param: inout String) { …}<br>&gt; <br>&gt; we call it like this (using the Swift 3 first label convention)<br>&gt; <br>&gt; myFunc(param: &amp;aName)<br>&gt; <br>&gt; We use the &amp; to signal that the value of aName might be changed by the call to myFunc().<br>&gt; <br>&gt; Similarly, instead of settling on a naming convention for verb vs verbed/verbing we could name the methods descriptively and require a symbol (here I use &amp; but only for illustration) to distinguish between mutating and non-mutating<br>&gt; <br>&gt; so we would have <br>&gt; <br>&gt; myArray.sort&amp;()<br>&gt; <br>&gt; and<br>&gt; <br>&gt; sortedArray = myArray.sort()<br>&gt; <br>&gt; Xcode and other tools could enforce this naming pattern and warn us that a mutating method must end in “&amp;” and that a non-mutating method is not allowed to.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; Daniel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
