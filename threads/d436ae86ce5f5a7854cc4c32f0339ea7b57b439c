<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>Best way to solve ambiguous references to methods</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December  5, 2015 at 12:00:00pm</p></header><div class="content"><p>So I was playing around with Sequences, and I came across a problem I haven&#39;t been able to solve in a decent way. I’ve reduced it to a simpler example here:<br></p><p><br>let array : [Int] = [1, 2, 3]<br></p><p>let mapArray = array.map { $0 }<br></p><p>let flatArray = mapArray.flatten() // Error!<br></p><p><br>This last line of code prints the following error:<br></p><p><br>let flatArray = mapArray.flatten() // Error!<br>                ^~~~~~~~<br>Swift.SequenceType:4:17: note: found this candidate<br>    public func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>                ^<br>Swift.CollectionType:4:17: note: found this candidate<br>    public func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>                ^<br>Swift.CollectionType:4:17: note: found this candidate<br>    public func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>                ^<br></p><p><br>As far as I understand it, the error happens because several protocols extensions implement the `flatten` method, and `mapArray` (which is of type `Array&lt;Optional&lt;Int&gt;&gt;`) conforms to a few of those, which means the compiler has no way of knowing which one I intend on using.<br></p><p>How do I solve this?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151205/d436439c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Best way to solve ambiguous references to methods</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December  5, 2015 at 12:00:00pm</p></header><div class="content"><p>A quick-and-dirty way would be to explicitly cast to the protocol type before calling the function.<br></p><p>let flatArray = (mapArray as SequenceType).flatten()<br></p><p>Or in this case you could just mapArray.flatMap()<br></p><p>&gt; On Dec 5, 2015, at 12:38 PM, Vinicius Vendramini &lt;vinivendra at gmail.com&gt; wrote:<br>&gt; <br>&gt; So I was playing around with Sequences, and I came across a problem I haven&#39;t been able to solve in a decent way. I’ve reduced it to a simpler example here:<br>&gt; <br>&gt; <br>&gt; let array : [Int] = [1, 2, 3]<br>&gt; <br>&gt; let mapArray = array.map { $0 }<br>&gt; <br>&gt; let flatArray = mapArray.flatten() // Error!<br>&gt; <br>&gt; <br>&gt; This last line of code prints the following error:<br>&gt; <br>&gt; <br>&gt; let flatArray = mapArray.flatten() // Error!<br>&gt;                 ^~~~~~~~<br>&gt; Swift.SequenceType:4:17: note: found this candidate<br>&gt;     public func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;                 ^<br>&gt; Swift.CollectionType:4:17: note: found this candidate<br>&gt;     public func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;                 ^<br>&gt; Swift.CollectionType:4:17: note: found this candidate<br>&gt;     public func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;                 ^<br>&gt; <br>&gt; <br>&gt; As far as I understand it, the error happens because several protocols extensions implement the `flatten` method, and `mapArray` (which is of type `Array&lt;Optional&lt;Int&gt;&gt;`) conforms to a few of those, which means the compiler has no way of knowing which one I intend on using.<br>&gt; <br>&gt; How do I solve this?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151205/ad44222e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/706baf09e574d70814e4af2d54a315e0?s=50"></div><header><strong>Best way to solve ambiguous references to methods</strong> from <string>Vinicius Vendramini</string> &lt;vinivendra at gmail.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>(I should mention I’m trying this in a Playground.)<br></p><p>I think I tried a similar solution at some point, but it doesn’t seem to work. I get two errors out of that cast:<br></p><p><br>Playground execution failed: /var/folders/1v/42yjnyj16bb16j19q25hzghr0000gn/T/./lldb/13003/playground346.swift:168:27: error: member &#39;flatten&#39; cannot be used on value of protocol type &#39;SequenceType&#39;; use a generic constraint instead<br>let flatArray = (mapArray as SequenceType).flatten() // Error!<br>                ~~~~~~~~~~^~~~~~~~~~~~~~~~ ~~~~~~~<br>/var/folders/1v/42yjnyj16bb16j19q25hzghr0000gn/T/./lldb/13003/playground346.swift:168:30: error: protocol &#39;SequenceType&#39; can only be used as a generic constraint because it has Self or associated type requirements<br>let flatArray = (mapArray as SequenceType).flatten() // Error!<br>                             ^<br></p><p>I can’t seem to find a way to cast it to something that works.<br></p><p>As for the flatMap, I know it’s a valid alternative, but I was trying to make this work just for the understanding you get through exploration of these weird cases.<br></p><p><br></p><p>&gt; On Dec 5, 2015, at 12:43 PM, Harlan Haskins &lt;harlan at harlanhaskins.com&gt; wrote:<br>&gt; <br>&gt; A quick-and-dirty way would be to explicitly cast to the protocol type before calling the function.<br>&gt; <br>&gt; let flatArray = (mapArray as SequenceType).flatten()<br>&gt; <br>&gt; Or in this case you could just mapArray.flatMap()<br>&gt; <br>&gt; On Dec 5, 2015, at 12:38 PM, Vinicius Vendramini &lt;vinivendra at gmail.com &lt;mailto:vinivendra at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; So I was playing around with Sequences, and I came across a problem I haven&#39;t been able to solve in a decent way. I’ve reduced it to a simpler example here:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let array : [Int] = [1, 2, 3]<br>&gt;&gt; <br>&gt;&gt; let mapArray = array.map { $0 }<br>&gt;&gt; <br>&gt;&gt; let flatArray = mapArray.flatten() // Error!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This last line of code prints the following error:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let flatArray = mapArray.flatten() // Error!<br>&gt;&gt;                 ^~~~~~~~<br>&gt;&gt; Swift.SequenceType:4:17: note: found this candidate<br>&gt;&gt;     public func flatten() -&gt; FlattenSequence&lt;Self&gt;<br>&gt;&gt;                 ^<br>&gt;&gt; Swift.CollectionType:4:17: note: found this candidate<br>&gt;&gt;     public func flatten() -&gt; FlattenCollection&lt;Self&gt;<br>&gt;&gt;                 ^<br>&gt;&gt; Swift.CollectionType:4:17: note: found this candidate<br>&gt;&gt;     public func flatten() -&gt; FlattenBidirectionalCollection&lt;Self&gt;<br>&gt;&gt;                 ^<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; As far as I understand it, the error happens because several protocols extensions implement the `flatten` method, and `mapArray` (which is of type `Array&lt;Optional&lt;Int&gt;&gt;`) conforms to a few of those, which means the compiler has no way of knowing which one I intend on using.<br>&gt;&gt; <br>&gt;&gt; How do I solve this?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151205/693e76c6/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
