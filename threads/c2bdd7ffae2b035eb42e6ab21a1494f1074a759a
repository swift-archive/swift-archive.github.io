<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c1ab69ba998892ce0168c9b9e3ba2597?s=50"></div><header><strong>What are these types with regular expressions?</strong> from <string>晓敏 褚</string> &lt;mirrorinf at icloud.com&gt;<p>August  6, 2016 at 08:00:00pm</p></header><div class="content"><p>I’m writing a program with regular expressions, and I’m finding it extremely hard to code with these in swift. I got a [TextCheckingResult] from the matching function, and there is no document on what TextCheckingResult is and how could I work with it. And when I try to use range to get a substring, I got a Range&lt;Int&gt;, but the substring:with: method requies a Range&lt;Index&gt;. But there is no way I could find any information about the type(or protocol?) Index, and passing a Int fails.<br>What are they, and how can I work with them?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/02645fccf0e885c607f3d07a4abf4f95?s=50"></div><header><strong>What are these types with regular expressions?</strong> from <string>Saagar Jha</string> &lt;saagar at saagarjha.com&gt;<p>August  6, 2016 at 06:00:00pm</p></header><div class="content"><p>Swift String indexing and sub scripting is different than other languages.<br>Instead of using Ints, Strings use their own Indexes (a String.Index). To<br>get an index, you can use the String&#39;s startIndex property and then use<br>advancedBy on it. The Swift Programming Language has more details:<br>https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID285<br></p><p>On Sat, Aug 6, 2016 at 04:26 晓敏 褚 &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; I’m writing a program with regular expressions, and I’m finding it<br>&gt; extremely hard to code with these in swift. I got a [TextCheckingResult]<br>&gt; from the matching function, and there is no document on what<br>&gt; TextCheckingResult is and how could I work with it. And when I try to use<br>&gt; range to get a substring, I got a Range&lt;Int&gt;, but the substring:with:<br>&gt; method requies a Range&lt;Index&gt;. But there is no way I could find any<br>&gt; information about the type(or protocol?) Index, and passing a Int fails.<br>&gt; What are they, and how can I work with them?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160806/ad33f586/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>What are these types with regular expressions?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>August  7, 2016 at 11:00:00am</p></header><div class="content"><p>TextCheckingResult i<br>​s​<br> NSTextCheckingResult<br>&lt;https://developer.apple.com/reference/foundation/nstextcheckingresult#&gt;。<br></p><p>​Zhaoxin​<br></p><p><br></p><p>On Sat, Aug 6, 2016 at 8:25 PM, 晓敏 褚 &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; I’m writing a program with regular expressions, and I’m finding it<br>&gt; extremely hard to code with these in swift. I got a [TextCheckingResult]<br>&gt; from the matching function, and there is no document on what<br>&gt; TextCheckingResult is and how could I work with it. And when I try to use<br>&gt; range to get a substring, I got a Range&lt;Int&gt;, but the substring:with:<br>&gt; method requies a Range&lt;Index&gt;. But there is no way I could find any<br>&gt; information about the type(or protocol?) Index, and passing a Int fails.<br>&gt; What are they, and how can I work with them?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160807/fde09016/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>What are these types with regular expressions?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August  7, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Aug 6, 2016, at 5:25 AM, 晓敏 褚 via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; And when I try to use range to get a substring, I got a Range&lt;Int&gt;, but the substring:with: method requies a Range&lt;Index&gt;. But there is no way I could find any information about the type(or protocol?) Index, and passing a Int fails.<br>&gt; What are they, and how can I work with them?<br></p><p>&quot;The Swift Programming Language&quot; discusses this in more detail, but briefly: String indexing is much more complicated than NSString might make you think. For instance, the character 𠀋 is spread across two &quot;indices&quot;, because it is in the Supplementary Ideographic Plane of Unicode. Moreover, there are actually several different mechanisms that can make a single &quot;character&quot; actually take up multiple indices. To model this, a Swift String offers several views (`characters`, `unicodeScalars`, `utf16`, and `utf8`), each of which handles indices in a different way. In Swift 2, each of these has its own `Index` type; I believe the plan was for Swift 3 to use one Index type shared between all views, but I&#39;m not sure if that change will make the release version.<br></p><p>`NSString`, on the other hand, uses bare `Int`s interpreted a UTF-16 indices. So the way to convert is to translate the `Int` into a `String.UTF16Index`, and then if you want to go from there, further translate the `UTF16Index` into `String.Index`. (This second step can fail if, for instance, the `UTF16Index` points to the second index within 𠀋.) You can do that with an extension like this one:<br></p><p>	// Swift 3:<br>	extension String.UTF16View {<br>		func convertedIndex(_ intIndex: Int) -&gt; Index {<br>			return index(startIndex, offsetBy: intIndex)<br>		}<br>		func convertedRange(_ intRange: Range&lt;Int&gt;) -&gt; Range&lt;Index&gt; {<br>			let lower = convertedIndex(intRange.lowerBound)<br>			let offset = intRange.upperBound - intRange.lowerBound<br>			let upper = index(lower, offsetBy: offset)<br>			<br>			return lower ..&lt; upper<br>		}<br>	}<br>	extension String {<br>		func convertedIndex(_ intIndex: Int) -&gt; Index? {<br>			let utfIndex = utf16.convertedIndex(intIndex)<br>			return utfIndex.samePosition(in: self)<br>		}<br>		func convertedRange(_ intRange: Range&lt;Int&gt;) -&gt; Range&lt;Index&gt;? {<br>			let utfRange = utf16.convertedRange(intRange)<br>			guard let lower = utfRange.lowerBound.samePosition(in: self),<br>				let upper = utfRange.upperBound.samePosition(in: self) else {<br>				return nil<br>			}<br>			return lower ..&lt; upper<br>		}<br>	}<br></p><p>	// Swift 2:<br>	extension String.UTF16View {<br>		func convertedIndex(intIndex: Int) -&gt; Index {<br>			return startIndex.advancedBy(intIndex)<br>		}<br>		func convertedRange(intRange: Range&lt;Int&gt;) -&gt; Range&lt;Index&gt; {<br>			let lower = convertedIndex(intRange.startIndex)<br>			let offset = intRange.endIndex - intRange.startIndex<br>			let upper = lower.advancedBy(offset)<br>			<br>			return lower ..&lt; upper<br>		}<br>	}<br>	extension String {<br>		func convertedIndex(intIndex: Int) -&gt; Index? {<br>			let utfIndex = utf16.convertedIndex(intIndex)<br>			return utfIndex.samePositionIn(self)<br>		}<br>		func convertedRange(intRange: Range&lt;Int&gt;) -&gt; Range&lt;Index&gt;? {<br>			let utfRange = utf16.convertedRange(intRange)<br>			guard let lower = utfRange.startIndex.samePositionIn(self),<br>				let upper = utfRange.startIndex.samePositionIn(self) else {<br>				return nil<br>			}<br>			return lower ..&lt; upper<br>		}<br>	}<br></p><p>Use it like this:<br></p><p>	let range: Range&lt;Int&gt; = …<br>	<br>	// If you want to use String.UTF16Index:<br>	let convertedRange = string.utf16.convertedRange(range)<br>	print(string.utf16[convertedRange])<br>	<br>	// If you want to use String.Index:<br>	if let convertedRange = string.convertedRange(range) {<br>		print(string[convertedRange])<br>	}<br>	else {<br>		print(&quot;[Invalid range]&quot;)<br>	}<br></p><p>Hope this helps,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
