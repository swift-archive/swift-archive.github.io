<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] File-level declarations having highest priority for shadowing</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 20, 2016 at 08:00:00pm</p></header><div class="content"><p>I&#39;ve filed this previously as a compiler bug, but was told to discuss this here (https://bugs.swift.org/browse/SR-1772).<br></p><p>Motivation:<br></p><p>Consider the following code:<br></p><p>private func _validateAccount(name: String, existingAccounts: [Account]) -&gt; Bool {<br>    // Logic goes here...<br>}<br></p><p>class MyController {<br>    private func _validateAccount(name: String) -&gt; Bool {<br>        let accounts = self.accounts<br></p><p>	// Error: Extra argument &#39;existingAccounts&#39; in call<br>        return _validateAccount(name, existingAccounts: accounts)<br>    }<br>}<br></p><p><br>_validateAccount(name:, existingAccounts:) is declared at file-level since it is used in two separate controllers (my example comes from an app with accounts and the check is done during creation + when renaming) and then a similar method (with less arguments) is declared on the controllers.<br></p><p>Currently, the compiler gives an error about ambiguous use of _validateAccount, since it&#39;s declared on MyController as well which is taking precedence, even though the number of arguments is different (and the compiler is only checking base names, not arguments).<br></p><p>As Jordan Rose mentioned in a comment to my report, solution to this is to specify the function using Module._validateAccount, but this is not applicable to Playgrounds.<br></p><p>This is partially an issue of the ongoing discussion of various name collisions between modules, but in this particular case, it&#39;s one single file.<br></p><p>I propose that file-level symbols take precedence over any reference to current type&#39;s members, unless explicit self is specified, or at least when it comes to calling a method, the type checker goes up the scope hierarchy to see if there isn&#39;t a function satisfying the arguments.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/ed7c81d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Discussion] File-level declarations having highest priority for shadowing</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 20, 2016 at 06:00:00pm</p></header><div class="content"><p>I can see how this is a problem, but I don&#39;t like this solution for the<br>same reasoning that Jordan provided in the bug. Namely, the general rule is<br>that the inner scope shadows the outer scope. This would be a very strange<br>exception that you&#39;re proposing.<br></p><p>I&#39;d rather cope temporarily with the current limitation, which as you<br>mentioned has a workaround everywhere except in Playgrounds; in<br>Playgrounds, there isn&#39;t any reason why you couldn&#39;t just rename one or the<br>other.<br>On Mon, Jun 20, 2016 at 13:55 Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;ve filed this previously as a compiler bug, but was told to discuss this<br>&gt; here (https://bugs.swift.org/browse/SR-1772).<br>&gt;<br>&gt; Motivation:<br>&gt;<br>&gt; Consider the following code:<br>&gt;<br>&gt; private func _validateAccount(name: String, existingAccounts: [Account])<br>&gt; -&gt; Bool {<br>&gt;     // Logic goes here...<br>&gt; }<br>&gt;<br>&gt; class MyController {<br>&gt;     private func _validateAccount(name: String) -&gt; Bool {<br>&gt;         let accounts = self.accounts<br>&gt;<br>&gt; // Error: Extra argument &#39;existingAccounts&#39; in call<br>&gt;         return _validateAccount(name, existingAccounts: accounts)<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; _validateAccount(name:, existingAccounts:) is declared at file-level since<br>&gt; it is used in two separate controllers (my example comes from an app with<br>&gt; accounts and the check is done during creation + when renaming) and then a<br>&gt; similar method (with less arguments) is declared on the controllers.<br>&gt;<br>&gt; Currently, the compiler gives an error about ambiguous use of<br>&gt; _validateAccount, since it&#39;s declared on MyController as well which is<br>&gt; taking precedence, even though the number of arguments is different (and<br>&gt; the compiler is only checking base names, not arguments).<br>&gt;<br>&gt; As Jordan Rose mentioned in a comment to my report, solution to this is to<br>&gt; specify the function using Module._validateAccount, but this is not<br>&gt; applicable to Playgrounds.<br>&gt;<br>&gt; This is partially an issue of the ongoing discussion of various name<br>&gt; collisions between modules, but in this particular case, it&#39;s one single<br>&gt; file.<br>&gt;<br>&gt; I propose that file-level symbols take precedence over any reference to<br>&gt; current type&#39;s members, unless explicit self is specified, or at least when<br>&gt; it comes to calling a method, the type checker goes up the scope hierarchy<br>&gt; to see if there isn&#39;t a function satisfying the arguments.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/4b00d127/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] File-level declarations having highest priority for shadowing</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 20, 2016 at 09:00:00pm</p></header><div class="content"><p>IMHO file-level scope *is* special. Aside from the fact that some declarations (e.g. protocols) are only valid at file-level scope, the way I see it, it&#39;s a scope where you have *global* symbols to the file - i.e. they should be available *globally* anywhere within the file.<br></p><p>I undestand that this goes against the overall hierarchy of shadowing, though, which is why I&#39;ve proposed an alternative: the compiler shouldn&#39;t (in case of invoking methods) just check the base name, but it should do a more thorough search, looking at the arguments as well. Just like when you&#39;re overloading a method.<br></p><p><br>&gt; On Jun 20, 2016, at 8:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; I can see how this is a problem, but I don&#39;t like this solution for the same reasoning that Jordan provided in the bug. Namely, the general rule is that the inner scope shadows the outer scope. This would be a very strange exception that you&#39;re proposing.<br>&gt; <br>&gt; I&#39;d rather cope temporarily with the current limitation, which as you mentioned has a workaround everywhere except in Playgrounds; in Playgrounds, there isn&#39;t any reason why you couldn&#39;t just rename one or the other.<br>&gt; On Mon, Jun 20, 2016 at 13:55 Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I&#39;ve filed this previously as a compiler bug, but was told to discuss this here (https://bugs.swift.org/browse/SR-1772 &lt;https://bugs.swift.org/browse/SR-1772&gt;).<br>&gt; <br>&gt; Motivation:<br>&gt; <br>&gt; Consider the following code:<br>&gt; <br>&gt; private func _validateAccount(name: String, existingAccounts: [Account]) -&gt; Bool {<br>&gt;     // Logic goes here...<br>&gt; }<br>&gt; <br>&gt; class MyController {<br>&gt;     private func _validateAccount(name: String) -&gt; Bool {<br>&gt;         let accounts = self.accounts<br>&gt; <br>&gt; 	// Error: Extra argument &#39;existingAccounts&#39; in call<br>&gt;         return _validateAccount(name, existingAccounts: accounts)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; _validateAccount(name:, existingAccounts:) is declared at file-level since it is used in two separate controllers (my example comes from an app with accounts and the check is done during creation + when renaming) and then a similar method (with less arguments) is declared on the controllers.<br>&gt; <br>&gt; Currently, the compiler gives an error about ambiguous use of _validateAccount, since it&#39;s declared on MyController as well which is taking precedence, even though the number of arguments is different (and the compiler is only checking base names, not arguments).<br>&gt; <br>&gt; As Jordan Rose mentioned in a comment to my report, solution to this is to specify the function using Module._validateAccount, but this is not applicable to Playgrounds.<br>&gt; <br>&gt; This is partially an issue of the ongoing discussion of various name collisions between modules, but in this particular case, it&#39;s one single file.<br>&gt; <br>&gt; I propose that file-level symbols take precedence over any reference to current type&#39;s members, unless explicit self is specified, or at least when it comes to calling a method, the type checker goes up the scope hierarchy to see if there isn&#39;t a function satisfying the arguments.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/7052e14c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Discussion] File-level declarations having highest priority for shadowing</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 20, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Jun 20, 2016 at 2:17 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt; IMHO file-level scope *is* special. Aside from the fact that some<br>&gt; declarations (e.g. protocols) are only valid at file-level scope, the way I<br>&gt; see it, it&#39;s a scope where you have *global* symbols to the file - i.e.<br>&gt; they should be available *globally* anywhere within the file.<br>&gt;<br>&gt; I undestand that this goes against the overall hierarchy of shadowing,<br>&gt; though, which is why I&#39;ve proposed an alternative: the compiler shouldn&#39;t<br>&gt; (in case of invoking methods) just check the base name, but it should do a<br>&gt; more thorough search, looking at the arguments as well. Just like when<br>&gt; you&#39;re overloading a method.<br>&gt;<br></p><p>I could support a proposal for that alternative.<br></p><p><br>&gt;<br>&gt;<br>&gt; On Jun 20, 2016, at 8:59 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; I can see how this is a problem, but I don&#39;t like this solution for the<br>&gt; same reasoning that Jordan provided in the bug. Namely, the general rule is<br>&gt; that the inner scope shadows the outer scope. This would be a very strange<br>&gt; exception that you&#39;re proposing.<br>&gt;<br>&gt; I&#39;d rather cope temporarily with the current limitation, which as you<br>&gt; mentioned has a workaround everywhere except in Playgrounds; in<br>&gt; Playgrounds, there isn&#39;t any reason why you couldn&#39;t just rename one or the<br>&gt; other.<br>&gt; On Mon, Jun 20, 2016 at 13:55 Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;ve filed this previously as a compiler bug, but was told to discuss<br>&gt;&gt; this here (https://bugs.swift.org/browse/SR-1772).<br>&gt;&gt;<br>&gt;&gt; Motivation:<br>&gt;&gt;<br>&gt;&gt; Consider the following code:<br>&gt;&gt;<br>&gt;&gt; private func _validateAccount(name: String, existingAccounts: [Account])<br>&gt;&gt; -&gt; Bool {<br>&gt;&gt;     // Logic goes here...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class MyController {<br>&gt;&gt;     private func _validateAccount(name: String) -&gt; Bool {<br>&gt;&gt;         let accounts = self.accounts<br>&gt;&gt;<br>&gt;&gt; // Error: Extra argument &#39;existingAccounts&#39; in call<br>&gt;&gt;         return _validateAccount(name, existingAccounts: accounts)<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _validateAccount(name:, existingAccounts:) is declared at file-level<br>&gt;&gt; since it is used in two separate controllers (my example comes from an app<br>&gt;&gt; with accounts and the check is done during creation + when renaming) and<br>&gt;&gt; then a similar method (with less arguments) is declared on the controllers.<br>&gt;&gt;<br>&gt;&gt; Currently, the compiler gives an error about ambiguous use of<br>&gt;&gt; _validateAccount, since it&#39;s declared on MyController as well which is<br>&gt;&gt; taking precedence, even though the number of arguments is different (and<br>&gt;&gt; the compiler is only checking base names, not arguments).<br>&gt;&gt;<br>&gt;&gt; As Jordan Rose mentioned in a comment to my report, solution to this is<br>&gt;&gt; to specify the function using Module._validateAccount, but this is not<br>&gt;&gt; applicable to Playgrounds.<br>&gt;&gt;<br>&gt;&gt; This is partially an issue of the ongoing discussion of various name<br>&gt;&gt; collisions between modules, but in this particular case, it&#39;s one single<br>&gt;&gt; file.<br>&gt;&gt;<br>&gt;&gt; I propose that file-level symbols take precedence over any reference to<br>&gt;&gt; current type&#39;s members, unless explicit self is specified, or at least when<br>&gt;&gt; it comes to calling a method, the type checker goes up the scope hierarchy<br>&gt;&gt; to see if there isn&#39;t a function satisfying the arguments.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160620/e7f3674c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
