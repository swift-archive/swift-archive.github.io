<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fe9910711f0d4eedfabe97dd70ab170b?s=50"></div><header><strong>For... else</strong> from <string>Lee M</string> &lt;me at leemcdermott.co.uk&gt;<p>January 22, 2016 at 04:00:00pm</p></header><div class="content"><p>This has likely been discussed already, but I haven&#39;t been able to find it<br>anywhere.<br>Example:<br></p><p>    let items: Int = []<br></p><p>    for item in items {<br>        print(item)<br>    }<br>    else {<br>        print(&quot;No items&quot;)<br>    }<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/0a7e5862/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecb50a99bf3b4cc0249312945dce7115?s=50"></div><header><strong>For... else</strong> from <string>Ben Langmuir</string> &lt;blangmuir at apple.com&gt;<p>January 22, 2016 at 10:00:00am</p></header><div class="content"><p>Previous discussion here:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br></p><p><br>&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt; Example:<br>&gt; <br>&gt;     let items: Int = []<br>&gt; <br>&gt;     for item in items {<br>&gt;         print(item)<br>&gt;     }<br>&gt;     else {<br>&gt;         print(&quot;No items&quot;)<br>&gt;     }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>For... else</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 22, 2016 at 08:00:00pm</p></header><div class="content"><p>I frequently need something like that and I&#39;d like to have it in Swift too.<br></p><p>Félix<br></p><p>&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Previous discussion here:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt;    let items: Int = []<br>&gt;&gt; <br>&gt;&gt;    for item in items {<br>&gt;&gt;        print(item)<br>&gt;&gt;    }<br>&gt;&gt;    else {<br>&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;    }<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160122/5838834b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>For... else</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>January 25, 2016 at 08:00:00pm</p></header><div class="content"><p>It would be easy enough to add:<br></p><p>func forEach(<br>    @noescape elements body: (Element) throws -&gt; Void,<br>    @noescape otherwise otherwise: () throws -&gt; Void<br>) rethrows<br></p><p>to the standard library or write it yourself.<br></p><p>&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I frequently need something like that and I&#39;d like to have it in Swift too.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Previous discussion here:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt;&gt;&gt; Example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    let items: Int = []<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    for item in items {<br>&gt;&gt;&gt;        print(item)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    else {<br>&gt;&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160125/5a36c367/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>For... else</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 25, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jan 25, 2016, at 3:41 AM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It would be easy enough to add:<br>&gt; <br>&gt; func forEach(<br>&gt;     @noescape elements body: (Element) throws -&gt; Void,<br>&gt;     @noescape otherwise otherwise: () throws -&gt; Void<br>&gt; ) rethrows<br>&gt; <br>&gt; to the standard library or write it yourself.<br></p><p>Not unless / until we get the ability for a noescape closure to influence control flow (break, return, etc).  Even then this is clunkier than adding else to the language would be.<br></p><p>&gt; <br>&gt;&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I frequently need something like that and I&#39;d like to have it in Swift too.<br>&gt;&gt; <br>&gt;&gt; Félix<br>&gt;&gt; <br>&gt;&gt;&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Previous discussion here:<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let items: Int = []<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    for item in items {<br>&gt;&gt;&gt;&gt;        print(item)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    else {<br>&gt;&gt;&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160125/262822f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>For... else</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 26, 2016 at 03:00:00pm</p></header><div class="content"><p>This may do what you want:<br></p><p>    let values: [Int] = [1,2,3,4]<br></p><p>    if let sequence = nonEmptySequence(values) {<br></p><p>        for element in sequence {<br></p><p>            print(&quot;element: \(element)&quot;)<br></p><p>        }<br></p><p>    }<br></p><p>    else {<br></p><p>        print(&quot;empty!&quot;)<br></p><p>    }<br></p><p><br>It&#39;s also more flexible, you can do work after the for loop (that work<br>won&#39;t execute in the else), you can also use PeekSequence directly to get<br>the first value. This is handy for something like an average (reduce) where<br>you don&#39;t necessarily have a zero value.<br></p><p><br>The implementation can be found here:<br>https://github.com/therealbnut/PeekSequence<br></p><p><br>On Tue, Jan 26, 2016 at 12:59 AM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Jan 25, 2016, at 3:41 AM, Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; It would be easy enough to add:<br>&gt;<br>&gt;<br>&gt;    - func forEach(<br>&gt;    -     @noescape elements body: (Element) throws -&gt; Void,<br>&gt;    -     @noescape otherwise otherwise: () throws -&gt; Void<br>&gt;    - ) rethrows<br>&gt;<br>&gt;<br>&gt; to the standard library or write it yourself.<br>&gt;<br>&gt;<br>&gt; Not unless / until we get the ability for a noescape closure to influence<br>&gt; control flow (break, return, etc).  Even then this is clunkier than adding<br>&gt; else to the language would be.<br>&gt;<br>&gt;<br>&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I frequently need something like that and I&#39;d like to have it in Swift too.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Previous discussion here:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br>&gt;<br>&gt;<br>&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; This has likely been discussed already, but I haven&#39;t been able to find it<br>&gt; anywhere.<br>&gt; Example:<br>&gt;<br>&gt;    let items: Int = []<br>&gt;<br>&gt;    for item in items {<br>&gt;        print(item)<br>&gt;    }<br>&gt;    else {<br>&gt;        print(&quot;No items&quot;)<br>&gt;    }<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/8a3819c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>For... else</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 26, 2016 at 12:00:00pm</p></header><div class="content"><p>This is more a demonstration that the for...else construct isn&#39;t obvious than a solution to the problem. In Python, the else branch of a for loop is executed when you went through all the iterations without breaking (&quot;when the loop condition becomes false&quot;, which doesn&#39;t happen if you break from the loop).<br></p><p>Félix<br></p><p>&gt; Le 25 janv. 2016 à 23:14:23, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; This may do what you want:<br>&gt; <br>&gt;     let values: [Int] = [1,2,3,4]<br>&gt;     if let sequence = nonEmptySequence(values) {<br>&gt;         for element in sequence {<br>&gt;             print(&quot;element: \(element)&quot;)<br>&gt;         }<br>&gt;     }<br>&gt;     else {<br>&gt;         print(&quot;empty!&quot;)<br>&gt;     }<br>&gt; <br>&gt; It&#39;s also more flexible, you can do work after the for loop (that work won&#39;t execute in the else), you can also use PeekSequence directly to get the first value. This is handy for something like an average (reduce) where you don&#39;t necessarily have a zero value.<br>&gt; <br>&gt; The implementation can be found here: https://github.com/therealbnut/PeekSequence &lt;https://github.com/therealbnut/PeekSequence&gt;<br>&gt; <br>&gt; <br>&gt; On Tue, Jan 26, 2016 at 12:59 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Jan 25, 2016, at 3:41 AM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; It would be easy enough to add:<br>&gt;&gt; <br>&gt;&gt; func forEach(<br>&gt;&gt;     @noescape elements body: (Element) throws -&gt; Void,<br>&gt;&gt;     @noescape otherwise otherwise: () throws -&gt; Void<br>&gt;&gt; ) rethrows<br>&gt;&gt; <br>&gt;&gt; to the standard library or write it yourself.<br>&gt; <br>&gt; Not unless / until we get the ability for a noescape closure to influence control flow (break, return, etc).  Even then this is clunkier than adding else to the language would be.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I frequently need something like that and I&#39;d like to have it in Swift too.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Félix<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Previous discussion here:<br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    let items: Int = []<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    for item in items {<br>&gt;&gt;&gt;&gt;&gt;        print(item)<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    else {<br>&gt;&gt;&gt;&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/d33e72f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>For... else</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 27, 2016 at 09:00:00am</p></header><div class="content"><p>What you described Felix seems to be different to what was proposed, also I<br>think (as you suggest) that `else` is unclear for what you describe.<br></p><p>To clarify, is what you&#39;re suggesting logically equivalent to this?<br></p><p>if let found = [1,2,3,4].find({ $0 == 3 }) {<br></p><p>    print(&quot;exited early (\(found))&quot;)<br></p><p>}<br></p><p><br>extension SequenceType {<br></p><p>    func find(<br></p><p>        @noescape each: Generator.Element throws -&gt; Bool<br></p><p>    ) rethrows -&gt; Generator.Element? {<br></p><p>        for element in self {<br></p><p>            if try each(element) == false {<br></p><p>                return element<br></p><p>            }<br></p><p>        }<br></p><p>        return nil<br></p><p>    }<br></p><p>}<br></p><p><br>If that&#39;s correct then I prefer the keyword in the other thread `nobreak`<br>although it could be a better.<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br></p><p>We&#39;d have to confirm with Lee, but their example (this thread) seems<br>oriented around zero items rather than early exit:<br></p><p>let items: Int = []<br></p><p><br>for item in items {<br></p><p>    print(item)<br></p><p>}<br></p><p>else {<br></p><p>    print(&quot;No items&quot;)<br></p><p>}<br></p><p><br>My suggestion works for zero items.<br></p><p><br></p><p><br></p><p>On Wed, Jan 27, 2016 at 4:47 AM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; This is more a demonstration that the for...else construct isn&#39;t obvious<br>&gt; than a solution to the problem. In Python, the else branch of a for loop is<br>&gt; executed when you went through all the iterations without breaking (&quot;when<br>&gt; the loop condition becomes false&quot;, which doesn&#39;t happen if you break from<br>&gt; the loop).<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 25 janv. 2016 à 23:14:23, Andrew Bennett via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; This may do what you want:<br>&gt;<br>&gt;     let values: [Int] = [1,2,3,4]<br>&gt;     if let sequence = nonEmptySequence(values) {<br>&gt;         for element in sequence {<br>&gt;             print(&quot;element: \(element)&quot;)<br>&gt;         }<br>&gt;     }<br>&gt;     else {<br>&gt;         print(&quot;empty!&quot;)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; It&#39;s also more flexible, you can do work after the for loop (that work<br>&gt; won&#39;t execute in the else), you can also use PeekSequence directly to get<br>&gt; the first value. This is handy for something like an average (reduce) where<br>&gt; you don&#39;t necessarily have a zero value.<br>&gt;<br>&gt; The implementation can be found here:<br>&gt; https://github.com/therealbnut/PeekSequence<br>&gt;<br>&gt;<br>&gt; On Tue, Jan 26, 2016 at 12:59 AM, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; On Jan 25, 2016, at 3:41 AM, Howard Lovatt via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It would be easy enough to add:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;    - func forEach(<br>&gt;&gt;    -     @noescape elements body: (Element) throws -&gt; Void,<br>&gt;&gt;    -     @noescape otherwise otherwise: () throws -&gt; Void<br>&gt;&gt;    - ) rethrows<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; to the standard library or write it yourself.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not unless / until we get the ability for a noescape closure to influence<br>&gt;&gt; control flow (break, return, etc).  Even then this is clunkier than adding<br>&gt;&gt; else to the language would be.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I frequently need something like that and I&#39;d like to have it in Swift<br>&gt;&gt; too.<br>&gt;&gt;<br>&gt;&gt; Félix<br>&gt;&gt;<br>&gt;&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; Previous discussion here:<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find<br>&gt;&gt; it anywhere.<br>&gt;&gt; Example:<br>&gt;&gt;<br>&gt;&gt;    let items: Int = []<br>&gt;&gt;<br>&gt;&gt;    for item in items {<br>&gt;&gt;        print(item)<br>&gt;&gt;    }<br>&gt;&gt;    else {<br>&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;    }<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160127/0b60182e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>For... else</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 26, 2016 at 09:00:00pm</p></header><div class="content"><p>You are right. Someone else overly eagerly linked this other thread &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html&gt; and brought me into their confusion :)<br></p><p>Félix<br></p><p>&gt; Le 26 janv. 2016 à 17:30:58, Andrew Bennett &lt;cacoyi at gmail.com&gt; a écrit :<br>&gt; <br>&gt; What you described Felix seems to be different to what was proposed, also I think (as you suggest) that `else` is unclear for what you describe.<br>&gt; <br>&gt; To clarify, is what you&#39;re suggesting logically equivalent to this?<br>&gt; <br>&gt; if let found = [1,2,3,4].find({ $0 == 3 }) {<br>&gt;     print(&quot;exited early (\(found))&quot;)<br>&gt; }<br>&gt; <br>&gt; extension SequenceType {<br>&gt;     func find(<br>&gt;         @noescape each: Generator.Element throws -&gt; Bool<br>&gt;     ) rethrows -&gt; Generator.Element? {<br>&gt;         for element in self {<br>&gt;             if try each(element) == false {<br>&gt;                 return element<br>&gt;             }<br>&gt;         }<br>&gt;         return nil<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; If that&#39;s correct then I prefer the keyword in the other thread `nobreak` although it could be a better.<br>&gt; <br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html&gt;<br>&gt; <br>&gt; We&#39;d have to confirm with Lee, but their example (this thread) seems oriented around zero items rather than early exit:<br>&gt; <br>&gt; let items: Int = []<br>&gt; <br>&gt; for item in items {<br>&gt;     print(item)<br>&gt; }<br>&gt; else {<br>&gt;     print(&quot;No items&quot;)<br>&gt; }<br>&gt; <br>&gt; My suggestion works for zero items.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Jan 27, 2016 at 4:47 AM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt; This is more a demonstration that the for...else construct isn&#39;t obvious than a solution to the problem. In Python, the else branch of a for loop is executed when you went through all the iterations without breaking (&quot;when the loop condition becomes false&quot;, which doesn&#39;t happen if you break from the loop).<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 25 janv. 2016 à 23:14:23, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; This may do what you want:<br>&gt;&gt; <br>&gt;&gt;     let values: [Int] = [1,2,3,4]<br>&gt;&gt;     if let sequence = nonEmptySequence(values) {<br>&gt;&gt;         for element in sequence {<br>&gt;&gt;             print(&quot;element: \(element)&quot;)<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     else {<br>&gt;&gt;         print(&quot;empty!&quot;)<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; It&#39;s also more flexible, you can do work after the for loop (that work won&#39;t execute in the else), you can also use PeekSequence directly to get the first value. This is handy for something like an average (reduce) where you don&#39;t necessarily have a zero value.<br>&gt;&gt; <br>&gt;&gt; The implementation can be found here: https://github.com/therealbnut/PeekSequence &lt;https://github.com/therealbnut/PeekSequence&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Tue, Jan 26, 2016 at 12:59 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; On Jan 25, 2016, at 3:41 AM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; It would be easy enough to add:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func forEach(<br>&gt;&gt;&gt;     @noescape elements body: (Element) throws -&gt; Void,<br>&gt;&gt;&gt;     @noescape otherwise otherwise: () throws -&gt; Void<br>&gt;&gt;&gt; ) rethrows<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; to the standard library or write it yourself.<br>&gt;&gt; <br>&gt;&gt; Not unless / until we get the ability for a noescape closure to influence control flow (break, return, etc).  Even then this is clunkier than adding else to the language would be.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 23 Jan 2016, at 12:59 PM, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I frequently need something like that and I&#39;d like to have it in Swift too.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Félix<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 22 janv. 2016 à 13:22:45, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Previous discussion here:<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001110.html&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 22, 2016, at 8:22 AM, Lee M via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This has likely been discussed already, but I haven&#39;t been able to find it anywhere.<br>&gt;&gt;&gt;&gt;&gt;&gt; Example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    let items: Int = []<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    for item in items {<br>&gt;&gt;&gt;&gt;&gt;&gt;        print(item)<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    else {<br>&gt;&gt;&gt;&gt;&gt;&gt;        print(&quot;No items&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/45340deb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
