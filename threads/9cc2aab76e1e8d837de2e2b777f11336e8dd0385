<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/12dd65fe648ab7baf7b432dd586a8388?s=50"></div><header><strong>[Swift CI] [FAILURE] oss-swift_tools-RA_stdlib-RDA_test-macos-resilience [#5]</strong> from <string>mishal_shah</string> &lt;mishal_shah at apple.com&gt;<p>November  7, 2016 at 05:00:00pm</p></header><div class="content"><p>SIL verification failed: function_ref inside fragile function cannot reference a private or hidden symbol: (SingleFunction &amp;&amp; RefF-&gt;isExternalDeclaration()) || RefF-&gt;hasValidLinkageForFragileRef()<br></p><p><br>Thanks, <br>Mishal Shah<br></p><p>[FAILURE] oss-swift_tools-RA_stdlib-RDA_test-macos-resilience [#5]<br></p><p>Build URL:	https://ci.swift.org/job/oss-swift_tools-RA_stdlib-RDA_test-macos-resilience/5/ &lt;https://ci.swift.org/job/oss-swift_tools-RA_stdlib-RDA_test-macos-resilience/5/&gt;<br>Project:	oss-swift_tools-RA_stdlib-RDA_test-macos-resilience<br>Date of build:	Sat, 05 Nov 2016 03:47:00 -0700<br>Build duration:	35 min<br></p><p>Changes<br></p><p>Commit 26be9369d5eb1e04af966ebec3ad30177240201f by jordan_rose:<br>[IRGen] Fix lifetime extension issue with StringRef.<br></p><p>edit: lib/IRGen/IRGenDebugInfo.cpp<br></p><p>Commit 76c6281feab6eb74a0f321e351b19d66256b4fe3 by abeingessner:<br>[stdlib] Rewriting native hashed collection indices<br></p><p>edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>edit: validation-test/stdlib/Set.swift<br>edit: validation-test/stdlib/Dictionary.swift<br>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit b08732cbd4bc34761ebfb25ad3dab0187a857bba by abeingessner:<br>[stdlib] Update Dictionary comments to reflect new design<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 953e51a97e637c4dbe89e444d8242cc0b443b64d by abeingessner:<br>[stdlib] Handle some outstanding Dictionary indexing-model FIXMEs/TODOs<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit e8f4cb66e4965f5ffe0f66fc5268cfe23278eabc by abeingessner:<br>update reflection tests with new type layouts for Dictionary<br></p><p>edit: validation-test/Reflection/reflect_multiple_types.swift<br>edit: validation-test/Reflection/reflect_Set.swift<br>edit: validation-test/Reflection/reflect_Dictionary.swift<br></p><p>Commit 69866e942b3a263dae9fc990b5d47fc33ed7a43c by practicalswift:<br>[swiftc (98 vs. 5180)] Add crasher in ?<br></p><p>add: validation-test/compiler_crashers/28467-child-source-range-not-contained-within-its-parent-guard-stmt.swift<br></p><p>Commit ac7d397aee130c6c47966cb48f0cb2e164865b4a by ghoare:<br>[Compile perf] Add various convenience options to scale-test<br></p><p>edit: utils/scale-test<br></p><p>Commit b7e200ef99b44b6604c95daf68157b4a3ffafe24 by abeingessner:<br>properly expose == to objc in test<br></p><p>edit: test/stdlib/TestUserInfo.swift<br></p><p>Commit d179655952cb7590c5e446f3683427b987ba8226 by abeingessner:<br>refactor Dictionary to support an empty singleton<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 052e94a34a4635deca374242352b628d4495f806 by abeingessner:<br>refactor HashedCollections to support verbatim bridging<br></p><p>edit: validation-test/stdlib/Set.swift<br>edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit f12d7914e89d70d0feabdcc10198714123e39402 by abeingessner:<br>update comments in HashedCollections to reflect new design<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit a43c1dfba0946d98489456119bdd2a875a85510c by abeingessner:<br>Some minor cleanups in HashedCollections:<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 3144870e8672de0392efff8bd7d9e75088db1fc3 by abeingessner:<br>add new toll-free bridge fast-paths to HashedCollections<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 41fb15f0427149a44060520ebef5d8db88bb054a by abeingessner:<br>rename Buffer &lt;---&gt; Storage in HashedCollections to match conventions<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit b1425ce78ba0de0ed8ac9a0832eb5d0f507e34c1 by abeingessner:<br>remove _&#39;s from some variables that don&#39;t need it<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 8eea522e9cd5afec999e18be64feeb4bb21b98fe by abeingessner:<br>rename storage type to be more useful<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 7ec26fc976b4b1cb5fe42df5d421cb56a04d1f92 by abeingessner:<br>fallout of renaming on tests which rely on internals<br></p><p>edit: validation-test/stdlib/Dictionary.swift<br>edit: validation-test/stdlib/Set.swift<br>edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>edit: validation-test/Reflection/reflect_multiple_types.swift<br>edit: validation-test/Reflection/reflect_Dictionary.swift<br>edit: validation-test/Reflection/reflect_Set.swift<br></p><p>Commit 8b44a07f58ff47bb86d36405ee96220fef9e9dec by abeingessner:<br>remove nonsensical identity tests from test suite<br></p><p>edit: validation-test/stdlib/Set.swift<br></p><p>Commit bb0b4be7ac2f2c444e9c1d795b1eee6eb2dc1a04 by abeingessner:<br>Update comment to clarify why it&#39;s interesting, link a relevant impl.<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 731aa1494bca60c7a12295e1a3bcd3a35cdce2c5 by abeingessner:<br>Properly if-def out bridging code.<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit d0de084a7937463685d0f6858565cf7adf4b9b43 by daniel:<br>[swift-format] add option to indent switch block<br></p><p>edit: include/swift/Option/Options.td<br>edit: test/swift-format/main.swift<br>edit: test/swift-format/main.swift.indent2.response<br>edit: test/swift-format/main.swift.tabs.response<br>edit: tools/driver/swift_format_main.cpp<br>edit: lib/IDE/Formatting.cpp<br>edit: include/swift/IDE/Formatting.h<br>add: test/swift-format/main.swift.indentswitch.response<br>edit: test/swift-format/main.swift.lines.response<br>edit: test/swift-format/main.swift.response<br></p><p>Commit 6bc1fc947b1d781ae669fc880574ae9ae2fb5298 by fs.output:<br>[Parse] Change the way to add parenthesis in fix-it for deprecated<br></p><p>edit: test/type/protocol_composition.swift<br>edit: lib/Parse/ParseType.cpp<br></p><p>Commit b4d97776d8ad60289bb78ce466ab36fbe2e5d3af by abeingessner:<br>more comment cleanups<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit a62f6c6a896366bcca94e496c9e2f34c0c4af82d by abeingessner:<br>Fix incorrect bitcasts, refactor code to guard against this error.<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 428cdac57ce0a228d7ee68179c6aeffa0c594704 by abeingessner:<br>leave FIXME for future dictionary bucaneers<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 5e776e5e391042df8f1e2ed447b2dbd1d5d6501a by abeingessner:<br>cleanup initializers in HashedCollections<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 931f7ba6581e100bd548081e91df1e6da7e791bd by abeingessner:<br>actually used the cached keys/values pointer<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 9e3d67ea27512bbb9848e7b9a4bf48afed29a0ac by spestov:<br>Parser: Stylistic cleanup; enums are not called &#39;unions&#39; anymore<br></p><p>edit: lib/Parse/ParseDecl.cpp<br></p><p>Commit 5780a9f52589d3eabc34896246c823717a7d2ee2 by spestov:<br>AST: Add some assertions when constructing nominal types<br></p><p>edit: lib/AST/ASTContext.cpp<br></p><p>Commit 5cee339ebfcbcf7c40765381e9afc7aff690d5d2 by spestov:<br>Sema: Tweak substMemberTypeWithBase() for nested generic types<br></p><p>edit: lib/Sema/TypeCheckType.cpp<br></p><p>Commit c7089ff00053d029745a57915cfb7d100867a5b9 by spestov:<br>Sema: Add support for extensions of nested generic types<br></p><p>edit: lib/Sema/TypeCheckDecl.cpp<br>edit: lib/Sema/TypeChecker.cpp<br>edit: lib/AST/NameLookup.cpp<br>edit: test/decl/ext/protocol.swift<br>edit: test/decl/nested/type_in_type.swift<br></p><p>Commit 5e46f9c2d4f752cdcb07e227649139e778cba421 by spestov:<br>Sema: Allow extensions of nested generic types via generic typealiases<br></p><p>edit: test/decl/typealias/generic.swift<br>edit: test/decl/nested/type_in_type.swift<br>edit: lib/Sema/TypeChecker.cpp<br></p><p>Commit 3cdc8ec44455b8c205a0d90acff8058ac6cf6e63 by abeingessner:<br>remove buffer header to eliminate optional traps<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit e4c5e159c9a9f7f6785766cfe93bc396a9ad6cb6 by a.beingessner:<br>remove useless constant redefinition<br></p><p>edit: stdlib/public/core/HashedCollections.swift.gyb<br></p><p>Commit 3f6a67643556ded5776af1197b5aec789b8ab116 by xi_ge:<br>[test] Using targetted swift-ide-test. rdar://29103477<br></p><p>edit: test/IDE/complete_repeat.swift<br></p><p>Commit af15b94f964b090d5a5e1e808c7761b20d7bccf3 by practicalswift:<br>[swiftc (98 vs. 5181)] Add crasher in<br></p><p>add: validation-test/compiler_crashers/28468-segfault-0xd09050-0xd08dfd-0xbe9d76-0xbeb154.swift<br></p><p>Commit f4a989814271744f081694ecdc114db966880850 by github:<br>[QoI] Improve &quot;never used&quot; diagnostics (#5638)<br></p><p>edit: lib/Sema/MiscDiagnostics.cpp<br>edit: test/decl/var/usage.swift<br>edit: test/SILGen/errors.swift<br>edit: test/expr/expressions.swift<br>edit: test/expr/postfix/dot/init_ref_delegation.swift<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161107/9cc20385/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Swift CI] [FAILURE] oss-swift_tools-RA_stdlib-RDA_test-macos-resilience [#5]</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>November  7, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Nov 7, 2016, at 5:00 PM, mishal_shah via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; SIL verification failed: function_ref inside fragile function cannot reference a private or hidden symbol: (SingleFunction &amp;&amp; RefF-&gt;isExternalDeclaration()) || RefF-&gt;hasValidLinkageForFragileRef()<br>&gt; <br>&gt; <br></p><p>This is &lt;rdar://problem/29144445&gt; function_ref inside fragile function cannot reference a private or hidden symbol.<br></p><p>Mark<br></p><p>&gt; Thanks, <br>&gt; Mishal Shah<br>&gt; <br>&gt; [FAILURE] oss-swift_tools-RA_stdlib-RDA_test-macos-resilience [#5]<br>&gt; <br>&gt; Build URL:	https://ci.swift.org/job/oss-swift_tools-RA_stdlib-RDA_test-macos-resilience/5/ &lt;https://ci.swift.org/job/oss-swift_tools-RA_stdlib-RDA_test-macos-resilience/5/&gt;<br>&gt; Project:	oss-swift_tools-RA_stdlib-RDA_test-macos-resilience<br>&gt; Date of build:	Sat, 05 Nov 2016 03:47:00 -0700<br>&gt; Build duration:	35 min<br>&gt; <br>&gt; Changes<br>&gt; <br>&gt; Commit 26be9369d5eb1e04af966ebec3ad30177240201f by jordan_rose:<br>&gt; [IRGen] Fix lifetime extension issue with StringRef.<br>&gt; <br>&gt; edit: lib/IRGen/IRGenDebugInfo.cpp<br>&gt; <br>&gt; Commit 76c6281feab6eb74a0f321e351b19d66256b4fe3 by abeingessner:<br>&gt; [stdlib] Rewriting native hashed collection indices<br>&gt; <br>&gt; edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>&gt; edit: validation-test/stdlib/Set.swift<br>&gt; edit: validation-test/stdlib/Dictionary.swift<br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit b08732cbd4bc34761ebfb25ad3dab0187a857bba by abeingessner:<br>&gt; [stdlib] Update Dictionary comments to reflect new design<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 953e51a97e637c4dbe89e444d8242cc0b443b64d by abeingessner:<br>&gt; [stdlib] Handle some outstanding Dictionary indexing-model FIXMEs/TODOs<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit e8f4cb66e4965f5ffe0f66fc5268cfe23278eabc by abeingessner:<br>&gt; update reflection tests with new type layouts for Dictionary<br>&gt; <br>&gt; edit: validation-test/Reflection/reflect_multiple_types.swift<br>&gt; edit: validation-test/Reflection/reflect_Set.swift<br>&gt; edit: validation-test/Reflection/reflect_Dictionary.swift<br>&gt; <br>&gt; Commit 69866e942b3a263dae9fc990b5d47fc33ed7a43c by practicalswift:<br>&gt; [swiftc (98 vs. 5180)] Add crasher in ?<br>&gt; <br>&gt; add: validation-test/compiler_crashers/28467-child-source-range-not-contained-within-its-parent-guard-stmt.swift<br>&gt; <br>&gt; Commit ac7d397aee130c6c47966cb48f0cb2e164865b4a by ghoare:<br>&gt; [Compile perf] Add various convenience options to scale-test<br>&gt; <br>&gt; edit: utils/scale-test<br>&gt; <br>&gt; Commit b7e200ef99b44b6604c95daf68157b4a3ffafe24 by abeingessner:<br>&gt; properly expose == to objc in test<br>&gt; <br>&gt; edit: test/stdlib/TestUserInfo.swift<br>&gt; <br>&gt; Commit d179655952cb7590c5e446f3683427b987ba8226 by abeingessner:<br>&gt; refactor Dictionary to support an empty singleton<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 052e94a34a4635deca374242352b628d4495f806 by abeingessner:<br>&gt; refactor HashedCollections to support verbatim bridging<br>&gt; <br>&gt; edit: validation-test/stdlib/Set.swift<br>&gt; edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit f12d7914e89d70d0feabdcc10198714123e39402 by abeingessner:<br>&gt; update comments in HashedCollections to reflect new design<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit a43c1dfba0946d98489456119bdd2a875a85510c by abeingessner:<br>&gt; Some minor cleanups in HashedCollections:<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 3144870e8672de0392efff8bd7d9e75088db1fc3 by abeingessner:<br>&gt; add new toll-free bridge fast-paths to HashedCollections<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 41fb15f0427149a44060520ebef5d8db88bb054a by abeingessner:<br>&gt; rename Buffer &lt;---&gt; Storage in HashedCollections to match conventions<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit b1425ce78ba0de0ed8ac9a0832eb5d0f507e34c1 by abeingessner:<br>&gt; remove _&#39;s from some variables that don&#39;t need it<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 8eea522e9cd5afec999e18be64feeb4bb21b98fe by abeingessner:<br>&gt; rename storage type to be more useful<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 7ec26fc976b4b1cb5fe42df5d421cb56a04d1f92 by abeingessner:<br>&gt; fallout of renaming on tests which rely on internals<br>&gt; <br>&gt; edit: validation-test/stdlib/Dictionary.swift<br>&gt; edit: validation-test/stdlib/Set.swift<br>&gt; edit: test/stdlib/Inputs/DictionaryKeyValueTypesObjC.swift<br>&gt; edit: validation-test/Reflection/reflect_multiple_types.swift<br>&gt; edit: validation-test/Reflection/reflect_Dictionary.swift<br>&gt; edit: validation-test/Reflection/reflect_Set.swift<br>&gt; <br>&gt; Commit 8b44a07f58ff47bb86d36405ee96220fef9e9dec by abeingessner:<br>&gt; remove nonsensical identity tests from test suite<br>&gt; <br>&gt; edit: validation-test/stdlib/Set.swift<br>&gt; <br>&gt; Commit bb0b4be7ac2f2c444e9c1d795b1eee6eb2dc1a04 by abeingessner:<br>&gt; Update comment to clarify why it&#39;s interesting, link a relevant impl.<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 731aa1494bca60c7a12295e1a3bcd3a35cdce2c5 by abeingessner:<br>&gt; Properly if-def out bridging code.<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit d0de084a7937463685d0f6858565cf7adf4b9b43 by daniel:<br>&gt; [swift-format] add option to indent switch block<br>&gt; <br>&gt; edit: include/swift/Option/Options.td<br>&gt; edit: test/swift-format/main.swift<br>&gt; edit: test/swift-format/main.swift.indent2.response<br>&gt; edit: test/swift-format/main.swift.tabs.response<br>&gt; edit: tools/driver/swift_format_main.cpp<br>&gt; edit: lib/IDE/Formatting.cpp<br>&gt; edit: include/swift/IDE/Formatting.h<br>&gt; add: test/swift-format/main.swift.indentswitch.response<br>&gt; edit: test/swift-format/main.swift.lines.response<br>&gt; edit: test/swift-format/main.swift.response<br>&gt; <br>&gt; Commit 6bc1fc947b1d781ae669fc880574ae9ae2fb5298 by fs.output:<br>&gt; [Parse] Change the way to add parenthesis in fix-it for deprecated<br>&gt; <br>&gt; edit: test/type/protocol_composition.swift<br>&gt; edit: lib/Parse/ParseType.cpp<br>&gt; <br>&gt; Commit b4d97776d8ad60289bb78ce466ab36fbe2e5d3af by abeingessner:<br>&gt; more comment cleanups<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit a62f6c6a896366bcca94e496c9e2f34c0c4af82d by abeingessner:<br>&gt; Fix incorrect bitcasts, refactor code to guard against this error.<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 428cdac57ce0a228d7ee68179c6aeffa0c594704 by abeingessner:<br>&gt; leave FIXME for future dictionary bucaneers<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 5e776e5e391042df8f1e2ed447b2dbd1d5d6501a by abeingessner:<br>&gt; cleanup initializers in HashedCollections<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 931f7ba6581e100bd548081e91df1e6da7e791bd by abeingessner:<br>&gt; actually used the cached keys/values pointer<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 9e3d67ea27512bbb9848e7b9a4bf48afed29a0ac by spestov:<br>&gt; Parser: Stylistic cleanup; enums are not called &#39;unions&#39; anymore<br>&gt; <br>&gt; edit: lib/Parse/ParseDecl.cpp<br>&gt; <br>&gt; Commit 5780a9f52589d3eabc34896246c823717a7d2ee2 by spestov:<br>&gt; AST: Add some assertions when constructing nominal types<br>&gt; <br>&gt; edit: lib/AST/ASTContext.cpp<br>&gt; <br>&gt; Commit 5cee339ebfcbcf7c40765381e9afc7aff690d5d2 by spestov:<br>&gt; Sema: Tweak substMemberTypeWithBase() for nested generic types<br>&gt; <br>&gt; edit: lib/Sema/TypeCheckType.cpp<br>&gt; <br>&gt; Commit c7089ff00053d029745a57915cfb7d100867a5b9 by spestov:<br>&gt; Sema: Add support for extensions of nested generic types<br>&gt; <br>&gt; edit: lib/Sema/TypeCheckDecl.cpp<br>&gt; edit: lib/Sema/TypeChecker.cpp<br>&gt; edit: lib/AST/NameLookup.cpp<br>&gt; edit: test/decl/ext/protocol.swift<br>&gt; edit: test/decl/nested/type_in_type.swift<br>&gt; <br>&gt; Commit 5e46f9c2d4f752cdcb07e227649139e778cba421 by spestov:<br>&gt; Sema: Allow extensions of nested generic types via generic typealiases<br>&gt; <br>&gt; edit: test/decl/typealias/generic.swift<br>&gt; edit: test/decl/nested/type_in_type.swift<br>&gt; edit: lib/Sema/TypeChecker.cpp<br>&gt; <br>&gt; Commit 3cdc8ec44455b8c205a0d90acff8058ac6cf6e63 by abeingessner:<br>&gt; remove buffer header to eliminate optional traps<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit e4c5e159c9a9f7f6785766cfe93bc396a9ad6cb6 by a.beingessner:<br>&gt; remove useless constant redefinition<br>&gt; <br>&gt; edit: stdlib/public/core/HashedCollections.swift.gyb<br>&gt; <br>&gt; Commit 3f6a67643556ded5776af1197b5aec789b8ab116 by xi_ge:<br>&gt; [test] Using targetted swift-ide-test. rdar://29103477 &lt;rdar://29103477&gt;<br>&gt; edit: test/IDE/complete_repeat.swift<br>&gt; <br>&gt; Commit af15b94f964b090d5a5e1e808c7761b20d7bccf3 by practicalswift:<br>&gt; [swiftc (98 vs. 5181)] Add crasher in<br>&gt; <br>&gt; add: validation-test/compiler_crashers/28468-segfault-0xd09050-0xd08dfd-0xbe9d76-0xbeb154.swift<br>&gt; <br>&gt; Commit f4a989814271744f081694ecdc114db966880850 by github:<br>&gt; [QoI] Improve &quot;never used&quot; diagnostics (#5638)<br>&gt; <br>&gt; edit: lib/Sema/MiscDiagnostics.cpp<br>&gt; edit: test/decl/var/usage.swift<br>&gt; edit: test/SILGen/errors.swift<br>&gt; edit: test/expr/expressions.swift<br>&gt; edit: test/expr/postfix/dot/init_ref_delegation.swift<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161107/9311ae32/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
