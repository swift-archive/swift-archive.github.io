<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri May 06 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, May 6, 2016, at 06:05 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri May 06 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Fri, May 6, 2016, at 05:31 PM, Kevin Ballard wrote:<br>&gt;&gt; &gt;&gt; On Fri, May 6, 2016, at 05:19 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; on Wed May 04 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; &gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; &gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt; &gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; &gt; The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and<br>&gt;&gt; &gt;&gt; &gt; &gt; unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the<br>&gt;&gt; &gt;&gt; &gt; &gt; proposal is *accepted, with modifications* for Swift 3.  This proposal<br>&gt;&gt; &gt;&gt; &gt; &gt; included four new additions to the standard library:<br>&gt;&gt; &gt;&gt; &gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; &gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; I know the review is over and all, but…<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; Chris brought to my attention an idea that I liked, and asked me to post<br>&gt;&gt; &gt;&gt; &gt; here about it.  Specifically, the argument label “where:” would probably<br>&gt;&gt; &gt;&gt; &gt; be better than “while:”.  “While” makes it sound to me like it&#39;s going<br>&gt;&gt; &gt;&gt; &gt; to take a nullary predicate and be much more active.  But it&#39;s hard to<br>&gt;&gt; &gt;&gt; &gt; love<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt;      s.drop(where: { $0 &gt; 1 })<br>&gt;&gt; &gt;&gt; &gt;      s.drop { $0 &gt; 1 }<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; because it makes it sound like a general filtering operation.<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt; Therefore, I&#39;d much rather see<br>&gt;&gt; &gt;&gt; &gt; <br>&gt;&gt; &gt;&gt; &gt;        s.droppingPrefix(where: {$0 &gt; 1})<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; Using &quot;where:&quot; has a very high potential for confusion, because<br>&gt;&gt; &gt;&gt; &quot;where&quot; makes it sound like it runs the predicate against every<br>&gt;&gt; &gt;&gt; single element, whereas &quot;while&quot; makes it clear that it stops<br>&gt;&gt; &gt;&gt; evaluating elements once the predicate returns false. Or in other<br>&gt;&gt; &gt;&gt; words, `drop(where: predicate)` looks like it should be equivalent<br>&gt;&gt; &gt;&gt; to `filter({ !predicate($0) })`.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Oops, I read your message too fast and missed the fact that you<br>&gt;&gt; &gt; changed the function name too in the very last line.<br>&gt;&gt; <br>&gt;&gt; And made the exact point that you made :-)<br>&gt;<br>&gt; Indeed. My apologies, I was trying to get through my email too fast and ended up skimming too much.<br>&gt;<br>&gt;&gt; &gt; If we switched to `droppingPrefix(where:)` then we&#39;d need to change `dropFirst(_:)` as well.<br>&gt;&gt; <br>&gt;&gt; Yes, as I noted in my response to Erica, I would like to see some more design<br>&gt;&gt; coherence in this whole area.  I think<br>&gt;&gt; <br>&gt;&gt;           xs.dropFirst()  =&gt;  xs.droppingFirst()<br>&gt;&gt;           xs.dropFirst(3) =&gt; xs.droppingPrefix(ofMaxLength: 3)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not wedded to “dropping,” especially because it has other<br>&gt;&gt; connotations.  Dmitri, Max, and I kicked around a bunch of other<br>&gt;&gt; possibilities, e.g.<br>&gt;&gt; <br>&gt;&gt;           sansPrefix<br>&gt;&gt;           withoutPrefix<br>&gt;<br>&gt; If we do rename this, I&#39;m partial to basing it off of the word &quot;skip&quot;,<br>&gt; e.g. skippingPrefix(), since that&#39;s similar to &quot;drop&quot; but doesn&#39;t have<br>&gt; the connotation of possibly mutating the receiver. That said, having a<br>&gt; first argument label &quot;ofMaxLength:&quot; seems overly verbose. Don&#39;t forget<br>&gt; that not everybody has the benefit of Xcode code completion when<br>&gt; writing Swift code.<br></p><p>Me, for example.  It needs to be at least “maxLength,” IMO, for<br>clarity.  “of” clarifies that you&#39;re not talking about the maximum<br>length of the result... though I suppose it could be argued that that<br>misinterpretation wouldn&#39;t make any sense.<br></p><p>&gt;&gt; Anyway, we can&#39;t do all of that by the seat of our pants.  I personally<br>&gt;&gt; wouldn&#39;t want to go any further than s.dropPrefix(where: ...)  without a<br>&gt;&gt; new proposal/review.<br>&gt;<br>&gt; Agreed, anything beyond that needs a full review. So back to the<br>&gt; suggestion at hand.<br>&gt;<br>&gt; I wrote up a whole long explanation for why I still think &quot;while&quot; is<br>&gt; the better choice, and then I thought about how this impacts<br>&gt; `prefix(...:)` instead of `drop(...:)`, and in this context &quot;where:&quot;<br>&gt; makes more sense. `prefix(while:)` turns &quot;prefix&quot; from a noun into a<br>&gt; verb, <br></p><p>Sorta, yeah.<br></p><p>&gt; and the verb meaning of &quot;prefix&quot; is not at all what we&#39;re doing with<br>&gt; this operation. But `prefix(where:)` is still a noun and makes<br>&gt; sense. And of course if we have `prefix(where:)` then it&#39;s a bit odd<br>&gt; to have `drop(while:)`, so we&#39;d have to go with `drop(where:)` or<br>&gt; `dropPrefix(where:)`. So I guess I&#39;ve now convinced myself while<br>&gt; writing this email that &quot;where:&quot; is the right choice :D<br></p><p>:D<br></p><p><br>&gt; That said, given that we already have `dropFirst(_:)`, maybe we should<br>&gt; go with `dropFirst(where:)` instead of `dropPrefix(where:)`? Otherwise<br>&gt; it&#39;s a bit odd to have both &quot;dropFirst&quot; and &quot;dropPrefix&quot; as<br>&gt; names. <br></p><p>Agreed, that might make a more reasonable interim stopping point.<br></p><p>&gt; Admittedly, this same argument applies to the existing `drop(while:)`<br>&gt; name too, and I don&#39;t have a great explanation for that beyond the<br>&gt; fact that I had a vague idea that dropFirst(_:) might be renamed to<br>&gt; drop(first:), though that can&#39;t actually happen because having both<br>&gt; dropFirst() and drop(first:) is hugely confusing, and it doesn&#39;t make<br>&gt; sense to rename dropFirst() to drop().<br></p><p>Ya just lost me in those twisty turns, sorry.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  6, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, May 6, 2016, at 07:33 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; <br>&gt; on Fri May 06 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On Fri, May 6, 2016, at 06:05 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; on Fri May 06 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt; On Fri, May 6, 2016, at 05:31 PM, Kevin Ballard wrote:<br>&gt; &gt;&gt; &gt;&gt; On Fri, May 6, 2016, at 05:19 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; on Wed May 04 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; Hello Swift Community,<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; proposal is *accepted, with modifications* for Swift 3.  This proposal<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; included four new additions to the standard library:<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; &gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; I know the review is over and all, but…<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; Chris brought to my attention an idea that I liked, and asked me to post<br>&gt; &gt;&gt; &gt;&gt; &gt; here about it.  Specifically, the argument label “where:” would probably<br>&gt; &gt;&gt; &gt;&gt; &gt; be better than “while:”.  “While” makes it sound to me like it&#39;s going<br>&gt; &gt;&gt; &gt;&gt; &gt; to take a nullary predicate and be much more active.  But it&#39;s hard to<br>&gt; &gt;&gt; &gt;&gt; &gt; love<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt;      s.drop(where: { $0 &gt; 1 })<br>&gt; &gt;&gt; &gt;&gt; &gt;      s.drop { $0 &gt; 1 }<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; because it makes it sound like a general filtering operation.<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt; Therefore, I&#39;d much rather see<br>&gt; &gt;&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;&gt; &gt;        s.droppingPrefix(where: {$0 &gt; 1})<br>&gt; &gt;&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt;&gt; Using &quot;where:&quot; has a very high potential for confusion, because<br>&gt; &gt;&gt; &gt;&gt; &quot;where&quot; makes it sound like it runs the predicate against every<br>&gt; &gt;&gt; &gt;&gt; single element, whereas &quot;while&quot; makes it clear that it stops<br>&gt; &gt;&gt; &gt;&gt; evaluating elements once the predicate returns false. Or in other<br>&gt; &gt;&gt; &gt;&gt; words, `drop(where: predicate)` looks like it should be equivalent<br>&gt; &gt;&gt; &gt;&gt; to `filter({ !predicate($0) })`.<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; Oops, I read your message too fast and missed the fact that you<br>&gt; &gt;&gt; &gt; changed the function name too in the very last line.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; And made the exact point that you made :-)<br>&gt; &gt;<br>&gt; &gt; Indeed. My apologies, I was trying to get through my email too fast and ended up skimming too much.<br>&gt; &gt;<br>&gt; &gt;&gt; &gt; If we switched to `droppingPrefix(where:)` then we&#39;d need to change `dropFirst(_:)` as well.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Yes, as I noted in my response to Erica, I would like to see some more design<br>&gt; &gt;&gt; coherence in this whole area.  I think<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;           xs.dropFirst()  =&gt;  xs.droppingFirst()<br>&gt; &gt;&gt;           xs.dropFirst(3) =&gt; xs.droppingPrefix(ofMaxLength: 3)<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I&#39;m not wedded to “dropping,” especially because it has other<br>&gt; &gt;&gt; connotations.  Dmitri, Max, and I kicked around a bunch of other<br>&gt; &gt;&gt; possibilities, e.g.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;           sansPrefix<br>&gt; &gt;&gt;           withoutPrefix<br>&gt; &gt;<br>&gt; &gt; If we do rename this, I&#39;m partial to basing it off of the word &quot;skip&quot;,<br>&gt; &gt; e.g. skippingPrefix(), since that&#39;s similar to &quot;drop&quot; but doesn&#39;t have<br>&gt; &gt; the connotation of possibly mutating the receiver. That said, having a<br>&gt; &gt; first argument label &quot;ofMaxLength:&quot; seems overly verbose. Don&#39;t forget<br>&gt; &gt; that not everybody has the benefit of Xcode code completion when<br>&gt; &gt; writing Swift code.<br>&gt; <br>&gt; Me, for example.  It needs to be at least “maxLength,” IMO, for<br>&gt; clarity.  “of” clarifies that you&#39;re not talking about the maximum<br>&gt; length of the result... though I suppose it could be argued that that<br>&gt; misinterpretation wouldn&#39;t make any sense.<br></p><p>How about &quot;count&quot;? `skippingFirst(count:)` is not too long and it&#39;s reasonably descriptive.<br></p><p>&gt; &gt;&gt; Anyway, we can&#39;t do all of that by the seat of our pants.  I personally<br>&gt; &gt;&gt; wouldn&#39;t want to go any further than s.dropPrefix(where: ...)  without a<br>&gt; &gt;&gt; new proposal/review.<br>&gt; &gt;<br>&gt; &gt; Agreed, anything beyond that needs a full review. So back to the<br>&gt; &gt; suggestion at hand.<br>&gt; &gt;<br>&gt; &gt; I wrote up a whole long explanation for why I still think &quot;while&quot; is<br>&gt; &gt; the better choice, and then I thought about how this impacts<br>&gt; &gt; `prefix(...:)` instead of `drop(...:)`, and in this context &quot;where:&quot;<br>&gt; &gt; makes more sense. `prefix(while:)` turns &quot;prefix&quot; from a noun into a<br>&gt; &gt; verb, <br>&gt; <br>&gt; Sorta, yeah.<br>&gt; <br>&gt; &gt; and the verb meaning of &quot;prefix&quot; is not at all what we&#39;re doing with<br>&gt; &gt; this operation. But `prefix(where:)` is still a noun and makes<br>&gt; &gt; sense. And of course if we have `prefix(where:)` then it&#39;s a bit odd<br>&gt; &gt; to have `drop(while:)`, so we&#39;d have to go with `drop(where:)` or<br>&gt; &gt; `dropPrefix(where:)`. So I guess I&#39;ve now convinced myself while<br>&gt; &gt; writing this email that &quot;where:&quot; is the right choice :D<br>&gt; <br>&gt; :D<br>&gt; <br>&gt; <br>&gt; &gt; That said, given that we already have `dropFirst(_:)`, maybe we should<br>&gt; &gt; go with `dropFirst(where:)` instead of `dropPrefix(where:)`? Otherwise<br>&gt; &gt; it&#39;s a bit odd to have both &quot;dropFirst&quot; and &quot;dropPrefix&quot; as<br>&gt; &gt; names. <br>&gt; <br>&gt; Agreed, that might make a more reasonable interim stopping point.<br>&gt; <br>&gt; &gt; Admittedly, this same argument applies to the existing `drop(while:)`<br>&gt; &gt; name too, and I don&#39;t have a great explanation for that beyond the<br>&gt; &gt; fact that I had a vague idea that dropFirst(_:) might be renamed to<br>&gt; &gt; drop(first:), though that can&#39;t actually happen because having both<br>&gt; &gt; dropFirst() and drop(first:) is hugely confusing, and it doesn&#39;t make<br>&gt; &gt; sense to rename dropFirst() to drop().<br>&gt; <br>&gt; Ya just lost me in those twisty turns, sorry.<br></p><p>What I meant was that `drop(while:)` doesn&#39;t match the existing `dropFirst(_:)` name either (just as `dropPrefix` wouldn&#39;t), and my reasons for proposing `drop(while:)` instead of `dropFirst(while:)` were not well-founded.<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
