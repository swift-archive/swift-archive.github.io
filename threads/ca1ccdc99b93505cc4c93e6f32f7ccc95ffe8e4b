<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>Here’s a little annoyance I ran across just now:<br></p><p>            let sub: CKSubscription = {<br>                if let ID = self.ID {<br>                    return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>                }<br>                else {<br>                    return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>                }<br>            }()<br></p><p>This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 15, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 3:16 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a little annoyance I ran across just now:<br>&gt; <br>&gt;            let sub: CKSubscription = {<br>&gt;                if let ID = self.ID {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>&gt;                }<br>&gt;                else {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>&gt;                }<br>&gt;            }()<br>&gt; <br>&gt; This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br></p><p>Seems reasonable, especially because SILGen peepholes { }() so that it doesn&#39;t even allocate a closure to begin with.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 15:20 , Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 15, 2015, at 3:16 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a little annoyance I ran across just now:<br>&gt;&gt; <br>&gt;&gt;           let sub: CKSubscription = {<br>&gt;&gt;               if let ID = self.ID {<br>&gt;&gt;                   return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>&gt;&gt;               }<br>&gt;&gt;               else {<br>&gt;&gt;                   return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>&gt;&gt;               }<br>&gt;&gt;           }()<br>&gt;&gt; <br>&gt;&gt; This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br>&gt; <br>&gt; Seems reasonable, especially because SILGen peepholes { }() so that it doesn&#39;t even allocate a closure to begin with.<br></p><p>+1 from me as well. Personally, I would consider this an enhancement to an existing feature and would therefore not need to have it go through formal review. I don&#39;t think I get to make this call, though.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151215/aad44560/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/abf891ba571d5a819ddf547917abe1e1?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Al Skipp</string> &lt;al_skipp at fastmail.fm&gt;<p>December 16, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 23:16, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a little annoyance I ran across just now:<br>&gt; <br>&gt;            let sub: CKSubscription = {<br>&gt;                if let ID = self.ID {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>&gt;                }<br>&gt;                else {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>&gt;                }<br>&gt;            }()<br>&gt; <br>&gt; This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br></p><p>Would the following be acceptable, or too dense?<br></p><p>let sub = ID.map { id in<br>  CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: id, options: allMutations)<br>} ?? CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br></p><p>Either way, I agree that immediately called closures should be implicitly @noescape.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt;&gt; Here’s a little annoyance I ran across just now:<br>&gt;&gt; <br>&gt;&gt;           let sub: CKSubscription = {<br>&gt;&gt;               if let ID = self.ID {<br>&gt;&gt;                   return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>&gt;&gt;               }<br>&gt;&gt;               else {<br>&gt;&gt;                   return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>&gt;&gt;               }<br>&gt;&gt;           }()<br>&gt;&gt; <br>&gt;&gt; This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br>&gt; <br>&gt; Would the following be acceptable, or too dense?<br>&gt; <br>&gt; let sub = ID.map { id in<br>&gt;  CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: id, options: allMutations)<br>&gt; } ?? CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br></p><p>It’s clever, but a little too clever even for my code.<br></p><p>(Really, the actual problem in this piece of code is that you can’t pass a nil subscriptionID to CKSubscription’s initializer even though there’s a parallel initializer which omits that parameter. Some people just want to watch the world burn, I guess.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Immediately-called closures should be considered @noescape</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 15, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 15, 2015, at 3:16 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here’s a little annoyance I ran across just now:<br>&gt; <br>&gt;            let sub: CKSubscription = {<br>&gt;                if let ID = self.ID {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, subscriptionID: ID, options: allMutations)<br>&gt;                }<br>&gt;                else {<br>&gt;                    return CKSubscription(recordType: typeName, predicate: predicate, options: allMutations)<br>&gt;                }<br>&gt;            }()<br>&gt; <br>&gt; This closure obviously never leaves the enclosing function, but Swift doesn’t treat it as if it had been passed to a @noescape function, so I have to say “self.ID” instead of “ID” in the condition. That’s a bit irritating, and I’d like to see it improved.<br></p><p>I’m pretty sure this is already the case, is it not?  Perhaps this is only happening in a function body context, but not in a property initializer?<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
