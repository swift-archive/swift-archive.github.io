<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>[proposa] High Level ARC Value Operations</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>October 15, 2016 at 08:00:00am</p></header><div class="content"><p>Hello everyone.<br></p><p>Attached below inline is a proposal for High Level ARC Value operations. Additionally a formatted version of this proposal is available here:<br></p><p>https://gottesmm.github.io/proposals/high-level-arc-value-operations.html &lt;https://gottesmm.github.io/proposals/high-level-arc-value-operations.html&gt;<br></p><p>TLDR: This is a very straightforward proposal that just proposes the instructions copy_value, destroy_value, and copy_unowned_value. These are just the use-def versions of strong_retain, retain_value, strong_release, release_value, and strong_retain_unowned.<br></p><p>Michael<br></p><p>----<br></p><p># Summary<br></p><p>This document proposes:<br></p><p>1. removing the `strong_retain`, `retain_value`, `unowned_retain`, and<br>  `strong_retain_unowned` instructions.<br>2. adding the `copy_value` and `copy_unowned_value` instructions.<br>3. removing the `strong_release`, `release_value`, `unowned_release`<br>  instructions.<br>4. adding the `destroy_value` instruction.<br></p><p>This will allow for the SIL IR to express ownership conventions via SSA use-def<br>chains.<br></p><p># Definitions<br></p><p>## copy_value<br></p><p>Define a `copy_value` as follows:<br></p><p>   %y = copy_value %x : $*C<br>   use(%y)<br></p><p>     =&gt;<br></p><p>   retain_value %x : $C<br>   use(%x)<br></p><p>## copy_unowned_value<br></p><p>Define a `copy_unowned_value` as:<br></p><p>   %y = copy_unowned_value %x : $@unowned T<br></p><p>     =&gt;<br></p><p>   strong_retain_unowned %x : $@unowned T<br></p><p>where `%y` has type `$T`. This is necessary to enable the strong reference count<br>associated with the `copy_unowned_value` to be balanced by a<br>`destroy_addr`. Thus normally one will see this instruction used as follows:<br></p><p>   %y = copy_unowned_value %x : $@unowned T<br>   ...<br>   destroy_value %y : $T<br></p><p>## destroy_value<br></p><p>Define a `destroy_value` as follows:<br></p><p>   destroy_value %x : $C<br></p><p>     =&gt;<br></p><p>   release_value %x : $C<br></p><p># Implementation<br></p><p>## Plan<br></p><p>We assume that<br>the [High Level ARC Memory Operations](high-level-arc-memory-operations)<br>proposal has been implemented. First we perform the following preliminary work:<br></p><p>1. `copy_value`, `destroy_value`, `copy_unowned_value` support will be added to<br>  SIL, IRGen, serialization, printing, SIL parsing. SILGen will not be modified<br>  at this stage.<br></p><p>2. The &quot;OwnershipModelEliminator&quot; will be taught to transform `copy_value`,<br>  `copy_unowned_value`, `destroy_value` into their constituant operations.<br></p><p>Then we wire up the building blocks:<br></p><p>1. SILGen will be taught to emit `copy_value`, `copy_unowned_value`, and<br>  `destroy_value` instead of `strong_retain`, `retain_value`, `strong_release`,<br>  `release_value`, and `strong_retain_unowned`.<br></p><p>2. The pass manager will not require any changes due to previous work<br>  in [High Level ARC Memory Operations](high-level-arc-memory-operations).<br></p><p>3. The verifier when in EnforceSILOwnershipMode will verify that none of the<br>  instructions that we wish to remove are in the IR.<br></p><p>## Optimizer Changes<br></p><p>Since the SILOwnershipModel eliminator will eliminate the `copy_value`,<br>`copy_unowned_value`, and `destroy_value` operations right after ownership<br>verification, there will be no immediate effects on the optimizer and thus the<br>optimizer changes can be done in parallel with the rest of the SIL Ownership<br>work. But in the long run, we want these instructions to be lowered by IRGen<br>implying that we must consider how this will affect the rest of the optimizer<br>pipeline.<br></p><p>We now go through all of the passes that will need updating to handle these<br>changes:<br></p><p>### ARC Optimizer<br></p><p>Since the ARC optimizer does not perform code motion any more, only minimal<br>changes will be required. Specifically, all we must do is recognize copy_value<br>as a retain instruction and destroy_value as a release instruction. Everything<br>then will *just* work.<br></p><p>### ARC Code Motion and Function Signature Optimization<br></p><p>Both of these passes will need to recognize `copy_value`, `destroy_value`<br>instructions as retain, release and be changed to emit `copy_value` or<br>`destroy_value` instead of retain, release instructions. In the case of ARC code<br>motion rather than just re-emitting retain, release instructions without<br>considering use-def lists, it must now consider such issues to ensure that we do<br>not violate use-def dominance.<br></p><p>### Misc compiler Peepholes: SILCombine, Mandatory Inlining, etc.<br></p><p>There are many peepholes in the compiler that emit retain, release instructions<br>for ARC optimizations to clean up later. These must be updated to use the new<br>instructions. This will be mechanical.<br></p><p>### Side Effects<br></p><p>The side effects subsystem needs to be updated to handle copy_value like it does<br>a retain and destroy_value like it does a release. This should be mechanical.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161015/eb0701fc/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
