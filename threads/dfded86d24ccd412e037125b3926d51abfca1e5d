<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  5, 2016 at 09:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0072 &quot;Fully eliminate implicit bridging conversions from Swift” ran from April 26 ... May 2, 2016. The proposal is *accepted* for Swift 3. <br></p><p>The feedback on this proposal was positive - the benefits of simplifying the type system and eliminating surprising behavior from the compiler is universally appealing.  However, both the core team and the community wanted a better sense of what the impact of the proposal would be in practice on real code.  Joe Pamer did some analysis and found out that there isn’t a significant impact on the most concerning use case:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160502/016644.html<br></p><p>Thank you to Joe Pamer for driving the proposal and the implementation work for this improvement!<br></p><p>-Chris<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Does this affect the ability to use &quot;x as? Int&quot; (and similar) when x is an<br>NSNumber?<br></p><p>Jacob<br></p><p>On Thu, May 5, 2016 at 9:50 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0072-eliminate-implicit-bridging-conversions.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0072 &quot;Fully eliminate implicit bridging conversions from<br>&gt; Swift” ran from April 26 ... May 2, 2016. The proposal is *accepted* for<br>&gt; Swift 3.<br>&gt;<br>&gt; The feedback on this proposal was positive - the benefits of simplifying<br>&gt; the type system and eliminating surprising behavior from the compiler is<br>&gt; universally appealing.  However, both the core team and the community<br>&gt; wanted a better sense of what the impact of the proposal would be in<br>&gt; practice on real code.  Joe Pamer did some analysis and found out that<br>&gt; there isn’t a significant impact on the most concerning use case:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160502/016644.html<br>&gt;<br>&gt; Thank you to Joe Pamer for driving the proposal and the implementation<br>&gt; work for this improvement!<br>&gt;<br>&gt; -Chris<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/bb4cce72/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  6, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 6, 2016, at 12:21 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Does this affect the ability to use &quot;x as? Int&quot; (and similar) when x is an NSNumber?<br></p><p>No, this only affects compile-time implicit conversions. I proposed changing the runtime behavior of dynamic casts in SE-0083:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 6, 2016, at 3:15 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 6, 2016, at 12:21 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Does this affect the ability to use &quot;x as? Int&quot; (and similar) when x is an NSNumber?<br>&gt; <br>&gt; No, this only affects compile-time implicit conversions. I proposed changing the runtime behavior of dynamic casts in SE-0083:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md&gt;<br>I’d just like to throw in that the ability to use “x as? Int” when x is an NSNumber is terrible.<br></p><p>let num: AnyObject = NSNumber(int: 5)<br></p><p>let int = num as? Int		// 5<br>let float = num as? Float		// 5<br>let int32 = num as? Int32	// nil!<br></p><p>Completely unexpected failure, and you’ll never know about it until runtime.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/1f4354d8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  7, 2016 at 04:00:00am</p></header><div class="content"><p>Agreed, but I&#39;m sure lots of user code depends on it (e.g. when extracting<br>numeric values from property lists). If it stopped working, wouldn&#39;t these<br>&quot;as?&quot; casts silently start returning nil where they didn&#39;t before?<br>On Fri, May 6, 2016 at 8:20 PM Charles Srstka &lt;cocoadev at charlessoft.com&gt;<br>wrote:<br></p><p>&gt; On May 6, 2016, at 3:15 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On May 6, 2016, at 12:21 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Does this affect the ability to use &quot;x as? Int&quot; (and similar) when x is an<br>&gt; NSNumber?<br>&gt;<br>&gt;<br>&gt; No, this only affects compile-time implicit conversions. I proposed<br>&gt; changing the runtime behavior of dynamic casts in SE-0083:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br>&gt;<br>&gt;<br>&gt; I’d just like to throw in that the ability to use “x as? Int” when x is an<br>&gt; NSNumber is terrible.<br>&gt;<br>&gt; let num: AnyObject = NSNumber(int: 5)<br>&gt;<br>&gt; let int = num as? Int // 5<br>&gt; let float = num as? Float // 5<br>&gt; let int32 = num as? Int32 // nil!<br>&gt;<br>&gt; Completely unexpected failure, and you’ll never know about it until<br>&gt; runtime.<br>&gt;<br>&gt; Charles<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/2545bdec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May  7, 2016 at 12:00:00am</p></header><div class="content"><p>On the downside: This is absolutely true. All of those conversions would be the first up against the well when the revolution comes.<br></p><p>On the upside: I imagine a compiler warning could be pretty reasonably whipped up to detect these, and after the dust cleared, we’d be able to just try Int32(foo) and either the initializer would exist, or it wouldn’t, and it wouldn’t be necessary to bust out a playground and test to see if it’ll actually work every time you want to cast something to a number type that’s not your basic Int or Float.<br></p><p>Charles<br></p><p>&gt; On May 6, 2016, at 11:01 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Agreed, but I&#39;m sure lots of user code depends on it (e.g. when extracting numeric values from property lists). If it stopped working, wouldn&#39;t these &quot;as?&quot; casts silently start returning nil where they didn&#39;t before?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/829f1c8b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>May  7, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, May 6, 2016, at 11:20 PM, Charles Srstka via swift-evolution wrote:<br>&gt; let int = num as? Int // 5<br>&gt; let float = num as? Float // 5<br>&gt; let int32 = num as? Int32 // nil!<br>That specific behavior with Int32 seems to be an oversight in the<br>stdlib. The specific integer types don&#39;t get an ObjectiveCBridgeable<br>implementation.<br> <br>Sincerely,<br>Zachary Waldowski<br>zach at waldowski.me<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/3ebc7f8e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 7, 2016, at 1:23 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, May 6, 2016, at 11:20 PM, Charles Srstka via swift-evolution wrote:<br>&gt;&gt; let int = num as? Int // 5<br>&gt;&gt; let float = num as? Float // 5<br>&gt;&gt; let int32 = num as? Int32 // nil!<br>&gt; That specific behavior with Int32 seems to be an oversight in the stdlib.<br></p><p>It wasn&#39;t an oversight. At the time of Swift 1.0, bridging a type implied bidirectional implicit conversions, and if *every* integer type were bridgeable, it would be possible to unsafely implicitly convert between any two integer types by hopping through NSNumber. Now that we&#39;ve eliminated these implicit conversions, we could consider bridging more types. Do you want to start another thread to discuss that idea?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  9, 2016 at 05:00:00pm</p></header><div class="content"><p>Maybe I made a mistake when testing, but I thought I was able to convert a<br>negative Int to a large UInt by going through NSNumber (it didn&#39;t return<br>nil from the as? cast).<br>On Mon, May 9, 2016 at 10:11 AM Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 7, 2016, at 1:23 PM, Zach Waldowski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Fri, May 6, 2016, at 11:20 PM, Charles Srstka via swift-evolution<br>&gt; wrote:<br>&gt; &gt;&gt; let int = num as? Int // 5<br>&gt; &gt;&gt; let float = num as? Float // 5<br>&gt; &gt;&gt; let int32 = num as? Int32 // nil!<br>&gt; &gt; That specific behavior with Int32 seems to be an oversight in the stdlib.<br>&gt;<br>&gt; It wasn&#39;t an oversight. At the time of Swift 1.0, bridging a type implied<br>&gt; bidirectional implicit conversions, and if *every* integer type were<br>&gt; bridgeable, it would be possible to unsafely implicitly convert between any<br>&gt; two integer types by hopping through NSNumber. Now that we&#39;ve eliminated<br>&gt; these implicit conversions, we could consider bridging more types. Do you<br>&gt; want to start another thread to discuss that idea?<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160509/35503490/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 9, 2016, at 10:12 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Maybe I made a mistake when testing, but I thought I was able to convert a negative Int to a large UInt by going through NSNumber (it didn&#39;t return nil from the as? cast).<br></p><p>It&#39;s less bad if you&#39;re able to do this explicitly. It was the *implicit* conversion behavior we were concerned about.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Accepted] SE-0072: Fully eliminate implicit bridging conversions from Swift</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 6, 2016, at 8:20 PM, Charles Srstka &lt;cocoadev at charlessoft.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 6, 2016, at 3:15 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 12:21 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does this affect the ability to use &quot;x as? Int&quot; (and similar) when x is an NSNumber?<br>&gt;&gt; <br>&gt;&gt; No, this only affects compile-time implicit conversions. I proposed changing the runtime behavior of dynamic casts in SE-0083:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br>&gt; <br>&gt; I’d just like to throw in that the ability to use “x as? Int” when x is an NSNumber is terrible.<br>&gt; <br>&gt; let num: AnyObject = NSNumber(int: 5)<br>&gt; <br>&gt; let int = num as? Int		// 5<br>&gt; let float = num as? Float		// 5<br>&gt; let int32 = num as? Int32	// nil!<br>&gt; <br>&gt; Completely unexpected failure, and you’ll never know about it until runtime.<br></p><p>My pitch to eliminate this casting behavior got pulled as SE-0083, up for review this week:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0083-remove-bridging-from-dynamic-casts.md<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
