<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 10, 2016 at 12:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br></p><p>We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br></p><p>We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br></p><p>At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br></p><p>When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br></p><p>    public var myInt = Int(3)<br></p><p>Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br></p><p>We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br></p><p>A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br></p><p>Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br></p><p>My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br></p><p>Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br></p><p>I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br></p><p>Thanks,<br>E.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160210/96563f84/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 10, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks for reporting the problem. We&#39;ll need a project that reproduces the crash to investigate—Have you filed a bug report?<br></p><p>-Joe<br></p><p>&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt; <br>&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt; <br>&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt; <br>&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt; <br>&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt; <br>&gt;     public var myInt = Int(3)<br>&gt; <br>&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt; <br>&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt; <br>&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt; <br>&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt; <br>&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt; <br>&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt; <br>&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt; <br>&gt; Thanks,<br>&gt; E.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160210/97e040a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 10, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Joe,<br></p><p>I haven&#39;t yet filed a radar but will do so when I get a chance &amp; will attach our source project with test login credentials &amp; steps to reproduce.<br></p><p>Thanks,<br>E.<br></p><p><br>&gt; On Feb 10, 2016, at 1:45 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Thanks for reporting the problem. We&#39;ll need a project that reproduces the crash to investigate—Have you filed a bug report?<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt; <br>&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt; <br>&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt; <br>&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt; <br>&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt; <br>&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt; <br>&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt; <br>&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt; <br>&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt; <br>&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt; <br>&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt; <br>&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt; <br>&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; E.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160210/23836970/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 10, 2016 at 03:00:00pm</p></header><div class="content"><p>Joe,<br></p><p>I&#39;ve filed rdar://problem/24592548 &lt;rdar://problem/24592548&gt;.<br></p><p>The ticket includes the source code, the Xcode project, the steps to reproduce &amp; the login credentials needed to get to the crash site.<br></p><p>I&#39;ve also included my phone number in case anyone needs help walking through those steps.<br></p><p>Thanks,<br>E.<br></p><p><br>&gt;&gt; On Feb 10, 2016, at 1:45 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for reporting the problem. We&#39;ll need a project that reproduces the crash to investigate—Have you filed a bug report?<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; E.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160210/0d50535a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 10, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 12:08 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Joe,<br>&gt; <br>&gt; I&#39;ve filed rdar://problem/24592548 &lt;rdar://problem/24592548&gt;.<br>&gt; <br>&gt; The ticket includes the source code, the Xcode project, the steps to reproduce &amp; the login credentials needed to get to the crash site.<br>&gt; <br>&gt; I&#39;ve also included my phone number in case anyone needs help walking through those steps.<br></p><p>Thanks, we&#39;ll take a look!<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160210/18bf816f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>February 11, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Evan,<br></p><p>Sorry for the inconvenience!<br></p><p>The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br></p><p>In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br></p><p>As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br></p><p>    let _workaround: ViewModel? = nil<br></p><p>I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br></p><p>I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br></p><p>- a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>- the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>- Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br></p><p>Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br></p><p>Slava<br></p><p><br>I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt; <br>&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt; <br>&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt; <br>&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt; <br>&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt; <br>&gt;     public var myInt = Int(3)<br>&gt; <br>&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt; <br>&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt; <br>&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt; <br>&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt; <br>&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt; <br>&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt; <br>&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt; <br>&gt; Thanks,<br>&gt; E.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160211/5568e584/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Slava,<br></p><p>Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br></p><p>Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br></p><p>When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br></p><p>Thanks again!<br>Evan<br></p><p><br></p><p><br>&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Evan,<br>&gt; <br>&gt; Sorry for the inconvenience!<br>&gt; <br>&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt; <br>&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt; <br>&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt; <br>&gt;     let _workaround: ViewModel? = nil<br>&gt; <br>&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt; <br>&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt; <br>&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt; <br>&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt; <br>&gt; Slava<br>&gt; <br>&gt; <br>&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt; <br>&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt; <br>&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt; <br>&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt; <br>&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt; <br>&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt; <br>&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt; <br>&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt; <br>&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt; <br>&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt; <br>&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt; <br>&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt; <br>&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; E.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160211/7efbaddc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 25, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi Slava,<br></p><p>As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br></p><p>Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br></p><p>Let me know if there&#39;s more info I can provide.<br></p><p>Thanks,<br>E.<br></p><p><br>&gt; On Feb 11, 2016, at 11:38 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Slava,<br>&gt; <br>&gt; Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br>&gt; <br>&gt; Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br>&gt; <br>&gt; When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br>&gt; <br>&gt; Thanks again!<br>&gt; Evan<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Evan,<br>&gt;&gt; <br>&gt;&gt; Sorry for the inconvenience!<br>&gt;&gt; <br>&gt;&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt;&gt; <br>&gt;&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt;&gt; <br>&gt;&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt;&gt; <br>&gt;&gt;     let _workaround: ViewModel? = nil<br>&gt;&gt; <br>&gt;&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt;&gt; <br>&gt;&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt;&gt; <br>&gt;&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt;&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt;&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt;&gt; <br>&gt;&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt;&gt; <br>&gt;&gt; Slava<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; E.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160225/d1f2fe57/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>February 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Evan,<br></p><p>The fix did not make it in time for beta 4 but it should be in the next seed.<br></p><p>Slava<br></p><p>&gt; On Feb 25, 2016, at 10:07 AM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Hi Slava,<br>&gt; <br>&gt; As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br>&gt; <br>&gt; Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br>&gt; <br>&gt; Let me know if there&#39;s more info I can provide.<br>&gt; <br>&gt; Thanks,<br>&gt; E.<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 11:38 PM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Slava,<br>&gt;&gt; <br>&gt;&gt; Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br>&gt;&gt; <br>&gt;&gt; Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br>&gt;&gt; <br>&gt;&gt; When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br>&gt;&gt; <br>&gt;&gt; Thanks again!<br>&gt;&gt; Evan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Evan,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry for the inconvenience!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     let _workaround: ViewModel? = nil<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt;&gt;&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt;&gt;&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Slava<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; E.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160225/9a53b3a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February 25, 2016 at 01:00:00pm</p></header><div class="content"><p>The fix should also be in the new Swift 2.2 snapshots Mish just posted, if you want to give that a try.<br></p><p>-Joe<br></p><p>&gt; On Feb 25, 2016, at 12:23 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Evan,<br>&gt; <br>&gt; The fix did not make it in time for beta 4 but it should be in the next seed.<br>&gt; <br>&gt; Slava<br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 10:07 AM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Slava,<br>&gt;&gt; <br>&gt;&gt; As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br>&gt;&gt; <br>&gt;&gt; Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br>&gt;&gt; <br>&gt;&gt; Let me know if there&#39;s more info I can provide.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; E.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 11:38 PM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Slava,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again!<br>&gt;&gt;&gt; Evan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Evan,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry for the inconvenience!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     let _workaround: ViewModel? = nil<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt;&gt;&gt;&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt;&gt;&gt;&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Slava<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt;&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; E.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160225/fb3afe55/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 29, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 25, 2016, at 4:19 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; The fix should also be in the new Swift 2.2 snapshots Mish just posted, if you want to give that a try.<br>&gt; <br>&gt; -Joe<br></p><p>Hi Joe,<br></p><p>Thanks a lot for the tip. I tried it using the Swift 2.2 snapshots from Feb. 24 in Xcode 7.3 beta 4 and can confirm that we are no longer able to trigger the crash using that version of the toolchain.<br></p><p>All the best,<br>Evan<br></p><p><br>&gt;&gt; On Feb 25, 2016, at 12:23 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Evan,<br>&gt;&gt; <br>&gt;&gt; The fix did not make it in time for beta 4 but it should be in the next seed.<br>&gt;&gt; <br>&gt;&gt; Slava<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 10:07 AM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Slava,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let me know if there&#39;s more info I can provide.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; E.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/f7b8eb13/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 29, 2016 at 04:00:00pm</p></header><div class="content"><p>Great! I&#39;ll let you know when I give the next beta a try.<br></p><p>Thanks for the update,<br>Evan<br></p><p><br>&gt; On Feb 25, 2016, at 3:23 PM, Slava Pestov &lt;spestov at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Evan,<br>&gt; <br>&gt; The fix did not make it in time for beta 4 but it should be in the next seed.<br>&gt; <br>&gt; Slava<br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 10:07 AM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Slava,<br>&gt;&gt; <br>&gt;&gt; As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br>&gt;&gt; <br>&gt;&gt; Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br>&gt;&gt; <br>&gt;&gt; Let me know if there&#39;s more info I can provide.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; E.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 11:38 PM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Slava,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again!<br>&gt;&gt;&gt; Evan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Evan,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry for the inconvenience!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     let _workaround: ViewModel? = nil<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt;&gt;&gt;&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt;&gt;&gt;&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Slava<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt;&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; E.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/bcc19521/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>New crash possibly related to generics &amp; ObjC object instantiation in Swift 2.2 betas?</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>March  2, 2016 at 11:00:00pm</p></header><div class="content"><p>Slava,<br></p><p>I am happy to report that the code in question no longer crashes as of the Xcode 7.3 beta 5 release!<br></p><p>Thanks a lot for shepherding this bugfix through the process.<br></p><p>All the best,<br>Evan<br></p><p><br></p><p>&gt; On Feb 29, 2016, at 4:25 PM, Evan Maloney &lt;emaloney at gilt.com&gt; wrote:<br>&gt; <br>&gt; Great! I&#39;ll let you know when I give the next beta a try.<br>&gt; <br>&gt; Thanks for the update,<br>&gt; Evan<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 25, 2016, at 3:23 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Evan,<br>&gt;&gt; <br>&gt;&gt; The fix did not make it in time for beta 4 but it should be in the next seed.<br>&gt;&gt; <br>&gt;&gt; Slava<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 10:07 AM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Slava,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As promised, I tried to reproduce the bug below (filed as rdar://problem/24592548 &lt;rdar://problem/24592548&gt;) once the new Xcode beta came out.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, under Xcode 7.3 beta 4 (7D152p), we&#39;re still seeing the crash.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let me know if there&#39;s more info I can provide.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; E.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 11:38 PM, Evan Maloney &lt;emaloney at gilt.com &lt;mailto:emaloney at gilt.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Slava,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for the quick reply. I&#39;m blown away at how accessible and responsive the Swift team has been on these mailing lists. Past experience has <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Anyway, we had 2 classes requiring the work-around, but once I plugged it in, the crashes went away. I&#39;m no longer able to trigger a crash.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When the next Xcode release comes out, I&#39;ll be sure to try it again--sans work-around--and I&#39;ll let you know how it goes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks again!<br>&gt;&gt;&gt;&gt; Evan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 9:30 PM, Slava Pestov &lt;spestov at apple.com &lt;mailto:spestov at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi Evan,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sorry for the inconvenience!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The problem appears when accessing stored properties of a generic subclass of an @objc class that itself has no generically-sized members.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In your case, the HorizontalScrollViewController has two generic parameters DataModel and ViewModel, and inherits from UIViewController, but it doesn’t have any members which are value types written in terms of DataModel or ViewModel.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As a workaround, you can add a dummy stored property whose size depends on a generic parameter — the simplest would be an Optional initialized to nil:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;     let _workaround: ViewModel? = nil<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I tried this with the app from the radar and it appears to make it past the point where it previously crashed.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ll hopefully have a fix checked in tonight. The underlying issue is that a combination of two features goes bad:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - a generic class can be instantiated multiple times, resulting in multiple classes getting registered with the @objc runtime<br>&gt;&gt;&gt;&gt;&gt; - the Objective-C runtime ‘slides’ instance variable offsets to handle resilient changes to the size of a base class<br>&gt;&gt;&gt;&gt;&gt; - Swift’s runtime (incorrectly) skips some logic to instead ‘slide’ per-concrete type field offsets if the class does not contain any generally-sized members<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, the generic_objc_subclass tests exercised instantiating a generic class multiple times, and the fixed-size case, but not both, so the regression came about when I refactored some code as part of implementing resilience (we can now have dynamically-sized members in non-generic classes, too, so a bunch of stuff in the runtime got moved around).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Slava<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I should have a fix ready shortly, but as a workaround, you might want to try <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 10, 2016, at 9:54 AM, Evan Maloney via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve spent many hours banging my head against this one, and so far have come up empty. I&#39;m wondering if anyone else is seeing the same issue.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We&#39;ve been experiencing a perplexing new crash in the Swift 2.2 betas shipped with Xcode 7.3 beta 3 and below. I should point out that the code works fine in Swift 2.1 &amp; 2.1.1 and we have a shipping app with many downloads and zero crashes of this kind occurring.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We&#39;ve got a UIViewController subclass implemented in Swift that uses two generics: a DataModel and a ViewModel. The view controller contains a collection view whose cells also take a generic DataModel. At the implementation level, both of these generics are supplied as Swift structs.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; At first, we were experiencing weird crashes during cell reuse within this view controller&#39;s collection view, so we turned on all the Diagnostic &gt; Memory Management checkboxes for the build scheme. Once we did this, the crash shifted earlier in the program execution. So we knew it couldn&#39;t be bad cell reuse, since now the crashing was occurring before any cells were even instantiated.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; When attempting to init() this UIViewController, we now see an EXC_BAD_ACCESS (code=1) within the init(). If we start commenting out various member variables, the crash shifts around. Sometimes the crash occurs on a simple var declaration. It&#39;s definitely not due to unwrapping a nil optional, since the crash occurs even when declaring a simple Int. For example, we added a single line as a test and the app crashes on this:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;     public var myInt = Int(3)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Based on this behavior, the crash seems to be related to the allocation of the memory of the UIViewController itself.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We tried running Instruments with the Zombie instrument. However, in the Xcode 7.3 betas, I am unable to get Instruments to successfully run *any* Swift application for longer than 2 seconds before it silently dies. It always stops with no message or any other indication that the app crashed.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A couple of us have developed a hunch it&#39;s related to generics somehow, since the only place we see the problem is the one place we&#39;re using generics at the UIViewController &amp; UICollectionViewCell level.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Unfortunately, the place this occurs in our app is deep inside the user experience, and requires a valid login and an established account to access. I&#39;ve tried to extract a test case, but have not yet been able to create a stand-alone project that reproduces the problem.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My concern is that even if we were to provide full source code to our app, it would be triaged down to the bottom since we don&#39;t have a decent test case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Has anyone else seen anything like this, where perfectly fine Swift 2.1/2.1.1 code now crashes inexplicably under Swift 2.2?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;m hoping we can find a way to supply a decent test case so this can get fixed before Swift 2.2 goes out the door.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; E.<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160302/71c4c578/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
