<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ac7b85ab3215a33f7d0017d186c00de?s=50"></div><header><strong>Two-for-Tuesday: Resettable Properties</strong> from <string>Patterson, Jason</string> &lt;jason.patterson at wsj.com&gt;<p>March 15, 2016 at 01:00:00pm</p></header><div class="content"><p>Indeed. I actually mention that in my proposal draft. The core problem<br>that I believe should be addressed is the mechanism that the Swift<br>importer applies to `null_resettable` Objective-C properties. Whether<br>or not Swift should support the feature is separate, but related,<br>which is why I drafted two proposals.<br></p><p>SE-0030 initially included &quot;out-of-band operations&quot; (such as reset<br>methods with syntax like `foo.name.[resettable].reset()`) but<br>ultimately removed them due to complexities involved:<br></p><p>&gt; It is useful to add out-of-band operations to a property that aren&#39;t normal members of its formal type, for instance, to cleara lazy property to be recomputed later, or to reset a property to an implementation-defined default value. This is useful, but it complicates the design of the feature.<br></p><p>I agree that the use case of resettable properties is somewhat<br>orthogonal to the goals of Property Behaviors (which, from what I<br>understand, was originated to subsume lazy, atomicity,<br>mutable-until-frozen, and other &quot;member access&quot; concerns into the<br>standard library) since it by nature requires an operation to reset<br>it. In other words, I feel these proposals are independent of<br>re-review of Property Behaviors.<br></p><p>The two proposals are to generate discussion on whether:<br></p><p>1. Is it a problem the way that `null_resettable` properties are<br>currently imported?<br>2. Are resettable properties a useful feature to bring to Swift?<br></p><p><br>Thanks,<br></p><p><br>-Jason<br></p><p><br></p><p><br>On Tue, Mar 15, 2016 at 12:01 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; Resettable properties are one of the use cases for property behaviors  There<br>&gt; was still dissent the last time it was brought to review, so a new version<br>&gt; is expected in the Swift 3 window.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 15 mars 2016 à 09:49:21, Patterson, Jason via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; Recently I noticed how `null_resettable` Objective-C properties were<br>&gt; imported into Swift. To recap, a `null_resettable` property in<br>&gt; Objective-C indicates that the getter returns a nonnull value, while<br>&gt; the setter is nullable:<br>&gt;<br>&gt; @property (nonatomic, nonnull, null_resettable) NSString *name;<br>&gt;<br>&gt; foo.name = @&quot;Bar&quot;;<br>&gt; foo.name = nil; // &quot;resets&quot; the property<br>&gt;<br>&gt;<br>&gt; Currently these are imported as implicitly unwrapped optionals (var<br>&gt; name: String!), which is the same as if they were `null_unspecified`.<br>&gt; I believe this can be improved.<br>&gt;<br>&gt; I&#39;ve drafted a proposal that would improve how these are imported. In<br>&gt; a nutshell, Swift would add an extra &quot;reset&quot; method to the imported<br>&gt; interface which would allow users to explicitly reset the property by<br>&gt; name. (The above example would be imported as `var name: String; func<br>&gt; resetName()`.) This would improve readability and allow the getter to<br>&gt; return a non-optional value.<br>&gt;<br>&gt; That proposal is here:<br>&gt;<br>&gt; https://github.com/patters/swift-evolution/blob/master/proposals/0000-importing-null_resettable.md<br>&gt;<br>&gt; However, I then wondered if this feature of Objective-C would be<br>&gt; advantageous to bring to Swift. The thought there is to allow Swift to<br>&gt; declare a property getter as a non-optional type, while allowing the<br>&gt; setter to take an optional type. While a syntactical change has more<br>&gt; cost to Swift, the benefit may outweigh that.<br>&gt;<br>&gt; There were a few ideas here but I ultimately settled on a new `set?`<br>&gt; operator. The proposal then details the usage and ramifications of<br>&gt; such a change. For example, the getter would continue to return `T`<br>&gt; while the type of `newValue` available in the setter becomes a `T?`.<br>&gt; There&#39;s a corresponding change to willSet clauses.<br>&gt;<br>&gt; That proposal is here:<br>&gt;<br>&gt; https://github.com/patters/swift-evolution/blob/master/proposals/0000-resettable-properties.md<br>&gt;<br>&gt; I think that both of these solve the problem in two different ways and<br>&gt; submit both for your discussion and consideration.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt;<br>&gt; Jason Patterson<br>&gt; @patters<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Two-for-Tuesday: Resettable Properties</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 16, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; SE-0030 initially included &quot;out-of-band operations&quot; (such as reset<br>&gt; methods with syntax like `foo.name.[resettable].reset()`) but<br>&gt; ultimately removed them due to complexities involved:<br>&gt; <br>&gt;&gt; It is useful to add out-of-band operations to a property that aren&#39;t normal members of its formal type, for instance, to cleara lazy property to be recomputed later, or to reset a property to an implementation-defined default value. This is useful, but it complicates the design of the feature.<br>&gt; <br>&gt; I agree that the use case of resettable properties is somewhat<br>&gt; orthogonal to the goals of Property Behaviors (which, from what I<br>&gt; understand, was originated to subsume lazy, atomicity,<br>&gt; mutable-until-frozen, and other &quot;member access&quot; concerns into the<br>&gt; standard library) since it by nature requires an operation to reset<br>&gt; it. In other words, I feel these proposals are independent of<br>&gt; re-review of Property Behaviors.<br></p><p>I think that&#39;s a slight misunderstanding of our process here. Where practicable, we usually break up large proposals into separate parts so that they can each be reviewed and implemented separately, particularly when a part of the design is underdeveloped or controversial. But that doesn&#39;t mean we&#39;ve removed the feature, just that it&#39;s being designed separately.<br></p><p>Though the out-of-band operations feature was subsetted out of that particular proposal, that removal was only temporary. The long term plan (last time I heard) was still to include that feature in some form.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
