<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Are API Design Guideline improvement discussions in scope for the Swift Evolution list and if not, where would they go?<br></p><p>For example, the current Swift API Design Guidelines follow these rules more or less.<br>Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>Seems to me the rules should actually be along the lines of:<br>Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>Are enhancements for API Design Guidelines an area for community involvement? Where would you start a discussion about the rules? Would modifications involve formal proposals?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/68ab9ed2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecdb231117dda838340bfcbb8873d28e?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Paul Cantrell</string> &lt;cantrell at pobox.com&gt;<p>January  5, 2016 at 03:00:00pm</p></header><div class="content"><p>I’ll second Erica on wanting a place to discuss the API guidelines. In general, I like their general approach and philosophy — very much so! — but I also have concerns about some of the details. For example, I totally agree with Erica’s suggestion that all methods with side effects should be verbs, not just ones that mutate the receiver.<br></p><p>You can read here a detailed writeup on the sticking points I hit trying to put the guidelines into practice on a real-world project:<br></p><p>https://gist.github.com/pcantrell/22a6564ca7d22789315b &lt;https://gist.github.com/pcantrell/22a6564ca7d22789315b&gt;<br></p><p>The acceptance rate for Apple-guideline-recommended changes come out at only about 50%.<br></p><p>I realize that guidelines are just guidelines, but that seems like a bit of an easy out if the guidelines doc is meant to help unify the style of disparate Swift libraries.<br></p><p>Cheers,<br></p><p>Paul<br></p><p><br>&gt; On Jan 5, 2016, at 2:44 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Are API Design Guideline improvement discussions in scope for the Swift Evolution list and if not, where would they go?<br>&gt; <br>&gt; For example, the current Swift API Design Guidelines follow these rules more or less.<br>&gt; Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt; Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt; Seems to me the rules should actually be along the lines of:<br>&gt; Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt; Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt; Are enhancements for API Design Guidelines an area for community involvement? Where would you start a discussion about the rules? Would modifications involve formal proposals?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/8ea37814/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>January  5, 2016 at 04:00:00pm</p></header><div class="content"><p>I agree - there are a few I&#39;d love to see discussed.<br></p><p>I also agree that I appreciate that they are there and so well thought out and presented<br></p><p>&gt; On Jan 5, 2016, at 4:26 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ll second Erica on wanting a place to discuss the API guidelines. In general, I like their general approach and philosophy — very much so! — but I also have concerns about some of the details. For example, I totally agree with Erica’s suggestion that all methods with side effects should be verbs, not just ones that mutate the receiver.<br>&gt; <br>&gt; You can read here a detailed writeup on the sticking points I hit trying to put the guidelines into practice on a real-world project:<br>&gt; <br>&gt; https://gist.github.com/pcantrell/22a6564ca7d22789315b<br>&gt; <br>&gt; The acceptance rate for Apple-guideline-recommended changes come out at only about 50%.<br>&gt; <br>&gt; I realize that guidelines are just guidelines, but that seems like a bit of an easy out if the guidelines doc is meant to help unify the style of disparate Swift libraries.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Paul<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 5, 2016, at 2:44 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Are API Design Guideline improvement discussions in scope for the Swift Evolution list and if not, where would they go?<br>&gt;&gt; <br>&gt;&gt; For example, the current Swift API Design Guidelines follow these rules more or less.<br>&gt;&gt; Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt;&gt; Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt;&gt; Seems to me the rules should actually be along the lines of:<br>&gt;&gt; Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;&gt; Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;&gt; Are enhancements for API Design Guidelines an area for community involvement? Where would you start a discussion about the rules? Would modifications involve formal proposals?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/9a0b756d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>January  5, 2016 at 11:00:00pm</p></header><div class="content"><p>Great discussion, thanks Erika for bringing this up.<br></p><p>Chiming in with a little question here. The API guidelines say:<br></p><p>&gt; Boolean methods and properties should read as assertions about the receiver<br></p><p>I know the document is about APIs but is this also recommended for local variables and constants?<br></p><p>Any thoughts?<br></p><p>Thanks!<br></p><p>R+<br></p><p>&gt; On 5 Jan 2016, at 22:57, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree - there are a few I&#39;d love to see discussed.<br>&gt; <br>&gt; I also agree that I appreciate that they are there and so well thought out and presented<br>&gt; <br>&gt; On Jan 5, 2016, at 4:26 PM, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I’ll second Erica on wanting a place to discuss the API guidelines. In general, I like their general approach and philosophy — very much so! — but I also have concerns about some of the details. For example, I totally agree with Erica’s suggestion that all methods with side effects should be verbs, not just ones that mutate the receiver.<br>&gt;&gt; <br>&gt;&gt; You can read here a detailed writeup on the sticking points I hit trying to put the guidelines into practice on a real-world project:<br>&gt;&gt; <br>&gt;&gt; https://gist.github.com/pcantrell/22a6564ca7d22789315b &lt;https://gist.github.com/pcantrell/22a6564ca7d22789315b&gt;<br>&gt;&gt; <br>&gt;&gt; The acceptance rate for Apple-guideline-recommended changes come out at only about 50%.<br>&gt;&gt; <br>&gt;&gt; I realize that guidelines are just guidelines, but that seems like a bit of an easy out if the guidelines doc is meant to help unify the style of disparate Swift libraries.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; Paul<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 5, 2016, at 2:44 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are API Design Guideline improvement discussions in scope for the Swift Evolution list and if not, where would they go?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, the current Swift API Design Guidelines follow these rules more or less.<br>&gt;&gt;&gt; Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt;&gt;&gt; Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt;&gt;&gt; Seems to me the rules should actually be along the lines of:<br>&gt;&gt;&gt; Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;&gt;&gt; Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;&gt;&gt; Are enhancements for API Design Guidelines an area for community involvement? Where would you start a discussion about the rules? Would modifications involve formal proposals?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/c1451c8d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  8, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 12:44 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Are API Design Guideline improvement discussions in scope for the Swift Evolution list and if not, where would they go?<br>&gt; <br>&gt; For example, the current Swift API Design Guidelines follow these rules more or less.<br>&gt; Use imperative verb phrases for mutating methods: x.reverse(), x.sort(), x.tweak()<br>&gt; Use noun phrases for non-mutating methods: x.distanceTo(...), idx.successor()<br>&gt; Seems to me the rules should actually be along the lines of:<br>&gt; Use verb phrases to declare procedural methods, whether or not they mutate an instance or just produce side effects: x.reverse(), x.sort(), x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt; Use noun phrases to describe values returned by a functional method: x.distanceTo(y), index.successor() (This admittedly leaves further issues around other functional methods, for example, seq.separatedBySequence(seq) and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt; Are enhancements for API Design Guidelines an area for community involvement? Where would you start a discussion about the rules? Would modifications involve formal proposals?<br></p><p>We’re going to bring the API Design Guidelines, standard library changes, and Clang importer changes up for a public review together. Most of the pieces of this effort are described by the Swift 3 API  Design Guidelines blog post &lt;https://swift.org/blog/swift-3-api-design/&gt;, but we have some polishing we want to do before initiating the review.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/42660c0d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>API Guideline bugs and enhancements</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 18, 2016 at 09:00:00am</p></header><div class="content"><p>The current API guideline suggests using xxx for mutating methods and<br>either xxxed or xxxing for non-mutating, functional methods. I would<br>suggest refine these rules to:<br></p><p>  1. For mutating methods and get and set properties use an imperative verb<br>phrase, e.g. `x.sort()`, use `xxx`.<br>  2. For others use:<br>    2.a. For eagerly evaluated, get-only properties or non-mutating<br>methods, e.g. `x.sorted()`, use `xxxed`. In particular in `let s =<br>x.sorted()`, `s` does not change if `x` subsequently changes.<br>    2.b. For lazily evaluated, get-only properties or non-mutating methods,<br>e.g. `x.mapping(...)`, use `xxxing`. In particular in `let m =<br>x.mapping()`, `m` does change if `x` changes.<br></p><p>I am proposing using the name to identify when the evaluation happens.<br></p><p>On Saturday, 9 January 2016, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 5, 2016, at 12:44 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Are API Design Guideline improvement discussions in scope for the Swift<br>&gt; Evolution list and if not, where would they go?<br>&gt;<br>&gt; For example, the current Swift API Design Guidelines follow these rules<br>&gt; more or less.<br>&gt;<br>&gt;    - Use imperative verb phrases for mutating methods: x.reverse(),<br>&gt;    x.sort(), x.tweak()<br>&gt;    - Use noun phrases for non-mutating methods: x.distanceTo(...),<br>&gt;    idx.successor()<br>&gt;<br>&gt; Seems to me the rules should actually be along the lines of:<br>&gt;<br>&gt;    - Use verb phrases to declare procedural methods, whether or not they<br>&gt;    mutate an instance or just produce side effects: x.reverse(), x.sort(),<br>&gt;    x.tweak(), x.perform(), x.dispatch(), x.send()<br>&gt;    - Use noun phrases to describe values returned by a functional method:<br>&gt;    x.distanceTo(y), index.successor() (This admittedly leaves further issues<br>&gt;    around other functional methods, for example, seq.separatedBySequence(seq)<br>&gt;    and  int.strideTo(other: Self, step:Self.Stride), etc. )<br>&gt;<br>&gt; Are enhancements for API Design Guidelines an area for community<br>&gt; involvement? Where would you start a discussion about the rules? Would<br>&gt; modifications involve formal proposals?<br>&gt;<br>&gt;<br>&gt; We’re going to bring the API Design Guidelines, standard library changes,<br>&gt; and Clang importer changes up for a public review together. Most of the<br>&gt; pieces of this effort are described by the Swift 3 API  Design Guidelines<br>&gt; blog post &lt;https://swift.org/blog/swift-3-api-design/&gt;, but we have some<br>&gt; polishing we want to do before initiating the review.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/2b6023b3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
