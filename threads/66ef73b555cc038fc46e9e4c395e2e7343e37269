<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 25, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160425/66ef7269/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 26, 2016 at 06:00:00am</p></header><div class="content"><p>Hello,<br></p><p>Here are two things to improve the proposal and make it more clear:<br></p><p>I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br></p><p>The History section looks irrelevant to me: the visible shape of a language does not have to reflect its inner implementation.<br></p><p>Gwendal Roué<br></p><p><br></p><p>&gt; Le 26 avr. 2016 à 06:22, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 25, 2016 at 10:00:00pm</p></header><div class="content"><p>On Apr 25, 2016, at 9:41 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Here are two things to improve the proposal and make it more clear:<br>&gt; <br>&gt; I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br></p><p>Fair enough.  This is one of many recent proposals which are about cleaning up minor inconsistencies in the language, not because they cause excessive practical usage problems, but because they are wrong for the long term shape of the language.<br></p><p>Swift 3 will necessarily be a majorly source breaking change, so we’re trying to pack other source breaking changes into it.  We almost certainly would not make a change like this in Swift 4 (where we will be much more adverse to source breaking changes), and would instead have to live with the inconsistency forever.  As such, this is a “now or never” sort of thing.  <br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 26, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; Le 26 avr. 2016 à 07:17, Chris Lattner &lt;clattner at apple.com&gt; a écrit :<br>&gt; <br>&gt; On Apr 25, 2016, at 9:41 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Here are two things to improve the proposal and make it more clear:<br>&gt;&gt; <br>&gt;&gt; I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br>&gt; <br>&gt; Fair enough.  This is one of many recent proposals which are about cleaning up minor inconsistencies in the language, not because they cause excessive practical usage problems, but because they are wrong for the long term shape of the language.<br></p><p>I was expecting something like that.<br></p><p>I personally have no problem with changes that the *language implementers* see as necessary. You know better, after all. I can imagine how the grammar inconsistencies we&#39;re talking about here belong to a general maintenance problem.<br></p><p>I&#39;ll just hope that Swift won&#39;t become too inflexible, and that you&#39;ll figure out a way to protect the warm feeling that brought early Swift users in. And I&#39;m targeting the &quot;should we require&quot; questions of the &quot;Related questions&quot; section of the proposal :-)<br></p><p>Gwendal<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 25, 2016 at 11:00:00pm</p></header><div class="content"><p>On Apr 25, 2016, at 10:48 PM, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt;&gt; Le 26 avr. 2016 à 07:17, Chris Lattner &lt;clattner at apple.com&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; On Apr 25, 2016, at 9:41 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Here are two things to improve the proposal and make it more clear:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br>&gt;&gt; <br>&gt;&gt; Fair enough.  This is one of many recent proposals which are about cleaning up minor inconsistencies in the language, not because they cause excessive practical usage problems, but because they are wrong for the long term shape of the language.<br>&gt; <br>&gt; I was expecting something like that.<br>&gt; <br>&gt; I personally have no problem with changes that the *language implementers* see as necessary. You know better, after all. I can imagine how the grammar inconsistencies we&#39;re talking about here belong to a general maintenance problem.<br>&gt; <br>&gt; I&#39;ll just hope that Swift won&#39;t become too inflexible, and that you&#39;ll figure out a way to protect the warm feeling that brought early Swift users in. And I&#39;m targeting the &quot;should we require&quot; questions of the &quot;Related questions&quot; section of the proposal :-)<br></p><p>I understand exactly what you mean.  Perhaps your concern is a result of the character of many of these recent proposals: because we’re trying to get things settled for Swift 3, we’re hyper-focused on front-loading the “things we want to take away”, rather than spending time on sugar and other things that make the language feel more nice.  The rationale for this approach is sound IMO (sugar can be added at any time later) but I can understand how it would feel like we’re &quot;taking away” without “giving anything back” in this respect.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>April 26, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Le 26 avr. 2016 à 08:07, Chris Lattner &lt;clattner at apple.com&gt; a écrit :<br>&gt; <br>&gt; On Apr 25, 2016, at 10:48 PM, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Le 26 avr. 2016 à 07:17, Chris Lattner &lt;clattner at apple.com&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Apr 25, 2016, at 9:41 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Here are two things to improve the proposal and make it more clear:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fair enough.  This is one of many recent proposals which are about cleaning up minor inconsistencies in the language, not because they cause excessive practical usage problems, but because they are wrong for the long term shape of the language.<br>&gt;&gt; <br>&gt;&gt; I was expecting something like that.<br>&gt;&gt; <br>&gt;&gt; I personally have no problem with changes that the *language implementers* see as necessary. You know better, after all. I can imagine how the grammar inconsistencies we&#39;re talking about here belong to a general maintenance problem.<br>&gt;&gt; <br>&gt;&gt; I&#39;ll just hope that Swift won&#39;t become too inflexible, and that you&#39;ll figure out a way to protect the warm feeling that brought early Swift users in. And I&#39;m targeting the &quot;should we require&quot; questions of the &quot;Related questions&quot; section of the proposal :-)<br>&gt; <br>&gt; I understand exactly what you mean.  Perhaps your concern is a result of the character of many of these recent proposals: because we’re trying to get things settled for Swift 3, we’re hyper-focused on front-loading the “things we want to take away”, rather than spending time on sugar and other things that make the language feel more nice.  The rationale for this approach is sound IMO (sugar can be added at any time later) but I can understand how it would feel like we’re &quot;taking away” without “giving anything back” in this respect.<br></p><p>Your sentences are truly relieving, because we not often read such a balanced view here. We all know St Exupery&#39;s famous sentence about perfect designs that have nothing else to take away. This does not mean stripping UX away, and requires a clear consciousness of the desired sugar. This is very difficult, I totally agree.<br></p><p>Gwendal<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>@Chris, I believe you should add your reply to the proposal itself.<br></p><p>On 26.04.2016 8:17, Chris Lattner via swift-evolution wrote:<br>&gt; On Apr 25, 2016, at 9:41 PM, Gwendal Roué via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Here are two things to improve the proposal and make it more clear:<br>&gt;&gt;<br>&gt;&gt; I&#39;d like the Motivation section to be much more explicit. I get the argument of ambiguity, OK, but I don&#39;t see the problems it creates. I personally did not have any trouble yet, and this section does not enlighten me. Do we create problems out of thin air, here?<br>&gt;<br>&gt; Fair enough.  This is one of many recent proposals which are about cleaning up minor inconsistencies in the language, not because they cause excessive practical usage problems, but because they are wrong for the long term shape of the language.<br>&gt;<br>&gt; Swift 3 will necessarily be a majorly source breaking change, so we’re trying to pack other source breaking changes into it.  We almost certainly would not make a change like this in Swift 4 (where we will be much more adverse to source breaking changes), and would instead have to live with the inconsistency forever.  As such, this is a “now or never” sort of thing.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>April 25, 2016 at 11:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br></p><p>I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br></p><p>I believe the proposal should be amended that the following should be the only allowable forms:<br></p><p>y = x.sorted { (lhs : Int, rhs : Int) -&gt; Bool in rhs &lt; lhs }<br>y = x.sorted { (lhs, rhs) in rhs &lt; lhs }<br>y = x.sorted { $1 &lt; $0 }<br></p><p>I’ve bolded the change above, today this is allowable:<br></p><p>y = x.sorted { lhs, rhs in rhs &lt; lhs }<br></p><p>I’ve read the argument about why it’s ok to elide the parens here, I simply disagree with the author’s premise that this is a structurally significant different form. Not requiring the parens for this parameter list begs the question why other forms require them and provides a similar ambiguity of whether the closure takes two parameters or a single tuple parameter from both of these valid syntaxes today:<br></p><p>y = x.sorted { lhs, rhs in rhs &lt; lhs }<br>y = x.sorted { (lhs, rhs) in rhs &lt; lhs }<br></p><p>I don’t see how this is fundamentally different than the example in the “Motivation” section:<br></p><p>(Int, Float) -&gt; Int // Takes two arguments, or takes one two-argument tuple?<br></p><p>While I will concede that `(lhs, rhs)` is not a valid tuple declaration, I’d still argue that it’s too subtle of a difference to be used a primary means of justification. If we are going to remove the ambiguity, let’s remove it for all parameter list scenarios.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Potentially.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I participated in the original discussion thread as well as tested out many different combinations function and closure syntax in the Swift Playground.<br></p><p>-David<br></p><p><br></p><p>&gt; On Apr 25, 2016, at 9:22 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/4788770d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>April 26, 2016 at 07:00:00am</p></header><div class="content"><p>[[iOS messageWithData:ideas] broadcast]<br></p><p>&gt; On 26 Apr 2016, at 07:28, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br>&gt; <br>&gt; I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br>&gt; <br>&gt; I believe the proposal should be amended that the following should be the only allowable forms:<br></p><p>Agreed, the exception for the parameter list in a closure declaration should be gone too potentially, I do not see a very convincing case why we should keep it. Does it solve some particular problem now in its current form?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/2d20a56f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>On 26.04.2016 9:38, Goffredo Marocchi via swift-evolution wrote:<br> &gt;<br> &gt; Agreed, the exception for the parameter list in a closure declaration<br> &gt; should be gone too potentially, I do not see a very convincing case why we<br> &gt; should keep it. Does it solve some particular problem now in its current <br>form?<br></p><p>Probably support. If we want to be clear about if parameter list is a tuple <br>or it is a list of values i.e. (Int,Int) -&gt; Void  vs  ((Int,Int)) -&gt; Void , <br>IMO we should be also clear about parameter list in a closure declaration..<br></p><p>But it seems right now it is not just about syntax:<br></p><p>func z1(block: (Int,Int) -&gt; Void) {<br>     block(1,2)<br>}<br></p><p>z1 { x, y in print(x,y)} // ok<br>z1 { x in print(x.0, x.1)} // what??<br>z1 { (x, y) in print(x, y)} // .. probably ok..<br></p><p>func z2(block: ((Int,Int)) -&gt; Void) {<br>     block((1,2))<br>}<br></p><p>z2 { x, y in print(x,y)}   // why ??<br>z2 { x in print(x.0, x.1)} // ok<br>z2 { (x, y) in print(x, y)} // hm.. ?<br>//z2 { ((x, y)) in print(x, y)}  // compilation error<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 5:56 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 26.04.2016 9:38, Goffredo Marocchi via swift-evolution wrote:<br>&gt; &gt;<br>&gt; &gt; Agreed, the exception for the parameter list in a closure declaration<br>&gt; &gt; should be gone too potentially, I do not see a very convincing case why we<br>&gt; &gt; should keep it. Does it solve some particular problem now in its current form?<br>&gt; <br>&gt; Probably support. If we want to be clear about if parameter list is a tuple or it is a list of values i.e. (Int,Int) -&gt; Void  vs  ((Int,Int)) -&gt; Void , IMO we should be also clear about parameter list in a closure declaration..<br>&gt; <br>&gt; But it seems right now it is not just about syntax:<br></p><p>Yes, closure expressions have other problems.  For example, if a closure expression contextually takes two parameters, it is invalid to use $0 without also using $1.  :-(<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 1:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 5:56 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On 26.04.2016 9:38, Goffredo Marocchi via swift-evolution wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed, the exception for the parameter list in a closure declaration<br>&gt;&gt;&gt; should be gone too potentially, I do not see a very convincing case why we<br>&gt;&gt;&gt; should keep it. Does it solve some particular problem now in its current form?<br>&gt;&gt; <br>&gt;&gt; Probably support. If we want to be clear about if parameter list is a tuple or it is a list of values i.e. (Int,Int) -&gt; Void  vs  ((Int,Int)) -&gt; Void , IMO we should be also clear about parameter list in a closure declaration..<br>&gt;&gt; <br>&gt;&gt; But it seems right now it is not just about syntax:<br>&gt; <br>&gt; Yes, closure expressions have other problems.  For example, if a closure expression contextually takes two parameters, it is invalid to use $0 without also using $1.  :-(<br></p><p>IIRC that restriction arose out of tuple splatting ambiguities, so we should be able to fix now that we&#39;ve done away with splatting (as another proposal, of course).<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 3:30 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 1:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 26, 2016, at 5:56 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 26.04.2016 9:38, Goffredo Marocchi via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agreed, the exception for the parameter list in a closure declaration<br>&gt;&gt;&gt;&gt; should be gone too potentially, I do not see a very convincing case why we<br>&gt;&gt;&gt;&gt; should keep it. Does it solve some particular problem now in its current form?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Probably support. If we want to be clear about if parameter list is a tuple or it is a list of values i.e. (Int,Int) -&gt; Void  vs  ((Int,Int)) -&gt; Void , IMO we should be also clear about parameter list in a closure declaration..<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But it seems right now it is not just about syntax:<br>&gt;&gt; <br>&gt;&gt; Yes, closure expressions have other problems.  For example, if a closure expression contextually takes two parameters, it is invalid to use $0 without also using $1.  :-(<br>&gt; <br>&gt; IIRC that restriction arose out of tuple splatting ambiguities, so we should be able to fix now that we&#39;ve done away with splatting (as another proposal, of course).<br></p><p>The last time I looked at this, it was due to implementation limitations, not due to concern with tuple splat.  For example, we reject:<br></p><p>func f(a : (Int, Int, Int) -&gt; Int) {}<br>f { $1+$0 }<br></p><p>Even though tuple splat can’t be at work here.  This should clearly be fixed, I’m just pointing out that it is orthogonal to the specific 0066 syntax proposal.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br>&gt; <br>&gt; I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br>&gt; <br>&gt; I believe the proposal should be amended that the following should be the only allowable forms:<br></p><p>Hi David,<br></p><p>To be clear, this proposal is not about changing closure expressions, it was just a FAQ, and the section at the end is simply my personal opinion.  Changing closure expression syntax would be a separate proposal.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/d8278acd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 25, 2016, at 11:28 PM, David Owens II via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; I reluctantly agree with the proposal with the following caveat: I do not agree with the rationale to support being able to choose to omit the () for the parameter list of the closure declaration.<br>&gt;&gt; <br>&gt;&gt; I see no cohesive argument that says that the parens should be required in some cases but not in others when talking about parameter lists.<br>&gt;&gt; <br>&gt;&gt; I believe the proposal should be amended that the following should be the only allowable forms:<br>&gt; <br>&gt; Hi David,<br>&gt; <br>&gt; To be clear, this proposal is not about changing closure expressions, it was just a FAQ, and the section at the end is simply my personal opinion.  Changing closure expression syntax would be a separate proposal.<br></p><p>My argument is changing the parameter list in one context but not the other is only solving one of the potentially ambiguous use cases instead of the general case. My opinion is they should be changed as the same time if they are going to be changed at all.<br></p><p>-David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/1ff1d91b/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>April 26, 2016 at 10:00:00am</p></header><div class="content"><p>My evaluation mostly depends on the degree of simplification that can be archived, so it&#39;s fine for me to let those decide who know best.<br>Skipping parentheses is convenient, but requiring them won&#39;t be that painful — and in case the latter statement is wrong, my general impression is we are in a &quot;slim-down&quot; phase now, and re-adding something back in Swift 3+ won&#39;t break anything.<br></p><p>Nonetheless, I like the thought of &quot;all functions take a single parameter&quot;, so I&#39;m curious about the history of this deprecated principle.<br>It is relevant to many topics on the list, and I&#39;ve never seen a detailed explanation about the pros and cons:<br>Instead of removing tuple splat, we could as well talk about discarding varargs and inout-parameters… (I don&#39;t think default args and internal/external labels are showstoppers here).<br></p><p>Tino<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 26, 2016 at 04:00:00pm</p></header><div class="content"><p>+1 from me. But IMO we need to discuss the question regarding parentheses <br>for arguments in closure declaration.<br></p><p>On 26.04.2016 7:22, Douglas Gregor via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0066 &quot;Standardize function type argument syntax to require<br>&gt; parentheses&quot; begins now and runs through May 2, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review<br>&gt; manager. When replying, please try to keep the proposal link at the top of<br>&gt; the message:<br>&gt;<br>&gt;     Proposal link:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>&gt;<br>&gt;     Reply text<br>&gt;<br>&gt;         Other replies<br>&gt;<br>&gt;<br>&gt;           &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;           goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;   * What is your evaluation of the proposal?<br>&gt;   * Is the problem being addressed significant enough to warrant a change<br>&gt;     to Swift?<br>&gt;   * Does this proposal fit well with the feel and direction of Swift?<br>&gt;   * If you have used other languages or libraries with a similar feature,<br>&gt;     how do you feel that this proposal compares to those?<br>&gt;   * How much effort did you put into your review? A glance, a quick<br>&gt;     reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>A somewhat reluctant +1.  I like the sugar but Chris makes a good case about the ambiguities and the move away from functional tradition.  I am a bit sad about the need for parentheses but it seems like maybe it&#39;s for the best.  <br></p><p>I also must admit that increased consistency of adding the parentheses will probably make the language a bit easier to learn for those not coming from a functional background.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>It cleans up function type syntax to match other recent changes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes, especially Swift 3 direction.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I really like the very clean syntax of functional languages which is why I am a little bit disappointed to see us add what looks like clutter when seen from a functional perspective.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Participated in the original thread, read the proposal and all replies, and gave some thought to the balance of aesthetics and clarity (especially removing ambiguity).<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/21d833cf/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>April 27, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>-10<br>strongly against it. I can&#39;t see that it would create any ambiguities to not use parens. In all cases, I can see the meaning of a function type, e.g. Int -&gt; String is a function that takes an Int and produces a String; (Int) -&gt; String doesn&#39;t look better to me. Float -&gt; Float looks like a mathematical function, but (Float) -&gt; Float just looks strange.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don&#39;t see a problem, so NO.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, because in most places Swift allows omitting unneeded syntax, e.g. one can write { $0 + $1 } instead of {a,b in a+b}. It&#39;s not always the case that shorter=better, but I cannot imagine how I would explain the reason for the (parenthesis requirement) to someone who does not know anything about programming language theory. And the general rule that &quot;all function argument lists should be surrounded by parentheses&quot; feels arbitrary. I think an ordinary language user doesn&#39;t even have a concept of an &quot;argument list&quot;, but a concept of an &quot;argument declaration list&quot; and a concept of a &quot;one-arg function&quot; and a concept of a &quot;two-arg function&quot;, and no names for any of this stuff.<br></p><p>&quot;Why do we need parens around here now?&quot; - &quot;Because it&#39;s more *consistent* that way&quot;<br>&quot;Why don&#39;t we have milk for the coffee anymore?&quot; - &quot;Because it&#39;s more *consistent* that way. We have only one type of coffee now.&quot; - &quot;haha&quot; ;)<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I wouldn&#39;t call it a &quot;feature&quot;. I know only one language that uses a similar (function-type-syntax-) style, and that is Haskell. Haskell doesn&#39;t require any parentheses, except for disambiguating the parse tree. I know Swift and Haskell are quite different, but moving away from functional programming is a non-goal for me; there must be a better reason for justifying the proposal.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read the proposal, and all mails on the Swift evolution list (regarding the proposal), and I really tried to see the advantages of the proposal, but I still cannot see them. It doesn&#39;t matter though, because most people on this mailing list seem to like it.<br></p><p>The only semi-convincing argument I remember was that it would simplify the grammar. Making the development experience for the language designers nicer has some value, of course, but I hope there will be a better way to solve this issue.<br></p><p>-Michael<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 26, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 26, 2016, at 3:07 PM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I can&#39;t see that it would create any ambiguities to not use parens.<br></p><p>() is also used in type syntax for tuples, so without this requirement, (Int, Int) -&gt; T is ambiguous between having two Int arguments or having one tuple argument.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fa5f52f699e07a98fefcf30fb95354?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>James Richard</string> &lt;ketzu at me.com&gt;<p>April 27, 2016 at 07:00:00am</p></header><div class="content"><p>+1.<br></p><p>I’ve given this a lot of thought. I always put parentheses in, so this wouldn’t really affect me. Bigger picture though I thought back on what made us not require self usage, and I feel like this proposal could be rejected for similar reasons. However, I’ve never been confused by the self syntax, but not including parenthesis has led to some mixups when reading an API. I’m probably not the only one that has happened to.<br></p><p><br>&gt; On Apr 25, 2016, at 9:22 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/ecee091b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>April 27, 2016 at 11:00:00pm</p></header><div class="content"><p>I’m going to play Devil’s advocate here and ask why not just pull out the parens for function types?<br></p><p>Int, Int -&gt; Int // Two argument function type<br>(Int, Int) -&gt; Int // Single tuple argument function type<br></p><p>vs<br></p><p>(Int, Int) -&gt; Int // Two argument function type<br>((Int, Int)) -&gt; Int // Single tuple argument function type<br></p><p>I’ll admit that<br></p><p>let x: Int, Int -&gt; Int <br></p><p>looks okay, but <br></p><p>let x: arg1: Int, arg2: Int -&gt; Int<br></p><p>does not look great compared to<br></p><p>let x: (arg1: Int, arg2: Int) -&gt; Int<br></p><p><br>However, I don’t think it’s an inconsistent rule to require parenthesis when argument labels are specified. Indeed, this behavior is perfectly consistent with current closure syntax.  e.g. { x, y -&gt; Int in /* code */ }<br></p><p>Named tuples would be:<br></p><p>let x: ((arg1: Int, arg2: Int)) -&gt; Int<br></p><p>Which has the double parens, but this is a more infrequent situation.<br></p><p>Tyler<br></p><p><br>&gt; On Apr 25, 2016, at 9:22 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0066 &quot;Standardize function type argument syntax to require parentheses&quot; begins now and runs through May 2, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/783eea59/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>April 28, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md&gt;<br>&gt; What is your evaluation of the proposal?<br></p><p>-1, I&#39;m mildly against but against.<br></p><p>In light of the observation (http://permalink.gmane.org/gmane.comp.lang.swift.evolution/15577 &lt;http://permalink.gmane.org/gmane.comp.lang.swift.evolution/15577&gt;) that we don&#39;t need Swift&#39;s type system to distinguish between function arity and a singular tuple argument, I don&#39;t think it&#39;s a good idea to add parentheses to the game.<br></p><p>Instead, I propose (in the above mail) to extend the notion of function name to always cover its argument labels.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p><br>No. (Even in the current state of things, I don&#39;t think we should require the parentheses except maybe to disambiguate tuples.)<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p><br>When it comes to the core team&#39;s idea of function types, I don&#39;t have a good sense of direction where you want to take the argument list. However, I don&#39;t think introducing (or canonicalising) a new pseudo type for function argument lists is a good direction for Swift to take, as it would later make higher-level programming demand even more complex syntaxes to deal with the said function types (I&#39;ll take C++ as an alerting example).<br></p><p>As shown, we can represent a function&#39;s argument list as an unlabelled n-tuple (including n=1), and doing so can come with no loss in generality nor added ambiguity.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Haskell only has unary functions and functions extensively use currying (`A -&gt; B -&gt; R`). But you can also pass arguments in a tuple if you seriously don&#39;t want currying (`(A, B) -&gt; R`). Like in Swift, parentheses are required together with the comma to create tuples. A type like `(A) -&gt; B` is allowed but synonymous to `A -&gt; B`. A crucial difference to Swift is that Haskell&#39;s functions are more like Swift&#39;s function variables (which is what I call the identifier you bind a closure to), with only a base name; whereas Swift cleverly uses argument labels to increase legibility at the call site.<br></p><p>Scala is much like Haskell in this regard, while currying isn&#39;t that extensive, it also leaves the parentheses optional (and often omitted) around single-type argument lists.<br></p><p>In C++, the syntax for n-argument functions gets crazy quickly, especially when the return type is also a function. What gets even more crazy is the (variadic) template code needed to program in terms of functions. And C++ also doesn&#39;t deal with argument labels!<br></p><p>This proposal feels to me like a tiny step towards C++&#39;s direction. Not harmful but unnecessary.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>In-depth.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/0392872e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 28, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br></p><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I think this change is overly fussy, but not the end of the world.<br></p><p>I enjoy this convenience, but I can live without it. I hope that, when the dust settles from all our parameter changes, we can reintroduce it in some form.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It seems insignificant to me, but I support small syntax clean-ups in general.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Arguably it does, at least for the current parameter-handling retrenchment.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated in previous discussion.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0066: Standardize function type argument syntax to require parentheses</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May  5, 2016 at 10:00:00pm</p></header><div class="content"><p>- What is your evaluation of the proposal?<br></p><p>I don&#39;t like it but +1. The possible ambiguity is somewhat compelling. I<br>actually think that, if this is accepted, it should be applied to closures<br>as well.<br></p><p><br>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br></p><p>I am not sure.<br></p><p>   - Does this proposal fit well with the feel and direction of Swift?<br></p><p>I am not sure<br></p><p>   - If you have used other languages or libraries with a similar feature,<br>   how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br></p><p>I read it when it first showed up and have thought about it since while<br>writing and reading swift.<br></p><p>On Thu, Apr 28, 2016 at 4:19 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0066-standardize-function-type-syntax.md<br>&gt;<br>&gt; &gt;       • What is your evaluation of the proposal?<br>&gt;<br>&gt; I think this change is overly fussy, but not the end of the world.<br>&gt;<br>&gt; I enjoy this convenience, but I can live without it. I hope that, when the<br>&gt; dust settles from all our parameter changes, we can reintroduce it in some<br>&gt; form.<br>&gt;<br>&gt; &gt;       • Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>&gt; It seems insignificant to me, but I support small syntax clean-ups in<br>&gt; general.<br>&gt;<br>&gt; &gt;       • Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Arguably it does, at least for the current parameter-handling retrenchment.<br>&gt;<br>&gt; &gt;       • If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; N/A.<br>&gt;<br>&gt; &gt;       • How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; Participated in previous discussion.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/39b20bab/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
