<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e40d3058defa1eaaa61ed5aa88d2be5?s=50"></div><header><strong>Besides pi, include also e as a builtin mathematical constant into floats</strong> from <string>Björn Forster</string> &lt;bjoern.forster at googlemail.com&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>In SE-0067: Enhanced Floating Point Protocols<br>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt;<br>is<br>stated that pi will be a built in constant from Swift 3 onwards.<br>Is there a specific reason why pi as a constant will be included but not e?<br>e is also ubiquitous in scientific, engineering and economic calculations.<br>I seems odd to me to include pi but then not e as well. Also Python<br>provides both pi and e. Shouldn&#39;t Swift provide also at least both pi and e<br>as constants for its floating point types?<br>It is also not nice if different numerical packages for swift will come up<br>all with their own different definitions of e. I think Swift 3 should use<br>the opportunity to get this thing right from the beginning and provided<br>both pi AND e.<br></p><p>Is there a new proposal necessary to still get e as a built in constant<br>into Swift 3?<br></p><p>Kind Regards,<br>Björn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/0304d22b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Besides pi, include also e as a builtin mathematical constant into floats</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 6:12 AM, Björn Forster via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In SE-0067: Enhanced Floating Point Protocols &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt; is stated that pi will be a built in constant from Swift 3 onwards.<br>&gt; Is there a specific reason why pi as a constant will be included but not e? e is also ubiquitous in scientific, engineering and economic calculations. I seems odd to me to include pi but then not e as well. Also Python provides both pi and e. Shouldn&#39;t Swift provide also at least both pi and e as constants for its floating point types? <br>&gt; It is also not nice if different numerical packages for swift will come up all with their own different definitions of e. I think Swift 3 should use the opportunity to get this thing right from the beginning and provided both pi AND e. <br>&gt; <br>&gt; Is there a new proposal necessary to still get e as a built in constant into Swift 3? <br></p><p>I think this thread will answer that question for you:<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/22200/focus=22466<br></p><p>&gt; This was discussed as part of SE-0067.<br>&gt; <br>&gt; The consensus was that pi deserved special treatment, as it is used in general-purpose code an order of magnitude more often than the all other constants combined.  I don’t think that anyone argued against it’s inclusion.<br>&gt; – Steve<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/c40483d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Besides pi, include also e as a builtin mathematical constant into floats</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>July  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 10:05 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 6:12 AM, Björn Forster via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In SE-0067: Enhanced Floating Point Protocols &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md&gt; is stated that pi will be a built in constant from Swift 3 onwards.<br>&gt;&gt; Is there a specific reason why pi as a constant will be included but not e? e is also ubiquitous in scientific, engineering and economic calculations. I seems odd to me to include pi but then not e as well. Also Python provides both pi and e. Shouldn&#39;t Swift provide also at least both pi and e as constants for its floating point types?<br>&gt;&gt; It is also not nice if different numerical packages for swift will come up all with their own different definitions of e. I think Swift 3 should use the opportunity to get this thing right from the beginning and provided both pi AND e.<br>&gt;&gt; <br>&gt;&gt; Is there a new proposal necessary to still get e as a built in constant into Swift 3?<br>&gt; <br>&gt; I think this thread will answer that question for you:<br>&gt; http://thread.gmane.org/gmane.comp.lang.swift.evolution/22200/focus=22466 &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/22200/focus=22466&gt;<br>That only is about tau, which is a much more controversial operator. Unfortunately, I wasn’t able to find the discussion of pi or E in the archives (but neither pi nor e are very searchable)<br></p><p>In general, the line for mathematical functions appears to have been set pretty high for inclusion in SE-0067, focusing instead on IEEE 754 capabilities and general design/naming. There are a number of features missing from a standard math library such as the ability to do trigonometric and hyperbolic operations, exponential and logarithmic operations, and so on. I am not sure what criteria determined where this line was drawn. I suspect it was trying to get to a point of just additive changes.<br></p><p>But for all I know, pi may have been included just so that people didn’t use π in math extension libraries ;-)<br></p><p>-DW<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/76a45cf7/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/76a45cf7/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Besides pi, include also e as a builtin mathematical constant into floats</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 2:33 PM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That only is about tau, which is a much more controversial operator. Unfortunately, I wasn’t able to find the discussion of pi or E in the archives (but neither pi nor e are very searchable)<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160411/015021.html<br></p><p>&gt; In general, the line for mathematical functions appears to have been set pretty high for inclusion in SE-0067, focusing instead on IEEE 754 capabilities and general design/naming. There are a number of features missing from a standard math library such as the ability to do trigonometric and hyperbolic operations, exponential and logarithmic operations, and so on. I am not sure what criteria determined where this line was drawn. I suspect it was trying to get to a point of just additive changes.<br></p><p>That’s exactly right.<br></p><p>I expect that math functions and constants will eventually make up a math protocol, separate from FloatingPoint.  For the short-term, that niche is filled by the C standard library.  `pi` is so frequently used that we made an exception for it.<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/04c4b1b7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
