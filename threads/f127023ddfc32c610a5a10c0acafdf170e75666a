<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e734178c34abfc2c481e797a491dd2b?s=50"></div><header><strong>buildbot configuration + etc</strong> from <string>Travis Tilley</string> &lt;ttilley at gmail.com&gt;<p>December 14, 2015 at 11:00:00pm</p></header><div class="content"><p>Is there any documentation somewhere on what the exact commands are that<br>the buildbot CI performs and how the packages on swift.org are created?<br></p><p>I&#39;ve noticed that:<br></p><p>1) LLDB doesn&#39;t compile on either OSX or ubuntu 15 via the normal script<br>for various reasons (codesign on OSX, no idea on ubuntu) in the default<br>configuration. This seems highly counter-intuitive.<br></p><p>2) The buildbot presets don&#39;t have sane defaults and I can&#39;t find any<br>documentation on what &quot;sane&quot; might mean for those builds.<br></p><p>3) I still can&#39;t build the full suite using the following command (which,<br>again, may or may not be sane):<br></p><p>nice ./swift/utils/build-script \<br>&gt;   --preset=buildbot_osx_package \<br>&gt;   installable_package=/tmp/swift.tar.gz \<br>&gt;<br>&gt; install_destdir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt; \<br>&gt;<br>&gt; install_toolchain_dir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14.xctoolchain<br>&gt; \<br>&gt;<br>&gt; install_symroot=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt; \<br>&gt;   symbols_package=/tmp/swift-symbols.tar.gz \<br>&gt;   darwin_toolchain_bundle_identifier=org.swift.20151214 \<br>&gt;   darwin_toolchain_display_name=20151214 \<br>&gt;   darwin_toolchain_xctoolchain_name=swift darwin_toolchain_version=swift<br></p><p><br>​All that I actually -want- to do is start xcode using a freshly built<br>swift toolchain. That is it. I don&#39;t even need any of the SDKs other than<br>OSX built. But the build directory install structure doesn&#39;t have anything<br>like what `​launch-with-toolchain` appears to expect...<br></p><p>Not sure where i&#39;m going wrong. Please feel free to tell me to RTFM if<br>there is a FM to read.<br></p><p><br>-Travis Tilley<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/f127666a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>buildbot configuration + etc</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 14, 2015 at 08:00:00pm</p></header><div class="content"><p>+Mishal Awadah, Mishal Shah<br></p><p>On Mon, Dec 14, 2015 at 8:04 PM, Travis Tilley via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Is there any documentation somewhere on what the exact commands are that<br>&gt; the buildbot CI performs and how the packages on swift.org are created?<br>&gt;<br>&gt; I&#39;ve noticed that:<br>&gt;<br>&gt; 1) LLDB doesn&#39;t compile on either OSX or ubuntu 15 via the normal script<br>&gt; for various reasons (codesign on OSX, no idea on ubuntu) in the default<br>&gt; configuration. This seems highly counter-intuitive.<br>&gt;<br>&gt; 2) The buildbot presets don&#39;t have sane defaults and I can&#39;t find any<br>&gt; documentation on what &quot;sane&quot; might mean for those builds.<br>&gt;<br>&gt; 3) I still can&#39;t build the full suite using the following command (which,<br>&gt; again, may or may not be sane):<br>&gt;<br>&gt; nice ./swift/utils/build-script \<br>&gt;&gt;   --preset=buildbot_osx_package \<br>&gt;&gt;   installable_package=/tmp/swift.tar.gz \<br>&gt;&gt;<br>&gt;&gt; install_destdir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt; \<br>&gt;&gt;<br>&gt;&gt; install_toolchain_dir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14.xctoolchain<br>&gt;&gt; \<br>&gt;&gt;<br>&gt;&gt; install_symroot=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt; \<br>&gt;&gt;   symbols_package=/tmp/swift-symbols.tar.gz \<br>&gt;&gt;   darwin_toolchain_bundle_identifier=org.swift.20151214 \<br>&gt;&gt;   darwin_toolchain_display_name=20151214 \<br>&gt;&gt;   darwin_toolchain_xctoolchain_name=swift darwin_toolchain_version=swift<br>&gt;<br>&gt;<br>&gt; ​All that I actually -want- to do is start xcode using a freshly built<br>&gt; swift toolchain. That is it. I don&#39;t even need any of the SDKs other than<br>&gt; OSX built. But the build directory install structure doesn&#39;t have anything<br>&gt; like what `​launch-with-toolchain` appears to expect...<br>&gt;<br>&gt; Not sure where i&#39;m going wrong. Please feel free to tell me to RTFM if<br>&gt; there is a FM to read.<br>&gt;<br>&gt;<br>&gt; -Travis Tilley<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/2c5cf883/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dbc48a135881e122fea26cf27760d11a?s=50"></div><header><strong>buildbot configuration + etc</strong> from <string>Mish Awadah</string> &lt;mawadah at apple.com&gt;<p>December 14, 2015 at 08:00:00pm</p></header><div class="content"><p>I’m sorry for the experience Travis, but this is certainly one of our pain points. There’s a lot at play and we haven’t finished setting up our public CI either. Here’s what I do locally to build a toolchain on OS X:<br></p><p>function build_osx_package() {                                                                                                                                                        <br>                                                                                                                                                                                       <br>    YEAR=$(date +&quot;%Y&quot;)                                                                                                                                                                <br>    MONTH=$(date +&quot;%m&quot;)                                                                                                                                                               <br>    DAY=$(date +&quot;%d&quot;)                                                                                                                                                                 <br>    TOOLCHAIN_VERSION=&quot;swift-2.2-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;                                                                                                                  <br>    ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;                                                                                                                                <br>    ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;                                                                                                                                         <br>    SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;                                                                                                                             <br>    BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;                                                                                                                               <br>    DISPLAY_NAME=&quot;Swift 2.2 Development Snapshot&quot;                                                                                                                                     <br>    TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;                                                                                                                                             <br>                                                                                                                                                                                       <br>    SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;                                                                                                                                                    <br>    SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;                                                                                                                                               <br>    SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;                                                                                                                                 <br>    SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;                                                                                                                              <br>    SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;                                                                                                                          <br>    SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;                                                                         <br>    SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;                                                                                                                                       <br>                                                                                                                                                                                       <br>    ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=&quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIF\<br>T_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=&quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_n\<br>ame=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;                                                           <br>}<br></p><p>It should work. If not, please file a bug with your output and configuration and let us know about it. <br></p><p>- mish<br></p><p>&gt; On Dec 14, 2015, at 8:32 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; +Mishal Awadah, Mishal Shah<br>&gt; <br>&gt; On Mon, Dec 14, 2015 at 8:04 PM, Travis Tilley via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; Is there any documentation somewhere on what the exact commands are that the buildbot CI performs and how the packages on swift.org &lt;http://swift.org/&gt; are created?<br>&gt; <br>&gt; I&#39;ve noticed that:<br>&gt; <br>&gt; 1) LLDB doesn&#39;t compile on either OSX or ubuntu 15 via the normal script for various reasons (codesign on OSX, no idea on ubuntu) in the default configuration. This seems highly counter-intuitive.<br>&gt; <br>&gt; 2) The buildbot presets don&#39;t have sane defaults and I can&#39;t find any documentation on what &quot;sane&quot; might mean for those builds.<br>&gt; <br>&gt; 3) I still can&#39;t build the full suite using the following command (which, again, may or may not be sane):<br>&gt; <br>&gt; nice ./swift/utils/build-script \<br>&gt;   --preset=buildbot_osx_package \<br>&gt;   installable_package=/tmp/swift.tar.gz \<br>&gt;   install_destdir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/ \<br>&gt;   install_toolchain_dir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14.xctoolchain \<br>&gt;   install_symroot=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/ \<br>&gt;   symbols_package=/tmp/swift-symbols.tar.gz \<br>&gt;   darwin_toolchain_bundle_identifier=org.swift.20151214 \<br>&gt;   darwin_toolchain_display_name=20151214 \<br>&gt;   darwin_toolchain_xctoolchain_name=swift darwin_toolchain_version=swift<br>&gt; <br>&gt; ​All that I actually -want- to do is start xcode using a freshly built swift toolchain. That is it. I don&#39;t even need any of the SDKs other than OSX built. But the build directory install structure doesn&#39;t have anything like what `​launch-with-toolchain` appears to expect...<br>&gt; <br>&gt; Not sure where i&#39;m going wrong. Please feel free to tell me to RTFM if there is a FM to read.<br>&gt; <br>&gt; <br>&gt; -Travis Tilley<br>&gt; <br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/8818796a/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e734178c34abfc2c481e797a491dd2b?s=50"></div><header><strong>buildbot configuration + etc</strong> from <string>Travis Tilley</string> &lt;ttilley at gmail.com&gt;<p>December 15, 2015 at 12:00:00am</p></header><div class="content"><p>Wait... are you sure that&#39;s the appropriate configuration? Shouldn&#39;t<br>the xctoolchain destination be in /Library/Developer/Toolchains/ rather<br>than the xcode directory proper? Or is the actual end destination handled<br>entirely by `toolchain-installer&#39;?<br></p><p><br>Only somewhat related: SRC_DIR isn&#39;t defined, so I have my version looking<br>like this so far (and will add toolchain-installer afterwards<br>after verifying the install and figuring out how things work there).<br></p><p><br>function build_osx_package() { YEAR=$(date +&quot;%Y&quot;) MONTH=$(date +&quot;%m&quot;)<br>DAY=$(date +&quot;%d&quot;) TOOLCHAIN_VERSION=&quot;swift-2.2-SNAPSHOT-${YEAR}-${MONTH}-<br>${DAY}-a&quot; ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot; ARCHIVE=&quot;<br>${TOOLCHAIN_VERSION}-osx.tar.gz&quot; SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}<br>-osx-symbols.tar.gz&quot; BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>DISPLAY_NAME=&quot;Swift 2.2 Development Snapshot&quot; TOOLCHAIN_NAME=&quot;<br>${TOOLCHAIN_VERSION}&quot; SRC_DIR=&quot;$(pwd)&quot; SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot; SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/<br>${ARCHIVE}&quot; SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>SWIFT_TOOLCHAIN_DIR=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/<br>${TOOLCHAIN_NAME}.xctoolchain&quot; SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; \<br>install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; \ installable_package=&quot;<br>${SWIFT_INSTALLABLE_PACKAGE}&quot; \ install_toolchain_dir=&quot;<br>${SWIFT_TOOLCHAIN_DIR}&quot; \ install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; \<br>symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; \ darwin_toolchain_bundle_identifier=&quot;<br>${BUNDLE_IDENTIFIER}&quot; \ darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot; \<br>darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; \<br>darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot; } build_osx_package<br></p><p><br></p><p>-Travis Tilley<br></p><p><br>On Mon, Dec 14, 2015 at 11:42 PM, Mish Awadah &lt;mawadah at apple.com&gt; wrote:<br></p><p>&gt; I’m sorry for the experience Travis, but this is certainly one of our pain<br>&gt; points. There’s a lot at play and we haven’t finished setting up our public<br>&gt; CI either. Here’s what I do locally to build a toolchain on OS X:<br>&gt;<br>&gt; *function* build_osx_package() {<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;     YEAR=$(*date* +&quot;%Y&quot;)<br>&gt;<br>&gt;<br>&gt;     MONTH=$(*date* +&quot;%m&quot;)<br>&gt;<br>&gt;<br>&gt;     DAY=$(*date* +&quot;%d&quot;)<br>&gt;<br>&gt;<br>&gt;     TOOLCHAIN_VERSION=&quot;swift-2.2-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt;<br>&gt;<br>&gt;     ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt;<br>&gt;<br>&gt;     ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt;<br>&gt;<br>&gt;     SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt;<br>&gt;<br>&gt;     BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt;<br>&gt;<br>&gt;     DISPLAY_NAME=&quot;Swift 2.2 Development Snapshot&quot;<br>&gt;<br>&gt;<br>&gt;     TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;     SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt;<br>&gt;<br>&gt;     SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt;<br>&gt;<br>&gt;     SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt;<br>&gt;<br>&gt;     SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt;<br>&gt;<br>&gt;     SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt;<br>&gt;<br>&gt;     SWIFT_TOOLCHAIN_DIR=<br>&gt; &quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt;<br>&gt;     SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;     ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot;<br>&gt; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=<br>&gt; &quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIF\<br>&gt; T_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot;<br>&gt; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=<br>&gt; &quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_n\<br>&gt; ame=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=<br>&gt; &quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;<br>&gt; }<br>&gt;<br>&gt; It should work. If not, please file a bug with your output and<br>&gt; configuration and let us know about it.<br>&gt;<br>&gt; - mish<br>&gt;<br>&gt; On Dec 14, 2015, at 8:32 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt; +Mishal Awadah, Mishal Shah<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 8:04 PM, Travis Tilley via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Is there any documentation somewhere on what the exact commands are that<br>&gt;&gt; the buildbot CI performs and how the packages on swift.org are created?<br>&gt;&gt;<br>&gt;&gt; I&#39;ve noticed that:<br>&gt;&gt;<br>&gt;&gt; 1) LLDB doesn&#39;t compile on either OSX or ubuntu 15 via the normal script<br>&gt;&gt; for various reasons (codesign on OSX, no idea on ubuntu) in the default<br>&gt;&gt; configuration. This seems highly counter-intuitive.<br>&gt;&gt;<br>&gt;&gt; 2) The buildbot presets don&#39;t have sane defaults and I can&#39;t find any<br>&gt;&gt; documentation on what &quot;sane&quot; might mean for those builds.<br>&gt;&gt;<br>&gt;&gt; 3) I still can&#39;t build the full suite using the following command (which,<br>&gt;&gt; again, may or may not be sane):<br>&gt;&gt;<br>&gt;&gt; nice ./swift/utils/build-script \<br>&gt;&gt;&gt;   --preset=buildbot_osx_package \<br>&gt;&gt;&gt;   installable_package=/tmp/swift.tar.gz \<br>&gt;&gt;&gt;   install_destdir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt;&gt; \<br>&gt;&gt;&gt;   install_toolchain_dir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14.xctoolchain<br>&gt;&gt;&gt; \<br>&gt;&gt;&gt;   install_symroot=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt;&gt; \<br>&gt;&gt;&gt;   symbols_package=/tmp/swift-symbols.tar.gz \<br>&gt;&gt;&gt;   darwin_toolchain_bundle_identifier=org.swift.20151214 \<br>&gt;&gt;&gt;   darwin_toolchain_display_name=20151214 \<br>&gt;&gt;&gt;   darwin_toolchain_xctoolchain_name=swift darwin_toolchain_version=swift<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ​All that I actually -want- to do is start xcode using a freshly built<br>&gt;&gt; swift toolchain. That is it. I don&#39;t even need any of the SDKs other than<br>&gt;&gt; OSX built. But the build directory install structure doesn&#39;t have anything<br>&gt;&gt; like what `​launch-with-toolchain` appears to expect...<br>&gt;&gt;<br>&gt;&gt; Not sure where i&#39;m going wrong. Please feel free to tell me to RTFM if<br>&gt;&gt; there is a FM to read.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -Travis Tilley<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151215/b6434409/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>buildbot configuration + etc</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>December 15, 2015 at 11:00:00pm</p></header><div class="content"><p>I&#39;m also trying to figure out more about the build process. I don&#39;t even<br>understand in what context the buld_osx_package function should be (should<br>it be just in it&#39;s own file or in some context where eg SRC_DIR and<br>BUILD_NUMBER are defined)?<br></p><p>What I want to do most of the times is just to try out the current master,<br>so I do:<br>swift/utils/update-checkout -a<br></p><p>And then I want to build something like the dev snapshots, but I don&#39;t want<br>to wait for too long, so I want to build only for os x (skip ios, tvos,<br>watchos) and no tests, and as I want to see any improvements in the<br>optimizer I want --no-assertions, --no-swift-stdlib-assertions.<br></p><p>I&#39;ve not managed to make enough sense out of looking at the code and<br>comments of the build tools to feel confident in writing my own<br>build-preset or anything like that.<br></p><p>In order to get something that worked, I looked at what build_osx_package<br>preset expanded into, and then modified those flags according to the above<br>and passed that to build-script.<br></p><p>I suppose a lot of people are able to figure out a more sane/proper way to<br>do this, but I can&#39;t without more documentation / instructions ...<br></p><p><br></p><p>On Tue, Dec 15, 2015 at 6:45 AM, Travis Tilley via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Wait... are you sure that&#39;s the appropriate configuration? Shouldn&#39;t<br>&gt; the xctoolchain destination be in /Library/Developer/Toolchains/ rather<br>&gt; than the xcode directory proper? Or is the actual end destination handled<br>&gt; entirely by `toolchain-installer&#39;?<br>&gt;<br>&gt;<br>&gt; Only somewhat related: SRC_DIR isn&#39;t defined, so I have my version looking<br>&gt; like this so far (and will add toolchain-installer afterwards<br>&gt; after verifying the install and figuring out how things work there).<br>&gt;<br>&gt;<br>&gt; function build_osx_package() { YEAR=$(date +&quot;%Y&quot;) MONTH=$(date +&quot;%m&quot;)<br>&gt; DAY=$(date +&quot;%d&quot;) TOOLCHAIN_VERSION=&quot;swift-2.2-SNAPSHOT-${YEAR}-${MONTH}-<br>&gt; ${DAY}-a&quot; ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot; ARCHIVE=&quot;<br>&gt; ${TOOLCHAIN_VERSION}-osx.tar.gz&quot; SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}<br>&gt; -osx-symbols.tar.gz&quot; BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt; DISPLAY_NAME=&quot;Swift 2.2 Development Snapshot&quot; TOOLCHAIN_NAME=&quot;<br>&gt; ${TOOLCHAIN_VERSION}&quot; SRC_DIR=&quot;$(pwd)&quot; SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt; SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot; SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/<br>&gt; ${ARCHIVE}&quot; SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt; SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt; SWIFT_TOOLCHAIN_DIR=<br>&gt; &quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}<br>&gt; .xctoolchain&quot; SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt; ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot; \<br>&gt; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; \ installable_package=&quot;<br>&gt; ${SWIFT_INSTALLABLE_PACKAGE}&quot; \ install_toolchain_dir=&quot;<br>&gt; ${SWIFT_TOOLCHAIN_DIR}&quot; \ install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot; \<br>&gt; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; \ darwin_toolchain_bundle_identifier=<br>&gt; &quot;${BUNDLE_IDENTIFIER}&quot; \ darwin_toolchain_display_name=&quot;${DISPLAY_NAME}&quot;<br>&gt; \ darwin_toolchain_xctoolchain_name=&quot;${TOOLCHAIN_NAME}&quot; \<br>&gt; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot; } build_osx_package<br>&gt;<br>&gt;<br>&gt;<br>&gt; -Travis Tilley<br>&gt;<br>&gt;<br>&gt; On Mon, Dec 14, 2015 at 11:42 PM, Mish Awadah &lt;mawadah at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m sorry for the experience Travis, but this is certainly one of our<br>&gt;&gt; pain points. There’s a lot at play and we haven’t finished setting up our<br>&gt;&gt; public CI either. Here’s what I do locally to build a toolchain on OS X:<br>&gt;&gt;<br>&gt;&gt; *function* build_osx_package() {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     YEAR=$(*date* +&quot;%Y&quot;)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     MONTH=$(*date* +&quot;%m&quot;)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     DAY=$(*date* +&quot;%d&quot;)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     TOOLCHAIN_VERSION=&quot;swift-2.2-SNAPSHOT-${YEAR}-${MONTH}-${DAY}-a&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     ARCHIVE_DIR=&quot;${TOOLCHAIN_VERSION}-${BUILD_NUMBER}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx.tar.gz&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SYM_ARCHIVE=&quot;${TOOLCHAIN_VERSION}-osx-symbols.tar.gz&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     BUNDLE_IDENTIFIER=&quot;org.swift.${YEAR}${MONTH}${DAY}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     DISPLAY_NAME=&quot;Swift 2.2 Development Snapshot&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     TOOLCHAIN_NAME=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_SOURCE_ROOT=&quot;${SRC_DIR}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_BUILD_ROOT=&quot;${SRC_DIR}/build&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_INSTALLABLE_PACKAGE=&quot;${SRC_DIR}/${ARCHIVE}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_INSTALL_DIR=&quot;${SRC_DIR}/swift-nightly-install&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_INSTALL_SYMROOT=&quot;${SRC_DIR}/swift-nightly-symroot&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     SWIFT_TOOLCHAIN_DIR=<br>&gt;&gt; &quot;/Applications/Xcode.app/Contents/Developer/Toolchains/${TOOLCHAIN_NAME}.xctoolchain&quot;<br>&gt;&gt;<br>&gt;&gt;     SYMBOLS_PACKAGE=&quot;${SRC_DIR}/${SYM_ARCHIVE}&quot;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     ./swift/utils/build-script --preset=&quot;buildbot_osx_package&quot;<br>&gt;&gt; install_destdir=&quot;${SWIFT_INSTALL_DIR}&quot; installable_package=<br>&gt;&gt; &quot;${SWIFT_INSTALLABLE_PACKAGE}&quot; install_toolchain_dir=&quot;${SWIF\<br>&gt;&gt; T_TOOLCHAIN_DIR}&quot; install_symroot=&quot;${SWIFT_INSTALL_SYMROOT}&quot;<br>&gt;&gt; symbols_package=&quot;${SYMBOLS_PACKAGE}&quot; darwin_toolchain_bundle_identifier=<br>&gt;&gt; &quot;${BUNDLE_IDENTIFIER}&quot; darwin_toolchain_display_n\<br>&gt;&gt; ame=&quot;${DISPLAY_NAME}&quot; darwin_toolchain_xctoolchain_name=<br>&gt;&gt; &quot;${TOOLCHAIN_NAME}&quot; darwin_toolchain_version=&quot;${TOOLCHAIN_VERSION}&quot;<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; It should work. If not, please file a bug with your output and<br>&gt;&gt; configuration and let us know about it.<br>&gt;&gt;<br>&gt;&gt; - mish<br>&gt;&gt;<br>&gt;&gt; On Dec 14, 2015, at 8:32 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; +Mishal Awadah, Mishal Shah<br>&gt;&gt;<br>&gt;&gt; On Mon, Dec 14, 2015 at 8:04 PM, Travis Tilley via swift-dev &lt;<br>&gt;&gt; swift-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Is there any documentation somewhere on what the exact commands are that<br>&gt;&gt;&gt; the buildbot CI performs and how the packages on swift.org are created?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;ve noticed that:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1) LLDB doesn&#39;t compile on either OSX or ubuntu 15 via the normal script<br>&gt;&gt;&gt; for various reasons (codesign on OSX, no idea on ubuntu) in the default<br>&gt;&gt;&gt; configuration. This seems highly counter-intuitive.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2) The buildbot presets don&#39;t have sane defaults and I can&#39;t find any<br>&gt;&gt;&gt; documentation on what &quot;sane&quot; might mean for those builds.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3) I still can&#39;t build the full suite using the following command<br>&gt;&gt;&gt; (which, again, may or may not be sane):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; nice ./swift/utils/build-script \<br>&gt;&gt;&gt;&gt;   --preset=buildbot_osx_package \<br>&gt;&gt;&gt;&gt;   installable_package=/tmp/swift.tar.gz \<br>&gt;&gt;&gt;&gt;   install_destdir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt;&gt;&gt; \<br>&gt;&gt;&gt;&gt;   install_toolchain_dir=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14.xctoolchain<br>&gt;&gt;&gt;&gt; \<br>&gt;&gt;&gt;&gt;   install_symroot=/Library/Developer/Toolchains/swift-2.2-SNAPSHOT-2015-12-14/<br>&gt;&gt;&gt;&gt; \<br>&gt;&gt;&gt;&gt;   symbols_package=/tmp/swift-symbols.tar.gz \<br>&gt;&gt;&gt;&gt;   darwin_toolchain_bundle_identifier=org.swift.20151214 \<br>&gt;&gt;&gt;&gt;   darwin_toolchain_display_name=20151214 \<br>&gt;&gt;&gt;&gt;   darwin_toolchain_xctoolchain_name=swift<br>&gt;&gt;&gt;&gt; darwin_toolchain_version=swift<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ​All that I actually -want- to do is start xcode using a freshly built<br>&gt;&gt;&gt; swift toolchain. That is it. I don&#39;t even need any of the SDKs other than<br>&gt;&gt;&gt; OSX built. But the build directory install structure doesn&#39;t have anything<br>&gt;&gt;&gt; like what `​launch-with-toolchain` appears to expect...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not sure where i&#39;m going wrong. Please feel free to tell me to RTFM if<br>&gt;&gt;&gt; there is a FM to read.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Travis Tilley<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151215/38b6d098/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
