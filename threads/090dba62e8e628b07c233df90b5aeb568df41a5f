<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0151519b715c340a083004d1faf05ec0?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Chris Williams</string> &lt;chwilliam at gmail.com&gt;<p>May 31, 2016 at 01:00:00am</p></header><div class="content"><p>Honestly what I’ve wanted for quite some time is just reasonable default parameter names. $0/$1… or any variation on index-based arguments is terrible for comprehension, and I feel like I’m being lazy and hurting whoever has to look at the code next every time I type out something like say &lt;A [String: String]?.map { $0 } instead of .map{ key, value in key }. If the Dictionary type’s map function could define “key” and “value” as parameter types it would go a long way in terms or readability, in my opinion.<br></p><p>The index-based shorthand is rough to skim if you’re not well versed in the types your dealing with a a given time.<br></p><p>&gt; Thanks for your feedback.<br>&gt; <br>&gt; I personally never found that this “$n” convention was “Swift-like”... but it’s true that a “$n” is easier to spot than a “.n”, and I got used to also.<br>&gt; <br>&gt; However, I realised how much this was disturbing for newcomers, when explaining closure shorthand argument names to a classroom of computer science students (aged 21) discovering Swift.<br>&gt; <br>&gt; The feedback some gave me, during the course, was quite surprisingly strong and negative about this “$n” convention. This convinced me to write this proposal : for newcomers, the “$n” zero-based is something wrong.<br>&gt; <br>&gt; I understand that association between tuples and function parameters in Swift is to be removed, but, in this case, as we have no parameters at all, I thought this was a distinct enough situation.<br>&gt; <br>&gt; As suggested, considering this is a kind of compiler magic, using #0, #1 instead, may indeed be a better alternative.<br>&gt; <br>&gt; I’m still waiting some feedback before writing an official proposal.<br>&gt; <br>&gt; &gt; On 30 May 2016, at 19:12, Leonardo Pessoa&lt;me at lmpessoa.com&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; Fréderic, the idea and reasoning are good and do make sense but I&#39;m<br>&gt; &gt; not 100% go on this. When I started using this syntax I felt like I<br>&gt; &gt; was back in PHP but once I got used it&#39;s ok. I don&#39;t see anything<br>&gt; &gt; wrong that justifies the change in syntax. Looking at your examples I<br>&gt; &gt; even think it&#39;s easier to spot &quot;$n&quot; in my code than &quot;.n&quot;.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; On 30 May 2016 at 13:44, Frédéric Blondiau&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; &gt; Hello,<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I was thinking about this, and would like to get some feedback before making my first proposal.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Best regards,<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Fred.<br>&gt; &gt; &gt; ---<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Shorthand Argument Renaming<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Introduction<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Swift automatically provides shorthand argument names to inline closures which cleverly allows us to write<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; reversed = names.sort( { $0&gt;$1 } )<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I would suggest to use another syntax, using these new “names”<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; reversed = names.sort( { .0&gt;.1 } )<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Motivation<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; The $n notation is generally used with positional parameters using one-based numbering, $1 referring to argument 1; $2, to argument 2... with a special meaning for $0 (could be the name of the function, or the full list of parameters).<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; This $n notation is often handy, but feels strange in Swift... like imported from UNIX scripting (but here zero-based, anyway).<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Proposed solution<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; The .n notation is more Swift-like — as used to access Tuple members, for example.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Detailed design<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Today, .0 or .1 (as any .n&#39;s) are refused by the compiler, as being not valid floating point literals.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; I’m not a compiler expert, but eventually fetching this error inside a closure body could easily be translated into accepting this new syntax.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; There can’t be conflict with other shorthands (like accessing static members using dot notation) as members can’t consist of only digits characters.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Impact on existing code<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; $n need to be rewritten .n<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Alternatives considered<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Create a default argument named “arguments” (like “error” in catch, “newValue” in setters or “oldValue” in a a didSet observer) accessed like a Tuple<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; reversed = names.sort( { arguments.0&gt;arguments.1 } )<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; but this is (of course) much less convenient.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Proposal] Shorthand Argument Renaming</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>June  1, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; Am 31.05.2016 um 10:14 schrieb Chris Williams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Honestly what I’ve wanted for quite some time is just reasonable default parameter names. $0/$1… or any variation on index-based arguments is terrible for comprehension, and I feel like I’m being lazy and hurting whoever has to look at the code next every time I type out something like say &lt;A [String: String]?.map { $0 } instead of .map{ key, value in key }.<br></p><p>So, just write the latter.<br></p><p>&gt; If the Dictionary type’s map function could define “key” and “value” as parameter types it would go a long way in terms or readability, in my opinion.<br></p><p>The map function does not impose names on the arguments of the literal closure. You can choose them freely.<br></p><p>-Thorsten<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
