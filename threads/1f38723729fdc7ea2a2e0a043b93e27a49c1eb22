<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri Jul 22 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 22, 2016, at 3:15 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I wrote that subclassability is not an important element of safety<br>&gt;&gt; **independent of overriding**.  If you don&#39;t allow any overriding,<br>&gt;&gt; your code is always “resilient” enough to handle subclassing.<br>&gt;<br>&gt; Code can make assumptions about a type having a fixed set of<br>&gt; subclasses known at compile time:<br>&gt;<br>&gt;     switch foo {<br>&gt;         case is YinFoo:<br>&gt;             ...<br>&gt;         case is YangFoo:<br>&gt;             ...<br>&gt;         default:<br>&gt;             fatalError(&quot;only two kinds of Foo known&quot;)<br>&gt;     }<br>&gt;<br>&gt; Granted, code like this is usually a sign of a flawed<br>&gt; design. Reasonable uses for the “fixed, known set of subtypes” pattern<br>&gt; are rare.<br>&gt;<br>&gt; Design quality questions aside, however, it is not strictly true that<br>&gt; preventing all member overrides guarantees that code is resilient to<br>&gt; unexpected subclassing.<br></p><p>Point taken.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e98dd28e8af453c8c06c2536e913fc5?s=50"></div><header><strong>[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</strong> from <string>Wang LiMing</string> &lt;uomb at outlook.com&gt;<p>July 23, 2016 at 05:00:00am</p></header><div class="content"><p>There’s two case :<br>   1. Bug from customer’s code<br>   2. Bug from library/Framwork’s code<br></p><p>If we fix the case 1(forbidden subclass/overriding), means the library/framework’s author must fix case 2<br></p><p>If want customer fix the case 2(allow subclass/overriding), means we can’t fix the case 1<br></p><p>What’s our target? case 1 or case 2?<br>Case 1 depends on the decision of case 2(customer fix or author fix)<br></p><p>It’s big problem that can’t solved by language features.<br></p><p><br>I think our target should be a language with better features that can improve the quality of code/product.<br></p><p><br></p><p>在 2016年7月23日，上午2:39，Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br></p><p><br>on Fri Jul 22 2016, Paul Cantrell &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>On Jul 22, 2016, at 3:15 AM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I wrote that subclassability is not an important element of safety<br>**independent of overriding**.  If you don&#39;t allow any overriding,<br>your code is always “resilient” enough to handle subclassing.<br></p><p>Code can make assumptions about a type having a fixed set of<br>subclasses known at compile time:<br></p><p>   switch foo {<br>       case is YinFoo:<br>           ...<br>       case is YangFoo:<br>           ...<br>       default:<br>           fatalError(&quot;only two kinds of Foo known&quot;)<br>   }<br></p><p>Granted, code like this is usually a sign of a flawed<br>design. Reasonable uses for the “fixed, known set of subtypes” pattern<br>are rare.<br></p><p>Design quality questions aside, however, it is not strictly true that<br>preventing all member overrides guarantees that code is resilient to<br>unexpected subclassing.<br></p><p>Point taken.<br></p><p>--<br>Dave<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160723/8e5c1c70/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 23, 2016 at 09:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 23 Jul 2016, at 06:00, Wang LiMing via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; There’s two case :<br>&gt;    1. Bug from customer’s code<br>&gt;    2. Bug from library/Framwork’s code<br>&gt; <br>&gt; If we fix the case 1(forbidden subclass/overriding), means the library/framework’s author must fix case 2<br>&gt; <br>&gt; If want customer fix the case 2(allow subclass/overriding), means we can’t fix the case 1<br>&gt; <br>&gt; What’s our target? case 1 or case 2? <br></p><p>Beside input validation, proper use of failable initialisers, and exceptions... how and why would you target case 1 further as a library author practically? It sounds like something useful in some cases and noble in intention but also a bit of a slippery slope to patronising your users... you may as well write the whole code for then ;). Seriously though, what would your reasons be for case 1?<br></p><p>&gt; Case 1 depends on the decision of case 2(customer fix or author fix)<br>&gt; <br>&gt; It’s big problem that can’t solved by language features.<br>&gt; <br>&gt; <br>&gt; I think our target should be a language with better features that can improve the quality of code/product.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; 在 2016年7月23日，上午2:39，Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jul 22 2016, Paul Cantrell &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:15 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wrote that subclassability is not an important element of safety<br>&gt;&gt;&gt;&gt; **independent of overriding**.  If you don&#39;t allow any overriding,<br>&gt;&gt;&gt;&gt; your code is always “resilient” enough to handle subclassing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Code can make assumptions about a type having a fixed set of<br>&gt;&gt;&gt; subclasses known at compile time:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    switch foo {<br>&gt;&gt;&gt;        case is YinFoo:<br>&gt;&gt;&gt;            ...<br>&gt;&gt;&gt;        case is YangFoo:<br>&gt;&gt;&gt;            ...<br>&gt;&gt;&gt;        default:<br>&gt;&gt;&gt;            fatalError(&quot;only two kinds of Foo known&quot;)<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Granted, code like this is usually a sign of a flawed<br>&gt;&gt;&gt; design. Reasonable uses for the “fixed, known set of subtypes” pattern<br>&gt;&gt;&gt; are rare.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Design quality questions aside, however, it is not strictly true that<br>&gt;&gt;&gt; preventing all member overrides guarantees that code is resilient to<br>&gt;&gt;&gt; unexpected subclassing.<br>&gt;&gt; <br>&gt;&gt; Point taken.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160723/e8b80e10/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e98dd28e8af453c8c06c2536e913fc5?s=50"></div><header><strong>[swift-evolution-announce] [Review #3] SE-0117: Allow distinguishing between public access and public overridability</strong> from <string>Wang LiMing</string> &lt;uomb at outlook.com&gt;<p>July 23, 2016 at 05:00:00am</p></header><div class="content"><p>There’s two case :<br>   1. Bug from customer’s code<br>   2. Bug from library/Framwork’s code<br></p><p>If we fix the case 1(forbidden subclass/overriding), means the library/framework’s author must fix case 2<br></p><p>If want customer fix the case 2(allow subclass/overriding), means we can’t fix the case 1<br></p><p>What’s our target? case 1 or case 2?<br>Case 1 depends on the decision of case 2(customer fix or author fix)<br></p><p>It’s big problem that can’t solved by language features.<br></p><p><br>I think our target should be a language with better features that can improve the quality of code/product.<br></p><p><br></p><p>在 2016年7月23日，上午2:39，Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; 写道：<br></p><p><br>on Fri Jul 22 2016, Paul Cantrell &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>On Jul 22, 2016, at 3:15 AM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>I wrote that subclassability is not an important element of safety<br>**independent of overriding**.  If you don&#39;t allow any overriding,<br>your code is always “resilient” enough to handle subclassing.<br></p><p>Code can make assumptions about a type having a fixed set of<br>subclasses known at compile time:<br></p><p>   switch foo {<br>       case is YinFoo:<br>           ...<br>       case is YangFoo:<br>           ...<br>       default:<br>           fatalError(&quot;only two kinds of Foo known&quot;)<br>   }<br></p><p>Granted, code like this is usually a sign of a flawed<br>design. Reasonable uses for the “fixed, known set of subtypes” pattern<br>are rare.<br></p><p>Design quality questions aside, however, it is not strictly true that<br>preventing all member overrides guarantees that code is resilient to<br>unexpected subclassing.<br></p><p>Point taken.<br></p><p>--<br>Dave<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160723/2745e7dd/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
