<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>protocols, optional, and public</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>August 26, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;m wrapping CLLocationManager (and its delegate), and I&#39;m trying to create a protocol like this. This is directly cribbed from CLLocationManagerDelegate.<br></p><p>---------------<br>public<br>protocol<br>LZLocationManagerDelegate : NSObjectProtocol<br>{<br>    optional public func locationManager(manager: LZLocationManager, didUpdateLocations locations: [CLLocation])<br>}<br>---------------<br></p><p>But I get these errors:<br></p><p>LZLocationManager.swift:16:5: &#39;optional&#39; can only be applied to members of an @objc protocol<br>LZLocationManager.swift:70:41: Cannot use optional chaining on non-optional value of type &#39;(LZLocationManager, didUpdateLocations: [CLLocation]) -&gt; ()&#39;<br></p><p>Apple&#39;s version compiles flawlessly (comments removed):<br></p><p>---------------<br>public protocol CLLocationManagerDelegate : NSObjectProtocol {<br>    @available(iOS 6.0, *)<br>    optional public func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation])<br></p><p>    // ...remainder removed for brevity<br>}<br>---------------<br></p><p>Adding @objc fixes it, but I would have thought NSObjectProtocol implied that. Also, when I look at the Apple Swift exports, it&#39;s not there (is that a limitation of the exported view?).<br></p><p>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>protocols, optional, and public</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>August 27, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;<br>&gt; “Optional requirements are available so that you can write code that<br>&gt; interoperates with Objective-C. Both the protocol and the optional<br>&gt; requirement must be marked with the @objc attribute. ”<br>&gt;<br></p><p><br>from: Apple Inc. “The Swift Programming Language (Swift 3 Beta)”。 iBooks.<br>&gt; https://itun.es/us/k5SW7.l<br></p><p><br>I think the  CLLocationManagerDelegate you saw was converted from<br>Objective-C, which means it was not written in Swift directly. It was just<br>the counterpart called interface. In swift, interface is automatically<br>generated. It is not the source file.<br></p><p>For example, you can create a new project, open a swift file, open<br>assistant window (option+command+enter). Add a protocol in your swift file.<br></p><p>public protocol UnmanagedCopy {<br>&gt;     func unmanagedCopy() -&gt; Self<br>&gt; }<br></p><p><br>Build your project. Reload your interface file in the assistant window by<br>changing to other files and back. You can see the counterpart is<br></p><p>public protocol UnmanagedCopy {<br>&gt;<br></p><p>    public func unmanagedCopy() -&gt; Self<br>&gt; }<br></p><p><br>You should aware that though there is a `public func` in interface. You can<br>not do it in protocol definition in source file.<br></p><p>Further more, I also test a new protocol Foo.<br></p><p>@objc public protocol Foo {<br>&gt;     @objc optional func bar()<br>&gt; }<br></p><p><br>It turns out the counterpart is not as my expectation. The @objc remains.<br></p><p> @objc public protocol Foo {<br>&gt;     @objc optional public func bar()<br>&gt; }<br></p><p><br>Since my testing code was written in Swift, I thought the reason of that<br>was because the interface generated from Objective-C code was not identical<br>as from Swift. For an interface file generated from Objective-C, the source<br>code was definitely working in Objective-C. So the interface file was for<br>Swift only, which means there was no need to apply those restrictions.<br></p><p>Zhaoxin<br></p><p>On Sat, Aug 27, 2016 at 8:52 AM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m wrapping CLLocationManager (and its delegate), and I&#39;m trying to<br>&gt; create a protocol like this. This is directly cribbed from<br>&gt; CLLocationManagerDelegate.<br>&gt;<br>&gt; ---------------<br>&gt; public<br>&gt; protocol<br>&gt; LZLocationManagerDelegate : NSObjectProtocol<br>&gt; {<br>&gt;     optional public func locationManager(manager: LZLocationManager,<br>&gt; didUpdateLocations locations: [CLLocation])<br>&gt; }<br>&gt; ---------------<br>&gt;<br>&gt; But I get these errors:<br>&gt;<br>&gt; LZLocationManager.swift:16:5: &#39;optional&#39; can only be applied to members of<br>&gt; an @objc protocol<br>&gt; LZLocationManager.swift:70:41: Cannot use optional chaining on<br>&gt; non-optional value of type &#39;(LZLocationManager, didUpdateLocations:<br>&gt; [CLLocation]) -&gt; ()&#39;<br>&gt;<br>&gt; Apple&#39;s version compiles flawlessly (comments removed):<br>&gt;<br>&gt; ---------------<br>&gt; public protocol CLLocationManagerDelegate : NSObjectProtocol {<br>&gt;     @available(iOS 6.0, *)<br>&gt;     optional public func locationManager(manager: CLLocationManager,<br>&gt; didUpdateLocations locations: [CLLocation])<br>&gt;<br>&gt;     // ...remainder removed for brevity<br>&gt; }<br>&gt; ---------------<br>&gt;<br>&gt; Adding @objc fixes it, but I would have thought NSObjectProtocol implied<br>&gt; that. Also, when I look at the Apple Swift exports, it&#39;s not there (is that<br>&gt; a limitation of the exported view?).<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160827/72a7da68/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
