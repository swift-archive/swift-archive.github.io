<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 25, 2016 at 11:00:00am</p></header><div class="content"><p>on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt; &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;     Hello Swift community,<br>&gt;<br>&gt;     The review of &quot;A New Model for Collections and Indices&quot; begins now and runs<br>&gt;     through April 18th. The proposal is available here:<br>&gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;     Reviews are an important part of the Swift evolution process. All reviews<br>&gt;     should be sent to the swift-evolution mailing list at:<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     or, if you would like to keep your feedback private, directly to the review<br>&gt;     manager.<br>&gt;<br>&gt; A quick update: the core team met to discuss this. They agreed to accept it with<br>&gt; some naming-related revisions to the proposal (in response to community<br>&gt; feedback). Dave is organizing this feedback, and I’ll send out the formal<br>&gt; announcement when that is ready.<br></p><p>The final revisions are reflected in the latest version of the<br>proposal:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br></p><p>Summary:<br></p><p>* We decided to take Shawn Erickson&#39;s excellent suggestion<br>  &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt; to<br>  use “location” uniformly for index movement, so instead of<br>  successor(i) and predecessor(i) we have location(after: i) and<br>  location(before: i).<br></p><p>* Since Brent Royal-Gordon pointed out<br>  &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com&gt;<br>  that two of the three proposed Range protocols would likely disappear<br>  in future updates, we took another look at all of them.  Finding<br>  `RangeProtocol` itself to be a very weak abstraction, we removed all<br>  three from the proposal.<br></p><p>For those interested in details, implementation work proceeds apace on<br>the swift-3-indexing-model branch at<br>&lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core&gt;.<br></p><p>P.S. If anyone is interested in contributing, there are still plenty of<br>FIXMEs left for us to handle ;-)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 25, 2016 at 05:00:00pm</p></header><div class="content"><p>Quick thought:<br></p><p>Why are you reaching for the &quot;form...&quot; rule for the mutating methods when<br>there are clear verb counterparts?<br>location: locate<br>successor: succeed<br></p><p><br>On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt; &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     Hello Swift community,<br>&gt; &gt;<br>&gt; &gt;     The review of &quot;A New Model for Collections and Indices&quot; begins now<br>&gt; and runs<br>&gt; &gt;     through April 18th. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt; &gt;<br>&gt; &gt;     Reviews are an important part of the Swift evolution process. All<br>&gt; reviews<br>&gt; &gt;     should be sent to the swift-evolution mailing list at:<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     or, if you would like to keep your feedback private, directly to the<br>&gt; review<br>&gt; &gt;     manager.<br>&gt; &gt;<br>&gt; &gt; A quick update: the core team met to discuss this. They agreed to accept<br>&gt; it with<br>&gt; &gt; some naming-related revisions to the proposal (in response to community<br>&gt; &gt; feedback). Dave is organizing this feedback, and I’ll send out the formal<br>&gt; &gt; announcement when that is ready.<br>&gt;<br>&gt; The final revisions are reflected in the latest version of the<br>&gt; proposal:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt; Summary:<br>&gt;<br>&gt; * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt;   &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt; to<br>&gt;   use “location” uniformly for index movement, so instead of<br>&gt;   successor(i) and predecessor(i) we have location(after: i) and<br>&gt;   location(before: i).<br>&gt;<br>&gt; * Since Brent Royal-Gordon pointed out<br>&gt;   &lt;<br>&gt; http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt; &gt;<br>&gt;   that two of the three proposed Range protocols would likely disappear<br>&gt;   in future updates, we took another look at all of them.  Finding<br>&gt;   `RangeProtocol` itself to be a very weak abstraction, we removed all<br>&gt;   three from the proposal.<br>&gt;<br>&gt; For those interested in details, implementation work proceeds apace on<br>&gt; the swift-3-indexing-model branch at<br>&gt; &lt;<br>&gt; https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt; &gt;.<br>&gt;<br>&gt; P.S. If anyone is interested in contributing, there are still plenty of<br>&gt; FIXMEs left for us to handle ;-)<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/e6ffe56f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 25, 2016 at 04:00:00pm</p></header><div class="content"><p>on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; Quick thought:<br>&gt;<br>&gt; Why are you reaching for the &quot;form...&quot; rule for the mutating methods when there<br>&gt; are clear verb counterparts?<br>&gt; location: locate<br>&gt; successor: succeed<br></p><p>We&#39;re not using successor(i) anymore, as noted below, and furthermore<br>c.succeed(&amp;i) strongly implies the wrong meaning.  I didn&#39;t consider<br>using<br></p><p>  c. locate(...:&amp;i ... )<br></p><p>primarily because I never thought of it and nobody suggested it IIRC,<br>but I also don&#39;t see how it would work in a family with<br>c.location(after: i) et al.  Suggestions?<br></p><p>&gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt;     &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; Hello Swift community,<br>&gt;     &gt;<br>&gt;     &gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and<br>&gt;     runs<br>&gt;     &gt; through April 18th. The proposal is available here:<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;     &gt; should be sent to the swift-evolution mailing list at:<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;     review<br>&gt;     &gt; manager.<br>&gt;     &gt;<br>&gt;     &gt; A quick update: the core team met to discuss this. They agreed to accept<br>&gt;     it with<br>&gt;     &gt; some naming-related revisions to the proposal (in response to community<br>&gt;     &gt; feedback). Dave is organizing this feedback, and I’ll send out the formal<br>&gt;     &gt; announcement when that is ready.<br>&gt;<br>&gt;     The final revisions are reflected in the latest version of the<br>&gt;     proposal:<br>&gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;     Summary:<br>&gt;<br>&gt;     * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt;     &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt; to<br>&gt;     use “location” uniformly for index movement, so instead of<br>&gt;     successor(i) and predecessor(i) we have location(after: i) and<br>&gt;     location(before: i).<br>&gt;<br>&gt;     * Since Brent Royal-Gordon pointed out<br>&gt;     &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt;    &gt;<br>&gt;     that two of the three proposed Range protocols would likely disappear<br>&gt;     in future updates, we took another look at all of them. Finding<br>&gt;     `RangeProtocol` itself to be a very weak abstraction, we removed all<br>&gt;     three from the proposal.<br>&gt;<br>&gt;     For those interested in details, implementation work proceeds apace on<br>&gt;     the swift-3-indexing-model branch at<br>&gt;     &lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt;    &gt;.<br>&gt;<br>&gt;     P.S. If anyone is interested in contributing, there are still plenty of<br>&gt;     FIXMEs left for us to handle ;-)<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 25, 2016 at 08:00:00pm</p></header><div class="content"><p>On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; Quick thought:<br>&gt; &gt;<br>&gt; &gt; Why are you reaching for the &quot;form...&quot; rule for the mutating methods<br>&gt; when there<br>&gt; &gt; are clear verb counterparts?<br>&gt; &gt; location: locate<br>&gt; &gt; successor: succeed<br>&gt;<br>&gt; We&#39;re not using successor(i) anymore, as noted below, and furthermore<br>&gt; c.succeed(&amp;i) strongly implies the wrong meaning.<br></p><p><br>I thought that&#39;s what I understood from the email, but in the linked<br>proposal they&#39;re still there (as are the many types of Range protocols).<br>Wrong link, or just not updated?<br></p><p><br>&gt; I didn&#39;t consider<br>&gt; using<br>&gt;<br>&gt;   c. locate(...:&amp;i ... )<br>&gt;<br>&gt; primarily because I never thought of it and nobody suggested it IIRC,<br>&gt; but I also don&#39;t see how it would work in a family with<br>&gt; c.location(after: i) et al.  Suggestions?<br>&gt;<br></p><p>I didn&#39;t read this proposal carefully on its initial presentation for<br>review. Looking at it now, I wonder about the wisdom of &quot;location&quot;--I<br>understand the rationale of avoiding multiple methods named &quot;index&quot; that do<br>different things, but these particular functions return or mutate indices,<br>and nowhere else are these called &quot;locations&quot;. If you&#39;re asking for<br>possible alternative suggestions to avoid using &quot;index&quot;, I&#39;ll suggest the<br>following here because I don&#39;t recall seeing them offered previously. They<br>read as phrases or sentences:<br></p><p>```<br>// taking inspiration from ForwardIndexType, which is no more...<br>c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)<br>c.advance(_ i: inout Index, by offset: IndexDistance, limit: Index)<br></p><p>// or alternatively, using the terminology in the comments that sit above<br>`location`<br>c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)<br>c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)<br></p><p>// and then, in place of successor, etc.<br>c.incrementing(_ i: Index, limit: Index)<br>c.increment(_ i: inout Index, limit: Index)<br>c.decrementing(_ i: Index, limit: Index)<br>c.decrement(_ i: inout Index, limit: Index)<br>```<br>(&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think of a<br>coupon: &quot;$1 off one tub of margarine. Limit one per purchase. Void if<br>transferred or sold.&quot;)<br></p><p><br>&gt;<br>&gt; &gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt; &gt;     &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Hello Swift community,<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The review of &quot;A New Model for Collections and Indices&quot; begins now<br>&gt; and<br>&gt; &gt;     runs<br>&gt; &gt;     &gt; through April 18th. The proposal is available here:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews<br>&gt; &gt;     &gt; should be sent to the swift-evolution mailing list at:<br>&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     &gt; or, if you would like to keep your feedback private, directly to<br>&gt; the<br>&gt; &gt;     review<br>&gt; &gt;     &gt; manager.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; A quick update: the core team met to discuss this. They agreed to<br>&gt; accept<br>&gt; &gt;     it with<br>&gt; &gt;     &gt; some naming-related revisions to the proposal (in response to<br>&gt; community<br>&gt; &gt;     &gt; feedback). Dave is organizing this feedback, and I’ll send out the<br>&gt; formal<br>&gt; &gt;     &gt; announcement when that is ready.<br>&gt; &gt;<br>&gt; &gt;     The final revisions are reflected in the latest version of the<br>&gt; &gt;     proposal:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt; &gt;<br>&gt; &gt;     Summary:<br>&gt; &gt;<br>&gt; &gt;     * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt; &gt;     &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt; to<br>&gt; &gt;     use “location” uniformly for index movement, so instead of<br>&gt; &gt;     successor(i) and predecessor(i) we have location(after: i) and<br>&gt; &gt;     location(before: i).<br>&gt; &gt;<br>&gt; &gt;     * Since Brent Royal-Gordon pointed out<br>&gt; &gt;     &lt;<br>&gt; http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt; &gt;    &gt;<br>&gt; &gt;     that two of the three proposed Range protocols would likely disappear<br>&gt; &gt;     in future updates, we took another look at all of them. Finding<br>&gt; &gt;     `RangeProtocol` itself to be a very weak abstraction, we removed all<br>&gt; &gt;     three from the proposal.<br>&gt; &gt;<br>&gt; &gt;     For those interested in details, implementation work proceeds apace<br>&gt; on<br>&gt; &gt;     the swift-3-indexing-model branch at<br>&gt; &gt;     &lt;<br>&gt; https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt; &gt;    &gt;.<br>&gt; &gt;<br>&gt; &gt;     P.S. If anyone is interested in contributing, there are still plenty<br>&gt; of<br>&gt; &gt;     FIXMEs left for us to handle ;-)<br>&gt; &gt;<br>&gt; &gt;     --<br>&gt; &gt;     Dave<br>&gt; &gt;<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/7188d383/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 25, 2016 at 06:00:00pm</p></header><div class="content"><p>on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;     on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt;     &gt; Quick thought:<br>&gt;     &gt;<br>&gt;     &gt; Why are you reaching for the &quot;form...&quot; rule for the mutating methods when<br>&gt;     there<br>&gt;     &gt; are clear verb counterparts?<br>&gt;     &gt; location: locate<br>&gt;     &gt; successor: succeed<br>&gt;<br>&gt;     We&#39;re not using successor(i) anymore, as noted below, and furthermore<br>&gt;     c.succeed(&amp;i) strongly implies the wrong meaning.<br>&gt;<br>&gt; I thought that&#39;s what I understood from the email, but in the linked proposal<br>&gt; they&#39;re still there (as are the many types of Range protocols). Wrong link, or<br>&gt; just not updated?<br></p><p>My mistake; I pushed to the wrong repo.  Please try again.<br></p><p>&gt;     I didn&#39;t consider<br>&gt;     using<br>&gt;<br>&gt;     c. locate(...:&amp;i ... )<br>&gt;<br>&gt;     primarily because I never thought of it and nobody suggested it IIRC,<br>&gt;     but I also don&#39;t see how it would work in a family with<br>&gt;     c.location(after: i) et al. Suggestions?<br>&gt;<br>&gt; I didn&#39;t read this proposal carefully on its initial presentation for review.<br>&gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I understand the<br>&gt; rationale of avoiding multiple methods named &quot;index&quot; that do different things,<br>&gt; but these particular functions return or mutate indices, and nowhere else are<br>&gt; these called &quot;locations&quot;. If you&#39;re asking for possible alternative suggestions<br>&gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I don&#39;t recall<br>&gt; seeing them offered previously. They read as phrases or sentences:<br>&gt;<br>&gt; ```<br>&gt; // taking inspiration from ForwardIndexType, which is no more...<br>&gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)<br></p><p>As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re returning<br>(a version of) `c`, not of `i`.  c.f.<br></p><p>   Please hand me **your coat, emptying the left pocket**.<br></p><p>You&#39;re not going to get a pocket; you&#39;re getting a whole coat.<br></p><p>&gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit: Index)<br>&gt;<br>&gt; // or alternatively, using the terminology in the comments that sit above<br>&gt; `location`<br>&gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)<br>&gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)<br>&gt;<br>&gt; // and then, in place of successor, etc.<br>&gt; c.incrementing(_ i: Index, limit: Index)<br>&gt; c.increment(_ i: inout Index, limit: Index)<br>&gt; c.decrementing(_ i: Index, limit: Index)<br>&gt; c.decrement(_ i: inout Index, limit: Index)<br>&gt; ```<br>&gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think of a coupon:<br>&gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if transferred or<br>&gt; sold.&quot;)<br></p><p>the limit label is the least of my concerns here :-)<br></p><p>&gt;     &gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution<br>&gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;     &gt;<br>&gt;     &gt; &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt;     &gt; &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Hello Swift community,<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and<br>&gt;     &gt; runs<br>&gt;     &gt; &gt; through April 18th. The proposal is available here:<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt;     reviews<br>&gt;     &gt; &gt; should be sent to the swift-evolution mailing list at:<br>&gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;     &gt; review<br>&gt;     &gt; &gt; manager.<br>&gt;     &gt; &gt;<br>&gt;     &gt; &gt; A quick update: the core team met to discuss this. They agreed to accept<br>&gt;     &gt; it with<br>&gt;     &gt; &gt; some naming-related revisions to the proposal (in response to community<br>&gt;     &gt; &gt; feedback). Dave is organizing this feedback, and I’ll send out the<br>&gt;     formal<br>&gt;     &gt; &gt; announcement when that is ready.<br>&gt;     &gt;<br>&gt;     &gt; The final revisions are reflected in the latest version of the<br>&gt;     &gt; proposal:<br>&gt;     &gt;<br>&gt;     &gt;<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt;     &gt;<br>&gt;     &gt; Summary:<br>&gt;     &gt;<br>&gt;     &gt; * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt;     &gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt; to<br>&gt;     &gt; use “location” uniformly for index movement, so instead of<br>&gt;     &gt; successor(i) and predecessor(i) we have location(after: i) and<br>&gt;     &gt; location(before: i).<br>&gt;     &gt;<br>&gt;     &gt; * Since Brent Royal-Gordon pointed out<br>&gt;     &gt;<br>&gt;     &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt;<br>&gt;     &gt; &gt;<br>&gt;     &gt; that two of the three proposed Range protocols would likely disappear<br>&gt;     &gt; in future updates, we took another look at all of them. Finding<br>&gt;     &gt; `RangeProtocol` itself to be a very weak abstraction, we removed all<br>&gt;     &gt; three from the proposal.<br>&gt;     &gt;<br>&gt;     &gt; For those interested in details, implementation work proceeds apace on<br>&gt;     &gt; the swift-3-indexing-model branch at<br>&gt;     &gt;<br>&gt;     &lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt;<br>&gt;     &gt; &gt;.<br>&gt;     &gt;<br>&gt;     &gt; P.S. If anyone is interested in contributing, there are still plenty of<br>&gt;     &gt; FIXMEs left for us to handle ;-)<br>&gt;     &gt;<br>&gt;     &gt; --<br>&gt;     &gt; Dave<br>&gt;     &gt;<br>&gt;     &gt; _______________________________________________<br>&gt;     &gt; swift-evolution mailing list<br>&gt;     &gt; swift-evolution at swift.org<br>&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;     &gt;<br>&gt;<br>&gt;     --<br>&gt;     Dave<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 25, 2016 at 08:00:00pm</p></header><div class="content"><p>On Mon, Apr 25, 2016 at 8:25 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; Quick thought:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Why are you reaching for the &quot;form...&quot; rule for the mutating<br>&gt; methods when<br>&gt; &gt;     there<br>&gt; &gt;     &gt; are clear verb counterparts?<br>&gt; &gt;     &gt; location: locate<br>&gt; &gt;     &gt; successor: succeed<br>&gt; &gt;<br>&gt; &gt;     We&#39;re not using successor(i) anymore, as noted below, and furthermore<br>&gt; &gt;     c.succeed(&amp;i) strongly implies the wrong meaning.<br>&gt; &gt;<br>&gt; &gt; I thought that&#39;s what I understood from the email, but in the linked<br>&gt; proposal<br>&gt; &gt; they&#39;re still there (as are the many types of Range protocols). Wrong<br>&gt; link, or<br>&gt; &gt; just not updated?<br>&gt;<br>&gt; My mistake; I pushed to the wrong repo.  Please try again.<br>&gt;<br></p><p>I see a new version, but I still see .successor().<br></p><p><br>&gt;<br>&gt; &gt;     I didn&#39;t consider<br>&gt; &gt;     using<br>&gt; &gt;<br>&gt; &gt;     c. locate(...:&amp;i ... )<br>&gt; &gt;<br>&gt; &gt;     primarily because I never thought of it and nobody suggested it IIRC,<br>&gt; &gt;     but I also don&#39;t see how it would work in a family with<br>&gt; &gt;     c.location(after: i) et al. Suggestions?<br>&gt; &gt;<br>&gt; &gt; I didn&#39;t read this proposal carefully on its initial presentation for<br>&gt; review.<br>&gt; &gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I understand<br>&gt; the<br>&gt; &gt; rationale of avoiding multiple methods named &quot;index&quot; that do different<br>&gt; things,<br>&gt; &gt; but these particular functions return or mutate indices, and nowhere<br>&gt; else are<br>&gt; &gt; these called &quot;locations&quot;. If you&#39;re asking for possible alternative<br>&gt; suggestions<br>&gt; &gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I don&#39;t<br>&gt; recall<br>&gt; &gt; seeing them offered previously. They read as phrases or sentences:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; // taking inspiration from ForwardIndexType, which is no more...<br>&gt; &gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)<br>&gt;<br>&gt; As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re returning<br>&gt; (a version of) `c`, not of `i`.  c.f.<br>&gt;<br>&gt;    Please hand me **your coat, emptying the left pocket**.<br>&gt;<br>&gt; You&#39;re not going to get a pocket; you&#39;re getting a whole coat.<br>&gt;<br></p><p>Quite right; didn&#39;t mean to retread that. I feel the same deficiency<br>applies to using the &quot;form&quot; convention, though, in that (at least as has<br>been discussed on this list) the convention usually refers to the receiver<br>being mutated. Thus, `c.formLocation(...)` sounds like `c` should be<br>mutated in some way.<br></p><p>One way out that I can think of is looking to good ol&#39; Objective-C<br>conventions. By this I mean that, in my mind, shorter method names like<br>`str.appending(...)` are derived by omitting redundant words from longer<br>ancestral names such as `str.stringByAppendingString(...)`. In this<br>particular case, certain words are not redundant and perhaps we should just<br>bravely put back those words that are necessary to clarify.<br></p><p>That is, if this were Objective-C, we&#39;d have something like<br>&quot;indexByAdvancingIndex&quot;. You&#39;re quite right that we can&#39;t use just<br>&quot;advancing&quot; because it implies returning a version of the receiver. We&#39;ve<br>tried &quot;index&quot;, but then it conflicts with another method &quot;index&quot;. Now<br>there&#39;s renaming &quot;index&quot; to &quot;location&quot;, even though it returns a thing of<br>type Index... Aren&#39;t the most succinct but still accurate method names<br>instead: `c.indexByAdvancing(i, ...)` and `c.advanceIndex(&amp;i, ...)`?<br>[Incidentally, `c.advance` might read like c is being advanced.]<br></p><p><br>&gt; &gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit: Index)<br>&gt; &gt;<br>&gt; &gt; // or alternatively, using the terminology in the comments that sit above<br>&gt; &gt; `location`<br>&gt; &gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)<br>&gt; &gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)<br>&gt; &gt;<br>&gt; &gt; // and then, in place of successor, etc.<br>&gt; &gt; c.incrementing(_ i: Index, limit: Index)<br>&gt; &gt; c.increment(_ i: inout Index, limit: Index)<br>&gt; &gt; c.decrementing(_ i: Index, limit: Index)<br>&gt; &gt; c.decrement(_ i: inout Index, limit: Index)<br>&gt; &gt; ```<br>&gt; &gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think of a<br>&gt; coupon:<br>&gt; &gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if<br>&gt; transferred or<br>&gt; &gt; sold.&quot;)<br>&gt;<br>&gt; the limit label is the least of my concerns here :-)<br>&gt;<br></p><p>That said, orthogonally, I feel like many `limitedBy` labels can be<br>simplified to `limit` :)<br></p><p><br></p><p>&gt; &gt;     &gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;     &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt; &gt;     &gt; &gt; &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; Hello Swift community,<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; The review of &quot;A New Model for Collections and Indices&quot; begins<br>&gt; now and<br>&gt; &gt;     &gt; runs<br>&gt; &gt;     &gt; &gt; through April 18th. The proposal is available here:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; &gt;     reviews<br>&gt; &gt;     &gt; &gt; should be sent to the swift-evolution mailing list at:<br>&gt; &gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     &gt; &gt; or, if you would like to keep your feedback private, directly to<br>&gt; the<br>&gt; &gt;     &gt; review<br>&gt; &gt;     &gt; &gt; manager.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; A quick update: the core team met to discuss this. They agreed<br>&gt; to accept<br>&gt; &gt;     &gt; it with<br>&gt; &gt;     &gt; &gt; some naming-related revisions to the proposal (in response to<br>&gt; community<br>&gt; &gt;     &gt; &gt; feedback). Dave is organizing this feedback, and I’ll send out<br>&gt; the<br>&gt; &gt;     formal<br>&gt; &gt;     &gt; &gt; announcement when that is ready.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The final revisions are reflected in the latest version of the<br>&gt; &gt;     &gt; proposal:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Summary:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt; &gt;     &gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt;<br>&gt; to<br>&gt; &gt;     &gt; use “location” uniformly for index movement, so instead of<br>&gt; &gt;     &gt; successor(i) and predecessor(i) we have location(after: i) and<br>&gt; &gt;     &gt; location(before: i).<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; * Since Brent Royal-Gordon pointed out<br>&gt; &gt;     &gt;<br>&gt; &gt;     &lt;<br>&gt; http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com<br>&gt; &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; that two of the three proposed Range protocols would likely<br>&gt; disappear<br>&gt; &gt;     &gt; in future updates, we took another look at all of them. Finding<br>&gt; &gt;     &gt; `RangeProtocol` itself to be a very weak abstraction, we removed<br>&gt; all<br>&gt; &gt;     &gt; three from the proposal.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; For those interested in details, implementation work proceeds<br>&gt; apace on<br>&gt; &gt;     &gt; the swift-3-indexing-model branch at<br>&gt; &gt;     &gt;<br>&gt; &gt;     &lt;<br>&gt; https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core<br>&gt; &gt;<br>&gt; &gt;     &gt; &gt;.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; P.S. If anyone is interested in contributing, there are still<br>&gt; plenty of<br>&gt; &gt;     &gt; FIXMEs left for us to handle ;-)<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; --<br>&gt; &gt;     &gt; Dave<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; _______________________________________________<br>&gt; &gt;     &gt; swift-evolution mailing list<br>&gt; &gt;     &gt; swift-evolution at swift.org<br>&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; &gt;     --<br>&gt; &gt;     Dave<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/f82b4acd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>April 26, 2016 at 12:00:00am</p></header><div class="content"><p>Yes, I too find the naming confusing. I think the method should contain<br>&#39;index&#39;, either in the prefix or as a parameter label, so if you searched<br>through Collection’s methods you’d be able to find every one that was to do<br>with indexes.<br></p><p>  <br></p><p>Sorry to suggest more ideas, but here is a theoretical API with index in the<br>prefix: (the noun is ‘index’)<br></p><p>  <br></p><p>func index(_ index: Index, offsetBy n: IndexDistance) -&amp;gt; Index  <br></p><p>func index(_ index: Index, offsetBy n: IndexDistance, limitedBy limit: Index)<br>-&amp;gt; Index  <br></p><p>  <br></p><p>func formIndex(_ index: inout Index, offsetBy n: IndexDistance)  <br></p><p>func formIndex(_ index: inout Index, offsetBy n: IndexDistance, limitedBy<br>limit: Index)  <br></p><p>  <br></p><p>And here is one within a parameter: (the verb is ‘offset’)<br></p><p>  <br></p><p>func offsetted(index: Index, by n: IndexDistance) -&amp;gt; Index  <br></p><p>func offsetted(index: Index, by n: IndexDistance, limitedBy limit: Index)<br>-&amp;gt; Index  <br></p><p>  <br></p><p>func offset(index: inout Index, offsetBy n: IndexDistance)  <br></p><p>func offset(index: inout Index, offsetBy n: IndexDistance, limitedBy limit:<br>Index)<br></p><p>  <br></p><p>  <br></p><p>  <br>**Patrick Smith**  <br></p><p>On Apr 26 2016, at 11:52 am, Xiaodi Wu via swift-evolution &amp;lt;swift-<br>evolution at swift.org&amp;gt; wrote:  <br></p><p>&gt; On Mon, Apr 25, 2016 at 8:25 PM, Dave Abrahams<br>&amp;lt;[dabrahams at apple.com](mailto:dabrahams at apple.com)&amp;gt; wrote:  <br></p><p>&gt;<br></p><p>&gt;&gt;  <br>on Mon Apr 25 2016, Xiaodi Wu &amp;lt;[xiaodi.wu-AT-gmail.com](http://xiaodi.wu-<br>AT-gmail.com)&amp;gt; wrote:  <br>  <br>&amp;gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams<br>&amp;lt;[dabrahams at apple.com](mailto:dabrahams at apple.com)&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt;     on Mon Apr 25 2016, Xiaodi Wu &amp;lt;[xiaodi.wu-AT-<br>gmail.com](http://xiaodi.wu-AT-gmail.com)&amp;gt; wrote:  <br>&amp;gt;  <br>&amp;gt;     &amp;gt; Quick thought:  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; Why are you reaching for the &quot;form...&quot; rule for the mutating<br>methods when  <br>&amp;gt;     there  <br>&amp;gt;     &amp;gt; are clear verb counterparts?  <br>&amp;gt;     &amp;gt; location: locate  <br>&amp;gt;     &amp;gt; successor: succeed  <br>&amp;gt;  <br>&amp;gt;     We&#39;re not using successor(i) anymore, as noted below, and furthermore  <br>&amp;gt;     c.succeed(&amp;amp;i) strongly implies the wrong meaning.  <br>&amp;gt;  <br>&amp;gt; I thought that&#39;s what I understood from the email, but in the linked<br>proposal  <br>&amp;gt; they&#39;re still there (as are the many types of Range protocols). Wrong<br>link, or  <br>&amp;gt; just not updated?  <br>  <br>My mistake; I pushed to the wrong repo.  Please try again.  <br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; I see a new version, but I still see .successor().<br></p><p>&gt;<br></p><p>&gt;  <br>&gt;<br></p><p>&gt;&gt;  <br>&amp;gt;     I didn&#39;t consider  <br>&amp;gt;     using  <br>&amp;gt;  <br>&amp;gt;     c. locate(...:&amp;amp;i ... )  <br>&amp;gt;  <br>&amp;gt;     primarily because I never thought of it and nobody suggested it IIRC,  <br>&amp;gt;     but I also don&#39;t see how it would work in a family with  <br>&amp;gt;     c.location(after: i) et al. Suggestions?  <br>&amp;gt;  <br>&amp;gt; I didn&#39;t read this proposal carefully on its initial presentation for<br>review.  <br>&amp;gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I understand<br>the  <br>&amp;gt; rationale of avoiding multiple methods named &quot;index&quot; that do different<br>things,  <br>&amp;gt; but these particular functions return or mutate indices, and nowhere else<br>are  <br>&amp;gt; these called &quot;locations&quot;. If you&#39;re asking for possible alternative<br>suggestions  <br>&amp;gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I don&#39;t<br>recall  <br>&amp;gt; seeing them offered previously. They read as phrases or sentences:  <br>&amp;gt;  <br>&amp;gt; ```  <br>&amp;gt; // taking inspiration from ForwardIndexType, which is no more...  <br>&amp;gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)  <br>  <br>As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re returning  <br>(a version of) `c`, not of `i`.  c.f.  <br>  <br>   Please hand me **your coat, emptying the left pocket**.  <br>  <br>You&#39;re not going to get a pocket; you&#39;re getting a whole coat.  <br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; Quite right; didn&#39;t mean to retread that. I feel the same deficiency applies<br>to using the &quot;form&quot; convention, though, in that (at least as has been<br>discussed on this list) the convention usually refers to the receiver being<br>mutated. Thus, `c.formLocation(...)` sounds like `c` should be mutated in some<br>way.<br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; One way out that I can think of is looking to good ol&#39; Objective-C<br>conventions. By this I mean that, in my mind, shorter method names like<br>`str.appending(...)` are derived by omitting redundant words from longer<br>ancestral names such as `str.stringByAppendingString(...)`. In this particular<br>case, certain words are not redundant and perhaps we should just bravely put<br>back those words that are necessary to clarify.<br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; That is, if this were Objective-C, we&#39;d have something like<br>&quot;indexByAdvancingIndex&quot;. You&#39;re quite right that we can&#39;t use just &quot;advancing&quot;<br>because it implies returning a version of the receiver. We&#39;ve tried &quot;index&quot;,<br>but then it conflicts with another method &quot;index&quot;. Now there&#39;s renaming<br>&quot;index&quot; to &quot;location&quot;, even though it returns a thing of type Index... Aren&#39;t<br>the most succinct but still accurate method names instead:<br>`c.indexByAdvancing(i, ...)` and `c.advanceIndex(&amp;amp;i, ...)`? [Incidentally,<br>`c.advance` might read like c is being advanced.]<br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt;&gt;  <br>&amp;gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit: Index)  <br>&amp;gt;  <br>&amp;gt; // or alternatively, using the terminology in the comments that sit above  <br>&amp;gt; `location`  <br>&amp;gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)  <br>&amp;gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)  <br>&amp;gt;  <br>&amp;gt; // and then, in place of successor, etc.  <br>&amp;gt; c.incrementing(_ i: Index, limit: Index)  <br>&amp;gt; c.increment(_ i: inout Index, limit: Index)  <br>&amp;gt; c.decrementing(_ i: Index, limit: Index)  <br>&amp;gt; c.decrement(_ i: inout Index, limit: Index)  <br>&amp;gt; ```  <br>&amp;gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think of a<br>coupon:  <br>&amp;gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if transferred<br>or  <br>&amp;gt; sold.&quot;)  <br>  <br>the limit label is the least of my concerns here :-)  <br></p><p>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt; That said, orthogonally, I feel like many `limitedBy` labels can be<br>simplified to `limit` :)<br></p><p>&gt;<br></p><p>&gt;  <br>&gt;<br></p><p>&gt;  <br></p><p>&gt;<br></p><p>&gt;&gt;  <br>&amp;gt;     &amp;gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-<br>evolution  <br>&amp;gt;     &amp;gt; &amp;lt;[swift-evolution at swift.org](mailto:swift-<br>evolution at swift.org)&amp;gt; wrote:  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; on Wed Apr 20 2016, Chris Lattner &amp;lt;[swift-<br>evolution at swift.org](mailto:swift-evolution at swift.org)&amp;gt; wrote:  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner  <br>&amp;gt;     &amp;gt; &amp;gt; &amp;lt;[clattner at apple.com](mailto:clattner at apple.com)&amp;gt;<br>wrote:  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt; Hello Swift community,  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt; The review of &quot;A New Model for Collections and Indices&quot;<br>begins now and  <br>&amp;gt;     &amp;gt; runs  <br>&amp;gt;     &amp;gt; &amp;gt; through April 18th. The proposal is available here:  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md&gt;  <br>&amp;gt;  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt; Reviews are an important part of the Swift evolution<br>process. All  <br>&amp;gt;     reviews  <br>&amp;gt;     &amp;gt; &amp;gt; should be sent to the swift-evolution mailing list at:  <br>&amp;gt;     &amp;gt; &amp;gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;  <br>&amp;gt;     &amp;gt; &amp;gt; or, if you would like to keep your feedback private,<br>directly to the  <br>&amp;gt;     &amp;gt; review  <br>&amp;gt;     &amp;gt; &amp;gt; manager.  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt; A quick update: the core team met to discuss this. They<br>agreed to accept  <br>&amp;gt;     &amp;gt; it with  <br>&amp;gt;     &amp;gt; &amp;gt; some naming-related revisions to the proposal (in response<br>to community  <br>&amp;gt;     &amp;gt; &amp;gt; feedback). Dave is organizing this feedback, and I’ll send<br>out the  <br>&amp;gt;     formal  <br>&amp;gt;     &amp;gt; &amp;gt; announcement when that is ready.  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; The final revisions are reflected in the latest version of the  <br>&amp;gt;     &amp;gt; proposal:  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0065<br>-collections-move-indices.md&gt;  <br>&amp;gt;  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; Summary:  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; * We decided to take Shawn Erickson&#39;s excellent suggestion  <br>&amp;gt;     &amp;gt;<br>&amp;lt;&lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt;&amp;gt; to  <br>&amp;gt;     &amp;gt; use “location” uniformly for index movement, so instead of  <br>&amp;gt;     &amp;gt; successor(i) and predecessor(i) we have location(after: i) and  <br>&amp;gt;     &amp;gt; location(before: i).  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; * Since Brent Royal-Gordon pointed out  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;lt;&lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2<br>d448E%2d8C70%2d6E7400629BC0%40architechies.com&gt;  <br>&amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt;  <br>&amp;gt;     &amp;gt; that two of the three proposed Range protocols would likely<br>disappear  <br>&amp;gt;     &amp;gt; in future updates, we took another look at all of them. Finding  <br>&amp;gt;     &amp;gt; `RangeProtocol` itself to be a very weak abstraction, we removed<br>all  <br>&amp;gt;     &amp;gt; three from the proposal.  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; For those interested in details, implementation work proceeds<br>apace on  <br>&amp;gt;     &amp;gt; the swift-3-indexing-model branch at  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;lt;&lt;https://github.com/apple/swift/tree/swift-3-indexing-<br>model/stdlib/public/core&gt;  <br>&amp;gt;  <br>&amp;gt;     &amp;gt; &amp;gt;.  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; P.S. If anyone is interested in contributing, there are still<br>plenty of  <br>&amp;gt;     &amp;gt; FIXMEs left for us to handle ;-)  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; \--  <br>&amp;gt;     &amp;gt; Dave  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;     &amp;gt; _______________________________________________  <br>&amp;gt;     &amp;gt; swift-evolution mailing list  <br>&amp;gt;     &amp;gt; [swift-evolution at swift.org](mailto:swift-evolution at swift.org)  <br>&amp;gt;     &amp;gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;  <br>&amp;gt;     &amp;gt;  <br>&amp;gt;  <br>&amp;gt;     \--  <br>&amp;gt;     Dave  <br>&amp;gt;  <br>  <br></p><p>&gt;&gt;<br></p><p>&gt;&gt; \--  <br>Dave  <br></p><p>&gt;<br></p><p>&gt;  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/4fd025b9/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 26, 2016 at 09:00:00am</p></header><div class="content"><p>I prefer the index() method name for this purpose, but I wonder if we might want to consider overloads for forward/backward, since not all indexes are bidirectional (or at least, not efficiently so), for example:<br></p><p>	index(_ index:Index, advancedBy:Index.Distance) -&gt; Index<br>	index(_ index:Index, reversedBy:Index.Distance) -&gt; Index	// Only declared where Self.Index : BidirectionalIndexType?<br></p><p>But yeah, everything related to index manipulation should be doable from some variant of .index() I think.<br></p><p>&gt; On 26 Apr 2016, at 08:49, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, I too find the naming confusing. I think the method should contain &#39;index&#39;, either in the prefix or as a parameter label, so if you searched through Collection’s methods you’d be able to find every one that was to do with indexes.<br>&gt; <br>&gt; Sorry to suggest more ideas, but here is a theoretical API with index in the prefix: (the noun is ‘index’)<br>&gt; <br>&gt; func index(_ index: Index, offsetBy n: IndexDistance) -&gt; Index<br>&gt; func index(_ index: Index, offsetBy n: IndexDistance, limitedBy limit: Index) -&gt; Index<br>&gt; <br>&gt; func formIndex(_ index: inout Index, offsetBy n: IndexDistance)<br>&gt; func formIndex(_ index: inout Index, offsetBy n: IndexDistance, limitedBy limit: Index)<br>&gt; <br>&gt; And here is one within a parameter: (the verb is ‘offset’)<br>&gt; <br>&gt; func offsetted(index: Index, by n: IndexDistance) -&gt; Index<br>&gt; func offsetted(index: Index, by n: IndexDistance, limitedBy limit: Index) -&gt; Index<br>&gt; <br>&gt; func offset(index: inout Index, offsetBy n: IndexDistance)<br>&gt; func offset(index: inout Index, offsetBy n: IndexDistance, limitedBy limit: Index)<br>&gt; <br>&gt; <br>&gt; <br>&gt; Patrick Smith<br>&gt; On Apr 26 2016, at 11:52 am, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote: <br>&gt; On Mon, Apr 25, 2016 at 8:25 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com &lt;http://xiaodi.wu-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Mon, Apr 25, 2016 at 6:15 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     on Mon Apr 25 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com &lt;http://xiaodi.wu-at-gmail.com/&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;     &gt; Quick thought:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Why are you reaching for the &quot;form...&quot; rule for the mutating methods when<br>&gt; &gt;     there<br>&gt; &gt;     &gt; are clear verb counterparts?<br>&gt; &gt;     &gt; location: locate<br>&gt; &gt;     &gt; successor: succeed<br>&gt; &gt;<br>&gt; &gt;     We&#39;re not using successor(i) anymore, as noted below, and furthermore<br>&gt; &gt;     c.succeed(&amp;i) strongly implies the wrong meaning.<br>&gt; &gt;<br>&gt; &gt; I thought that&#39;s what I understood from the email, but in the linked proposal<br>&gt; &gt; they&#39;re still there (as are the many types of Range protocols). Wrong link, or<br>&gt; &gt; just not updated?<br>&gt; <br>&gt; My mistake; I pushed to the wrong repo.  Please try again.<br>&gt; <br>&gt; I see a new version, but I still see .successor().<br>&gt;  <br>&gt; <br>&gt; &gt;     I didn&#39;t consider<br>&gt; &gt;     using<br>&gt; &gt;<br>&gt; &gt;     c. locate(...:&amp;i ... )<br>&gt; &gt;<br>&gt; &gt;     primarily because I never thought of it and nobody suggested it IIRC,<br>&gt; &gt;     but I also don&#39;t see how it would work in a family with<br>&gt; &gt;     c.location(after: i) et al. Suggestions?<br>&gt; &gt;<br>&gt; &gt; I didn&#39;t read this proposal carefully on its initial presentation for review.<br>&gt; &gt; Looking at it now, I wonder about the wisdom of &quot;location&quot;--I understand the<br>&gt; &gt; rationale of avoiding multiple methods named &quot;index&quot; that do different things,<br>&gt; &gt; but these particular functions return or mutate indices, and nowhere else are<br>&gt; &gt; these called &quot;locations&quot;. If you&#39;re asking for possible alternative suggestions<br>&gt; &gt; to avoid using &quot;index&quot;, I&#39;ll suggest the following here because I don&#39;t recall<br>&gt; &gt; seeing them offered previously. They read as phrases or sentences:<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; // taking inspiration from ForwardIndexType, which is no more...<br>&gt; &gt; c.advancing(_ i: Index, by offset: IndexDistance, limit: Index)<br>&gt; <br>&gt; As I&#39;ve said before, the “ing” suffix strongly implies we&#39;re returning<br>&gt; (a version of) `c`, not of `i`.  c.f.<br>&gt; <br>&gt;    Please hand me **your coat, emptying the left pocket**.<br>&gt; <br>&gt; You&#39;re not going to get a pocket; you&#39;re getting a whole coat.<br>&gt; <br>&gt; Quite right; didn&#39;t mean to retread that. I feel the same deficiency applies to using the &quot;form&quot; convention, though, in that (at least as has been discussed on this list) the convention usually refers to the receiver being mutated. Thus, `c.formLocation(...)` sounds like `c` should be mutated in some way.<br>&gt; <br>&gt; One way out that I can think of is looking to good ol&#39; Objective-C conventions. By this I mean that, in my mind, shorter method names like `str.appending(...)` are derived by omitting redundant words from longer ancestral names such as `str.stringByAppendingString(...)`. In this particular case, certain words are not redundant and perhaps we should just bravely put back those words that are necessary to clarify.<br>&gt; <br>&gt; That is, if this were Objective-C, we&#39;d have something like &quot;indexByAdvancingIndex&quot;. You&#39;re quite right that we can&#39;t use just &quot;advancing&quot; because it implies returning a version of the receiver. We&#39;ve tried &quot;index&quot;, but then it conflicts with another method &quot;index&quot;. Now there&#39;s renaming &quot;index&quot; to &quot;location&quot;, even though it returns a thing of type Index... Aren&#39;t the most succinct but still accurate method names instead: `c.indexByAdvancing(i, ...)` and `c.advanceIndex(&amp;i, ...)`? [Incidentally, `c.advance` might read like c is being advanced.]<br>&gt; <br>&gt; <br>&gt; &gt; c.advance(_ i: inout Index, by offset: IndexDistance, limit: Index)<br>&gt; &gt;<br>&gt; &gt; // or alternatively, using the terminology in the comments that sit above<br>&gt; &gt; `location`<br>&gt; &gt; c.offsetting(_ i: Index, by n: IndexDistance, limit: Index)<br>&gt; &gt; c.offset(_ i: inout Index, by n: IndexDistance, limit: Index)<br>&gt; &gt;<br>&gt; &gt; // and then, in place of successor, etc.<br>&gt; &gt; c.incrementing(_ i: Index, limit: Index)<br>&gt; &gt; c.increment(_ i: inout Index, limit: Index)<br>&gt; &gt; c.decrementing(_ i: Index, limit: Index)<br>&gt; &gt; c.decrement(_ i: inout Index, limit: Index)<br>&gt; &gt; ```<br>&gt; &gt; (&quot;&#39;Limit&#39; doesn&#39;t read like a phrase,&quot; you might say. Well, think of a coupon:<br>&gt; &gt; &quot;$1 off one tub of margarine. Limit one per purchase. Void if transferred or<br>&gt; &gt; sold.&quot;)<br>&gt; <br>&gt; the limit label is the least of my concerns here :-)<br>&gt; <br>&gt; That said, orthogonally, I feel like many `limitedBy` labels can be simplified to `limit` :)<br>&gt;  <br>&gt; <br>&gt; <br>&gt; &gt;     &gt; On Mon, Apr 25, 2016 at 1:24 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;     &gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; on Wed Apr 20 2016, Chris Lattner &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt; On Apr 10, 2016, at 2:41 PM, Chris Lattner<br>&gt; &gt;     &gt; &gt; &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; Hello Swift community,<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; The review of &quot;A New Model for Collections and Indices&quot; begins now and<br>&gt; &gt;     &gt; runs<br>&gt; &gt;     &gt; &gt; through April 18th. The proposal is available here:<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md&gt;<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; &gt;     reviews<br>&gt; &gt;     &gt; &gt; should be sent to the swift-evolution mailing list at:<br>&gt; &gt;     &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;     &gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; &gt;     &gt; review<br>&gt; &gt;     &gt; &gt; manager.<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; &gt; A quick update: the core team met to discuss this. They agreed to accept<br>&gt; &gt;     &gt; it with<br>&gt; &gt;     &gt; &gt; some naming-related revisions to the proposal (in response to community<br>&gt; &gt;     &gt; &gt; feedback). Dave is organizing this feedback, and I’ll send out the<br>&gt; &gt;     formal<br>&gt; &gt;     &gt; &gt; announcement when that is ready.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; The final revisions are reflected in the latest version of the<br>&gt; &gt;     &gt; proposal:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md&gt;<br>&gt; &gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; Summary:<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; * We decided to take Shawn Erickson&#39;s excellent suggestion<br>&gt; &gt;     &gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/14450&gt;&gt; to<br>&gt; &gt;     &gt; use “location” uniformly for index movement, so instead of<br>&gt; &gt;     &gt; successor(i) and predecessor(i) we have location(after: i) and<br>&gt; &gt;     &gt; location(before: i).<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; * Since Brent Royal-Gordon pointed out<br>&gt; &gt;     &gt;<br>&gt; &gt;     &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com &lt;http://news.gmane.org/find-root.php?message_id=156D8FB1%2d1FD3%2d448E%2d8C70%2d6E7400629BC0%40architechies.com&gt;<br>&gt; &gt;<br>&gt; &gt;     &gt; &gt;<br>&gt; &gt;     &gt; that two of the three proposed Range protocols would likely disappear<br>&gt; &gt;     &gt; in future updates, we took another look at all of them. Finding<br>&gt; &gt;     &gt; `RangeProtocol` itself to be a very weak abstraction, we removed all<br>&gt; &gt;     &gt; three from the proposal.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; For those interested in details, implementation work proceeds apace on<br>&gt; &gt;     &gt; the swift-3-indexing-model branch at<br>&gt; &gt;     &gt;<br>&gt; &gt;     &lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core &lt;https://github.com/apple/swift/tree/swift-3-indexing-model/stdlib/public/core&gt;<br>&gt; &gt;<br>&gt; &gt;     &gt; &gt;.<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; P.S. If anyone is interested in contributing, there are still plenty of<br>&gt; &gt;     &gt; FIXMEs left for us to handle ;-)<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; --<br>&gt; &gt;     &gt; Dave<br>&gt; &gt;     &gt;<br>&gt; &gt;     &gt; _______________________________________________<br>&gt; &gt;     &gt; swift-evolution mailing list<br>&gt; &gt;     &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;     &gt;<br>&gt; &gt;<br>&gt; &gt;     --<br>&gt; &gt;     Dave<br>&gt; &gt;<br>&gt; <br>&gt; --<br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160426/112d05bc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
