<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>RawRepresentable bug or intended?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>September 29, 2016 at 08:00:00am</p></header><div class="content"><p>struct B : RawRepresentable {<br>     <br>    let rawValue: Int<br>     <br>//  init?(rawValue: Int) {<br>//<br>//      self.rawValue = rawValue<br>//  }<br>     <br>    static let c: B = B(rawValue: 0)<br>    static let d: B = B(rawValue: 1)<br>}<br>It seems to me that the memberwise initializer init(rawValue: Int) ignores the failable initializer init?(rawValue: Int) from RawRepresentable and is even able to satisfy RawRepresentable in that case.<br></p><p><br></p><p>--Â <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160929/6c553fce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>RawRepresentable bug or intended?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September 29, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Sep 28, 2016, at 23:00, Adrian Zubarev via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; struct B : RawRepresentable {<br>&gt;      <br>&gt;     let rawValue: Int<br>&gt;      <br>&gt; //  init?(rawValue: Int) {<br>&gt; //<br>&gt; //      self.rawValue = rawValue<br>&gt; //  }<br>&gt;      <br>&gt;     static let c: B = B(rawValue: 0)<br>&gt;     static let d: B = B(rawValue: 1)<br>&gt; }<br>&gt; It seems to me that the memberwise initializer init(rawValue: Int) ignores the failable initializer init?(rawValue: Int) from RawRepresentable and is even able to satisfy RawRepresentable in that case.<br>&gt; <br></p><p>Yep, that&#39;s correct. A non-failable initializer is considered a valid subtype of a failable initializer, in that you can always provide the former where the latter is expected. The compiler doesn&#39;t handle all forms of subtyping when it does protocol conformance checks (and there are bugs on this), but it does handle this one.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160929/8559684e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
