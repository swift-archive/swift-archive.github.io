<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 27, 2016 at 07:00:00am</p></header><div class="content"><p>on Mon Jun 27 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mon, Jun 27, 2016 at 9:10 AM, Dave Abrahams<br>&gt; &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Sun Jun 26 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Sun, Jun 26, 2016 at 2:18 PM, Erica Sadun via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; See below.  But in a nutshell, `do` gets the idea across. It&#39;s short.<br>&gt;&gt; &gt;&gt; It&#39;s pithy.  It uses a common, comfortable word. So yes, personal<br>&gt;&gt; &gt;&gt; taste. But it&#39;s personal taste backed up by some statistics.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;ve made this comment previously in another thread, but I&#39;ll chime in<br>&gt;&gt; here<br>&gt;&gt; &gt; because it seems pertinent. Just like the parentheses around function<br>&gt;&gt; &gt; arguments can imply the word &quot;with&quot; or &quot;using,&quot; and just as Swift 3<br>&gt;&gt; renamed<br>&gt;&gt; &gt; `foo(atIndex: Int)` to `foo(at: Int)` because an argument of type Int<br>&gt;&gt; &gt; implies an index, a closure to me implies the word &quot;do,&quot; &quot;invoke,&quot;<br>&gt;&gt; &gt; &quot;perform&quot; or even &quot;soEach.&quot; After all, it&#39;s absurd that a closure would<br>&gt;&gt; be<br>&gt;&gt; &gt; supplied as an argument for any purpose other than being done or invoked<br>&gt;&gt; or<br>&gt;&gt; &gt; performed.<br>&gt;&gt;<br>&gt;&gt; Not at all.<br>&gt;&gt;<br>&gt;&gt;     callbacks.append( { print(&quot;ring ring&quot;) } )<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m not sure I understand. Your closure here would be a callback, as in you<br>&gt; expect it to be called or done or invoked, no? <br></p><p>Maybe, eventually, someday.  But that&#39;s not at all the role it plays in<br>append.<br></p><p>&gt; Would you find value in having it rewritten `callbacks.append(callee:<br>&gt; { print(&quot;ring ring&quot;) })`?<br></p><p>No, that&#39;s my point!<br></p><p>&gt;&gt; &gt; That a label such as `do` or `body` or `soEach` could be applied so<br>&gt;&gt; &gt; broadly seems to me a good sign that these labels might be extraneous.<br>&gt;&gt;<br>&gt;&gt; I totally buy that argument when it comes to `do` or `body`.  That said,<br>&gt;&gt; as I have pointed out many times, “soEach” has very specific<br>&gt;&gt; communicative value that none of these others do.<br>&gt;<br>&gt; I get what you&#39;re aiming for with &quot;soEach.&quot; So that we&#39;re on the same page,<br>&gt; here&#39;s what I think you think:<br>&gt;<br>&gt; (1) &quot;so&quot; communicates that, in the case of filtering, the elements that<br>&gt; satisfy the predicate are kept rather than discarded<br>&gt; (2) &quot;each&quot; communicates that the predicate operates on an individual<br>&gt; element at a time<br></p><p>“each” is just what&#39;s required to make “so” read sensibly.<br></p><p>    (0..&lt;100).filter(so: isPrime)<br></p><p>doesn&#39;t make any obvious sense.<br></p><p>&gt; Regarding (2)--I think clarifying this isn&#39;t extremely valuable, because:<br>&gt;<br>&gt; A. That a property or method has to do with an individual element of a<br>&gt; sequence/collection is frequently understood by implication in property and<br>&gt; method names. For example: `first` isn&#39;t `firstElement`; it&#39;s simply<br>&gt; understood.<br></p><p>Yes, because that&#39;s the way the language works for first.  It doesn&#39;t<br>work that way in this case.<br></p><p>&gt; B. In plain English, we frequently understand that a verb used in relation<br>&gt; to a thing with multiple constituent parts operates on said constituent<br>&gt; parts one-by-one.<br>&gt;<br>&gt; Regarding (1)--I agree that knowing whether elements satisfying the<br>&gt; predicate are kept or discarded, etc., is essential. I&#39;ll call this the<br>&gt; &quot;keeping vs. discarding&quot; issue. That said, since trailing closure syntax<br>&gt; allows the label to be omitted, and since we take into consideration<br>&gt; clarity for the reader at the call site as much as clarity for the writer<br>&gt; at the time of reading the documentation, <br></p><p>More so!<br></p><p>&gt; I would propose the following:<br>&gt;<br>&gt; A. If &quot;keeping vs. discarding&quot; is ambiguous from the base name (or at<br>&gt; least, the full method name minus the predicate&#39;s label), then clarifying<br>&gt; words should be inserted somewhere other than the label so that the same<br>&gt; clarity can be assured at any call site.<br></p><p>Yes, as I&#39;ve said, we should change the base name to “where” and drop<br>the label.  But that&#39;s out of scope for this proposal.<br></p><p>&gt; B. If &quot;keeping vs. discarding&quot; is unambiguous without taking into<br>&gt; consideration the predicate&#39;s label, it&#39;s extraneous to reiterate the point<br>&gt; in the label.<br>&gt;<br>&gt; C. I question whether there really exist scenarios that are not important<br>&gt; enough to justify (A) but just unclear enough that (B) is unsatisfactory;<br>&gt; where reasonable people differ, I propose erring on the side of caution and<br>&gt; going with (A).<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 27, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt; <br>&gt;    (0..&lt;100).filter(so: isPrime)<br>&gt; <br>&gt; doesn&#39;t make any obvious sense.<br></p><p><br>Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/b95a6921/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 27, 2016 at 11:00:00am</p></header><div class="content"><p>Just tossing my vote in the hat for renaming .filter() to something like .select() since that better matches what it does, IMO. “Filter” is almost like the opposite word from what it should be since the closure returning true is what decides what is included in the results, not what is filtered *from* the results. I mean, yeah, I can kind of understand the logic either way, but it’s always been one of those strange mental gymnastics things.<br></p><p>Personally I’m not a huge fan of the terms of art exemptions as I feel like most of the functional programming terms of art are a poor fit for Swift in particular and often needlessly esoteric when first encountered (fold? reduce? map?). The same can be said about many mathematical terms as well such as “floor” and “ceil&quot; which, at least in my experience, we learned throughout schooling years as being called rounding up and down. (Perhaps that has changed?)<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jun 27, 2016, at 11:02 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt; <br>&gt;&gt;    (0..&lt;100).filter(so: isPrime)<br>&gt;&gt; <br>&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt; <br>&gt; <br>&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 27, 2016 at 07:00:00pm</p></header><div class="content"><p>On 27.06.2016 19:02, Erica Sadun via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt;<br>&gt;&gt;    (0..&lt;100).filter(so: isPrime)<br>&gt;&gt;<br>&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;<br>&gt;<br>&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why<br>&gt; not use `select(where:)`.<br></p><p>Support the question. IMO we should have filter(_:) as term-of-art or <br>otherwise rename it to be more swifty and with conformance to naming rules. <br>FWIW I also like select(where:)<br></p><p>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 27, 2016 at 11:00:00am</p></header><div class="content"><p>on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt; <br>&gt;&gt;    (0..&lt;100).filter(so: isPrime)<br>&gt;&gt; <br>&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;<br>&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br></p><p>Because `where(...)` is better.  But all such changes are out of scope<br>here.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 27, 2016, at 12:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   (0..&lt;100).filter(so: isPrime)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;&gt; <br>&gt;&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br>&gt; <br>&gt; Because `where(...)` is better.  But all such changes are out of scope<br>&gt; here.<br></p><p>Are you asking/suggesting that it be in scope somewhere else or merely removing it from the<br>conversation as tangential?<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 27, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 27, 2016, at 12:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   (0..&lt;100).filter(so: isPrime)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br>&gt;&gt; <br>&gt;&gt; Because `where(...)` is better.  But all such changes are out of scope<br>&gt;&gt; here.<br>&gt;<br>&gt; Are you asking/suggesting that it be in scope somewhere else or merely removing it from the<br>&gt; conversation as tangential?<br></p><p>Yes, as I&#39;ve been saying, we should take up the basenames of functional<br>methods, considering whether the terms of art should be considered<br>sacred cows, as a separate proposal.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 27, 2016, at 1:05 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 27, 2016, at 12:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  (0..&lt;100).filter(so: isPrime)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because `where(...)` is better.  But all such changes are out of scope<br>&gt;&gt;&gt; here.<br>&gt;&gt; <br>&gt;&gt; Are you asking/suggesting that it be in scope somewhere else or merely removing it from the<br>&gt;&gt; conversation as tangential?<br>&gt; <br>&gt; Yes, as I&#39;ve been saying, we should take up the basenames of functional<br>&gt; methods, considering whether the terms of art should be considered<br>&gt; sacred cows, as a separate proposal.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>A or B?<br></p><p>Yes.<br></p><p>-- E, moo<br>p.s. I&#39;ll start a thread<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/58f78e4f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 27, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 27, 2016, at 1:05 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jun 27, 2016, at 12:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Mon Jun 27 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 27, 2016, at 8:40 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; “each” is just what&#39;s required to make “so” read sensibly.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  (0..&lt;100).filter(so: isPrime)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; doesn&#39;t make any obvious sense.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Shouldn&#39;t there be a term of art exemption for `filter(_:)`. Otherwise why not use `select(where:)`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Because `where(...)` is better.  But all such changes are out of scope<br>&gt;&gt;&gt;&gt; here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are you asking/suggesting that it be in scope somewhere else or merely removing it from the<br>&gt;&gt;&gt; conversation as tangential?<br>&gt;&gt; <br>&gt;&gt; Yes, as I&#39;ve been saying, we should take up the basenames of functional<br>&gt;&gt; methods, considering whether the terms of art should be considered<br>&gt;&gt; sacred cows, as a separate proposal.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;<br>&gt; A or B?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt; -- E, moo<br>&gt; p.s. I&#39;ll start a thread<br></p><p>There&#39;s already<br>http://news.gmane.org/find-root.php?message_id=CAKA%3djdbxiC%5fq0Fe%3dXc%3dmSWu7OtGxMgAQyb0QMA6%5fOaiiLB3foA%40mail.gmail.com<br></p><p>I referred to it in my introduction of this thread.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
