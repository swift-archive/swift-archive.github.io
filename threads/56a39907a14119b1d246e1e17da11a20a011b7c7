<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>Auto-convert for numbers when safe</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>December  6, 2015 at 06:00:00pm</p></header><div class="content"><p>I’m new to this discussion and don’t really know what’s been tried before, so I’m probably asking stupid questions, but I *really* want auto-conversion…<br></p><p>What would be the drawback in terms of language design to just allowing types to specify what other types can automatically be “upconverted&quot; to them? True, this could be used to create a cyclic graph, but that could just be disallowed in the compiler—you guys like writing code, right?<br></p><p>I think one of the issues with all this is that Swift allows us to skip specifying types, like:<br></p><p>   let a = 1<br></p><p>   let b: CGFloat = a + 3<br></p><p>And so it’d be easy to get into a morass where the poor compiler is all, “AH! I should go back in time and make ‘a’ a CGFloat automatically, not an Int like I want, so it’ll add with 3 and make a nice CGFloat!”<br></p><p>Is that the problem we’re fighting? If not, what was the issue with the (unreleased) auto-conversion code that was in Swift.<br></p><p>-Wil<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Auto-convert for numbers when safe</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  6, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; I’m new to this discussion and don’t really know what’s been tried before, so I’m probably asking stupid questions, but I *really* want auto-conversion…<br>&gt; <br>&gt; What would be the drawback in terms of language design to just allowing types to specify what other types can automatically be “upconverted&quot; to them? True, this could be used to create a cyclic graph, but that could just be disallowed in the compiler—you guys like writing code, right?<br></p><p>Chris Lattner discussed this yesterday. I can’t find it in the online archives, so I’ll copy-and-paste it here:<br></p><p>&gt; From: Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; Date: December 5, 2015 at 11:02:47 PM PST<br>&gt; To: Jonathan Hull &lt;jhull at gbis.com&gt;<br>&gt; Cc: swift-evolution at swift.org<br>&gt; Subject: Re: [swift-evolution] Proposal: Auto-convert for numbers when safe<br>&gt; <br>&gt; On Dec 5, 2015, at 4:27 AM, Jonathan Hull &lt;jhull at gbis.com&gt; wrote:<br>&gt;&gt; I understand why you can’t auto-convert from a Double to a Float or Int32 to Int8.  It is good that we have to add the cast explicitly and think though the implications.<br>&gt;&gt; <br>&gt;&gt; …but I don’t think through the implications because we currently have a boy who cried wolf situation where we have to explicitly cast everything (even the safe stuff).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think all of the numeric types should be able to auto-convert if the conversion is safe (without loss of precision or overflow).<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; • If an Int is casting to a larger size (Int16 -&gt; Int32)<br>&gt;&gt; • Float -&gt; Double<br>&gt;&gt; • Float -&gt; CGFloat<br>&gt;&gt; • Int -&gt; Float, Double, or CGFloat (but not the other way)<br>&gt;&gt; <br>&gt;&gt; I don’t see why these aren’t allowed. The forced casts make my code much less readable.  Are the casts above dangerous in a way I am not aware of?<br>&gt; <br>&gt; I agree that the current Swift numerics model is suboptimal, I personally would like to see small integers implicitly promote to large integers (when they are known lossless), have Float promote to Double, and have both Float and Double promote to CGFloat (yes, I know that the Double -&gt; CGFloat promotion would be lossy on 32-bit apple platforms).  I personally don’t think that integer -&gt; floating point promotions are a good idea even if value preserving, since their domains are so different.<br>&gt; <br>&gt; The problem with doing this today is that there are a lot of dependencies we need to get resolved first.<br>&gt; <br>&gt; 1. The type checker is really slow, partially because of too-many and too-crazy implicit conversions.  We also get very surprising behavior when they kick in. Specifically, IMO, we need to reevaluate the T! &lt;-&gt; T and T to T? conversions.  We have thoughts on this, but should be discussed in a separate thread if you’re interested.<br>&gt; <br>&gt; 2. These promotions should be expressible in the library, not hard coded into the compiler.  This means that we would need a language feature to (e.g.) be able to define subtype relationships between structs.  Such a feature would be generally useful and could allow us to push some of our existing compiler magic out to the stdlib.<br>&gt; <br>&gt; 3. We want the existing work to revise the numerics protocols to be better understood and hopefully implemented.<br>&gt; <br>&gt; There are also a ton of unrelated specific problems that should be addressed in various ways: e.g. macros like M_PI get imported as Double instead of a typeless literal, forcing tons of casts in code that wants to use it (e.g.) with Floats.  These issues are separable, and blocked on things like generic properties not being in place.<br>&gt; <br>&gt; It would be great for interested contributors to start pushing on any of the above issues to help unblock progress on improving the numerics model.<br>&gt; <br>&gt; -Chris<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>Auto-convert for numbers when safe</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>December  7, 2015 at 01:00:00am</p></header><div class="content"><p>&gt; Chris Lattner discussed this yesterday. I can’t find it in the online archives, so I’ll copy-and-paste it here:<br></p><p>Right, I read Chris’s message and was trying to respond to it. I guess what I’m saying is I’m not clear what’s missing: do we not know what syntax we’d use, or do we just not know how to implement that syntax, or do we just not even know all the implications of adding this?<br></p><p>-WIl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Auto-convert for numbers when safe</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  7, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 1:26 AM, William Shipley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Chris Lattner discussed this yesterday. I can’t find it in the online archives, so I’ll copy-and-paste it here:<br>&gt; <br>&gt; Right, I read Chris’s message and was trying to respond to it. I guess what I’m saying is I’m not clear what’s missing: do we not know what syntax we’d use, or do we just not know how to implement that syntax, or do we just not even know all the implications of adding this?<br></p><p>The “first step” in making progress on this is to fix the existing constraint solver problems (and the emergent surprising user behavior) handling of optionals and IUOs.  Until that gets resolved, it doesn’t make sense to dig a deeper hole :-)<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
