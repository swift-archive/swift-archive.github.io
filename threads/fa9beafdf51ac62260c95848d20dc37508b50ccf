<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>July 27, 2016 at 12:00:00pm</p></header><div class="content"><p>Dear friends,<br></p><p>Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br></p><p>SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>SE-0042 - Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the stdlib &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>SE-0068 - Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>SE-0075 - Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>SE-0080 - Failable Numeric Conversion Initializers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>SE-0082 - Package Manager Editable Packages &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>SE-0089 - Renaming String.init&lt;T&gt;(_: T) &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>SE-0096 - Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>SE-0101 - Reconfiguring sizeof and related functions into a unified MemoryLayout struct &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>SE-0110 - Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>SE-0111 - Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>SE-0120 - Revise partition Method Signature &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>These are all changes the community has approved for Swift but did not make today&#39;s cutoff. Some of these proposals have implementations actively underway. For those proposals already in active development — and near completion — I am okay with extending the deadline for those changes to Friday, July 29. Such changes need to be approved by the release manager (myself) and should be merged into master via a pull request. When creating the pull request, please assign it to me (tkremenek), and mention the pull request on the swift-dev mailing list as well with the SE number in the email title.<br></p><p>The rest of the unimplemented proposals do not make Swift 3. This leaves us with the question of what to do with them. These proposals represent the known and reviewed changes we want to make to Swift, but inevitably there will also be changes that we don&#39;t even know about today that we will want to take into Swift that can impact core source stability. That said, we also have a very strong desire to maintain source compatibility with Swift 3 and Swift 4 as much as possible to provide some stability for which Swift users to build upon. The challenge of course is reconciling these diametrically opposing goals: maintaining source stability while having the ability to incorporate more core (and important) language changes that are possibly source-breaking.<br></p><p>The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br></p><p>While the exact details of how we will accomplish this feat are still being discussed, here is a sketch of how this will likely work in the Swift 4 timeframe. The key enabler is a new compiler flag that indicates the language version to compile for (e.g., similar to the clang -std=c99 flag). The compiler flag will be provided by the build system you are using (e.g., Xcode, SwiftPM, etc.) on a per-module basis:<br></p><p>For language syntax/semantics, the compiler can use the language mode to properly implement the language version being used by a module.<br></p><p>For the Standard Library, additive and subtractive changes are easily handled (the former by just adding them, the later by using deprecation techniques). For semantics changes, things are much more complicated, and will need further study.<br></p><p>The great thing about this approach is that a single Swift 4 compiler is building all of the sources in an application. This allows us to roll out this approach before achieving full ABI stability — something that will be a goal for Swift 4, but is impractical to achieve for a Swift 3.x release. It also provides us a general framework in the future for handling source compatibility as Swift evolves.<br></p><p>To make this more concrete, suppose an application is written to use Swift 4, but uses packages via SwiftPM that are written using Swift 3. A single compiler would build both the app and the packages — thus ensuring that all the compiled sources are binary compatible. It would not be the case that a framework built with the Swift 3 compiler could be used by an app built using the Swift 4 compiler. That kind of library binary stability (ABI) will be a key goal of the Swift 4 release.<br></p><p>These constraints mentioned above will serve as scaffolding for Swift 4 development. Discussion about Swift 4 commences on Monday. Ahead of that, Chris Lattner plans to send out thoughts from the Core team on some of the known key goals (and non-goals) for the release. In the meantime, the focus over the next couple days should be taking stock of what has landed for Swift 3 and to see if any of the proposals mentioned above are close to being completed or are truly out of scope.<br></p><p>Thank you again to everyone for making Swift 3 such as fantastic release!<br></p><p>Ted<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160727/fa9b0ccf/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>July 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 12:38 PM, Ted Kremenek via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>These two are implemented. Should I prepare a PR to update the proposals?<br></p><p>Slava<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/5fc2c520/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&lt;dropping swift-evolution-announce&gt;<br></p><p>&gt; On Jul 27, 2016, at 12:45 PM, Slava Pestov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 12:38 PM, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt; These two are implemented. Should I prepare a PR to update the proposals?<br></p><p>Yes, please.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/66544193/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>July 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 12:50 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; &lt;dropping swift-evolution-announce&gt;<br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 12:45 PM, Slava Pestov via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 27, 2016, at 12:38 PM, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt;&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;&gt; These two are implemented. Should I prepare a PR to update the proposals?<br>&gt; <br>&gt; Yes, please.<br>&gt; <br>&gt; -Chris<br></p><p>Please also update proposals.xml.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/5cc9d609/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>Associating some proposals with their current implementers for the record…<br></p><p>&gt; On Jul 27, 2016, at 12:38, Ted Kremenek via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Dear friends,<br>&gt; <br>&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt; <br>&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;This one is nearly done (me).<br></p><p><br>&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;I believe this is what John’s working on at the moment.<br></p><p><br>&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;David was looking at this, but I’m not sure if it’s done.<br></p><p>&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;I think we can call this done.<br></p><p>&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;This is implemented; it’s just still marked as a warning rather than an error to use ‘where’.<br></p><p>&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;MichaelI has been working on this.<br></p><p>&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/5e637bba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5671de122b21fc1223a7cdb15fbc59e?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>ematejska at apple.com</string> &lt;ematejska at apple.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 1:21 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Associating some proposals with their current implementers for the record…<br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 12:38, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dear friends,<br>&gt;&gt; <br>&gt;&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt; <br>&gt;&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;This one is nearly done (me).<br>&gt; <br>&gt; <br>&gt;&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;I believe this is what John’s working on at the moment.<br></p><p>According to John this is done.<br>&gt; <br>&gt; <br>&gt;&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;David was looking at this, but I’m not sure if it’s done.<br></p><p>According to David, this is done.<br></p><p>Thanks,<br>Ewa<br>&gt; <br>&gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;I think we can call this done.<br>&gt; <br>&gt;&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;This is implemented; it’s just still marked as a warning rather than an error to use ‘where’.<br>&gt; <br>&gt;&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;MichaelI has been working on this.<br>&gt; <br>&gt;&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/8538c128/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 1:21 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Associating some proposals with their current implementers for the record…<br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 12:38, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dear friends,<br>&gt;&gt; <br>&gt;&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt; <br>&gt;&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;This one is nearly done (me).<br>&gt; <br>&gt; <br>&gt;&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;I believe this is what John’s working on at the moment.<br>&gt; <br>&gt; <br>&gt;&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;David was looking at this, but I’m not sure if it’s done.<br>&gt; <br>&gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;I think we can call this done.<br>&gt; <br>&gt;&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;This is implemented; it’s just still marked as a warning rather than an error to use ‘where’.<br>&gt; <br>&gt;&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;MichaelI has been working on this.<br>&gt; <br>&gt;&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br></p><p>Also:<br></p><p>SE-0111 - Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>I’m working on this one. This proposal is in an unfortunate position: doing it requires major changes to the type checker and ASTs. If we don’t get it in Swift 3, it will be extremely hard to implement in a Swift 4 compiler that needs to provide backward compatibility for Swift 3 code.<br></p><p>Let’s just hope I get it done quick ;)<br></p><p>SE-0110 - Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>I’m sorta hoping this falls out of a complete implementation SE-0111, but we’ll see.<br></p><p>	- Doug<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/481f7a96/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8f1a9db0e26bb3e069fa7a0932e3cd85?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Roman Levenstein</string> &lt;rlevenstein at apple.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>SE-0130 - Replace repeating Character and UnicodeScalar forms of String.init &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0130-string-initializers-cleanup.md&gt;<br></p><p>This one was implemented by me. It was committed yesterday. <br>And, BTW, it was not mentioned in the original list of proposals sent out by Ted.<br></p><p>SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>I’ve implemented  the unsafeAddress(of:) part. It was committed yesterday.<br>Erik and Bob were working on other parts of it. I don’t know for sure if all sub-tasks are completed by now.<br></p><p>-Roman<br></p><p>&gt; On Jul 27, 2016, at 1:21 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Associating some proposals with their current implementers for the record…<br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 12:38, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dear friends,<br>&gt;&gt; <br>&gt;&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt; <br>&gt;&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;This one is nearly done (me).<br>&gt; <br>&gt; <br>&gt;&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;I believe this is what John’s working on at the moment.<br>&gt; <br>&gt; <br>&gt;&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;David was looking at this, but I’m not sure if it’s done.<br>&gt; <br>&gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;I think we can call this done.<br>&gt; <br>&gt;&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;This is implemented; it’s just still marked as a warning rather than an error to use ‘where’.<br>&gt; <br>&gt;&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;MichaelI has been working on this.<br>&gt; <br>&gt;&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/f22f5cf6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 2:01 PM, Roman Levenstein &lt;rlevenstein at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; SE-0130 - Replace repeating Character and UnicodeScalar forms of String.init &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0130-string-initializers-cleanup.md&gt;<br>&gt; <br>&gt; This one was implemented by me. It was committed yesterday. <br>&gt; And, BTW, it was not mentioned in the original list of proposals sent out by Ted.<br>&gt; <br>&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt; I’ve implemented  the unsafeAddress(of:) part. It was committed yesterday.<br>&gt; Erik and Bob were working on other parts of it. I don’t know for sure if all sub-tasks are completed by now.<br></p><p>I think that all tasks of SE-0127 are completed. Bob merged all PR related to the other 3 parts yesterday.<br></p><p>&gt; <br>&gt; -Roman<br>&gt; <br>&gt;&gt; On Jul 27, 2016, at 1:21 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Associating some proposals with their current implementers for the record…<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 27, 2016, at 12:38, Ted Kremenek via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dear friends,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;This one is nearly done (me).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;I believe this is what John’s working on at the moment.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;David was looking at this, but I’m not sure if it’s done.<br>&gt;&gt; <br>&gt;&gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;I think we can call this done.<br>&gt;&gt; <br>&gt;&gt;&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;This is implemented; it’s just still marked as a warning rather than an error to use ‘where’.<br>&gt;&gt; <br>&gt;&gt;&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;MichaelI has been working on this.<br>&gt;&gt; <br>&gt;&gt;&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/8f409b11/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 1:21 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;Andy has been working on this.<br></p><p>I still need to land one major source-breaking for UnsafePointer conversion, along with a sweeping stdlib update. However, I can’t land those until I’ve updated corelibs and other repositories.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/d90fa409/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;We used to have a prototype implementation of this, but it was removed (by mistake?) by @moiseev a couple of weeks ago:<br></p><p>https://github.com/apple/swift/commit/61d1c599e8c90fdc7cc28e0fb8116a1dec883582#diff-c90eac1269a3e588de06d5a8d1812c48 &lt;https://github.com/apple/swift/commit/61d1c599e8c90fdc7cc28e0fb8116a1dec883582#diff-c90eac1269a3e588de06d5a8d1812c48&gt;<br></p><p>It would be a shame if it didn’t get in. I’d be happy to volunteer towards anything outstanding (tests, I’m guessing?)<br></p><p>Karl<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/b8cce1c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;We used to have a prototype implementation of this, but it was removed (by mistake?) by @moiseev a couple of weeks ago:<br></p><p>https://github.com/apple/swift/commit/61d1c599e8c90fdc7cc28e0fb8116a1dec883582#diff-c90eac1269a3e588de06d5a8d1812c48 &lt;https://github.com/apple/swift/commit/61d1c599e8c90fdc7cc28e0fb8116a1dec883582#diff-c90eac1269a3e588de06d5a8d1812c48&gt;<br></p><p>It would be a shame if it didn’t get in. I’d be happy to volunteer towards anything outstanding (tests, I’m guessing?)<br></p><p>Karl<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/018b7e27/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt;<br>&gt;<br>&gt;    - SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;<br>&gt;<br>Has anyone worked on this? I have some time in the next couple of days and<br>might be able to come up with an implementation in time.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/5b34d5dd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>July 27, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 27 Jul 2016, at 21:52, Jacob Bandes-Storch wrote:<br>&gt; <br>&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T) &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt; <br>&gt; Has anyone worked on this? I have some time in the next couple of days and might be able to come up with an implementation in time.<br></p><p>&lt;https://github.com/apple/swift/pull/3574&gt;<br></p><p>-- Ben<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/c13d568f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] End of source-breaking changes for Swift 3</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 27, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 12:38 PM, Ted Kremenek &lt;kremenek at apple.com&gt; wrote:<br>&gt; <br>&gt; 	• SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the stdlib<br></p><p>The associated bug, SR-1516, is assigned to Russ Bishop, who said in late June that he had the non-lazy versions implemented.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 27, 2016 at 10:00:00pm</p></header><div class="content"><p>I noticed that while SE-0091 appears to be implemented (from a cursory<br>glance at some of the affected types like Equatable and String), it looks<br>like the named methods are still part of the FloatingPoint protocol and<br>they still use global operators.<br></p><p>Is anyone tracking the migration of that protocol (and possibly also the<br>new Integer protocols) to use the new operator technique? (I have to<br>apologize for not being able to update the proposal with another PR that<br>listed all those changes—my free time outside my day job has been<br>significantly reduced lately.)<br></p><p><br>On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Dear friends,<br>&gt;<br>&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt; changes for Swift 3. It has been an incredible ride to this point, so let&#39;s<br>&gt; take stock of where we are. Here are the list of currently accepted — but<br>&gt; not yet (fully) implemented — evolution proposals (this is drawn from the<br>&gt; &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution<br>&gt; &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;<br>&gt;    - SE-0025 - Scoped Access Level<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt;    - SE-0042 - Flattening the function type of unapplied method references<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;    - SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the<br>&gt;    stdlib<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;    - SE-0068 - Expanding Swift Self to class members and value types<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt;    - SE-0075 - Adding a Build Configuration Import Test<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt;    - SE-0077 - Improved operator declarations<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt;    - SE-0080 - Failable Numeric Conversion Initializers<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;    - SE-0081 - Move where clause to end of declaration<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;    - SE-0082 - Package Manager Editable Packages<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt;    - SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt;    - SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;    - SE-0092 - Typealiases in protocols and protocol extensions<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;    - SE-0096 - Converting dynamicType from a property to an operator<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt;    - SE-0099 - Restructuring Condition Clauses<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt;    - SE-0101 - Reconfiguring sizeof and related functions into a unified<br>&gt;    MemoryLayout struct<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt;    - SE-0102 - Remove @noreturn attribute and introduce an empty Never<br>&gt;     type<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;    - SE-0103 - Make non-escaping closures the default<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt;    - SE-0104 - Protocol-oriented integers<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;    - SE-0107 - UnsafeRawPointer API<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;    - SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt;    function types<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;    - SE-0111 - Remove type system significance of function argument labels<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;    - SE-0120 - Revise partition Method Signature<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt;    - SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt;<br>&gt; These are all changes the community has approved for Swift but did not<br>&gt; make today&#39;s cutoff. Some of these proposals have implementations actively<br>&gt; underway. For those proposals already in active development — *and near<br>&gt; completion* — I am okay with extending the deadline for those changes to *Friday,<br>&gt; July 29*. Such changes need to be approved by the release manager<br>&gt; (myself) and should be merged into master via a pull request. When<br>&gt; creating the pull request, please assign it to me (tkremenek), and<br>&gt; mention the pull request on the swift-dev mailing list as well with the<br>&gt; SE number in the email title.<br>&gt;<br>&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves<br>&gt; us with the question of what to do with them. These proposals represent the<br>&gt; known and reviewed changes we want to make to Swift, but inevitably there<br>&gt; will *also* be changes that we don&#39;t even know about today that we will<br>&gt; want to take into Swift that can impact core source stability. That said,<br>&gt; we also have a very strong desire to maintain source compatibility with<br>&gt; Swift 3 and Swift 4 as much as possible to provide some stability for which<br>&gt; Swift users to build upon. The challenge of course is reconciling these<br>&gt; diametrically opposing goals: maintaining source stability while having the<br>&gt; ability to incorporate more core (and important) language changes that are<br>&gt; possibly source-breaking.<br>&gt;<br>&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot;<br>&gt; for Swift 3 to be source compatible with Swift 4 and later releases going<br>&gt; forward. Our goal is to allow app developers to combine a mix of Swift<br>&gt; modules (e.g., SwiftPM packages), where each module is known to compile<br>&gt; with a specific version of the language (module A works with Swift 3,<br>&gt; module B works with Swift 3.1, etc.), then combine those modules into a<br>&gt; single binary. The key feature is that a module can be migrated from Swift<br>&gt; 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt;<br>&gt; While the exact details of how we will accomplish this feat are still<br>&gt; being discussed, here is a sketch of how this will likely work in the Swift<br>&gt; 4 timeframe. The key enabler is a new compiler flag that indicates the<br>&gt; language version to compile for (e.g., similar to the clang -std=c99 flag).<br>&gt; The compiler flag will be provided by the build system you are using (e.g.,<br>&gt; Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt;<br>&gt;    -<br>&gt;<br>&gt;    For language syntax/semantics, the compiler can use the language mode<br>&gt;    to properly implement the language version being used by a module.<br>&gt;    -<br>&gt;<br>&gt;    For the Standard Library, additive and subtractive changes are easily<br>&gt;    handled (the former by just adding them, the later by using deprecation<br>&gt;    techniques). For semantics changes, things are much more complicated, and<br>&gt;    will need further study.<br>&gt;<br>&gt; The great thing about this approach is that a single Swift 4 compiler is<br>&gt; building all of the sources in an application. This allows us to roll out<br>&gt; this approach before achieving full ABI stability — something that will be<br>&gt; a goal for Swift 4, but is impractical to achieve for a Swift 3.x release.<br>&gt; It also provides us a general framework in the future for handling source<br>&gt; compatibility as Swift evolves.<br>&gt;<br>&gt; To make this more concrete, suppose an application is written to use Swift<br>&gt; 4, but uses packages via SwiftPM that are written using Swift 3. A single<br>&gt; compiler would build both the app and the packages — thus ensuring that all<br>&gt; the compiled sources are binary compatible. It would not be the case that a<br>&gt; framework built with the Swift 3 compiler could be used by an app built<br>&gt; using the Swift 4 compiler. That kind of library binary stability (ABI)<br>&gt; will be a key goal of the Swift 4 release.<br>&gt;<br>&gt; These constraints mentioned above will serve as scaffolding for Swift 4<br>&gt; development. Discussion about Swift 4 commences on Monday. Ahead of that,<br>&gt; Chris Lattner plans to send out thoughts from the Core team on some of the<br>&gt; known key goals (and non-goals) for the release. In the meantime, the focus<br>&gt; over the next couple days should be taking stock of what has landed for<br>&gt; Swift 3 and to see if any of the proposals mentioned above are close to<br>&gt; being completed or are truly out of scope.<br>&gt;<br>&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt;<br>&gt; Ted<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/22950045/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>July 27, 2016 at 03:00:00pm</p></header><div class="content"><p>- swift-evolution, swift-evolution-announce<br></p><p>Dave/Max: can you speak this?<br></p><p><br>&gt; On Jul 27, 2016, at 3:17 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt; <br>&gt; I noticed that while SE-0091 appears to be implemented (from a cursory glance at some of the affected types like Equatable and String), it looks like the named methods are still part of the FloatingPoint protocol and they still use global operators.<br>&gt; <br>&gt; Is anyone tracking the migration of that protocol (and possibly also the new Integer protocols) to use the new operator technique? (I have to apologize for not being able to update the proposal with another PR that listed all those changes—my free time outside my day job has been significantly reduced lately.)<br>&gt; <br>&gt; <br>&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Dear friends,<br>&gt; <br>&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt; <br>&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt; SE-0042 - Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt; SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the stdlib &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt; SE-0068 - Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt; SE-0075 - Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; SE-0080 - Failable Numeric Conversion Initializers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt; SE-0082 - Package Manager Editable Packages &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T) &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt; SE-0096 - Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt; SE-0101 - Reconfiguring sizeof and related functions into a unified MemoryLayout struct &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt; SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; SE-0110 - Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt; SE-0111 - Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt; SE-0120 - Revise partition Method Signature &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt; These are all changes the community has approved for Swift but did not make today&#39;s cutoff. Some of these proposals have implementations actively underway. For those proposals already in active development — and near completion — I am okay with extending the deadline for those changes to Friday, July 29. Such changes need to be approved by the release manager (myself) and should be merged into master via a pull request. When creating the pull request, please assign it to me (tkremenek), and mention the pull request on the swift-dev mailing list as well with the SE number in the email title.<br>&gt; <br>&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves us with the question of what to do with them. These proposals represent the known and reviewed changes we want to make to Swift, but inevitably there will also be changes that we don&#39;t even know about today that we will want to take into Swift that can impact core source stability. That said, we also have a very strong desire to maintain source compatibility with Swift 3 and Swift 4 as much as possible to provide some stability for which Swift users to build upon. The challenge of course is reconciling these diametrically opposing goals: maintaining source stability while having the ability to incorporate more core (and important) language changes that are possibly source-breaking.<br>&gt; <br>&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt; <br>&gt; While the exact details of how we will accomplish this feat are still being discussed, here is a sketch of how this will likely work in the Swift 4 timeframe. The key enabler is a new compiler flag that indicates the language version to compile for (e.g., similar to the clang -std=c99 flag). The compiler flag will be provided by the build system you are using (e.g., Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt; <br>&gt; For language syntax/semantics, the compiler can use the language mode to properly implement the language version being used by a module.<br>&gt; <br>&gt; For the Standard Library, additive and subtractive changes are easily handled (the former by just adding them, the later by using deprecation techniques). For semantics changes, things are much more complicated, and will need further study.<br>&gt; <br>&gt; The great thing about this approach is that a single Swift 4 compiler is building all of the sources in an application. This allows us to roll out this approach before achieving full ABI stability — something that will be a goal for Swift 4, but is impractical to achieve for a Swift 3.x release. It also provides us a general framework in the future for handling source compatibility as Swift evolves.<br>&gt; <br>&gt; To make this more concrete, suppose an application is written to use Swift 4, but uses packages via SwiftPM that are written using Swift 3. A single compiler would build both the app and the packages — thus ensuring that all the compiled sources are binary compatible. It would not be the case that a framework built with the Swift 3 compiler could be used by an app built using the Swift 4 compiler. That kind of library binary stability (ABI) will be a key goal of the Swift 4 release.<br>&gt; <br>&gt; These constraints mentioned above will serve as scaffolding for Swift 4 development. Discussion about Swift 4 commences on Monday. Ahead of that, Chris Lattner plans to send out thoughts from the Core team on some of the known key goals (and non-goals) for the release. In the meantime, the focus over the next couple days should be taking stock of what has landed for Swift 3 and to see if any of the proposals mentioned above are close to being completed or are truly out of scope.<br>&gt; <br>&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/d42d8d90/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 27, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Jul 27 2016, Ted Kremenek &lt;kremenek-AT-apple.com&gt; wrote:<br></p><p>&gt; - swift-evolution, swift-evolution-announce<br>&gt;<br>&gt; Dave/Max: can you speak this?<br></p><p>&gt;&gt; On Jul 27, 2016, at 3:17 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I noticed that while SE-0091 appears to be implemented (from a<br>&gt;&gt; cursory glance at some of the affected types like Equatable and<br>&gt;&gt; String), it looks like the named methods are still part of the<br>&gt;&gt; FloatingPoint protocol and they still use global operators.<br>&gt;&gt; <br>&gt;&gt; Is anyone tracking the migration of that protocol (and possibly also<br>&gt;&gt; the new Integer protocols) to use the new operator technique? (I<br>&gt;&gt; have to apologize for not being able to update the proposal with<br>&gt;&gt; another PR that listed all those changes—my free time outside my day<br>&gt;&gt; job has been significantly reduced lately.)<br></p><p>I think we view those changes as implicitly approved along with SE-0091.<br>I was working on making them but we&#39;ve run into bugs with the feature&#39;s<br>implementation during the migration.  When those are straightened out,<br>we can move forward with that cleanup.<br></p><p>&gt;&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; Dear friends,<br>&gt;&gt; <br>&gt;&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt;&gt; changes for Swift 3. It has been an incredible ride to this point,<br>&gt;&gt; so let&#39;s take stock of where we are. Here are the list of currently<br>&gt;&gt; accepted — but not yet (fully) implemented — evolution proposals<br>&gt;&gt; (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot;<br>&gt;&gt; proposals from the swift-evolution<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt; <br>&gt;&gt; SE-0025 - Scoped Access Level<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt;&gt; SE-0042 - Flattening the function type of unapplied method<br>&gt;&gt; references<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;&gt; SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the<br>&gt;&gt; stdlib<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt; SE-0068 - Expanding Swift Self to class members and value types<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt;&gt; SE-0075 - Adding a Build Configuration Import Test<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt;&gt; SE-0077 - Improved operator declarations<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt;&gt; SE-0080 - Failable Numeric Conversion Initializers<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt; SE-0081 - Move where clause to end of declaration<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;&gt; SE-0082 - Package Manager Editable Packages<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt;&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;&gt; SE-0092 - Typealiases in protocols and protocol extensions<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt; SE-0096 - Converting dynamicType from a property to an operator<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt;&gt; SE-0099 - Restructuring Condition Clauses<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt;&gt; SE-0101 - Reconfiguring sizeof and related functions into a<br>&gt;&gt; unified MemoryLayout struct<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt;&gt; SE-0102 - Remove @noreturn attribute and introduce an<br>&gt;&gt; empty Never type<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;&gt; SE-0103 - Make non-escaping closures the default<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt;&gt; SE-0104 - Protocol-oriented integers<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;&gt; SE-0107 - UnsafeRawPointer API<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;&gt; SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt;&gt; function types<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;&gt; SE-0111 - Remove type system significance of function argument<br>&gt;&gt; labels<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt; SE-0120 - Revise partition Method Signature<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt;&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt;&gt; These are all changes the community has approved for Swift but did<br>&gt;&gt; not make today&#39;s cutoff. Some of these proposals have<br>&gt;&gt; implementations actively underway. For those proposals already in<br>&gt;&gt; active development — and near completion — I am okay with extending<br>&gt;&gt; the deadline for those changes to Friday, July 29. Such changes need<br>&gt;&gt; to be approved by the release manager (myself) and should be merged<br>&gt;&gt; into master via a pull request. When creating the pull request,<br>&gt;&gt; please assign it to me (tkremenek), and mention the pull request on<br>&gt;&gt; the swift-dev mailing list as well with the SE number in the email<br>&gt;&gt; title.<br>&gt;&gt; <br>&gt;&gt; The rest of the unimplemented proposals do not make Swift 3. This<br>&gt;&gt; leaves us with the question of what to do with them. These proposals<br>&gt;&gt; represent the known and reviewed changes we want to make to Swift,<br>&gt;&gt; but inevitably there will also be changes that we don&#39;t even know<br>&gt;&gt; about today that we will want to take into Swift that can impact<br>&gt;&gt; core source stability. That said, we also have a very strong desire<br>&gt;&gt; to maintain source compatibility with Swift 3 and Swift 4 as much as<br>&gt;&gt; possible to provide some stability for which Swift users to build<br>&gt;&gt; upon. The challenge of course is reconciling these diametrically<br>&gt;&gt; opposing goals: maintaining source stability while having the<br>&gt;&gt; ability to incorporate more core (and important) language changes<br>&gt;&gt; that are possibly source-breaking.<br>&gt;&gt; <br>&gt;&gt; The Swift team at Apple has reflected on this and decided what it<br>&gt;&gt; &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later<br>&gt;&gt; releases going forward. Our goal is to allow app developers to<br>&gt;&gt; combine a mix of Swift modules (e.g., SwiftPM packages), where each<br>&gt;&gt; module is known to compile with a specific version of the language<br>&gt;&gt; (module A works with Swift 3, module B works with Swift 3.1, etc.),<br>&gt;&gt; then combine those modules into a single binary. The key feature is<br>&gt;&gt; that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond)<br>&gt;&gt; independently of its dependencies.<br>&gt;&gt; <br>&gt;&gt; While the exact details of how we will accomplish this feat are<br>&gt;&gt; still being discussed, here is a sketch of how this will likely work<br>&gt;&gt; in the Swift 4 timeframe. The key enabler is a new compiler flag<br>&gt;&gt; that indicates the language version to compile for (e.g., similar to<br>&gt;&gt; the clang -std=c99 flag). The compiler flag will be provided by the<br>&gt;&gt; build system you are using (e.g., Xcode, SwiftPM, etc.) on a<br>&gt;&gt; per-module basis:<br>&gt;&gt; <br>&gt;&gt; For language syntax/semantics, the compiler can use the language<br>&gt;&gt; mode to properly implement the language version being used by a<br>&gt;&gt; module.<br>&gt;&gt; <br>&gt;&gt; For the Standard Library, additive and subtractive changes are<br>&gt;&gt; easily handled (the former by just adding them, the later by using<br>&gt;&gt; deprecation techniques). For semantics changes, things are much more<br>&gt;&gt; complicated, and will need further study.<br>&gt;&gt; <br>&gt;&gt; The great thing about this approach is that a single Swift 4<br>&gt;&gt; compiler is building all of the sources in an application. This<br>&gt;&gt; allows us to roll out this approach before achieving full ABI<br>&gt;&gt; stability — something that will be a goal for Swift 4, but is<br>&gt;&gt; impractical to achieve for a Swift 3.x release. It also provides us<br>&gt;&gt; a general framework in the future for handling source compatibility<br>&gt;&gt; as Swift evolves.<br>&gt;&gt; <br>&gt;&gt; To make this more concrete, suppose an application is written to use<br>&gt;&gt; Swift 4, but uses packages via SwiftPM that are written using Swift<br>&gt;&gt; 3. A single compiler would build both the app and the packages —<br>&gt;&gt; thus ensuring that all the compiled sources are binary<br>&gt;&gt; compatible. It would not be the case that a framework built with the<br>&gt;&gt; Swift 3 compiler could be used by an app built using the Swift 4<br>&gt;&gt; compiler. That kind of library binary stability (ABI) will be a key<br>&gt;&gt; goal of the Swift 4 release.<br>&gt;&gt; <br>&gt;&gt; These constraints mentioned above will serve as scaffolding for<br>&gt;&gt; Swift 4 development. Discussion about Swift 4 commences on<br>&gt;&gt; Monday. Ahead of that, Chris Lattner plans to send out thoughts from<br>&gt;&gt; the Core team on some of the known key goals (and non-goals) for the<br>&gt;&gt; release. In the meantime, the focus over the next couple days should<br>&gt;&gt; be taking stock of what has landed for Swift 3 and to see if any of<br>&gt;&gt; the proposals mentioned above are close to being completed or are<br>&gt;&gt; truly out of scope.<br>&gt;&gt; <br>&gt;&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt;&gt; <br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution] End of source-breaking changes for Swift 3</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 27, 2016 at 11:00:00pm</p></header><div class="content"><p>On Wed, Jul 27, 2016 at 3:58 PM Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Jul 27 2016, Ted Kremenek &lt;kremenek-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt; - swift-evolution, swift-evolution-announce<br>&gt; &gt;<br>&gt; &gt; Dave/Max: can you speak this?<br>&gt;<br>&gt; &gt;&gt; On Jul 27, 2016, at 3:17 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I noticed that while SE-0091 appears to be implemented (from a<br>&gt; &gt;&gt; cursory glance at some of the affected types like Equatable and<br>&gt; &gt;&gt; String), it looks like the named methods are still part of the<br>&gt; &gt;&gt; FloatingPoint protocol and they still use global operators.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Is anyone tracking the migration of that protocol (and possibly also<br>&gt; &gt;&gt; the new Integer protocols) to use the new operator technique? (I<br>&gt; &gt;&gt; have to apologize for not being able to update the proposal with<br>&gt; &gt;&gt; another PR that listed all those changes—my free time outside my day<br>&gt; &gt;&gt; job has been significantly reduced lately.)<br>&gt;<br>&gt; I think we view those changes as implicitly approved along with SE-0091.<br>&gt; I was working on making them but we&#39;ve run into bugs with the feature&#39;s<br>&gt; implementation during the migration.  When those are straightened out,<br>&gt; we can move forward with that cleanup.<br>&gt;<br></p><p>That&#39;s good to hear. Thanks for confirming!<br></p><p><br></p><p>&gt;<br>&gt; &gt;&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; Dear friends,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt; &gt;&gt; changes for Swift 3. It has been an incredible ride to this point,<br>&gt; &gt;&gt; so let&#39;s take stock of where we are. Here are the list of currently<br>&gt; &gt;&gt; accepted — but not yet (fully) implemented — evolution proposals<br>&gt; &gt;&gt; (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot;<br>&gt; &gt;&gt; proposals from the swift-evolution<br>&gt; &gt;&gt; &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; SE-0025 - Scoped Access Level<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0042 - Flattening the function type of unapplied method<br>&gt; &gt;&gt; references<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the<br>&gt; &gt;&gt; stdlib<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0068 - Expanding Swift Self to class members and value types<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0075 - Adding a Build Configuration Import Test<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0077 - Improved operator declarations<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0080 - Failable Numeric Conversion Initializers<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0081 - Move where clause to end of declaration<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0082 - Package Manager Editable Packages<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0092 - Typealiases in protocols and protocol extensions<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0096 - Converting dynamicType from a property to an operator<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0099 - Restructuring Condition Clauses<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0101 - Reconfiguring sizeof and related functions into a<br>&gt; &gt;&gt; unified MemoryLayout struct<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0102 - Remove @noreturn attribute and introduce an<br>&gt; &gt;&gt; empty Never type<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0103 - Make non-escaping closures the default<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0104 - Protocol-oriented integers<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0107 - UnsafeRawPointer API<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt; &gt;&gt; function types<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0111 - Remove type system significance of function argument<br>&gt; &gt;&gt; labels<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0120 - Revise partition Method Signature<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md<br>&gt; &gt;<br>&gt; &gt;&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt; &gt;&gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md<br>&gt; &gt;<br>&gt; &gt;&gt; These are all changes the community has approved for Swift but did<br>&gt; &gt;&gt; not make today&#39;s cutoff. Some of these proposals have<br>&gt; &gt;&gt; implementations actively underway. For those proposals already in<br>&gt; &gt;&gt; active development — and near completion — I am okay with extending<br>&gt; &gt;&gt; the deadline for those changes to Friday, July 29. Such changes need<br>&gt; &gt;&gt; to be approved by the release manager (myself) and should be merged<br>&gt; &gt;&gt; into master via a pull request. When creating the pull request,<br>&gt; &gt;&gt; please assign it to me (tkremenek), and mention the pull request on<br>&gt; &gt;&gt; the swift-dev mailing list as well with the SE number in the email<br>&gt; &gt;&gt; title.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The rest of the unimplemented proposals do not make Swift 3. This<br>&gt; &gt;&gt; leaves us with the question of what to do with them. These proposals<br>&gt; &gt;&gt; represent the known and reviewed changes we want to make to Swift,<br>&gt; &gt;&gt; but inevitably there will also be changes that we don&#39;t even know<br>&gt; &gt;&gt; about today that we will want to take into Swift that can impact<br>&gt; &gt;&gt; core source stability. That said, we also have a very strong desire<br>&gt; &gt;&gt; to maintain source compatibility with Swift 3 and Swift 4 as much as<br>&gt; &gt;&gt; possible to provide some stability for which Swift users to build<br>&gt; &gt;&gt; upon. The challenge of course is reconciling these diametrically<br>&gt; &gt;&gt; opposing goals: maintaining source stability while having the<br>&gt; &gt;&gt; ability to incorporate more core (and important) language changes<br>&gt; &gt;&gt; that are possibly source-breaking.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The Swift team at Apple has reflected on this and decided what it<br>&gt; &gt;&gt; &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later<br>&gt; &gt;&gt; releases going forward. Our goal is to allow app developers to<br>&gt; &gt;&gt; combine a mix of Swift modules (e.g., SwiftPM packages), where each<br>&gt; &gt;&gt; module is known to compile with a specific version of the language<br>&gt; &gt;&gt; (module A works with Swift 3, module B works with Swift 3.1, etc.),<br>&gt; &gt;&gt; then combine those modules into a single binary. The key feature is<br>&gt; &gt;&gt; that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond)<br>&gt; &gt;&gt; independently of its dependencies.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; While the exact details of how we will accomplish this feat are<br>&gt; &gt;&gt; still being discussed, here is a sketch of how this will likely work<br>&gt; &gt;&gt; in the Swift 4 timeframe. The key enabler is a new compiler flag<br>&gt; &gt;&gt; that indicates the language version to compile for (e.g., similar to<br>&gt; &gt;&gt; the clang -std=c99 flag). The compiler flag will be provided by the<br>&gt; &gt;&gt; build system you are using (e.g., Xcode, SwiftPM, etc.) on a<br>&gt; &gt;&gt; per-module basis:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; For language syntax/semantics, the compiler can use the language<br>&gt; &gt;&gt; mode to properly implement the language version being used by a<br>&gt; &gt;&gt; module.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; For the Standard Library, additive and subtractive changes are<br>&gt; &gt;&gt; easily handled (the former by just adding them, the later by using<br>&gt; &gt;&gt; deprecation techniques). For semantics changes, things are much more<br>&gt; &gt;&gt; complicated, and will need further study.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The great thing about this approach is that a single Swift 4<br>&gt; &gt;&gt; compiler is building all of the sources in an application. This<br>&gt; &gt;&gt; allows us to roll out this approach before achieving full ABI<br>&gt; &gt;&gt; stability — something that will be a goal for Swift 4, but is<br>&gt; &gt;&gt; impractical to achieve for a Swift 3.x release. It also provides us<br>&gt; &gt;&gt; a general framework in the future for handling source compatibility<br>&gt; &gt;&gt; as Swift evolves.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; To make this more concrete, suppose an application is written to use<br>&gt; &gt;&gt; Swift 4, but uses packages via SwiftPM that are written using Swift<br>&gt; &gt;&gt; 3. A single compiler would build both the app and the packages —<br>&gt; &gt;&gt; thus ensuring that all the compiled sources are binary<br>&gt; &gt;&gt; compatible. It would not be the case that a framework built with the<br>&gt; &gt;&gt; Swift 3 compiler could be used by an app built using the Swift 4<br>&gt; &gt;&gt; compiler. That kind of library binary stability (ABI) will be a key<br>&gt; &gt;&gt; goal of the Swift 4 release.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; These constraints mentioned above will serve as scaffolding for<br>&gt; &gt;&gt; Swift 4 development. Discussion about Swift 4 commences on<br>&gt; &gt;&gt; Monday. Ahead of that, Chris Lattner plans to send out thoughts from<br>&gt; &gt;&gt; the Core team on some of the known key goals (and non-goals) for the<br>&gt; &gt;&gt; release. In the meantime, the focus over the next couple days should<br>&gt; &gt;&gt; be taking stock of what has landed for Swift 3 and to see if any of<br>&gt; &gt;&gt; the proposals mentioned above are close to being completed or are<br>&gt; &gt;&gt; truly out of scope.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Thank you again to everyone for making Swift 3 such as fantastic<br>&gt; release!<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Ted<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160727/c3756007/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br>Is SE-0077 going to be implemented for Swift 3?<br></p><p>https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift<br>Does this code actually run?<br></p><p>If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t added<br>latest naming changes. ¯\_(ツ)_/¯<br></p><p>2016-07-28 1:17 GMT+03:00 Tony Allevato via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; I noticed that while SE-0091 appears to be implemented (from a cursory<br>&gt; glance at some of the affected types like Equatable and String), it looks<br>&gt; like the named methods are still part of the FloatingPoint protocol and<br>&gt; they still use global operators.<br>&gt;<br>&gt; Is anyone tracking the migration of that protocol (and possibly also the<br>&gt; new Integer protocols) to use the new operator technique? (I have to<br>&gt; apologize for not being able to update the proposal with another PR that<br>&gt; listed all those changes—my free time outside my day job has been<br>&gt; significantly reduced lately.)<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Dear friends,<br>&gt;&gt;<br>&gt;&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt;&gt; changes for Swift 3. It has been an incredible ride to this point, so let&#39;s<br>&gt;&gt; take stock of where we are. Here are the list of currently accepted — but<br>&gt;&gt; not yet (fully) implemented — evolution proposals (this is drawn from the<br>&gt;&gt; &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the<br>&gt;&gt; swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt;<br>&gt;&gt;    - SE-0025 - Scoped Access Level<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt;&gt;    - SE-0042 - Flattening the function type of unapplied method<br>&gt;&gt;    references<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;&gt;    - SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to<br>&gt;&gt;    the stdlib<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;    - SE-0068 - Expanding Swift Self to class members and value types<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt;&gt;    - SE-0075 - Adding a Build Configuration Import Test<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt;&gt;    - SE-0077 - Improved operator declarations<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt;&gt;    - SE-0080 - Failable Numeric Conversion Initializers<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt;    - SE-0081 - Move where clause to end of declaration<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;&gt;    - SE-0082 - Package Manager Editable Packages<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt;&gt;    - SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt;&gt;    - SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;&gt;    - SE-0092 - Typealiases in protocols and protocol extensions<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt;    - SE-0096 - Converting dynamicType from a property to an operator<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt;&gt;    - SE-0099 - Restructuring Condition Clauses<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt;&gt;    - SE-0101 - Reconfiguring sizeof and related functions into a unified<br>&gt;&gt;    MemoryLayout struct<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt;&gt;    - SE-0102 - Remove @noreturn attribute and introduce an empty Never<br>&gt;&gt;     type<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;&gt;    - SE-0103 - Make non-escaping closures the default<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt;&gt;    - SE-0104 - Protocol-oriented integers<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;&gt;    - SE-0107 - UnsafeRawPointer API<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;&gt;    - SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt;&gt;    function types<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;&gt;    - SE-0111 - Remove type system significance of function argument<br>&gt;&gt;    labels<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;    - SE-0120 - Revise partition Method Signature<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt;&gt;    - SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt;&gt;<br>&gt;&gt; These are all changes the community has approved for Swift but did not<br>&gt;&gt; make today&#39;s cutoff. Some of these proposals have implementations actively<br>&gt;&gt; underway. For those proposals already in active development — *and near<br>&gt;&gt; completion* — I am okay with extending the deadline for those changes to *Friday,<br>&gt;&gt; July 29*. Such changes need to be approved by the release manager<br>&gt;&gt; (myself) and should be merged into master via a pull request. When<br>&gt;&gt; creating the pull request, please assign it to me (tkremenek), and<br>&gt;&gt; mention the pull request on the swift-dev mailing list as well with the<br>&gt;&gt; SE number in the email title.<br>&gt;&gt;<br>&gt;&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves<br>&gt;&gt; us with the question of what to do with them. These proposals represent the<br>&gt;&gt; known and reviewed changes we want to make to Swift, but inevitably there<br>&gt;&gt; will *also* be changes that we don&#39;t even know about today that we will<br>&gt;&gt; want to take into Swift that can impact core source stability. That said,<br>&gt;&gt; we also have a very strong desire to maintain source compatibility with<br>&gt;&gt; Swift 3 and Swift 4 as much as possible to provide some stability for which<br>&gt;&gt; Swift users to build upon. The challenge of course is reconciling these<br>&gt;&gt; diametrically opposing goals: maintaining source stability while having the<br>&gt;&gt; ability to incorporate more core (and important) language changes that are<br>&gt;&gt; possibly source-breaking.<br>&gt;&gt;<br>&gt;&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot;<br>&gt;&gt; for Swift 3 to be source compatible with Swift 4 and later releases going<br>&gt;&gt; forward. Our goal is to allow app developers to combine a mix of Swift<br>&gt;&gt; modules (e.g., SwiftPM packages), where each module is known to compile<br>&gt;&gt; with a specific version of the language (module A works with Swift 3,<br>&gt;&gt; module B works with Swift 3.1, etc.), then combine those modules into a<br>&gt;&gt; single binary. The key feature is that a module can be migrated from Swift<br>&gt;&gt; 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt;&gt;<br>&gt;&gt; While the exact details of how we will accomplish this feat are still<br>&gt;&gt; being discussed, here is a sketch of how this will likely work in the Swift<br>&gt;&gt; 4 timeframe. The key enabler is a new compiler flag that indicates the<br>&gt;&gt; language version to compile for (e.g., similar to the clang -std=c99 flag).<br>&gt;&gt; The compiler flag will be provided by the build system you are using (e.g.,<br>&gt;&gt; Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt;&gt;<br>&gt;&gt;    -<br>&gt;&gt;<br>&gt;&gt;    For language syntax/semantics, the compiler can use the language mode<br>&gt;&gt;    to properly implement the language version being used by a module.<br>&gt;&gt;    -<br>&gt;&gt;<br>&gt;&gt;    For the Standard Library, additive and subtractive changes are easily<br>&gt;&gt;    handled (the former by just adding them, the later by using deprecation<br>&gt;&gt;    techniques). For semantics changes, things are much more complicated, and<br>&gt;&gt;    will need further study.<br>&gt;&gt;<br>&gt;&gt; The great thing about this approach is that a single Swift 4 compiler is<br>&gt;&gt; building all of the sources in an application. This allows us to roll out<br>&gt;&gt; this approach before achieving full ABI stability — something that will be<br>&gt;&gt; a goal for Swift 4, but is impractical to achieve for a Swift 3.x release.<br>&gt;&gt; It also provides us a general framework in the future for handling source<br>&gt;&gt; compatibility as Swift evolves.<br>&gt;&gt;<br>&gt;&gt; To make this more concrete, suppose an application is written to use<br>&gt;&gt; Swift 4, but uses packages via SwiftPM that are written using Swift 3. A<br>&gt;&gt; single compiler would build both the app and the packages — thus ensuring<br>&gt;&gt; that all the compiled sources are binary compatible. It would not be the<br>&gt;&gt; case that a framework built with the Swift 3 compiler could be used by an<br>&gt;&gt; app built using the Swift 4 compiler. That kind of library binary stability<br>&gt;&gt; (ABI) will be a key goal of the Swift 4 release.<br>&gt;&gt;<br>&gt;&gt; These constraints mentioned above will serve as scaffolding for Swift 4<br>&gt;&gt; development. Discussion about Swift 4 commences on Monday. Ahead of that,<br>&gt;&gt; Chris Lattner plans to send out thoughts from the Core team on some of the<br>&gt;&gt; known key goals (and non-goals) for the release. In the meantime, the focus<br>&gt;&gt; over the next couple days should be taking stock of what has landed for<br>&gt;&gt; Swift 3 and to see if any of the proposals mentioned above are close to<br>&gt;&gt; being completed or are truly out of scope.<br>&gt;&gt;<br>&gt;&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt;&gt;<br>&gt;&gt; Ted<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/c7e11fd8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>July 28, 2016 at 11:00:00am</p></header><div class="content"><p>Apologies if this was announced elsewhere: is commit access to master<br>restricted?<br></p><p>I noticed I couldn&#39;t merge some documentation improvements in<br>https://github.com/apple/swift/pull/3815, and just wanted to make sure this<br>was due to Swift 3 finalization.<br></p><p>If commit access is restricted, is it safe to assume that restriction will<br>be lifted on or around July 29?<br></p><p>- Brian Gesiak<br></p><p><br>On Thu, Jul 28, 2016 at 7:15 AM, Anton Zhilin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br>&gt; Is SE-0077 going to be implemented for Swift 3?<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift<br>&gt; Does this code actually run?<br>&gt;<br>&gt; If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t<br>&gt; added latest naming changes. ¯\_(ツ)_/¯<br>&gt;<br>&gt; 2016-07-28 1:17 GMT+03:00 Tony Allevato via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;&gt; I noticed that while SE-0091 appears to be implemented (from a cursory<br>&gt;&gt; glance at some of the affected types like Equatable and String), it looks<br>&gt;&gt; like the named methods are still part of the FloatingPoint protocol and<br>&gt;&gt; they still use global operators.<br>&gt;&gt;<br>&gt;&gt; Is anyone tracking the migration of that protocol (and possibly also the<br>&gt;&gt; new Integer protocols) to use the new operator technique? (I have to<br>&gt;&gt; apologize for not being able to update the proposal with another PR that<br>&gt;&gt; listed all those changes—my free time outside my day job has been<br>&gt;&gt; significantly reduced lately.)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Dear friends,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt;&gt;&gt; changes for Swift 3. It has been an incredible ride to this point, so let&#39;s<br>&gt;&gt;&gt; take stock of where we are. Here are the list of currently accepted — but<br>&gt;&gt;&gt; not yet (fully) implemented — evolution proposals (this is drawn from the<br>&gt;&gt;&gt; &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the<br>&gt;&gt;&gt; swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    - SE-0025 - Scoped Access Level<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt;&gt;&gt;    - SE-0042 - Flattening the function type of unapplied method<br>&gt;&gt;&gt;    references<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;&gt;&gt;    - SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to<br>&gt;&gt;&gt;    the stdlib<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;&gt;    - SE-0068 - Expanding Swift Self to class members and value types<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt;&gt;&gt;    - SE-0075 - Adding a Build Configuration Import Test<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt;&gt;&gt;    - SE-0077 - Improved operator declarations<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt;&gt;&gt;    - SE-0080 - Failable Numeric Conversion Initializers<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt;&gt;    - SE-0081 - Move where clause to end of declaration<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;&gt;&gt;    - SE-0082 - Package Manager Editable Packages<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt;&gt;&gt;    - SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt;&gt;&gt;    - SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;&gt;&gt;    - SE-0092 - Typealiases in protocols and protocol extensions<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt;&gt;    - SE-0096 - Converting dynamicType from a property to an operator<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt;&gt;&gt;    - SE-0099 - Restructuring Condition Clauses<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt;&gt;&gt;    - SE-0101 - Reconfiguring sizeof and related functions into a<br>&gt;&gt;&gt;    unified MemoryLayout struct<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt;&gt;&gt;    - SE-0102 - Remove @noreturn attribute and introduce an empty Never<br>&gt;&gt;&gt;     type<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;&gt;&gt;    - SE-0103 - Make non-escaping closures the default<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt;&gt;&gt;    - SE-0104 - Protocol-oriented integers<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;&gt;&gt;    - SE-0107 - UnsafeRawPointer API<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;&gt;&gt;    - SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt;&gt;&gt;    function types<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;&gt;&gt;    - SE-0111 - Remove type system significance of function argument<br>&gt;&gt;&gt;    labels<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt;    - SE-0120 - Revise partition Method Signature<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt;&gt;&gt;    - SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; These are all changes the community has approved for Swift but did not<br>&gt;&gt;&gt; make today&#39;s cutoff. Some of these proposals have implementations actively<br>&gt;&gt;&gt; underway. For those proposals already in active development — *and near<br>&gt;&gt;&gt; completion* — I am okay with extending the deadline for those changes<br>&gt;&gt;&gt; to *Friday, July 29*. Such changes need to be approved by the release<br>&gt;&gt;&gt; manager (myself) and should be merged into master via a pull request.<br>&gt;&gt;&gt; When creating the pull request, please assign it to me (tkremenek), and<br>&gt;&gt;&gt; mention the pull request on the swift-dev mailing list as well with the<br>&gt;&gt;&gt; SE number in the email title.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves<br>&gt;&gt;&gt; us with the question of what to do with them. These proposals represent the<br>&gt;&gt;&gt; known and reviewed changes we want to make to Swift, but inevitably there<br>&gt;&gt;&gt; will *also* be changes that we don&#39;t even know about today that we will<br>&gt;&gt;&gt; want to take into Swift that can impact core source stability. That said,<br>&gt;&gt;&gt; we also have a very strong desire to maintain source compatibility with<br>&gt;&gt;&gt; Swift 3 and Swift 4 as much as possible to provide some stability for which<br>&gt;&gt;&gt; Swift users to build upon. The challenge of course is reconciling these<br>&gt;&gt;&gt; diametrically opposing goals: maintaining source stability while having the<br>&gt;&gt;&gt; ability to incorporate more core (and important) language changes that are<br>&gt;&gt;&gt; possibly source-breaking.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The Swift team at Apple has reflected on this and decided what it<br>&gt;&gt;&gt; &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases<br>&gt;&gt;&gt; going forward. Our goal is to allow app developers to combine a mix of<br>&gt;&gt;&gt; Swift modules (e.g., SwiftPM packages), where each module is known to<br>&gt;&gt;&gt; compile with a specific version of the language (module A works with Swift<br>&gt;&gt;&gt; 3, module B works with Swift 3.1, etc.), then combine those modules into a<br>&gt;&gt;&gt; single binary. The key feature is that a module can be migrated from Swift<br>&gt;&gt;&gt; 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; While the exact details of how we will accomplish this feat are still<br>&gt;&gt;&gt; being discussed, here is a sketch of how this will likely work in the Swift<br>&gt;&gt;&gt; 4 timeframe. The key enabler is a new compiler flag that indicates the<br>&gt;&gt;&gt; language version to compile for (e.g., similar to the clang -std=c99 flag).<br>&gt;&gt;&gt; The compiler flag will be provided by the build system you are using (e.g.,<br>&gt;&gt;&gt; Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    -<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    For language syntax/semantics, the compiler can use the language<br>&gt;&gt;&gt;    mode to properly implement the language version being used by a module.<br>&gt;&gt;&gt;    -<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    For the Standard Library, additive and subtractive changes are<br>&gt;&gt;&gt;    easily handled (the former by just adding them, the later by using<br>&gt;&gt;&gt;    deprecation techniques). For semantics changes, things are much more<br>&gt;&gt;&gt;    complicated, and will need further study.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The great thing about this approach is that a single Swift 4 compiler is<br>&gt;&gt;&gt; building all of the sources in an application. This allows us to roll out<br>&gt;&gt;&gt; this approach before achieving full ABI stability — something that will be<br>&gt;&gt;&gt; a goal for Swift 4, but is impractical to achieve for a Swift 3.x release.<br>&gt;&gt;&gt; It also provides us a general framework in the future for handling source<br>&gt;&gt;&gt; compatibility as Swift evolves.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To make this more concrete, suppose an application is written to use<br>&gt;&gt;&gt; Swift 4, but uses packages via SwiftPM that are written using Swift 3. A<br>&gt;&gt;&gt; single compiler would build both the app and the packages — thus ensuring<br>&gt;&gt;&gt; that all the compiled sources are binary compatible. It would not be the<br>&gt;&gt;&gt; case that a framework built with the Swift 3 compiler could be used by an<br>&gt;&gt;&gt; app built using the Swift 4 compiler. That kind of library binary stability<br>&gt;&gt;&gt; (ABI) will be a key goal of the Swift 4 release.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; These constraints mentioned above will serve as scaffolding for Swift 4<br>&gt;&gt;&gt; development. Discussion about Swift 4 commences on Monday. Ahead of that,<br>&gt;&gt;&gt; Chris Lattner plans to send out thoughts from the Core team on some of the<br>&gt;&gt;&gt; known key goals (and non-goals) for the release. In the meantime, the focus<br>&gt;&gt;&gt; over the next couple days should be taking stock of what has landed for<br>&gt;&gt;&gt; Swift 3 and to see if any of the proposals mentioned above are close to<br>&gt;&gt;&gt; being completed or are truly out of scope.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/58ab72bd/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July 28, 2016 at 03:00:00pm</p></header><div class="content"><p>See the thread about stabilizing CI. The locked master while they worked<br>out issues with the CI systems. Last I read it should be unlocked soon.<br>On Thu, Jul 28, 2016 at 8:30 AM Brian Gesiak via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Apologies if this was announced elsewhere: is commit access to master<br>&gt; restricted?<br>&gt;<br>&gt; I noticed I couldn&#39;t merge some documentation improvements in<br>&gt; https://github.com/apple/swift/pull/3815, and just wanted to make sure<br>&gt; this was due to Swift 3 finalization.<br>&gt;<br>&gt; If commit access is restricted, is it safe to assume that restriction will<br>&gt; be lifted on or around July 29?<br>&gt;<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt; On Thu, Jul 28, 2016 at 7:15 AM, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br>&gt;&gt; Is SE-0077 going to be implemented for Swift 3?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift<br>&gt;&gt; Does this code actually run?<br>&gt;&gt;<br>&gt;&gt; If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t<br>&gt;&gt; added latest naming changes. ¯\_(ツ)_/¯<br>&gt;&gt;<br>&gt;&gt; 2016-07-28 1:17 GMT+03:00 Tony Allevato via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; I noticed that while SE-0091 appears to be implemented (from a cursory<br>&gt;&gt;&gt; glance at some of the affected types like Equatable and String), it looks<br>&gt;&gt;&gt; like the named methods are still part of the FloatingPoint protocol and<br>&gt;&gt;&gt; they still use global operators.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Is anyone tracking the migration of that protocol (and possibly also the<br>&gt;&gt;&gt; new Integer protocols) to use the new operator technique? (I have to<br>&gt;&gt;&gt; apologize for not being able to update the proposal with another PR that<br>&gt;&gt;&gt; listed all those changes—my free time outside my day job has been<br>&gt;&gt;&gt; significantly reduced lately.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Dear friends,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Today is July 27 — and the last planned day to take source-breaking<br>&gt;&gt;&gt;&gt; changes for Swift 3. It has been an incredible ride to this point, so let&#39;s<br>&gt;&gt;&gt;&gt; take stock of where we are. Here are the list of currently accepted — but<br>&gt;&gt;&gt;&gt; not yet (fully) implemented — evolution proposals (this is drawn from the<br>&gt;&gt;&gt;&gt; &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the<br>&gt;&gt;&gt;&gt; swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    - SE-0025 - Scoped Access Level<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0042 - Flattening the function type of unapplied method<br>&gt;&gt;&gt;&gt;    references<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to<br>&gt;&gt;&gt;&gt;    the stdlib<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0068 - Expanding Swift Self to class members and value types<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0075 - Adding a Build Configuration Import Test<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0077 - Improved operator declarations<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0080 - Failable Numeric Conversion Initializers<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0081 - Move where clause to end of declaration<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0082 - Package Manager Editable Packages<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0088 - Modernize libdispatch for Swift 3 naming conventions<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0089 - Renaming String.init&lt;T&gt;(_: T)<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0092 - Typealiases in protocols and protocol extensions<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0096 - Converting dynamicType from a property to an operator<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0099 - Restructuring Condition Clauses<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0101 - Reconfiguring sizeof and related functions into a<br>&gt;&gt;&gt;&gt;    unified MemoryLayout struct<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0102 - Remove @noreturn attribute and introduce an empty Never<br>&gt;&gt;&gt;&gt;     type<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0103 - Make non-escaping closures the default<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0104 - Protocol-oriented integers<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0107 - UnsafeRawPointer API<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0110 - Distinguish between single-tuple and multiple-argument<br>&gt;&gt;&gt;&gt;    function types<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0111 - Remove type system significance of function argument<br>&gt;&gt;&gt;&gt;    labels<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0120 - Revise partition Method Signature<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt;&gt;&gt;&gt;    - SE-0127 - Cleaning up stdlib Pointer and Buffer Routines<br>&gt;&gt;&gt;&gt;    &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; These are all changes the community has approved for Swift but did not<br>&gt;&gt;&gt;&gt; make today&#39;s cutoff. Some of these proposals have implementations actively<br>&gt;&gt;&gt;&gt; underway. For those proposals already in active development — *and<br>&gt;&gt;&gt;&gt; near completion* — I am okay with extending the deadline for those<br>&gt;&gt;&gt;&gt; changes to *Friday, July 29*. Such changes need to be approved by the<br>&gt;&gt;&gt;&gt; release manager (myself) and should be merged into master via a pull<br>&gt;&gt;&gt;&gt; request. When creating the pull request, please assign it to me (<br>&gt;&gt;&gt;&gt; tkremenek), and mention the pull request on the swift-dev mailing list<br>&gt;&gt;&gt;&gt; as well with the SE number in the email title.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The rest of the unimplemented proposals do not make Swift 3. This<br>&gt;&gt;&gt;&gt; leaves us with the question of what to do with them. These proposals<br>&gt;&gt;&gt;&gt; represent the known and reviewed changes we want to make to Swift, but<br>&gt;&gt;&gt;&gt; inevitably there will *also* be changes that we don&#39;t even know about<br>&gt;&gt;&gt;&gt; today that we will want to take into Swift that can impact core source<br>&gt;&gt;&gt;&gt; stability. That said, we also have a very strong desire to maintain source<br>&gt;&gt;&gt;&gt; compatibility with Swift 3 and Swift 4 as much as possible to provide some<br>&gt;&gt;&gt;&gt; stability for which Swift users to build upon. The challenge of course is<br>&gt;&gt;&gt;&gt; reconciling these diametrically opposing goals: maintaining source<br>&gt;&gt;&gt;&gt; stability while having the ability to incorporate more core (and important)<br>&gt;&gt;&gt;&gt; language changes that are possibly source-breaking.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The Swift team at Apple has reflected on this and decided what it<br>&gt;&gt;&gt;&gt; &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases<br>&gt;&gt;&gt;&gt; going forward. Our goal is to allow app developers to combine a mix of<br>&gt;&gt;&gt;&gt; Swift modules (e.g., SwiftPM packages), where each module is known to<br>&gt;&gt;&gt;&gt; compile with a specific version of the language (module A works with Swift<br>&gt;&gt;&gt;&gt; 3, module B works with Swift 3.1, etc.), then combine those modules into a<br>&gt;&gt;&gt;&gt; single binary. The key feature is that a module can be migrated from Swift<br>&gt;&gt;&gt;&gt; 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; While the exact details of how we will accomplish this feat are still<br>&gt;&gt;&gt;&gt; being discussed, here is a sketch of how this will likely work in the Swift<br>&gt;&gt;&gt;&gt; 4 timeframe. The key enabler is a new compiler flag that indicates the<br>&gt;&gt;&gt;&gt; language version to compile for (e.g., similar to the clang -std=c99 flag).<br>&gt;&gt;&gt;&gt; The compiler flag will be provided by the build system you are using (e.g.,<br>&gt;&gt;&gt;&gt; Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    -<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    For language syntax/semantics, the compiler can use the language<br>&gt;&gt;&gt;&gt;    mode to properly implement the language version being used by a module.<br>&gt;&gt;&gt;&gt;    -<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;    For the Standard Library, additive and subtractive changes are<br>&gt;&gt;&gt;&gt;    easily handled (the former by just adding them, the later by using<br>&gt;&gt;&gt;&gt;    deprecation techniques). For semantics changes, things are much more<br>&gt;&gt;&gt;&gt;    complicated, and will need further study.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The great thing about this approach is that a single Swift 4 compiler<br>&gt;&gt;&gt;&gt; is building all of the sources in an application. This allows us to roll<br>&gt;&gt;&gt;&gt; out this approach before achieving full ABI stability — something that will<br>&gt;&gt;&gt;&gt; be a goal for Swift 4, but is impractical to achieve for a Swift 3.x<br>&gt;&gt;&gt;&gt; release. It also provides us a general framework in the future for handling<br>&gt;&gt;&gt;&gt; source compatibility as Swift evolves.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; To make this more concrete, suppose an application is written to use<br>&gt;&gt;&gt;&gt; Swift 4, but uses packages via SwiftPM that are written using Swift 3. A<br>&gt;&gt;&gt;&gt; single compiler would build both the app and the packages — thus ensuring<br>&gt;&gt;&gt;&gt; that all the compiled sources are binary compatible. It would not be the<br>&gt;&gt;&gt;&gt; case that a framework built with the Swift 3 compiler could be used by an<br>&gt;&gt;&gt;&gt; app built using the Swift 4 compiler. That kind of library binary stability<br>&gt;&gt;&gt;&gt; (ABI) will be a key goal of the Swift 4 release.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; These constraints mentioned above will serve as scaffolding for Swift 4<br>&gt;&gt;&gt;&gt; development. Discussion about Swift 4 commences on Monday. Ahead of that,<br>&gt;&gt;&gt;&gt; Chris Lattner plans to send out thoughts from the Core team on some of the<br>&gt;&gt;&gt;&gt; known key goals (and non-goals) for the release. In the meantime, the focus<br>&gt;&gt;&gt;&gt; over the next couple days should be taking stock of what has landed for<br>&gt;&gt;&gt;&gt; Swift 3 and to see if any of the proposals mentioned above are close to<br>&gt;&gt;&gt;&gt; being completed or are truly out of scope.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thank you again to everyone for making Swift 3 such as fantastic<br>&gt;&gt;&gt;&gt; release!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ted<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/18c7c1a0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 28, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 28, 2016, at 8:30 AM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; Apologies if this was announced elsewhere: is commit access to master restricted?<br></p><p>It was, for about a day.  It&#39;s less-restricted now, but there&#39;s a special process that doesn&#39;t have an exception for things like documentation because it&#39;s being enforced by automated tools.<br></p><p>The announcement is on swift-dev.<br></p><p>John.<br></p><p>&gt; <br>&gt; I noticed I couldn&#39;t merge some documentation improvements in https://github.com/apple/swift/pull/3815 &lt;https://github.com/apple/swift/pull/3815&gt;, and just wanted to make sure this was due to Swift 3 finalization.<br>&gt; <br>&gt; If commit access is restricted, is it safe to assume that restriction will be lifted on or around July 29?<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Thu, Jul 28, 2016 at 7:15 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f &lt;https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f&gt;<br>&gt; Is SE-0077 going to be implemented for Swift 3?<br>&gt; <br>&gt; https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift &lt;https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift&gt;<br>&gt; Does this code actually run?<br>&gt; <br>&gt; If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t added latest naming changes. ¯\_(ツ)_/¯<br>&gt; <br>&gt; 2016-07-28 1:17 GMT+03:00 Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; I noticed that while SE-0091 appears to be implemented (from a cursory glance at some of the affected types like Equatable and String), it looks like the named methods are still part of the FloatingPoint protocol and they still use global operators.<br>&gt; <br>&gt; Is anyone tracking the migration of that protocol (and possibly also the new Integer protocols) to use the new operator technique? (I have to apologize for not being able to update the proposal with another PR that listed all those changes—my free time outside my day job has been significantly reduced lately.)<br>&gt; <br>&gt; <br>&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Dear friends,<br>&gt; <br>&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt; <br>&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt; SE-0042 - Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt; SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the stdlib &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt; SE-0068 - Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt; SE-0075 - Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; SE-0080 - Failable Numeric Conversion Initializers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt; SE-0082 - Package Manager Editable Packages &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T) &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt; SE-0096 - Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt; SE-0101 - Reconfiguring sizeof and related functions into a unified MemoryLayout struct &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt; SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; SE-0110 - Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt; SE-0111 - Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt; SE-0120 - Revise partition Method Signature &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt; These are all changes the community has approved for Swift but did not make today&#39;s cutoff. Some of these proposals have implementations actively underway. For those proposals already in active development — and near completion — I am okay with extending the deadline for those changes to Friday, July 29. Such changes need to be approved by the release manager (myself) and should be merged into master via a pull request. When creating the pull request, please assign it to me (tkremenek), and mention the pull request on the swift-dev mailing list as well with the SE number in the email title.<br>&gt; <br>&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves us with the question of what to do with them. These proposals represent the known and reviewed changes we want to make to Swift, but inevitably there will also be changes that we don&#39;t even know about today that we will want to take into Swift that can impact core source stability. That said, we also have a very strong desire to maintain source compatibility with Swift 3 and Swift 4 as much as possible to provide some stability for which Swift users to build upon. The challenge of course is reconciling these diametrically opposing goals: maintaining source stability while having the ability to incorporate more core (and important) language changes that are possibly source-breaking.<br>&gt; <br>&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt; <br>&gt; While the exact details of how we will accomplish this feat are still being discussed, here is a sketch of how this will likely work in the Swift 4 timeframe. The key enabler is a new compiler flag that indicates the language version to compile for (e.g., similar to the clang -std=c99 flag). The compiler flag will be provided by the build system you are using (e.g., Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt; <br>&gt; For language syntax/semantics, the compiler can use the language mode to properly implement the language version being used by a module.<br>&gt; <br>&gt; For the Standard Library, additive and subtractive changes are easily handled (the former by just adding them, the later by using deprecation techniques). For semantics changes, things are much more complicated, and will need further study.<br>&gt; <br>&gt; The great thing about this approach is that a single Swift 4 compiler is building all of the sources in an application. This allows us to roll out this approach before achieving full ABI stability — something that will be a goal for Swift 4, but is impractical to achieve for a Swift 3.x release. It also provides us a general framework in the future for handling source compatibility as Swift evolves.<br>&gt; <br>&gt; To make this more concrete, suppose an application is written to use Swift 4, but uses packages via SwiftPM that are written using Swift 3. A single compiler would build both the app and the packages — thus ensuring that all the compiled sources are binary compatible. It would not be the case that a framework built with the Swift 3 compiler could be used by an app built using the Swift 4 compiler. That kind of library binary stability (ABI) will be a key goal of the Swift 4 release.<br>&gt; <br>&gt; These constraints mentioned above will serve as scaffolding for Swift 4 development. Discussion about Swift 4 commences on Monday. Ahead of that, Chris Lattner plans to send out thoughts from the Core team on some of the known key goals (and non-goals) for the release. In the meantime, the focus over the next couple days should be taking stock of what has landed for Swift 3 and to see if any of the proposals mentioned above are close to being completed or are truly out of scope.<br>&gt; <br>&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/373a772a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 28, 2016, at 4:15 AM, Anton Zhilin &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f &lt;https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f&gt;<br>&gt; Is SE-0077 going to be implemented for Swift 3?<br></p><p>It&#39;s been implemented.<br></p><p>&gt; https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift &lt;https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift&gt;<br>&gt; Does this code actually run?<br></p><p>Well, it&#39;s just a bunch of declarations, but I suppose technically it &quot;runs&quot;, yes. :)<br></p><p>&gt; If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t added latest naming changes. ¯\_(ツ)_/¯<br></p><p>Please revise to match the implementation.  It&#39;s slightly different beyond just the naming changes, as noted in the commit:<br></p><p>  https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br></p><p>John.<br></p><p>&gt; <br>&gt; 2016-07-28 1:17 GMT+03:00 Tony Allevato via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; I noticed that while SE-0091 appears to be implemented (from a cursory glance at some of the affected types like Equatable and String), it looks like the named methods are still part of the FloatingPoint protocol and they still use global operators.<br>&gt; <br>&gt; Is anyone tracking the migration of that protocol (and possibly also the new Integer protocols) to use the new operator technique? (I have to apologize for not being able to update the proposal with another PR that listed all those changes—my free time outside my day job has been significantly reduced lately.)<br>&gt; <br>&gt; <br>&gt; On Wed, Jul 27, 2016 at 12:38 PM Ted Kremenek via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Dear friends,<br>&gt; <br>&gt; Today is July 27 — and the last planned day to take source-breaking changes for Swift 3. It has been an incredible ride to this point, so let&#39;s take stock of where we are. Here are the list of currently accepted — but not yet (fully) implemented — evolution proposals (this is drawn from the &quot;accepted&quot; but not marked &quot;implemented&quot; proposals from the swift-evolution &lt;https://github.com/apple/swift-evolution&gt; repository):<br>&gt; <br>&gt; SE-0025 - Scoped Access Level &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&gt;<br>&gt; SE-0042 - Flattening the function type of unapplied method references &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md&gt;<br>&gt; SE-0045 - Add scan, prefix(while:), drop(while:), and iterate to the stdlib &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt; SE-0068 - Expanding Swift Self to class members and value types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md&gt;<br>&gt; SE-0075 - Adding a Build Configuration Import Test &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&gt;<br>&gt; SE-0077 - Improved operator declarations &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; SE-0080 - Failable Numeric Conversion Initializers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md&gt;<br>&gt; SE-0081 - Move where clause to end of declaration &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0081-move-where-expression.md&gt;<br>&gt; SE-0082 - Package Manager Editable Packages &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md&gt;<br>&gt; SE-0088 - Modernize libdispatch for Swift 3 naming conventions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&gt;<br>&gt; SE-0089 - Renaming String.init&lt;T&gt;(_: T) &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0089-rename-string-reflection-init.md&gt;<br>&gt; SE-0092 - Typealiases in protocols and protocol extensions &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md&gt;<br>&gt; SE-0096 - Converting dynamicType from a property to an operator &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0096-dynamictype.md&gt;<br>&gt; SE-0099 - Restructuring Condition Clauses &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0099-conditionclauses.md&gt;<br>&gt; SE-0101 - Reconfiguring sizeof and related functions into a unified MemoryLayout struct &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0101-standardizing-sizeof-naming.md&gt;<br>&gt; SE-0102 - Remove @noreturn attribute and introduce an empty Never type &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br>&gt; SE-0103 - Make non-escaping closures the default &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0103-make-noescape-default.md&gt;<br>&gt; SE-0104 - Protocol-oriented integers &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt; SE-0107 - UnsafeRawPointer API &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&gt;<br>&gt; SE-0110 - Distinguish between single-tuple and multiple-argument function types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&gt;<br>&gt; SE-0111 - Remove type system significance of function argument labels &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md&gt;<br>&gt; SE-0120 - Revise partition Method Signature &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0120-revise-partition-method.md&gt;<br>&gt; SE-0127 - Cleaning up stdlib Pointer and Buffer Routines &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0127-cleaning-up-stdlib-ptr-buffer.md&gt;<br>&gt; These are all changes the community has approved for Swift but did not make today&#39;s cutoff. Some of these proposals have implementations actively underway. For those proposals already in active development — and near completion — I am okay with extending the deadline for those changes to Friday, July 29. Such changes need to be approved by the release manager (myself) and should be merged into master via a pull request. When creating the pull request, please assign it to me (tkremenek), and mention the pull request on the swift-dev mailing list as well with the SE number in the email title.<br>&gt; <br>&gt; The rest of the unimplemented proposals do not make Swift 3. This leaves us with the question of what to do with them. These proposals represent the known and reviewed changes we want to make to Swift, but inevitably there will also be changes that we don&#39;t even know about today that we will want to take into Swift that can impact core source stability. That said, we also have a very strong desire to maintain source compatibility with Swift 3 and Swift 4 as much as possible to provide some stability for which Swift users to build upon. The challenge of course is reconciling these diametrically opposing goals: maintaining source stability while having the ability to incorporate more core (and important) language changes that are possibly source-breaking.<br>&gt; <br>&gt; The Swift team at Apple has reflected on this and decided what it &quot;means&quot; for Swift 3 to be source compatible with Swift 4 and later releases going forward. Our goal is to allow app developers to combine a mix of Swift modules (e.g., SwiftPM packages), where each module is known to compile with a specific version of the language (module A works with Swift 3, module B works with Swift 3.1, etc.), then combine those modules into a single binary. The key feature is that a module can be migrated from Swift 3 to 3.1 to 4 (and beyond) independently of its dependencies.<br>&gt; <br>&gt; While the exact details of how we will accomplish this feat are still being discussed, here is a sketch of how this will likely work in the Swift 4 timeframe. The key enabler is a new compiler flag that indicates the language version to compile for (e.g., similar to the clang -std=c99 flag). The compiler flag will be provided by the build system you are using (e.g., Xcode, SwiftPM, etc.) on a per-module basis:<br>&gt; <br>&gt; For language syntax/semantics, the compiler can use the language mode to properly implement the language version being used by a module.<br>&gt; <br>&gt; For the Standard Library, additive and subtractive changes are easily handled (the former by just adding them, the later by using deprecation techniques). For semantics changes, things are much more complicated, and will need further study.<br>&gt; <br>&gt; The great thing about this approach is that a single Swift 4 compiler is building all of the sources in an application. This allows us to roll out this approach before achieving full ABI stability — something that will be a goal for Swift 4, but is impractical to achieve for a Swift 3.x release. It also provides us a general framework in the future for handling source compatibility as Swift evolves.<br>&gt; <br>&gt; To make this more concrete, suppose an application is written to use Swift 4, but uses packages via SwiftPM that are written using Swift 3. A single compiler would build both the app and the packages — thus ensuring that all the compiled sources are binary compatible. It would not be the case that a framework built with the Swift 3 compiler could be used by an app built using the Swift 4 compiler. That kind of library binary stability (ABI) will be a key goal of the Swift 4 release.<br>&gt; <br>&gt; These constraints mentioned above will serve as scaffolding for Swift 4 development. Discussion about Swift 4 commences on Monday. Ahead of that, Chris Lattner plans to send out thoughts from the Core team on some of the known key goals (and non-goals) for the release. In the meantime, the focus over the next couple days should be taking stock of what has landed for Swift 3 and to see if any of the proposals mentioned above are close to being completed or are truly out of scope.<br>&gt; <br>&gt; Thank you again to everyone for making Swift 3 such as fantastic release!<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160728/45cc7c83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>End of source-breaking changes for Swift 3</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July 29, 2016 at 04:00:00am</p></header><div class="content"><p>Fantastic! Here is the PR: https://github.com/apple/swift-evolution/pull/476<br>Two notes:<br></p><p>&gt; I had to introduce a FunctionArrowPrecedence to capture the parsing of -&gt;<br>in expression contexts.<br></p><p>It looks like an implementation detail, so I didn&#39;t add it.<br></p><p>&gt; I found it convenient to continue to model the assignment property<br>explicitly.<br></p><p>I would prefer to stick to the original version. Changed to explicit<br>version anyway.<br></p><p>2016-07-29 0:33 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; On Jul 28, 2016, at 4:15 AM, Anton Zhilin &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br>&gt; Is SE-0077 going to be implemented for Swift 3?<br>&gt;<br>&gt;<br>&gt; It&#39;s been implemented.<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift<br>&gt; Does this code actually run?<br>&gt;<br>&gt;<br>&gt; Well, it&#39;s just a bunch of declarations, but I suppose technically it<br>&gt; &quot;runs&quot;, yes. :)<br>&gt;<br>&gt; If so, I will add &quot;implemented&quot; to the proposal, plus I still haven&#39;t<br>&gt; added latest naming changes. ¯\_(ツ)_/¯<br>&gt;<br>&gt;<br>&gt; Please revise to match the implementation.  It&#39;s slightly different beyond<br>&gt; just the naming changes, as noted in the commit:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/commit/c8c41b385c0312e562abe4952fa2d6794dec2e0f<br>&gt;<br>&gt; John<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160729/9e256550/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
