<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>August 29, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I am wanting to use weak references in generic data structures; in the<br>example below Array, but in general any generic type. I can almost get it<br>to work :(<br></p><p>My experiments started off well; the following works:<br></p><p>// Array of weak references OK<br>struct WeakReference&lt;T: AnyObject&gt; {<br>    weak var value: T?<br>}<br>class C {<br>    var i: Int = 0<br>}<br>let c = C() // Strong reference to prevent collection<br>let weakCs = [WeakReference(value: c)] // OK<br>print(&quot;C: \(weakCs[0].value!.i)&quot;) // 0<br></p><p><br>I can add a protocol:<br></p><p>// Array of weak references that implements a protocol OK<br>protocol P: AnyObject { // Note AnyObject<br>    var i: Int { get }<br>}<br>class CP: P {<br>    var i: Int = 0<br>}<br>let cP = CP() // Strong reference to prevent collection<br>let weakCPs = [WeakReference(value: cP)] // OK<br>print(&quot;CP: \(weakCPs[0].value!.i)&quot;) // 0<br></p><p><br>But when I want an array of weak references to the protocol I get an error:<br></p><p>// Array of weak references of a protocol not OK<br>let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Using &#39;P&#39; as<br>a concrete type conforming to protocol &#39;AnyObject&#39; is not supported<br>print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br></p><p><br>Is there something I have missed?<br></p><p>The error message, &quot;Using &#39;P&#39; as a concrete type conforming to protocol<br>&#39;AnyObject&#39; is not supported&quot;, implies that it is a temporary limitation of<br>the compiler; is this going to be fixed? Should I lodge a bug report?<br></p><p>Thanks in advance for any advice,<br></p><p>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160829/f70609c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>September  1, 2016 at 11:00:00am</p></header><div class="content"><p>Playing around I found that if you make the protocol @objc instead of<br>AnyObject then it works :). EG:<br></p><p>struct WeakReference&lt;T: AnyObject&gt; {<br>    weak var value: T?<br>}<br>@objc protocol P { // Note @objc, class or AnyObject does not work<br>    var i: Int { get }<br>}<br>class CP: P {<br>    var i: Int = 0<br>}<br>let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Note typed<br>as `[WeakReference&lt;P&gt;]`<br>print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br></p><p>Not a &#39;pure&#39; Swift solution :(, but OK in my case.<br></p><p>  -- Howard.<br></p><p>On 29 August 2016 at 16:21, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; I am wanting to use weak references in generic data structures; in the<br>&gt; example below Array, but in general any generic type. I can almost get it<br>&gt; to work :(<br>&gt;<br>&gt; My experiments started off well; the following works:<br>&gt;<br>&gt; // Array of weak references OK<br>&gt; struct WeakReference&lt;T: AnyObject&gt; {<br>&gt;     weak var value: T?<br>&gt; }<br>&gt; class C {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let c = C() // Strong reference to prevent collection<br>&gt; let weakCs = [WeakReference(value: c)] // OK<br>&gt; print(&quot;C: \(weakCs[0].value!.i)&quot;) // 0<br>&gt;<br>&gt;<br>&gt; I can add a protocol:<br>&gt;<br>&gt; // Array of weak references that implements a protocol OK<br>&gt; protocol P: AnyObject { // Note AnyObject<br>&gt;     var i: Int { get }<br>&gt; }<br>&gt; class CP: P {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let cP = CP() // Strong reference to prevent collection<br>&gt; let weakCPs = [WeakReference(value: cP)] // OK<br>&gt; print(&quot;CP: \(weakCPs[0].value!.i)&quot;) // 0<br>&gt;<br>&gt;<br>&gt; But when I want an array of weak references to the protocol I get an error:<br>&gt;<br>&gt; // Array of weak references of a protocol not OK<br>&gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Using &#39;P&#39;<br>&gt; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported<br>&gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt;<br>&gt;<br>&gt; Is there something I have missed?<br>&gt;<br>&gt; The error message, &quot;Using &#39;P&#39; as a concrete type conforming to protocol<br>&gt; &#39;AnyObject&#39; is not supported&quot;, implies that it is a temporary limitation of<br>&gt; the compiler; is this going to be fixed? Should I lodge a bug report?<br>&gt;<br>&gt; Thanks in advance for any advice,<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160901/091243d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  1, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On 1 Sep 2016, at 03:23, Howard Lovatt via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Playing around I found that if you make the protocol @objc instead of AnyObject then it works :). EG:<br>&gt; <br>&gt; struct WeakReference&lt;T: AnyObject&gt; {<br>&gt;     weak var value: T?<br>&gt; }<br>&gt; @objc protocol P { // Note @objc, class or AnyObject does not work<br>&gt;     var i: Int { get }<br>&gt; }<br>&gt; class CP: P {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Note typed as `[WeakReference&lt;P&gt;]`<br>&gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt; Not a &#39;pure&#39; Swift solution :(, but OK in my case.<br>&gt; <br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 29 August 2016 at 16:21, Howard Lovatt &lt;howard.lovatt at gmail.com &lt;mailto:howard.lovatt at gmail.com&gt;&gt; wrote:<br>&gt; Hi,<br>&gt; <br>&gt; I am wanting to use weak references in generic data structures; in the example below Array, but in general any generic type. I can almost get it to work :(<br>&gt; <br>&gt; My experiments started off well; the following works:<br>&gt; <br>&gt; // Array of weak references OK<br>&gt; struct WeakReference&lt;T: AnyObject&gt; {<br>&gt;     weak var value: T?<br>&gt; }<br>&gt; class C {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let c = C() // Strong reference to prevent collection<br>&gt; let weakCs = [WeakReference(value: c)] // OK<br>&gt; print(&quot;C: \(weakCs[0].value!.i)&quot;) // 0<br>&gt; <br>&gt; I can add a protocol:<br>&gt; <br>&gt; // Array of weak references that implements a protocol OK<br>&gt; protocol P: AnyObject { // Note AnyObject<br>&gt;     var i: Int { get }<br>&gt; }<br>&gt; class CP: P {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let cP = CP() // Strong reference to prevent collection<br>&gt; let weakCPs = [WeakReference(value: cP)] // OK<br>&gt; print(&quot;CP: \(weakCPs[0].value!.i)&quot;) // 0<br>&gt; <br>&gt; But when I want an array of weak references to the protocol I get an error:<br>&gt; <br>&gt; // Array of weak references of a protocol not OK<br>&gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Using &#39;P&#39; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported<br>&gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt; <br>&gt; Is there something I have missed?<br>&gt; <br>&gt; The error message, &quot;Using &#39;P&#39; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported&quot;, implies that it is a temporary limitation of the compiler; is this going to be fixed? Should I lodge a bug report?<br>&gt; <br>&gt; Thanks in advance for any advice,<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>Your problem is protocol self-conformance. In the first example, you’re creating WeakReference&lt;CP&gt;. CP conforms to P and to AnyObject. In the second example, you’re creating WeakReference&lt;P&gt;. P does not conform to P or to AnyObject.<br></p><p>As for why @objc fixes it? … ¯\_(ツ)_/¯ all bets are off whenever @objc gets involved in anything.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160901/14eae7e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>September  2, 2016 at 09:00:00am</p></header><div class="content"><p>@Karl,<br></p><p>You say &quot;In the second example, you’re creating WeakReference&lt;P&gt;. P does<br>not conform to P or to AnyObject.&quot;, but P does conform to AnyObject.<br></p><p>I suspect it is a compiler limitation/ bug.<br></p><p> -- Howard.<br></p><p>On Thursday, 1 September 2016, Karl &lt;razielim at gmail.com&gt; wrote:<br></p><p>&gt;<br>&gt; On 1 Sep 2016, at 03:23, Howard Lovatt via swift-users &lt;<br>&gt; swift-users at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Playing around I found that if you make the protocol @objc instead of<br>&gt; AnyObject then it works :). EG:<br>&gt;<br>&gt; struct WeakReference&lt;T: AnyObject&gt; {<br>&gt;     weak var value: T?<br>&gt; }<br>&gt; @objc protocol P { // Note @objc, class or AnyObject does not work<br>&gt;     var i: Int { get }<br>&gt; }<br>&gt; class CP: P {<br>&gt;     var i: Int = 0<br>&gt; }<br>&gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Note typed<br>&gt; as `[WeakReference&lt;P&gt;]`<br>&gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt;<br>&gt; Not a &#39;pure&#39; Swift solution :(, but OK in my case.<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>&gt; On 29 August 2016 at 16:21, Howard Lovatt &lt;howard.lovatt at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;howard.lovatt at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Hi,<br>&gt;&gt;<br>&gt;&gt; I am wanting to use weak references in generic data structures; in the<br>&gt;&gt; example below Array, but in general any generic type. I can almost get it<br>&gt;&gt; to work :(<br>&gt;&gt;<br>&gt;&gt; My experiments started off well; the following works:<br>&gt;&gt;<br>&gt;&gt; // Array of weak references OK<br>&gt;&gt; struct WeakReference&lt;T: AnyObject&gt; {<br>&gt;&gt;     weak var value: T?<br>&gt;&gt; }<br>&gt;&gt; class C {<br>&gt;&gt;     var i: Int = 0<br>&gt;&gt; }<br>&gt;&gt; let c = C() // Strong reference to prevent collection<br>&gt;&gt; let weakCs = [WeakReference(value: c)] // OK<br>&gt;&gt; print(&quot;C: \(weakCs[0].value!.i)&quot;) // 0<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I can add a protocol:<br>&gt;&gt;<br>&gt;&gt; // Array of weak references that implements a protocol OK<br>&gt;&gt; protocol P: AnyObject { // Note AnyObject<br>&gt;&gt;     var i: Int { get }<br>&gt;&gt; }<br>&gt;&gt; class CP: P {<br>&gt;&gt;     var i: Int = 0<br>&gt;&gt; }<br>&gt;&gt; let cP = CP() // Strong reference to prevent collection<br>&gt;&gt; let weakCPs = [WeakReference(value: cP)] // OK<br>&gt;&gt; print(&quot;CP: \(weakCPs[0].value!.i)&quot;) // 0<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; But when I want an array of weak references to the protocol I get an<br>&gt;&gt; error:<br>&gt;&gt;<br>&gt;&gt; // Array of weak references of a protocol not OK<br>&gt;&gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Using &#39;P&#39;<br>&gt;&gt; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported<br>&gt;&gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Is there something I have missed?<br>&gt;&gt;<br>&gt;&gt; The error message, &quot;Using &#39;P&#39; as a concrete type conforming to protocol<br>&gt;&gt; &#39;AnyObject&#39; is not supported&quot;, implies that it is a temporary limitation of<br>&gt;&gt; the compiler; is this going to be fixed? Should I lodge a bug report?<br>&gt;&gt;<br>&gt;&gt; Thanks in advance for any advice,<br>&gt;&gt;<br>&gt;&gt;   -- Howard.<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt; Your problem is protocol self-conformance. In the first example, you’re<br>&gt; creating WeakReference&lt;CP&gt;. CP conforms to P and to AnyObject. In the<br>&gt; second example, you’re creating WeakReference&lt;P&gt;. P does not conform to P<br>&gt; or to AnyObject.<br>&gt;<br>&gt; As for why @objc fixes it? … ¯\_(ツ)_/¯ all bets are off whenever @objc<br>&gt; gets involved in anything.<br>&gt;<br>&gt; Karl<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160902/6c3a1911/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  8, 2016 at 03:00:00pm</p></header><div class="content"><p>What I&#39;m trying to say is that P is a protocol and not a class, so it does not conform to AnyObject.   P does not conform to P.<br>  <br></p><p>  <br>It is in some sense a language limitation that we cant express what you&#39;re talking about. If we weren&#39;t using mailing lists it would be easier to search for &quot;protocol self-conformance&quot; on swift-evo and to read the earlier discussion about it.   <br>  <br>    <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Sep 2, 2016 at 1:04 am,  &lt;Howard Lovatt (mailto:howard.lovatt at gmail.com)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt; @Karl,  <br>&gt;<br>&gt;   <br>&gt; You say &quot;In the second example, you’re creating WeakReference&lt;P&gt;. P does not conform to P or to AnyObject.&quot;, but P does conform to AnyObject.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; I suspect it is a compiler limitation/ bug.   <br>&gt;   <br>&gt;<br>&gt;   <br>&gt;   -- Howard.   <br>&gt;<br>&gt;  On Thursday, 1 September 2016, Karl  &lt;razielim at gmail.com (mailto:razielim at gmail.com)&gt;  wrote:<br>&gt;   <br>&gt; &gt;   <br>&gt; &gt;<br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt; On 1 Sep 2016, at 03:23, Howard Lovatt via swift-users  &lt;swift-users at swift.org (javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);)&gt;  wrote:<br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt; Playing around I found that if you make the protocol @objc instead of AnyObject then it works :). EG:  <br>&gt; &gt; &gt;<br>&gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; struct WeakReference&lt;T: AnyObject&gt;  {<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;        weak var value: T?<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; @objc protocol P { // Note @objc, class or AnyObject does not work<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;        var i: Int { get }<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; class CP: P {<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;        var i: Int = 0<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Note typed as `[WeakReference&lt;P&gt;]`<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Not a &#39;pure&#39; Swift solution :(, but OK in my case.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;<br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt;    -- Howard.<br>&gt; &gt; &gt;     <br>&gt; &gt; &gt;   <br>&gt; &gt; &gt; On 29 August 2016 at 16:21, Howard Lovatt  &lt;howard.lovatt at gmail.com (javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;howard.lovatt at gmail.com&#39;);)&gt;  wrote:<br>&gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; Hi,  <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; I am wanting to use weak references in generic data structures; in the example below Array, but in general any generic type. I can almost get it to work :(<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; My experiments started off well; the following works:<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; // Array of weak references OK<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; struct WeakReference&lt;T: AnyObject&gt;  {<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;        weak var value: T?<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; class C {<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;        var i: Int = 0<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; let c = C() // Strong reference to prevent collection<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; let weakCs = [WeakReference(value: c)] // OK<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; print(&quot;C: \(weakCs[0].value!.i)&quot;) // 0<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;  I can add a protocol:  <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; // Array of weak references that implements a protocol OK<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; protocol P: AnyObject { // Note AnyObject<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;        var i: Int { get }<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; class CP: P {<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt;        var i: Int = 0<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; let cP = CP() // Strong reference to prevent collection<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; let weakCPs = [WeakReference(value: cP)] // OK<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; print(&quot;CP: \(weakCPs[0].value!.i)&quot;) // 0<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; But when I want an array of weak references to the protocol I get an error:<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;     <br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; // Array of weak references of a protocol not OK<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; let weakPs: [WeakReference&lt;P&gt;] = [WeakReference(value: cP)] // Using &#39;P&#39; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; &gt; print(&quot;P: \(weakPs[0].value!.i)&quot;) // 0<br>&gt; &gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; Is there something I have missed?<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; The error message, &quot;Using &#39;P&#39; as a concrete type conforming to protocol &#39;AnyObject&#39; is not supported&quot;, implies that it is a temporary limitation of the compiler; is this going to be fixed? Should I lodge a bug report?<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt; Thanks in advance for any advice,<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;   <br>&gt; &gt; &gt; &gt;    -- Howard.<br>&gt; &gt; &gt; &gt;               <br>&gt; &gt; &gt;  _______________________________________________<br>&gt; &gt; &gt;  swift-users mailing list<br>&gt; &gt; &gt;   swift-users at swift.org (javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);)<br>&gt; &gt; &gt;   https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt; &gt;         <br>&gt; &gt;   <br>&gt; &gt; Your problem is protocol self-conformance. In the first example, you’re creating WeakReference&lt;CP&gt;. CP conforms to P and to AnyObject. In the second example, you’re creating WeakReference&lt;P&gt;. P does not conform to P or to AnyObject.<br>&gt; &gt;   <br>&gt; &gt;<br>&gt; &gt;   <br>&gt; &gt; As for why @objc fixes it? … ¯\_(ツ)_/¯ all bets are off whenever @objc gets involved in anything.<br>&gt; &gt;   <br>&gt; &gt;<br>&gt; &gt;   <br>&gt; &gt; Karl<br>&gt; &gt;   <br>&gt; &gt;   <br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;  --<br>&gt;  -- Howard.<br>&gt;        <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160908/8ef9fbb0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Weak references in generic types</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>September  8, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Sep 8, 2016, at 6:28 AM, Karl Wagner via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It is in some sense a language limitation that we cant express what you&#39;re talking about. If we weren&#39;t using mailing lists it would be easier to search for &quot;protocol self-conformance&quot; on swift-evo and to read the earlier discussion about it. <br></p><p><br>&lt;sidetrack&gt;<br>…or if we were using some modern mailing list host like Google Groups or groups.io, that also offers a web view.<br>&lt;/sidetrack&gt;<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160908/0005439d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
