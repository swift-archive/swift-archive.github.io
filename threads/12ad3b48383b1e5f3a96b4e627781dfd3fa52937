<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 16, 2016 at 12:00:00pm</p></header><div class="content"><p>on Fri Oct 14 2016, Adrian Zubarev &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m still not convinced in some cases.<br>&gt;<br>&gt; Take a look at UIViews and its method addSubview.<br>&gt;<br>&gt; open func addSubview(_ view: UIView)<br>&gt; Personally I’d change or write this function like so:<br>&gt;<br>&gt; open func add(subview: UIView)<br>&gt; This reduces unnecessary noise _ view for both the implementation and usage.<br></p><p>No, the usage is either v1.addSubview(v2) or v1.add(subview: v2) Neither<br>usage introduces an underscore.  To a first approximation, how the<br>implementation looks is irrelevant.  APIs are used many more times than<br>they are written or looked up.<br></p><p>The word &quot;subview&quot; is part of the base name for at least two reasons:<br></p><p>1. The primary reason is that the base name should capture the method&#39;s<br>   core semantics, and adding a subview is semantically completely<br>   different from, say, adding a gesture recognizer.  They become parts<br>   of different logical collections on the view and come with utterly<br>   different side-effects.<br></p><p>2. It&#39;s important to have consistent and simple naming rules that work<br>   well for most APIs, and any rule we could think of that would lead us<br>   to breaking &quot;add&quot; from &quot;subview&quot; would either<br></p><p>   a) cause many APIs to become inarguably worse or<br>   b) neccessitate complicating the naming rules to avoid damaging those<br>      other APIs.<br></p><p>&gt; // Implementation<br>&gt; open func add(subview: UIView) {<br>&gt;     // `subview` is descriptive and just fine here<br>&gt; }<br>&gt;<br>&gt; // Usage<br>&gt;<br>&gt; self.view.add(subview: someOtherView)<br>&gt;<br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 14. Oktober 2016 um 16:42:06, Zach Waldowski via swift-evolution<br>&gt; (swift-evolution at swift.org) schrieb:<br>&gt;<br>&gt; The base name of the function describes its core purpose.<br>&gt;<br>&gt; There is no ambiguity instructing an Array to &quot;append&quot; something, but<br>&gt; there is context needed: &quot;what are we appending? The contents of the<br>&gt; newElements parameter.&quot; But there is ambiguity asking URL to &quot;give me a<br>&gt; new URL by appending&quot;. Appending what? Similarly, telling a collection<br>&gt; to &quot;replace&quot;. Replace what?<br>&gt;<br>&gt; A rule of thumb my team has applied is to put the parameter parens where<br>&gt; you would have put `with` in ObjC. This is instructive for your<br>&gt; questions as well. &quot;URLByAppendingWithPathComponent&quot; and<br>&gt; &quot;replaceWithSubrange&quot; wouldn&#39;t make sense, but &quot;appendWithContentsOf&quot;<br>&gt; does.<br>&gt;<br>&gt; Cheers!<br>&gt;   Zachary Waldowski<br>&gt;   zach at waldowski.me<br>&gt;<br>&gt; On Thu, Oct 13, 2016, at 10:30 PM, Charlie Monroe via swift-evolution<br>&gt; wrote:<br>&gt;&gt; Hi there,<br>&gt;&gt;  <br>&gt;&gt; I am really grateful for the API guidelines that were created as part of<br>&gt;&gt; Swift 3, however, I&#39;m having trouble with distinguishing which part of<br>&gt;&gt; the method name should be already an argument. To illustrate this, here<br>&gt;&gt; are two examples:<br>&gt;&gt;  <br>&gt;&gt; // On Array<br>&gt;&gt; public mutating func append(contentsOf newElements: S)<br>&gt;&gt;  <br>&gt;&gt; // On Foundation.URL<br>&gt;&gt; public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; Is there a particular reason why it&#39;s not<br>&gt;&gt;  <br>&gt;&gt; public func appending(pathComponent: String) -&gt; URL<br>&gt;&gt;  <br>&gt;&gt; ?<br>&gt;&gt;  <br>&gt;&gt; In my opinion the entire stdlib and Foundation is full of such<br>&gt;&gt; discrepancies which make it hard to decide when you name your own methods<br>&gt;&gt; since there are preceding cases in the language itself (or Foundation)<br>&gt;&gt; that go both ways.<br>&gt;&gt;  <br>&gt;&gt; The same goes for why don&#39;t the replace methods (this is on String)<br>&gt;&gt; follow the same - when there is append(contentsOf:):<br>&gt;&gt;  <br>&gt;&gt; public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt; with newElements: String)<br>&gt;&gt;  <br>&gt;&gt; instead of<br>&gt;&gt;  <br>&gt;&gt; public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt; with newElements: String)<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; I know there was an extensive discussion about this here when the stdlib<br>&gt;&gt; names were discussed. And given that these would be breaking changes, I<br>&gt;&gt; don&#39;t necessarily want to start a lengthy discussion about renaming those<br>&gt;&gt; again - I&#39;m just wondering what are the reasons behind this and what<br>&gt;&gt; should be the correct naming conventions.<br>&gt;&gt;  <br>&gt;&gt; Thanks!<br>&gt;&gt;  <br>&gt;&gt; Charlie<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Discussion] API Guidelines</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>October 18, 2016 at 11:00:00am</p></header><div class="content"><p>Thanks, Dave and Tony, it really helped.<br></p><p><br></p><p>&gt; On Oct 16, 2016, at 9:55 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Oct 14 2016, Adrian Zubarev &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I’m still not convinced in some cases.<br>&gt;&gt; <br>&gt;&gt; Take a look at UIViews and its method addSubview.<br>&gt;&gt; <br>&gt;&gt; open func addSubview(_ view: UIView)<br>&gt;&gt; Personally I’d change or write this function like so:<br>&gt;&gt; <br>&gt;&gt; open func add(subview: UIView)<br>&gt;&gt; This reduces unnecessary noise _ view for both the implementation and usage.<br>&gt; <br>&gt; No, the usage is either v1.addSubview(v2) or v1.add(subview: v2) Neither<br>&gt; usage introduces an underscore.  To a first approximation, how the<br>&gt; implementation looks is irrelevant.  APIs are used many more times than<br>&gt; they are written or looked up.<br>&gt; <br>&gt; The word &quot;subview&quot; is part of the base name for at least two reasons:<br>&gt; <br>&gt; 1. The primary reason is that the base name should capture the method&#39;s<br>&gt;   core semantics, and adding a subview is semantically completely<br>&gt;   different from, say, adding a gesture recognizer.  They become parts<br>&gt;   of different logical collections on the view and come with utterly<br>&gt;   different side-effects.<br>&gt; <br>&gt; 2. It&#39;s important to have consistent and simple naming rules that work<br>&gt;   well for most APIs, and any rule we could think of that would lead us<br>&gt;   to breaking &quot;add&quot; from &quot;subview&quot; would either<br>&gt; <br>&gt;   a) cause many APIs to become inarguably worse or<br>&gt;   b) neccessitate complicating the naming rules to avoid damaging those<br>&gt;      other APIs.<br>&gt; <br>&gt;&gt; // Implementation<br>&gt;&gt; open func add(subview: UIView) {<br>&gt;&gt;    // `subview` is descriptive and just fine here<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Usage<br>&gt;&gt; <br>&gt;&gt; self.view.add(subview: someOtherView)<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 14. Oktober 2016 um 16:42:06, Zach Waldowski via swift-evolution<br>&gt;&gt; (swift-evolution at swift.org) schrieb:<br>&gt;&gt; <br>&gt;&gt; The base name of the function describes its core purpose.<br>&gt;&gt; <br>&gt;&gt; There is no ambiguity instructing an Array to &quot;append&quot; something, but<br>&gt;&gt; there is context needed: &quot;what are we appending? The contents of the<br>&gt;&gt; newElements parameter.&quot; But there is ambiguity asking URL to &quot;give me a<br>&gt;&gt; new URL by appending&quot;. Appending what? Similarly, telling a collection<br>&gt;&gt; to &quot;replace&quot;. Replace what?<br>&gt;&gt; <br>&gt;&gt; A rule of thumb my team has applied is to put the parameter parens where<br>&gt;&gt; you would have put `with` in ObjC. This is instructive for your<br>&gt;&gt; questions as well. &quot;URLByAppendingWithPathComponent&quot; and<br>&gt;&gt; &quot;replaceWithSubrange&quot; wouldn&#39;t make sense, but &quot;appendWithContentsOf&quot;<br>&gt;&gt; does.<br>&gt;&gt; <br>&gt;&gt; Cheers!<br>&gt;&gt;   Zachary Waldowski<br>&gt;&gt;   zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt; On Thu, Oct 13, 2016, at 10:30 PM, Charlie Monroe via swift-evolution<br>&gt;&gt; wrote:<br>&gt;&gt;&gt; Hi there,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am really grateful for the API guidelines that were created as part of<br>&gt;&gt;&gt; Swift 3, however, I&#39;m having trouble with distinguishing which part of<br>&gt;&gt;&gt; the method name should be already an argument. To illustrate this, here<br>&gt;&gt;&gt; are two examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // On Array<br>&gt;&gt;&gt; public mutating func append(contentsOf newElements: S)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // On Foundation.URL<br>&gt;&gt;&gt; public func appendingPathComponent(_ pathComponent: String) -&gt; URL<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a particular reason why it&#39;s not<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public func appending(pathComponent: String) -&gt; URL<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In my opinion the entire stdlib and Foundation is full of such<br>&gt;&gt;&gt; discrepancies which make it hard to decide when you name your own methods<br>&gt;&gt;&gt; since there are preceding cases in the language itself (or Foundation)<br>&gt;&gt;&gt; that go both ways.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The same goes for why don&#39;t the replace methods (this is on String)<br>&gt;&gt;&gt; follow the same - when there is append(contentsOf:):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public mutating func replaceSubrange(_ bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt;&gt; with newElements: String)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; instead of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; public mutating func replace(subrange bounds: ClosedRange&lt;String.Index&gt;,<br>&gt;&gt;&gt; with newElements: String)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I know there was an extensive discussion about this here when the stdlib<br>&gt;&gt;&gt; names were discussed. And given that these would be breaking changes, I<br>&gt;&gt;&gt; don&#39;t necessarily want to start a lengthy discussion about renaming those<br>&gt;&gt;&gt; again - I&#39;m just wondering what are the reasons behind this and what<br>&gt;&gt;&gt; should be the correct naming conventions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Charlie<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161018/aa240d02/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
