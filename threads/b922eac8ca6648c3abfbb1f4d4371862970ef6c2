<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July 12, 2016 at 12:00:00am</p></header><div class="content"><p>Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br></p><p>button.image(for: .normal) = image<br></p><p>instead of<br></p><p>button.setImage(image, for: .normal)<br></p><p>The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br></p><p>&gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt; <br>&gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt; <br>&gt; <br>&gt; In the future, if we add throwing getters/ setters:<br>&gt; <br>&gt; subscript(_ position: Int) -&gt;Element {<br>&gt; get {<br>&gt; return …<br>&gt; }<br>&gt; throwing set {<br>&gt; …<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/b922f6c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>When would you want to use this instead of something like `button[imageFor:<br>.normal]` ?<br></p><p>On Mon, Jul 11, 2016 at 3:00 PM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Slightly related to this, I would really love to have non-subscript<br>&gt; parameterized properties. It would allow us to write<br>&gt;<br>&gt; button.image(for: .normal) = image<br>&gt;<br>&gt; instead of<br>&gt;<br>&gt; button.setImage(image, for: .normal)<br>&gt;<br>&gt; The same can be achieved through subscripts, but it’s not always as nice.<br>&gt; It would bring subscripts and computed properties closer together, which<br>&gt; also seems to be the goal of your proposal. Perhaps the two ideas could be<br>&gt; combined?<br>&gt;<br>&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a<br>&gt; parameter list, as well as getters and setters, so use of either symbol<br>&gt; will be unusual in this case.<br>&gt; &gt;<br>&gt; &gt; However, I think a colon is more suitable, since it implies the<br>&gt; possibility to set the value.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt; &gt;<br>&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt; &gt; get {<br>&gt; &gt; return …<br>&gt; &gt; }<br>&gt; &gt; throwing set {<br>&gt; &gt; …<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this<br>&gt; potentially confusing case.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/f1051b4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July 12, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 12 Jul 2016, at 00:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; When would you want to use this instead of something like `button[imageFor: .normal]` ?<br></p><p>All the time, basically. Primarily because IMO it doesn’t really make sense to make “image” part of the argument label for the control state - we just have to (using subscripts) because subscripts themselves can’t be named. I think most people would agree that<br></p><p>let image = button.image(for: .normal)<br></p><p>is more readable than<br></p><p>let image = button[imageFor: .normal]<br></p><p>and likewise, I would prefer<br></p><p>button.image(for: .normal) = image<br></p><p>over<br></p><p>button[imageFor: .normal] = image<br></p><p>&gt; On Mon, Jul 11, 2016 at 3:00 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt; <br>&gt; button.image(for: .normal) = image<br>&gt; <br>&gt; instead of<br>&gt; <br>&gt; button.setImage(image, for: .normal)<br>&gt; <br>&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt; <br>&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt; &gt; <br>&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt; &gt; <br>&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt; &gt; get {<br>&gt; &gt; return …<br>&gt; &gt; }<br>&gt; &gt; throwing set {<br>&gt; &gt; …<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Thoughts?<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/a07b11c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 12, 2016 at 08:00:00am</p></header><div class="content"><p>How about a proposal for named subscripts?<br></p><p>button.image[for: .normal] = image<br></p><p>defined using:<br></p><p>subscript image(for: UIControlState): UIImage? {<br>	get { … }<br>	set { … }<br>}<br></p><p>&gt; On 12 Jul 2016, at 00:29, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 12 Jul 2016, at 00:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; When would you want to use this instead of something like `button[imageFor: .normal]` ?<br>&gt; <br>&gt; All the time, basically. Primarily because IMO it doesn’t really make sense to make “image” part of the argument label for the control state - we just have to (using subscripts) because subscripts themselves can’t be named. I think most people would agree that<br>&gt; <br>&gt; let image = button.image(for: .normal)<br>&gt; <br>&gt; is more readable than<br>&gt; <br>&gt; let image = button[imageFor: .normal]<br>&gt; <br>&gt; and likewise, I would prefer<br>&gt; <br>&gt; button.image(for: .normal) = image<br>&gt; <br>&gt; over<br>&gt; <br>&gt; button[imageFor: .normal] = image<br>&gt; <br>&gt;&gt; On Mon, Jul 11, 2016 at 3:00 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt;&gt; <br>&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt; <br>&gt;&gt; instead of<br>&gt;&gt; <br>&gt;&gt; button.setImage(image, for: .normal)<br>&gt;&gt; <br>&gt;&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt;&gt; <br>&gt;&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt;&gt; &gt; get {<br>&gt;&gt; &gt; return …<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; throwing set {<br>&gt;&gt; &gt; …<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Thoughts?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/501c7ea9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 11, 2016 at 11:00:00pm</p></header><div class="content"><p>Feels like an abuse of subscripting IMHO. I&#39;m fine with parametrized properties but the subscript doesn&#39;t quite fit in this case. <br></p><p>Sent from my Apple Watch<br></p><p>On Jul 11, 2016, at 23:24, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; How about a proposal for named subscripts?<br>&gt; <br>&gt; button.image[for: .normal] = image<br>&gt; <br>&gt; defined using:<br>&gt; <br>&gt; subscript image(for: UIControlState): UIImage? {<br>&gt; 	get { … }<br>&gt; 	set { … }<br>&gt; }<br>&gt; <br>&gt;&gt; On 12 Jul 2016, at 00:29, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Jul 2016, at 00:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When would you want to use this instead of something like `button[imageFor: .normal]` ?<br>&gt;&gt; <br>&gt;&gt; All the time, basically. Primarily because IMO it doesn’t really make sense to make “image” part of the argument label for the control state - we just have to (using subscripts) because subscripts themselves can’t be named. I think most people would agree that<br>&gt;&gt; <br>&gt;&gt; let image = button.image(for: .normal)<br>&gt;&gt; <br>&gt;&gt; is more readable than<br>&gt;&gt; <br>&gt;&gt; let image = button[imageFor: .normal]<br>&gt;&gt; <br>&gt;&gt; and likewise, I would prefer<br>&gt;&gt; <br>&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt; <br>&gt;&gt; over<br>&gt;&gt; <br>&gt;&gt; button[imageFor: .normal] = image<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jul 11, 2016 at 3:00 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; instead of<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; button.setImage(image, for: .normal)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt;&gt;&gt;&gt; &gt; get {<br>&gt;&gt;&gt;&gt; &gt; return …<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt; throwing set {<br>&gt;&gt;&gt;&gt; &gt; …<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; Thoughts?<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/b51ac9e5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July 12, 2016 at 08:00:00am</p></header><div class="content"><p>Then it kinda looks like your subscripting a property called `image`, doesn’t it?<br></p><p>&gt; On 12 Jul 2016, at 08:24, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; How about a proposal for named subscripts?<br>&gt; <br>&gt; button.image[for: .normal] = image<br>&gt; <br>&gt; defined using:<br>&gt; <br>&gt; subscript image(for: UIControlState): UIImage? {<br>&gt; 	get { … }<br>&gt; 	set { … }<br>&gt; }<br>&gt; <br>&gt;&gt; On 12 Jul 2016, at 00:29, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Jul 2016, at 00:20, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When would you want to use this instead of something like `button[imageFor: .normal]` ?<br>&gt;&gt; <br>&gt;&gt; All the time, basically. Primarily because IMO it doesn’t really make sense to make “image” part of the argument label for the control state - we just have to (using subscripts) because subscripts themselves can’t be named. I think most people would agree that<br>&gt;&gt; <br>&gt;&gt; let image = button.image(for: .normal)<br>&gt;&gt; <br>&gt;&gt; is more readable than<br>&gt;&gt; <br>&gt;&gt; let image = button[imageFor: .normal]<br>&gt;&gt; <br>&gt;&gt; and likewise, I would prefer<br>&gt;&gt; <br>&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt; <br>&gt;&gt; over<br>&gt;&gt; <br>&gt;&gt; button[imageFor: .normal] = image<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jul 11, 2016 at 3:00 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; instead of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; button.setImage(image, for: .normal)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt;&gt;&gt; &gt; get {<br>&gt;&gt;&gt; &gt; return …<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; throwing set {<br>&gt;&gt;&gt; &gt; …<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; Thoughts?<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/6b765e88/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 12, 2016 at 10:00:00am</p></header><div class="content"><p>I like the idea of ‘named parameterised properties’, but I don&#39;t see it happening for Swift 3, which is unfortunate since it would tidy up quite a few APIs.<br>If this feature does get added, updating getter functions to them would be a non-breaking change, so maybe it would be possible to deprecate setImage(_:for:) and have a long trasition period.<br></p><p>The idea of using subscripts for this kind of property is interesting, but currently they don&#39;t show up in autocomplete, so working with labelled subscripts is tricky.<br></p><p>This does raise the question of where to draw the line with subscripts - should they only be used where the container itself is the base name of the ‘function’? But if this is the case:<br></p><p>self.items[0 ... 1] //good<br></p><p>self.item[0] //good<br></p><p>self.items[0] //bad, reads as ‘items 0’, not the grammatical term ‘item 0’<br></p><p>You could say we&#39;re already misusing them.<br></p><p>&gt; On 11 Jul 2016, at 23:00, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt; <br>&gt; button.image(for: .normal) = image<br>&gt; <br>&gt; instead of<br>&gt; <br>&gt; button.setImage(image, for: .normal)<br>&gt; <br>&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt; <br>&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt; &gt; <br>&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt; &gt; <br>&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt; &gt; get {<br>&gt; &gt; return …<br>&gt; &gt; }<br>&gt; &gt; throwing set {<br>&gt; &gt; …<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Thoughts?<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/cfe625ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>July 12, 2016 at 12:00:00pm</p></header><div class="content"><p>I wasn’t suggesting named subscripts :) As you seem to have figured out, that gets confusing pretty quickly. Writing `self.items[0 ... 1]` seems a bit silly because the use of a subscript already implies items of some kind. So, to be clear, I was suggesting computed properties that allow parameters in round brackets, not in square brackets.<br></p><p>I agree that this might not make Swift 3, but your proposal already brings subscripts and computed properties closer together. What I’m suggesting is to make their declarations equivalent apart from `subscript` vs `var &lt;variableName&gt;`. As an example, this is what you’re proposing:<br></p><p>struct ArrayWrapper&lt;Element&gt; {<br>    var array: [Element]<br>    <br>    subscript(index: Int): Element {<br>        get { return array[index] }<br>        set { array[index] = newValue }<br>    }<br>}<br></p><p>and my suggestion would allow this:<br></p><p>extension ArrayWrapper {<br>    var element(at index: Int): Element {<br>        get { return array[index] }<br>        set { array[index] = newValue }<br>    }<br>}<br></p><p>var wrapper = ArrayWrapper(array: [1, 2, 3])<br>wrapper.element(at: 1) = 5<br>print(wrapper.array) // [1, 5, 3]<br></p><p>&gt; On 12 Jul 2016, at 11:24, James Froggatt &lt;james.froggatt at me.com&gt; wrote:<br>&gt; <br>&gt; I like the idea of ‘named parameterised properties’, but I don&#39;t see it happening for Swift 3, which is unfortunate since it would tidy up quite a few APIs.<br>&gt; If this feature does get added, updating getter functions to them would be a non-breaking change, so maybe it would be possible to deprecate setImage(_:for:) and have a long trasition period.<br>&gt; <br>&gt; The idea of using subscripts for this kind of property is interesting, but currently they don&#39;t show up in autocomplete, so working with labelled subscripts is tricky.<br>&gt; <br>&gt; This does raise the question of where to draw the line with subscripts - should they only be used where the container itself is the base name of the ‘function’? But if this is the case:<br>&gt; <br>&gt; self.items[0 ... 1] //good<br>&gt; <br>&gt; self.item[0] //good<br>&gt; <br>&gt; self.items[0] //bad, reads as ‘items 0’, not the grammatical term ‘item 0’<br>&gt; <br>&gt; You could say we&#39;re already misusing them.<br>&gt; <br>&gt; On 11 Jul 2016, at 23:00, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt;&gt; <br>&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt; <br>&gt;&gt; instead of<br>&gt;&gt; <br>&gt;&gt; button.setImage(image, for: .normal)<br>&gt;&gt; <br>&gt;&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt;&gt; <br>&gt;&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt;&gt; &gt; get {<br>&gt;&gt; &gt; return …<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; throwing set {<br>&gt;&gt; &gt; …<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Thoughts?<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/d10292a1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 12, 2016 at 11:00:00am</p></header><div class="content"><p>Sorry, the subscript part was responding to Jacob&#39;s comment of how ‘button[imageFor: .normal]’ could be used with current syntax.<br></p><p>I&#39;ve just sent a pull request for this proposal, I mentioned exactly your suggestion in the ‘future directions’ section.<br></p><p>https://github.com/MutatingFunk/swift-evolution/blob/aa1fd53ec62b162f4cdefa9bd3845e13ac6f0d8d/proposals/NNNN-use-colons-for-subscript-type-declarations.md &lt;https://github.com/MutatingFunk/swift-evolution/blob/aa1fd53ec62b162f4cdefa9bd3845e13ac6f0d8d/proposals/NNNN-use-colons-for-subscript-type-declarations.md&gt;<br></p><p>&gt; On 12 Jul 2016, at 11:23, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; I wasn’t suggesting named subscripts :) As you seem to have figured out, that gets confusing pretty quickly. Writing `self.items[0 ... 1]` seems a bit silly because the use of a subscript already implies items of some kind. So, to be clear, I was suggesting computed properties that allow parameters in round brackets, not in square brackets.<br>&gt; <br>&gt; I agree that this might not make Swift 3, but your proposal already brings subscripts and computed properties closer together. What I’m suggesting is to make their declarations equivalent apart from `subscript` vs `var &lt;variableName&gt;`. As an example, this is what you’re proposing:<br>&gt; <br>&gt; struct ArrayWrapper&lt;Element&gt; {<br>&gt;     var array: [Element]<br>&gt;     <br>&gt;     subscript(index: Int): Element {<br>&gt;         get { return array[index] }<br>&gt;         set { array[index] = newValue }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; and my suggestion would allow this:<br>&gt; <br>&gt; extension ArrayWrapper {<br>&gt;     var element(at index: Int): Element {<br>&gt;         get { return array[index] }<br>&gt;         set { array[index] = newValue }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; var wrapper = ArrayWrapper(array: [1, 2, 3])<br>&gt; wrapper.element(at: 1) = 5<br>&gt; print(wrapper.array) // [1, 5, 3]<br>&gt; <br>&gt;&gt; On 12 Jul 2016, at 11:24, James Froggatt &lt;james.froggatt at me.com &lt;mailto:james.froggatt at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I like the idea of ‘named parameterised properties’, but I don&#39;t see it happening for Swift 3, which is unfortunate since it would tidy up quite a few APIs.<br>&gt;&gt; If this feature does get added, updating getter functions to them would be a non-breaking change, so maybe it would be possible to deprecate setImage(_:for:) and have a long trasition period.<br>&gt;&gt; <br>&gt;&gt; The idea of using subscripts for this kind of property is interesting, but currently they don&#39;t show up in autocomplete, so working with labelled subscripts is tricky.<br>&gt;&gt; <br>&gt;&gt; This does raise the question of where to draw the line with subscripts - should they only be used where the container itself is the base name of the ‘function’? But if this is the case:<br>&gt;&gt; <br>&gt;&gt; self.items[0 ... 1] //good<br>&gt;&gt; <br>&gt;&gt; self.item[0] //good<br>&gt;&gt; <br>&gt;&gt; self.items[0] //bad, reads as ‘items 0’, not the grammatical term ‘item 0’<br>&gt;&gt; <br>&gt;&gt; You could say we&#39;re already misusing them.<br>&gt;&gt; <br>&gt;&gt; On 11 Jul 2016, at 23:00, Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Slightly related to this, I would really love to have non-subscript parameterized properties. It would allow us to write<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; button.image(for: .normal) = image<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; instead of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; button.setImage(image, for: .normal)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The same can be achieved through subscripts, but it’s not always as nice. It would bring subscripts and computed properties closer together, which also seems to be the goal of your proposal. Perhaps the two ideas could be combined?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; In the future, if we add throwing getters/ setters:<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; subscript(_ position: Int) -&gt;Element {<br>&gt;&gt;&gt; &gt; get {<br>&gt;&gt;&gt; &gt; return …<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; throwing set {<br>&gt;&gt;&gt; &gt; …<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; Should this require ‘throws -&gt;Element’? Using a colon also removes this potentially confusing case.<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; Thoughts?<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/a827074e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
