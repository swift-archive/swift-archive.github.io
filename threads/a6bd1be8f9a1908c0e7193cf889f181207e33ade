<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0087: Rename lazy to @lazy&quot; begins now and runs through May 23. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dee842b5eb2fd94ffa79edac00b440e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>Chris Wagner</string> &lt;cwagner118 at gmail.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>   * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p><br>   * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Definitely, I completely agree that lazy fits as an attribute like the given examples<br></p><p>   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>NA<br></p><p>   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal. I use lazy often and this feels right even though I hadn&#39;t thought of it before. <br></p><p><br>--<br></p><p>Chris <br></p><p>&gt; On May 17, 2016, at 8:31 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 18, 2016 at 12:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes.<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes.  Though, will this change when/if the behaviors proposal is accepted<br>and–if yes–how?<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>No<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>Quick reading.<br></p><p>On Tue, May 17, 2016 at 11:31 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0087: Rename lazy to @lazy&quot; begins now and runs through<br>&gt; May 23. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/ef0e32c5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>May 18, 2016 at 12:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes. It&#39;s more consistent, both with the rules for keywords vs. attributes<br>and with future improvements with property behaviors, as mentioned in the<br>proposal.<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>&quot;Wrapper&quot; behaviors like this have been attributes in other languages I&#39;ve<br>used, like Java.<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>Read the proposal.<br></p><p>On Tue, May 17, 2016 at 11:31 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0087: Rename lazy to @lazy&quot; begins now and runs through<br>&gt; May 23. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/007278d6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 17, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br></p><p>The proposal says this at the beginning:<br></p><p>&gt; Swift&#39;s rule for attribues/keywords is that keywords usually modify type of variable; attributes do not.<br></p><p>[citation needed]<br></p><p>As far as I can tell, this is not true at all. Most declaration modifiers do *not* change the type of anything; as far as I can tell, only `mutating`, `nonmutating`, and possibly `optional` do. Meanwhile, several attributes—particularly `@noescape` and `@autoclosure`—*do* change the type. So where is this belief coming from?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 17, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 17, 2016, at 9:14 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br>&gt; <br>&gt; The proposal says this at the beginning:<br>&gt; <br>&gt;&gt; Swift&#39;s rule for attribues/keywords is that keywords usually modify type of variable; attributes do not.<br>&gt; <br>&gt; [citation needed]<br>&gt; <br>&gt; As far as I can tell, this is not true at all. Most declaration modifiers do *not* change the type of anything; as far as I can tell, only `mutating`, `nonmutating`, and possibly `optional` do. Meanwhile, several attributes—particularly `@noescape` and `@autoclosure`—*do* change the type. So where is this belief coming from?<br></p><p>Correct - the proposal is incorrect in this claim.  Swift&#39;s typical policy is that attributes do *not* modify the type of the declaration, which is why Swift 1 and 2 have used “lazy” instead of “@lazy”.<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 18, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0087: Rename lazy to @lazy&quot; begins now and runs through May 23. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br></p><p>I have nothing against lazy as a keyword but I also like there is a<br>rule/policy to keep keyword/attribute consistency so I&#39;d give it a go.<br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>None.<br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ebf471a3ae8df42a84f93a7efbbdbd0?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Ash Furrow</string> &lt;ash at ashfurrow.com&gt;<p>May 18, 2016 at 08:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I’m -1 on this. The only motivation given for the proposal is:<br></p><p>&gt; Swift&#39;s rule for attribues/keywords is that keywords usually modify type of variable; attributes do not.<br></p><p>Chris Lattner has [refuted this](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/017905.html):<br></p><p>&gt; the proposal is incorrect in this claim<br></p><p>It seems then that this is largely a stylistic change. If I recall correctly, early beta versions of Swift used @lazy before removing the @. Seems unwise to revert without sound motivation.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It’s a stylistic change, I don’t think there’s anything wrong with the current style, so I don’t think it’s addressing an actual problem, just a stylistic choice.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Not particularly.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I gave it a thorough reading and consideration. Admittedly I think the current style is better than the proposed @lazy, but that’s a subjective opinion.<br></p><p>-- <br>Ash Furrow<br>Sent with Airmail<br></p><p>On May 17, 2016 at 11:31:53 PM, Chris Lattner via swift-evolution (swift-evolution at swift.org) wrote:<br></p><p>Hello Swift community,<br></p><p>The review of &quot;SE-0087: Rename lazy to @lazy&quot; begins now and runs through May 23. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0087-lazy-attribute.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>* What is your evaluation of the proposal?<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>* Does this proposal fit well with the feel and direction of Swift?<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/58e9d758/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>May 18, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. Too early to optimize this. I would also be opposed to renaming didSet/willSet to lowercased preemptively because of the sake of renaming. <br>I think property behaviors should declare their own naming and syntax conventions (and be accepted in a version of Swift) before we start changing these API. <br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No because we do not know what property behaviors would look like for sure. <br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No. <br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read this proposal and other mail treads about API that will be affected by property behaviors like didSet/ willSet and lazy <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>[Review] SE-0087: Rename lazy to @lazy</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 19, 2016 at 09:00:00am</p></header><div class="content"><p>If lazy becomes @lazy, shouldn&#39;t dynamic become @dynamic as well? They both don&#39;t change the type as argued in the proposal, it only changes the way the value is accessed.<br></p><p>Krystof<br></p><p>&gt; On May 19, 2016, at 4:19 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. Too early to optimize this. I would also be opposed to renaming didSet/willSet to lowercased preemptively because of the sake of renaming. <br>&gt; I think property behaviors should declare their own naming and syntax conventions (and be accepted in a version of Swift) before we start changing these API. <br>&gt; <br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No because we do not know what property behaviors would look like for sure. <br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; No. <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; n/a<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; I read this proposal and other mail treads about API that will be affected by property behaviors like didSet/ willSet and lazy <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I commented earlier, but didn&#39;t actually review.<br></p><p>I&#39;m in favor of this change *if* we are very sure that the syntax will not change again, even if `lazy` is reimplemented as a property behavior. If we are *not* sure of this, however, then I think it should stay as it is now, because the advantages of `@lazy` over `lazy` are *very* minor and we don&#39;t want change fatigue to set in.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>These kinds of consistency issues are one of the things we&#39;re trying to clean up, so yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes...if, and *only* if, this change will align it with the final name and spelling of the feature. <br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading or two, plus lots of discussion on property behaviors.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0087: Rename lazy to @lazy</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May 19, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On May 19, 2016, at 12:20 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; I commented earlier, but didn&#39;t actually review.<br>&gt; <br>&gt; I&#39;m in favor of this change *if* we are very sure that the syntax will not change again, even if `lazy` is reimplemented as a property behavior. If we are *not* sure of this, however, then I think it should stay as it is now, because the advantages of `@lazy` over `lazy` are *very* minor and we don&#39;t want change fatigue to set in.<br></p><p>My opinion on this proposal is the same as Brent&#39;s. We should only implement it if the core team is sure that they want to use &#39;@&#39; syntax for property behaviors whenever that feature is proposed again.<br></p><p>Austin<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
