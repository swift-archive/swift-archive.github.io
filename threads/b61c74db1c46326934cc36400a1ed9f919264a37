<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0196d32c5877957590e3b9f6e74df09?s=50"></div><header><strong>Adding kqueue lib to libdispatch test Makefile</strong> from <string>Ron Olson</string> &lt;tachoknight at gmail.com&gt;<p>September 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi all-<br></p><p>I&#39;m trying to build Swift 3 for Fedora 24. Fedora doesn&#39;t come with <br>libkqueue so I built and installed that manually into <br>/usr/(include|lib). Building libdispatch as part of the build script <br>fails when trying to build the tests in swift-corelibs-libdispatch/tests <br>because it can&#39;t find kqueue and kevent. If I modify the Makefile to <br>include -lkqueue after -lpthread, it builds fine, but running the build <br>script again (swift/util/build-script) complains about the directory not <br>being clean.<br></p><p>What I&#39;d like to do (I think) is modify ... something ... to make sure <br>the Makefile in the tests directory includes kqueue; I&#39;ve been diving <br>into the build-settings.ini, as well as the various scripts, but CMake <br>and Ninja are new to me and I&#39;m a little flummoxed about what to modify <br>(and hopefully bubble those changes up to a buildbot_linux_fedora or <br>something like that). I&#39;ve been poking around the various scripts (the <br>most promising was the LIBDISPATCH_BUILD_ARGS in build-script-impl, but <br>adding -lkqueue doesn&#39;t seem to have any effect).<br></p><p>So if somebody could give me a pointer (so to speak) about where to <br>look, I&#39;d greatly appreciate it.<br></p><p>Thanks,<br></p><p>Ron<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>Adding kqueue lib to libdispatch test Makefile</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>September 14, 2016 at 02:00:00pm</p></header><div class="content"><p>swift-dev-bounces at swift.org wrote on 09/14/2016 01:34:10 PM:<br>&gt;<br>&gt; I&#39;m trying to build Swift 3 for Fedora 24. Fedora doesn&#39;t come with<br>&gt; libkqueue so I built and installed that manually into<br>&gt; /usr/(include|lib). Building libdispatch as part of the build script<br>&gt; fails when trying to build the tests in swift-corelibs-libdispatch/tests<br>&gt; because it can&#39;t find kqueue and kevent. If I modify the Makefile to<br>&gt; include -lkqueue after -lpthread, it builds fine, but running the build<br>&gt; script again (swift/util/build-script) complains about the directory not<br>&gt; being clean.<br>&gt;<br>&gt; What I&#39;d like to do (I think) is modify ... something ... to make sure<br>&gt; the Makefile in the tests directory includes kqueue; I&#39;ve been diving<br>&gt; into the build-settings.ini, as well as the various scripts, but CMake<br>&gt; and Ninja are new to me and I&#39;m a little flummoxed about what to modify<br>&gt; (and hopefully bubble those changes up to a buildbot_linux_fedora or<br>&gt; something like that). I&#39;ve been poking around the various scripts (the<br>&gt; most promising was the LIBDISPATCH_BUILD_ARGS in build-script-impl, but<br>&gt; adding -lkqueue doesn&#39;t seem to have any effect).<br>&gt;<br>&gt; So if somebody could give me a pointer (so to speak) about where to<br>&gt; look, I&#39;d greatly appreciate it.<br>&gt;<br></p><p>Hi Ron,<br></p><p>	The libdispatch build attempts to statically embed the right version<br>of libkqueue into libdispatch when you build from source.  As part of<br>porting libdispatch to Linux, we contributed bugfixes and extensions to<br>libkqueue that libdispatch requires.<br></p><p>	If you are building libdispatch from a git clone, if you do &quot;git<br>submodule init; git submodule update&quot; in swift-corelibs-libdispatch before<br>you do the build it will get you the right version of libkqueue and libpwq<br>sources and the build should &quot;just work&quot;.<br></p><p>	There are more details in the INSTALL.md file (see the Building on<br>Linux section).<br></p><p><br>Hope that helps,<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160914/a3f88b5c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
