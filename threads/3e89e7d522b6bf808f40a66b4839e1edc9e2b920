<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e40d3058defa1eaaa61ed5aa88d2be5?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Björn Forster</string> &lt;bjoern.forster at googlemail.com&gt;<p>August  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello Swift community,<br>to make use of Swift more appealing and useful for science, engineering and<br>finance and everything else involving actually calculating things, I think<br>it would be a big step forward if Swift would ship with its own<br>math/numerics library.<br></p><p>Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy in<br>its native math lib? It think it would be great to have a &quot;standard&quot;<br>annotation for vector arithmetic that the Swift community has agreed on and<br>that scientific packages can build on.<br></p><p>Which functionality should be covered by a Swift&#39;s math lib and where<br>should be drawn the line?<br></p><p>Any thoughts?<br></p><p>(If it is not the right time now to talk this topic, as it is not mentioned<br>in the goals for Swift 4 by Chris, I apologize for bringing this up now.<br>But I think then this should be discussed later at some point not in the<br>infinite future)<br></p><p>Björn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/3e89b920/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>August  3, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; to make use of Swift more appealing and useful for science, engineering and finance and everything else involving actually calculating things, I think it would be a big step forward if Swift would ship with its own math/numerics library.<br>There are several topics that imho would benefit from a standard implementation (C++ would be so much nicer with a simple &quot;Point&quot; type…) — math is one big piece, but there are many more.<br>None the less, it seems the core team has no time or interest in supporting libraries besides the bare stdlib, and the rest of the community is to fragmented to tackle this :-(<br></p><p>It&#39;s likely that there will be de-facto standards sooner or later, but it doesn&#39;t look like we&#39;ll have something like boost soon.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/c88ea186/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>August  3, 2016 at 10:00:00am</p></header><div class="content"><p>A few things immediately spring to mind:<br>• Fixed-size arrays<br>• An optimized Matrix type<br>• Swifty syntax for Fourier transforms<br>• A numerical integrator (or diff-eq solver!)<br>• BigInt capabilities<br></p><p>The first of these (fixed-size arrays) will probably require compiler<br>support.<br></p><p>The rest can already be done in a library, except I believe they will hit<br>the “generics cannot be specialized across module boundaries” slowdown, and<br>must be explicitly specialized for common numeric types to avoid it. (Has<br>this been fixed yet? Are there plans to?)<br></p><p>Nevin<br></p><p><br></p><p>On Wed, Aug 3, 2016 at 8:41 AM, Björn Forster &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; Hello Swift community,<br>&gt; to make use of Swift more appealing and useful for science, engineering<br>&gt; and finance and everything else involving actually calculating things, I<br>&gt; think it would be a big step forward if Swift would ship with its own<br>&gt; math/numerics library.<br>&gt;<br>&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy<br>&gt; in its native math lib? It think it would be great to have a &quot;standard&quot;<br>&gt; annotation for vector arithmetic that the Swift community has agreed on and<br>&gt; that scientific packages can build on.<br>&gt;<br>&gt; Which functionality should be covered by a Swift&#39;s math lib and where<br>&gt; should be drawn the line?<br>&gt;<br>&gt; Any thoughts?<br>&gt;<br>&gt; (If it is not the right time now to talk this topic, as it is not<br>&gt; mentioned in the goals for Swift 4 by Chris, I apologize for bringing this<br>&gt; up now. But I think then this should be discussed later at some point not<br>&gt; in the infinite future)<br>&gt;<br>&gt; Björn<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/6015dca5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  3, 2016 at 10:00:00am</p></header><div class="content"><p>On Wed, Aug 3, 2016 at 9:48 AM, Nevin Brackett-Rozinsky via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; A few things immediately spring to mind:<br>&gt; • Fixed-size arrays<br>&gt; • An optimized Matrix type<br>&gt; • Swifty syntax for Fourier transforms<br>&gt; • A numerical integrator (or diff-eq solver!)<br>&gt; • BigInt capabilities<br>&gt;<br>&gt; The first of these (fixed-size arrays) will probably require compiler<br>&gt; support.<br>&gt;<br>&gt; The rest can already be done in a library, except I believe they will hit<br>&gt; the “generics cannot be specialized across module boundaries” slowdown, and<br>&gt; must be explicitly specialized for common numeric types to avoid it. (Has<br>&gt; this been fixed yet? Are there plans to?)<br>&gt;<br></p><p>The underlying libraries provide optimized versions of matrix functions and<br>Fourier transforms only for particular numeric types anyway. It&#39;d be Swifty<br>to have Matrix&lt;MySpecialInt&gt;, but doing matrix multiplication with that<br>simply isn&#39;t going to be performant.<br></p><p><br>&gt;<br>&gt; Nevin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Wed, Aug 3, 2016 at 8:41 AM, Björn Forster &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; to make use of Swift more appealing and useful for science, engineering<br>&gt;&gt; and finance and everything else involving actually calculating things, I<br>&gt;&gt; think it would be a big step forward if Swift would ship with its own<br>&gt;&gt; math/numerics library.<br>&gt;&gt;<br>&gt;&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy<br>&gt;&gt; in its native math lib? It think it would be great to have a &quot;standard&quot;<br>&gt;&gt; annotation for vector arithmetic that the Swift community has agreed on and<br>&gt;&gt; that scientific packages can build on.<br>&gt;&gt;<br>&gt;&gt; Which functionality should be covered by a Swift&#39;s math lib and where<br>&gt;&gt; should be drawn the line?<br>&gt;&gt;<br>&gt;&gt; Any thoughts?<br>&gt;&gt;<br>&gt;&gt; (If it is not the right time now to talk this topic, as it is not<br>&gt;&gt; mentioned in the goals for Swift 4 by Chris, I apologize for bringing this<br>&gt;&gt; up now. But I think then this should be discussed later at some point not<br>&gt;&gt; in the infinite future)<br>&gt;&gt;<br>&gt;&gt; Björn<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/b6057e0e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68d21c811b4f037d9cbd43013319f9b4?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Muse M</string> &lt;james.lei65 at gmail.com&gt;<p>August  3, 2016 at 11:00:00pm</p></header><div class="content"><p>If Swift team have no roadmap on those plans, any swift developers with<br>strong in each area could kickstart and contributing libraries in Github<br>repo. We will greatly benefit from those areas and AI.<br></p><p>On Wed, Aug 3, 2016 at 11:10 PM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, Aug 3, 2016 at 9:48 AM, Nevin Brackett-Rozinsky via<br>&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; A few things immediately spring to mind:<br>&gt;&gt; • Fixed-size arrays<br>&gt;&gt; • An optimized Matrix type<br>&gt;&gt; • Swifty syntax for Fourier transforms<br>&gt;&gt; • A numerical integrator (or diff-eq solver!)<br>&gt;&gt; • BigInt capabilities<br>&gt;&gt;<br>&gt;&gt; The first of these (fixed-size arrays) will probably require compiler<br>&gt;&gt; support.<br>&gt;&gt;<br>&gt;&gt; The rest can already be done in a library, except I believe they will hit<br>&gt;&gt; the “generics cannot be specialized across module boundaries” slowdown, and<br>&gt;&gt; must be explicitly specialized for common numeric types to avoid it. (Has<br>&gt;&gt; this been fixed yet? Are there plans to?)<br>&gt;&gt;<br>&gt;<br>&gt; The underlying libraries provide optimized versions of matrix functions<br>&gt; and Fourier transforms only for particular numeric types anyway. It&#39;d be<br>&gt; Swifty to have Matrix&lt;MySpecialInt&gt;, but doing matrix multiplication with<br>&gt; that simply isn&#39;t going to be performant.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Nevin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, Aug 3, 2016 at 8:41 AM, Björn Forster &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; to make use of Swift more appealing and useful for science, engineering<br>&gt;&gt;&gt; and finance and everything else involving actually calculating things, I<br>&gt;&gt;&gt; think it would be a big step forward if Swift would ship with its own<br>&gt;&gt;&gt; math/numerics library.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy<br>&gt;&gt;&gt; in its native math lib? It think it would be great to have a &quot;standard&quot;<br>&gt;&gt;&gt; annotation for vector arithmetic that the Swift community has agreed on and<br>&gt;&gt;&gt; that scientific packages can build on.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Which functionality should be covered by a Swift&#39;s math lib and where<br>&gt;&gt;&gt; should be drawn the line?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; (If it is not the right time now to talk this topic, as it is not<br>&gt;&gt;&gt; mentioned in the goals for Swift 4 by Chris, I apologize for bringing this<br>&gt;&gt;&gt; up now. But I think then this should be discussed later at some point not<br>&gt;&gt;&gt; in the infinite future)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Björn<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160803/4ba35fa2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>August  3, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 5:41 AM, Björn Forster via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; to make use of Swift more appealing and useful for science, engineering and finance and everything else involving actually calculating things, I think it would be a big step forward if Swift would ship with its own math/numerics library.<br>&gt; <br>&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy in its native math lib? It think it would be great to have a &quot;standard&quot; annotation for vector arithmetic that the Swift community has agreed on and that scientific packages can build on.<br>&gt; <br>&gt; Which functionality should be covered by a Swift&#39;s math lib and where should be drawn the line?<br></p><p>Hi Björn,<br></p><p>This is one of many areas that we haven’t had time to really think about (specifically, how far the math portion of the Swift stdlib should go).  I think there is some general sentiment (e.g. expressed by Steve Canon) that Swift should eventually provide BigInt and robust decimal floating point support, but given the Swift 4 Stage 1 challenges in front of the standard library, we need to keep focused on that.  Extensions like that can be added at any time.<br></p><p>However, this isn’t something that really needs to be debated here: I’d strongly encourage you to start a project (e.g. on github) and try to build out some interesting things.  Once you have something interesting that works well, we can talk about whether it makes sense to incorporate some of the code or ideas into Swift, or whether it makes sense to be a standalone library.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>August  9, 2016 at 09:00:00pm</p></header><div class="content"><p>I think this is a great idea!<br></p><p>As Chris said we should use GitHub or something else to start such a project. Does someone already has a Math library where we can discuss and commit?<br></p><p>I&#39;ll soon push a small Math library to my GitHub repo and let you know.<br></p><p>Best regards<br>Maximilian<br></p><p>&gt; Am 03.08.2016 um 14:41 schrieb Björn Forster via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; to make use of Swift more appealing and useful for science, engineering and finance and everything else involving actually calculating things, I think it would be a big step forward if Swift would ship with its own math/numerics library.<br>&gt; <br>&gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy in its native math lib? It think it would be great to have a &quot;standard&quot; annotation for vector arithmetic that the Swift community has agreed on and that scientific packages can build on.<br>&gt; <br>&gt; Which functionality should be covered by a Swift&#39;s math lib and where should be drawn the line?<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; (If it is not the right time now to talk this topic, as it is not mentioned in the goals for Swift 4 by Chris, I apologize for bringing this up now. But I think then this should be discussed later at some point not in the infinite future)  <br>&gt; <br>&gt; Björn<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Which functionality should be covered by a native Swift math/numerics library that ships with the standard lib?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August  9, 2016 at 07:00:00pm</p></header><div class="content"><p>For matrix math, there are several projects in existence. I know of Surge<br>and its forked cousin Upsurge, and a quick googling reveals a few more.<br>On Tue, Aug 9, 2016 at 14:22 Maximilian Hünenberger &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think this is a great idea!<br>&gt;<br>&gt; As Chris said we should use GitHub or something else to start such a<br>&gt; project. Does someone already has a Math library where we can discuss and<br>&gt; commit?<br>&gt;<br>&gt; I&#39;ll soon push a small Math library to my GitHub repo and let you know.<br>&gt;<br>&gt; Best regards<br>&gt; Maximilian<br>&gt;<br>&gt; &gt; Am 03.08.2016 um 14:41 schrieb Björn Forster via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt; to make use of Swift more appealing and useful for science, engineering<br>&gt; and finance and everything else involving actually calculating things, I<br>&gt; think it would be a big step forward if Swift would ship with its own<br>&gt; math/numerics library.<br>&gt; &gt;<br>&gt; &gt; Wouldn&#39;t it be great if Swift would offer functionality similar to Numpy<br>&gt; in its native math lib? It think it would be great to have a &quot;standard&quot;<br>&gt; annotation for vector arithmetic that the Swift community has agreed on and<br>&gt; that scientific packages can build on.<br>&gt; &gt;<br>&gt; &gt; Which functionality should be covered by a Swift&#39;s math lib and where<br>&gt; should be drawn the line?<br>&gt; &gt;<br>&gt; &gt; Any thoughts?<br>&gt; &gt;<br>&gt; &gt; (If it is not the right time now to talk this topic, as it is not<br>&gt; mentioned in the goals for Swift 4 by Chris, I apologize for bringing this<br>&gt; up now. But I think then this should be discussed later at some point not<br>&gt; in the infinite future)<br>&gt; &gt;<br>&gt; &gt; Björn<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160809/3faf0a3a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
