<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Overload Resolution of Binary Operators</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>November 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I would have expected that the following code reports an error, because<br>of ambiguous function overloads:<br></p><p>infix operator ***: MultiplicationPrecedence<br>infix operator +++: AdditionPrecedence<br></p><p>func ***(x: Int, y: Int) -&gt; String {<br>	print(&quot;f1&quot;)<br>	return &quot;&quot;<br>}<br></p><p>func ***(x: Int, y: Int) -&gt; Int {<br>	print(&quot;f2&quot;)<br>	return 0<br>}<br></p><p>func +++(x: String, y: Int) -&gt; Int {<br>	print(&quot;f3&quot;)<br>	return 0<br>}<br></p><p>func +++(x: Int, y: Int) -&gt; Int {<br>	print(&quot;f4&quot;)<br>	return 0<br>}<br></p><p>let result = 0 *** 4 +++ 0		// prints f2 and f4<br></p><p><br>As far as I can tell, there are two possible overload resolutions: f1 + f3 or f2 + f4.<br>I thought that these two solutions get an &quot;equivalent score&quot; and therefore there would<br>be a compile error. However, that&#39;s not the case. Instead, the type checker picks<br>f2 and f4.<br></p><p>So, I guess my question is, whether there is some rule, that prefers<br>operators, which have the same argument types and the same return type<br>or whether this is simply a bug.<br></p><p>Thanks and best regards,<br>Toni<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/2e1a4c17/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Overload Resolution of Binary Operators</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>November 14, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Nov 14, 2016, at 16:05, Toni Suter via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I would have expected that the following code reports an error, because<br>&gt; of ambiguous function overloads:<br>&gt; <br>&gt; infix operator ***: MultiplicationPrecedence<br>&gt; infix operator +++: AdditionPrecedence<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; String {<br>&gt; 	print(&quot;f1&quot;)<br>&gt; 	return &quot;&quot;<br>&gt; }<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f2&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: String, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f3&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f4&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; let result = 0 *** 4 +++ 0		// prints f2 and f4<br>&gt; <br>&gt; <br>&gt; As far as I can tell, there are two possible overload resolutions: f1 + f3 or f2 + f4.<br>&gt; I thought that these two solutions get an &quot;equivalent score&quot; and therefore there would<br>&gt; be a compile error. However, that&#39;s not the case. Instead, the type checker picks<br>&gt; f2 and f4.<br>&gt; <br>&gt; So, I guess my question is, whether there is some rule, that prefers<br>&gt; operators, which have the same argument types and the same return type<br>&gt; or whether this is simply a bug.<br></p><p>Odd... Perhaps the compiler is convinced the result of the *** operation needs to be an Int? Dunno why that would be, though.<br></p><p>What happens if you split it up into two statements?<br></p><p>- Dave Sweeris <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/f6411318/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Overload Resolution of Binary Operators</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>November 14, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Nov 14, 2016, at 2:05 PM, Toni Suter via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I would have expected that the following code reports an error, because<br>&gt; of ambiguous function overloads:<br>&gt; <br>&gt; infix operator ***: MultiplicationPrecedence<br>&gt; infix operator +++: AdditionPrecedence<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; String {<br>&gt; 	print(&quot;f1&quot;)<br>&gt; 	return &quot;&quot;<br>&gt; }<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f2&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: String, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f3&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f4&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; let result = 0 *** 4 +++ 0		// prints f2 and f4<br>&gt; <br>&gt; <br>&gt; As far as I can tell, there are two possible overload resolutions: f1 + f3 or f2 + f4.<br>&gt; I thought that these two solutions get an &quot;equivalent score&quot; and therefore there would<br>&gt; be a compile error. However, that&#39;s not the case. Instead, the type checker picks<br>&gt; f2 and f4.<br>&gt; <br>&gt; So, I guess my question is, whether there is some rule, that prefers<br>&gt; operators, which have the same argument types and the same return type<br>&gt; or whether this is simply a bug.<br></p><p>It’s a bug, and one that I’m aware of, but I’m not aware of anything in JIRA for it. Do you mind opening an issue there and assigning it to me?<br></p><p>Mark<br></p><p>&gt; <br>&gt; Thanks and best regards,<br>&gt; Toni<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161114/85b9d980/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>Overload Resolution of Binary Operators</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>November 15, 2016 at 08:00:00am</p></header><div class="content"><p>I seem to remember that while it is possible to define, the compiler will yield an error if you try to use the functions (“cannot resolve”).<br></p><p>Regards,<br>Rien<br></p><p>Site: http://balancingrock.nl<br>Blog: http://swiftrien.blogspot.com<br>Github: http://github.com/Swiftrien<br>Project: http://swiftfire.nl<br></p><p><br></p><p><br>&gt; On 14 Nov 2016, at 23:05, Toni Suter via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I would have expected that the following code reports an error, because<br>&gt; of ambiguous function overloads:<br>&gt; <br>&gt; infix operator ***: MultiplicationPrecedence<br>&gt; infix operator +++: AdditionPrecedence<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; String {<br>&gt; 	print(&quot;f1&quot;)<br>&gt; 	return &quot;&quot;<br>&gt; }<br>&gt; <br>&gt; func ***(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f2&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: String, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f3&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; func +++(x: Int, y: Int) -&gt; Int {<br>&gt; 	print(&quot;f4&quot;)<br>&gt; 	return 0<br>&gt; }<br>&gt; <br>&gt; let result = 0 *** 4 +++ 0		// prints f2 and f4<br>&gt; <br>&gt; <br>&gt; As far as I can tell, there are two possible overload resolutions: f1 + f3 or f2 + f4.<br>&gt; I thought that these two solutions get an &quot;equivalent score&quot; and therefore there would<br>&gt; be a compile error. However, that&#39;s not the case. Instead, the type checker picks<br>&gt; f2 and f4.<br>&gt; <br>&gt; So, I guess my question is, whether there is some rule, that prefers<br>&gt; operators, which have the same argument types and the same return type<br>&gt; or whether this is simply a bug.<br>&gt; <br>&gt; Thanks and best regards,<br>&gt; Toni<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3a6c94632d8c82a2f077bbabbdd412f6?s=50"></div><header><strong>Overload Resolution of Binary Operators</strong> from <string>Toni Suter</string> &lt;tonisuter at me.com&gt;<p>November 15, 2016 at 09:00:00am</p></header><div class="content"><p>@David<br>If you would split up the statement like this...<br></p><p>let x = 0 *** 4<br>let result = x +++ 0<br></p><p>... the compiler would report an ambiguity error, because both overloads of *** are valid and of equivalent priority.<br>You could do something like this though:<br></p><p>let x: Int = 0 *** 4	// picks f2<br>let result = x +++ 0	// picks f4<br></p><p>or this:<br></p><p>let x: String = 0 *** 4	// picks f1<br>let result = x +++ 0	// picks f3<br></p><p>Now the compiler has enough type information to know which overload to pick.<br></p><p>@Mark<br>Ok, thanks. I reported a bug at https://bugs.swift.org/browse/SR-3209 &lt;https://bugs.swift.org/browse/SR-3209&gt; and assigned it to you.<br></p><p>@Rien<br>Yes, it is even possible to use the operators as the example above shows, but it is requires a bit more explicit<br>type information so that the type checker knows which overload to pick.<br></p><p>Thanks and best regards,<br>Toni<br></p><p>&gt; Am 15.11.2016 um 08:41 schrieb Rien &lt;Rien at Balancingrock.nl&gt;:<br>&gt; <br>&gt; I seem to remember that while it is possible to define, the compiler will yield an error if you try to use the functions (“cannot resolve”).<br>&gt; <br>&gt; Regards,<br>&gt; Rien<br>&gt; <br>&gt; Site: http://balancingrock.nl<br>&gt; Blog: http://swiftrien.blogspot.com<br>&gt; Github: http://github.com/Swiftrien<br>&gt; Project: http://swiftfire.nl<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 14 Nov 2016, at 23:05, Toni Suter via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I would have expected that the following code reports an error, because<br>&gt;&gt; of ambiguous function overloads:<br>&gt;&gt; <br>&gt;&gt; infix operator ***: MultiplicationPrecedence<br>&gt;&gt; infix operator +++: AdditionPrecedence<br>&gt;&gt; <br>&gt;&gt; func ***(x: Int, y: Int) -&gt; String {<br>&gt;&gt; 	print(&quot;f1&quot;)<br>&gt;&gt; 	return &quot;&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func ***(x: Int, y: Int) -&gt; Int {<br>&gt;&gt; 	print(&quot;f2&quot;)<br>&gt;&gt; 	return 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func +++(x: String, y: Int) -&gt; Int {<br>&gt;&gt; 	print(&quot;f3&quot;)<br>&gt;&gt; 	return 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func +++(x: Int, y: Int) -&gt; Int {<br>&gt;&gt; 	print(&quot;f4&quot;)<br>&gt;&gt; 	return 0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let result = 0 *** 4 +++ 0		// prints f2 and f4<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; As far as I can tell, there are two possible overload resolutions: f1 + f3 or f2 + f4.<br>&gt;&gt; I thought that these two solutions get an &quot;equivalent score&quot; and therefore there would<br>&gt;&gt; be a compile error. However, that&#39;s not the case. Instead, the type checker picks<br>&gt;&gt; f2 and f4.<br>&gt;&gt; <br>&gt;&gt; So, I guess my question is, whether there is some rule, that prefers<br>&gt;&gt; operators, which have the same argument types and the same return type<br>&gt;&gt; or whether this is simply a bug.<br>&gt;&gt; <br>&gt;&gt; Thanks and best regards,<br>&gt;&gt; Toni<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161115/648f96ac/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
