<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79fcacd66b863b774ee3e79c7bd8eabd?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Lammert Westerhoff</string> &lt;westerhoff at gmail.com&gt;<p>March 10, 2016 at 10:00:00pm</p></header><div class="content"><p>Currently the Swift Optional doesn’t have an ifPresent function. <br>This function is much like the map function except that the passed in function always returns Void. Almost the same can be done with the mapfunction, however the map function gives a compiler warning if it&#39;s result is unused. Also a map function can be ambiguous when there are multiple functions with the same name. The ifPresent will always pick the right function; i.e. the one returning Void and therefore is not ambiguous .<br></p><p>The ifPresent function is like the map function very powerful. Some examples of its usage:<br></p><p>let mapView: MKMapView = ... // some map view<br>let annotation: MKAnnotation? = ... // some optional annotation<br>annotation.ifPresent(mapView.addAnnotation)<br></p><p>I also wrote a Blog Post about this topic in which I present it as an extension of Optional with some more examples where I find it very useful: https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/ &lt;https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/&gt;<br></p><p>The implementation can be as simple as following:<br></p><p>public func ifPresent(@noescape f: (Wrapped) throws -&gt; Void) rethrows {<br>   _ = try map(f)<br>}<br></p><p>—<br>Lammert Westerhoff<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/8f75d058/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 10, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 10, 2016, at 2:55 PM, Lammert Westerhoff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently the Swift Optional doesn’t have an ifPresent function. <br>&gt; This function is much like the map function except that the passed in function always returns Void. Almost the same can be done with the mapfunction, however the map function gives a compiler warning if it&#39;s result is unused. Also a map function can be ambiguous when there are multiple functions with the same name. The ifPresent will always pick the right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt; <br>&gt; The ifPresent function is like the map function very powerful. Some examples of its usage:<br>&gt; <br>&gt; let mapView: MKMapView = ... // some map view<br>&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt; <br>&gt; I also wrote a Blog Post about this topic in which I present it as an extension of Optional with some more examples where I find it very useful: https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/ &lt;https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/&gt;<br>&gt; <br></p><p>While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make more sense <br>to extend `forEach` to support optionals in a similar way that map and flapMap <br>currently do rather than introduce `ifPresent`?<br></p><p>let y: Int? = 1<br>let n: Int? = nil<br></p><p>_ = y.map({ print($0) }) // works in current Swift<br>_ = n.map({ print($0) }) // ditto<br></p><p>y.forEach{ print($0) } // not currently a thing<br>n.forEach{ print($0) } // ditto<br></p><p>Just spitballing here.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/03c4feb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/006afe1f7d5e4f18190f2093dd2c5cac?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Adam Sharp</string> &lt;adsharp at me.com&gt;<p>March 11, 2016 at 01:00:00pm</p></header><div class="content"><p>A couple other ideas:<br></p><p>	// Not sure about the &quot;if&quot; prefix, but reads nicely<br>	foo.ifSome { print($0) }<br></p><p>	// Goes with other stdlib functions accepting closures, but perhaps less clear that the closure may not execute<br>	foo.withSome { print($0) }<br></p><p>–Adam<br></p><p>&gt; On 11 Mar 2016, at 12:32 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 10, 2016, at 2:55 PM, Lammert Westerhoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently the Swift Optional doesn’t have an ifPresent function. <br>&gt;&gt; This function is much like the map function except that the passed in function always returns Void. Almost the same can be done with the mapfunction, however the map function gives a compiler warning if it&#39;s result is unused. Also a map function can be ambiguous when there are multiple functions with the same name. The ifPresent will always pick the right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt;&gt; <br>&gt;&gt; The ifPresent function is like the map function very powerful. Some examples of its usage:<br>&gt;&gt; <br>&gt;&gt; let mapView: MKMapView = ... // some map view<br>&gt;&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt;&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt;&gt; <br>&gt;&gt; I also wrote a Blog Post about this topic in which I present it as an extension of Optional with some more examples where I find it very useful: https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/ &lt;https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/&gt;<br>&gt;&gt; <br>&gt; <br>&gt; While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make more sense <br>&gt; to extend `forEach` to support optionals in a similar way that map and flapMap <br>&gt; currently do rather than introduce `ifPresent`?<br>&gt; <br>&gt; let y: Int? = 1<br>&gt; let n: Int? = nil<br>&gt; <br>&gt; _ = y.map({ print($0) }) // works in current Swift<br>&gt; _ = n.map({ print($0) }) // ditto<br>&gt; <br>&gt; y.forEach{ print($0) } // not currently a thing<br>&gt; n.forEach{ print($0) } // ditto<br>&gt; <br>&gt; Just spitballing here.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/461aef14/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 11, 2016 at 02:00:00pm</p></header><div class="content"><p>+1.<br></p><p>I’d go so far as to suggest that maybe Optional should conform to CollectionProtocol, since you can pretty easily think of an Optional as a collection that can’t have more than one element.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 10, 2016, at 7:32 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make more sense <br>&gt; to extend `forEach` to support optionals in a similar way that map and flapMap <br>&gt; currently do rather than introduce `ifPresent`?<br>&gt; <br>&gt; let y: Int? = 1<br>&gt; let n: Int? = nil<br>&gt; <br>&gt; _ = y.map({ print($0) }) // works in current Swift<br>&gt; _ = n.map({ print($0) }) // ditto<br>&gt; <br>&gt; y.forEach{ print($0) } // not currently a thing<br>&gt; n.forEach{ print($0) } // ditto<br>&gt; <br>&gt; Just spitballing here.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/6dfbf59f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 12, 2016 at 02:00:00pm</p></header><div class="content"><p>@Dave, Yes, CollectionType would be better than SequenceType.<br></p><p>On Saturday, 12 March 2016, Dave via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1.<br>&gt;<br>&gt; I’d go so far as to suggest that maybe Optional should conform to<br>&gt; CollectionProtocol, since you can pretty easily think of an Optional as a<br>&gt; collection that can’t have more than one element.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Mar 10, 2016, at 7:32 PM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make<br>&gt; more sense<br>&gt; to extend `forEach` to support optionals in a similar way that map and<br>&gt; flapMap<br>&gt; currently do rather than introduce `ifPresent`?<br>&gt;<br>&gt; let y: Int? = 1<br>&gt; let n: Int? = nil<br>&gt;<br>&gt; _ = y.map({ print($0) }) // works in current Swift<br>&gt; _ = n.map({ print($0) }) // ditto<br>&gt;<br>&gt; y.forEach{ print($0) } // not currently a thing<br>&gt; n.forEach{ print($0) } // ditto<br>&gt;<br>&gt; Just spitballing here.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/e27ad629/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Mar 11, 2016 at 7:17 PM, Howard Lovatt via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; @Dave, Yes, CollectionType would be better than SequenceType.<br></p><p>We already considered doing this a long time ago, and we decided against it.<br></p><p>1.  `for x in y {}` would start working everywhere because of T to T? promotion.<br></p><p>2.  Even if we forbid that specific promotion in that context, the following<br></p><p>for x in optionalThing {}<br></p><p>is also not good if the unwrapped value is a collection.  (The user<br>probably meant to iterate over the collection instead.)<br></p><p>3.  Why would one want all of the collection APIs on an optional?<br>index(of:)?  sorted()?  .first/.last?  Another overload of map that<br>returns an array?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March 14, 2016 at 08:00:00pm</p></header><div class="content"><p>We&#39;ve talked about this before, so I&#39;m going to link directly to my (negative) response from back then: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003697.html.<br></p><p>(The rest of the thread is certainly also relevant, but my past opinion is still the one I most identify with here!)<br></p><p>Jordan<br></p><p>&gt; On Mar 11, 2016, at 12:15 , Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1.<br>&gt; <br>&gt; I’d go so far as to suggest that maybe Optional should conform to CollectionProtocol, since you can pretty easily think of an Optional as a collection that can’t have more than one element.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Mar 10, 2016, at 7:32 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make more sense <br>&gt;&gt; to extend `forEach` to support optionals in a similar way that map and flapMap <br>&gt;&gt; currently do rather than introduce `ifPresent`?<br>&gt;&gt; <br>&gt;&gt; let y: Int? = 1<br>&gt;&gt; let n: Int? = nil<br>&gt;&gt; <br>&gt;&gt; _ = y.map({ print($0) }) // works in current Swift<br>&gt;&gt; _ = n.map({ print($0) }) // ditto<br>&gt;&gt; <br>&gt;&gt; y.forEach{ print($0) } // not currently a thing<br>&gt;&gt; n.forEach{ print($0) } // ditto<br>&gt;&gt; <br>&gt;&gt; Just spitballing here.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/7f473f13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 09:00:00pm</p></header><div class="content"><p>I suddenly have a great desire to do a pull-request on https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br></p><p>-- E, who has admittedly taken on too much today <br></p><p>&gt; On Mar 14, 2016, at 9:12 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We&#39;ve talked about this before, so I&#39;m going to link directly to my (negative) response from back then: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003697.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003697.html&gt;.<br>&gt; <br>&gt; (The rest of the thread is certainly also relevant, but my past opinion is still the one I most identify with here!)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 12:15 , Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.<br>&gt;&gt; <br>&gt;&gt; I’d go so far as to suggest that maybe Optional should conform to CollectionProtocol, since you can pretty easily think of an Optional as a collection that can’t have more than one element.<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 10, 2016, at 7:32 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I&#39;m not convinced of the utility or lack thereof, wouldn&#39;t it make more sense <br>&gt;&gt;&gt; to extend `forEach` to support optionals in a similar way that map and flapMap <br>&gt;&gt;&gt; currently do rather than introduce `ifPresent`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let y: Int? = 1<br>&gt;&gt;&gt; let n: Int? = nil<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _ = y.map({ print($0) }) // works in current Swift<br>&gt;&gt;&gt; _ = n.map({ print($0) }) // ditto<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; y.forEach{ print($0) } // not currently a thing<br>&gt;&gt;&gt; n.forEach{ print($0) } // ditto<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just spitballing here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/1482c2b5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>March 14, 2016 at 10:00:00pm</p></header><div class="content"><p>Oh! And rereading the thread, I see that Dmitri had mentioned that as well… I must not have seen that message, because he raises some good points that I hadn’t considered. Anyway, sorry, I didn’t mean rehash something that’d already been decided.<br></p><p>I’m still in favor of adding ‘forEach’ over ‘ifPresent’, though… the meaning is as clear (at least to me), and it’s one less function name to remember.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Mar 14, 2016, at 10:12 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; We&#39;ve talked about this before, so I&#39;m going to link directly to my (negative) response from back then: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003697.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003697.html&gt;.<br>&gt; <br>&gt; (The rest of the thread is certainly also relevant, but my past opinion is still the one I most identify with here!)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Mar 11, 2016, at 12:15 , Dave via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1.<br>&gt;&gt; <br>&gt;&gt; I’d go so far as to suggest that maybe Optional should conform to CollectionProtocol, since you can pretty easily think of an Optional as a collection that can’t have more than one element.<br>&gt;&gt; <br>&gt;&gt; - Dave Sweeris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/8f60d0e4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 11, 2016 at 07:00:00am</p></header><div class="content"><p>+1<br>ifPresent is something I&#39;ve used a lot in Java/Guava.<br>In Smalltalk we had at:ifPresent: for dictionary lookup which could then easily be simulated by lookup followed by ifPresent.<br></p><p>-Thorsten <br></p><p>&gt; Am 10.03.2016 um 22:55 schrieb Lammert Westerhoff via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Currently the Swift Optional doesn’t have an ifPresent function. <br>&gt; This function is much like the map function except that the passed in function always returns Void. Almost the same can be done with the mapfunction, however the map function gives a compiler warning if it&#39;s result is unused. Also a map function can be ambiguous when there are multiple functions with the same name. The ifPresent will always pick the right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt; <br>&gt; The ifPresent function is like the map function very powerful. Some examples of its usage:<br>&gt; <br>&gt; let mapView: MKMapView = ... // some map view<br>&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt; <br>&gt; I also wrote a Blog Post about this topic in which I present it as an extension of Optional with some more examples where I find it very useful: https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/<br>&gt; <br>&gt; The implementation can be as simple as following:<br>&gt; <br>&gt; public func ifPresent(@noescape f: (Wrapped) throws -&gt; Void) rethrows {<br>&gt;    _ = try map(f)<br>&gt; }<br>&gt; <br>&gt; —<br>&gt; Lammert Westerhoff<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/f0e122ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/11a8e906b9e22dfebe544e4e218a4be0?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Brian Pratt</string> &lt;brian at pratt.io&gt;<p>March 11, 2016 at 09:00:00am</p></header><div class="content"><p>+1, feels like a no-brainer and is a nice low-impact change.<br></p><p>I like it.<br></p><p>On Fri, Mar 11, 2016 at 12:14 AM, Thorsten Seitz via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt; ifPresent is something I&#39;ve used a lot in Java/Guava.<br>&gt; In Smalltalk we had at:ifPresent: for dictionary lookup which could then<br>&gt; easily be simulated by lookup followed by ifPresent.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; Am 10.03.2016 um 22:55 schrieb Lammert Westerhoff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; Currently the Swift Optional doesn’t have an ifPresent function.<br>&gt; This function is much like the map function except that the passed in<br>&gt; function always returns Void. Almost the same can be done with<br>&gt; the mapfunction, however the map function gives a compiler warning if it&#39;s<br>&gt; result is unused. Also a map function can be ambiguous when there are<br>&gt; multiple functions with the same name. The ifPresent will always pick the<br>&gt; right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt;<br>&gt; The ifPresent function is like the map function very powerful. Some<br>&gt; examples of its usage:<br>&gt;<br>&gt; let mapView: MKMapView = ... // some map view<br>&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt;<br>&gt; I also wrote a Blog Post about this topic in which I present it as an<br>&gt; extension of Optional with some more examples where I find it very useful:<br>&gt; https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/<br>&gt;<br>&gt; The implementation can be as simple as following:<br>&gt;<br>&gt; public func ifPresent(@noescape f: (Wrapped) throws -&gt; Void) rethrows {<br>&gt;    _ = try map(f)<br>&gt; }<br>&gt;<br>&gt; —<br>&gt; Lammert Westerhoff<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/2fb2cba5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 11, 2016 at 06:00:00pm</p></header><div class="content"><p>This only solves the problem if the target function has one argument. I don&#39;t think the problem is so broad that is requires a stdlib change.<br></p><p>I&#39;m -1 on this for now.<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Brian Pratt via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 11.03.2016, o godz. 16:28:<br>&gt; <br>&gt; +1, feels like a no-brainer and is a nice low-impact change. <br>&gt; <br>&gt; I like it.<br>&gt; <br>&gt; On Fri, Mar 11, 2016 at 12:14 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; +1<br>&gt; ifPresent is something I&#39;ve used a lot in Java/Guava.<br>&gt; In Smalltalk we had at:ifPresent: for dictionary lookup which could then easily be simulated by lookup followed by ifPresent.<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; Am 10.03.2016 um 22:55 schrieb Lammert Westerhoff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; Currently the Swift Optional doesn’t have an ifPresent function. <br>&gt;&gt; This function is much like the map function except that the passed in function always returns Void. Almost the same can be done with the mapfunction, however the map function gives a compiler warning if it&#39;s result is unused. Also a map function can be ambiguous when there are multiple functions with the same name. The ifPresent will always pick the right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt;&gt; <br>&gt;&gt; The ifPresent function is like the map function very powerful. Some examples of its usage:<br>&gt;&gt; <br>&gt;&gt; let mapView: MKMapView = ... // some map view<br>&gt;&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt;&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt;&gt; <br>&gt;&gt; I also wrote a Blog Post about this topic in which I present it as an extension of Optional with some more examples where I find it very useful: https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/ &lt;https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/&gt;<br>&gt;&gt; <br>&gt;&gt; The implementation can be as simple as following:<br>&gt;&gt; <br>&gt;&gt; public func ifPresent(@noescape f: (Wrapped) throws -&gt; Void) rethrows {<br>&gt;&gt;    _ = try map(f)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; —<br>&gt;&gt; Lammert Westerhoff<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/03f4e272/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Add an ifPresent function to Optional</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 12, 2016 at 06:00:00am</p></header><div class="content"><p>Why not make optional a SequenceType? This works really well in Scala and<br>provides the desired functionality via forEach.<br></p><p>On Friday, 11 March 2016, Lammert Westerhoff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently the Swift Optional doesn’t have an ifPresent function.<br>&gt; This function is much like the map function except that the passed in<br>&gt; function always returns Void. Almost the same can be done with<br>&gt; the mapfunction, however the map function gives a compiler warning if it&#39;s<br>&gt; result is unused. Also a map function can be ambiguous when there are<br>&gt; multiple functions with the same name. The ifPresent will always pick the<br>&gt; right function; i.e. the one returning Void and therefore is not ambiguous .<br>&gt;<br>&gt; The ifPresent function is like the map function very powerful. Some<br>&gt; examples of its usage:<br>&gt;<br>&gt; let mapView: MKMapView = ... // some map view<br>&gt; let annotation: MKAnnotation? = ... // some optional annotation<br>&gt; annotation.ifPresent(mapView.addAnnotation)<br>&gt;<br>&gt; I also wrote a Blog Post about this topic in which I present it as an<br>&gt; extension of Optional with some more examples where I find it very useful:<br>&gt; https://swiftforward.wordpress.com/2015/12/04/add-ifpresent-to-swift-optionals/<br>&gt;<br>&gt; The implementation can be as simple as following:<br>&gt;<br>&gt; public func ifPresent(@noescape f: (Wrapped) throws -&gt; Void) rethrows {<br>&gt;    _ = try map(f)<br>&gt; }<br>&gt;<br>&gt; —<br>&gt; Lammert Westerhoff<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160312/9500b648/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
