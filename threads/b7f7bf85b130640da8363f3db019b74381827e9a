<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 10:00:00am</p></header><div class="content"><p>on Tue Feb 02 2016, Janosch Hildebrand &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On 02 Feb 2016, at 02:41, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Mon Feb 01 2016, Janosch Hildebrand<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt;&gt;&gt; minor points and disagreements:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt;&gt;&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt;&gt;&gt; easier to grasp at first but personally I really came to like<br>&gt;&gt;&gt; `precondition()`.<br>&gt;&gt;&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt;&gt;&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt;&gt;&gt; better; stating an API contract. The fact that the condition is<br>&gt;&gt;&gt; actively checked is secondary to that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt;&gt;&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br>&gt;&gt; <br>&gt;&gt; Why?<br>&gt;&gt; <br>&gt;&gt; I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>&gt;&gt; eventually I realized that this pattern is less ambiguous, at least in<br>&gt;&gt; general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>&gt;&gt; considered high-tech construction elements since the middle ages, but<br>&gt;&gt; it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>&gt;&gt; keep.<br>&gt;<br>&gt; :-)<br>&gt; You are right, it&#39;s definitely less ambiguous in general. I&#39;m just not sure<br>&gt; how often that ambiguity actually arises in practice and if it&#39;s often enough to<br>&gt; justify always using the clearer but less beautiful style, even if it often actually<br>&gt; might not be necessary...<br></p><p>I am not convinced there&#39;s an objective aesthetic winner here.  <br>It&#39;s consistent with our aims to have method names that cause their<br>invocations to very clearly describe semantics.  To me, that is the mark<br>of a beautiful API.<br></p><p>When I didn&#39;t think it was clearer, I argued that in the absence of<br>other criteria, the shorter name (“keepCapacity”) should win, but<br>overall, the use of the past particple for these kinds of parameters<br>emphasizes that they modify an aspect of the behavior of the method,<br>which has the primary verb; they are not independent commands.  So I<br>think the three extra characters pay for themselves.  It has the added<br>benefit of satisfying those for whom being able to speak the method name<br>fluently is an important factor.<br></p><p>&gt; At least in these cases here i find the imperative to be perfectly<br>&gt; clear, especially given the surrounding context but you might have a<br>&gt; better idea what the average case might look like...<br>&gt;<br>&gt; Also there is of course something to be said for consistency and I&#39;m probably<br>&gt; going to get used to this with time; I&#39;m just not quite there yet ;-)<br>&gt;<br>&gt; It&#39;s also a bit more sentence-like: <br>&gt; * &quot;remove all; how?, ... by keeping capacity)&quot;<br>&gt; vs<br>&gt; * &quot;remove all! keep (the) capacity!&quot;<br>&gt; but then again the new guidelines and ongoing discussion on SE-0005<br>&gt; generally move away from that anyway so that doesn&#39;t seem to be a big factor.<br>&gt;<br>&gt; &lt;/ramble&gt;<br>&gt;<br>&gt; Speaking of this change, shouldn&#39;t  `split(_, maxSplits:, omitEmptySubsequences:)`<br>&gt; become `split(_, maxSplits:, omittingEmptySubsequences:)` as well or am I<br>&gt; missing something?<br></p><p>You make a good point.<br></p><p>&gt;<br>&gt;&gt;&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt;&gt;&gt; not `unsafeAddressOf` into AnyObject? <br>&gt;&gt; <br>&gt;&gt; Language limitation: AnyObject can&#39;t be modified or extended.<br>&gt;<br>&gt; Thanks! (To Brent as well). That makes sense of course.<br>&gt;<br>&gt; Still not sure how I feel about making these functions so accessible<br>&gt; but I guess that issue should be solved differently if at all.<br>&gt;<br>&gt;&gt;&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt;&gt;&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt;&gt;&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt;&gt;&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt;&gt;&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt;&gt;&gt; have a good suggestion. The only thing that came to mind was<br>&gt;&gt;&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt;&gt;&gt; those either especially not to the point of deviating from the norm...<br>&gt;&gt; <br>&gt;&gt; Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>&gt;&gt; :-)<br>&gt;<br>&gt; Well, at least I&#39;m not alone then :D<br>&gt;<br>&gt;&gt;&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt;&gt;&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt;&gt;&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt;&gt;&gt; easier for someone to give me a short summary :-)<br>&gt;&gt; <br>&gt;&gt; I think these messages give all the details:<br>&gt;&gt; <br>&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>&gt;&gt; &lt;http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com&gt;<br>&gt;&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/5344<br>&gt;&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5344&gt;<br>&gt;<br>&gt; Sorry, maybe I&#39;m missing something or my question was unclear, but<br>&gt; isn&#39;t that more the rationale for dropping the &quot;Type&quot; suffix?<br>&gt;<br>&gt; I&#39;m asking more about the switch from `Generator` to `Iterator` and<br>&gt; by that argument wouldn&#39;t `GeneratorProtocol` work just as well?<br>&gt;<br>&gt; My assumption was that the switch was probably motivated by<br>&gt; a) Iterator is the more well known concept<br>&gt; b) Generator is more of a term of art and IIUC Swift&#39;s Generators<br>&gt; aren&#39;t Generators in the strictest sense<br>&gt;<br>&gt; but I could be wrong in a lot of ways, hence why I&#39;m asking :-)<br>&gt;<br>&gt;&gt;&gt; * Typo: <br>&gt;&gt;&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br>&gt;&gt; <br>&gt;&gt; Nice, thanks.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; - Janosch<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  2, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 19:49, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Feb 02 2016, Janosch Hildebrand &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On 02 Feb 2016, at 02:41, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon Feb 01 2016, Janosch Hildebrand<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m generally in favor of the proposed changes. I&#39;ll just note some<br>&gt;&gt;&gt;&gt; minor points and disagreements:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Like I mentioned in my SE-0023 review, I would be OK with keeping<br>&gt;&gt;&gt;&gt; the &quot;Type&quot; suffix for protocols but have no strong preference.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * I&#39;m in favor of keeping `precondition()`. `require()` might be<br>&gt;&gt;&gt;&gt; easier to grasp at first but personally I really came to like<br>&gt;&gt;&gt;&gt; `precondition()`.<br>&gt;&gt;&gt;&gt; It fells both precise and I prefer the passive `precondition()` to the<br>&gt;&gt;&gt;&gt; active `require()` for this case. To me it fits the primary meaning<br>&gt;&gt;&gt;&gt; better; stating an API contract. The fact that the condition is<br>&gt;&gt;&gt;&gt; actively checked is secondary to that.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * I also agree with Radosław in that I prefer `removeAll(keepCapacity:<br>&gt;&gt;&gt;&gt; Bool)` to `removeAll(keepingCapacity: Bool)`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I had a hard time justifying &quot;keeping&quot; to myself for a while, but<br>&gt;&gt;&gt; eventually I realized that this pattern is less ambiguous, at least in<br>&gt;&gt;&gt; general, since many verbs are also nouns.  Okay, &quot;keeps&quot; haven&#39;t been<br>&gt;&gt;&gt; considered high-tech construction elements since the middle ages, but<br>&gt;&gt;&gt; it&#39;s easy to understand how you&#39;d be interested in the capacity of a<br>&gt;&gt;&gt; keep.<br>&gt;&gt; <br>&gt;&gt; :-)<br>&gt;&gt; You are right, it&#39;s definitely less ambiguous in general. I&#39;m just not sure<br>&gt;&gt; how often that ambiguity actually arises in practice and if it&#39;s often enough to<br>&gt;&gt; justify always using the clearer but less beautiful style, even if it often actually<br>&gt;&gt; might not be necessary...<br>&gt; <br>&gt; I am not convinced there&#39;s an objective aesthetic winner here.  <br>&gt; It&#39;s consistent with our aims to have method names that cause their<br>&gt; invocations to very clearly describe semantics.  To me, that is the mark<br>&gt; of a beautiful API.<br>&gt; <br>&gt; When I didn&#39;t think it was clearer, I argued that in the absence of<br>&gt; other criteria, the shorter name (“keepCapacity”) should win, but<br>&gt; overall, the use of the past particple for these kinds of parameters<br>&gt; emphasizes that they modify an aspect of the behavior of the method,<br>&gt; which has the primary verb; they are not independent commands.  So I<br>&gt; think the three extra characters pay for themselves.  It has the added<br>&gt; benefit of satisfying those for whom being able to speak the method name<br>&gt; fluently is an important factor.<br></p><p>You make a strong case but I think this is just one of those cases where I&#39;m<br>reluctant to commit to anything before getting a feel for the code which simply<br>takes time :-) So I think I&#39;ll just defer to your better judgment for now.<br></p><p>This (meaning the guidelines, not just this point) is probably an area that might<br>get some more feedback anyway once people have actually used them for a while<br>so I&#39;ll come back to this then if it still irks me.<br></p><p><br>Anyway, thanks a lot for taking the time!<br></p><p>&gt;&gt; At least in these cases here i find the imperative to be perfectly<br>&gt;&gt; clear, especially given the surrounding context but you might have a<br>&gt;&gt; better idea what the average case might look like...<br>&gt;&gt; <br>&gt;&gt; Also there is of course something to be said for consistency and I&#39;m probably<br>&gt;&gt; going to get used to this with time; I&#39;m just not quite there yet ;-)<br>&gt;&gt; <br>&gt;&gt; It&#39;s also a bit more sentence-like: <br>&gt;&gt; * &quot;remove all; how?, ... by keeping capacity)&quot;<br>&gt;&gt; vs<br>&gt;&gt; * &quot;remove all! keep (the) capacity!&quot;<br>&gt;&gt; but then again the new guidelines and ongoing discussion on SE-0005<br>&gt;&gt; generally move away from that anyway so that doesn&#39;t seem to be a big factor.<br>&gt;&gt; <br>&gt;&gt; &lt;/ramble&gt;<br>&gt;&gt; <br>&gt;&gt; Speaking of this change, shouldn&#39;t  `split(_, maxSplits:, omitEmptySubsequences:)`<br>&gt;&gt; become `split(_, maxSplits:, omittingEmptySubsequences:)` as well or am I<br>&gt;&gt; missing something?<br>&gt; <br>&gt; You make a good point.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; * What is the rationale for moving `unsafeUnwrap` into Optional but<br>&gt;&gt;&gt;&gt; not `unsafeAddressOf` into AnyObject? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Language limitation: AnyObject can&#39;t be modified or extended.<br>&gt;&gt; <br>&gt;&gt; Thanks! (To Brent as well). That makes sense of course.<br>&gt;&gt; <br>&gt;&gt; Still not sure how I feel about making these functions so accessible<br>&gt;&gt; but I guess that issue should be solved differently if at all.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I can certainly see the safety argument against moving it but I don&#39;t<br>&gt;&gt;&gt;&gt; see how that would apply to `unsafeAddressOf` but not `unsafeUnwrap`?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * `EnumeratedSequence` and `Repeated` feel weird to me. They make<br>&gt;&gt;&gt;&gt; sense given the API guidelines and the previous `EnumerateSequence`<br>&gt;&gt;&gt;&gt; and `Repeat` were a bit clunky as well but these somehow feel a bit<br>&gt;&gt;&gt;&gt; worse... That might be wholly subjective though and I don&#39;t really<br>&gt;&gt;&gt;&gt; have a good suggestion. The only thing that came to mind was<br>&gt;&gt;&gt;&gt; `EnumerationSequence` and `Repetition` but I&#39;m not overly fond of<br>&gt;&gt;&gt;&gt; those either especially not to the point of deviating from the norm...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, they&#39;re a little clunky.  No, I don&#39;t have any better ideas either<br>&gt;&gt;&gt; :-)<br>&gt;&gt; <br>&gt;&gt; Well, at least I&#39;m not alone then :D<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; * This is not a disagreement but I&#39;d be interested in hearing the<br>&gt;&gt;&gt;&gt; reasons for replacing Generator(Type) with Iterator(Protocol) if<br>&gt;&gt;&gt;&gt; someone finds the time. I can speculate of course but it&#39;s probably<br>&gt;&gt;&gt;&gt; easier for someone to give me a short summary :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think these messages give all the details:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com<br>&gt;&gt;&gt; &lt;http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com &lt;http://news.gmane.org/find-root.php?message_id=m2h9i4gffx.fsf%40eno.apple.com&gt;&gt;<br>&gt;&gt;&gt; http://article.gmane.org/gmane.comp.lang.swift.evolution/5344 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5344&gt;<br>&gt;&gt;&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5344&gt;<br>&gt;&gt; <br>&gt;&gt; Sorry, maybe I&#39;m missing something or my question was unclear, but<br>&gt;&gt; isn&#39;t that more the rationale for dropping the &quot;Type&quot; suffix?<br>&gt;&gt; <br>&gt;&gt; I&#39;m asking more about the switch from `Generator` to `Iterator` and<br>&gt;&gt; by that argument wouldn&#39;t `GeneratorProtocol` work just as well?<br>&gt;&gt; <br>&gt;&gt; My assumption was that the switch was probably motivated by<br>&gt;&gt; a) Iterator is the more well known concept<br>&gt;&gt; b) Generator is more of a term of art and IIUC Swift&#39;s Generators<br>&gt;&gt; aren&#39;t Generators in the strictest sense<br>&gt;&gt; <br>&gt;&gt; but I could be wrong in a lot of ways, hence why I&#39;m asking :-)<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; * Typo: <br>&gt;&gt;&gt;&gt;&gt; +  public func take() -&gt; Memory // Should be Pointee<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nice, thanks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; - Janosch<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/31a62245/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 12:00:00pm</p></header><div class="content"><p>on Tue Feb 02 2016, Janosch Hildebrand &lt;jnosh-AT-jnosh.com&gt; wrote:<br></p><p>&gt; Anyway, thanks a lot for taking the time!<br></p><p>My pleasure, truly.<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
