<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c23c6b2cd77c18eb48ec6d78a49ddf40?s=50"></div><header><strong>Proposal: Bitmask-style syntax for Method Chaining</strong> from <string>Chuquimia, Max</string> &lt;max at chuquimianproductions.com&gt;<p>December 16, 2015 at 08:00:00am</p></header><div class="content"><p>Greetings, fellow Swiftlets!<br></p><p>I am very interested to hear what you guys think about method chaining in a<br>similar style to Swift’s bitmask handling.<br>Yes, there’s a healthy discussion on “Setup Closures”, but let’s<br>dispatch_async to start a new (albeit parallel) thread regarding a neat way<br>to access properties.<br>No doubt you’ve found yourself writing something similar to the following:<br></p><p>someViewController.view.layer.shadowColor = UIColor.grayColor().CGColor<br>someViewController.view.layer.shadowRadius = 5.0<br>someViewController.view.layer.shadowOffset = CGSizeMake(0.0, 0.5)<br>someViewController.view.layer.shadowOpacity = 0.75<br></p><p>It can be disturbing to see someViewController.view.layer repeated so many<br>times, however we are currently unable to refactor these lines without<br>subclassing and possibly affecting other areas of implementation.<br></p><p>What I propose is a natural way of assigning properties on layer with a<br>syntax we are all already used to:<br></p><p>someViewController.view.layer = [<br>    .shadowColor = UIColor.grayColor().CGColor,<br>    .shadowRadius = 5.0,<br>    .shadowOffset = CGSizeMake(0.0, 0.5),<br>    .shadowOpacity = 0.75<br>]<br></p><p>Which is of course similar to our belovèd<br>someViewController.view.autoresizingMask<br>= [.FlexibleWidth, .FlexibleHeight]<br></p><p>Of course, this is an extreme example of keypath length, however I believe<br>this language feature would still be beneficial for shorter keypaths (think<br>accessing self within closures or the recent proposal to reinstate self.)<br></p><p>Using [] instead of {} eliminates the risk of ambiguity if a method<br>such as func<br>layer(c: Void -&gt; Void) has been defined in the view’s class. Apart from<br>that, I can’t think of any possible conflicts, and as it’s an addition<br>there will be no migration required when moving to a new language version<br></p><p>Interested in your thoughts,<br></p><p>MaxC<br>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/b92c1f4b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0eaab3d5d1d4428f74a711f724f2eb47?s=50"></div><header><strong>Proposal: Bitmask-style syntax for Method Chaining</strong> from <string>Etan Kissling</string> &lt;kissling at oberon.ch&gt;<p>December 16, 2015 at 10:00:00am</p></header><div class="content"><p>What about this?<br></p><p>let l = someViewController.view.layer<br>l.shadowColor = UIColor.grayColor().CGColor<br>l.shadowRadius = 5.0<br>l.shadowOffset = CGSizeMake(0.0, 0.5)<br>l.shadowOpacity = 0.75<br></p><p><br>&gt; On 15 Dec 2015, at 22:48, Chuquimia, Max via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Greetings, fellow Swiftlets!<br>&gt; <br>&gt; I am very interested to hear what you guys think about method chaining in a similar style to Swift’s bitmask handling.<br>&gt; Yes, there’s a healthy discussion on “Setup Closures”, but let’s dispatch_async to start a new (albeit parallel) thread regarding a neat way to access properties.<br>&gt; No doubt you’ve found yourself writing something similar to the following:<br>&gt; <br>&gt; someViewController.view.layer.shadowColor = UIColor.grayColor().CGColor<br>&gt; someViewController.view.layer.shadowRadius = 5.0<br>&gt; someViewController.view.layer.shadowOffset = CGSizeMake(0.0, 0.5)<br>&gt; someViewController.view.layer.shadowOpacity = 0.75<br>&gt; It can be disturbing to see someViewController.view.layer repeated so many times, however we are currently unable to refactor these lines without subclassing and possibly affecting other areas of implementation.<br>&gt; <br>&gt; What I propose is a natural way of assigning properties on layer with a syntax we are all already used to:<br>&gt; <br>&gt; someViewController.view.layer = [<br>&gt;     .shadowColor = UIColor.grayColor().CGColor,<br>&gt;     .shadowRadius = 5.0,<br>&gt;     .shadowOffset = CGSizeMake(0.0, 0.5),<br>&gt;     .shadowOpacity = 0.75<br>&gt; ]<br>&gt; Which is of course similar to our belovèd someViewController.view.autoresizingMask = [.FlexibleWidth, .FlexibleHeight]<br>&gt; <br>&gt; Of course, this is an extreme example of keypath length, however I believe this language feature would still be beneficial for shorter keypaths (think accessing self within closures or the recent proposal to reinstate self.)<br>&gt; <br>&gt; Using [] instead of {} eliminates the risk of ambiguity if a method such as func layer(c: Void -&gt; Void) has been defined in the view’s class. Apart from that, I can’t think of any possible conflicts, and as it’s an addition there will be no migration required when moving to a new language version<br>&gt; <br>&gt; Interested in your thoughts,<br>&gt; <br>&gt; MaxC<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/e64e824d/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/e64e824d/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4eebe2ce86d5fff312ce7e66d9a2a652?s=50"></div><header><strong>Proposal: Bitmask-style syntax for Method Chaining</strong> from <string>Jakob Egger</string> &lt;jakob at eggerapps.at&gt;<p>December 16, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On 15 Dec 2015, at 22:48, Chuquimia, Max via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; What I propose is a natural way of assigning properties on layer with a syntax we are all already used to:<br>&gt; <br>&gt; someViewController.view.layer = [<br>&gt;     .shadowColor = UIColor.grayColor().CGColor,<br>&gt;     .shadowRadius = 5.0,<br>&gt;     .shadowOffset = CGSizeMake(0.0, 0.5),<br>&gt;     .shadowOpacity = 0.75<br>&gt; ]<br></p><p>You can already do something similar to this using blocks:<br></p><p>({<br>	$0.shadowColor = UIColor.grayColor().CGColor<br>	$0.shadowRadius = 5.0<br>	$0.shadowOffset = CGSizeMake(0.0, 0.5)<br>	$0.shadowOpacity = 0.75<br>})(someViewController.view.layer)<br></p><p>or using optional unwrapping:<br></p><p>if let layer = someViewController.view.layer as CGLayer? {<br>	layer.shadowColor = UIColor.grayColor().CGColor<br>	layer.shadowRadius = 5.0<br>	layer.shadowOffset = CGSizeMake(0.0, 0.5)<br>	layer.shadowOpacity = 0.75<br>}<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/5a8961b6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Bitmask-style syntax for Method Chaining</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 16, 2015 at 03:00:00pm</p></header><div class="content"><p>I&#39;m not sure if this is truly different from the &quot;Setup Closures&quot;<br>discussion. Wouldn&#39;t some of that proposed syntax achieve exactly the same<br>goal?<br></p><p>someViewController.view.layer.{<br>    shadowColor = UIColor.grayColor().CGColor,<br>    shadowRadius = 5.0,<br>    shadowOffset = CGSizeMake(0.0, 0.5),<br>    shadowOpacity = 0.75<br>}<br></p><p><br>Jacob Bandes-Storch<br></p><p>On Wed, Dec 16, 2015 at 3:27 AM, Jakob Egger via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On 15 Dec 2015, at 22:48, Chuquimia, Max via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; What I propose is a natural way of assigning properties on layer with a<br>&gt; syntax we are all already used to:<br>&gt;<br>&gt; someViewController.view.layer = [<br>&gt;     .shadowColor = UIColor.grayColor().CGColor,<br>&gt;     .shadowRadius = 5.0,<br>&gt;     .shadowOffset = CGSizeMake(0.0, 0.5),<br>&gt;     .shadowOpacity = 0.75<br>&gt; ]<br>&gt;<br>&gt;<br>&gt; You can already do something similar to this using blocks:<br>&gt;<br>&gt; ({<br>&gt; $0.shadowColor = UIColor.grayColor().CGColor<br>&gt; $0.shadowRadius = 5.0<br>&gt; $0.shadowOffset = CGSizeMake(0.0, 0.5)<br>&gt; $0.shadowOpacity = 0.75<br>&gt; })(someViewController.view.layer)<br>&gt;<br>&gt; or using optional unwrapping:<br>&gt;<br>&gt; if let layer = someViewController.view.layer as CGLayer? {<br>&gt; layer.shadowColor = UIColor.grayColor().CGColor<br>&gt; layer.shadowRadius = 5.0<br>&gt; layer.shadowOffset = CGSizeMake(0.0, 0.5)<br>&gt; layer.shadowOpacity = 0.75<br>&gt; }<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/b4175a69/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
