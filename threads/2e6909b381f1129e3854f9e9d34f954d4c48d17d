<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 01:00:00pm</p></header><div class="content"><p>on Tue May 03 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt; begins now and runs through May 9. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of<br>&gt; Swift. When writing your review, here are some questions you might<br>&gt; want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>For example, you can&#39;t use this to construct something like <br></p><p>  var x: Int<br>  functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br></p><p>If you need to initialize something in an outer scope with something<br>computed by a closure, it&#39;s much better to arrange something like this:<br>    <br>  var x = functionThatActsLikeIf( someTest(), then: {  1 }, else: { 2 } )<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May  6, 2016 at 04:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>I believe so.<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>no<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>I have followed the thread and read the proposal<br></p><p>On Fri, May 6, 2016 at 1:24 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Tue May 03 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt; &gt; begins now and runs through May 9. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and contribute to the direction of<br>&gt; &gt; Swift. When writing your review, here are some questions you might<br>&gt; &gt; want to answer in your review:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt; For example, you can&#39;t use this to construct something like<br>&gt;<br>&gt;   var x: Int<br>&gt;   functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt;<br>&gt; If you need to initialize something in an outer scope with something<br>&gt; computed by a closure, it&#39;s much better to arrange something like this:<br>&gt;<br>&gt;   var x = functionThatActsLikeIf( someTest(), then: {  1 }, else: { 2 } )<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/808bc6de/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>May  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Dave,<br></p><p>Sorry, Dave, sending a second time as I forgot to Reply-All.<br></p><p>I agree, this proposal doesn&#39;t allow multiple closures where only one of<br>them should be run, and it should only be run once. I personally don&#39;t<br>think lacking that functionality is worth blocking this proposal for,<br>another proposal can be built on top of this if it is desired.<br></p><p>These cases can also be handled by a more meaningful if/switch statement,<br>using @noescape(once), for example:<br>  let x: Int<br>  functionThatCallsAClosure(someTest()) { x = $0 ? 1 : 2 }<br></p><p>On Sat, May 7, 2016 at 6:24 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Tue May 03 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt; &gt; begins now and runs through May 9. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and contribute to the direction of<br>&gt; &gt; Swift. When writing your review, here are some questions you might<br>&gt; &gt; want to answer in your review:<br>&gt; &gt;<br>&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;<br>&gt; I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt; For example, you can&#39;t use this to construct something like<br>&gt;<br>&gt;   var x: Int<br>&gt;   functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt;<br>&gt; If you need to initialize something in an outer scope with something<br>&gt; computed by a closure, it&#39;s much better to arrange something like this:<br>&gt;<br>&gt;   var x = functionThatActsLikeIf( someTest(), then: {  1 }, else: { 2 } )<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/6a04f24a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Review] SE-0073: Marking closures as executing exactly once</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>May  7, 2016 at 01:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br></p><p>I agree with others that there are opportunities to generalise this<br>proposal.<br></p><p>It would be pretty magical if it could be applied to escaping closures,<br>less magical if that&#39;s just adding a runtime assertion. It would also be<br>much more flexible if it could be used for multiple exclusive `if-else`<br>closures. However, I don&#39;t think this magic or flexibility is necessary to<br>make this proposal useful.<br></p><p>This proposal does add things you wouldn&#39;t be able to do otherwise, and<br>it&#39;s made clear to the user by the explicit pairing of @noescape and once.<br></p><p>--<br></p><p>It would be okay if (once) became @once, however I think this is only<br>useful if it was allowed on escaping closures. Adding compile-time<br>assurances to this is possible, but much more complicated (requiring strict<br>checks on storage, calling, passing).<br></p><p>I&#39;m not sure if the added complexity of an escaping once is worth<br>considering until Swift concurrency (Swift 4?). I don&#39;t think the<br>guarantees would have any advantage for the compiler, and I don&#39;t think the<br>*currently* advantage to the user would be worth much more than a comment.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>no<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>I have followed the thread, read the proposal, participated in the the<br>discussion.<br></p><p><br>On Sat, May 7, 2016 at 12:17 PM, Andrew Bennett &lt;cacoyi at gmail.com&gt; wrote:<br></p><p>&gt; Hi Dave,<br>&gt;<br>&gt; Sorry, Dave, sending a second time as I forgot to Reply-All.<br>&gt;<br>&gt; I agree, this proposal doesn&#39;t allow multiple closures where only one of<br>&gt; them should be run, and it should only be run once. I personally don&#39;t<br>&gt; think lacking that functionality is worth blocking this proposal for,<br>&gt; another proposal can be built on top of this if it is desired.<br>&gt;<br>&gt; These cases can also be handled by a more meaningful if/switch statement,<br>&gt; using @noescape(once), for example:<br>&gt;   let x: Int<br>&gt;   functionThatCallsAClosure(someTest()) { x = $0 ? 1 : 2 }<br>&gt;<br>&gt; On Sat, May 7, 2016 at 6:24 AM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Tue May 03 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; Hello Swift community,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The review of &quot;SE-0073: Marking closures as executing exactly once&quot;<br>&gt;&gt; &gt; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0073-noescape-once.md<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt;&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; What goes into a review?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; &gt; through constructive criticism and contribute to the direction of<br>&gt;&gt; &gt; Swift. When writing your review, here are some questions you might<br>&gt;&gt; &gt; want to answer in your review:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       * What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; I think it&#39;s of questionable importance and doesn&#39;t generalize well.<br>&gt;&gt; For example, you can&#39;t use this to construct something like<br>&gt;&gt;<br>&gt;&gt;   var x: Int<br>&gt;&gt;   functionThatActsLikeIf( someTest(), then: { x = 1 }, else: { x = 2} )<br>&gt;&gt;<br>&gt;&gt; If you need to initialize something in an outer scope with something<br>&gt;&gt; computed by a closure, it&#39;s much better to arrange something like this:<br>&gt;&gt;<br>&gt;&gt;   var x = functionThatActsLikeIf( someTest(), then: {  1 }, else: { 2 } )<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/e8d1f681/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
