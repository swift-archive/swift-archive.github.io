<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>NSData and UnsafePointer</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>July 16, 2016 at 02:00:00pm</p></header><div class="content"><p>A mysterious bug has got me thinking about using UnsafePointer&lt;CChar&gt; with NSData (Swift 2).<br></p><p>Is this safe:<br></p><p>let data:NSData = …<br>let dataStart = UnsafePointer&lt;CChar&gt;(data:NSDAta.bytes)<br></p><p>myProcessdata1(dataStart,data.length)<br></p><p>… (no more references to data)<br></p><p>And this:<br></p><p>let data:NSData = …<br>myProcessdata2(data)<br></p><p>… (no more references to data)<br></p><p>func myProcessdata2( data:NSData )<br>{<br>let dataStart = UnsafePointer&lt;CChar&gt;(data:NSData.bytes)<br>myProcessdata1(dataStart,data.length)<br>}<br></p><p>In the latter case I would hope that data remains alive until the function myProcessdata2 returns. But does it?<br></p><p>TIA,<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>NSData and UnsafePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>July 16, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 16, 2016, at 5:28 AM, J.E. Schotsman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; A mysterious bug has got me thinking about using UnsafePointer&lt;CChar&gt; with NSData (Swift 2).<br>&gt; <br>&gt; Is this safe:<br>&gt; <br>&gt; let data:NSData = …<br>&gt; let dataStart = UnsafePointer&lt;CChar&gt;(data:NSDAta.bytes)<br>&gt; <br>&gt; myProcessdata1(dataStart,data.length)<br>&gt; <br>&gt; … (no more references to data)<br></p><p>I don’t know what the recommended idiom is or if the syntax has changed from Swift 2 to 3, but I would do something like this:<br></p><p>withExtendedLifetime(data) {<br>  let dataStart = UnsafePointer&lt;CChar&gt;(data.bytes)<br>  myProcessdata1(dataStart,data.length)<br>}<br></p><p>UnsafePointers aren’t meant to keep things alive.<br></p><p>There’s also the problem of potentially casting your UnsafePointer to something other than CChar, but that’s not really the issue at hand.<br></p><p>&gt; And this:<br>&gt; <br>&gt; let data:NSData = …<br>&gt; myProcessdata2(data)<br>&gt; <br>&gt; … (no more references to data)<br>&gt; <br>&gt; func myProcessdata2( data:NSData )<br>&gt; {<br>&gt; let dataStart = UnsafePointer&lt;CChar&gt;(data:NSData.bytes)<br>&gt; myProcessdata1(dataStart,data.length)<br>&gt; }<br>&gt; <br>&gt; In the latter case I would hope that data remains alive until the function myProcessdata2 returns. But does it?<br></p><p>I think the latter case has the same problems as the former.<br></p><p>-Andy<br></p><p>&gt; <br>&gt; TIA,<br>&gt; <br>&gt; Jan E.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>NSData and UnsafePointer</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 16, 2016 at 01:00:00pm</p></header><div class="content"><p>On Sat, Jul 16, 2016 at 1:16 PM, Andrew Trick via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Jul 16, 2016, at 5:28 AM, J.E. Schotsman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; A mysterious bug has got me thinking about using UnsafePointer&lt;CChar&gt; with NSData (Swift 2).<br>&gt;&gt;<br>&gt;&gt; Is this safe:<br>&gt;&gt;<br>&gt;&gt; let data:NSData = …<br>&gt;&gt; let dataStart = UnsafePointer&lt;CChar&gt;(data:NSDAta.bytes)<br>&gt;&gt;<br>&gt;&gt; myProcessdata1(dataStart,data.length)<br>&gt;&gt;<br>&gt;&gt; … (no more references to data)<br>&gt;<br>&gt; I don’t know what the recommended idiom is or if the syntax has changed from Swift 2 to 3, but I would do something like this:<br>&gt;<br>&gt; withExtendedLifetime(data) {<br>&gt;   let dataStart = UnsafePointer&lt;CChar&gt;(data.bytes)<br>&gt;   myProcessdata1(dataStart,data.length)<br>&gt; }<br>&gt;<br>&gt; UnsafePointers aren’t meant to keep things alive.<br></p><p>This is exactly the reason why Swift 3 changes this API to use the<br>`data.withUnsafe* {}` idiom.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>NSData and UnsafePointer</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>July 18, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 16 Jul 2016, at 22:16, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt; <br>&gt; I don’t know what the recommended idiom is or if the syntax has changed from Swift 2 to 3, but I would do something like this:<br>&gt; <br>&gt; withExtendedLifetime(data) {<br>&gt;  let dataStart = UnsafePointer&lt;CChar&gt;(data.bytes)<br>&gt;  myProcessdata1(dataStart,data.length)<br>&gt; }<br></p><p>I tried that but got a compiler crash (segmentation fault 11)<br>So I improvised my own withExtendedLifetime by extending NSData with a doNothing() method which sets a field in a global struct.<br></p><p>let dataStart = UnsafePointer&lt;CChar&gt;(data.bytes)<br> myProcessdata1(dataStart,data.length)<br>data.doNothing()<br></p><p>but this didn’t help. Apparently this is not a lifetime bug.<br></p><p>The code that crashed looked like this:<br></p><p>init() throws<br>	{<br>	let data = ...<br>	do { try withExtendedLifetime(data)<br>		{<br>		let ptr = UnsafePointer&lt;Int8&gt;(data.bytes)<br>		do { try super.init(dataPtr:ptr, dataLength: data.length) ) }<br>		}}<br>	}<br></p><p>Calling super.init in a closure is probably illegal anyway.<br></p><p>I wonder, would Whole Module Optimization notice that doNothing() does nothing (i.e. the field in the global struct is never read) and remove it?<br></p><p>Jan E.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
