<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  7, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; So this is how this feature could be achieved right now with minimal changes to the language.<br>&gt; <br>&gt; - We expose some kind of protocol that allows you to Box up types, we could call this `Box` or something else like `Unit`. (I have a working implementation in the current language with a bit of boilerplate). This protocol handles the default implementation of converting from literals and to floats etc.<br>&gt; - For each type-safe unit for a calculation - you define a protocol extending this `Box` type which defines the associated type of the value that unit holds. For example for Degree and Radian I declared a `AngleType` which set the associated type to be a double. <br>&gt; - For each unit type, you declare a struct that inherits from that protocol you defined. So I have two structs `Degree` and `Radian` which implement the `AngleType` protocol.<br>&gt; - You implement the functions for figuring out if your units are equal and all other operators they may need i.e `Degree(360) - 30`.<br></p><p>I took a different approach to this, which was to just typealias Angle to Double,  keep all Angle values as radians (since the stdlib trig functions take radians), and add some computed setters and getters to let me access an Angle in radians, degrees, or grads.<br></p><p>I would like to see Angle, along with several other basic geometric concepts, promoted to the Swift standard library. <br></p><p>-jcr<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/09961115/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 03:00:00pm</p></header><div class="content"><p>Interesting could you upload :) would be good to consolidate all the<br>approaches we have right now so we can come up with the best one:<br></p><p>So far we have:<br></p><p>- Box/Unit Type Protocol (My Solution)<br>- Math Group Protocol (Tino Heth)<br>- Computed typealias (John Randolph)<br></p><p>On Thu, Jan 7, 2016 at 2:55 PM, John Randolph via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; So this is how this feature could be achieved right now with minimal<br>&gt; changes to the language.<br>&gt;<br>&gt; - We expose some kind of protocol that allows you to Box up types, we<br>&gt; could call this `Box` or something else like `Unit`. (I have a working<br>&gt; implementation in the current language with a bit of boilerplate). This<br>&gt; protocol handles the default implementation of converting from literals and<br>&gt; to floats etc.<br>&gt; - For each type-safe unit for a calculation - you define a protocol<br>&gt; extending this `Box` type which defines the associated type of the value<br>&gt; that unit holds. For example for Degree and Radian I declared a `AngleType`<br>&gt; which set the associated type to be a double.<br>&gt; - For each unit type, you declare a struct that inherits from that<br>&gt; protocol you defined. So I have two structs `Degree` and `Radian` which<br>&gt; implement the `AngleType` protocol.<br>&gt; - You implement the functions for figuring out if your units are equal and<br>&gt; all other operators they may need i.e `Degree(360) - 30`.<br>&gt;<br>&gt;<br>&gt; I took a different approach to this, which was to just typealias Angle to<br>&gt; Double,  keep all Angle values as radians (since the stdlib trig functions<br>&gt; take radians), and add some computed setters and getters to let me access<br>&gt; an Angle in radians, degrees, or grads.<br>&gt;<br>&gt; I would like to see Angle, along with several other basic geometric<br>&gt; concepts, promoted to the Swift standard library.<br>&gt;<br>&gt; -jcr<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/de7c4fd8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 03:00:00pm</p></header><div class="content"><p>If it helps I would be happy to start a library for this, which could be<br>later added to the standard library :)<br></p><p>On Thu, Jan 7, 2016 at 3:01 PM, James Campbell &lt;james at supmenow.com&gt; wrote:<br></p><p>&gt; Interesting could you upload :) would be good to consolidate all the<br>&gt; approaches we have right now so we can come up with the best one:<br>&gt;<br>&gt; So far we have:<br>&gt;<br>&gt; - Box/Unit Type Protocol (My Solution)<br>&gt; - Math Group Protocol (Tino Heth)<br>&gt; - Computed typealias (John Randolph)<br>&gt;<br>&gt; On Thu, Jan 7, 2016 at 2:55 PM, John Randolph via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; So this is how this feature could be achieved right now with minimal<br>&gt;&gt; changes to the language.<br>&gt;&gt;<br>&gt;&gt; - We expose some kind of protocol that allows you to Box up types, we<br>&gt;&gt; could call this `Box` or something else like `Unit`. (I have a working<br>&gt;&gt; implementation in the current language with a bit of boilerplate). This<br>&gt;&gt; protocol handles the default implementation of converting from literals and<br>&gt;&gt; to floats etc.<br>&gt;&gt; - For each type-safe unit for a calculation - you define a protocol<br>&gt;&gt; extending this `Box` type which defines the associated type of the value<br>&gt;&gt; that unit holds. For example for Degree and Radian I declared a `AngleType`<br>&gt;&gt; which set the associated type to be a double.<br>&gt;&gt; - For each unit type, you declare a struct that inherits from that<br>&gt;&gt; protocol you defined. So I have two structs `Degree` and `Radian` which<br>&gt;&gt; implement the `AngleType` protocol.<br>&gt;&gt; - You implement the functions for figuring out if your units are equal<br>&gt;&gt; and all other operators they may need i.e `Degree(360) - 30`.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I took a different approach to this, which was to just typealias Angle to<br>&gt;&gt; Double,  keep all Angle values as radians (since the stdlib trig functions<br>&gt;&gt; take radians), and add some computed setters and getters to let me access<br>&gt;&gt; an Angle in radians, degrees, or grads.<br>&gt;&gt;<br>&gt;&gt; I would like to see Angle, along with several other basic geometric<br>&gt;&gt; concepts, promoted to the Swift standard library.<br>&gt;&gt;<br>&gt;&gt; -jcr<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/cf71a93b/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  7, 2016 at 07:00:00am</p></header><div class="content"><p>I would, but I kind of have it in pieces all over the floor at the moment, because I was experimenting with an alternate implementation using an enum.<br></p><p>-jcr<br></p><p>&gt; On Jan 7, 2016, at 7:02 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; If it helps I would be happy to start a library for this, which could be later added to the standard library :)<br>&gt; <br>&gt; On Thu, Jan 7, 2016 at 3:01 PM, James Campbell &lt;james at supmenow.com &lt;mailto:james at supmenow.com&gt;&gt; wrote:<br>&gt; Interesting could you upload :) would be good to consolidate all the approaches we have right now so we can come up with the best one:<br>&gt; <br>&gt; So far we have:<br>&gt; <br>&gt; - Box/Unit Type Protocol (My Solution)<br>&gt; - Math Group Protocol (Tino Heth)<br>&gt; - Computed typealias (John Randolph)<br>&gt; <br>&gt; On Thu, Jan 7, 2016 at 2:55 PM, John Randolph via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So this is how this feature could be achieved right now with minimal changes to the language.<br>&gt;&gt; <br>&gt;&gt; - We expose some kind of protocol that allows you to Box up types, we could call this `Box` or something else like `Unit`. (I have a working implementation in the current language with a bit of boilerplate). This protocol handles the default implementation of converting from literals and to floats etc.<br>&gt;&gt; - For each type-safe unit for a calculation - you define a protocol extending this `Box` type which defines the associated type of the value that unit holds. For example for Degree and Radian I declared a `AngleType` which set the associated type to be a double. <br>&gt;&gt; - For each unit type, you declare a struct that inherits from that protocol you defined. So I have two structs `Degree` and `Radian` which implement the `AngleType` protocol.<br>&gt;&gt; - You implement the functions for figuring out if your units are equal and all other operators they may need i.e `Degree(360) - 30`.<br>&gt; <br>&gt; I took a different approach to this, which was to just typealias Angle to Double,  keep all Angle values as radians (since the stdlib trig functions take radians), and add some computed setters and getters to let me access an Angle in radians, degrees, or grads.<br>&gt; <br>&gt; I would like to see Angle, along with several other basic geometric concepts, promoted to the Swift standard library. <br>&gt; <br>&gt; -jcr<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt;<br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/30300373/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 9:01 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Interesting could you upload :) would be good to consolidate all the approaches we have right now so we can come up with the best one:<br>&gt; <br>&gt; So far we have:<br>&gt; <br>&gt; - Box/Unit Type Protocol (My Solution)<br>&gt; - Math Group Protocol (Tino Heth)<br>&gt; - Computed typealias (John Randolph)<br>&gt; <br></p><p>Is the goal of looking at approaches that are possible in the existing language to identify how the language could be improved to better facilitate type safe calculations?  That seems relevant for this list.  But if you get too far into collaborating on solutions you want to use today, that might be a conversation for the swift-users list.<br></p><p><br>&gt; On Thu, Jan 7, 2016 at 2:55 PM, John Randolph via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So this is how this feature could be achieved right now with minimal changes to the language.<br>&gt;&gt; <br>&gt;&gt; - We expose some kind of protocol that allows you to Box up types, we could call this `Box` or something else like `Unit`. (I have a working implementation in the current language with a bit of boilerplate). This protocol handles the default implementation of converting from literals and to floats etc.<br>&gt;&gt; - For each type-safe unit for a calculation - you define a protocol extending this `Box` type which defines the associated type of the value that unit holds. For example for Degree and Radian I declared a `AngleType` which set the associated type to be a double. <br>&gt;&gt; - For each unit type, you declare a struct that inherits from that protocol you defined. So I have two structs `Degree` and `Radian` which implement the `AngleType` protocol.<br>&gt;&gt; - You implement the functions for figuring out if your units are equal and all other operators they may need i.e `Degree(360) - 30`.<br>&gt; <br>&gt; I took a different approach to this, which was to just typealias Angle to Double,  keep all Angle values as radians (since the stdlib trig functions take radians), and add some computed setters and getters to let me access an Angle in radians, degrees, or grads.<br>&gt; <br>&gt; I would like to see Angle, along with several other basic geometric concepts, promoted to the Swift standard library. <br>&gt; <br>&gt; -jcr<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/d8f359a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 03:00:00pm</p></header><div class="content"><p>Yes that is the main purpose. At least 2 of the solutions define protocols<br>which at the very least may be useful to have in the standard library.<br></p><p>On Thu, Jan 7, 2016 at 3:29 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jan 7, 2016, at 9:01 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Interesting could you upload :) would be good to consolidate all the<br>&gt; approaches we have right now so we can come up with the best one:<br>&gt;<br>&gt; So far we have:<br>&gt;<br>&gt; - Box/Unit Type Protocol (My Solution)<br>&gt; - Math Group Protocol (Tino Heth)<br>&gt; - Computed typealias (John Randolph)<br>&gt;<br>&gt;<br>&gt; Is the goal of looking at approaches that are possible in the existing<br>&gt; language to identify how the language could be improved to better<br>&gt; facilitate type safe calculations?  That seems relevant for this list.  But<br>&gt; if you get too far into collaborating on solutions you want to use today,<br>&gt; that might be a conversation for the swift-users list.<br>&gt;<br>&gt;<br>&gt; On Thu, Jan 7, 2016 at 2:55 PM, John Randolph via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 7, 2016, at 4:06 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; So this is how this feature could be achieved right now with minimal<br>&gt;&gt; changes to the language.<br>&gt;&gt;<br>&gt;&gt; - We expose some kind of protocol that allows you to Box up types, we<br>&gt;&gt; could call this `Box` or something else like `Unit`. (I have a working<br>&gt;&gt; implementation in the current language with a bit of boilerplate). This<br>&gt;&gt; protocol handles the default implementation of converting from literals and<br>&gt;&gt; to floats etc.<br>&gt;&gt; - For each type-safe unit for a calculation - you define a protocol<br>&gt;&gt; extending this `Box` type which defines the associated type of the value<br>&gt;&gt; that unit holds. For example for Degree and Radian I declared a `AngleType`<br>&gt;&gt; which set the associated type to be a double.<br>&gt;&gt; - For each unit type, you declare a struct that inherits from that<br>&gt;&gt; protocol you defined. So I have two structs `Degree` and `Radian` which<br>&gt;&gt; implement the `AngleType` protocol.<br>&gt;&gt; - You implement the functions for figuring out if your units are equal<br>&gt;&gt; and all other operators they may need i.e `Degree(360) - 30`.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I took a different approach to this, which was to just typealias Angle to<br>&gt;&gt; Double,  keep all Angle values as radians (since the stdlib trig functions<br>&gt;&gt; take radians), and add some computed setters and getters to let me access<br>&gt;&gt; an Angle in radians, degrees, or grads.<br>&gt;&gt;<br>&gt;&gt; I would like to see Angle, along with several other basic geometric<br>&gt;&gt; concepts, promoted to the Swift standard library.<br>&gt;&gt;<br>&gt;&gt; -jcr<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/8437fafd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/069f7ef2d8a91cd35caa5bfc99a35773?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>Mark Glossop</string> &lt;lists at cueballcentral.com&gt;<p>January  8, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On 7 Jan 2016, at 23:51, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes that is the main purpose. At least 2 of the solutions define protocols which at the very least may be useful to have in the standard library.<br>&gt; <br>&gt; On Thu, Jan 7, 2016 at 3:29 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 9:01 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Interesting could you upload :) would be good to consolidate all the approaches we have right now so we can come up with the best one:<br>&gt;&gt; <br>&gt;&gt; So far we have:<br>&gt;&gt; <br>&gt;&gt; - Box/Unit Type Protocol (My Solution)<br>&gt;&gt; - Math Group Protocol (Tino Heth)<br>&gt;&gt; - Computed typealias (John Randolph)<br>&gt;&gt; <br>&gt; <br>&gt; Is the goal of looking at approaches that are possible in the existing language to identify how the language could be improved to better facilitate type safe calculations?  That seems relevant for this list.  But if you get too far into collaborating on solutions you want to use today, that might be a conversation for the swift-users list.<br></p><p>[snip] <br></p><p>Hi all,<br></p><p>I too have been mulling these ideas over for some time (well before this thread or list started!), but busy yak shaving stuff right now :-/ (hence the list-lurking behaviour...)<br></p><p>In the meantime, I&#39;d suggest looking at the way Mathematica approaches this issue - it&#39;s supported units, quantities, multiple standard systems and conversions, and a lot more - and has done so for 20+ years now.<br></p><p>When I free up some time, I plan to see what I can do with Swift lib on this front, but I&#39;d suggest taking a look at Wolfram&#39;s &quot;prior work&quot; if this area is of interest to you: https://reference.wolfram.com/language/ref/Quantity.html<br></p><p>There&#39;s also this by Martin Fowler on &quot;quantity&quot; types: http://martinfowler.com/eaaDev/quantity.html<br></p><p>Sidebar on decimal numerics since they&#39;re relevant to support for currency units - would be nice to know if the &quot;new&quot; IEEE 754 (2008) Decimal floating-point types are in the Swift roadmap?<br>My suspicion is that any support for them will only come from upstream in LLVM as a first-class type [quad precision/binary128 is supported as the fp128 type; but no decimal floating-point types at present] - so looks like any fixed-point decimal support in the interim would need to be provided by hacking int types, but if anyone wants to chime in... :-)<br></p><p>Cheers,<br>M.<br>-- <br>Mark Glossop<br>E: lists &lt;mailto:lists at cueballcentral.com&gt;@cueballcentral.com &lt;mailto:tech at cueballcentral.com&gt;<br>TW: http://twitter.com/Cueball_AU &lt;http://twitter.com/Cueball_AU&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160108/50fe2e6b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Support for newtype feature/typesafe calculations</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>January  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 12:40 PM, Mark Glossop via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sidebar on decimal numerics since they&#39;re relevant to support for currency units - would be nice to know if the &quot;new&quot; IEEE 754 (2008) Decimal floating-point types are in the Swift roadmap?<br>&gt; My suspicion is that any support for them will only come from upstream in LLVM as a first-class type [quad precision/binary128 is supported as the fp128 type; but no decimal floating-point types at present] - so looks like any fixed-point decimal support in the interim would need to be provided by hacking int types, but if anyone wants to chime in... :-)<br></p><p>Decimal FP is somewhere in the hazy far-future hypothetical roadmap.  It’s actually far more useful than (software) Binary128; implemented in software the performance delta between the two is fairly narrow on modern CPU architectures (except possibly for division), and having a decimal FP type available would be quite nice.<br></p><p>There’s a lot of lower-hanging fruit to chip away on first, however.<br>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/1396de6d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
