<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Pitch: Replace UnsafeMutablePointer by UnsafePointer in non-mutating APIs</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Tue Jul 19 2016, Arnold Schwaighofer &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; # Replace `UnsafeMutablePointer` by `UnsafePointer` in non-mutating APIs<br>&gt;<br>&gt; * Proposal: [SE-0000](0000-change_unsafe_mutable_pointer_to_unsafe_pointer.md)<br>&gt; * Author: [Arnold Schwaighofer](https://github.com/aschwaighofer)<br>&gt; * Status: **Pitch**<br>&gt; * Review manager: TBD<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; `UnsafeMutablePointer` didn&#39;t always have an immutable variant, and when it was<br>&gt; introduced there could have been many places that should have been changed to<br>&gt; use it, but were not. `UnsafeMutablePointer` is still pervasive. We should<br>&gt; survey the uses and make sure they&#39;re all using mutability only as appropriate.<br>&gt;<br>&gt; The only such occurrence I found was the `dprintf` API which should have a<br>&gt; read-only format argument.<br></p><p>In that case you don&#39;t really need to go through evolution for this.<br>dprintf is effectively an API imported from POSIX in an overlay.  We<br>should just fix it.<br></p><p>&gt;<br>&gt;<br>&gt; - Swift bug: [SR-1958] (https://bugs.swift.org/browse/SR-1958)<br>&gt; - Branch with changes to stdlib:<br>&gt; [unsafe_mutable_pointer_to_unsafe_pointer]<br>&gt; (https://github.com/aschwaighofer/swift/tree/unsafe_mutable_pointer_to_unsafe_pointer)<br>&gt;<br>&gt; ## Motivation<br>&gt;<br>&gt; We should change uses of `UnsafeMutablePointer` with `UnsafePointer` to clearly<br>&gt; express the intent of the API where appropriate.<br>&gt;<br>&gt; ## Proposed solution<br>&gt;<br>&gt; The proposed solution is to change `dprintf` API to take a `UnsafePointer`<br>&gt; argument.<br>&gt;<br>&gt; ## Detailed design<br>&gt;<br>&gt; Change:<br>&gt; ```swift<br>&gt; public func dprintf(_ fd: Int, _ format: UnsafeMutablePointer&lt;Int8&gt;, _ args: CVarArg...) -&gt; Int32<br>&gt; ```<br>&gt;<br>&gt; To<br>&gt; ```swift<br>&gt; public func dprintf(_ fd: Int, _ format: UnsafePointer&lt;Int8&gt;, _ args: CVarArg...) -&gt; Int32<br>&gt; ```<br>&gt; ## Impact on existing code<br>&gt;<br>&gt; Existing coersions to `UnsafePointer` from `UnsafeMutablePointer` will allow<br>&gt; existing code to work.<br>&gt;<br>&gt; ## Alternatives considered<br>&gt;<br>&gt; Leave as is.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
