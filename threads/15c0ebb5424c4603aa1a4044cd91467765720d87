<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Member wise initializer doesn&#39;t work with default-initialized const properties</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>May 16, 2016 at 05:00:00pm</p></header><div class="content"><p>Using the default Swift with Xcode 7.3.1.<br></p><p>It appears that you cannot use the implicit memberwise initializer with a struct that has “let” properties with default values.<br></p><p>This works perfectly:<br></p><p>    struct CF {<br>        let prop: Int<br>    }<br>    let cf = CF(prop: 1)<br></p><p>But give the property a default value:<br></p><p>    struct CF {<br>        let prop: Int = 0<br>    }<br>    let cf = CF(prop: 1)<br></p><p>And now the compiler complains:<br></p><p>    error: argument passed to call that takes no arguments<br>    let cf = CF(prop: 1)<br>               ~~~~~~~^~<br></p><p>I don’t believe that the Apple _The Swift Programming Language_ mentions this restriction.<br></p><p>	Neil Faiman<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Member wise initializer doesn&#39;t work with default-initialized const properties</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 17, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 16 May 2016, at 22:37, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Using the default Swift with Xcode 7.3.1.<br>&gt; <br>&gt; It appears that you cannot use the implicit memberwise initializer with a struct that has “let” properties with default values.<br>&gt; <br>&gt; <br></p><p>It’s not a default value, it is *the* value<br></p><p>&gt; <br>&gt; I don’t believe that the Apple _The Swift Programming Language_ mentions this restriction.<br></p><p>Chapter “The Basics”, section “Constants and Variables”<br></p><p>“The value of a constant cannot be changed once it is set”.<br></p><p><br></p><p><br>&gt; <br>&gt; 	Neil Faiman<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d129f38d7e0ea7855684d2de0bc0ddb?s=50"></div><header><strong>Member wise initializer doesn&#39;t work with default-initialized const properties</strong> from <string>Neil Faiman</string> &lt;neil at faiman.org&gt;<p>May 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 7:03 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 16 May 2016, at 22:37, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Using the default Swift with Xcode 7.3.1.<br>&gt;&gt; <br>&gt;&gt; It appears that you cannot use the implicit memberwise initializer with a struct that has “let” properties with default values.<br>&gt; <br>&gt; It’s not a default value, it is *the* value<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I don’t believe that the Apple _The Swift Programming Language_ mentions this restriction.<br>&gt; <br>&gt; Chapter “The Basics”, section “Constants and Variables”<br>&gt; <br>&gt; “The value of a constant cannot be changed once it is set”.<br></p><p>But:<br></p><p>“You can provide a default value for a stored property as part of its definition, as described in Default Property Values. You can also set and modify the initial value for a stored property during initialization. This is true even for constant stored properties, as described in Assigning Constant Properties During Initialization.” (Classes and Structures / Stored Properties)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160517/160d04a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Member wise initializer doesn&#39;t work with default-initialized const properties</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 7:48 AM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; “You can provide a default value for a stored property as part of its definition, as described in Default Property Values. You can also set and modify the initial value for a stored property during initialization. This is true even for constant stored properties, as described in Assigning Constant Properties During Initialization.” (Classes and Structures / Stored Properties)<br></p><p>You can assign the value of an as-yet-unassigned ‘let’ property, once. If that happens in the default initialization phase (before any initializer methods run), then you’ve used up that chance. The initializer would be setting a second value, which isn’t allowed.<br></p><p>Read up on the phases of initialization in the Swift book.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160518/a2beb260/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
