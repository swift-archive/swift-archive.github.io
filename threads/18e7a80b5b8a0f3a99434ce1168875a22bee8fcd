<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Proposal: conversion protocol naming conventions</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  3, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Mar 03 2016, Howard Lovatt &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I would prefer the name `Xxxable` to imply a method `xxx`. For example<br>&gt; `CustomStringConvertable` becomes `Describable`, because its method is<br>&gt; `description`. Similarly `IntergerLiteralConvertable` becomes<br>&gt; `IntegerLiteralInitializable` because it has an `init` with a<br>&gt; `integerLiteral` label. IE I am suggesting a one-to-one correspondence<br>&gt; between the main &#39;method&#39; name and the protocol name with &#39;able&#39;<br>&gt; added.<br></p><p>I don&#39;t know about this; I don&#39;t think I want to be forced to rename<br>Comparable or Equatable.<br></p><p>&gt;<br>&gt;<br>&gt; On Thursday, 3 March 2016, Bradley Hilton via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Just going to put in my two cents: I think `Initializable` makes more<br>&gt;&gt; sense than `Createable` or `Instantiable` assuming that we want to<br>&gt;&gt; encourage protocols with initializers rather than static methods which<br>&gt;&gt; aren’t as pretty. ;) I believe `Serializable` or `Representable` would be<br>&gt;&gt; great for converting types to a given value. I’m also of the mind that<br>&gt;&gt; `Convertible` should represent the combination of `Initializable` and<br>&gt;&gt; `Serializable` protocols and may in many cases simply exist as a<br>&gt;&gt; convenience protocol that inherits from the two.<br>&gt;&gt;<br>&gt;&gt; &gt; I have drafted a proposal to establish precise conventional meaning for<br>&gt;&gt; the use of `Convertible`, `Representable`, and `Projectable` protocol<br>&gt;&gt; suffixes. The proposal would require renaming `CustomStringConvertible` and<br>&gt;&gt; `CustomDebugStringConvertible` to `CustomStringProjectable` and<br>&gt;&gt; `CustomStringProjectable` respectively<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I am seeking input on the proposal before submitting a PR. The full<br>&gt;&gt; draft can found at<br>&gt;&gt; https://github.com/anandabits/swift-evolution/blob/conversion-protocol-conventions/proposals/0000-conversion-protocol-conventions.md<br>&gt;&gt; &lt;<br>&gt;&gt; https://github.com/anandabits/swift-evolution/blob/conversion-protocol-conventions/proposals/0000-conversion-protocol-conventions.md<br>&gt;&gt; &gt;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thanks,<br>&gt;&gt; &gt; Matthew<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Proposal: conversion protocol naming conventions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Adding onto what Dave said:<br></p><p>Although the notion of tying a protocol name to a specific method or function is superficially appealing, it<br>fails in my opinion for the following reasons:<br></p><p>* Protocols may not include any methods or function. A protocol may consist of one or more properties, subscripts, or associated types.<br>* Many protocols include multiple methods and functions. Which is the magic one that controls the naming?<br>* Protocols describe their purpose or their artifact. There may be no direct semantic connection from that purpose or artifact to a specific method or function name.<br>* The words Matthew and I propose are modifiers. The key semantics are found in the other half of the protocol name. &quot;This item can be created from &lt;some unifying concept&gt;&quot;, &quot;This item can be converted to and from &lt;some unifying concept&gt;&quot; and &quot;This item can be represented as &lt;some unifying concept&gt;&quot;.<br></p><p>Best regards,<br></p><p>-- E<br></p><p>&gt; On Mar 3, 2016, at 6:42 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu Mar 03 2016, Howard Lovatt &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I would prefer the name `Xxxable` to imply a method `xxx`. For example<br>&gt;&gt; `CustomStringConvertable` becomes `Describable`, because its method is<br>&gt;&gt; `description`. Similarly `IntergerLiteralConvertable` becomes<br>&gt;&gt; `IntegerLiteralInitializable` because it has an `init` with a<br>&gt;&gt; `integerLiteral` label. IE I am suggesting a one-to-one correspondence<br>&gt;&gt; between the main &#39;method&#39; name and the protocol name with &#39;able&#39;<br>&gt;&gt; added.<br>&gt; <br>&gt; I don&#39;t know about this; I don&#39;t think I want to be forced to rename<br>&gt; Comparable or Equatable.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Thursday, 3 March 2016, Bradley Hilton via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Just going to put in my two cents: I think `Initializable` makes more<br>&gt;&gt;&gt; sense than `Createable` or `Instantiable` assuming that we want to<br>&gt;&gt;&gt; encourage protocols with initializers rather than static methods which<br>&gt;&gt;&gt; aren’t as pretty. ;) I believe `Serializable` or `Representable` would be<br>&gt;&gt;&gt; great for converting types to a given value. I’m also of the mind that<br>&gt;&gt;&gt; `Convertible` should represent the combination of `Initializable` and<br>&gt;&gt;&gt; `Serializable` protocols and may in many cases simply exist as a<br>&gt;&gt;&gt; convenience protocol that inherits from the two.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have drafted a proposal to establish precise conventional meaning for<br>&gt;&gt;&gt; the use of `Convertible`, `Representable`, and `Projectable` protocol<br>&gt;&gt;&gt; suffixes. The proposal would require renaming `CustomStringConvertible` and<br>&gt;&gt;&gt; `CustomDebugStringConvertible` to `CustomStringProjectable` and<br>&gt;&gt;&gt; `CustomStringProjectable` respectively<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am seeking input on the proposal before submitting a PR. The full<br>&gt;&gt;&gt; draft can found at<br>&gt;&gt;&gt; https://github.com/anandabits/swift-evolution/blob/conversion-protocol-conventions/proposals/0000-conversion-protocol-conventions.md<br>&gt;&gt;&gt; &lt;<br>&gt;&gt;&gt; https://github.com/anandabits/swift-evolution/blob/conversion-protocol-conventions/proposals/0000-conversion-protocol-conventions.md<br>&gt;&gt;&gt;&gt; .<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Matthew<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
