<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 18, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Austin, I think we should discuss it here.<br></p><p>First off, dump() was really just added as a proof-of-concept by Joe<br>Groff when he implemented the original mirror system.  We decided to<br>keep it around because it seemed like it might be useful for somebody,<br>but one possibility to consider is that it should be retired.<br></p><p>For the rest, see below<br></p><p>on Mon Jan 18 2016, Austin Zheng via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br></p><p>&gt; Hi Dave,<br>&gt;<br>&gt; I don&#39;t think any progress has been made on this specific issue. Slava<br>&gt; made a comment a week ago (https://github.com/apple/swift/pull/838<br>&gt; &lt;https://github.com/apple/swift/pull/838&gt;, search &quot;This looks like a<br>&gt; QoI regression to me&quot;), but nothing since then.<br>&gt;<br>&gt; I&#39;m planning on spending today to work on resolving some of the other<br>&gt; issues that were brought up in the PR; maybe we can pick up the<br>&gt; conversation again after I update it. Let me know what you prefer.<br>&gt;<br>&gt; Best,<br>&gt; Austin <br>&gt;<br>&gt;&gt; On Jan 18, 2016, at 12:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jan 05 2016, Austin Zheng via swift-evolution<br>&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org<br>&gt;&gt; &lt;http://swift-evolution-m3fhrko0vlzytjvyw6ydsg-at-public.gmane.org/&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Here are a couple of examples I had in mind.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Arrays (from test/1_stdlib/Runtime.swift:1348), dumping an array with 5<br>&gt;&gt;&gt; elements:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BEFORE:<br>&gt;&gt;&gt; ▿ 5 elements<br>&gt;&gt;&gt; - [0]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite<br>&gt;&gt;&gt; - [1]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint<br>&gt;&gt;&gt; - [2]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker<br>&gt;&gt;&gt; ▿ [3]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks<br>&gt;&gt;&gt;    - ClarisWorks: true<br>&gt;&gt;&gt;       ▿ [4]:<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard<br>&gt;&gt;&gt;    - HyperCard: false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; AFTER:<br>&gt;&gt;&gt; ▿ [a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite,<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint,<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker,<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks(true),<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard(false)]<br>&gt;&gt;&gt; - [0]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite<br>&gt;&gt;&gt; - [1]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint<br>&gt;&gt;&gt; - [2]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker<br>&gt;&gt;&gt; ▿ [3]:<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks(true)<br>&gt;&gt;&gt;    - ClarisWorks: true<br>&gt;&gt;&gt;    ▿ [4]:<br>&gt;&gt;&gt; a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard(false)<br>&gt;&gt;&gt;    - HyperCard: false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Dictionaries (from test/1_stdlib/ReflectionHashing.swift:43):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BEFORE:<br>&gt;&gt;&gt; ▿ 5 key/value pairs<br>&gt;&gt;&gt;  ▿ [0]: (2 elements)<br>&gt;&gt;&gt;    - .0: Four<br>&gt;&gt;&gt;    - .1: 4<br>&gt;&gt;&gt;  ▿ [1]: (2 elements)<br>&gt;&gt;&gt;    ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; AFTER:<br>&gt;&gt;&gt; ▿ [&quot;Four&quot;: 4, &quot;One&quot;: 1, &quot;Two&quot;: 2, &quot;Five&quot;: 5, &quot;Three&quot;: 3]<br>&gt;&gt;&gt;  ▿ [0]: (&quot;Four&quot;, 4)<br>&gt;&gt;&gt;    - .0: &quot;Four&quot;<br>&gt;&gt;&gt;    - .1: 4<br>&gt;&gt;&gt;  ▿ [1]: (&quot;One&quot;, 1)<br>&gt;&gt;&gt;    ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Dumping a CGRect (from test/1_stdlib/Reflection_objc.swift):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; BEFORE:<br>&gt;&gt;&gt; (50.0, 60.0, 100.0, 150.0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; AFTER:<br>&gt;&gt;&gt; __C.CGRect(origin: __C.CGPoint(x: 50.0, y: 60.0), size: __C.CGSize(width:<br>&gt;&gt;&gt; 100.0, height: 150.0))<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let me know if you&#39;d like more, although most are variants on the above.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jan 5, 2016 at 5:37 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 5, 2016, at 5:28 PM, Austin Zheng via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Joe,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I respect the choice of the team to use Custom[Debug]StringConvertible in<br>&gt;&gt;&gt;&gt; lieu of summary. At the same time, in my opinion the output of dump() has<br>&gt;&gt;&gt;&gt; become significantly more difficult to read (c.f. unit tests in<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/838/files).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Specific examples of readability regressions, please?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would you and the team be open to exploring alternative solutions that<br>&gt;&gt;&gt;&gt; improve the readability of dump() without increasing API surface area?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sure.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example, perhaps the reflection machinery itself should have special<br>&gt;&gt;&gt;&gt; handling for some of the built-in types. If not, I&#39;ll consider this<br>&gt;&gt;&gt;&gt; discussion thread complete.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jan 5, 2016 at 3:22 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Getting custom summaries for the common CG types certainly seems<br>&gt;&gt;&gt;&gt;&gt; reasonable. We&#39;d have to get approval from the appropriate teams at Apple,<br>&gt;&gt;&gt;&gt;&gt; but I can&#39;t see any objections.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 30, 2015, at 9:55, Joe Groff via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use<br>&gt;&gt;&gt;&gt;&gt; Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to<br>&gt;&gt;&gt;&gt;&gt; the standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to<br>&gt;&gt;&gt;&gt;&gt; initialize a Mirror with a custom summary. If no custom summary is<br>&gt;&gt;&gt;&gt;&gt; provided, the summary would default to the string produced by calling<br>&gt;&gt;&gt;&gt;&gt; String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Some context: right now, there are two APIs for mirrors in the standard<br>&gt;&gt;&gt;&gt;&gt; library: CustomReflectable, which is publicly exposed and relies on the<br>&gt;&gt;&gt;&gt;&gt; conforming type creating a Mirror object, and _Reflectable, which relies on<br>&gt;&gt;&gt;&gt;&gt; the conforming type having a companion type conforming to _MirrorType. A<br>&gt;&gt;&gt;&gt;&gt; short-term goal is to migrate the standard library&#39;s types off the<br>&gt;&gt;&gt;&gt;&gt; _Reflectable API and have them use the CustomReflectable API, and changing<br>&gt;&gt;&gt;&gt;&gt; dump() accordingly.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The extant implementation of dump() uses a property on _MirrorType called<br>&gt;&gt;&gt;&gt;&gt; &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an<br>&gt;&gt;&gt;&gt;&gt; array.) &quot;summary&quot; is absent from Mirror or any types related to<br>&gt;&gt;&gt;&gt;&gt; CustomReflectable. I asked Joe Groff about this and the rationale was that<br>&gt;&gt;&gt;&gt;&gt; it was deemed too similar to debugDescription (or String(reflecting: foo))<br>&gt;&gt;&gt;&gt;&gt; to be worth carrying over.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Types with children, especially container types like arrays, often<br>&gt;&gt;&gt;&gt;&gt; print out a description of their children as part of their debugDescription<br>&gt;&gt;&gt;&gt;&gt; or description, redundant when using an API like dump() which provides a<br>&gt;&gt;&gt;&gt;&gt; structural representation of the children of the subject. In such cases a<br>&gt;&gt;&gt;&gt;&gt; lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>&gt;&gt;&gt;&gt;&gt; represent to the user.<br></p><p>Agreed, if we keep dump, we ought to recover that functionality somehow.<br>However, IMO we might be best off synthesizing that text for mirrors<br>with children by using their DisplayStyle and/or checking their<br>conformances.  It doesn&#39;t seem to be worth expanding the protocols for.<br></p><p>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>&gt;&gt;&gt;&gt;&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>&gt;&gt;&gt;&gt;&gt; these types customized by the corresponding Mirror would allow for a<br>&gt;&gt;&gt;&gt;&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>&gt;&gt;&gt;&gt;&gt; by the runtime without making more substantial changes to the API which<br>&gt;&gt;&gt;&gt;&gt; might break third-party code (such as conforming CGRect to any of the<br>&gt;&gt;&gt;&gt;&gt; aforementioned protocols).<br></p><p>I don&#39;t think it&#39;s worth worrying about breakage from adding a<br>CustomDebugStringConvertible conformance to CGRect.<br> <br>&gt;&gt;&gt;&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for<br>&gt;&gt;&gt;&gt;&gt; major design changes, so this would be a minor transient change to make the<br>&gt;&gt;&gt;&gt;&gt; API easier to work with in the meantime.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Please let me know whether or not you think this proposed change is<br>&gt;&gt;&gt;&gt;&gt; meaningful and worthwhile, or if you have any questions.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt; Hey, Austin,<br>&gt;&gt; <br>&gt;&gt; Is this still something we need to discuss, or did it get resolved<br>&gt;&gt; somehow?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave<br></p><p>Thanks,<br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 18, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi Dave,<br></p><p>Thanks for the insight, I think we&#39;re on the same page overall. Responses inline.<br></p><p>&gt; On Jan 18, 2016, at 9:56 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi Austin, I think we should discuss it here.<br>&gt; <br>&gt; First off, dump() was really just added as a proof-of-concept by Joe<br>&gt; Groff when he implemented the original mirror system.  We decided to<br>&gt; keep it around because it seemed like it might be useful for somebody,<br>&gt; but one possibility to consider is that it should be retired.<br>&gt; <br></p><p>Regarding &#39;dump()&#39;, if it was intended &#39;just&#39; a proof of concept I agree with you - it makes sense to consider retirement. Perhaps designing a replacement (if one should exist at all) should be considered alongside the larger overhaul of the reflection system covered in SR-88. It is used quite extensively in the test suite as a way to quickly validate the structure of instances under test, so removing it would require refactoring many of the unit tests.<br></p><p>&gt; For the rest, see below<br>&gt; <br>&gt; on Mon Jan 18 2016, Austin Zheng via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Types with children, especially container types like arrays, often<br>&gt;&gt;&gt;&gt;&gt;&gt; print out a description of their children as part of their debugDescription<br>&gt;&gt;&gt;&gt;&gt;&gt; or description, redundant when using an API like dump() which provides a<br>&gt;&gt;&gt;&gt;&gt;&gt; structural representation of the children of the subject. In such cases a<br>&gt;&gt;&gt;&gt;&gt;&gt; lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>&gt;&gt;&gt;&gt;&gt;&gt; represent to the user.<br>&gt; <br>&gt; Agreed, if we keep dump, we ought to recover that functionality somehow.<br>&gt; However, IMO we might be best off synthesizing that text for mirrors<br>&gt; with children by using their DisplayStyle and/or checking their<br>&gt; conformances.  It doesn&#39;t seem to be worth expanding the protocols for.<br></p><p>Agreed, I think we can easily do it internally for the use cases that are most important (collections, certain built-in types), etc. It&#39;s probably out-of-scope for the PR I have out right now (https://bugs.swift.org/browse/SR-88 &lt;https://bugs.swift.org/browse/SR-88&gt;), but maybe I can sketch an implementation and we can discuss further on swift-dev. (Since it&#39;s all internal changes and no public-facing API changes the entire swift-evolution process probably isn&#39;t necessary.) LMK if you think that&#39;s the best way to proceed.<br></p><p>&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>&gt;&gt;&gt;&gt;&gt;&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>&gt;&gt;&gt;&gt;&gt;&gt; these types customized by the corresponding Mirror would allow for a<br>&gt;&gt;&gt;&gt;&gt;&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>&gt;&gt;&gt;&gt;&gt;&gt; by the runtime without making more substantial changes to the API which<br>&gt;&gt;&gt;&gt;&gt;&gt; might break third-party code (such as conforming CGRect to any of the<br>&gt;&gt;&gt;&gt;&gt;&gt; aforementioned protocols).<br>&gt; <br>&gt; I don&#39;t think it&#39;s worth worrying about breakage from adding a<br>&gt; CustomDebugStringConvertible conformance to CGRect.<br></p><p>Okay, that makes sense. Since it&#39;s a public-facing API change, though, I should bring it up on the evolution list and write a proposal. I can do that tonight if that&#39;s the most sensible way forward.<br></p><p>Best,<br>Austin<br></p><p>&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for<br>&gt;&gt;&gt;&gt;&gt;&gt; major design changes, so this would be a minor transient change to make the<br>&gt;&gt;&gt;&gt;&gt;&gt; API easier to work with in the meantime.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Please let me know whether or not you think this proposed change is<br>&gt;&gt;&gt;&gt;&gt;&gt; meaningful and worthwhile, or if you have any questions.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey, Austin,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is this still something we need to discuss, or did it get resolved<br>&gt;&gt;&gt; somehow?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Dave<br>&gt; <br>&gt; Thanks,<br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160118/ac205773/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 19, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Jan 18 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br></p><p>&gt; Hi Dave,<br>&gt;<br>&gt; Thanks for the insight, I think we&#39;re on the same page overall. Responses inline.<br>&gt;<br>&gt;&gt; On Jan 18, 2016, at 9:56 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi Austin, I think we should discuss it here.<br>&gt;&gt; <br>&gt;&gt; First off, dump() was really just added as a proof-of-concept by Joe<br>&gt;&gt; Groff when he implemented the original mirror system.  We decided to<br>&gt;&gt; keep it around because it seemed like it might be useful for somebody,<br>&gt;&gt; but one possibility to consider is that it should be retired.<br>&gt;&gt; <br>&gt;<br>&gt; Regarding &#39;dump()&#39;, if it was intended &#39;just&#39; a proof of concept I<br>&gt; agree with you - it makes sense to consider retirement. Perhaps<br>&gt; designing a replacement (if one should exist at all) should be<br>&gt; considered alongside the larger overhaul of the reflection system<br>&gt; covered in SR-88. It is used quite extensively in the test suite as a<br>&gt; way to quickly validate the structure of instances under test, so<br>&gt; removing it would require refactoring many of the unit tests.<br></p><p>Hm.<br></p><p>&gt;&gt; For the rest, see below<br>&gt;&gt; <br>&gt;&gt; on Mon Jan 18 2016, Austin Zheng via swift-evolution<br>&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Types with children, especially container types like arrays, often<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; print out a description of their children as part of their debugDescription<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or description, redundant when using an API like dump() which provides a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; structural representation of the children of the subject. In such cases a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; represent to the user.<br>&gt;&gt; <br>&gt;&gt; Agreed, if we keep dump, we ought to recover that functionality somehow.<br>&gt;&gt; However, IMO we might be best off synthesizing that text for mirrors<br>&gt;&gt; with children by using their DisplayStyle and/or checking their<br>&gt;&gt; conformances.  It doesn&#39;t seem to be worth expanding the protocols for.<br>&gt;<br>&gt; Agreed, I think we can easily do it internally for the use cases that<br>&gt; are most important (collections, certain built-in types), etc. It&#39;s<br>&gt; probably out-of-scope for the PR I have out right now<br>&gt; (https://bugs.swift.org/browse/SR-88<br>&gt; &lt;https://bugs.swift.org/browse/SR-88&gt;), but maybe I can sketch an<br>&gt; implementation and we can discuss further on swift-dev. (Since it&#39;s<br>&gt; all internal changes and no public-facing API changes the entire<br>&gt; swift-evolution process probably isn&#39;t necessary.) LMK if you think<br>&gt; that&#39;s the best way to proceed.<br></p><p>It sounds like a fine plan.  You&#39;d have to land it before SR-88 to<br>keep the tests working, right?<br></p><p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; these types customized by the corresponding Mirror would allow for a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; by the runtime without making more substantial changes to the API which<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; might break third-party code (such as conforming CGRect to any of the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; aforementioned protocols).<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think it&#39;s worth worrying about breakage from adding a<br>&gt;&gt; CustomDebugStringConvertible conformance to CGRect.<br>&gt;<br>&gt; Okay, that makes sense. Since it&#39;s a public-facing API change, though,<br>&gt; I should bring it up on the evolution list and write a proposal. I can<br>&gt; do that tonight if that&#39;s the most sensible way forward.<br></p><p>Sorry, I don&#39;t mean to be dense, but what API change are you talking<br>about making?<br></p><p>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; major design changes, so this would be a minor transient change to make the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; API easier to work with in the meantime.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Please let me know whether or not you think this proposed change is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; meaningful and worthwhile, or if you have any questions.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey, Austin,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is this still something we need to discuss, or did it get resolved<br>&gt;&gt;&gt;&gt; somehow?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 19, 2016 at 10:00:00am</p></header><div class="content"><p>Hi Dave,<br></p><p>(inline)<br></p><p>On Tue, Jan 19, 2016 at 10:46 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; (snip)<br>&gt; &gt;<br>&gt; &gt; Agreed, I think we can easily do it internally for the use cases that<br>&gt; &gt; are most important (collections, certain built-in types), etc. It&#39;s<br>&gt; &gt; probably out-of-scope for the PR I have out right now<br>&gt; &gt; (https://bugs.swift.org/browse/SR-88<br>&gt; &gt; &lt;https://bugs.swift.org/browse/SR-88&gt;), but maybe I can sketch an<br>&gt; &gt; implementation and we can discuss further on swift-dev. (Since it&#39;s<br>&gt; &gt; all internal changes and no public-facing API changes the entire<br>&gt; &gt; swift-evolution process probably isn&#39;t necessary.) LMK if you think<br>&gt; &gt; that&#39;s the best way to proceed.<br>&gt;<br>&gt; It sounds like a fine plan.  You&#39;d have to land it before SR-88 to<br>&gt; keep the tests working, right?<br>&gt;<br></p><p>The PR for SR-88 actually has changes to all the tests to keep them passing<br>without doing any additional work. If I did do the work described above (to<br>prettify the common use cases), I&#39;d just remove those test changes and keep<br>the tests the way they look right now.<br></p><p>This means I can either:<br></p><p>1. Land the PR now, and then make the prettifying changes + revert the<br>tests and commit that as another PR<br>2. Add the prettifying changes as part of the current PR and delete the<br>changes I made to the tests (this will make the PR a lot smaller overall;<br>many of the changes to the test files will disappear)<br></p><p>Let me know if that makes sense.<br></p><p><br>&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; - Certain types like CGRect don&#39;t conform to<br>&gt; CustomStringConvertible,<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom<br>&gt; summary for<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; these types customized by the corresponding Mirror would allow for<br>&gt; a<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one<br>&gt; generated<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; by the runtime without making more substantial changes to the API<br>&gt; which<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; might break third-party code (such as conforming CGRect to any of<br>&gt; the<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; aforementioned protocols).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t think it&#39;s worth worrying about breakage from adding a<br>&gt; &gt;&gt; CustomDebugStringConvertible conformance to CGRect.<br>&gt; &gt;<br>&gt; &gt; Okay, that makes sense. Since it&#39;s a public-facing API change, though,<br>&gt; &gt; I should bring it up on the evolution list and write a proposal. I can<br>&gt; &gt; do that tonight if that&#39;s the most sensible way forward.<br>&gt;<br>&gt; Sorry, I don&#39;t mean to be dense, but what API change are you talking<br>&gt; about making?<br>&gt;<br>&gt;<br>No worries. The specific API change I was talking about was adding<br>CustomDebugStringConvertible conformance to CGRect (and, for completeness,<br>CGSize and CGPoint). If that doesn&#39;t count as a public-facing API change<br>I&#39;ll just add it into my PR tonight.<br></p><p>Best,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160119/4a18bdf0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 19, 2016 at 04:00:00pm</p></header><div class="content"><p>on Tue Jan 19 2016, Austin Zheng &lt;austinzheng-AT-gmail.com&gt; wrote:<br></p><p>&gt; Hi Dave,<br>&gt;<br>&gt; (inline)<br>&gt;<br>&gt; On Tue, Jan 19, 2016 at 10:46 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; (snip)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Agreed, I think we can easily do it internally for the use cases that<br>&gt;&gt; &gt; are most important (collections, certain built-in types), etc. It&#39;s<br>&gt;&gt; &gt; probably out-of-scope for the PR I have out right now<br>&gt;&gt; &gt; (https://bugs.swift.org/browse/SR-88<br>&gt;&gt; &gt; &lt;https://bugs.swift.org/browse/SR-88&gt;), but maybe I can sketch an<br>&gt;&gt; &gt; implementation and we can discuss further on swift-dev. (Since it&#39;s<br>&gt;&gt; &gt; all internal changes and no public-facing API changes the entire<br>&gt;&gt; &gt; swift-evolution process probably isn&#39;t necessary.) LMK if you think<br>&gt;&gt; &gt; that&#39;s the best way to proceed.<br>&gt;&gt;<br>&gt;&gt; It sounds like a fine plan.  You&#39;d have to land it before SR-88 to<br>&gt;&gt; keep the tests working, right?<br>&gt;&gt;<br>&gt;<br>&gt; The PR for SR-88 actually has changes to all the tests to keep them passing<br>&gt; without doing any additional work. If I did do the work described above (to<br>&gt; prettify the common use cases), I&#39;d just remove those test changes and keep<br>&gt; the tests the way they look right now.<br>&gt;<br>&gt; This means I can either:<br>&gt;<br>&gt; 1. Land the PR now, and then make the prettifying changes + revert the<br>&gt; tests and commit that as another PR<br>&gt; 2. Add the prettifying changes as part of the current PR and delete the<br>&gt; changes I made to the tests (this will make the PR a lot smaller overall;<br>&gt; many of the changes to the test files will disappear)<br>&gt;<br>&gt; Let me know if that makes sense.<br></p><p>I like #2 for minimizing VCS churn.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
