<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 05:00:00pm</p></header><div class="content"><p>If you call removeFirst and the array is empty it would be great if it was<br>optional so it could return nil or at least it threw an error so you could<br>handle that case.<br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/38efed97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>Hi James,<br></p><p>I believe this code &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already handles empty array scenario by failing if the precondition is not met.<br>Or do you have something else in mind?<br></p><p>max<br></p><p>&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/893510da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 06:00:00pm</p></header><div class="content"><p>What I mean&#39;t is it would be great is if it was a native swift error :) so<br>we could use try? syntax.<br></p><p>On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br></p><p>&gt; Hi James,<br>&gt;<br>&gt; I believe this code<br>&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already<br>&gt; handles empty array scenario by failing if the precondition is not met.<br>&gt; Or do you have something else in mind?<br>&gt;<br>&gt; max<br>&gt;<br>&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; If you call removeFirst and the array is empty it would be great if it was<br>&gt; optional so it could return nil or at least it threw an error so you could<br>&gt; handle that case.<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/e301f211/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>January  6, 2016 at 10:00:00am</p></header><div class="content"><p>Ahhh, right.<br></p><p>I believe the thinking here is that since this is an avoidable error, it should be handled in the client code with an `if !array.isEmpty { … }`), leaving errors to really exceptional and unexpected conditions.<br>Using optional here will serve the same purpose, IMHO, but instead of preventing the condition, one would have to react to the consequences later. Moreover the type will now be Optional&lt;Element&gt; and it would also be really tempting to write something like `array.removeFirst()!` and have the same trapping behavior.<br></p><p>Dave, Dmitri, please correct me if I’m wrong.<br></p><p>max<br></p><p>&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; What I mean&#39;t is it would be great is if it was a native swift error :) so we could use try? syntax.<br>&gt; <br>&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com &lt;mailto:moiseev at apple.com&gt;&gt; wrote:<br>&gt; Hi James,<br>&gt; <br>&gt; I believe this code &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already handles empty array scenario by failing if the precondition is not met.<br>&gt; Or do you have something else in mind?<br>&gt; <br>&gt; max<br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt;&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/f94dbe4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  6, 2016 at 07:00:00pm</p></header><div class="content"><p>I personally would love to have it as optional behaviour. Not sure when you<br>would ever need it to be non optional ?<br></p><p>On Wed, Jan 6, 2016 at 6:54 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br></p><p>&gt; Ahhh, right.<br>&gt;<br>&gt; I believe the thinking here is that since this is an avoidable error, it<br>&gt; should be handled in the client code with an `if !array.isEmpty { … }`),<br>&gt; leaving errors to really exceptional and unexpected conditions.<br>&gt; Using optional here will serve the same purpose, IMHO, but instead of<br>&gt; preventing the condition, one would have to react to the consequences<br>&gt; later. Moreover the type will now be Optional&lt;Element&gt; and it would also be<br>&gt; really tempting to write something like `array.removeFirst()!` and have the<br>&gt; same trapping behavior.<br>&gt;<br>&gt; Dave, Dmitri, please correct me if I’m wrong.<br>&gt;<br>&gt; max<br>&gt;<br>&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;<br>&gt; What I mean&#39;t is it would be great is if it was a native swift error :) so<br>&gt; we could use try? syntax.<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; Hi James,<br>&gt;&gt;<br>&gt;&gt; I believe this code<br>&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already<br>&gt;&gt; handles empty array scenario by failing if the precondition is not met.<br>&gt;&gt; Or do you have something else in mind?<br>&gt;&gt;<br>&gt;&gt; max<br>&gt;&gt;<br>&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; If you call removeFirst and the array is empty it would be great if it<br>&gt;&gt; was optional so it could return nil or at least it threw an error so you<br>&gt;&gt; could handle that case.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/f2955887/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>January  7, 2016 at 08:00:00am</p></header><div class="content"><p>You wouldn&#39;t ever need for it to be non optional as it simply could be unwrapped with !<br></p><p>That said, there is a decent risk that developers might often get into a habit of forcibly unwrapping the value when the are removing items from arrays where they expect it to have content and it unexpectedly doesn&#39;t.<br></p><p>I think in regards to arrays, there is a decent history of user/dev responsibility to run those checks, and if you don&#39;t, there is an out of bounds exception. The check is simply your responsibility. This is designed to promote you to maintain awareness about how many items are in the array at all times, as mismanaged arrays are a cesspool of bugs. If we go through and put an optional here, wouldn&#39;t it make sense to make the return values of subscripting also optional? I think this is an all-or-nothing thing.<br></p><p>&gt; On 7 Jan 2016, at 6:12 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I personally would love to have it as optional behaviour. Not sure when you would ever need it to be non optional ? <br>&gt; <br>&gt;&gt; On Wed, Jan 6, 2016 at 6:54 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt; Ahhh, right.<br>&gt;&gt; <br>&gt;&gt; I believe the thinking here is that since this is an avoidable error, it should be handled in the client code with an `if !array.isEmpty { … }`), leaving errors to really exceptional and unexpected conditions.<br>&gt;&gt; Using optional here will serve the same purpose, IMHO, but instead of preventing the condition, one would have to react to the consequences later. Moreover the type will now be Optional&lt;Element&gt; and it would also be really tempting to write something like `array.removeFirst()!` and have the same trapping behavior.<br>&gt;&gt; <br>&gt;&gt; Dave, Dmitri, please correct me if I’m wrong.<br>&gt;&gt; <br>&gt;&gt; max<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What I mean&#39;t is it would be great is if it was a native swift error :) so we could use try? syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi James,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe this code already handles empty array scenario by failing if the precondition is not met.<br>&gt;&gt;&gt;&gt; Or do you have something else in mind?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; max<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/acc7a2e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Jan 6, 2016 at 1:15 PM, Rod Brown via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; You wouldn&#39;t ever *need* for it to be non optional as it simply could be<br>&gt; unwrapped with !<br>&gt;<br>&gt; That said, there is a decent risk that developers might often get into a<br>&gt; habit of forcibly unwrapping the value when the are removing items from<br>&gt; arrays where they expect it to have content and it unexpectedly doesn&#39;t.<br>&gt;<br></p><p>Isn&#39;t there exactly the same risk with removeFirst() as it exists today?<br>Arguably even riskier, because there&#39;s no &quot;!&quot; to warn you that it might<br>crash?<br></p><p><br>&gt; I think in regards to arrays, there is a decent history of user/dev<br>&gt; responsibility to run those checks, and if you don&#39;t, there is an out of<br>&gt; bounds exception. The check is simply your responsibility. This is designed<br>&gt; to promote you to maintain awareness about how many items are in the array<br>&gt; at all times, as mismanaged arrays are a cesspool of bugs. If we go through<br>&gt; and put an optional here, wouldn&#39;t it make sense to make the return values<br>&gt; of subscripting also optional? I think this is an all-or-nothing thing.<br>&gt;<br>&gt; On 7 Jan 2016, at 6:12 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I personally would love to have it as optional behaviour. Not sure when<br>&gt; you would ever need it to be non optional ?<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 6:54 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; Ahhh, right.<br>&gt;&gt;<br>&gt;&gt; I believe the thinking here is that since this is an avoidable error, it<br>&gt;&gt; should be handled in the client code with an `if !array.isEmpty { … }`),<br>&gt;&gt; leaving errors to really exceptional and unexpected conditions.<br>&gt;&gt; Using optional here will serve the same purpose, IMHO, but instead of<br>&gt;&gt; preventing the condition, one would have to react to the consequences<br>&gt;&gt; later. Moreover the type will now be Optional&lt;Element&gt; and it would also be<br>&gt;&gt; really tempting to write something like `array.removeFirst()!` and have the<br>&gt;&gt; same trapping behavior.<br>&gt;&gt;<br>&gt;&gt; Dave, Dmitri, please correct me if I’m wrong.<br>&gt;&gt;<br>&gt;&gt; max<br>&gt;&gt;<br>&gt;&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; What I mean&#39;t is it would be great is if it was a native swift error :)<br>&gt;&gt; so we could use try? syntax.<br>&gt;&gt;<br>&gt;&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi James,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I believe this code<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already<br>&gt;&gt;&gt; handles empty array scenario by failing if the precondition is not met.<br>&gt;&gt;&gt; Or do you have something else in mind?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; max<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you call removeFirst and the array is empty it would be great if it<br>&gt;&gt;&gt; was optional so it could return nil or at least it threw an error so you<br>&gt;&gt;&gt; could handle that case.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/512c99ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>January  7, 2016 at 08:00:00am</p></header><div class="content"><p>You make a fair point. I would agree the risk is far higher, to be honest. At least returning an optional forces you to do something about the fact it might not have happened, even if it&#39;s only to use the ! force unwrapper.<br></p><p>Also of note, as of OS X 10.7, removeLastObject for example on NSMutableArray no longer creates a range exception, and instead simply returns nil.<br></p><p>Perhaps we need to treat these methods as conveniences, and as such subscripting still gets range exceptions, but removeFirst, removeLast etc should get optional return types and no fail if it&#39;s empty?<br></p><p>&gt; On 7 Jan 2016, at 8:20 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Wed, Jan 6, 2016 at 1:15 PM, Rod Brown via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; You wouldn&#39;t ever need for it to be non optional as it simply could be unwrapped with !<br>&gt;&gt; <br>&gt;&gt; That said, there is a decent risk that developers might often get into a habit of forcibly unwrapping the value when the are removing items from arrays where they expect it to have content and it unexpectedly doesn&#39;t.<br>&gt; <br>&gt; Isn&#39;t there exactly the same risk with removeFirst() as it exists today? Arguably even riskier, because there&#39;s no &quot;!&quot; to warn you that it might crash?<br>&gt;  <br>&gt;&gt; I think in regards to arrays, there is a decent history of user/dev responsibility to run those checks, and if you don&#39;t, there is an out of bounds exception. The check is simply your responsibility. This is designed to promote you to maintain awareness about how many items are in the array at all times, as mismanaged arrays are a cesspool of bugs. If we go through and put an optional here, wouldn&#39;t it make sense to make the return values of subscripting also optional? I think this is an all-or-nothing thing.<br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Jan 2016, at 6:12 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I personally would love to have it as optional behaviour. Not sure when you would ever need it to be non optional ? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jan 6, 2016 at 6:54 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Ahhh, right.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I believe the thinking here is that since this is an avoidable error, it should be handled in the client code with an `if !array.isEmpty { … }`), leaving errors to really exceptional and unexpected conditions.<br>&gt;&gt;&gt;&gt; Using optional here will serve the same purpose, IMHO, but instead of preventing the condition, one would have to react to the consequences later. Moreover the type will now be Optional&lt;Element&gt; and it would also be really tempting to write something like `array.removeFirst()!` and have the same trapping behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dave, Dmitri, please correct me if I’m wrong.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; max<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What I mean&#39;t is it would be great is if it was a native swift error :) so we could use try? syntax.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Hi James,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I believe this code already handles empty array scenario by failing if the precondition is not met.<br>&gt;&gt;&gt;&gt;&gt;&gt; Or do you have something else in mind?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; max<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/66f2a0b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;d be in favor of that, although I imagine it would be very challenging to<br>change the nullability of the return type without wreaking havoc on<br>thousands of lines of legacy code. Having the migrator add &quot;!&quot; wouldn&#39;t be<br>all that great.<br></p><p>I think there&#39;s also precedent in the stdlib for there to be &quot;unsafe&quot;<br>variants of these things which skip the bounds-check if you really care for<br>performance reasons: like unsafeUnwrap(), you could have an<br>unsafeRemoveFirst().<br></p><p>Jacob Bandes-Storch<br></p><p>On Wed, Jan 6, 2016 at 1:30 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt; wrote:<br></p><p>&gt; You make a fair point. I would agree the risk is far higher, to be honest.<br>&gt; At least returning an optional forces you to do something about the fact it<br>&gt; might not have happened, even if it&#39;s only to use the ! force unwrapper.<br>&gt;<br>&gt; Also of note, as of OS X 10.7, removeLastObject for example on<br>&gt; NSMutableArray no longer creates a range exception, and instead simply<br>&gt; returns nil.<br>&gt;<br>&gt; Perhaps we need to treat these methods as conveniences, and as such<br>&gt; subscripting still gets range exceptions, but removeFirst, removeLast etc<br>&gt; should get optional return types and no fail if it&#39;s empty?<br>&gt;<br>&gt; On 7 Jan 2016, at 8:20 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 1:15 PM, Rod Brown via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; You wouldn&#39;t ever *need* for it to be non optional as it simply could be<br>&gt;&gt; unwrapped with !<br>&gt;&gt;<br>&gt;&gt; That said, there is a decent risk that developers might often get into a<br>&gt;&gt; habit of forcibly unwrapping the value when the are removing items from<br>&gt;&gt; arrays where they expect it to have content and it unexpectedly doesn&#39;t.<br>&gt;&gt;<br>&gt;<br>&gt; Isn&#39;t there exactly the same risk with removeFirst() as it exists today?<br>&gt; Arguably even riskier, because there&#39;s no &quot;!&quot; to warn you that it might<br>&gt; crash?<br>&gt;<br>&gt;<br>&gt;&gt; I think in regards to arrays, there is a decent history of user/dev<br>&gt;&gt; responsibility to run those checks, and if you don&#39;t, there is an out of<br>&gt;&gt; bounds exception. The check is simply your responsibility. This is designed<br>&gt;&gt; to promote you to maintain awareness about how many items are in the array<br>&gt;&gt; at all times, as mismanaged arrays are a cesspool of bugs. If we go through<br>&gt;&gt; and put an optional here, wouldn&#39;t it make sense to make the return values<br>&gt;&gt; of subscripting also optional? I think this is an all-or-nothing thing.<br>&gt;&gt;<br>&gt;&gt; On 7 Jan 2016, at 6:12 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I personally would love to have it as optional behaviour. Not sure when<br>&gt;&gt; you would ever need it to be non optional ?<br>&gt;&gt;<br>&gt;&gt; On Wed, Jan 6, 2016 at 6:54 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Ahhh, right.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I believe the thinking here is that since this is an avoidable error, it<br>&gt;&gt;&gt; should be handled in the client code with an `if !array.isEmpty { … }`),<br>&gt;&gt;&gt; leaving errors to really exceptional and unexpected conditions.<br>&gt;&gt;&gt; Using optional here will serve the same purpose, IMHO, but instead of<br>&gt;&gt;&gt; preventing the condition, one would have to react to the consequences<br>&gt;&gt;&gt; later. Moreover the type will now be Optional&lt;Element&gt; and it would also be<br>&gt;&gt;&gt; really tempting to write something like `array.removeFirst()!` and have the<br>&gt;&gt;&gt; same trapping behavior.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dave, Dmitri, please correct me if I’m wrong.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; max<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jan 6, 2016, at 10:34 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What I mean&#39;t is it would be great is if it was a native swift error :)<br>&gt;&gt;&gt; so we could use try? syntax.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, Jan 6, 2016 at 6:32 PM, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Hi James,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I believe this code<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/RangeReplaceableCollectionType.swift#L235&gt; already<br>&gt;&gt;&gt;&gt; handles empty array scenario by failing if the precondition is not met.<br>&gt;&gt;&gt;&gt; Or do you have something else in mind?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; max<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If you call removeFirst and the array is empty it would be great if it<br>&gt;&gt;&gt;&gt; was optional so it could return nil or at least it threw an error so you<br>&gt;&gt;&gt;&gt; could handle that case.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;  Wizard<br>&gt;&gt;&gt; james at supmenow.com<br>&gt;&gt;&gt; +44 7523 279 698<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Jacob<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/aed6b826/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>January  7, 2016 at 08:00:00am</p></header><div class="content"><p>Having the migrator add a ! will result in consistent behaviour with current code.<br></p><p>The only issue here is that by adding in !, it somehow might suggest to someone reading the code &quot;hey, the writer though about this and is sure it&#39;s safe&quot; but really, they should have been checking it anyway currently, and at least someone can *see* their error...<br></p><p>- Rod<br></p><p>&gt; On 7 Jan 2016, at 8:33 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I&#39;d be in favor of that, although I imagine it would be very challenging to change the nullability of the return type without wreaking havoc on thousands of lines of legacy code. Having the migrator add &quot;!&quot; wouldn&#39;t be all that great.<br>&gt; <br>&gt; I think there&#39;s also precedent in the stdlib for there to be &quot;unsafe&quot; variants of these things which skip the bounds-check if you really care for performance reasons: like unsafeUnwrap(), you could have an unsafeRemoveFirst().<br>&gt; <br>&gt; Jacob Bandes-Storch<br>&gt; <br>&gt;&gt; On Wed, Jan 6, 2016 at 1:30 PM, Rod Brown &lt;rodney.brown6 at icloud.com&gt; wrote:<br>&gt;&gt; You make a fair point. I would agree the risk is far higher, to be honest. At least returning an optional forces you to do something about the fact it might not have happened, even if it&#39;s only to use the ! force unwrapper.<br>&gt;&gt; <br>&gt;&gt; Also of note, as of OS X 10.7, removeLastObject for example on NSMutableArray no longer creates a range exception, and instead simply returns nil.<br>&gt;&gt; <br>&gt;&gt; Perhaps we need to treat these methods as conveniences, and as such subscripting still gets range exceptions, but removeFirst, removeLast etc should get optional return types and no fail if it&#39;s empty?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/8c393d7f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi, James. I&#39;m having trouble thinking of when I want to remove something from an array unless the array is empty. The one case I can think of is when an array is being treated as a stack or queue and you&#39;re popping in a loop, but I (personally) rather write that with an explicit isEmpty check anyway. (It&#39;s not like it&#39;s any more or less efficient.)<br></p><p>Is there another scenario that I&#39;m missing where this would be useful?<br></p><p>Thanks,<br>Jordan<br></p><p>&gt; On Jan 6, 2016, at 9:36, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/e97fc276/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ed0059fca5d78f04df390ff43b354c53?s=50"></div><header><strong>[Review] Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Lyle Parkyn</string> &lt;lparkyn at prosoft.com&gt;<p>January  6, 2016 at 04:00:00pm</p></header><div class="content"><p>1. What is your evaluation of the proposal?<br>I think the proposal has merit. It seeks to clarify a possible confusing issue. <br></p><p>I’m late to this issue, however, and perhaps because I read through everything in one go, but the keyword that came to me was “conformancetype”.<br>We’re talking protocols and protocols are about conformance - including the use a particular type within the protocol.<br></p><p>Although it looks longer “conformancetype” it is only one character more than “associatedtype&quot; <br></p><p>2. Is the problem being addressed significant enough to warrant a change to Swift?<br>I agree the change is warranted.<br></p><p>3. Does this proposal fit well with the feel and direction of Swift?<br>I believe it does fit well with the feel and direction of the language.<br></p><p>4. If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>No.<br></p><p>5. How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I studied the proposal and discussions.<br></p><p>6. Please state explicitly whether you believe that the proposal should be accepted into Swift.<br></p><p>I think proposal should be accepted. <br></p><p><br>- Lyle Parkyn<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>That method exists and is called popFirst<br></p><p>However, if you have an Array I suggest using popLast instead if you have the choice :-)<br></p><p>&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/92d45353/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Oops, I forgot this existed.<br></p><p>I&#39;m assuming you&#39;re recommending popLast for performance reasons?<br>Unfortunately, for a queue, you&#39;ll need either insertAtIndex(0)/popLast or<br>append()/popLast (or a different data structure)...<br></p><p>Jacob<br></p><p>On Wed, Jan 6, 2016 at 3:41 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; That method exists and is called popFirst<br>&gt;<br>&gt; However, if you have an Array I suggest using popLast instead if you have<br>&gt; the choice :-)<br>&gt;<br>&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; If you call removeFirst and the array is empty it would be great if it was<br>&gt; optional so it could return nil or at least it threw an error so you could<br>&gt; handle that case.<br>&gt;<br>&gt; --<br>&gt;  Wizard<br>&gt; james at supmenow.com<br>&gt; +44 7523 279 698<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/27bf8330/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 3:42 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Oops, I forgot this existed.<br>&gt; <br>&gt; I&#39;m assuming you&#39;re recommending popLast for performance reasons? Unfortunately, for a<br></p><p>…double-ended…<br></p><p>&gt; queue, you&#39;ll need either insertAtIndex(0)/popLast or append()/popLast (or a different data structure)…<br></p><p>Yes, the standard library should acquire a Deque data structure at some point.<br></p><p>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Wed, Jan 6, 2016 at 3:41 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; That method exists and is called popFirst<br>&gt; <br>&gt; However, if you have an Array I suggest using popLast instead if you have the choice :-)<br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If you call removeFirst and the array is empty it would be great if it was optional so it could return nil or at least it threw an error so you could handle that case.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt;&gt; +44 7523 279 698 &lt;tel:%2B44%207523%20279%20698&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/0b9da826/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Whoops, I meant append()/popFirst. That is, even for a single-ended queue,<br>you&#39;ll use one &quot;first&quot; operation (less efficient) and one &quot;last&quot; operation.<br></p><p>On Wed, Jan 6, 2016 at 3:47 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 6, 2016, at 3:42 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Oops, I forgot this existed.<br>&gt;<br>&gt; I&#39;m assuming you&#39;re recommending popLast for performance reasons?<br>&gt; Unfortunately, for a<br>&gt;<br>&gt;<br>&gt; …double-ended…<br>&gt;<br>&gt; queue, you&#39;ll need either insertAtIndex(0)/popLast or append()/popLast (or<br>&gt; a different data structure)…<br>&gt;<br>&gt;<br>&gt; Yes, the standard library should acquire a Deque data structure at some<br>&gt; point.<br>&gt;<br></p><p>Is there a SR for this?<br></p><p><br>&gt;<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 3:41 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; That method exists and is called popFirst<br>&gt;&gt;<br>&gt;&gt; However, if you have an Array I suggest using popLast instead if you have<br>&gt;&gt; the choice :-)<br>&gt;&gt;<br>&gt;&gt; On Jan 6, 2016, at 9:36 AM, James Campbell via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; If you call removeFirst and the array is empty it would be great if it<br>&gt;&gt; was optional so it could return nil or at least it threw an error so you<br>&gt;&gt; could handle that case.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt;  Wizard<br>&gt;&gt; james at supmenow.com<br>&gt;&gt; +44 7523 279 698<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/a1b9a203/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  6, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 3:48 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Whoops, I meant append()/popFirst. That is, even for a single-ended queue, you&#39;ll use one &quot;first&quot; operation (less efficient) and one &quot;last&quot; operation.<br></p><p>No, a single-ended queue is a stack.  You can use append and popLast on Array for that.<br></p><p>&gt; <br>&gt; On Wed, Jan 6, 2016 at 3:47 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 6, 2016, at 3:42 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Oops, I forgot this existed.<br>&gt;&gt; <br>&gt;&gt; I&#39;m assuming you&#39;re recommending popLast for performance reasons? Unfortunately, for a <br>&gt; <br>&gt; …double-ended…<br>&gt; <br>&gt;&gt; queue, you&#39;ll need either insertAtIndex(0)/popLast or append()/popLast (or a different data structure)…<br>&gt; <br>&gt; Yes, the standard library should acquire a Deque data structure at some point.<br>&gt; <br>&gt; Is there a SR for this?<br></p><p>Not that I know of; have at it!<br></p><p>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/3e235e23/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>removeFirst, optional equiviliant</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 12:00:00am</p></header><div class="content"><p>Yeah I was using this for a LIFO type system :) glad to know there is a<br>method for this.<br></p><p>On Thu, Jan 7, 2016 at 12:09 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 6, 2016, at 3:48 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Whoops, I meant append()/popFirst. That is, even for a single-ended queue,<br>&gt; you&#39;ll use one &quot;first&quot; operation (less efficient) and one &quot;last&quot; operation.<br>&gt;<br>&gt;<br>&gt; No, a single-ended queue is a stack.  You can use append and popLast on<br>&gt; Array for that.<br>&gt;<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 3:47 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 6, 2016, at 3:42 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Oops, I forgot this existed.<br>&gt;&gt;<br>&gt;&gt; I&#39;m assuming you&#39;re recommending popLast for performance reasons?<br>&gt;&gt; Unfortunately, for a<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; …double-ended…<br>&gt;&gt;<br>&gt;&gt; queue, you&#39;ll need either insertAtIndex(0)/popLast or append()/popLast<br>&gt;&gt; (or a different data structure)…<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yes, the standard library should acquire a Deque data structure at some<br>&gt;&gt; point.<br>&gt;&gt;<br>&gt;<br>&gt; Is there a SR for this?<br>&gt;<br>&gt;<br>&gt; Not that I know of; have at it!<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/eae84b87/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
