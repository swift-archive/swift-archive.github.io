<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>June 23, 2016 at 06:00:00pm</p></header><div class="content"><p>I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br></p><p>for x in theArray where x % 2 == 1 { print (x) }<br>I think it’s artificially confusing because the print is on the same line. If we break the line we see the “where” at the end of the line and it reads like the English I would use to tell someone what this loop is doing:<br></p><p>for x in theArray where x % 2 == 1 {<br>... <br>To me this reads very clearly: I’m looping through some values BUT I want to skip some, now here’s what I’m going to do with these values. Using “guard” for this purpose adds unnecessary lines of code and also allows for the (common in my experience!) bug of accidentally using “break” or “return” inside the guard instead of “continue”. Also, guard / continue just doesn’t read like a filter.<br></p><p>Having the filtering/where logic (eg: what I’m _iterating_ over) separated from the body of the loop (eg: what i’m _doing_ to those objects) is one of my favorite things about Swift.<br></p><p>Yes, we could also do that with “filter” followed by “forEach”, but then it would read totally backwards and I don’t always want that. (I mean, at this point “for/in blah” could be considered syntactic sugar for &quot;blah.forEach {}” but I still want &quot;for/in&quot;.)<br></p><p><br>for x in theArray where x % 2 == 1 { print (x) }<br>while let x = anArray.popLast() where x % 2 == 1 { print(x) }<br>In this example case the “while” is only unclear to me because Swift has the odd thing where it does pattern matching using “let” as well as using let in a plain old assignment, and it’s hard to know which is which. I could argue that it’s also unclear why I can’t type “let x = anArray popLast where x % 2 == 1” by itself on a line and have x be an optional. (I would have liked it if we used “match” as a keyword instead of “let” when we’re doing patterns, but there you go.)<br></p><p>-Wil<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/26db1614/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 23, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt; <br>&gt; for x in theArray where x % 2 == 1 { print (x) }<br>I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>the construct, and an exploration of why the challenging cases would not need debugger <br>support at that point.<br></p><p>My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>complex loses the beauty and readability and hinders debugging at the same time.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/a6a9334d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 23, 2016 at 10:00:00pm</p></header><div class="content"><p>Maybe something like this?<br></p><p>let calendar = Calendar.current()<br></p><p>for date in dates where calendar.isDateInToday(date) {<br>    //process date only in today<br>}<br></p><p>VS.<br></p><p>for date in dates {<br>    guard calendar.isDateInToday(date) else { continue }<br>    <br>}<br></p><p>The where keeps the body of the for loop uncluttered so it can focus *just* on what&#39;s important: processing dates that are only in a certain day.<br></p><p>Also, let&#39;s pretend someone comes along later and decides to add some code to this loop:<br></p><p>for date in dates {<br>    /** Anything here is using an untested date **/<br>    /** Some programmer comes along later and adds unrelated <br>       * date handling code...or mistakenly adds code here **/<br></p><p>    guard calendar.isDateInToday(date) else { continue }<br>}<br></p><p>The where tells that this loop was intended to only deal with certain dates and enforces it. Guard only guards against it if code is added after it.<br></p><p>With the where clause it is:<br>- self-documenting<br>- must be changed if you want a different behavior, preventing unintended mistakes later<br></p><p>I don&#39;t want to say this is a &quot;more&quot; challenging example of filtering, but I do think it can show its expressiveness.<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 23, 2016, at 10:14 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt;&gt; <br>&gt;&gt; for x in theArray where x % 2 == 1 { print (x) }<br>&gt; I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>&gt; is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>&gt; the construct, and an exploration of why the challenging cases would not need debugger <br>&gt; support at that point.<br>&gt; <br>&gt; My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>&gt; complex loses the beauty and readability and hinders debugging at the same time.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/0c0bfcea/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>June 23, 2016 at 10:00:00pm</p></header><div class="content"><p>Here are some of my real-world examples:<br></p><p>        for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>…<br>        }<br></p><p>        for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>…<br>        }<br></p><p>        for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>…<br>        }<br></p><p>        for wall in self as Set&lt;Wall&gt; {<br>            for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>…<br>            }<br>        }<br></p><p>        for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>…<br>        } <br></p><p>(x2 on that one)<br></p><p>        for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>…<br>        }<br></p><p>        for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>…<br>        }<br></p><p>        for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>…<br>        }<br></p><p><br>I think this is basically as many as are found on all of github?<br></p><p>-W<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/20fac908/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 01:00:00am</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 12:59 AM, William Shipley via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Here are some of my real-world examples:<br>&gt;<br>&gt;         for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements<br>&gt; where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;<br></p><p>Not a practitioner of 80-character line limits, I take it?<br></p><p><br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         for anchor in wall.anchors where boundsRect.contains(anchor.origin)<br>&gt; {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         for otherWall: Wall in self where otherWall != wall &amp;&amp;<br>&gt; !removedWalls.contains(otherWall) {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         for wall in self as Set&lt;Wall&gt; {<br>&gt;             for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;             }<br>&gt;         }<br>&gt;<br>&gt;         for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt; (x2 on that one)<br>&gt;<br>&gt;         for otherPieceOfFurnitureNode in<br>&gt; localFurnitureModelUUIDsToInterfaceElements!.values where<br>&gt; otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         for lineSegmentObject in wallRelatedLineSegments where<br>&gt; remainingLineSegments.contains(lineSegmentObject) {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;         for colinearLineSegmentObject in remainingLineSegments where<br>&gt; colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle:<br>&gt; lineSegmentObject.angle) {<br>&gt;<br>&gt; …<br>&gt;<br>&gt;         }<br>&gt;<br>&gt;<br>&gt; I think this is basically as many as are found on all of github?<br>&gt;<br>&gt; -W<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/d125df8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June 24, 2016 at 07:00:00pm</p></header><div class="content"><p>I’ve never quite understood why people are so strict about keeping to this?<br></p><p>&gt; On 24 Jun 2016, at 4:04 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Not a practitioner of 80-character line limits, I take it?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/d570adab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 24, 2016 at 11:00:00am</p></header><div class="content"><p>Ditto, screens can handle more than 80 chars per line nowadays (and it&#39;s even quite a few years since I&#39;ve last seen a display with &lt;1024 horizontal resolution). It&#39;s not a good idea to write a line from one end of a screen to the other on a 27&#39;&#39; display, but 80 chars is really insane.<br></p><p>80 chars is useful to keep for readability of documentation, but not in code.<br></p><p>&gt; On Jun 24, 2016, at 11:25 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve never quite understood why people are so strict about keeping to this?<br>&gt; <br>&gt;&gt; On 24 Jun 2016, at 4:04 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/766f0603/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>June 24, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 11:25 AM, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve never quite understood why people are so strict about keeping to this?<br></p><p>especially considering how many who do have never seen a vt100 terminal<br></p><p>&gt; <br>&gt;&gt; On 24 Jun 2016, at 4:04 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/53a3f763/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>June 24, 2016 at 04:00:00am</p></header><div class="content"><p>On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Not a practitioner of 80-character line limits, I take it?<br></p><p>I don’t understand why anyone wouldn’t just let Xcode do the wrapping for most cases. I’ll add newlines if I think it adds to clarity, but in general I don’t want to code like i’m still on a Wyse WY-50.<br></p><p>-W<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/7f092330/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br></p><p>&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;<br>&gt;<br>&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for<br>&gt; most cases. I’ll add newlines if I think it adds to clarity, but in general<br>&gt; I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;<br></p><p>Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>force everyone to write lines of certain lengths. But 80-character lines is<br>a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>to such style choices.<br></p><p>If the chief advantage of `where` is that it (quoting someone above) allows<br>one to &quot;understand as much as possible about the control flow of the loop<br>from a single line of code,&quot; then we ought perhaps to question its<br>appropriateness when the majority of its benefits [by which I mean, based<br>on your examples and Sean&#39;s, more than half of the instances in which it is<br>used] cannot be realized in a very common coding style.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/da5d6e76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 24, 2016 at 06:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 11:30 AM Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for<br>&gt;&gt; most cases. I’ll add newlines if I think it adds to clarity, but in general<br>&gt;&gt; I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt;<br>&gt;<br>&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt; force everyone to write lines of certain lengths. But 80-character lines is<br>&gt; a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>&gt; that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>&gt; to such style choices.<br>&gt;<br>&gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt; allows one to &quot;understand as much as possible about the control flow of<br>&gt; the loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt; used] cannot be realized in a very common coding style.<br>&gt;<br></p><p>IMO, we shouldn&#39;t be talking about &quot;a single line of code&quot; so much as &quot;a<br>single cohesive construct&quot;. What&#39;s important to me isn&#39;t the line length or<br>whether the &quot;where&quot; part has to wrap onto another line, it&#39;s the number of<br>potentially divergent constructs I have to parse mentally in order to<br>determine the meaning of the loop.<br></p><p>With &quot;for-in-where&quot;, it&#39;s three:<br></p><p>    for item(1) in someCollection(2) where someCondition(3)<br></p><p>With the alternatives suggested using if/guard/continue/break, it&#39;s more<br>than that:<br></p><p>    for item(1) in someCollection(2) {<br>        [if | guard...else](3) someCondition(4) {<br>            [continue | break](5)<br>        }<br>    }<br></p><p>I have to be more careful now interpreting the meaning of this loop because<br>both or either of if/guard or continue/break can invert its meaning, where<br>was &quot;for-in-where&quot; is concise and clear.<br></p><p>Doing .lazy.filter{...} is slightly cleaner than this, but still suffers<br>from the disadvantage that it&#39;s very easy for newcomers to leave out the<br>&quot;lazy&quot; part and accidentally write poorly performing code, and to the<br>argument that &quot;where&quot; is considered confusing by some users, I would argue<br>that it&#39;s easier to explain how it works than why &quot;lazy&quot; is necessary in<br>this context.<br></p><p><br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/1950f984/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 1:38 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br></p><p>&gt; On Fri, Jun 24, 2016 at 11:30 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping<br>&gt;&gt;&gt; for most cases. I’ll add newlines if I think it adds to clarity, but in<br>&gt;&gt;&gt; general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt;&gt; force everyone to write lines of certain lengths. But 80-character lines is<br>&gt;&gt; a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>&gt;&gt; that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>&gt;&gt; to such style choices.<br>&gt;&gt;<br>&gt;&gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt;&gt; allows one to &quot;understand as much as possible about the control flow of<br>&gt;&gt; the loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt;&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt;&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt;&gt; used] cannot be realized in a very common coding style.<br>&gt;&gt;<br>&gt;<br>&gt; IMO, we shouldn&#39;t be talking about &quot;a single line of code&quot; so much as &quot;a<br>&gt; single cohesive construct&quot;. What&#39;s important to me isn&#39;t the line length or<br>&gt; whether the &quot;where&quot; part has to wrap onto another line, it&#39;s the number of<br>&gt; potentially divergent constructs I have to parse mentally in order to<br>&gt; determine the meaning of the loop.<br>&gt;<br>&gt; With &quot;for-in-where&quot;, it&#39;s three:<br>&gt;<br>&gt;     for item(1) in someCollection(2) where someCondition(3)<br>&gt;<br>&gt; With the alternatives suggested using if/guard/continue/break, it&#39;s more<br>&gt; than that:<br>&gt;<br>&gt;     for item(1) in someCollection(2) {<br>&gt;         [if | guard...else](3) someCondition(4) {<br>&gt;             [continue | break](5)<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; I have to be more careful now interpreting the meaning of this loop<br>&gt; because both or either of if/guard or continue/break can invert its<br>&gt; meaning, where was &quot;for-in-where&quot; is concise and clear.<br>&gt;<br></p><p>And if `while` is added along with `where`, all this goes out the window.<br></p><p><br>&gt; Doing .lazy.filter{...} is slightly cleaner than this, but still suffers<br>&gt; from the disadvantage that it&#39;s very easy for newcomers to leave out the<br>&gt; &quot;lazy&quot; part and accidentally write poorly performing code, and to the<br>&gt; argument that &quot;where&quot; is considered confusing by some users, I would argue<br>&gt; that it&#39;s easier to explain how it works than why &quot;lazy&quot; is necessary in<br>&gt; this context.<br>&gt;<br></p><p>Clearly, eagerly filtering results in slower code, but based on the<br>examples provided above I don&#39;t imagine any of them would turn into &quot;poorly<br>performing&quot; code with eager filtering. In fact, I see some that could run a<br>little faster with some refactoring along these lines. In any case,<br>optimizing performance comes after correctness; a user who can&#39;t grasp<br>`lazy` can nonetheless still write useful, correct code.<br></p><p> _______________________________________________<br></p><p>&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/86c860a5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 1:38 PM, Tony Allevato &lt;allevato at google.com&gt; wrote:<br></p><p>&gt; On Fri, Jun 24, 2016 at 11:30 AM Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping<br>&gt;&gt;&gt; for most cases. I’ll add newlines if I think it adds to clarity, but in<br>&gt;&gt;&gt; general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt;&gt; force everyone to write lines of certain lengths. But 80-character lines is<br>&gt;&gt; a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>&gt;&gt; that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>&gt;&gt; to such style choices.<br>&gt;&gt;<br>&gt;&gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt;&gt; allows one to &quot;understand as much as possible about the control flow of<br>&gt;&gt; the loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt;&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt;&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt;&gt; used] cannot be realized in a very common coding style.<br>&gt;&gt;<br>&gt;<br>&gt; IMO, we shouldn&#39;t be talking about &quot;a single line of code&quot; so much as &quot;a<br>&gt; single cohesive construct&quot;. What&#39;s important to me isn&#39;t the line length or<br>&gt; whether the &quot;where&quot; part has to wrap onto another line, it&#39;s the number of<br>&gt; potentially divergent constructs I have to parse mentally in order to<br>&gt; determine the meaning of the loop.<br>&gt;<br>&gt; With &quot;for-in-where&quot;, it&#39;s three:<br>&gt;<br>&gt;     for item(1) in someCollection(2) where someCondition(3)<br>&gt;<br>&gt; With the alternatives suggested using if/guard/continue/break, it&#39;s more<br>&gt; than that:<br>&gt;<br>&gt;     for item(1) in someCollection(2) {<br>&gt;         [if | guard...else](3) someCondition(4) {<br>&gt;             [continue | break](5)<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; I have to be more careful now interpreting the meaning of this loop<br>&gt; because both or either of if/guard or continue/break can invert its<br>&gt; meaning, where was &quot;for-in-where&quot; is concise and clear.<br>&gt;<br></p><p>I like this way of thinking a lot, actually. Number of divergent constructs<br>you have to parse. Here&#39;s the thing: I think it supports removal, not<br>retaining. Here&#39;s why:<br></p><p>For every loop you encounter, to understand its meaning you *must* look for<br>`break` and `continue` statements, and when they&#39;re inside `if` and `guard`<br>you must consider how the condition is evaluated. This is a given, a sunk<br>cost; I see no way they can be prohibited from the language, so these are<br>all things you will have to look for and mentally parse in order to<br>understand the behavior of a loop.<br></p><p>Now, if you add `where`, then that is one additional divergent construct<br>you must understand and parse. And moreover, since you know it exists, to<br>be sure you really understand what&#39;s going on you&#39;ll have to check the end<br>of every `for...in` statement to see if it&#39;s there. And in case the line<br>doesn&#39;t fit on your screen, you&#39;ll have to try scrolling to see if there&#39;s<br>more (or read on to the next line if you&#39;ve turned on line wrapping). And<br>you&#39;ll have to do this for *every* `for...in` loop, where the majority<br>don&#39;t use `where` at all!<br></p><p>So, I agree with you, what&#39;s important to me as well is number of divergent<br>constructs I have to parse. But with the removal of `where`, the number of<br>divergent constructs I have to think about while reading Swift loops will<br>decrease, not increase.<br></p><p>Doing .lazy.filter{...} is slightly cleaner than this, but still suffers<br>&gt; from the disadvantage that it&#39;s very easy for newcomers to leave out the<br>&gt; &quot;lazy&quot; part and accidentally write poorly performing code, and to the<br>&gt; argument that &quot;where&quot; is considered confusing by some users, I would argue<br>&gt; that it&#39;s easier to explain how it works than why &quot;lazy&quot; is necessary in<br>&gt; this context.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/0c887aa6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Thanks for the great way of breaking it down. The issue I see is that it is quite easy to incorrectly assume what (3) and (5) are below. Some assume it breaks, others that it just skips and continues.<br></p><p>So in my mind there’s nothing wrong with wanting something that can be written on one line together with the `for in`. The problem is this particular syntax is ambiguous.<br></p><p>Patrick<br></p><p>&gt; On 25 Jun 2016, at 4:38 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; IMO, we shouldn&#39;t be talking about &quot;a single line of code&quot; so much as &quot;a single cohesive construct&quot;. What&#39;s important to me isn&#39;t the line length or whether the &quot;where&quot; part has to wrap onto another line, it&#39;s the number of potentially divergent constructs I have to parse mentally in order to determine the meaning of the loop.<br>&gt; <br>&gt; With &quot;for-in-where&quot;, it&#39;s three:<br>&gt; <br>&gt;     for item(1) in someCollection(2) where someCondition(3)<br>&gt; <br>&gt; With the alternatives suggested using if/guard/continue/break, it&#39;s more than that:<br>&gt; <br>&gt;     for item(1) in someCollection(2) {<br>&gt;         [if | guard...else](3) someCondition(4) {<br>&gt;             [continue | break](5)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; I have to be more careful now interpreting the meaning of this loop because both or either of if/guard or continue/break can invert its meaning, where was &quot;for-in-where&quot; is concise and clear.<br>&gt; <br>&gt; Doing .lazy.filter{...} is slightly cleaner than this, but still suffers from the disadvantage that it&#39;s very easy for newcomers to leave out the &quot;lazy&quot; part and accidentally write poorly performing code, and to the argument that &quot;where&quot; is considered confusing by some users, I would argue that it&#39;s easier to explain how it works than why &quot;lazy&quot; is necessary in this context.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160625/0e13e21a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/423beb7cfb5894f7b53623d6e515b01d?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Jed Lewison</string> &lt;jed.lewison at icloud.com&gt;<p>June 26, 2016 at 12:00:00am</p></header><div class="content"><p>I think this is an excellent argument for keeping where — I was tempted to make a hand waving argument in favor of keeping where, but I think you made the case as well as it can be made. (I suppose you could even argue that there are really 7 components to the other construct since you can have continue, break, or return, but that just underscores your point.)<br></p><p>I also agree with your points about using lazy.filter instead.<br></p><p>BTW, the project I’m currently working on has about 10-15 for loops that use where.<br></p><p>Net/net: I’m a -1 on the proposal.<br></p><p>&gt; On Jun 24, 2016, at 11:38 AM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; IMO, we shouldn&#39;t be talking about &quot;a single line of code&quot; so much as &quot;a single cohesive construct&quot;. What&#39;s important to me isn&#39;t the line length or whether the &quot;where&quot; part has to wrap onto another line, it&#39;s the number of potentially divergent constructs I have to parse mentally in order to determine the meaning of the loop.<br>&gt; <br>&gt; With &quot;for-in-where&quot;, it&#39;s three:<br>&gt; <br>&gt;     for item(1) in someCollection(2) where someCondition(3)<br>&gt; <br>&gt; With the alternatives suggested using if/guard/continue/break, it&#39;s more than that:<br>&gt; <br>&gt;     for item(1) in someCollection(2) {<br>&gt;         [if | guard...else](3) someCondition(4) {<br>&gt;             [continue | break](5)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt; I have to be more careful now interpreting the meaning of this loop because both or either of if/guard or continue/break can invert its meaning, where was &quot;for-in-where&quot; is concise and clear.<br>&gt; <br>&gt; Doing .lazy.filter{...} is slightly cleaner than this, but still suffers from the disadvantage that it&#39;s very easy for newcomers to leave out the &quot;lazy&quot; part and accidentally write poorly performing code, and to the argument that &quot;where&quot; is considered confusing by some users, I would argue that it&#39;s easier to explain how it works than why &quot;lazy&quot; is necessary in this context.<br>&gt;  <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160626/b01f603c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 24, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 1:30 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt; <br>&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for most cases. I’ll add newlines if I think it adds to clarity, but in general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt; <br>&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to force everyone to write lines of certain lengths. But 80-character lines is a common style, and I would say that a corollary of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful whether or not you adhere to such style choices.<br></p><p>I honestly don’t believe that this a common style in the Cocoa community. I’m not a member of the “old guard” having only come into this world 10 years ago with the iPhone, but just take a look at this delegate method in Objective-C:<br></p><p>- (void)locationManager:(CLLocationManager *)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion *)region withError:(NSError *)error;<br></p><p>That’s well over 80 characters all by itself. This fits on my screen in a single line - and I work on a 15” MBP with room for my dock always visible on the side along with Xcode’s sidebar open! On a typical desktop-sized screen, 80-col lines must be comically short.<br></p><p>I don’t know why it should be assumed that people are adhering to a so-called standard that dates back to terminal screens that didn’t have color.<br></p><p><br>&gt; If the chief advantage of `where` is that it (quoting someone above) allows one to &quot;understand as much as possible about the control flow of the loop from a single line of code,&quot; then we ought perhaps to question its appropriateness when the majority of its benefits [by which I mean, based on your examples and Sean&#39;s, more than half of the instances in which it is used] cannot be realized in a very common coding style.<br></p><p>Again, I dispute the idea (having no data but my own :P) that 80-col limits are common in this community.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 1:56 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br></p><p>&gt; &gt; On Jun 24, 2016, at 1:30 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt; &gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt; &gt;<br>&gt; &gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping<br>&gt; for most cases. I’ll add newlines if I think it adds to clarity, but in<br>&gt; general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt; &gt;<br>&gt; &gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt; force everyone to write lines of certain lengths. But 80-character lines is<br>&gt; a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>&gt; that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>&gt; to such style choices.<br>&gt;<br>&gt; I honestly don’t believe that this a common style in the Cocoa community.<br></p><p><br>We&#39;re talking about the Swift community here, and Swift stdlib would be a<br>good starting point as to what is a common or at least accepted style; it<br>uses 80-character lines.<br></p><p><br>&gt; I’m not a member of the “old guard” having only come into this world 10<br>&gt; years ago with the iPhone, but just take a look at this delegate method in<br>&gt; Objective-C:<br>&gt;<br>&gt; - (void)locationManager:(CLLocationManager *)manager<br>&gt; rangingBeaconsDidFailForRegion:(CLBeaconRegion *)region withError:(NSError<br>&gt; *)error;<br>&gt;<br>&gt; That’s well over 80 characters all by itself. This fits on my screen in a<br>&gt; single line - and I work on a 15” MBP with room for my dock always visible<br>&gt; on the side along with Xcode’s sidebar open! On a typical desktop-sized<br>&gt; screen, 80-col lines must be comically short.<br>&gt;<br>&gt; I don’t know why it should be assumed that people are adhering to a<br>&gt; so-called standard that dates back to terminal screens that didn’t have<br>&gt; color.<br>&gt;<br>&gt;<br>&gt; &gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt; allows one to &quot;understand as much as possible about the control flow of the<br>&gt; loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt; used] cannot be realized in a very common coding style.<br>&gt;<br>&gt; Again, I dispute the idea (having no data but my own :P) that 80-col<br>&gt; limits are common in this community.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/df4587fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 24, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 9:00 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 1:56 PM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt; &gt; On Jun 24, 2016, at 1:30 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com &lt;mailto:wjs at mac.com&gt;&gt; wrote:<br>&gt; &gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt; &gt;<br>&gt; &gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for most cases. I’ll add newlines if I think it adds to clarity, but in general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt; &gt;<br>&gt; &gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to force everyone to write lines of certain lengths. But 80-character lines is a common style, and I would say that a corollary of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful whether or not you adhere to such style choices.<br>&gt; <br>&gt; I honestly don’t believe that this a common style in the Cocoa community.<br>&gt; <br>&gt; We&#39;re talking about the Swift community here, and Swift stdlib would be a good starting point as to what is a common or at least accepted style; it uses 80-character lines.<br></p><p>While it does, it makes sense only for readability purposes of the documentation. For example, I see absolute no reason why to split https://github.com/apple/swift/blob/master/stdlib/public/core/StringBuffer.swift#L233 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringBuffer.swift#L233&gt; into two lines.<br></p><p>It makes the code less readable.<br></p><p>80-char style made sense in C, where everything is pretty much top-level. But given that you declare a class, within which you declare another class, within which you declare methods, the first level of the method indentation is at level 3, which given 4 spaces per tab gives you 12 characters already. Adding a few levels (for-cycle + an if statement within the for cycle) gives you 20 characters of just whitespace (1/4 of the allocated 80 chars per line).<br></p><p>Which is why I don&#39;t believe this code style is valid in a modern language. My personal guess is that it should be upped to e.g. 160 chars per line - that kind of makes sense. There is no particular reason other than historic why we&#39;re still using 80 chars per line.<br></p><p>&gt;  <br>&gt; I’m not a member of the “old guard” having only come into this world 10 years ago with the iPhone, but just take a look at this delegate method in Objective-C:<br>&gt; <br>&gt; - (void)locationManager:(CLLocationManager *)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion *)region withError:(NSError *)error;<br>&gt; <br>&gt; That’s well over 80 characters all by itself. This fits on my screen in a single line - and I work on a 15” MBP with room for my dock always visible on the side along with Xcode’s sidebar open! On a typical desktop-sized screen, 80-col lines must be comically short.<br>&gt; <br>&gt; I don’t know why it should be assumed that people are adhering to a so-called standard that dates back to terminal screens that didn’t have color.<br>&gt; <br>&gt; <br>&gt; &gt; If the chief advantage of `where` is that it (quoting someone above) allows one to &quot;understand as much as possible about the control flow of the loop from a single line of code,&quot; then we ought perhaps to question its appropriateness when the majority of its benefits [by which I mean, based on your examples and Sean&#39;s, more than half of the instances in which it is used] cannot be realized in a very common coding style.<br>&gt; <br>&gt; Again, I dispute the idea (having no data but my own :P) that 80-col limits are common in this community.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/500405a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 2:26 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jun 24, 2016, at 9:00 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 24, 2016 at 1:56 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; On Jun 24, 2016, at 1:30 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt; &gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping<br>&gt;&gt; for most cases. I’ll add newlines if I think it adds to clarity, but in<br>&gt;&gt; general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt;&gt; force everyone to write lines of certain lengths. But 80-character lines is<br>&gt;&gt; a common style, and I would say that a corollary of &quot;to each their own&quot; is<br>&gt;&gt; that Swift&#39;s grammar should be usable and useful whether or not you adhere<br>&gt;&gt; to such style choices.<br>&gt;&gt;<br>&gt;&gt; I honestly don’t believe that this a common style in the Cocoa community.<br>&gt;<br>&gt;<br>&gt; We&#39;re talking about the Swift community here, and Swift stdlib would be a<br>&gt; good starting point as to what is a common or at least accepted style; it<br>&gt; uses 80-character lines.<br>&gt;<br>&gt;<br>&gt; While it does, it makes sense only for readability purposes of the<br>&gt; documentation. For example, I see absolute no reason why to split<br>&gt; https://github.com/apple/swift/blob/master/stdlib/public/core/StringBuffer.swift#L233 into<br>&gt; two lines.<br>&gt;<br>&gt; It makes the code less readable.<br>&gt;<br>&gt; 80-char style made sense in C, where everything is pretty much top-level.<br>&gt; But given that you declare a class, within which you declare another class,<br>&gt; within which you declare methods, the first level of the method indentation<br>&gt; is at level 3, which given 4 spaces per tab gives you 12 characters<br>&gt; already. Adding a few levels (for-cycle + an if statement within the for<br>&gt; cycle) gives you 20 characters of just whitespace (1/4 of the allocated 80<br>&gt; chars per line).<br>&gt;<br>&gt; Which is why I don&#39;t believe this code style is valid in a modern language.<br>&gt;<br></p><p>This is one style that some very intelligent people use in Swift. I&#39;m not<br>going to debate what styles are &quot;valid.&quot;<br></p><p>My personal guess is that it should be upped to e.g. 160 chars per line -<br>&gt; that kind of makes sense. There is no particular reason other than historic<br>&gt; why we&#39;re still using 80 chars per line.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; I’m not a member of the “old guard” having only come into this world 10<br>&gt;&gt; years ago with the iPhone, but just take a look at this delegate method in<br>&gt;&gt; Objective-C:<br>&gt;&gt;<br>&gt;&gt; - (void)locationManager:(CLLocationManager *)manager<br>&gt;&gt; rangingBeaconsDidFailForRegion:(CLBeaconRegion *)region withError:(NSError<br>&gt;&gt; *)error;<br>&gt;&gt;<br>&gt;&gt; That’s well over 80 characters all by itself. This fits on my screen in a<br>&gt;&gt; single line - and I work on a 15” MBP with room for my dock always visible<br>&gt;&gt; on the side along with Xcode’s sidebar open! On a typical desktop-sized<br>&gt;&gt; screen, 80-col lines must be comically short.<br>&gt;&gt;<br>&gt;&gt; I don’t know why it should be assumed that people are adhering to a<br>&gt;&gt; so-called standard that dates back to terminal screens that didn’t have<br>&gt;&gt; color.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt;&gt; allows one to &quot;understand as much as possible about the control flow of the<br>&gt;&gt; loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt;&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt;&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt;&gt; used] cannot be realized in a very common coding style.<br>&gt;&gt;<br>&gt;&gt; Again, I dispute the idea (having no data but my own :P) that 80-col<br>&gt;&gt; limits are common in this community.<br>&gt;&gt;<br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/494e5197/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 25, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 9:33 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 2:26 PM, Charlie Monroe &lt;charlie at charliemonroe.net &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 9:00 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jun 24, 2016 at 1:56 PM, Sean Heber &lt;sean at fifthace.com &lt;mailto:sean at fifthace.com&gt;&gt; wrote:<br>&gt;&gt; &gt; On Jun 24, 2016, at 1:30 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com &lt;mailto:wjs at mac.com&gt;&gt; wrote:<br>&gt;&gt; &gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for most cases. I’ll add newlines if I think it adds to clarity, but in general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to force everyone to write lines of certain lengths. But 80-character lines is a common style, and I would say that a corollary of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful whether or not you adhere to such style choices.<br>&gt;&gt; <br>&gt;&gt; I honestly don’t believe that this a common style in the Cocoa community.<br>&gt;&gt; <br>&gt;&gt; We&#39;re talking about the Swift community here, and Swift stdlib would be a good starting point as to what is a common or at least accepted style; it uses 80-character lines.<br>&gt; <br>&gt; While it does, it makes sense only for readability purposes of the documentation. For example, I see absolute no reason why to split https://github.com/apple/swift/blob/master/stdlib/public/core/StringBuffer.swift#L233 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/StringBuffer.swift#L233&gt; into two lines.<br>&gt; <br>&gt; It makes the code less readable.<br>&gt; <br>&gt; 80-char style made sense in C, where everything is pretty much top-level. But given that you declare a class, within which you declare another class, within which you declare methods, the first level of the method indentation is at level 3, which given 4 spaces per tab gives you 12 characters already. Adding a few levels (for-cycle + an if statement within the for cycle) gives you 20 characters of just whitespace (1/4 of the allocated 80 chars per line).<br>&gt; <br>&gt; Which is why I don&#39;t believe this code style is valid in a modern language.<br>&gt; <br>&gt; This is one style that some very intelligent people use in Swift. I&#39;m not going to debate what styles are &quot;valid.&quot;<br></p><p>I&#39;m sorry, if this sounded offensive in any way, I certainly did not mean it that way, I simply wanted to point out why I believe the 80-char limit is a bit limiting nowadays given that you can nest various constructs.<br></p><p>&gt; My personal guess is that it should be upped to e.g. 160 chars per line - that kind of makes sense. There is no particular reason other than historic why we&#39;re still using 80 chars per line.<br>&gt; <br>&gt;&gt;  <br>&gt;&gt; I’m not a member of the “old guard” having only come into this world 10 years ago with the iPhone, but just take a look at this delegate method in Objective-C:<br>&gt;&gt; <br>&gt;&gt; - (void)locationManager:(CLLocationManager *)manager rangingBeaconsDidFailForRegion:(CLBeaconRegion *)region withError:(NSError *)error;<br>&gt;&gt; <br>&gt;&gt; That’s well over 80 characters all by itself. This fits on my screen in a single line - and I work on a 15” MBP with room for my dock always visible on the side along with Xcode’s sidebar open! On a typical desktop-sized screen, 80-col lines must be comically short.<br>&gt;&gt; <br>&gt;&gt; I don’t know why it should be assumed that people are adhering to a so-called standard that dates back to terminal screens that didn’t have color.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; If the chief advantage of `where` is that it (quoting someone above) allows one to &quot;understand as much as possible about the control flow of the loop from a single line of code,&quot; then we ought perhaps to question its appropriateness when the majority of its benefits [by which I mean, based on your examples and Sean&#39;s, more than half of the instances in which it is used] cannot be realized in a very common coding style.<br>&gt;&gt; <br>&gt;&gt; Again, I dispute the idea (having no data but my own :P) that 80-col limits are common in this community.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160625/c8935175/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>June 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 11:30 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt; <br>&gt;&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for most cases. I’ll add newlines if I think it adds to clarity, but in general I don’t want to code like i’m still on a Wyse WY-50.<br>&gt; <br>&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to force everyone to write lines of certain lengths.<br></p><p>The fact that you bring up a style in a proposal review [about a style imo] (and thus distracting the review process ) just reinforces the thinking that the proposal is about enforcing a particular style. <br></p><p>I think you made your point clearly in the discussions and proposal. Please allow other people to have their own opinions in this review :), otherwise it is not a review imo. <br></p><p>&gt; But 80-character lines is a common style, and I would say that a corollary of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful whether or not you adhere to such style choices.<br>&gt; <br>&gt; If the chief advantage of `where` is that it (quoting someone above) allows one to &quot;understand as much as possible about the control flow of the loop from a single line of code,&quot; then we ought perhaps to question its appropriateness when the majority of its benefits [by which I mean, based on your examples and Sean&#39;s, more than half of the instances in which it is used] cannot be realized in a very common coding style.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/99bbe8a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 4:04 PM, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Jun 24, 2016, at 11:30 AM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 24, 2016 at 6:37 AM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Jun 23, 2016, at 11:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don’t understand why anyone wouldn’t just let Xcode do the wrapping for<br>&gt;&gt; most cases. I’ll add newlines if I think it adds to clarity, but in general<br>&gt;&gt; I don’t want to code like i’m still on a Wyse WY-50.<br>&gt;&gt;<br>&gt;<br>&gt; Of course, to each their own style--I certainly wouldn&#39;t want Swift to<br>&gt; force everyone to write lines of certain lengths.<br>&gt;<br>&gt;<br>&gt; The fact that you bring up a style in a proposal review [about a style<br>&gt; imo] (and thus distracting the review process ) just reinforces the<br>&gt; thinking that the proposal is about enforcing a particular style.<br>&gt;<br></p><p>On the contrary, new data have been presented on how `where` is being used.<br>These raise a point that `where` promotes a particular style over others,<br>and what I&#39;m trying to point out here--not mentioned previously--is that<br>one purported major benefit of `where` (putting everything on one line) is<br>inapplicable to the Swift stdlib&#39;s own style as well as those of others. It<br>is not a distraction to tackle new points that are brought up during the<br>review process.<br></p><p><br>&gt; I think you made your point clearly in the discussions and proposal.<br>&gt; Please allow other people to have their own opinions in this review :),<br>&gt; otherwise it is not a review imo.<br>&gt;<br></p><p>You may note that I&#39;ve confined my comments to particulars raised by<br>others&#39; comments. And, FWIW, I haven&#39;t actually reviewed the proposal, so<br>I&#39;m not sure how you know how I feel about it.<br></p><p><br>&gt; But 80-character lines is a common style, and I would say that a corollary<br>&gt; of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful<br>&gt; whether or not you adhere to such style choices.<br>&gt;<br>&gt; If the chief advantage of `where` is that it (quoting someone above)<br>&gt; allows one to &quot;understand as much as possible about the control flow of<br>&gt; the loop from a single line of code,&quot; then we ought perhaps to question its<br>&gt; appropriateness when the majority of its benefits [by which I mean, based<br>&gt; on your examples and Sean&#39;s, more than half of the instances in which it is<br>&gt; used] cannot be realized in a very common coding style.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/149d244a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 25, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 11:14 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [...] what I&#39;m trying to point out here--not mentioned previously--is that one purported major benefit of `where` (putting everything on one line) is inapplicable to the Swift stdlib&#39;s own style as well as those of others.<br></p><p>That&#39;s like saying that you can&#39;t use long method names imported from ObjC in Swift. Why can&#39;t you use<br></p><p>for anchor<br>	in wall.anchors<br>	where boundsRect.contains(anchor.origin) <br></p><p>or similar, if you need to fit within the 80 chars - just like you&#39;d do with a compound if statement that exceeds 80 chars.<br></p><p>The major benefit isn&#39;t saving a line (though it&#39;s 3 unless you&#39;re willing to add { continue } on the same line), but to express your intend to filter the array right within the for-in statement.<br></p><p>When you look around someone else&#39;s code, you immediately see that the person is only going through anchors without bounds without the need to examine the loop&#39;s body, which may be collapsed (hidden) by the editor.<br></p><p><br>&gt; I think you made your point clearly in the discussions and proposal. Please allow other people to have their own opinions in this review :), otherwise it is not a review imo. <br>&gt; <br>&gt; You may note that I&#39;ve confined my comments to particulars raised by others&#39; comments. And, FWIW, I haven&#39;t actually reviewed the proposal, so I&#39;m not sure how you know how I feel about it.<br>&gt; <br>&gt; <br>&gt;&gt; But 80-character lines is a common style, and I would say that a corollary of &quot;to each their own&quot; is that Swift&#39;s grammar should be usable and useful whether or not you adhere to such style choices.<br>&gt;&gt; <br>&gt;&gt; If the chief advantage of `where` is that it (quoting someone above) allows one to &quot;understand as much as possible about the control flow of the loop from a single line of code,&quot; then we ought perhaps to question its appropriateness when the majority of its benefits [by which I mean, based on your examples and Sean&#39;s, more than half of the instances in which it is used] cannot be realized in a very common coding style.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160625/046e17ba/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 12:04 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jun 24, 2016 at 12:59 AM, William Shipley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Here are some of my real-world examples:<br>&gt; <br>&gt;         for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt; <br>&gt; Not a practitioner of 80-character line limits, I take it?<br></p><p>80-character line limits aren&#39;t why these examples  are problematic for me.<br>Other than a few positive examples like this wall.anchors one, <br></p><p>&gt;          for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br></p><p>most of these read as if there is too much logic stuffed into a single line:<br></p><p>&gt; for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt; <br>&gt;         for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt; <br>&gt;         for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt; <br>&gt;         for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt; …<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/3fd52853/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 24, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Jun 24, 2016 at 4:33 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 24, 2016, at 12:04 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jun 24, 2016 at 12:59 AM, William Shipley via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Here are some of my real-world examples:<br>&gt;&gt;<br>&gt;&gt;         for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements<br>&gt;&gt; where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;&gt;<br>&gt;<br>&gt; Not a practitioner of 80-character line limits, I take it?<br>&gt;<br>&gt;<br>&gt; 80-character line limits aren&#39;t why these examples  are problematic for me.<br>&gt;<br></p><p>Sorry, I&#39;m going to selfishly interject here to clarify what I meant by<br>that question to Wil.<br></p><p>I was not implying that his code was problematic for me--far be it from me<br>to critique Wil&#39;s code or style, a task for which I&#39;m not qualified. And<br>I&#39;m truly appreciative that Wil was willing to share his code so that we<br>could learn about the use of `where` in closed-source contexts.<br></p><p>The point I was trying to bring up was that a purported advantage of<br>keeping `where` is moot for those who *do* observe line limits, which<br>includes the Swift stdlib itself as well as (IIUC) house style at Google,<br>Microsoft, etc.<br></p><p><br>&gt; Other than a few positive examples like this wall.anchors one,<br>&gt;<br>&gt;          for anchor in wall.anchors where boundsRect.contains(anchor.<br>&gt; origin) {<br>&gt;<br>&gt;<br>&gt; most of these read as if there is too much logic stuffed into a single<br>&gt; line:<br>&gt;<br>&gt; for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.<br>&gt;&gt; contains(otherWall) {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         for otherPieceOfFurnitureNode in<br>&gt;&gt; localFurnitureModelUUIDsToInterfaceElements!.values where<br>&gt;&gt; otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         for lineSegmentObject in wallRelatedLineSegments where<br>&gt;&gt; remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;         for colinearLineSegmentObject in remainingLineSegments where<br>&gt;&gt; colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle:<br>&gt;&gt; lineSegmentObject.angle) {<br>&gt;&gt;<br>&gt;&gt; …<br>&gt;&gt;<br>&gt;&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/3e2816a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/54f387ccfb4a55e7bfe3d8c80cb25afe?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>William Shipley</string> &lt;wjs at mac.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>On Jun 24, 2016, at 2:53 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; The point I was trying to bring up was that a purported advantage of keeping `where` is moot for those who *do* observe line limits, which includes the Swift stdlib itself as well as (IIUC) house style at Google, Microsoft, etc.<br></p><p>Sorry, I wasn’t clear. I wasn’t saying that having it on the same exactly physical line is cleaner, I was saying that having the criteria for the “what I’m iterating” above the loop body and “what I’m doing with those things” inside the loop body is a much cleaner metaphor to me, and one of my favorite bits of Swift. It feels very Swifty to allow the programmer to separate these two concepts nicely.<br></p><p>I don’t care if/how lines are wrapped. In some cases I put the “where” on the next line in my code right now.<br></p><p>-Wil<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/f1ccf399/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 24, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 24 Jun 2016, at 22:33, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; most of these read as if there is too much logic stuffed into a single line:<br>&gt; <br>&gt;&gt; for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt;&gt; <br>&gt;&gt;         for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt; <br>&gt;&gt;         for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt; <br>&gt;&gt;         for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt;&gt; …<br></p><p>Personally the logic seems pretty simple to me (especially the second and third one, plus the fourth isn&#39;t actually complex), I&#39;d say the biggest problem to readability here is that the names seem too verbose, though without seeing the rest of the code that&#39;s hard to judge. For example the last example doesn&#39;t look so bad if you shorten the names like so:<br></p><p>	 for colinearSegment in remainingSegments where colinearSegment.angle.isEssentially(angle: segment.angle) { // Is parameter name even necessary?<br></p><p>Basically on the basis that it&#39;s probably obvious from context that this is to do with lines that this is to do with lines, not sure if .isEssentially()&#39;s parameter name can be changed, but I&#39;m not sure why there needs to be a distinction that the angle is for an infinite line (an angle is an angle).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/51737ae2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e25d5fca2c8d7b9ad1365e5bf859f9f3?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>William Jon Shipley</string> &lt;wjs at delicious-monster.com&gt;<p>June 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 3:00 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; 	 for colinearSegment in remainingSegments where colinearSegment.angle.isEssentially(angle: segment.angle) { // Is parameter name even necessary?<br></p><p>My terminology sucks because I don’t remember math terms but basically I’m trying to distinguish between angles of rays (0..&lt;360º) and angles of lines (0..&lt;180º). Because, like, if you have a line at 45º and another at 225º, well, they’re either collinear or parallel.<br></p><p>So I call the variants “rayAngle:” and “infiniteLineAngle:”. Not my finest hour.<br></p><p>-W<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/a7182772/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 25, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 24 Jun 2016, at 23:38, William Jon Shipley &lt;wjs at delicious-monster.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 3:00 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; 	 for colinearSegment in remainingSegments where colinearSegment.angle.isEssentially(angle: segment.angle) { // Is parameter name even necessary?<br>&gt; <br>&gt; My terminology sucks because I don’t remember math terms but basically I’m trying to distinguish between angles of rays (0..&lt;360º) and angles of lines (0..&lt;180º). Because, like, if you have a line at 45º and another at 225º, well, they’re either collinear or parallel.<br>&gt; <br>&gt; So I call the variants “rayAngle:” and “infiniteLineAngle:”. Not my finest hour.<br></p><p>Sorry, I think I got a bit side-tracked, didn&#39;t mean to seem too critical of the name choice, my point was that the logic is actually pretty straightforward, and the line is long because of the verbose naming rather than the presence of a where clause (which could also be moved to another line as another option). As always you should use whatever names help you to understand and remember the intent of the code best, meanwhile I should actually focus on what my point was supposed to be =D<br></p><p><br>So yeah, I don&#39;t think any of the examples presented have had &quot;too much logic&quot; for a where clause, while more complex cases with ands, ors, etc. might become a bit less immediately readable, it&#39;s no more so than any other if-condition, and it&#39;s an issue of personal style choice regardless, rather than a fault with a where clause.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160625/65c08293/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 24, 2016 at 07:00:00am</p></header><div class="content"><p>Thank you for collecting and sharing these. <br></p><p>I suspect both of us look at these and say &quot;Ah yes, this supports exactly what I&#39;ve been saying&quot;.<br></p><p>-- E<br></p><p>&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt; <br>&gt; Here are some of my real-world examples:<br>&gt; <br>&gt;         for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt;         for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt;         for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt;         for wall in self as Set&lt;Wall&gt; {<br>&gt;             for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt; …<br>&gt;             }<br>&gt;         }<br>&gt; <br>&gt;         for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt; …<br>&gt;         } <br>&gt; <br>&gt; (x2 on that one)<br>&gt; <br>&gt;         for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt;         for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt;         for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt; …<br>&gt;         }<br>&gt; <br>&gt; <br>&gt; I think this is basically as many as are found on all of github?<br>&gt; <br>&gt; -W<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/f2fa94f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 24, 2016 at 10:00:00am</p></header><div class="content"><p>I’ll share some of mine from a single game project. Note this hasn’t been converted to Swift 3 and this is not all of them - just a varied sampling:<br></p><p><br>for location in random.sample(map, density: 0.007) where map.allowsGrassAt(location) &amp;&amp; !map.hasGrassAt(location) {<br>}<br></p><p>for location in type.designatedLocations where location.z == Global.cameraZ &amp;&amp; !locations.contains(location) {<br>}<br></p><p>for location in region where location.z == mouseLocation.z {<br>}<br></p><p>for location in path where location.z == Global.cameraZ {<br>}<br></p><p>for below in location.below.cardinals where contains(below) &amp;&amp; hasSurfaceAt(below) {<br>}<br></p><p>for neighbor in location.cardinals where contains(neighbor) &amp;&amp; isRampAt(neighbor) &amp;&amp; !isFloorAt(neighbor.above) {<br>}<br></p><p>for neighbor in cardinals where contains(neighbor) &amp;&amp; !isSolidAt(neighbor) {<br>}<br></p><p>for console in consoles.reverse() where console.hitTest(vector) {<br>}<br></p><p><br></p><p>And these 2 made good use, IMO, of “if-where” but I think that’s no longer in Swift 3? :/<br></p><p><br>if let there = debugClickedSurfaceAt, here = mouseSurface where Global.debugPathTest {<br>}<br></p><p>if let here = mouseAt where Global.debugWalkNeighbors {<br>}<br></p><p><br>l8r<br>Sean<br></p><p><br></p><p><br>&gt; On Jun 24, 2016, at 8:24 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thank you for collecting and sharing these. <br>&gt; <br>&gt; I suspect both of us look at these and say &quot;Ah yes, this supports exactly what I&#39;ve been saying&quot;.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here are some of my real-world examples:<br>&gt;&gt; <br>&gt;&gt;         for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for wall in self as Set&lt;Wall&gt; {<br>&gt;&gt;             for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt;&gt; …<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt;&gt; …<br>&gt;&gt;         } <br>&gt;&gt; <br>&gt;&gt; (x2 on that one)<br>&gt;&gt; <br>&gt;&gt;         for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt;&gt; …<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think this is basically as many as are found on all of github?<br>&gt;&gt; <br>&gt;&gt; -W<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 24, 2016 at 05:00:00pm</p></header><div class="content"><p>If the `where` keyword were to stay in the language, how would you feel about extending it? One major argument is that it is not as powerful as guard or if. How about something like this was allowed:<br></p><p>for text in self.texts where let data = text.data(usingEncoding: NSASCIIEncoding) {<br>	/// Do something with data or text<br>}<br></p><p><br>&gt; On Jun 24, 2016, at 5:06 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ll share some of mine from a single game project. Note this hasn’t been converted to Swift 3 and this is not all of them - just a varied sampling:<br>&gt; <br>&gt; <br>&gt; for location in random.sample(map, density: 0.007) where map.allowsGrassAt(location) &amp;&amp; !map.hasGrassAt(location) {<br>&gt; }<br>&gt; <br>&gt; for location in type.designatedLocations where location.z == Global.cameraZ &amp;&amp; !locations.contains(location) {<br>&gt; }<br>&gt; <br>&gt; for location in region where location.z == mouseLocation.z {<br>&gt; }<br>&gt; <br>&gt; for location in path where location.z == Global.cameraZ {<br>&gt; }<br>&gt; <br>&gt; for below in location.below.cardinals where contains(below) &amp;&amp; hasSurfaceAt(below) {<br>&gt; }<br>&gt; <br>&gt; for neighbor in location.cardinals where contains(neighbor) &amp;&amp; isRampAt(neighbor) &amp;&amp; !isFloorAt(neighbor.above) {<br>&gt; }<br>&gt; <br>&gt; for neighbor in cardinals where contains(neighbor) &amp;&amp; !isSolidAt(neighbor) {<br>&gt; }<br>&gt; <br>&gt; for console in consoles.reverse() where console.hitTest(vector) {<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; And these 2 made good use, IMO, of “if-where” but I think that’s no longer in Swift 3? :/<br>&gt; <br>&gt; <br>&gt; if let there = debugClickedSurfaceAt, here = mouseSurface where Global.debugPathTest {<br>&gt; }<br>&gt; <br>&gt; if let here = mouseAt where Global.debugWalkNeighbors {<br>&gt; }<br>&gt; <br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 8:24 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thank you for collecting and sharing these. <br>&gt;&gt; <br>&gt;&gt; I suspect both of us look at these and say &quot;Ah yes, this supports exactly what I&#39;ve been saying&quot;.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some of my real-world examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for wall in self as Set&lt;Wall&gt; {<br>&gt;&gt;&gt;            for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;            }<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        } <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (x2 on that one)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this is basically as many as are found on all of github?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -W<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 24, 2016 at 10:00:00am</p></header><div class="content"><p>I’ve occasionally thought something like that would be handy, but usually I find a way to reorganize it so it’s not necessary and it works just as well. Hard to say, really. Adding power might be good, but adding too much power might easily cross my own threshold of “too complex”.<br></p><p>I do think that proper consideration should be given to moving “where”. For example, here are a few of mine re-ordered:<br></p><p><br>for location where location.z == Global.cameraZ in path {<br>}<br></p><p>for below where contains(below) &amp;&amp; hasSurfaceAt(below) in location.below.cardinals {<br>}<br></p><p>for neighbor where contains(neighbor) &amp;&amp; isRampAt(neighbor) &amp;&amp; !isFloorAt(neighbor.above) in location.cardinals {<br>}<br></p><p><br>To me that’s just as good and perhaps even better since it groups the name of the thing with the rules for the thing.<br></p><p>l8r<br>Sean<br></p><p><br></p><p>&gt; On Jun 24, 2016, at 10:10 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; If the `where` keyword were to stay in the language, how would you feel about extending it? One major argument is that it is not as powerful as guard or if. How about something like this was allowed:<br>&gt; <br>&gt; for text in self.texts where let data = text.data(usingEncoding: NSASCIIEncoding) {<br>&gt; 	/// Do something with data or text<br>&gt; }<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 5:06 PM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ll share some of mine from a single game project. Note this hasn’t been converted to Swift 3 and this is not all of them - just a varied sampling:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; for location in random.sample(map, density: 0.007) where map.allowsGrassAt(location) &amp;&amp; !map.hasGrassAt(location) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for location in type.designatedLocations where location.z == Global.cameraZ &amp;&amp; !locations.contains(location) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for location in region where location.z == mouseLocation.z {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for location in path where location.z == Global.cameraZ {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for below in location.below.cardinals where contains(below) &amp;&amp; hasSurfaceAt(below) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for neighbor in location.cardinals where contains(neighbor) &amp;&amp; isRampAt(neighbor) &amp;&amp; !isFloorAt(neighbor.above) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for neighbor in cardinals where contains(neighbor) &amp;&amp; !isSolidAt(neighbor) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for console in consoles.reverse() where console.hitTest(vector) {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; And these 2 made good use, IMO, of “if-where” but I think that’s no longer in Swift 3? :/<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; if let there = debugClickedSurfaceAt, here = mouseSurface where Global.debugPathTest {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; if let here = mouseAt where Global.debugWalkNeighbors {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 24, 2016, at 8:24 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you for collecting and sharing these. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I suspect both of us look at these and say &quot;Ah yes, this supports exactly what I&#39;ve been saying&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Here are some of my real-world examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for wall in self as Set&lt;Wall&gt; {<br>&gt;&gt;&gt;&gt;           for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;           }<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       } <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (x2 on that one)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;       for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt;&gt;&gt;&gt; …<br>&gt;&gt;&gt;&gt;       }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this is basically as many as are found on all of github?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -W<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>June 28, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; On 24 Jun 2016, at 17:10, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If the `where` keyword were to stay in the language, how would you feel about extending it? One major argument is that it is not as powerful as guard or if. How about something like this was allowed:<br>&gt; <br>&gt; for text in self.texts where let data = text.data(usingEncoding: NSASCIIEncoding) {<br>&gt; 	/// Do something with data or text<br>&gt; }<br>&gt; <br></p><p>I noticed this in some code I was writing just now and came to mention it.<br></p><p>Right now I’ve got this (Note: tagsForGroup is [String?]):<br></p><p>&gt; for (index, range) in zip(groupRanges.indices, groupRanges) where tagsForGroup[index] != nil {<br>&gt; <br>&gt; 	let tagForGroup = tagsForGroup[index]!<br>&gt; 	// tag `range` with `tagForGroup`<br>&gt; }<br></p><p>It would be nicer to write it like this:<br></p><p>&gt; for (index, range) in zip(groupRanges.indices, groupRanges) where let tag = tagsForGroup[index] {<br>&gt; <br>&gt; 	// tag `range` with `tag`<br>&gt; }<br></p><p><br>I could do it with a guard, but as somebody so eloquently put, it produces more divergent constructs for readers. It’s part of a complex regex matching and processing workflow, so I want to keep it readable and make it explicit that we’re only tagging/processing groups where a tag is defined.<br></p><p><br>Karl<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>June 24, 2016 at 11:00:00am</p></header><div class="content"><p>I think that we should change it to `if. Inline filtering is useful, even<br>if it isn&#39;t used much at present but the inconsistency doesn&#39;t help<br>adoption.<br></p><p>On Fri, Jun 24, 2016 at 11:06 AM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’ll share some of mine from a single game project. Note this hasn’t been<br>&gt; converted to Swift 3 and this is not all of them - just a varied sampling:<br>&gt;<br>&gt;<br>&gt; for location in random.sample(map, density: 0.007) where<br>&gt; map.allowsGrassAt(location) &amp;&amp; !map.hasGrassAt(location) {<br>&gt; }<br>&gt;<br>&gt; for location in type.designatedLocations where location.z ==<br>&gt; Global.cameraZ &amp;&amp; !locations.contains(location) {<br>&gt; }<br>&gt;<br>&gt; for location in region where location.z == mouseLocation.z {<br>&gt; }<br>&gt;<br>&gt; for location in path where location.z == Global.cameraZ {<br>&gt; }<br>&gt;<br>&gt; for below in location.below.cardinals where contains(below) &amp;&amp;<br>&gt; hasSurfaceAt(below) {<br>&gt; }<br>&gt;<br>&gt; for neighbor in location.cardinals where contains(neighbor) &amp;&amp;<br>&gt; isRampAt(neighbor) &amp;&amp; !isFloorAt(neighbor.above) {<br>&gt; }<br>&gt;<br>&gt; for neighbor in cardinals where contains(neighbor) &amp;&amp; !isSolidAt(neighbor)<br>&gt; {<br>&gt; }<br>&gt;<br>&gt; for console in consoles.reverse() where console.hitTest(vector) {<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; And these 2 made good use, IMO, of “if-where” but I think that’s no longer<br>&gt; in Swift 3? :/<br>&gt;<br>&gt;<br>&gt; if let there = debugClickedSurfaceAt, here = mouseSurface where<br>&gt; Global.debugPathTest {<br>&gt; }<br>&gt;<br>&gt; if let here = mouseAt where Global.debugWalkNeighbors {<br>&gt; }<br>&gt;<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt; On Jun 24, 2016, at 8:24 AM, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Thank you for collecting and sharing these.<br>&gt; &gt;<br>&gt; &gt; I suspect both of us look at these and say &quot;Ah yes, this supports<br>&gt; exactly what I&#39;ve been saying&quot;.<br>&gt; &gt;<br>&gt; &gt; -- E<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Here are some of my real-world examples:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for modelUUIDAndInterfaceElement in<br>&gt; modelUUIDsToInterfaceElements where<br>&gt; !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for anchor in wall.anchors where<br>&gt; boundsRect.contains(anchor.origin) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for otherWall: Wall in self where otherWall != wall &amp;&amp;<br>&gt; !removedWalls.contains(otherWall) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for wall in self as Set&lt;Wall&gt; {<br>&gt; &gt;&gt;             for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;             }<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for wall in self as Set&lt;Wall&gt; where<br>&gt; !checkedWalls.contains(wall) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; (x2 on that one)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for otherPieceOfFurnitureNode in<br>&gt; localFurnitureModelUUIDsToInterfaceElements!.values where<br>&gt; otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for lineSegmentObject in wallRelatedLineSegments where<br>&gt; remainingLineSegments.contains(lineSegmentObject) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;         for colinearLineSegmentObject in remainingLineSegments where<br>&gt; colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle:<br>&gt; lineSegmentObject.angle) {<br>&gt; &gt;&gt; …<br>&gt; &gt;&gt;         }<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think this is basically as many as are found on all of github?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -W<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160624/b0dcfce5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 24, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 24, 2016, at 11:06 AM, Sean Heber via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; And these 2 made good use, IMO, of “if-where” but I think that’s no longer in Swift 3? :/<br>&gt; <br>&gt; <br>&gt; if let there = debugClickedSurfaceAt, here = mouseSurface where Global.debugPathTest {<br>&gt; }<br>&gt; <br>&gt; if let here = mouseAt where Global.debugWalkNeighbors {<br>&gt; }<br>&gt; <br></p><p>Just for completeness, these will now be:<br></p><p>if let there = debugClickedSurfaceAt, let here = mouseSurface, Global.debugPathTest {<br>}<br></p><p>if let here = mouseAt, Global.debugWalkNeighbors {<br>}<br></p><p>Not too sure if this is any clearer ¯\_(ツ)_/¯ <br></p><p><br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 24, 2016, at 8:24 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thank you for collecting and sharing these. <br>&gt;&gt; <br>&gt;&gt; I suspect both of us look at these and say &quot;Ah yes, this supports exactly what I&#39;ve been saying&quot;.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 11:59 PM, William Shipley &lt;wjs at mac.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some of my real-world examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for modelUUIDAndInterfaceElement in modelUUIDsToInterfaceElements where !usedInterfaceElements.contains(modelUUIDAndInterfaceElement.1) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for anchor in wall.anchors where boundsRect.contains(anchor.origin) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for otherWall: Wall in self where otherWall != wall &amp;&amp; !removedWalls.contains(otherWall) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for wall in self as Set&lt;Wall&gt; {<br>&gt;&gt;&gt;            for otherWall in self as Set&lt;Wall&gt; where otherWall != wall {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;            }<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for wall in self as Set&lt;Wall&gt; where !checkedWalls.contains(wall) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        } <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (x2 on that one)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for otherPieceOfFurnitureNode in localFurnitureModelUUIDsToInterfaceElements!.values where otherPieceOfFurnitureNode !== pieceOfFurnitureNode {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for lineSegmentObject in wallRelatedLineSegments where remainingLineSegments.contains(lineSegmentObject) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;        for colinearLineSegmentObject in remainingLineSegments where colinearLineSegmentObject.angle.isEssentially(infiniteLineAngle: lineSegmentObject.angle) {<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt;        }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this is basically as many as are found on all of github?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -W<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>June 26, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 23, 2016, at 7:14 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt;&gt; <br>&gt;&gt; for x in theArray where x % 2 == 1 { print (x) }<br>&gt; I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>&gt; is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>&gt; the construct, and an exploration of why the challenging cases would not need debugger <br>&gt; support at that point.<br>&gt; <br>&gt; My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>&gt; complex loses the beauty and readability and hinders debugging at the same time.<br>&gt; <br>&gt; — E<br></p><p>Here are two that are shipping right now. <br></p><p>for (key, tile) in self._cache where tile.tintColor != self.tintColor { }<br></p><p>for innerArray in actualValue where innerArray.contains(expectedElement) { }<br></p><p>Russ<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160626/4fe9d304/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>June 27, 2016 at 10:00:00am</p></header><div class="content"><p>We’ve also got two occurrences in our closed source, production code:<br></p><p>for (predicate, callback) in predicatesAndCallbacks where predicate(typedEvent) {<br>    callback(typedEvent)<br>}<br></p><p>and:<br></p><p>for conversation in conversations where conversation.state == .Established { }<br></p><p>They’re both quite simple and short, but I find them very readable (and I find the first one quite elegant). That said, it wouldn’t be much trouble for us to rewrite these using guard statements or any other construct. <br></p><p>- David<br></p><p><br>&gt; On 27 Jun 2016, at 00:47, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 23, 2016, at 7:14 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for x in theArray where x % 2 == 1 { print (x) }<br>&gt;&gt; I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>&gt;&gt; is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>&gt;&gt; the construct, and an exploration of why the challenging cases would not need debugger <br>&gt;&gt; support at that point.<br>&gt;&gt; <br>&gt;&gt; My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>&gt;&gt; complex loses the beauty and readability and hinders debugging at the same time.<br>&gt;&gt; <br>&gt;&gt; — E<br>&gt; <br>&gt; Here are two that are shipping right now. <br>&gt; <br>&gt; for (key, tile) in self._cache where tile.tintColor != self.tintColor { }<br>&gt; <br>&gt; for innerArray in actualValue where innerArray.contains(expectedElement) { }<br>&gt; <br>&gt; Russ<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160627/8c4d70d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ee830e3f2ce3913e9aa8e800cacee25?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Tony Arnold</string> &lt;tony at thecocoabots.com&gt;<p>June 28, 2016 at 10:00:00am</p></header><div class="content"><p>I wasn’t going to be +1 guy, but “+1”: <br></p><p>I use where pretty heavily across both `if let` and in `for … in` loops. <br></p><p>I find both really readable when formatted, and I’d be disappointed to see them go. <br></p><p>I’m super annoyed that I missed (see “wasn’t paying attention during”) the review of SE-0099 because I would have loved to see `where` remain usable — it reads better than a comma and forces an order to things that made a lot of sense to me.<br></p><p>thanks,<br></p><p><br>Tony<br></p><p><br></p><p>&gt; On 27 Jun 2016, at 18:15, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We’ve also got two occurrences in our closed source, production code:<br>&gt; <br>&gt; for (predicate, callback) in predicatesAndCallbacks where predicate(typedEvent) {<br>&gt;     callback(typedEvent)<br>&gt; }<br>&gt; <br>&gt; and:<br>&gt; <br>&gt; for conversation in conversations where conversation.state == .Established { }<br>&gt; <br>&gt; They’re both quite simple and short, but I find them very readable (and I find the first one quite elegant). That said, it wouldn’t be much trouble for us to rewrite these using guard statements or any other construct. <br>&gt; <br>&gt; - David<br>&gt; <br>&gt; <br>&gt;&gt; On 27 Jun 2016, at 00:47, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 23, 2016, at 7:14 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for x in theArray where x % 2 == 1 { print (x) }<br>&gt;&gt;&gt; I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>&gt;&gt;&gt; is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>&gt;&gt;&gt; the construct, and an exploration of why the challenging cases would not need debugger <br>&gt;&gt;&gt; support at that point.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>&gt;&gt;&gt; complex loses the beauty and readability and hinders debugging at the same time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — E<br>&gt;&gt; <br>&gt;&gt; Here are two that are shipping right now. <br>&gt;&gt; <br>&gt;&gt; for (key, tile) in self._cache where tile.tintColor != self.tintColor { }<br>&gt;&gt; <br>&gt;&gt; for innerArray in actualValue where innerArray.contains(expectedElement) { }<br>&gt;&gt; <br>&gt;&gt; Russ<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>----------<br>Tony Arnold<br>+61 411 268 532<br>http://thecocoabots.com/ &lt;http://thecocoabots.com/&gt;<br></p><p>ABN: 14831833541<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/d9c551f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ee830e3f2ce3913e9aa8e800cacee25?s=50"></div><header><strong>SE-0105: Removing Where Clauses from For-In Loops</strong> from <string>Tony Arnold</string> &lt;tony at thecocoabots.com&gt;<p>June 28, 2016 at 05:00:00pm</p></header><div class="content"><p>Just to clarify:<br></p><p>I was +1-ing real world `where` clauses. I am against this proposal.<br></p><p>So… -1 from me on this proposal (and SE-0099 for what it’s worth).<br></p><p>Sorry!<br></p><p>-t<br></p><p><br>(Thanks for pointing out the confusion my email may have caused, Goffredo)<br></p><p><br></p><p>&gt; On 28 Jun 2016, at 10:39, Tony Arnold &lt;tony at thecocoabots.com&gt; wrote:<br>&gt; <br>&gt; I wasn’t going to be +1 guy, but “+1”: <br>&gt; <br>&gt; I use where pretty heavily across both `if let` and in `for … in` loops. <br>&gt; <br>&gt; I find both really readable when formatted, and I’d be disappointed to see them go. <br>&gt; <br>&gt; I’m super annoyed that I missed (see “wasn’t paying attention during”) the review of SE-0099 because I would have loved to see `where` remain usable — it reads better than a comma and forces an order to things that made a lot of sense to me.<br>&gt; <br>&gt; thanks,<br>&gt; <br>&gt; <br>&gt; Tony<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On 27 Jun 2016, at 18:15, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; We’ve also got two occurrences in our closed source, production code:<br>&gt;&gt; <br>&gt;&gt; for (predicate, callback) in predicatesAndCallbacks where predicate(typedEvent) {<br>&gt;&gt;     callback(typedEvent)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; and:<br>&gt;&gt; <br>&gt;&gt; for conversation in conversations where conversation.state == .Established { }<br>&gt;&gt; <br>&gt;&gt; They’re both quite simple and short, but I find them very readable (and I find the first one quite elegant). That said, it wouldn’t be much trouble for us to rewrite these using guard statements or any other construct. <br>&gt;&gt; <br>&gt;&gt; - David<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 27 Jun 2016, at 00:47, Russ Bishop via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 23, 2016, at 7:14 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 23, 2016, at 7:34 PM, William Shipley via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m against removing “where&quot; from “for/in”. I use it in my code and I think it aids readability quite a bit. In the example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; for x in theArray where x % 2 == 1 { print (x) }<br>&gt;&gt;&gt;&gt; I have used odd-even examples a lot when presenting this concept, and inevitably the response<br>&gt;&gt;&gt;&gt; is &quot;Whoa, that&#39;s cool&quot;. What I&#39;m missing are more challenging real-world use-cases to justify <br>&gt;&gt;&gt;&gt; the construct, and an exploration of why the challenging cases would not need debugger <br>&gt;&gt;&gt;&gt; support at that point.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My concern (and I am happy to be corrected) is that any code that becomes slightly more <br>&gt;&gt;&gt;&gt; complex loses the beauty and readability and hinders debugging at the same time.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; — E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are two that are shipping right now. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for (key, tile) in self._cache where tile.tintColor != self.tintColor { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for innerArray in actualValue where innerArray.contains(expectedElement) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Russ<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; ----------<br>&gt; Tony Arnold<br>&gt; +61 411 268 532<br>&gt; http://thecocoabots.com/ &lt;http://thecocoabots.com/&gt;<br>&gt; <br>&gt; ABN: 14831833541<br>&gt; <br></p><p>----------<br>Tony Arnold<br>+61 411 268 532<br>http://thecocoabots.com/ &lt;http://thecocoabots.com/&gt;<br></p><p>ABN: 14831833541<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160628/0bbfa1bf/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
