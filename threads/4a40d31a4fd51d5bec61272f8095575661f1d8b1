<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1a0b0e6993aee26e3d9a4ee05aba4f9?s=50"></div><header><strong>restricting AnySequence.init</strong> from <string>Maxim Moiseev</string> &lt;maxim_moiseev at apple.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Here is the proposal to add more constraints to AnySequence.init in order to implement delegation of method calls to the underlying SequnceType implementation.<br>https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md &lt;https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md&gt;<br></p><p>(Including full text of the proposal at the bottom for your convenience).<br></p><p>Final goal would be to eventually properly delegate all the calls to `SequenceType` and `CollectionType` methods inside `AnySequence` and `Any${Traversal}Collection`.<br></p><p>Any thoughts and comments are welcome (not creating a PR just yet).<br></p><p>max<br></p><p><br></p><p>Constraining AnySequence.init<br></p><p>Proposal:<br>SE-0008 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0008-constrained-AnySequence.md&gt;<br>Author(s): Max Moiseev &lt;https://github.com/moiseev&gt;<br>Status: Review<br>Review manager: TBD<br> &lt;https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md#introduction&gt;Introduction<br></p><p>In order to allow AnySequence delegate calls to the underlying sequence, its initializer should have extra constraints.<br></p><p> &lt;https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md#motivation&gt;Motivation<br></p><p>At the moment AnyCollection does not delegate calls to SequenceType protocol methods to the underlying base sequence, which results in dynamic downcasts in places where this behavior is needed (see default implementations ofSequenceType.dropFirst or SequenceType.prefix). Besides, and this is even more important, customized implementations of SequenceType methods would be ignored without delegation.<br></p><p> &lt;https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md#proposed-solution&gt;Proposed solution<br></p><p>See the implementation in this PR &lt;https://github.com/apple/swift/pull/220&gt;.<br></p><p>In order for this kind of delegation to become possible, _SequenceBox needs to be able to &#39;wrap&#39; not only the base sequence but also it&#39;s associated SubSequence. So instead of being declared like this:<br></p><p>internal class _SequenceBox&lt;S : SequenceType&gt;<br>    : _AnySequenceBox&lt;S.Generator.Element&gt; { ... }<br>it would become this:<br></p><p>internal class _SequenceBox&lt;<br>  S : SequenceType<br>  where<br>    S.SubSequence : SequenceType,<br>    S.SubSequence.Generator.Element == S.Generator.Element,<br>    S.SubSequence.SubSequence == S.SubSequence<br>&gt; : _AnySequenceBox&lt;S.Generator.Element&gt; { ... }<br>Which, in it&#39;s turn, will lead to AnySequence.init getting a new set of constraints as follows.<br></p><p>Before the change:<br></p><p>public struct AnySequence&lt;Element&gt; : SequenceType {<br>  public init&lt;<br>    S: SequenceType<br>    where<br>      S.Generator.Element == Element<br>  &gt;(_ base: S) { ... }<br>}<br>After the change:<br></p><p>public struct AnySequence&lt;Element&gt; : SequenceType {<br>  public init&lt;<br>    S: SequenceType<br>    where<br>      S.Generator.Element == Element,<br>      S.SubSequence : SequenceType,<br>      S.SubSequence.Generator.Element == Element,<br>      S.SubSequence.SubSequence == S.SubSequence<br>  &gt;(_ base: S) { ... }<br>}<br>These constraints, in fact, should be applied to SequenceType protocol itself (although, that is not currently possible), as we expect every SequenceType implementation to satisfy them already.<br></p><p> &lt;https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md#impact-on-existing-code&gt;Impact on existing code<br></p><p>New constraints do not affect any built-in types that conform to SequenceType protocol as they are essentially constructed like this (SubSequence.SubSequence == SubSequence). 3rd party collections, if they use the default SubSequence (i.e. Slice), should also be fine. Those having custom SubSequences may stop conforming to the protocol.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/4a40d8b1/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>restricting AnySequence.init</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  7, 2015 at 12:00:00pm</p></header><div class="content"><p>On Mon, Dec 7, 2015 at 12:43 PM, Maxim Moiseev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; Here is the proposal to add more constraints to AnySequence.init in order<br>&gt; to implement delegation of method calls to the underlying SequnceType<br>&gt; implementation.<br>&gt;<br>&gt; https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md<br>&gt;<br>&gt; (Including full text of the proposal at the bottom for your convenience).<br>&gt;<br>&gt; Final goal would be to eventually properly delegate all the calls to<br>&gt; `SequenceType` and `CollectionType` methods inside `AnySequence` and<br>&gt; `Any${Traversal}Collection`.<br>&gt;<br></p><p>Thanks, Max!<br></p><p>I reviewed this proposal with Max offline and it LGTM.  The biggest<br>question that we have to answer is if this change is small enough to be<br>included in Swift 2.2.  I would say yes, since the only collections that<br>are affected by this change are collections that we don&#39;t consider valid,<br>where the author went an extra mile to declare an improper SubSequence type<br>-- and they would stop working anyway once we can constrain the SubSequence<br>the way we want.<br></p><p>What does everyone think?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/7129dc1a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>restricting AnySequence.init</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January  2, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 looks good to me, I also feel like this is an important bug fix. It<br>would be nice if Swift had some kind of automatic process for type erasure<br>that delegates all calls the the underlying implementation.<br></p><p>As a more concrete example for why this is important, try running these two<br>lines in a playground:<br></p><p>print(Array((0...1000000000).suffix(2)))<br>print(Array(AnySequence(0...1000000000).suffix(2)))<br></p><p><br>The second line will take a very long time to run.<br></p><p><br>On Tue, Dec 8, 2015 at 7:50 AM, Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mon, Dec 7, 2015 at 12:43 PM, Maxim Moiseev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi all,<br>&gt;&gt;<br>&gt;&gt; Here is the proposal to add more constraints to AnySequence.init in order<br>&gt;&gt; to implement delegation of method calls to the underlying SequnceType<br>&gt;&gt; implementation.<br>&gt;&gt;<br>&gt;&gt; https://github.com/moiseev/swift-evolution/blob/restricted-anyseq/proposals/0008-constrained-AnySequence.md<br>&gt;&gt;<br>&gt;&gt; (Including full text of the proposal at the bottom for your convenience).<br>&gt;&gt;<br>&gt;&gt; Final goal would be to eventually properly delegate all the calls to<br>&gt;&gt; `SequenceType` and `CollectionType` methods inside `AnySequence` and<br>&gt;&gt; `Any${Traversal}Collection`.<br>&gt;&gt;<br>&gt;<br>&gt; Thanks, Max!<br>&gt;<br>&gt; I reviewed this proposal with Max offline and it LGTM.  The biggest<br>&gt; question that we have to answer is if this change is small enough to be<br>&gt; included in Swift 2.2.  I would say yes, since the only collections that<br>&gt; are affected by this change are collections that we don&#39;t consider valid,<br>&gt; where the author went an extra mile to declare an improper SubSequence type<br>&gt; -- and they would stop working anyway once we can constrain the SubSequence<br>&gt; the way we want.<br>&gt;<br>&gt; What does everyone think?<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160102/7a90a977/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
