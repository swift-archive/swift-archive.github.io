<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Conditional generic initializers?</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>May 15, 2016 at 08:00:00am</p></header><div class="content"><p>Is it possible for a generic class to have methods (specifically, initializers) which are only defined if the generic parameters meet certain constratins?<br></p><p>Here’s a concrete example:<br></p><p>    class Foo &lt;T1, T2&gt; {<br>        init(pairs: [(T1, T2)]) {}<br>        // What I’d like to be able to doL<br>        convenience init &quot;where T1 == T2&quot; (values: [T1]) { self.init(pairs: values.map{ ($0, $0) }) }<br>    }<br></p><p>That is, I’d like to provide a convenience initializer that takes an array of values instead of pairs, and turns the values into pairs, IF THE TWO GENERIC TYPE PARAMETERS ARE THE SAME.<br></p><p>I can’t find a way to accomplish this. Is there one?<br></p><p>Thanks,<br></p><p>	Neil Faiman<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Conditional generic initializers?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Yes. You need to put it in an extension.<br></p><p>extension Foo where T1 == T2 {<br>    convenience init(values: [T1]){<br>    ….<br>    }<br>}<br></p><p>&gt; On 15 May 2016, at 14:45, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is it possible for a generic class to have methods (specifically, initializers) which are only defined if the generic parameters meet certain constratins?<br>&gt; <br>&gt; Here’s a concrete example:<br>&gt; <br>&gt;    class Foo &lt;T1, T2&gt; {<br>&gt;        init(pairs: [(T1, T2)]) {}<br>&gt;        // What I’d like to be able to doL<br>&gt;        convenience init &quot;where T1 == T2&quot; (values: [T1]) { self.init(pairs: values.map{ ($0, $0) }) }<br>&gt;    }<br>&gt; <br>&gt; That is, I’d like to provide a convenience initializer that takes an array of values instead of pairs, and turns the values into pairs, IF THE TWO GENERIC TYPE PARAMETERS ARE THE SAME.<br>&gt; <br>&gt; I can’t find a way to accomplish this. Is there one?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; 	Neil Faiman<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a49c2b8a7e2ffa1339ac013f4cf9b6ff?s=50"></div><header><strong>Conditional generic initializers?</strong> from <string>Neil Faiman</string> &lt;neil.swift at faiman.org&gt;<p>May 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Is this a relatively new language change? When I try it with the version of Swift that comes with Xcode 7.3.1, I get<br></p><p>    error: same-type requirement makes generic parameters &#39;T1&#39; and &#39;T2&#39; equivalent<br>    extension Foo where T1 == T2 {<br>                           ^<br></p><p><br>&gt; On May 15, 2016, at 1:33 PM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes. You need to put it in an extension.<br>&gt; <br>&gt; extension Foo where T1 == T2 {<br>&gt;    convenience init(values: [T1]){<br>&gt;    ….<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt;&gt; On 15 May 2016, at 14:45, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is it possible for a generic class to have methods (specifically, initializers) which are only defined if the generic parameters meet certain constratins?<br>&gt;&gt; <br>&gt;&gt; Here’s a concrete example:<br>&gt;&gt; <br>&gt;&gt;   class Foo &lt;T1, T2&gt; {<br>&gt;&gt;       init(pairs: [(T1, T2)]) {}<br>&gt;&gt;       // What I’d like to be able to doL<br>&gt;&gt;       convenience init &quot;where T1 == T2&quot; (values: [T1]) { self.init(pairs: values.map{ ($0, $0) }) }<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; That is, I’d like to provide a convenience initializer that takes an array of values instead of pairs, and turns the values into pairs, IF THE TWO GENERIC TYPE PARAMETERS ARE THE SAME.<br>&gt;&gt; <br>&gt;&gt; I can’t find a way to accomplish this. Is there one?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Conditional generic initializers?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 16, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 15, 2016, at 11:55 AM, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is this a relatively new language change? When I try it with the version of Swift that comes with Xcode 7.3.1, I get<br>&gt; <br>&gt;    error: same-type requirement makes generic parameters &#39;T1&#39; and &#39;T2&#39; equivalent<br>&gt;    extension Foo where T1 == T2 {<br>&gt;                           ^<br></p><p>Unfortunately, it&#39;s a limitation of our type system today that class/struct/enum extensions can&#39;t use &#39;==&#39; constraints. It can often be worked around by making a protocol instead.<br></p><p>-Joe<br></p><p>&gt; <br>&gt;&gt; On May 15, 2016, at 1:33 PM, Karl &lt;razielim at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes. You need to put it in an extension.<br>&gt;&gt; <br>&gt;&gt; extension Foo where T1 == T2 {<br>&gt;&gt;   convenience init(values: [T1]){<br>&gt;&gt;   ….<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt;&gt; On 15 May 2016, at 14:45, Neil Faiman via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it possible for a generic class to have methods (specifically, initializers) which are only defined if the generic parameters meet certain constratins?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a concrete example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  class Foo &lt;T1, T2&gt; {<br>&gt;&gt;&gt;      init(pairs: [(T1, T2)]) {}<br>&gt;&gt;&gt;      // What I’d like to be able to doL<br>&gt;&gt;&gt;      convenience init &quot;where T1 == T2&quot; (values: [T1]) { self.init(pairs: values.map{ ($0, $0) }) }<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That is, I’d like to provide a convenience initializer that takes an array of values instead of pairs, and turns the values into pairs, IF THE TWO GENERIC TYPE PARAMETERS ARE THE SAME.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can’t find a way to accomplish this. Is there one?<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
