<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0374ed2672f4c25e2fc1fddd0872a2c?s=50"></div><header><strong>C-style For Loops</strong> from <string>Kelly Gerber</string> &lt;kellygerber22 at yahoo.com&gt;<p>December  6, 2015 at 11:00:00am</p></header><div class="content"><p>I think that the C-style for loop should be removed from Swift. The scope rules for this for loop are wrong. Every loop sees the same scope. This is a source of bugs if you export the loop variable name outside the scope of the for statement, for example in a closure. The following code illustrates the problem:<br></p><p>var handlers: [() -&gt; ()] = []<br></p><p>for i in 0..&lt;5 {<br>    handlers.append { print(i) }<br>}<br></p><p>for handler in handlers {<br>    handler()  // &quot;0 1 2 3 4&quot;<br>}<br></p><p>handlers = []<br></p><p>for var i = 0; i &lt; 5; i += 1 {<br>    handlers.append { print(i) }<br>}<br></p><p>for handler in handlers {<br>    handler()  // &quot;5 5 5 5 5&quot;<br>}<br></p><p>The Swift for-in loop does the right thing naturally. The C-style for loop does the wrong thing naturally. Removing the C-style for loop from Swift will eliminate one more class of possible errors from the language.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/a3fd4836/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>C-style For Loops</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; I think that the C-style for loop should be removed from Swift.<br></p><p>The silence you’re hearing on this proposal is because we just had a thread about this a couple days ago. :^) Take a look at the archives--most people seem to agree that the for loop ought to go. They’ve even started changing standard library for loops to for-in.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>C-style For Loops</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 3:22 PM, Brent Royal-Gordon via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;They’ve even started changing standard library for loops to for-in.<br></p><p>The patch that was submitted changes the obvious cases.  It would be<br>good to see a patch that converts all instances, including the &quot;hard&quot;<br>ones.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>C-style For Loops</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>December  7, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi Reviewers,<br></p><p>Since it looks like Nate has already done that analysis for the standard library, let’s analyze Dmitri&#39;s semi-obfuscated prime signature for fun.  <br></p><p>Starting with:<br></p><p>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p><p>First transform into Swift.  (Using += 1 instead of ++ since we know those are going.)<br></p><p>var j: Int<br>for var i=2; ; i+=1 {<br>  for j=2; j&lt;i; j+=1 {<br>    if i%j == 0 {<br>      j = 0<br>      break<br>    }<br>  }<br>  if j != 0 {<br>    print(i)<br>  }<br>} // Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br></p><p><br>Next get rid of those for loops.  <br></p><p><br>for i in 2 ..&lt; Int.max {<br>  var j = 2<br>  while j &lt; i {<br>    if i%j == 0 {<br>      j = 0<br>      break<br>    }<br>    j += 1<br>  }<br>  if j != 0 {<br>    print(i)<br>  }<br>} // Dmitri Gribenko &lt;gribozavr at gmail.com&gt;<br></p><p>There is an improvement in that it forced us to avoid integer overflow by specifying the end game (although the heat death of the universe might happen first if you run this in a playground).  Since j escapes the scope of it’s loop we couldn’t use a for statement variable.  I think this is actually a good thing because it makes this wrinkle more apparent.<br></p><p>For-in almost always looks better. If things get too complicated you can always fall back to a different control structure like while or repeat.    BTW, looking at Doug’s implementation of the Sieve of Eratosthenes from his WWDC Value-Types talk, it uses  for-in-stride.  He explicitly preferred that to a traditional C-style even though it would have been easy to go either way.  It just looks better.  Fewer semicolons, it must be good.<br></p><p>Here is my review:<br></p><p>1. I endorse the proposal<br>2. I think it is worthwhile as it will force people to adopt good practices early and break bad habits.<br>3. I believe the change goes along well with the removal of ++ and — operator.  Reducing the surface area of the language is a good thing.<br>4. It will cause the “Swift is not stable!” crowd to go a little more crazy but I am okay with that.<br>5. I thought about this pretty hard, checked my usage of for loops in a non-trivial code base.  I feel even more comfortable after Nate’s analysis of the standard library.<br></p><p>PS:  I do not recommend any changes to Dmitri&#39;s signature. :)<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/59528703/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>C-style For Loops</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>December  7, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 4:58 PM, Ray Fix via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; There is an improvement in that it forced us to avoid integer overflow by specifying the end game (although the heat death of the universe might happen first if you run this in a playground).  Since j escapes the scope of it’s loop we couldn’t use a for statement variable.  I think this is actually a good thing because it makes this wrinkle more apparent.<br>&gt; <br>You can use a for loop, you just have to use a flag to indicate whether the number was found to be non-prime, or a label. Label approach (since using a flag is obvious);<br></p><p>candidate: for i in 2 ..&lt; Int.max {<br>    for j in 2 ..&lt; i {<br>        if i % j == 0 {<br>           continue candidate<br>        }<br>    }<br>    print(i)<br>}<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/3387f4e4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
