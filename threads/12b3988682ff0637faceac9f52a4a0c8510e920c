<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 15, 2016 at 04:00:00pm</p></header><div class="content"><p>I’m writing some code that deals with ranges of “sequence numbers”, which are consecutively-assigned positive 64-bit integers, thus Range&lt;UInt64&gt; in Swift. I’m having trouble handling half-open ranges with no maximum, which are very commonly used for representing all items created since a certain time.<br></p><p>The trouble is, if I represent these with Ranges whose endIndex is UInt64.max, those ranges tend to bomb:<br></p><p>let r: Range&lt;UInt64&gt; = 5..&lt;UInt64.max<br>r.count   // FATAL ERROR<br></p><p>The problem is that Range.count’s type is Element.Distance, and UInt64.Distance is a typealias of … Int. Huh? It’s pretty clear that the distance between two UInt64s can’t be represented by a signed Int64. Why isn’t Distance UInt64?<br></p><p>(I’m guessing it’s because Distance needs to be signed, to represent backwards distances? But that’s not needed for Ranges, of course.)<br></p><p>It’s sort of worrisome that Swift will let me create a valid Range value that nonetheless bombs when accessed!<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160415/12b3920c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 15, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Apr 15, 2016 at 4:23 PM, Jens Alfke via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; I’m writing some code that deals with ranges of “sequence numbers”, which<br>&gt; are consecutively-assigned positive 64-bit integers, thus Range&lt;UInt64&gt; in<br>&gt; Swift. I’m having trouble handling half-open ranges with no maximum, which<br>&gt; are very commonly used for representing all items created since a certain<br>&gt; time.<br>&gt;<br>&gt; The trouble is, if I represent these with Ranges whose endIndex is<br>&gt; UInt64.max, those ranges tend to bomb:<br>&gt;<br>&gt; let r: Range&lt;UInt64&gt; = 5..&lt;UInt64.max<br>&gt; r.count   // FATAL ERROR<br>&gt;<br>&gt;<br>&gt; The problem is that Range.count’s type is Element.Distance, and<br>&gt; UInt64.Distance is a typealias of … Int. Huh? It’s pretty clear that the<br>&gt; distance between two UInt64s can’t be represented by a signed Int64. Why<br>&gt; isn’t Distance UInt64?<br></p><p>Hi Jens,<br></p><p>The distance is signed so that we can represent negative distances.<br>r.distance(from:to:) should be able to measure distances backwards.<br></p><p>We are aware of this issue, but we don&#39;t know of a good solution.<br>We&#39;d appreciate your suggestions.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 15, 2016 at 04:00:00pm</p></header><div class="content"><p>--Jens     [via iPhone]<br></p><p>&gt; On Apr 15, 2016, at 4:26 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; The distance is signed so that we can represent negative distances.<br>&gt; r.distance(from:to:) should be able to measure distances backwards.<br></p><p>Yeah, makes sense in general, just not for this particular case...<br>&gt; <br>&gt; We are aware of this issue, but we don&#39;t know of a good solution.<br>&gt; We&#39;d appreciate your suggestions.<br></p><p>Add Int128! ;-)<br></p><p>Ok, maybe that just pushes the problem further down the road. How about making Distance be Double? ;-)<br></p><p>--Jens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 15, 2016 at 04:00:00pm</p></header><div class="content"><p>On Fri, Apr 15, 2016 at 4:41 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; --Jens     [via iPhone]<br>&gt;<br>&gt;&gt; On Apr 15, 2016, at 4:26 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; The distance is signed so that we can represent negative distances.<br>&gt;&gt; r.distance(from:to:) should be able to measure distances backwards.<br>&gt;<br>&gt; Yeah, makes sense in general, just not for this particular case...<br>&gt;&gt;<br>&gt;&gt; We are aware of this issue, but we don&#39;t know of a good solution.<br>&gt;&gt; We&#39;d appreciate your suggestions.<br>&gt;<br>&gt; Add Int128! ;-)<br>&gt;<br>&gt; Ok, maybe that just pushes the problem further down the road.<br></p><p>Indeed.<br></p><p>&gt; How about making Distance be Double? ;-)<br></p><p>Double only has 53 bits of precision.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 16, 2016 at 10:00:00am</p></header><div class="content"><p>Is there any reason that Distance has to be a simple Int? Since it’s defined per-type, UInt64 could use a custom struct without impacting the performance of other types:<br>struct UInt64Distance : Comparable { //I&#39;m not sure what else it needs to conform to <br>    var distance: UInt64<br>    var isPositive: Bool<br>}<br>func == (lhs: UInt64Distance, rhs: UInt64Distance) -&gt; Bool {<br>    return lhs.distance == rhs.distance &amp;&amp; lhs.isPositive == rhs.isPositive<br>}<br>func &lt; (lhs: UInt64Distance, rhs: UInt64Distance) -&gt; Bool {<br>    switch (lhs.isPositive, rhs.isPositive) {<br>    case (false, false): return lhs.distance &gt; rhs.distance<br>    case (false, true ): return true<br>    case (true,  false): return false<br>    case (true,  true ): return lhs.distance &lt; rhs.distance<br>    }<br>}<br>... //The rest of `Comparable`<br></p><p>(I’m assuming it’d need `Comparable`, but a quick glance around with cmd-click in Xcode didn’t tell me what, if any, protocols `Distance` needs to conform to.)<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 15, 2016, at 6:26 PM, Dmitri Gribenko via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Apr 15, 2016 at 4:23 PM, Jens Alfke via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; I’m writing some code that deals with ranges of “sequence numbers”, which<br>&gt;&gt; are consecutively-assigned positive 64-bit integers, thus Range&lt;UInt64&gt; in<br>&gt;&gt; Swift. I’m having trouble handling half-open ranges with no maximum, which<br>&gt;&gt; are very commonly used for representing all items created since a certain<br>&gt;&gt; time.<br>&gt;&gt; <br>&gt;&gt; The trouble is, if I represent these with Ranges whose endIndex is<br>&gt;&gt; UInt64.max, those ranges tend to bomb:<br>&gt;&gt; <br>&gt;&gt; let r: Range&lt;UInt64&gt; = 5..&lt;UInt64.max<br>&gt;&gt; r.count   // FATAL ERROR<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The problem is that Range.count’s type is Element.Distance, and<br>&gt;&gt; UInt64.Distance is a typealias of … Int. Huh? It’s pretty clear that the<br>&gt;&gt; distance between two UInt64s can’t be represented by a signed Int64. Why<br>&gt;&gt; isn’t Distance UInt64?<br>&gt; <br>&gt; Hi Jens,<br>&gt; <br>&gt; The distance is signed so that we can represent negative distances.<br>&gt; r.distance(from:to:) should be able to measure distances backwards.<br>&gt; <br>&gt; We are aware of this issue, but we don&#39;t know of a good solution.<br>&gt; We&#39;d appreciate your suggestions.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160416/98a74bb1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 16, 2016 at 12:00:00pm</p></header><div class="content"><p>On Sat, Apr 16, 2016 at 8:29 AM,  &lt;davesweeris at mac.com&gt; wrote:<br>&gt; Is there any reason that Distance has to be a simple Int? Since it’s defined<br>&gt; per-type, UInt64 could use a custom struct without impacting the performance<br>&gt; of other types:<br></p><p>It needs to be a signed integer.  And a signed integer needs a<br>distance type itself.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Range&lt;UInt64&gt;.count can abort</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 16, 2016, at 12:53 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; It needs to be a signed integer.  And a signed integer needs a distance type itself.<br></p><p>Yeah, there’s an infinite regress implied there, since a distance type has to be one bit larger than its source type.<br></p><p>The only plausible solution is bignums. Any talk of adding those to Swift?<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160416/2a83c24c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
