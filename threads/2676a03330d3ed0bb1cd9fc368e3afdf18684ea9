<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>MemoryLayout for a value</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  5, 2016 at 10:00:00pm</p></header><div class="content"><p>on Fri Aug 05 2016, Boris Wang &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Addition:<br>&gt;<br>&gt; I think protocol should&#39;t has size, or it&#39;s size should be zero.<br>&gt; Because you can&#39;t put the 40 bytes data in anywhere.<br></p><p>You certainly can.  If protocols didn&#39;t have a size, Array wouldn&#39;t be<br>able to store them.<br></p><p>&gt;<br>&gt;<br>&gt; Boris Wang &lt;kona.ming at gmail.com&gt;于2016年8月6日 周六10:35写道：<br>&gt;<br>&gt;&gt; codes in swift REPL:<br>&gt;&gt;<br>&gt;&gt; protocol P {<br>&gt;&gt; var x:Int {get}<br>&gt;&gt; }<br>&gt;&gt; MemoryLayout&lt;P&gt;.size<br>&gt;&gt; //r0 : Int = 40<br>&gt;&gt;<br>&gt;&gt; struct S1 {<br>&gt;&gt; var v1:Int = 0<br>&gt;&gt; }<br>&gt;&gt; MemoryLayout&lt;S1&gt;.size<br>&gt;&gt; //r1: Int =8<br>&gt;&gt;<br>&gt;&gt; struct S2: P {<br>&gt;&gt; var v2: Int<br>&gt;&gt; var x:Int<br>&gt;&gt; }<br>&gt;&gt; MemoryLayout &lt;S2&gt;.size<br>&gt;&gt; //r2: Int = 16<br>&gt;&gt;<br>&gt;&gt; ** Question:<br>&gt;&gt; Why we need to known the size of a object that can&#39;t be instanced?<br>&gt;&gt;<br>&gt;&gt; ** Confuse:<br>&gt;&gt; MemoryLayout &lt;S2.Type&gt;.size<br>&gt;&gt; //r3: Int = 0<br>&gt;&gt;<br>&gt;&gt; MemoryLayout &lt;P.Type&gt;.size<br>&gt;&gt; //r4: Int = 16<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;于2016年8月5日<br>&gt;&gt; 周五16:34写道：<br>&gt;&gt;<br>&gt;&gt;&gt; On Thu, Aug 4, 2016 at 6:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Thu Aug 04 2016, Dmitri Gribenko &lt;gribozavr-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt; On Wed, Aug 3, 2016 at 7:28 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt; Could I suggest an alternative? It&#39;s conservative in that it mimics<br>&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt; &gt;&gt; relationships we had before the proposal was implemented and also<br>&gt;&gt;&gt;&gt; maintains<br>&gt;&gt;&gt;&gt; &gt;&gt; the simplicity of the caseless enum:<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; ```<br>&gt;&gt;&gt;&gt; &gt;&gt; extension MemoryLayout {<br>&gt;&gt;&gt;&gt; &gt;&gt;   static func size(ofValue _: T) -&gt; Int { return MemoryLayout.size }<br>&gt;&gt;&gt;&gt; &gt;&gt;   // etc.<br>&gt;&gt;&gt;&gt; &gt;&gt; }<br>&gt;&gt;&gt;&gt; &gt;&gt; ```<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I like this API.  I think given all the alternatives that we explored,<br>&gt;&gt;&gt;&gt; &gt; it is better than those.  I also think that it nicely avoids the<br>&gt;&gt;&gt;&gt; &gt; following issue with the proposed MemoryLayout.of(type(of:<br>&gt;&gt;&gt;&gt; &gt; someExpression)).size syntax.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Imagine that you have a value whose static type differs from the<br>&gt;&gt;&gt;&gt; &gt; dynamic type.  For example, a protocol existential:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; protocol P {}<br>&gt;&gt;&gt;&gt; &gt; extension Int : P {}<br>&gt;&gt;&gt;&gt; &gt; var x: P = 10<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; The question is, what does MemoryLayout.of(type(of: x)).size compute,<br>&gt;&gt;&gt;&gt; &gt; size of the existential box, or the size of an Int instance?  The<br>&gt;&gt;&gt;&gt; &gt; semantics of &#39;type(of:)&#39; are &quot;return the dynamic type&quot;, so the<br>&gt;&gt;&gt;&gt; &gt; straightforward conclusion is that MemoryLayout.of(type(of: x)).size<br>&gt;&gt;&gt;&gt; &gt; returns the size of the dynamic type instance, of Int.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; What actually happens is that &#39;type(of: x)&#39; returns a dynamic value of<br>&gt;&gt;&gt;&gt; &gt; &#39;Int.self&#39;, statically typed as &#39;P.Type&#39;.  So P gets deduced for the<br>&gt;&gt;&gt;&gt; &gt; generic parameter of MemoryLayout, and MemoryLayout.of(type(of:<br>&gt;&gt;&gt;&gt; &gt; x)).size returns the size of the protocol box.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I think due to this complex interaction, using type(of:) might lead to<br>&gt;&gt;&gt;&gt; &gt; confusing code, and thus I like Xiaodi&#39;s approach better.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Dmitri<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Okay, I&#39;m convinced; that&#39;s what we should do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Proposal and stdlib PRs have both been created.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/242e18b243022bcb7573443e06444423?s=50"></div><header><strong>MemoryLayout for a value</strong> from <string>Boris Wang</string> &lt;kona.ming at gmail.com&gt;<p>August  6, 2016 at 08:00:00am</p></header><div class="content"><p>Do you means a array of protocol P, rather than a array of element conform<br>with P?<br>Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;于2016年8月6日<br>周六13:22写道：<br></p><p>&gt;<br>&gt; on Fri Aug 05 2016, Boris Wang &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Addition:<br>&gt; &gt;<br>&gt; &gt; I think protocol should&#39;t has size, or it&#39;s size should be zero.<br>&gt; &gt; Because you can&#39;t put the 40 bytes data in anywhere.<br>&gt;<br>&gt; You certainly can.  If protocols didn&#39;t have a size, Array wouldn&#39;t be<br>&gt; able to store them.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Boris Wang &lt;kona.ming at gmail.com&gt;于2016年8月6日 周六10:35写道：<br>&gt; &gt;<br>&gt; &gt;&gt; codes in swift REPL:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; protocol P {<br>&gt; &gt;&gt; var x:Int {get}<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; MemoryLayout&lt;P&gt;.size<br>&gt; &gt;&gt; //r0 : Int = 40<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; struct S1 {<br>&gt; &gt;&gt; var v1:Int = 0<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; MemoryLayout&lt;S1&gt;.size<br>&gt; &gt;&gt; //r1: Int =8<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; struct S2: P {<br>&gt; &gt;&gt; var v2: Int<br>&gt; &gt;&gt; var x:Int<br>&gt; &gt;&gt; }<br>&gt; &gt;&gt; MemoryLayout &lt;S2&gt;.size<br>&gt; &gt;&gt; //r2: Int = 16<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ** Question:<br>&gt; &gt;&gt; Why we need to known the size of a object that can&#39;t be instanced?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ** Confuse:<br>&gt; &gt;&gt; MemoryLayout &lt;S2.Type&gt;.size<br>&gt; &gt;&gt; //r3: Int = 0<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; MemoryLayout &lt;P.Type&gt;.size<br>&gt; &gt;&gt; //r4: Int = 16<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt;于2016年8月5日<br>&gt; &gt;&gt; 周五16:34写道：<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Thu, Aug 4, 2016 at 6:02 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; &gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; on Thu Aug 04 2016, Dmitri Gribenko &lt;gribozavr-AT-gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; On Wed, Aug 3, 2016 at 7:28 PM, Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; Could I suggest an alternative? It&#39;s conservative in that it mimics<br>&gt; &gt;&gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; relationships we had before the proposal was implemented and also<br>&gt; &gt;&gt;&gt;&gt; maintains<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; the simplicity of the caseless enum:<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; ```<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; extension MemoryLayout {<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt;   static func size(ofValue _: T) -&gt; Int { return MemoryLayout.size<br>&gt; }<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt;   // etc.<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; &gt;&gt; ```<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; I like this API.  I think given all the alternatives that we<br>&gt; explored,<br>&gt; &gt;&gt;&gt;&gt; &gt; it is better than those.  I also think that it nicely avoids the<br>&gt; &gt;&gt;&gt;&gt; &gt; following issue with the proposed MemoryLayout.of(type(of:<br>&gt; &gt;&gt;&gt;&gt; &gt; someExpression)).size syntax.<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; Imagine that you have a value whose static type differs from the<br>&gt; &gt;&gt;&gt;&gt; &gt; dynamic type.  For example, a protocol existential:<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; protocol P {}<br>&gt; &gt;&gt;&gt;&gt; &gt; extension Int : P {}<br>&gt; &gt;&gt;&gt;&gt; &gt; var x: P = 10<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; The question is, what does MemoryLayout.of(type(of: x)).size<br>&gt; compute,<br>&gt; &gt;&gt;&gt;&gt; &gt; size of the existential box, or the size of an Int instance?  The<br>&gt; &gt;&gt;&gt;&gt; &gt; semantics of &#39;type(of:)&#39; are &quot;return the dynamic type&quot;, so the<br>&gt; &gt;&gt;&gt;&gt; &gt; straightforward conclusion is that MemoryLayout.of(type(of: x)).size<br>&gt; &gt;&gt;&gt;&gt; &gt; returns the size of the dynamic type instance, of Int.<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; What actually happens is that &#39;type(of: x)&#39; returns a dynamic value<br>&gt; of<br>&gt; &gt;&gt;&gt;&gt; &gt; &#39;Int.self&#39;, statically typed as &#39;P.Type&#39;.  So P gets deduced for the<br>&gt; &gt;&gt;&gt;&gt; &gt; generic parameter of MemoryLayout, and MemoryLayout.of(type(of:<br>&gt; &gt;&gt;&gt;&gt; &gt; x)).size returns the size of the protocol box.<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; I think due to this complex interaction, using type(of:) might lead<br>&gt; to<br>&gt; &gt;&gt;&gt;&gt; &gt; confusing code, and thus I like Xiaodi&#39;s approach better.<br>&gt; &gt;&gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt;&gt; &gt; Dmitri<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Okay, I&#39;m convinced; that&#39;s what we should do.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Proposal and stdlib PRs have both been created.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160806/8ac510cf/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
