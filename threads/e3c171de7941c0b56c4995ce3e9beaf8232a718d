<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8b94b2c18a5a83bc842d4197add92169?s=50"></div><header><strong>Allow strengthening argument types in functions declared for protocol conformance</strong> from <string>Terrence Katzenbaer</string> &lt;tkatzenbaer at me.com&gt;<p>December 16, 2015 at 07:00:00pm</p></header><div class="content"><p>Because APIs are designed to be generic, protocols that must be conformed generally use types like Object or other base classes for a given framework. This introduces type casting verbosity when implementing the protocol for a specific use. I would like to see the ability to strengthen argument types in functions declared for protocol conformance.<br></p><p>An example:<br>class Foo { }<br></p><p>class Bar: Foo { }<br></p><p>protocol FooDelegate {<br>    func didPerformSomeAction(object: Foo)<br>}<br></p><p>class FooController: FooDelegate {<br>    func didPerformSomeAction(var object: Foo) {<br>        // I know that object must be a Bar instance<br>        object = object as! Bar<br>        // do something with object<br>    }<br>}<br></p><p>class ProposedFooController: FooDelegate { // Type &#39;ProposedFooController&#39; does not conform to protocol &#39;FooDelegate&#39;<br>    func didPerformSomeAction(object: Bar) {<br>        // do something with Bar instance<br>    }<br>}<br></p><p>The glaring issue I see outright is how the runtime should fail when `didPerformSomeAction` in `ProposedFooController` is called with a non-Bar instance... But perhaps it /should/ fail outright because the programmer has explicitly stated that the type should be Bar.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/e3c1718d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Allow strengthening argument types in functions declared for protocol conformance</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>-1<br></p><p>I think the basic problem is saying the runtime should fail. I feel like a<br>large part of the power of Swift is letting the compiler and the programmer<br>make strong assumptions about types specifically to prevent the runtime<br>from dealing with it.<br></p><p>In fact, the type system can save us here! I wrote some code you can play<br>with here: http://swiftstub.com/318278733<br></p><p>The basic idea is that if you do something like<br></p><p>    extension FooDelegate where Self: BarController {<br>        func didPerformSomeAction(object: Foo) {}<br>    }<br></p><p>calls to didPerformSomeAction with an argument of type Bar will call the<br>right one for the type! There might be better ways to do that, but that is<br>what immediately came to mind.<br></p><p>On Wed, Dec 16, 2015 at 2:43 PM Terrence Katzenbaer via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Because APIs are designed to be generic, protocols that must be conformed<br>&gt; generally use types like Object or other base classes for a given<br>&gt; framework. This introduces type casting verbosity when implementing the<br>&gt; protocol for a specific use. I would like to see the ability to strengthen<br>&gt; argument types in functions declared for protocol conformance.<br>&gt;<br>&gt; An example:<br>&gt;<br>&gt; class Foo { }<br>&gt;<br>&gt;<br>&gt; class Bar: Foo { }<br>&gt;<br>&gt;<br>&gt; protocol FooDelegate {<br>&gt;<br>&gt;     func didPerformSomeAction(object: Foo)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; class FooController: FooDelegate {<br>&gt;<br>&gt;     func didPerformSomeAction(var object: Foo) {<br>&gt;<br>&gt;         // I know that object must be a Bar instance<br>&gt;<br>&gt;         object = object as! Bar<br>&gt;<br>&gt;         // do something with object<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; class ProposedFooController: FooDelegate { // Type<br>&gt; &#39;ProposedFooController&#39; does not conform to protocol &#39;FooDelegate&#39;<br>&gt;<br>&gt;     func didPerformSomeAction(object: Bar) {<br>&gt;<br>&gt;         // do something with Bar instance<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt; The glaring issue I see outright is how the runtime should fail when<br>&gt; `didPerformSomeAction` in `ProposedFooController` is called with a non-Bar<br>&gt; instance... But perhaps it /should/ fail outright because the programmer<br>&gt; has explicitly stated that the type should be Bar.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/77711c9e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Allow strengthening argument types in functions declared for protocol conformance</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>December 16, 2015 at 08:00:00pm</p></header><div class="content"><p>Sorry, that should be<br></p><p>    extension FooDelegate where Self: BarController {<br>        func didPerformSomeAction(object: Bar) {}<br>    }<br></p><p><br>On Wed, Dec 16, 2015 at 3:32 PM Ian Ynda-Hummel &lt;ianynda at gmail.com&gt; wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; I think the basic problem is saying the runtime should fail. I feel like a<br>&gt; large part of the power of Swift is letting the compiler and the programmer<br>&gt; make strong assumptions about types specifically to prevent the runtime<br>&gt; from dealing with it.<br>&gt;<br>&gt; In fact, the type system can save us here! I wrote some code you can play<br>&gt; with here: http://swiftstub.com/318278733<br>&gt;<br>&gt; The basic idea is that if you do something like<br>&gt;<br>&gt;     extension FooDelegate where Self: BarController {<br>&gt;         func didPerformSomeAction(object: Foo) {}<br>&gt;     }<br>&gt;<br>&gt; calls to didPerformSomeAction with an argument of type Bar will call the<br>&gt; right one for the type! There might be better ways to do that, but that is<br>&gt; what immediately came to mind.<br>&gt;<br>&gt; On Wed, Dec 16, 2015 at 2:43 PM Terrence Katzenbaer via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Because APIs are designed to be generic, protocols that must be conformed<br>&gt;&gt; generally use types like Object or other base classes for a given<br>&gt;&gt; framework. This introduces type casting verbosity when implementing the<br>&gt;&gt; protocol for a specific use. I would like to see the ability to strengthen<br>&gt;&gt; argument types in functions declared for protocol conformance.<br>&gt;&gt;<br>&gt;&gt; An example:<br>&gt;&gt;<br>&gt;&gt; class Foo { }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; class Bar: Foo { }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; protocol FooDelegate {<br>&gt;&gt;<br>&gt;&gt;     func didPerformSomeAction(object: Foo)<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; class FooController: FooDelegate {<br>&gt;&gt;<br>&gt;&gt;     func didPerformSomeAction(var object: Foo) {<br>&gt;&gt;<br>&gt;&gt;         // I know that object must be a Bar instance<br>&gt;&gt;<br>&gt;&gt;         object = object as! Bar<br>&gt;&gt;<br>&gt;&gt;         // do something with object<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; class ProposedFooController: FooDelegate { // Type<br>&gt;&gt; &#39;ProposedFooController&#39; does not conform to protocol &#39;FooDelegate&#39;<br>&gt;&gt;<br>&gt;&gt;     func didPerformSomeAction(object: Bar) {<br>&gt;&gt;<br>&gt;&gt;         // do something with Bar instance<br>&gt;&gt;<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The glaring issue I see outright is how the runtime should fail when<br>&gt;&gt; `didPerformSomeAction` in `ProposedFooController` is called with a non-Bar<br>&gt;&gt; instance... But perhaps it /should/ fail outright because the programmer<br>&gt;&gt; has explicitly stated that the type should be Bar.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151216/9db61476/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
