<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>How to be DRY on ranges and closed ranges?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 16, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Oct 12 2016, Hooman Mehr &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Oct 12, 2016, at 3:21 AM, Jean-Denis Muys via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; But this is not very DRY.<br>&gt;&gt; <br>&gt;&gt; What would be a more idiomatic way?<br>&gt;&gt; <br>&gt;<br>&gt; The more idiomatic way is to look at API design in a new way. Note these points:<br>&gt;<br>&gt; 1. `Countable` variant is preferred when you want to deal with integer ranges as it more closely<br>&gt; matches the element type.<br>&gt; 2. Both countable range variants share a common protocol conformance already:<br>&gt; `RandomAccessCollection`<br>&gt; 3. Swift API design prefers member functions to free functions.<br>&gt;<br>&gt; Hence a more idiomatic (Swifty) API would probably be something like this:<br>&gt;<br>&gt; extension RandomAccessCollection {<br>&gt;<br>&gt;     func random() -&gt; Iterator.Element? {<br>&gt;<br>&gt;         guard count &gt; 0 else { return nil }<br>&gt;<br>&gt;         let offset = arc4random_uniform(numericCast(count))<br>&gt;<br>&gt;         let i = index(startIndex, offsetBy: numericCast(offset))<br>&gt;<br>&gt;         return self[i]<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; Using the above, both cases work and there is no repetition:<br>&gt;<br>&gt; (4..&lt;10).random()<br>&gt; (4...9).random()<br>&gt;<br>&gt;<br>&gt; It also makes a lot more possible: <br>&gt;<br>&gt; let people = [&quot;David&quot;, &quot;Chris&quot;, &quot;Joe&quot;, &quot;Jordan&quot;, &quot;Tony&quot;]<br>&gt; let winner = people.random()<br></p><p>Hey, that is pretty awesome!<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
