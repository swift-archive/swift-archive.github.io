<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>The value of enums</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  6, 2016 at 01:00:00pm</p></header><div class="content"><p>on Sun Nov 06 2016, Tino Heth &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; Enums are a fundamental part of Swift, so I guess they won&#39;t change<br>&gt; much — but I wonder if anyone shares my observations in real-life use…<br>&gt;<br>&gt; Afair, there are three different types of enums:<br>&gt; - Enums with raw values<br>&gt; - enums with associated objects<br>&gt; - Plain enums (no underlying value)<br>&gt;<br>&gt; I use the first type quite often (as a convenient way to create string<br>&gt; constants, or for serialization), but see no real value in plain enums<br>&gt; (they offer nothing over enums backed with a raw value).<br>&gt;<br>&gt; The second type is special:<br>&gt; It looks like a really cool concept, and and I started several designs<br>&gt; based on them — just to realize later that structs and classes are a<br>&gt; better fit.<br>&gt; My conclusion so far is that enums perform bad as soon as you want to<br>&gt; attach additional data or behavior; one or two computed properties are<br>&gt; ok, but those switch-statements quickly become a burden.<br>&gt; There are some options to work around this problem, but I guess I&#39;ll<br>&gt; just stay away from enums with associated objects by default (with the<br>&gt; exception of error-types — imho those can be modeled quite nicely).<br>&gt;<br>&gt; So, that&#39;s my current perception, and I&#39;m curious if others had<br>&gt; similar experiences — or, even more interesting, completely different<br>&gt; observations and elegant solutions based on enums.<br></p><p>I have personally always found that exuberant use of that kind of enum<br>results in ergonomics and readability difficulties.  There are several<br>things we have thought of that could potentially improve the situation,<br>most notably exposing each case as an optional property.  I&#39;d also<br>really like to see switch-expressions (as opposed to statements).  I&#39;m<br>not sure if that&#39;s really all we need in order to allow enums to reach<br>their potential, though.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>The value of enums</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>November  6, 2016 at 08:00:00pm</p></header><div class="content"><p>To the topic at hand, the project I’m currently working on has 2 enums,<br>both with String raw values. For comparison, it has 3 classes (a Formatter<br>subclass, the app delegate, and one more), 4 protocols, and 47 structs.<br></p><p>One of the enums exists to select among the handful of struct types which<br>conform to one of the protocols.<br></p><p><br></p><p>&gt; There are several things we have thought of that could potentially improve<br>&gt; the situation, most notably exposing each case as an optional property.<br></p><p><br>That would be very nice.<br></p><p><br>I&#39;d also really like to see switch-expressions (as opposed to statements).<br></p><p><br>Hmm, would a syntax like this be appropriate?<br></p><p>switch someValue -&gt; [String] {<br>    case .helloWorld: return [&quot;Hello&quot;, &quot;world&quot;]<br>    default: return []<br>}<br></p><p>That way the existing switch statement could remain as-is, and the familiar<br>function syntax would be used to specify the return type for switch<br>expressions. The “return” keyword could even be elided for single-line<br>cases as well, much like closures.<br></p><p>…oh, I just realized we’re on -users not -evolution here. Perhaps I’ll<br>bring this up next time switch expressions are proposed.<br></p><p>Nevin<br></p><p><br>On Sun, Nov 6, 2016 at 4:31 PM, Dave Abrahams via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Nov 06 2016, Tino Heth &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Enums are a fundamental part of Swift, so I guess they won&#39;t change<br>&gt; &gt; much — but I wonder if anyone shares my observations in real-life use…<br>&gt; &gt;<br>&gt; &gt; Afair, there are three different types of enums:<br>&gt; &gt; - Enums with raw values<br>&gt; &gt; - enums with associated objects<br>&gt; &gt; - Plain enums (no underlying value)<br>&gt; &gt;<br>&gt; &gt; I use the first type quite often (as a convenient way to create string<br>&gt; &gt; constants, or for serialization), but see no real value in plain enums<br>&gt; &gt; (they offer nothing over enums backed with a raw value).<br>&gt; &gt;<br>&gt; &gt; The second type is special:<br>&gt; &gt; It looks like a really cool concept, and and I started several designs<br>&gt; &gt; based on them — just to realize later that structs and classes are a<br>&gt; &gt; better fit.<br>&gt; &gt; My conclusion so far is that enums perform bad as soon as you want to<br>&gt; &gt; attach additional data or behavior; one or two computed properties are<br>&gt; &gt; ok, but those switch-statements quickly become a burden.<br>&gt; &gt; There are some options to work around this problem, but I guess I&#39;ll<br>&gt; &gt; just stay away from enums with associated objects by default (with the<br>&gt; &gt; exception of error-types — imho those can be modeled quite nicely).<br>&gt; &gt;<br>&gt; &gt; So, that&#39;s my current perception, and I&#39;m curious if others had<br>&gt; &gt; similar experiences — or, even more interesting, completely different<br>&gt; &gt; observations and elegant solutions based on enums.<br>&gt;<br>&gt; I have personally always found that exuberant use of that kind of enum<br>&gt; results in ergonomics and readability difficulties.  There are several<br>&gt; things we have thought of that could potentially improve the situation,<br>&gt; most notably exposing each case as an optional property.  I&#39;d also<br>&gt; really like to see switch-expressions (as opposed to statements).  I&#39;m<br>&gt; not sure if that&#39;s really all we need in order to allow enums to reach<br>&gt; their potential, though.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161106/cfac38ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>The value of enums</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  6, 2016 at 06:00:00pm</p></header><div class="content"><p>on Sun Nov 06 2016, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky-AT-gmail.com&gt; wrote:<br></p><p>&gt; …oh, I just realized we’re on -users not -evolution here. Perhaps I’ll<br>&gt; bring this up next time switch expressions are proposed.<br></p><p>Thanks ;-)<br></p><p>-- <br>-Dave<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>The value of enums</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>November  7, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; …oh, I just realized we’re on -users not -evolution here.<br>:-) Core found an effective way to limit the distractions from evolution:<br>Over there, this would have been a proposal to remove enums [with associated objects] in favor of union types ;-)<br></p><p>Tino<br></p><p>Joking aside, imho it&#39;s a pity that all those fundamental discussions from the early times can&#39;t be published — I bet ideas like &quot;everything is an expression&quot; have been brought up, and the reason for their rejection could really help understanding the big picture of the language.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161107/471df045/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
