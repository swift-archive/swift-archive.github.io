<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Add a stride(by:) method to ClosedRange</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 26, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri May 20 2016, Tim Vermeulen &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;     * that there was no one obvious behavior with a negative stride size (range<br>&gt;     operators require a smaller number on the lhs and a bigger one on the rhs,<br>&gt;     so you can&#39;t write `9...0`, but stride(from:to:by) can start from a bigger<br>&gt;     number to a smaller one, so there is a difference here that went through a<br>&gt;     lot of bikeshedding; there were several important people that made it clear<br>&gt;     that Range would not be modified for this use case, so it&#39;s stride semantics<br>&gt;     that must change)<br>&gt;     * that for floating point ranges, removing stride(from:to:by:) in favor of<br>&gt;     striding(by:) would eliminate the possibility of expressing certain strides<br>&gt;     with open lower bound and negative stride size, partially motivating new<br>&gt;     range operators that are a whole nother issue<br>&gt;<br>&gt; These are all great reasons why stride(from:to:by:) shouldn’t be removed, that I<br>&gt; had not thought of. But isn’t this a good reason to let both function co-exist?<br></p><p>I am very fond of the idea of getting rid of the somewhat ugly and<br>potentially misinterpretable to:/through: labels by using the semantics<br>already embedded in ranges (in fact, I proposed it originally).<br>However, I appreciate the reasons we might need the other forms and am<br>wary of creating a design with duplicated functionality that doesn&#39;t<br>appear to have coherence.  My conclusion is that we don&#39;t quite yet know<br>what the right design is.<br></p><p>&gt; For example: (0..&lt;10).striding(by: 3) and stride(from: 0, to: 10, by: 3) look<br>&gt; quite similar. However, in case we already have a range variable,<br>&gt; someRange.striding(by: 3) is obviously a lot more readable than stride(from:<br>&gt; someRange.startIndex, to: someRange.endIndex, by: 3). The reason I’m giving this<br>&gt; example is that the two functions can have quite different use cases, so I’m<br>&gt; unsure why one of them must be removed in favor of the other.<br></p><p>We don&#39;t normally add duplicated functionality as syntactic sugar unless<br>the use case for it is *extremely* common and compelling.  I&#39;m not sure<br>this rises to that level.  If stride(from:to:by:) is more general than<br>Range.striding(by:), I am hard pressed to justify adding the latter<br>form, as much as I love it.<br></p><p>&gt;<br>&gt;<br>&gt;     * that stride(by:), or rather striding(by:), was too verbose<br>&gt;<br>&gt; striding(by:) doesn’t have the from, to, though parameter labels that the Swift<br>&gt; 3 stride functions have, so to me this new method seems less verbose than the<br>&gt; others. Maybe it depends on how you look at it. “to” and “through” basically<br>&gt; refer to the “.” and “&lt;“ tails of the “…” and “..&lt;“ operators respectively, so<br>&gt; that’s mainly why I think striding(by:) would be a cleaner and more intuitive<br>&gt; way to stride through a sequence.<br>&gt;<br>&gt;     On 21 May 2016, at 00:07, Xiaodi Wu<br>&gt;     &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;     We&#39;ve had this discussion on a few occasions. Unfortunately, copying links<br>&gt;     at the moment is a little tough, but I hope to do so at a later time (or<br>&gt;     others can jump in here).<br>&gt;<br>&gt;     The gist of the previous discussion centered on a few objections:<br>&gt;<br>&gt;     * that stride(by:), or rather striding(by:), was too verbose<br>&gt;     * that both stride(from:to:by:) and Range.striding(by:) should not co-exist,<br>&gt;     so one would have to be removed in favor of the other<br>&gt;     * that there was no one obvious behavior with a negative stride size (range<br>&gt;     operators require a smaller number on the lhs and a bigger one on the rhs,<br>&gt;     so you can&#39;t write `9...0`, but stride(from:to:by) can start from a bigger<br>&gt;     number to a smaller one, so there is a difference here that went through a<br>&gt;     lot of bikeshedding; there were several important people that made it clear<br>&gt;     that Range would not be modified for this use case, so it&#39;s stride semantics<br>&gt;     that must change)<br>&gt;     * that for floating point ranges, removing stride(from:to:by:) in favor of<br>&gt;     striding(by:) would eliminate the possibility of expressing certain strides<br>&gt;     with open lower bound and negative stride size, partially motivating new<br>&gt;     range operators that are a whole nother issue<br>&gt;<br>&gt;     On Fri, May 20, 2016 at 4:19 PM, Tim Vermeulen via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     If ClosedRange (Range in Swift 2.2.1) has a stride(by:) method, we can<br>&gt;         change<br>&gt;<br>&gt;         stride(from: 0, to: 10, by: 3)<br>&gt;<br>&gt;         to<br>&gt;<br>&gt;         (0..&lt;10).stride(by: 3)<br>&gt;<br>&gt;         and similarly, we can change<br>&gt;<br>&gt;         stride(from: 0, through: 10, by: 3)<br>&gt;<br>&gt;         to<br>&gt;<br>&gt;         (0…10).stride(by: 3)<br>&gt;<br>&gt;         As we can see, this syntax can replace both stride(from:to:by:) and<br>&gt;         stride(from:through:by:), and in my opinion it is more in line with the<br>&gt;         rest of Swift 3, similar to how Range.init(start:end:) will be<br>&gt;         deprecated in Swift 3 in favor of the … and ..&lt; operators.<br>&gt;<br>&gt;         I’m not sure if this proposed stride(by:) method could replace all uses<br>&gt;         of stride(from:to:by:) and stride(from:through:by:), but I think that at<br>&gt;         the very least it would be a nice addition to the standard library.<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
