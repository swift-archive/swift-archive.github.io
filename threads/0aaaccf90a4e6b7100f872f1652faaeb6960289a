<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 18, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi again Charles,<br></p><p>I&#39;ve been thinking about this response and I realized it might have left<br>you feeling that you hadn&#39;t been heard.  If that&#39;s the case I apologize,<br>and ask that you try again to make your point.  I *think* I understood<br>you, but of course it&#39;s impossible to be sure.<br></p><p>on Thu Feb 18 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; on Thu Feb 18 2016, Charles Kissinger &lt;crk-AT-akkyra.com&gt; wrote:<br>&gt;<br>&gt;&gt; I’m not arguing the importance of this objection, just that I<br>&gt;&gt; understand it and think it’s valid.<br>&gt;<br>&gt; Though “ing” is a relatively uncommon usage, when used as<br>&gt; prescribed IMO it reads pretty naturally, and is a good match for<br>&gt; some important criteria:<br>&gt;<br>&gt; * it associates mutating and non-mutating forms<br>&gt; * it&#39;s a syntactic match for method invocation, with the receiver on the<br>&gt;   left<br>&gt; * it preserves “fluency,” making code “read like English”<br>&gt;<br>&gt; If you have better ideas for how to satisfy these criteria, I&#39;d be happy<br>&gt; to hear them.<br>&gt;<br>&gt; We could debate the value of fluency in APIs, but I&#39;d like to point out<br>&gt; two things:<br></p><p>or three.<br></p><p>&gt;<br>&gt; 1. This API guidelines and renaming effort skewers many heretofore<br>&gt;    sacred cows, which has been incredibly difficult to achieve<br>&gt;    politically.  A year ago, the idea that we would ever apply “omit<br>&gt;    needless words” to Cocoa was unthinkable.  IMO we&#39;ve targeted the<br>&gt;    cows that do definitive damage.<br>&gt;<br>&gt; 2. Fluency is itself deeply valued by many in our community, and has<br>&gt;    influenced the design of core Swift at a fundamental level<br>&gt;    (e.g. argument labels that are mandatory at the call site).<br>&gt;<br>&gt; 3. Properly applied (thus, no fair bringing up “unioning”), fluency does<br>&gt;    no damage and in many cases improves clarity.  Connecting words like<br>&gt;    prepositions can make the difference in implied meaning,<br>&gt;    e.g. x.update(y) vs x.update(using: y).<br>&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>API Guidelines Update</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 18, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Feb 18, 2016, at 4:30 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi again Charles,<br>&gt; <br>&gt; I&#39;ve been thinking about this response and I realized it might have left<br>&gt; you feeling that you hadn&#39;t been heard.  If that&#39;s the case I apologize,<br>&gt; and ask that you try again to make your point.  I *think* I understood<br>&gt; you, but of course it&#39;s impossible to be sure.<br></p><p>Hi Dave,<br></p><p>The only motivation for my post was that I thought the discussion around “-ing” method names had gotten complex and somewhat contentious, and it seemed like no one had successfully, succinctly communicated the reason for the unease some of us have with those names.<br></p><p>I don’t think I succeeded any better than anyone else, but in retrospect, there really isn’t any value in continuing to argue the merits unless someone can suggest something better. (Which I can’t. :-))<br></p><p>The fact that this one issue is the only one that anybody seems to have any remaining complaints about has to be a very good sign. I think those of us on the outside do tend to forget that there has been much sacred cow slaughtering and other mayhem required to get to this point. :-)<br></p><p>—CK<br></p><p>P.S. And I cheerfully accept some mockery regarding the choices in my own personal “API guidelines”, I’ll admit that some of my opinions about common practice in object oriented programming, and the entire OO paradigm itself, are not mainstream.<br></p><p>&gt; on Thu Feb 18 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; on Thu Feb 18 2016, Charles Kissinger &lt;crk-AT-akkyra.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I’m not arguing the importance of this objection, just that I<br>&gt;&gt;&gt; understand it and think it’s valid.<br>&gt;&gt; <br>&gt;&gt; Though “ing” is a relatively uncommon usage, when used as<br>&gt;&gt; prescribed IMO it reads pretty naturally, and is a good match for<br>&gt;&gt; some important criteria:<br>&gt;&gt; <br>&gt;&gt; * it associates mutating and non-mutating forms<br>&gt;&gt; * it&#39;s a syntactic match for method invocation, with the receiver on the<br>&gt;&gt;  left<br>&gt;&gt; * it preserves “fluency,” making code “read like English”<br>&gt;&gt; <br>&gt;&gt; If you have better ideas for how to satisfy these criteria, I&#39;d be happy<br>&gt;&gt; to hear them.<br>&gt;&gt; <br>&gt;&gt; We could debate the value of fluency in APIs, but I&#39;d like to point out<br>&gt;&gt; two things:<br>&gt; <br>&gt; or three.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; 1. This API guidelines and renaming effort skewers many heretofore<br>&gt;&gt;   sacred cows, which has been incredibly difficult to achieve<br>&gt;&gt;   politically.  A year ago, the idea that we would ever apply “omit<br>&gt;&gt;   needless words” to Cocoa was unthinkable.  IMO we&#39;ve targeted the<br>&gt;&gt;   cows that do definitive damage.<br>&gt;&gt; <br>&gt;&gt; 2. Fluency is itself deeply valued by many in our community, and has<br>&gt;&gt;   influenced the design of core Swift at a fundamental level<br>&gt;&gt;   (e.g. argument labels that are mandatory at the call site).<br>&gt;&gt; <br>&gt;&gt; 3. Properly applied (thus, no fair bringing up “unioning”), fluency does<br>&gt;&gt;   no damage and in many cases improves clarity.  Connecting words like<br>&gt;&gt;   prepositions can make the difference in implied meaning,<br>&gt;&gt;   e.g. x.update(y) vs x.update(using: y).<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
