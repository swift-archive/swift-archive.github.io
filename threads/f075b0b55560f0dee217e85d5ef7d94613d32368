<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br></p><p>However, I think a colon is more suitable, since it implies the possibility to set the value.<br></p><p><br>In the future, if we add throwing getters/ setters:<br></p><p>subscript(_ position: Int) -&gt; Element {<br>    get {<br>        return …<br>   }<br>   throwing set {<br>        …<br>    }<br>}<br></p><p>Should this require ‘throws -&gt; Element’? Using a colon also removes this potentially confusing case.<br></p><p><br>Thoughts?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 10, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt; <br>&gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br></p><p>Can you show us an example of the current syntax and your proposed replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 12:00:00am</p></header><div class="content"><p>Currently, the signature is:<br>subscript(_ example: Int) -&gt; Element {<br>    get { … }<br>    set { … }<br>}<br></p><p>The alternative, using a colon, would be:<br>subscript(_ example: Int) : Element {<br>    get { … }<br>    set { … }<br>}<br></p><p>Sorry if that wasn&#39;t clear.<br></p><p>This would be to better reflect the property-like nature of access.<br></p><p>From James F<br></p><p>On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt; <br>&gt;&gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt; <br>&gt; Can you show us an example of the current syntax and your proposed replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>July 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Good point. A subscript basically a parameterized property, not a function.<br>I&#39;m in favor.<br></p><p>On Mon, Jul 11, 2016 at 9:18 AM, James Froggatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, the signature is:<br>&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt; The alternative, using a colon, would be:<br>&gt; subscript(_ example: Int) : Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt; Sorry if that wasn&#39;t clear.<br>&gt;<br>&gt; This would be to better reflect the property-like nature of access.<br>&gt;<br>&gt; From James F<br>&gt;<br>&gt; On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Subscripts are a hybrid of properties and functions, since they have a<br>&gt; parameter list, as well as getters and setters, so use of either symbol<br>&gt; will be unusual in this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, I think a colon is more suitable, since it implies the<br>&gt; possibility to set the value.<br>&gt; &gt;<br>&gt; &gt; Can you show us an example of the current syntax and your proposed<br>&gt; replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/abdb2c13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 11, 2016 at 05:00:00am</p></header><div class="content"><p>+1 as well. It always feels a little weird to be writing a setter inside<br>something that says it returns what should be the argument.<br>On Mon, Jul 11, 2016 at 00:05 Patrick Pijnappel via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Good point. A subscript basically a parameterized property, not a<br>&gt; function. I&#39;m in favor.<br>&gt;<br>&gt; On Mon, Jul 11, 2016 at 9:18 AM, James Froggatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Currently, the signature is:<br>&gt;&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;&gt;     get { … }<br>&gt;&gt;     set { … }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The alternative, using a colon, would be:<br>&gt;&gt; subscript(_ example: Int) : Element {<br>&gt;&gt;     get { … }<br>&gt;&gt;     set { … }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Sorry if that wasn&#39;t clear.<br>&gt;&gt;<br>&gt;&gt; This would be to better reflect the property-like nature of access.<br>&gt;&gt;<br>&gt;&gt; From James F<br>&gt;&gt;<br>&gt;&gt; On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Subscripts are a hybrid of properties and functions, since they have a<br>&gt;&gt; parameter list, as well as getters and setters, so use of either symbol<br>&gt;&gt; will be unusual in this case.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, I think a colon is more suitable, since it implies the<br>&gt;&gt; possibility to set the value.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Can you show us an example of the current syntax and your proposed<br>&gt;&gt; replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt; &gt; Architechies<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/0fb91b8c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 11, 2016 at 10:00:00am</p></header><div class="content"><p>FWIW, we actually tried this at one point with exactly this rationale, but pulled it back out.  In short, subscript decls are half way between func decls and var decls.  Reasonable arguments can be made to align with either of them, but arrow “looks” better.<br></p><p>The problem which caused us to pull back and stick with arrow is that the return value is very primary to the functioning of the subscript, and colon reduced the visual weight of it, making it harder to pull out of code.  The secondary issue is that the structure of a subscript definition is very strongly aligned with that of func decls, and changing this reduced that.<br></p><p>-Chris<br></p><p>&gt; On Jul 10, 2016, at 10:04 PM, Patrick Pijnappel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Good point. A subscript basically a parameterized property, not a function. I&#39;m in favor.<br>&gt; <br>&gt; On Mon, Jul 11, 2016 at 9:18 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Currently, the signature is:<br>&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt; <br>&gt; The alternative, using a colon, would be:<br>&gt; subscript(_ example: Int) : Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt; <br>&gt; Sorry if that wasn&#39;t clear.<br>&gt; <br>&gt; This would be to better reflect the property-like nature of access.<br>&gt; <br>&gt; From James F<br>&gt; <br>&gt; On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt; <br>&gt; &gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt; &gt;<br>&gt; &gt; Can you show us an example of the current syntax and your proposed replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/74ef08b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Thanks for letting me know this has been tried before, I&#39;m actually in the process of drafting the proposal now.<br></p><p><br>I agree about the issue of the colon&#39;s visual weight, it&#39;s not ideal. On the other hand, I still find myself doing a mental double-take when reading ‘-&gt;’ in subscript declarations.<br></p><p><br>For subscripts, I think it&#39;s less a matter of ‘what existing category do we put them in?’, so much as it is about ‘what aspects do they borrow?’, and ‘how can we keep syntax consistent?’. <br></p><p>They borrow parameter lists, borrowing syntax from functions.<br>They borrow read-write access, which I feel should in turn borrow syntax from properties.<br></p><p><br>If we did want to align subscripts with function declarations, then we would be deciding on a new syntax for functions which allows get-set semantics, such as the following:<br></p><p>//subscript<br>subscript(_ position: Int) inout -&gt; Element { get { … } set { … } }<br></p><p>//equivalent function<br>func item(at position: Int) inout -&gt; Element { get { … } set { … } }<br></p><p>This would align them with functions better than the current syntax, by preserving the meaning of the  ‘-&gt;’ to match functions.<br></p><p>But it&#39;s worth pointing out that even read-only subscripts can&#39;t throw - the similarity to functions is only superficial, and largely a result of the current syntax. These are very much properties with parameters.<br></p><p><br>I cannot argue with an internal trial, and I think that&#39;s a bit of a flaw of this mailing list system - many people making these proposals will not see these changes until they are out in the public. Certainly the proposal to remove argument labels could have benefitted from this kind of trial.<br></p><p>I&#39;ll continue the draft, to get some more feedback, but I&#39;ll be sure to point out the readability issue.<br></p><p><br></p><p>&gt; On 11 Jul 2016, at 18:45, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; FWIW, we actually tried this at one point with exactly this rationale, but pulled it back out.  In short, subscript decls are half way between func decls and var decls.  Reasonable arguments can be made to align with either of them, but arrow “looks” better.<br>&gt; <br>&gt; The problem which caused us to pull back and stick with arrow is that the return value is very primary to the functioning of the subscript, and colon reduced the visual weight of it, making it harder to pull out of code.  The secondary issue is that the structure of a subscript definition is very strongly aligned with that of func decls, and changing this reduced that.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 10:04 PM, Patrick Pijnappel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Good point. A subscript basically a parameterized property, not a function. I&#39;m in favor.<br>&gt;&gt; <br>&gt;&gt; On Mon, Jul 11, 2016 at 9:18 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Currently, the signature is:<br>&gt;&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;&gt;     get { … }<br>&gt;&gt;     set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The alternative, using a colon, would be:<br>&gt;&gt; subscript(_ example: Int) : Element {<br>&gt;&gt;     get { … }<br>&gt;&gt;     set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Sorry if that wasn&#39;t clear.<br>&gt;&gt; <br>&gt;&gt; This would be to better reflect the property-like nature of access.<br>&gt;&gt; <br>&gt;&gt; From James F<br>&gt;&gt; <br>&gt;&gt; On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com &lt;mailto:brent at architechies.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Subscripts are a hybrid of properties and functions, since they have a parameter list, as well as getters and setters, so use of either symbol will be unusual in this case.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; However, I think a colon is more suitable, since it implies the possibility to set the value.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Can you show us an example of the current syntax and your proposed replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; --<br>&gt;&gt; &gt; Brent Royal-Gordon<br>&gt;&gt; &gt; Architechies<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/eaef51e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 11, 2016 at 01:00:00pm</p></header><div class="content"><p>On Jul 11, 2016, at 1:21 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for letting me know this has been tried before, I&#39;m actually in the process of drafting the proposal now.<br></p><p>I&#39;d hesitate to try to do something off-beat and &quot;blend&quot; them but it amuses me no end that the :-&gt; operator looks so very happy.<br></p><p>subscript(_ position: Int) inout :-&gt; Element { get { … } set { … } }<br></p><p>Nonetheless, I do want to point out that unlike properties, subscripts provide a mapping between a domain and a range so it feels more natural to me to use -&gt; than :.<br></p><p>-- E<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/a978a2f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Interesting way to think of the ‘-&gt;’ operator.<br></p><p>Perhaps a &lt;-&gt; operator could represent this two-way mapping?<br></p><p>&gt; On 11 Jul 2016, at 20:29, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; On Jul 11, 2016, at 1:21 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for letting me know this has been tried before, I&#39;m actually in the process of drafting the proposal now.<br>&gt; <br>&gt; I&#39;d hesitate to try to do something off-beat and &quot;blend&quot; them but it amuses me no end that the :-&gt; operator looks so very happy.<br>&gt; <br>&gt; subscript(_ position: Int) inout :-&gt; Element { get { … } set { … } }<br>&gt; <br>&gt; Nonetheless, I do want to point out that unlike properties, subscripts provide a mapping between a domain and a range so it feels more natural to me to use -&gt; than :.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160711/ac66ce33/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>July 11, 2016 at 02:00:00pm</p></header><div class="content"><p>The only thing that really bugs me about subscript is that you declare it with (), but use it with []. I’ve never found the return indicator to be confusing here. I get the argument in favor of property-ness, though.<br></p><p>Wouldn’t mind considering using square brackets instead, but perhaps that has already been tried and rejected at some point:<br></p><p>subscript[_ position: Int] -&gt; {}<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Jul 11, 2016, at 2:32 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Interesting way to think of the ‘-&gt;’ operator.<br>&gt; <br>&gt; Perhaps a &lt;-&gt; operator could represent this two-way mapping?<br>&gt; <br>&gt;&gt; On 11 Jul 2016, at 20:29, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Jul 11, 2016, at 1:21 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for letting me know this has been tried before, I&#39;m actually in the process of drafting the proposal now.<br>&gt;&gt; <br>&gt;&gt; I&#39;d hesitate to try to do something off-beat and &quot;blend&quot; them but it amuses me no end that the :-&gt; operator looks so very happy.<br>&gt;&gt; <br>&gt;&gt; subscript(_ position: Int) inout :-&gt; Element { get { … } set { … } }<br>&gt;&gt; <br>&gt;&gt; Nonetheless, I do want to point out that unlike properties, subscripts provide a mapping between a domain and a range so it feels more natural to me to use -&gt; than :.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 08:00:00pm</p></header><div class="content"><p>This is an interesting idea, but probably deserves its own proposal.<br></p><p>Personally, I like the reuse of parameter list syntax, and think that, if anything, subscripts should be updated at the call-site to use round brackets. There shouldn&#39;t be any ambiguity problems, though readability could drop substantially… Probably not a good idea.<br></p><p><br>&gt; On 11 Jul 2016, at 20:38, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; The only thing that really bugs me about subscript is that you declare it with (), but use it with []. I’ve never found the return indicator to be confusing here. I get the argument in favor of property-ness, though.<br>&gt; <br>&gt; Wouldn’t mind considering using square brackets instead, but perhaps that has already been tried and rejected at some point:<br>&gt; <br>&gt; subscript[_ position: Int] -&gt; {}<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 2:32 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Interesting way to think of the ‘-&gt;’ operator.<br>&gt;&gt; <br>&gt;&gt; Perhaps a &lt;-&gt; operator could represent this two-way mapping?<br>&gt;&gt; <br>&gt;&gt;&gt; On 11 Jul 2016, at 20:29, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 11, 2016, at 1:21 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks for letting me know this has been tried before, I&#39;m actually in the process of drafting the proposal now.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d hesitate to try to do something off-beat and &quot;blend&quot; them but it amuses me no end that the :-&gt; operator looks so very happy.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; subscript(_ position: Int) inout :-&gt; Element { get { … } set { … } }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nonetheless, I do want to point out that unlike properties, subscripts provide a mapping between a domain and a range so it feels more natural to me to use -&gt; than :.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 10, 2016 at 10:00:00pm</p></header><div class="content"><p>+1, seems right to me. The original email wasn&#39;t clear to me, but this<br>example is.<br></p><p>FWIW, as a user of the language I&#39;d hope that throwing subscript<br>getters/setters would be written &quot;set throws { ... }&quot; and/or &quot;set(newValue)<br>throws { ... }&quot; rather than &quot;throwing set { ... }&quot;, for consistency with<br>function bodies.<br></p><p>...and now that I&#39;m thinking about it, I&#39;m almost tempted to recommend<br>&quot;subscript[_ example: Int]: Element&quot;. Is that too crazy?<br></p><p>Jacob<br></p><p>On Sun, Jul 10, 2016 at 4:18 PM, James Froggatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, the signature is:<br>&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt; The alternative, using a colon, would be:<br>&gt; subscript(_ example: Int) : Element {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt; Sorry if that wasn&#39;t clear.<br>&gt;<br>&gt; This would be to better reflect the property-like nature of access.<br>&gt;<br>&gt; From James F<br>&gt;<br>&gt; On 10 Jul 2016, at 23:57, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Jul 9, 2016, at 11:48 AM, James Froggatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Subscripts are a hybrid of properties and functions, since they have a<br>&gt; parameter list, as well as getters and setters, so use of either symbol<br>&gt; will be unusual in this case.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; However, I think a colon is more suitable, since it implies the<br>&gt; possibility to set the value.<br>&gt; &gt;<br>&gt; &gt; Can you show us an example of the current syntax and your proposed<br>&gt; replacement? I&#39;m not sure what you actually mean by &quot;use colons&quot;.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/2515c2f3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July 10, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jul 10, 2016, at 5:18 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently, the signature is:<br>&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; The alternative, using a colon, would be:<br>&gt; subscript(_ example: Int) : Element {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; Sorry if that wasn&#39;t clear.<br>&gt; <br>&gt; This would be to better reflect the property-like nature of access.<br></p><p>It all depends on whether a subscript is more function-y or property-y, and don&#39;t forget subscripts can take parameters and labels.<br></p><p>let y = myArrayOfStrings[safeIndex: 2, fallback: &quot;foo&quot;]<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 10, 2016 at 10:00:00pm</p></header><div class="content"><p>On Sun, Jul 10, 2016 at 10:42 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; On Jul 10, 2016, at 5:18 PM, James Froggatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Currently, the signature is:<br>&gt; &gt; subscript(_ example: Int) -&gt; Element {<br>&gt; &gt;    get { … }<br>&gt; &gt;    set { … }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; The alternative, using a colon, would be:<br>&gt; &gt; subscript(_ example: Int) : Element {<br>&gt; &gt;    get { … }<br>&gt; &gt;    set { … }<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Sorry if that wasn&#39;t clear.<br>&gt; &gt;<br>&gt; &gt; This would be to better reflect the property-like nature of access.<br>&gt;<br>&gt; It all depends on whether a subscript is more function-y or property-y,<br>&gt; and don&#39;t forget subscripts can take parameters and labels.<br>&gt;<br>&gt; let y = myArrayOfStrings[safeIndex: 2, fallback: &quot;foo&quot;]<br>&gt;<br>&gt; -- E<br></p><p><br>But isn&#39;t it the getter and setter which are really function-y? That&#39;s why<br>you can write &quot;set(myVariableName) { ... }&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160710/6e527f97/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 09:00:00am</p></header><div class="content"><p>If I had to choose what subscripts are most like, I&#39;d have to say properties. Subscripts don&#39;t support partial application, and do support setters. I agree with Patrick in that subscripts are more like a ‘parameterized property’.<br></p><p>If everyone&#39;s in favour, I&#39;d like to get a proposal submitted for this. I can have a go when I have some time, though I&#39;m not yet familiar with the process. If anyone with experience wants to take this on, that&#39;d be a great help. I think the change in question is pretty straightforward.<br></p><p><br>From James F<br></p><p>On 11 Jul 2016, at 06:42, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jul 10, 2016, at 5:18 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Currently, the signature is:<br>&gt;&gt; subscript(_ example: Int) -&gt; Element {<br>&gt;&gt;   get { … }<br>&gt;&gt;   set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; The alternative, using a colon, would be:<br>&gt;&gt; subscript(_ example: Int) : Element {<br>&gt;&gt;   get { … }<br>&gt;&gt;   set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Sorry if that wasn&#39;t clear.<br>&gt;&gt; <br>&gt;&gt; This would be to better reflect the property-like nature of access.<br>&gt; <br>&gt; It all depends on whether a subscript is more function-y or property-y, and don&#39;t forget subscripts can take parameters and labels.<br>&gt; <br>&gt; let y = myArrayOfStrings[safeIndex: 2, fallback: &quot;foo&quot;]<br>&gt; <br>&gt; -- E<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;ve written up a draft proposal, suggestions or improvements are welcome, especially relating to the title.<br></p><p><br></p><p>__Change subscript declarations to use a colon__<br></p><p>--Introduction--<br></p><p>Currently, subscript declarations follow the following model:<br></p><p>subscript(externalName internalName: ParamType) -&gt; ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p>The initial keyword ‘subscript’ is followed by a parameter list, followed by an arrow to the accessed type.<br></p><p><br>--Motivation--<br></p><p>The arrow, borrowed from function syntax, is very much out of place in this context, and so can act as a mental stumbling block.<br></p><p>Subscripts act like parameterised property accessors. This means, like a property, they can appear on the left hand side of an assignment, and values accessed through subscripts can be mutated in-place. The colon has precedent in declaring this kind of construct, so it makes sense to reuse it here.<br></p><p>--Proposed solution--<br></p><p>A simple replacement of ‘-&gt;’ with ‘:’ in the declaration syntax.<br></p><p>--Detailed design--<br></p><p>This would change the above example to look like the following:<br></p><p>subscript(externalName internalName: ParamType) : ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p><br>--Impact on existing code--<br></p><p>Existing code would have to update subscripts to use a colon. This can be automated in a conversion to Swift 3 syntax.<br></p><p><br>--Potential hazards--<br></p><p>Use of colons could have a negative effect on readability. This largely depends on coding style, which can match either of the following:<br></p><p>subscript(_ example: Type) : ElementType<br></p><p>subscript(_ example: Type): ElementType<br></p><p>This issue is most apparent in the latter example, which omits the leading space before the colon, as the colon blends into the closing bracket.<br></p><p>However, the real-world effect of this change is hard to predict, and subscript declarations are rare enough that the consequences of this change are very limited. In addition, the current ‘-&gt;‘ syntax can already act as a mental stumbling block.<br></p><p>--Alternatives Considered--<br></p><p>We could leave the syntax as it is, or use an alternative symbol, such as ‘:-&gt;’ or ‘&lt;-&gt;’.<br></p><p>We could also leave open the possibility of expanding function syntax with ‘inout -&gt;’.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;ve added one of my original points to the motivation section:<br></p><p>‘[The arrow] implies that subscripts have the full capabilities of functions, such as the ability to throw. If throwing functionality were to be added to accessors, it is likely the specific get/set accessor would be annotated. In this case, the effects on a subscript&#39;s ‘function signature’ could become a source of confusion.’<br></p><p><br>Also, removed the second ‘mental stumbling block’ line.<br></p><p><br>&gt; On 11 Jul 2016, at 21:01, James Froggatt &lt;james.froggatt at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I&#39;ve written up a draft proposal, suggestions or improvements are welcome, especially relating to the title.<br>&gt; <br>&gt; <br>&gt; <br>&gt; __Change subscript declarations to use a colon__<br>&gt; <br>&gt; --Introduction--<br>&gt; <br>&gt; Currently, subscript declarations follow the following model:<br>&gt; <br>&gt; subscript(externalName internalName: ParamType) -&gt; ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; The initial keyword ‘subscript’ is followed by a parameter list, followed by an arrow to the accessed type.<br>&gt; <br>&gt; <br>&gt; --Motivation--<br>&gt; <br>&gt; The arrow, borrowed from function syntax, is very much out of place in this context, and so can act as a mental stumbling block.<br>&gt; <br>&gt; Subscripts act like parameterised property accessors. This means, like a property, they can appear on the left hand side of an assignment, and values accessed through subscripts can be mutated in-place. The colon has precedent in declaring this kind of construct, so it makes sense to reuse it here.<br>&gt; <br>&gt; --Proposed solution--<br>&gt; <br>&gt; A simple replacement of ‘-&gt;’ with ‘:’ in the declaration syntax.<br>&gt; <br>&gt; --Detailed design--<br>&gt; <br>&gt; This would change the above example to look like the following:<br>&gt; <br>&gt; subscript(externalName internalName: ParamType) : ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; --Impact on existing code--<br>&gt; <br>&gt; Existing code would have to update subscripts to use a colon. This can be automated in a conversion to Swift 3 syntax.<br>&gt; <br>&gt; <br>&gt; --Potential hazards--<br>&gt; <br>&gt; Use of colons could have a negative effect on readability. This largely depends on coding style, which can match either of the following:<br>&gt; <br>&gt; subscript(_ example: Type) : ElementType<br>&gt; <br>&gt; subscript(_ example: Type): ElementType<br>&gt; <br>&gt; This issue is most apparent in the latter example, which omits the leading space before the colon, as the colon blends into the closing bracket.<br>&gt; <br>&gt; However, the real-world effect of this change is hard to predict, and subscript declarations are rare enough that the consequences of this change are very limited. In addition, the current ‘-&gt;‘ syntax can already act as a mental stumbling block.<br>&gt; <br>&gt; --Alternatives Considered--<br>&gt; <br>&gt; We could leave the syntax as it is, or use an alternative symbol, such as ‘:-&gt;’ or ‘&lt;-&gt;’.<br>&gt; <br>&gt; We could also leave open the possibility of expanding function syntax with ‘inout -&gt;’.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Change subscripts to use colons</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 12, 2016 at 11:00:00am</p></header><div class="content"><p>Submitted!<br></p><p>Pull request: https://github.com/apple/swift-evolution/pull/423 &lt;https://github.com/apple/swift-evolution/pull/423&gt;<br></p><p>Proposal doc: https://github.com/MutatingFunk/swift-evolution/blob/aa1fd53ec62b162f4cdefa9bd3845e13ac6f0d8d/proposals/NNNN-use-colons-for-subscript-type-declarations.md &lt;https://github.com/MutatingFunk/swift-evolution/blob/aa1fd53ec62b162f4cdefa9bd3845e13ac6f0d8d/proposals/NNNN-use-colons-for-subscript-type-declarations.md&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/f4634965/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
