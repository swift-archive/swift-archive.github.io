<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4e487a95498438cd044c2a9e936412a2?s=50"></div><header><strong>Swift compiler plugins</strong> from <string>Jorge Bernal</string> &lt;me at koke.me&gt;<p>May 11, 2016 at 08:00:00am</p></header><div class="content"><p>I’ve recently been looking into implementing a lint checker for Swift code in my project. I’ve used SwiftLint[1] so far, but I’d love to build something that integrates more closely with Xcode: only check what is being rebuild, provide Fix-Its,…<br></p><p>From what I’ve found there’s no equivalent of Clang Plugins[2] in the Swift compiler.<br></p><p>Is this something interesting or already planned?<br>Should it go through a swift-evolution proposal?<br></p><p>[1] https://github.com/realm/SwiftLint<br>[2] http://clang.llvm.org/docs/ClangPlugins.html<br></p><p>--<br>Jorge Bernal | jbernal at gmail.com | jorge at automattic.com<br>Mobile Engineer @ Automattic | http://automattic.com/<br></p><p>http://koke.me/ | http://jorgebernal.es/ | http://twitter.com/koke<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6520643611a05fd040d0abcee3c883c?s=50"></div><header><strong>Swift compiler plugins</strong> from <string>Ted Kremenek</string> &lt;kremenek at apple.com&gt;<p>May 13, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi Jorge,<br></p><p>I think being able to facilitate tooling that integrates more closely with the Swift compiler  would possibly be a great addition to the project, if it can be done well.  The main concerns I have are stability of the plugin interface and security.<br></p><p>For stability of the plugin interface,  Clang plugins access the raw compiler internals, which are subject to change.  Even with Clang — which is far more mature than the Swift compiler — the internals of the compiler are constantly changing and don&#39;t constitute a stable API to build plugins.  Is this the right interface to build a plugin ecosystem?  Maybe this is not something to care about, since Swift itself as a language continues to evolve and the underlying semantics modeled in the compiler will continue to evolve as well.  Plugins would need to adapt to those changes.<br></p><p>Security is also a concern.  Plugins having arbitrary access to the compiler internals makes them a possible security liability if they can alter the output of the compilation pipeline.  But in some contexts that might be OK, and others not so much.  I think being able to build great tools that help with developer productivity is important goal of the project; but I think it&#39;s more than just exposing compiler internals to plugins in the simple way done by Clang Plugins.<br></p><p>Note that with Swift we have the opportunity to do something we cannot as easily do with Clang, and that is change the build workflow to support calling out to external tools at critical points, with those external tools possibly being built on top of the Swift compiler libraries or SourceKit.  I recall years ago when I was working on the Clang Static Analyzer and we were bringing up integration of that technology in Xcode that it was so marvelous that we could actually extend the build system to call out to invoke the static analyzer, as other static analyzer tools for C had taken the approach of trying to retrofit themselves into the build model by using process interposition and other techniques.  By making the tooling support — in this case the Clang Static Analyzer integration — something handled first class during the build it defined away many problems.  Perhaps if we want to build a set of tools that naturally would be compiler plugins to the Swift compiler, we should look to see where they might naturally &quot;drop in&quot; to the build workflow.  Then various higher-level tooling, be it IDEs or CI systems, could depend on such tools being naturally run at specific stages of the build pipeline.  <br></p><p>None of this has a design, but there is a lot of great stuff that could be built here.  If you are interested in exploring this more, I think a natural point would be to suss out technology directions here first on swift-dev.  A swift-evolution proposal seems like a natural product of a lot of discussion and design, but I&#39;d expect the discussion for that kind of extension to Swift to probably happen more on swift-devs than swift-evolution since it is about the internals of the compiler and tools, rather than the language.<br></p><p>Cheers,<br>Ted<br></p><p>&gt; On May 10, 2016, at 11:32 PM, Jorge Bernal via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve recently been looking into implementing a lint checker for Swift code in my project. I’ve used SwiftLint[1] so far, but I’d love to build something that integrates more closely with Xcode: only check what is being rebuild, provide Fix-Its,…<br>&gt; <br>&gt; From what I’ve found there’s no equivalent of Clang Plugins[2] in the Swift compiler.<br>&gt; <br>&gt; Is this something interesting or already planned?<br>&gt; Should it go through a swift-evolution proposal?<br>&gt; <br>&gt; [1] https://github.com/realm/SwiftLint<br>&gt; [2] http://clang.llvm.org/docs/ClangPlugins.html<br>&gt; <br>&gt; --<br>&gt; Jorge Bernal | jbernal at gmail.com | jorge at automattic.com<br>&gt; Mobile Engineer @ Automattic | http://automattic.com/<br>&gt; <br>&gt; http://koke.me/ | http://jorgebernal.es/ | http://twitter.com/koke<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
