<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 19, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Dave<br></p><p>“true” ? am I going nuts ? :o) <br></p><p>var str = &quot;Hello, playground&quot;<br></p><p>print( str.hasPrefix(&quot;”)) // case 1 : false<br></p><p>print( str.hasSuffix(&quot;”)) // case 2 : false<br></p><p>print(&quot;&quot; == “a” )          // case 3 : false<br></p><p><br>Currently, all cases above evaluate to “false”<br>i think that is correct, because:<br></p><p>How can an empty string be a prefix or suffix value?<br>as there is no empty string present in a non-empty string. <br></p><p>Note that if case 1 and case 2 would evaluate to “true”, <br>it would conflict with case 3. <br></p><p>Can’t imagine that case 3 should in future also result in “true” <br></p><p>??<br></p><p><br>-----<br></p><p>Also I hope that changes to String functionality<br>for Swift 4 are not backward breaking changes<br>even the more for string handling, because Strings <br>are heavily used in most apps. <br></p><p>I am firmly convinced that all future releases of Swift <br>should compile Swift 3 and higher source files without<br>any changes 100 % flawlessly! This prevents early diminishing <br>of Swift’s popularity, especially with those building large<br>codebases using Swift. <br></p><p>I’ve started a thread about this a week ago,<br>however no one found this important enough to<br>share their opinions with me yet, or were too busy with<br>other subjects to do so.<br></p><p>Increasingly I have dreams, me<br>programming complete apps in Smalltalk<br>and then automagically generate <br>an macOS, tvOS or iOS runtime app of it.<br></p><p>(I have also dreams of this world becoming<br>a nice and peaceful placebut that is <br>beyond the context of this forum)    <br></p><p><br>Kind Regards<br>TedvG <br></p><p><br></p><p>www.speyer.de<br></p><p><br></p><p><br> <br></p><p>&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt; false when `a == b` is true.<br>&gt; <br>&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt; many things we plan to address.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/639ce73e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 19, 2016 at 07:00:00am</p></header><div class="content"><p>on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt; wrote:<br></p><p>&gt; Hi Dave<br>&gt;<br>&gt; “true” ? am I going nuts ? :o) <br>&gt;<br>&gt; var str = &quot;Hello, playground&quot;<br>&gt;<br>&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;<br>&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;<br>&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;<br>&gt; Currently, all cases above evaluate to “false”<br>&gt; i think that is correct, <br></p><p>I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>but others in the thread have laid out the reasons why it is not<br>mathematically correct behavior.  One other way of rephrasing it: to get<br>`false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>hasPrefix to check for the empty string, and the caller may well also<br>need special-case code to handle the fact that the result is not<br>mathematically consistent with other cases on the continuum.  Doing<br>things that way doesn&#39;t work in practice for real programs.<br></p><p>&gt; because:<br>&gt;<br>&gt; How can an empty string be a prefix or suffix value?<br>&gt; as there is no empty string present in a non-empty string. <br>&gt;<br>&gt; Note that if case 1 and case 2 would evaluate to “true”, <br>&gt; it would conflict with case 3. <br>&gt;<br>&gt; Can’t imagine that case 3 should in future also result in “true” <br>&gt;<br>&gt; ??<br>&gt;<br>&gt; -----<br>&gt;<br>&gt; Also I hope that changes to String functionality<br>&gt; for Swift 4 are not backward breaking changes<br>&gt; even the more for string handling, because Strings <br>&gt; are heavily used in most apps. <br>&gt;<br>&gt; I am firmly convinced that all future releases of Swift <br>&gt; should compile Swift 3 and higher source files without<br>&gt; any changes 100 % flawlessly! This prevents early diminishing <br>&gt; of Swift’s popularity, especially with those building large<br>&gt; codebases using Swift. <br>&gt;<br>&gt; I’ve started a thread about this a week ago,<br>&gt; however no one found this important enough to<br>&gt; share their opinions with me yet, or were too busy with<br>&gt; other subjects to do so.<br>&gt;<br>&gt; Increasingly I have dreams, me<br>&gt; programming complete apps in Smalltalk<br>&gt; and then automagically generate <br>&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;<br>&gt; (I have also dreams of this world becoming<br>&gt; a nice and peaceful placebut that is <br>&gt; beyond the context of this forum)    <br>&gt;<br>&gt; Kind Regards<br>&gt; TedvG <br>&gt;<br>&gt; www.speyer.de<br>&gt;<br>&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt; <br>&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt; many things we plan to address.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 19, 2016 at 06:00:00pm</p></header><div class="content"><p>ok, Dave<br></p><p><br></p><p>to me - strings being collections -, all I see is:<br>trying to find an empty string within another string: There are (at least) two ways of treating this:<br></p><p>1.  return “false”  seems to me logically correct, because<br>     there is never an empty string in another string, and an empty string cannot contain another empty string, right? <br>    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it? <br>    Do you know of cases that were problematic with this convention? <br>   <br></p><p>2  throw a runtime error when trying to do this:<br>    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br></p><p>some in-line questions below.<br></p><p>Kind Regards<br></p><p>Ted<br></p><p><br>On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; Hi Dave<br>&gt;&gt; <br>&gt;&gt; “true” ? am I going nuts ? :o) <br>&gt;&gt; <br>&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt; <br>&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt; <br>&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt; <br>&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt; <br>&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt; i think that is correct, <br>&gt; <br>&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt; but others in the thread have laid out the reasons why it is not<br>&gt; mathematically correct behavior.  <br>Where? I couldn’t find any. <br>&gt; One other way of rephrasing it: to get<br>&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt; hasPrefix to check for the empty string,<br>again, maybe it should throw a run-time error instead.<br></p><p><br>&gt; and the caller may well also<br>&gt; need special-case code to handle the fact that the result is not<br>&gt; mathematically consistent with other cases on the continuum.<br>In this context as “continuum” : <br>   are you referring to  “sets” or “collections” here?<br>what other cases? <br></p><p>&gt;  Doing<br>&gt; things that way doesn&#39;t work in practice for real programs.<br>please explain thank you, because I see no problems at<br>all with the current NSString-like evaluation…<br>I’d put an s.isEmpty() in front of it.<br>&gt; <br>&gt;&gt; because:<br>&gt;&gt; <br>&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt; as there is no empty string present in a non-empty string. <br>&gt;&gt; <br>&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”, <br>&gt;&gt; it would conflict with case 3. <br>&gt;&gt; <br>&gt;&gt; Can’t imagine that case 3 should in future also result in “true” <br>&gt;&gt; <br>&gt;&gt; ??<br>&gt;&gt; <br>&gt;&gt; -----<br>&gt;&gt; <br>&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt; even the more for string handling, because Strings <br>&gt;&gt; are heavily used in most apps. <br>&gt;&gt; <br>&gt;&gt; I am firmly convinced that all future releases of Swift <br>&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing <br>&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt; codebases using Swift. <br>&gt;&gt; <br>&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt; however no one found this important enough to<br>&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt; other subjects to do so.<br>&gt;&gt; <br>&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt; and then automagically generate <br>&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt; <br>&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt; a nice and peaceful placebut that is <br>&gt;&gt; beyond the context of this forum)    <br>&gt;&gt; <br>&gt;&gt; Kind Regards<br>&gt;&gt; TedvG <br>&gt;&gt; <br>&gt;&gt; www.speyer.de<br>&gt;&gt; <br>&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>July 19, 2016 at 04:00:00pm</p></header><div class="content"><p>On Tue, Jul 19, 2016 at 9:17 AM Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; ok, Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt; to me - strings being collections -, all I see is:<br>&gt; trying to find an empty string within another string: There are (at least)<br>&gt; two ways of treating this:<br>&gt;<br>&gt; 1.  return “false”  seems to me logically correct, because<br>&gt;      there is never an empty string in another string, and an empty string<br>&gt; cannot contain another empty string, right?<br>&gt;     This has worked very conveniently for NSString in ObjC for more than<br>&gt; 20 years, why change it?<br>&gt;     Do you know of cases that were problematic with this convention?<br>&gt;<br></p><p>Formally-ish speaking, the empty string is a zero-length string contained<br>at every valid index &quot;i&quot; between [startIndex, endIndex].<br></p><p>A very casual way of showing this (which I won&#39;t call a proof, because it&#39;s<br>not that formal) is that &quot;ab&quot; is the same string as &quot;a&quot; + &quot;&quot; + &quot;b&quot;, so &quot;&quot;<br>is a substring of &quot;ab&quot;. Likewise, &quot;a&quot; == &quot;&quot; + &quot;a&quot;, therefore &quot;a&quot; has &quot;&quot; has<br>a prefix, and the same argument can be made for the suffix.<br></p><p>Also, &quot;&quot; + &quot;&quot; == &quot;&quot;, so you have &quot;&quot; has the prefix and suffix of &quot;&quot;.<br></p><p>There&#39;s simply no reason to disallow this behavior. I&#39;ve actually gotten<br>bitten by the current wrong behavior in NSString in production before and<br>had to write a special case around it.<br></p><p><br></p><p>&gt;<br>&gt; 2  throw a runtime error when trying to do this:<br>&gt;     str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;<br>&gt; some in-line questions below.<br>&gt;<br>&gt; Kind Regards<br>&gt;<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Hi Dave<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; “true” ? am I going nuts ? :o)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Currently, all cases above evaluate to “false”<br>&gt; &gt;&gt; i think that is correct,<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt; &gt; but others in the thread have laid out the reasons why it is not<br>&gt; &gt; mathematically correct behavior.<br>&gt; Where? I couldn’t find any.<br>&gt; &gt; One other way of rephrasing it: to get<br>&gt; &gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt; &gt; hasPrefix to check for the empty string,<br>&gt; again, maybe it should throw a run-time error instead.<br>&gt;<br>&gt;<br>&gt; &gt; and the caller may well also<br>&gt; &gt; need special-case code to handle the fact that the result is not<br>&gt; &gt; mathematically consistent with other cases on the continuum.<br>&gt; In this context as “continuum” :<br>&gt;    are you referring to  “sets” or “collections” here?<br>&gt; what other cases?<br>&gt;<br>&gt; &gt;  Doing<br>&gt; &gt; things that way doesn&#39;t work in practice for real programs.<br>&gt; please explain thank you, because I see no problems at<br>&gt; all with the current NSString-like evaluation…<br>&gt; I’d put an s.isEmpty() in front of it.<br>&gt; &gt;<br>&gt; &gt;&gt; because:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt; &gt;&gt; as there is no empty string present in a non-empty string.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt; &gt;&gt; it would conflict with case 3.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ??<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -----<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Also I hope that changes to String functionality<br>&gt; &gt;&gt; for Swift 4 are not backward breaking changes<br>&gt; &gt;&gt; even the more for string handling, because Strings<br>&gt; &gt;&gt; are heavily used in most apps.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt; &gt;&gt; should compile Swift 3 and higher source files without<br>&gt; &gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt; &gt;&gt; of Swift’s popularity, especially with those building large<br>&gt; &gt;&gt; codebases using Swift.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I’ve started a thread about this a week ago,<br>&gt; &gt;&gt; however no one found this important enough to<br>&gt; &gt;&gt; share their opinions with me yet, or were too busy with<br>&gt; &gt;&gt; other subjects to do so.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Increasingly I have dreams, me<br>&gt; &gt;&gt; programming complete apps in Smalltalk<br>&gt; &gt;&gt; and then automagically generate<br>&gt; &gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; (I have also dreams of this world becoming<br>&gt; &gt;&gt; a nice and peaceful placebut that is<br>&gt; &gt;&gt; beyond the context of this forum)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Kind Regards<br>&gt; &gt;&gt; TedvG<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; www.speyer.de<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt; &gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt; &gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt; &gt;&gt;&gt; many things we plan to address.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/438fbeb8/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9278dc00e1a8755dc2de02b6a908a15a?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Parker</string> &lt;parker at erwaysoftware.com&gt;<p>July 19, 2016 at 04:00:00pm</p></header><div class="content"><p>While &quot;foo&quot;.hasPrefix(&quot;&quot;) == false might make *some* intuitive sense in a<br>&quot;why would you ever do that&quot; type of way, remember that the cases where<br>this matters are the cases where it&#39;s not hardcoded - for example, if I<br>were validating file names, &quot;foo.txt&quot;.hasSuffix(&quot;txt&quot;) should return true.<br>It would be reasonable to expect that a suffix might not be required, and<br>thus not provided by the user - in that case, I would expect<br>&quot;foo.txt&quot;.hasSuffix(blankStringProvidedByUser) to return true.<br></p><p>There are many such cases. The need to special-case in caller code in the<br>current implementation is far more onerous than it would be if this change<br>were made.<br></p><p>Parker<br></p><p>On Tue, Jul 19, 2016 at 10:17 AM Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; ok, Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt; to me - strings being collections -, all I see is:<br>&gt; trying to find an empty string within another string: There are (at least)<br>&gt; two ways of treating this:<br>&gt;<br>&gt; 1.  return “false”  seems to me logically correct, because<br>&gt;      there is never an empty string in another string, and an empty string<br>&gt; cannot contain another empty string, right?<br>&gt;     This has worked very conveniently for NSString in ObjC for more than<br>&gt; 20 years, why change it?<br>&gt;     Do you know of cases that were problematic with this convention?<br>&gt;<br>&gt;<br>&gt; 2  throw a runtime error when trying to do this:<br>&gt;     str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;<br>&gt; some in-line questions below.<br>&gt;<br>&gt; Kind Regards<br>&gt;<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Hi Dave<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; “true” ? am I going nuts ? :o)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Currently, all cases above evaluate to “false”<br>&gt; &gt;&gt; i think that is correct,<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt; &gt; but others in the thread have laid out the reasons why it is not<br>&gt; &gt; mathematically correct behavior.<br>&gt; Where? I couldn’t find any.<br>&gt; &gt; One other way of rephrasing it: to get<br>&gt; &gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt; &gt; hasPrefix to check for the empty string,<br>&gt; again, maybe it should throw a run-time error instead.<br>&gt;<br>&gt;<br>&gt; &gt; and the caller may well also<br>&gt; &gt; need special-case code to handle the fact that the result is not<br>&gt; &gt; mathematically consistent with other cases on the continuum.<br>&gt; In this context as “continuum” :<br>&gt;    are you referring to  “sets” or “collections” here?<br>&gt; what other cases?<br>&gt;<br>&gt; &gt;  Doing<br>&gt; &gt; things that way doesn&#39;t work in practice for real programs.<br>&gt; please explain thank you, because I see no problems at<br>&gt; all with the current NSString-like evaluation…<br>&gt; I’d put an s.isEmpty() in front of it.<br>&gt; &gt;<br>&gt; &gt;&gt; because:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt; &gt;&gt; as there is no empty string present in a non-empty string.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt; &gt;&gt; it would conflict with case 3.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ??<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -----<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Also I hope that changes to String functionality<br>&gt; &gt;&gt; for Swift 4 are not backward breaking changes<br>&gt; &gt;&gt; even the more for string handling, because Strings<br>&gt; &gt;&gt; are heavily used in most apps.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt; &gt;&gt; should compile Swift 3 and higher source files without<br>&gt; &gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt; &gt;&gt; of Swift’s popularity, especially with those building large<br>&gt; &gt;&gt; codebases using Swift.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I’ve started a thread about this a week ago,<br>&gt; &gt;&gt; however no one found this important enough to<br>&gt; &gt;&gt; share their opinions with me yet, or were too busy with<br>&gt; &gt;&gt; other subjects to do so.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Increasingly I have dreams, me<br>&gt; &gt;&gt; programming complete apps in Smalltalk<br>&gt; &gt;&gt; and then automagically generate<br>&gt; &gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; (I have also dreams of this world becoming<br>&gt; &gt;&gt; a nice and peaceful placebut that is<br>&gt; &gt;&gt; beyond the context of this forum)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Kind Regards<br>&gt; &gt;&gt; TedvG<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; www.speyer.de<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt; &gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt; &gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt; &gt;&gt;&gt; many things we plan to address.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/fc1f6db5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 19, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 1.  return “false”  seems to me logically correct, because<br>&gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right? <br></p><p>Empty set is a subset of all sets. <br></p><p>Just like:<br></p><p>let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>let arr2: [String] = []<br>arr1.starts(with: arr2, isEquivalent: ==) // true<br></p><p>&gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it? <br>&gt;    Do you know of cases that were problematic with this convention? <br>&gt; <br>&gt; <br>&gt; 2  throw a runtime error when trying to do this:<br>&gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt; <br>&gt; some in-line questions below.<br>&gt; <br>&gt; Kind Regards<br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; <br>&gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “true” ? am I going nuts ? :o) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt; i think that is correct, <br>&gt;&gt; <br>&gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt; mathematically correct behavior.  <br>&gt; Where? I couldn’t find any. <br>&gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt; hasPrefix to check for the empty string,<br>&gt; again, maybe it should throw a run-time error instead.<br>&gt; <br>&gt; <br>&gt;&gt; and the caller may well also<br>&gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt; In this context as “continuum” : <br>&gt;   are you referring to  “sets” or “collections” here?<br>&gt; what other cases? <br>&gt; <br>&gt;&gt; Doing<br>&gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt; please explain thank you, because I see no problems at<br>&gt; all with the current NSString-like evaluation…<br>&gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt; <br>&gt;&gt;&gt; because:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt; as there is no empty string present in a non-empty string. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”, <br>&gt;&gt;&gt; it would conflict with case 3. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true” <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ??<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -----<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt; even the more for string handling, because Strings <br>&gt;&gt;&gt; are heavily used in most apps. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am firmly convinced that all future releases of Swift <br>&gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing <br>&gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt; codebases using Swift. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt; and then automagically generate <br>&gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt; a nice and peaceful placebut that is <br>&gt;&gt;&gt; beyond the context of this forum)    <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; TedvG <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; www.speyer.de<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/918cc1431fcbed160258b2f29d6e37c5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Bianca</string> &lt;bancie at gmail.com&gt;<p>July 19, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Empty set is a subset of all sets.<br></p><p>True but all sets certainly do not _contain_ the empty set, which is what<br>might be confusing, as the word &quot;contains&quot; in the context of sets implies<br>that it&#39;s a member of the set of characters that make up a String.<br></p><p>On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt; &gt;     there is never an empty string in another string, and an empty<br>&gt; string cannot contain another empty string, right?<br>&gt;<br>&gt; Empty set is a subset of all sets.<br>&gt;<br>&gt; Just like:<br>&gt;<br>&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt; let arr2: [String] = []<br>&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;<br>&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than<br>&gt; 20 years, why change it?<br>&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt; &gt;<br>&gt; &gt; some in-line questions below.<br>&gt; &gt;<br>&gt; &gt; Kind Regards<br>&gt; &gt;<br>&gt; &gt; Ted<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Hi Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt; &gt;&gt;&gt; i think that is correct,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt; &gt;&gt; mathematically correct behavior.<br>&gt; &gt; Where? I couldn’t find any.<br>&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; and the caller may well also<br>&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt; &gt; In this context as “continuum” :<br>&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt; &gt; what other cases?<br>&gt; &gt;<br>&gt; &gt;&gt; Doing<br>&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt; &gt; please explain thank you, because I see no problems at<br>&gt; &gt; all with the current NSString-like evaluation…<br>&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; because:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; ??<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -----<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt; &gt;&gt;&gt; and then automagically generate<br>&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Kind Regards<br>&gt; &gt;&gt;&gt; TedvG<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; www.speyer.de<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could<br>&gt; be<br>&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Bianca<br>http://biancatamayo.me<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/4b0fbb4a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 19, 2016 at 01:00:00pm</p></header><div class="content"><p>Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br></p><p>&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Empty set is a subset of all sets.<br>&gt; <br>&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt; <br>&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt; <br>&gt; Empty set is a subset of all sets.<br>&gt; <br>&gt; Just like:<br>&gt; <br>&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt; let arr2: [String] = []<br>&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt; <br>&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt; &gt;<br>&gt; &gt; some in-line questions below.<br>&gt; &gt;<br>&gt; &gt; Kind Regards<br>&gt; &gt;<br>&gt; &gt; Ted<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Hi Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt; &gt;&gt;&gt; i think that is correct,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt; &gt;&gt; mathematically correct behavior.<br>&gt; &gt; Where? I couldn’t find any.<br>&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; and the caller may well also<br>&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt; &gt; In this context as “continuum” :<br>&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt; &gt; what other cases?<br>&gt; &gt;<br>&gt; &gt;&gt; Doing<br>&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt; &gt; please explain thank you, because I see no problems at<br>&gt; &gt; all with the current NSString-like evaluation…<br>&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; because:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; ??<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -----<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt; &gt;&gt;&gt; and then automagically generate<br>&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Kind Regards<br>&gt; &gt;&gt;&gt; TedvG<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -- <br>&gt; Bianca<br>&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/b2cfeef9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 19, 2016 at 02:00:00pm</p></header><div class="content"><p>Not that it&#39;s needed, but another +1 from me.<br></p><p>a.hasPrefix(p) should be true iff there exists some string x for which p+x<br>== a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return<br>true.<br></p><p>Jacob<br></p><p>On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general<br>&gt; `hasSubset` function, which would return `true` for the empty set.<br>&gt;<br>&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Empty set is a subset of all sets.<br>&gt;<br>&gt; True but all sets certainly do not _contain_ the empty set, which is what<br>&gt; might be confusing, as the word &quot;contains&quot; in the context of sets implies<br>&gt; that it&#39;s a member of the set of characters that make up a String.<br>&gt;<br>&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt; &gt;     there is never an empty string in another string, and an empty<br>&gt;&gt; string cannot contain another empty string, right?<br>&gt;&gt;<br>&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;<br>&gt;&gt; Just like:<br>&gt;&gt;<br>&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt; let arr2: [String] = []<br>&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;<br>&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than<br>&gt;&gt; 20 years, why change it?<br>&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Kind Regards<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Ted<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com<br>&gt;&gt; &lt;http://tedvgiosdev-at-gmail.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt; &gt; what other cases?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Doing<br>&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; www.speyer.de<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could<br>&gt;&gt; be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Dave<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Bianca<br>&gt; http://biancatamayo.me<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/62c1aebc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 21, 2016 at 12:00:00am</p></header><div class="content"><p>Hi,<br></p><p>Mathematical correct or not: <br></p><p>in case of <br>     s1.hasPrefix(s2)<br>         (or any other containment test method) <br></p><p>s1 and s2 are just plain simple instances of String,<br>nothing more nothing less. <br></p><p>Which is interpreted by me as: <br>“test if String s1 starts with String s2”<br></p><p>which, to me,  implies that one will never find an occurrence<br>of an empty string within another string,<br>for the very simple reason that an empty string<br>does not exist within another string. **<br>Ergo: “false” is the right evaluation when s2.isEmpty.<br></p><p>** In my mental model, a String is just an array of 0...n characters,<br>  like it is in most languages, very straightforward.<br></p><p> (returning false) This is exactly the reason why NSString does that, <br>for more than 20 years, why change it?<br></p><p>AFAIK no one has complained about this for years, <br>because imho it is logically sound. <br></p><p>for a compiler this is very easy<br>all it has to do is to return False<br>when either s1 or s2 is empty.<br></p><p><br>Ted<br></p><p><br>&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt; <br>&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return true.<br>&gt; <br>&gt; Jacob<br>&gt; <br>&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt; <br>&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt;&gt; <br>&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt;&gt; <br>&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt; <br>&gt;&gt; Just like:<br>&gt;&gt; <br>&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt; let arr2: [String] = []<br>&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt; <br>&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Kind Regards<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Ted<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt; &gt; what other cases?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Doing<br>&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Dave<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Bianca<br>&gt;&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/1627ac71/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July 20, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Jul 20, 2016 at 6:32 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; Mathematical correct or not:<br>&gt;<br>&gt; in case of<br>&gt;      s1.hasPrefix(s2)<br>&gt;          (or any other containment test method)<br>&gt;<br>&gt; s1 and s2 are just plain simple instances of String,<br>&gt; nothing more nothing less.<br>&gt;<br>&gt; Which is interpreted by me as:<br>&gt; “test if String s1 starts with String s2”<br>&gt;<br>&gt;<br>…which means, “Do the first n characters of s1 match s2, where n is the<br>length of s2?”<br></p><p>When s2 is the empty string, n is 0.<br></p><p>What are the first 0 characters of s1? Clearly the empty string, since that<br>is the only string with 0 characters.<br></p><p>Do the first 0 characters of s1 match s2? Well they are both the empty<br>string, and &quot;&quot;==&quot;&quot; is true, so…<br></p><p>That would be a resounding “Yes!”<br></p><p>Nevin<br></p><p><br></p><p><br>&gt; which, to me,  implies that one will never find an occurrence<br>&gt; of an empty string within another string,<br>&gt; for the very simple reason that an empty string<br>&gt; does not exist within another string. **<br>&gt; Ergo: “false” is the right evaluation when s2.isEmpty.<br>&gt;<br>&gt; ** In my mental model, a String is just an array of 0...n characters,<br>&gt;   like it is in most languages, very straightforward.<br>&gt;<br>&gt;  (returning false) This is exactly the reason why NSString does that,<br>&gt; for more than 20 years, why change it?<br>&gt;<br>&gt; AFAIK no one has complained about this for years,<br>&gt; because imho it is logically sound.<br>&gt;<br>&gt; for a compiler this is very easy<br>&gt; all it has to do is to return False<br>&gt; when either s1 or s2 is empty.<br>&gt;<br>&gt;<br>&gt; Ted<br>&gt;<br>&gt;<br>&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt;<br>&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt;<br>&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x<br>&gt; == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return<br>&gt; true.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general<br>&gt;&gt; `hasSubset` function, which would return `true` for the empty set.<br>&gt;&gt;<br>&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt;<br>&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what<br>&gt;&gt; might be confusing, as the word &quot;contains&quot; in the context of sets implies<br>&gt;&gt; that it&#39;s a member of the set of characters that make up a String.<br>&gt;&gt;<br>&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt;&gt; &gt;     there is never an empty string in another string, and an empty<br>&gt;&gt;&gt; string cannot contain another empty string, right?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just like:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt;&gt; let arr2: [String] = []<br>&gt;&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more<br>&gt;&gt;&gt; than 20 years, why change it?<br>&gt;&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Kind Regards<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Ted<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com<br>&gt;&gt;&gt; &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to<br>&gt;&gt;&gt; you,<br>&gt;&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt;&gt; &gt; what other cases?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; Doing<br>&gt;&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; www.speyer.de<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular,<br>&gt;&gt;&gt; it<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)`<br>&gt;&gt;&gt; could be<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; Dave<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Bianca<br>&gt;&gt; http://biancatamayo.me<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/604bbe3b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 21, 2016 at 03:00:00am</p></header><div class="content"><p>Hi Nevin,<br></p><p>extension String<br>{<br>    var count: Int<br>        {<br>        get<br>        {<br>            return self.characters.count<br>        }<br>    }<br>    <br>    // Sigh... String subscriptors should be already builtin in the String<br>    <br>    subscript (idx: Int) -&gt; String<br>        {<br>        get<br>        {<br>            return self.substringWithRange(<br>                self.startIndex.advancedBy(idx)..&lt;self.startIndex.advancedBy(idx + 1)<br>            )<br>        }<br>    }<br>    <br>    // range subscript [n1..n2] or [n1...n2]<br>    <br>    <br>    subscript (r: Range&lt;Int&gt;) -&gt; String<br>    {<br>        get<br>        {<br>            return self.substringWithRange(<br>                self.startIndex.advancedBy(r.startIndex)..&lt;self.startIndex.advancedBy(r.endIndex)  )<br>        }<br>     }<br>    <br>    //////////////////////////////////////////////<br>    func hazPrefix(s: String) -&gt; Bool<br>    {<br>        if self.isEmpty &amp;&amp; s.isEmpty  // both are empty: match<br>        {<br>            return true<br>        }<br>        <br>        if self.isEmpty || s.isEmpty ||<br>           (s.count &gt; self.count)<br>        {<br>            return false<br>        }<br>        <br>        var match = true<br>        <br>        for i in 0..&lt;s.count<br>        {<br>            if self[i] != s[i]<br>            {<br>                match = false<br>                break<br>            }<br>        }<br>        <br>        return match<br>    }<br>    ///////////////////////////////////////////<br>} // end String extensions.<br></p><p><br></p><p>let s = &quot;abcdefghijklmnopqrstuvwxyz&quot;<br>let emptystr = &quot;&quot;<br>let emptystr2 = &quot;&quot;<br></p><p>print( s.hazPrefix(&quot;abc&quot;) )                   // true<br></p><p>print( s.hazPrefix(&quot;&quot;) )                      // false<br>print( s.hazPrefix(&quot;Led Zeppelin.&quot;) )         // false<br>print( emptystr.hazPrefix(&quot;Swift&quot;) )          // false<br></p><p>print(emptystr.hazPrefix(emptystr) )          // true<br></p><p><br>Please see further in-line comments below: <br></p><p>Kind Regards,<br>Ted<br> <br></p><p>&gt; On 21.07.2016, at 00:57, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Wed, Jul 20, 2016 at 6:32 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hi,<br>&gt; <br>&gt; Mathematical correct or not: <br>&gt; <br>&gt; in case of <br>&gt;      s1.hasPrefix(s2)<br>&gt;          (or any other containment test method) <br>&gt; <br>&gt; s1 and s2 are just plain simple instances of String,<br>&gt; nothing more nothing less. <br>&gt; <br>&gt; Which is interpreted by me as: <br>&gt; “test if String s1 starts with String s2”<br>&gt; <br>&gt; <br>&gt; …which means, “Do the first n characters of s1 match s2, where n is the length of s2?”<br>Yes,. and of course  s1.count   &lt;= s2.count. <br>&gt; <br>&gt; When s2 is the empty string, n is 0.<br></p><p>&gt; <br>&gt; What are the first 0 characters of s1? Clearly the empty string, since that is the only string with 0 characters.<br>&gt; <br>&gt; Do the first 0 characters of s1 match s2? Well they are both the empty string, and &quot;&quot;==&quot;&quot; is true, so…<br>&gt; <br>&gt; That would be a resounding “Yes!”<br>how  dumb (for “”.hasPrefix(“”) ), my mistake. (handled correctly imho in code example above)<br>however, that is a matter of definition:<br>should “search for nothing in nothing” return “true” ??<br></p><p>Again, Strings to me are just character arrays...<br> <br>&gt; <br>&gt; Nevin<br>&gt; <br>&gt; <br>&gt;  <br>&gt; which, to me,  implies that one will never find an occurrence<br>&gt; of an empty string within another string,<br>&gt; for the very simple reason that an empty string<br>&gt; does not exist within another string. **<br>&gt; Ergo: “false” is the right evaluation when s2.isEmpty.<br>&gt; <br>&gt; ** In my mental model, a String is just an array of 0...n characters,<br>&gt;   like it is in most languages, very straightforward.<br>&gt; <br>&gt;  (returning false) This is exactly the reason why NSString does that, <br>&gt; for more than 20 years, why change it?<br>&gt; <br>&gt; AFAIK no one has complained about this for years, <br>&gt; because imho it is logically sound. <br>&gt; <br>&gt; for a compiler this is very easy<br>&gt; all it has to do is to return False<br>&gt; when either s1 or s2 is empty.<br>&gt; <br>&gt; <br>&gt; Ted<br>&gt; <br>&gt; <br>&gt;&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt;&gt; <br>&gt;&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return true.<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt; <br>&gt;&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt;&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt;&gt; let arr2: [String] = []<br>&gt;&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt;&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Kind Regards<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Ted<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt;&gt; &gt; what other cases?<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; Doing<br>&gt;&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt; Dave<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Bianca<br>&gt;&gt;&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/e8cd7ea4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 20, 2016 at 06:00:00pm</p></header><div class="content"><p>Saagar Jha<br></p><p><br></p><p>&gt; On Jul 20, 2016, at 18:02, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Nevin,<br>&gt; <br>&gt; extension String<br>&gt; {<br>&gt;     var count: Int<br>&gt;         {<br>&gt;         get<br>&gt;         {<br>&gt;             return self.characters.count<br>&gt;         }<br>&gt;     }<br>&gt;     <br>&gt;     // Sigh... String subscriptors should be already builtin in the String<br>&gt;     <br></p><p>Swift Strings use grapheme clusters, so subscripting doesn’t really work.<br></p><p>&gt;     subscript (idx: Int) -&gt; String<br>&gt;         {<br>&gt;         get<br>&gt;         {<br>&gt;             return self.substringWithRange(<br>&gt;                 self.startIndex.advancedBy(idx)..&lt;self.startIndex.advancedBy(idx + 1)<br>&gt;             )<br>&gt;         }<br>&gt;     }<br>&gt;     <br>&gt;     // range subscript [n1..n2] or [n1...n2]<br>&gt;     <br>&gt;     <br>&gt;     subscript (r: Range&lt;Int&gt;) -&gt; String<br>&gt;     {<br>&gt;         get<br>&gt;         {<br>&gt;             return self.substringWithRange(<br>&gt;                 self.startIndex.advancedBy(r.startIndex)..&lt;self.startIndex.advancedBy(r.endIndex)  )<br>&gt;         }<br>&gt;      }<br>&gt;     <br>&gt;     //////////////////////////////////////////////<br>&gt;     func hazPrefix(s: String) -&gt; Bool<br>&gt;     {<br>&gt;         if self.isEmpty &amp;&amp; s.isEmpty  // both are empty: match<br>&gt;         {<br>&gt;             return true<br>&gt;         }<br>&gt;         <br>&gt;         if self.isEmpty || s.isEmpty ||<br>&gt;            (s.count &gt; self.count)<br>&gt;         {<br>&gt;             return false<br>&gt;         }<br>&gt;         <br>&gt;         var match = true<br>&gt;         <br>&gt;         for i in 0..&lt;s.count<br>&gt;         {<br>&gt;             if self[i] != s[i]<br>&gt;             {<br>&gt;                 match = false<br>&gt;                 break<br>&gt;             }<br>&gt;         }<br>&gt;         <br>&gt;         return match<br>&gt;     }<br>&gt;     ///////////////////////////////////////////<br>&gt; } // end String extensions.<br>&gt; <br>&gt; <br>&gt; <br>&gt; let s = &quot;abcdefghijklmnopqrstuvwxyz&quot;<br>&gt; let emptystr = &quot;&quot;<br>&gt; let emptystr2 = &quot;&quot;<br>&gt; <br>&gt; print( s.hazPrefix(&quot;abc&quot;) )                   // true<br>&gt; <br>&gt; print( s.hazPrefix(&quot;&quot;) )                      // false<br>&gt; print( s.hazPrefix(&quot;Led Zeppelin.&quot;) )         // false<br>&gt; print( emptystr.hazPrefix(&quot;Swift&quot;) )          // false<br>&gt; <br>&gt; print(emptystr.hazPrefix(emptystr) )          // true<br>&gt; <br>&gt; <br>&gt; Please see further in-line comments below: <br>&gt; <br>&gt; Kind Regards,<br>&gt; Ted<br>&gt;  <br>&gt; <br>&gt;&gt; On 21.07.2016, at 00:57, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com &lt;mailto:nevin.brackettrozinsky at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 20, 2016 at 6:32 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; Mathematical correct or not: <br>&gt;&gt; <br>&gt;&gt; in case of <br>&gt;&gt;      s1.hasPrefix(s2)<br>&gt;&gt;          (or any other containment test method) <br>&gt;&gt; <br>&gt;&gt; s1 and s2 are just plain simple instances of String,<br>&gt;&gt; nothing more nothing less. <br>&gt;&gt; <br>&gt;&gt; Which is interpreted by me as: <br>&gt;&gt; “test if String s1 starts with String s2”<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; …which means, “Do the first n characters of s1 match s2, where n is the length of s2?”<br>&gt; Yes,. and of course  s1.count   &lt;= s2.count. <br>&gt;&gt; <br>&gt;&gt; When s2 is the empty string, n is 0.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; What are the first 0 characters of s1? Clearly the empty string, since that is the only string with 0 characters.<br>&gt;&gt; <br>&gt;&gt; Do the first 0 characters of s1 match s2? Well they are both the empty string, and &quot;&quot;==&quot;&quot; is true, so…<br>&gt;&gt; <br>&gt;&gt; That would be a resounding “Yes!”<br>&gt; how  dumb (for “”.hasPrefix(“”) ), my mistake. (handled correctly imho in code example above)<br>&gt; however, that is a matter of definition:<br>&gt; should “search for nothing in nothing” return “true” ??<br></p><p>Yes. For example, if you’re searching for “a” in the String “a”, you’d return true. Same thing for search for a nothing in a nothing-if the object is what you’re searching for, you can say it contains it.<br></p><p>&gt; <br>&gt; Again, Strings to me are just character arrays…<br>&gt;  <br>&gt;&gt; <br>&gt;&gt; Nevin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; which, to me,  implies that one will never find an occurrence<br>&gt;&gt; of an empty string within another string,<br>&gt;&gt; for the very simple reason that an empty string<br>&gt;&gt; does not exist within another string. **<br>&gt;&gt; Ergo: “false” is the right evaluation when s2.isEmpty.<br>&gt;&gt; <br>&gt;&gt; ** In my mental model, a String is just an array of 0...n characters,<br>&gt;&gt;   like it is in most languages, very straightforward.<br>&gt;&gt; <br>&gt;&gt;  (returning false) This is exactly the reason why NSString does that, <br>&gt;&gt; for more than 20 years, why change it?<br>&gt;&gt; <br>&gt;&gt; AFAIK no one has complained about this for years, <br>&gt;&gt; because imho it is logically sound. <br>&gt;&gt; <br>&gt;&gt; for a compiler this is very easy<br>&gt;&gt; all it has to do is to return False<br>&gt;&gt; when either s1 or s2 is empty.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Ted<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return true.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt;&gt;&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt;&gt;&gt; let arr2: [String] = []<br>&gt;&gt;&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt;&gt;&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt;&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Kind Regards<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Ted<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt;&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt;&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt;&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt;&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt;&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt;&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt;&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt;&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt;&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt;&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt;&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt;&gt;&gt; &gt; what other cases?<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Doing<br>&gt;&gt;&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt;&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt;&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt;&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt;&gt; &gt;&gt; Dave<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Bianca<br>&gt;&gt;&gt;&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/020365f1/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>July 21, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On 21.07.2016, at 03:15, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Saagar Jha<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 18:02, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Nevin,<br>&gt;&gt; <br>&gt;&gt; extension String<br>&gt;&gt; {<br>&gt;&gt;     var count: Int<br>&gt;&gt;         {<br>&gt;&gt;         get<br>&gt;&gt;         {<br>&gt;&gt;             return self.characters.count<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     // Sigh... String subscriptors should be already builtin in the String<br>&gt;&gt;     <br>&gt; <br>&gt; Swift Strings use grapheme clusters, so subscripting doesn’t really work.<br>?????? sorry Saagar, but it does! try this code in Swift Playground<br>I mean that the subscritp functions implemented below could just as well be builtin.<br>Ted<br>&gt; <br>&gt;&gt;     subscript (idx: Int) -&gt; String<br>&gt;&gt;         {<br>&gt;&gt;         get<br>&gt;&gt;         {<br>&gt;&gt;             return self.substringWithRange(<br>&gt;&gt;                 self.startIndex.advancedBy(idx)..&lt;self.startIndex.advancedBy(idx + 1)<br>&gt;&gt;             )<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     // range subscript [n1..n2] or [n1...n2]<br>&gt;&gt;     <br>&gt;&gt;     <br>&gt;&gt;     subscript (r: Range&lt;Int&gt;) -&gt; String<br>&gt;&gt;     {<br>&gt;&gt;         get<br>&gt;&gt;         {<br>&gt;&gt;             return self.substringWithRange(<br>&gt;&gt;                 self.startIndex.advancedBy(r.startIndex)..&lt;self.startIndex.advancedBy(r.endIndex)  )<br>&gt;&gt;         }<br>&gt;&gt;      }<br>&gt;&gt;     <br>&gt;&gt;     //////////////////////////////////////////////<br>&gt;&gt;     func hazPrefix(s: String) -&gt; Bool<br>&gt;&gt;     {<br>&gt;&gt;         if self.isEmpty &amp;&amp; s.isEmpty  // both are empty: match<br>&gt;&gt;         {<br>&gt;&gt;             return true<br>&gt;&gt;         }<br>&gt;&gt;         <br>&gt;&gt;         if self.isEmpty || s.isEmpty ||<br>&gt;&gt;            (s.count &gt; self.count)<br>&gt;&gt;         {<br>&gt;&gt;             return false<br>&gt;&gt;         }<br>&gt;&gt;         <br>&gt;&gt;         var match = true<br>&gt;&gt;         <br>&gt;&gt;         for i in 0..&lt;s.count<br>&gt;&gt;         {<br>&gt;&gt;             if self[i] != s[i]<br>&gt;&gt;             {<br>&gt;&gt;                 match = false<br>&gt;&gt;                 break<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;         <br>&gt;&gt;         return match<br>&gt;&gt;     }<br>&gt;&gt;     ///////////////////////////////////////////<br>&gt;&gt; } // end String extensions.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let s = &quot;abcdefghijklmnopqrstuvwxyz&quot;<br>&gt;&gt; let emptystr = &quot;&quot;<br>&gt;&gt; let emptystr2 = &quot;&quot;<br>&gt;&gt; <br>&gt;&gt; print( s.hazPrefix(&quot;abc&quot;) )                   // true<br>&gt;&gt; <br>&gt;&gt; print( s.hazPrefix(&quot;&quot;) )                      // false<br>&gt;&gt; print( s.hazPrefix(&quot;Led Zeppelin.&quot;) )         // false<br>&gt;&gt; print( emptystr.hazPrefix(&quot;Swift&quot;) )          // false<br>&gt;&gt; <br>&gt;&gt; print(emptystr.hazPrefix(emptystr) )          // true<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Please see further in-line comments below: <br>&gt;&gt; <br>&gt;&gt; Kind Regards,<br>&gt;&gt; Ted<br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; On 21.07.2016, at 00:57, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com &lt;mailto:nevin.brackettrozinsky at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, Jul 20, 2016 at 6:32 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Mathematical correct or not: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; in case of <br>&gt;&gt;&gt;      s1.hasPrefix(s2)<br>&gt;&gt;&gt;          (or any other containment test method) <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; s1 and s2 are just plain simple instances of String,<br>&gt;&gt;&gt; nothing more nothing less. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Which is interpreted by me as: <br>&gt;&gt;&gt; “test if String s1 starts with String s2”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; …which means, “Do the first n characters of s1 match s2, where n is the length of s2?”<br>&gt;&gt; Yes,. and of course  s1.count   &lt;= s2.count. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When s2 is the empty string, n is 0.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What are the first 0 characters of s1? Clearly the empty string, since that is the only string with 0 characters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do the first 0 characters of s1 match s2? Well they are both the empty string, and &quot;&quot;==&quot;&quot; is true, so…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That would be a resounding “Yes!”<br>&gt;&gt; how  dumb (for “”.hasPrefix(“”) ), my mistake. (handled correctly imho in code example above)<br>&gt;&gt; however, that is a matter of definition:<br>&gt;&gt; should “search for nothing in nothing” return “true” ??<br>&gt; <br>&gt; Yes. For example, if you’re searching for “a” in the String “a”, you’d return true. Same thing for search for a nothing in a nothing-if the object is what you’re searching for, you can say it contains it.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Again, Strings to me are just character arrays…<br>&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Nevin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; which, to me,  implies that one will never find an occurrence<br>&gt;&gt;&gt; of an empty string within another string,<br>&gt;&gt;&gt; for the very simple reason that an empty string<br>&gt;&gt;&gt; does not exist within another string. **<br>&gt;&gt;&gt; Ergo: “false” is the right evaluation when s2.isEmpty.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ** In my mental model, a String is just an array of 0...n characters,<br>&gt;&gt;&gt;   like it is in most languages, very straightforward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  (returning false) This is exactly the reason why NSString does that, <br>&gt;&gt;&gt; for more than 20 years, why change it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; AFAIK no one has complained about this for years, <br>&gt;&gt;&gt; because imho it is logically sound. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for a compiler this is very easy<br>&gt;&gt;&gt; all it has to do is to return False<br>&gt;&gt;&gt; when either s1 or s2 is empty.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return true.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt;&gt;&gt;&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Just like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt;&gt;&gt;&gt; let arr2: [String] = []<br>&gt;&gt;&gt;&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt;&gt;&gt;&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt;&gt;&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; Kind Regards<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; Ted<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt;&gt;&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt;&gt;&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt;&gt;&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt;&gt;&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt;&gt;&gt;&gt; &gt; what other cases?<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Doing<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt;&gt;&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt;&gt;&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt;&gt;&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Bianca<br>&gt;&gt;&gt;&gt;&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/14ff9561/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Change Request: Make myString.hasPrefix(&quot;&quot;) and myString.hasSuffix(&quot;&quot;) return true</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 20, 2016 at 09:00:00pm</p></header><div class="content"><p>Sorry, my word choice here is poor. I meant that Swift Strings don’t really match up with character arrays in the usual sense; your “subscript” is O(n). Use a Range instead.<br>Saagar Jha<br></p><p><br></p><p>&gt; On Jul 20, 2016, at 18:52, Ted F.A. van Gaalen &lt;tedvgiosdev at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 21.07.2016, at 03:15, Saagar Jha &lt;saagarjha28 at gmail.com &lt;mailto:saagarjha28 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Saagar Jha<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 18:02, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Nevin,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension String<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt;     var count: Int<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;         get<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             return self.characters.count<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     // Sigh... String subscriptors should be already builtin in the String<br>&gt;&gt;&gt;     <br>&gt;&gt; <br>&gt;&gt; Swift Strings use grapheme clusters, so subscripting doesn’t really work.<br>&gt; ?????? sorry Saagar, but it does! try this code in Swift Playground<br>&gt; I mean that the subscritp functions implemented below could just as well be builtin.<br>&gt; Ted<br>&gt;&gt; <br>&gt;&gt;&gt;     subscript (idx: Int) -&gt; String<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;         get<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             return self.substringWithRange(<br>&gt;&gt;&gt;                 self.startIndex.advancedBy(idx)..&lt;self.startIndex.advancedBy(idx + 1)<br>&gt;&gt;&gt;             )<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     // range subscript [n1..n2] or [n1...n2]<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     subscript (r: Range&lt;Int&gt;) -&gt; String<br>&gt;&gt;&gt;     {<br>&gt;&gt;&gt;         get<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             return self.substringWithRange(<br>&gt;&gt;&gt;                 self.startIndex.advancedBy(r.startIndex)..&lt;self.startIndex.advancedBy(r.endIndex)  )<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;      }<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     //////////////////////////////////////////////<br>&gt;&gt;&gt;     func hazPrefix(s: String) -&gt; Bool<br>&gt;&gt;&gt;     {<br>&gt;&gt;&gt;         if self.isEmpty &amp;&amp; s.isEmpty  // both are empty: match<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             return true<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         if self.isEmpty || s.isEmpty ||<br>&gt;&gt;&gt;            (s.count &gt; self.count)<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             return false<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         var match = true<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         for i in 0..&lt;s.count<br>&gt;&gt;&gt;         {<br>&gt;&gt;&gt;             if self[i] != s[i]<br>&gt;&gt;&gt;             {<br>&gt;&gt;&gt;                 match = false<br>&gt;&gt;&gt;                 break<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         <br>&gt;&gt;&gt;         return match<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt;     ///////////////////////////////////////////<br>&gt;&gt;&gt; } // end String extensions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let s = &quot;abcdefghijklmnopqrstuvwxyz&quot;<br>&gt;&gt;&gt; let emptystr = &quot;&quot;<br>&gt;&gt;&gt; let emptystr2 = &quot;&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print( s.hazPrefix(&quot;abc&quot;) )                   // true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print( s.hazPrefix(&quot;&quot;) )                      // false<br>&gt;&gt;&gt; print( s.hazPrefix(&quot;Led Zeppelin.&quot;) )         // false<br>&gt;&gt;&gt; print( emptystr.hazPrefix(&quot;Swift&quot;) )          // false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(emptystr.hazPrefix(emptystr) )          // true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please see further in-line comments below: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kind Regards,<br>&gt;&gt;&gt; Ted<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 21.07.2016, at 00:57, Nevin Brackett-Rozinsky &lt;nevin.brackettrozinsky at gmail.com &lt;mailto:nevin.brackettrozinsky at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jul 20, 2016 at 6:32 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Mathematical correct or not: <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; in case of <br>&gt;&gt;&gt;&gt;      s1.hasPrefix(s2)<br>&gt;&gt;&gt;&gt;          (or any other containment test method) <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; s1 and s2 are just plain simple instances of String,<br>&gt;&gt;&gt;&gt; nothing more nothing less. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Which is interpreted by me as: <br>&gt;&gt;&gt;&gt; “test if String s1 starts with String s2”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; …which means, “Do the first n characters of s1 match s2, where n is the length of s2?”<br>&gt;&gt;&gt; Yes,. and of course  s1.count   &lt;= s2.count. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When s2 is the empty string, n is 0.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What are the first 0 characters of s1? Clearly the empty string, since that is the only string with 0 characters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Do the first 0 characters of s1 match s2? Well they are both the empty string, and &quot;&quot;==&quot;&quot; is true, so…<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That would be a resounding “Yes!”<br>&gt;&gt;&gt; how  dumb (for “”.hasPrefix(“”) ), my mistake. (handled correctly imho in code example above)<br>&gt;&gt;&gt; however, that is a matter of definition:<br>&gt;&gt;&gt; should “search for nothing in nothing” return “true” ??<br>&gt;&gt; <br>&gt;&gt; Yes. For example, if you’re searching for “a” in the String “a”, you’d return true. Same thing for search for a nothing in a nothing-if the object is what you’re searching for, you can say it contains it.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Again, Strings to me are just character arrays…<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Nevin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; which, to me,  implies that one will never find an occurrence<br>&gt;&gt;&gt;&gt; of an empty string within another string,<br>&gt;&gt;&gt;&gt; for the very simple reason that an empty string<br>&gt;&gt;&gt;&gt; does not exist within another string. **<br>&gt;&gt;&gt;&gt; Ergo: “false” is the right evaluation when s2.isEmpty.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ** In my mental model, a String is just an array of 0...n characters,<br>&gt;&gt;&gt;&gt;   like it is in most languages, very straightforward.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  (returning false) This is exactly the reason why NSString does that, <br>&gt;&gt;&gt;&gt; for more than 20 years, why change it?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; AFAIK no one has complained about this for years, <br>&gt;&gt;&gt;&gt; because imho it is logically sound. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; for a compiler this is very easy<br>&gt;&gt;&gt;&gt; all it has to do is to return False<br>&gt;&gt;&gt;&gt; when either s1 or s2 is empty.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ted<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 19.07.2016, at 23:11, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not that it&#39;s needed, but another +1 from me.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; a.hasPrefix(p) should be true iff there exists some string x for which p+x == a.  If p == &quot;&quot;, then x := a satisfies this, so hasPrefix should return true.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Jacob<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 1:29 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Both `hasPrefix` and `hasSuffix` are analogous to the more general `hasSubset` function, which would return `true` for the empty set.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 19, 2016, at 12:32 PM, Bianca via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; True but all sets certainly do not _contain_ the empty set, which is what might be confusing, as the word &quot;contains&quot; in the context of sets implies that it&#39;s a member of the set of characters that make up a String. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jul 19, 2016 at 12:23 PM Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; On Jul 19, 2016, at 6:17 PM, Ted F.A. van Gaalen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; 1.  return “false”  seems to me logically correct, because<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;     there is never an empty string in another string, and an empty string cannot contain another empty string, right?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Empty set is a subset of all sets.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Just like:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; let arr1: [String] = [&quot;Hello&quot;, &quot;Swift&quot;, &quot;Evolution&quot;]<br>&gt;&gt;&gt;&gt;&gt;&gt; let arr2: [String] = []<br>&gt;&gt;&gt;&gt;&gt;&gt; arr1.starts(with: arr2, isEquivalent: ==) // true<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;    This has worked very conveniently for NSString in ObjC for more than 20 years, why change it?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;    Do you know of cases that were problematic with this convention?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; 2  throw a runtime error when trying to do this:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;    str.hasPrefix(“”)     //  also for hasSuffix,  str.contains etc.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; some in-line questions below.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Kind Regards<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Ted<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; On 19.07.2016, at 16:31, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; on Tue Jul 19 2016, &quot;Ted F.A. van Gaalen&quot; &lt;tedvgiosdev-AT-gmail.com &lt;http://tedvgiosdev-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Hi Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; “true” ? am I going nuts ? :o)<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; var str = &quot;Hello, playground&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasPrefix(&quot;”)) // case 1 : false<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print( str.hasSuffix(&quot;”)) // case 2 : false<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; print(&quot;&quot; == “a” )          // case 3 : false<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Currently, all cases above evaluate to “false”<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; i think that is correct,<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; I don&#39;t know what to tell you.  It may seem intuitively correct to you,<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; but others in the thread have laid out the reasons why it is not<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; mathematically correct behavior.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; Where? I couldn’t find any.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; One other way of rephrasing it: to get<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; `false` for str.hasPrefix(&quot;&quot;), you actually need special-case code in<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; hasPrefix to check for the empty string,<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; again, maybe it should throw a run-time error instead.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; and the caller may well also<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; need special-case code to handle the fact that the result is not<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; mathematically consistent with other cases on the continuum.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; In this context as “continuum” :<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;   are you referring to  “sets” or “collections” here?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; what other cases?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Doing<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; things that way doesn&#39;t work in practice for real programs.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; please explain thank you, because I see no problems at<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; all with the current NSString-like evaluation…<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I’d put an s.isEmpty() in front of it.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; because:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; How can an empty string be a prefix or suffix value?<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; as there is no empty string present in a non-empty string.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Note that if case 1 and case 2 would evaluate to “true”,<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; it would conflict with case 3.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Can’t imagine that case 3 should in future also result in “true”<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; ??<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; -----<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Also I hope that changes to String functionality<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; for Swift 4 are not backward breaking changes<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; even the more for string handling, because Strings<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; are heavily used in most apps.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; I am firmly convinced that all future releases of Swift<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; should compile Swift 3 and higher source files without<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; any changes 100 % flawlessly! This prevents early diminishing<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; of Swift’s popularity, especially with those building large<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; codebases using Swift.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; I’ve started a thread about this a week ago,<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; however no one found this important enough to<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; share their opinions with me yet, or were too busy with<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; other subjects to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Increasingly I have dreams, me<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; programming complete apps in Smalltalk<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; and then automagically generate<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; an macOS, tvOS or iOS runtime app of it.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; (I have also dreams of this world becoming<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; a nice and peaceful placebut that is<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; beyond the context of this forum)<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; Kind Regards<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; TedvG<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt; www.speyer.de &lt;http://www.speyer.de/&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; on Mon Jul 18 2016, Kevin Nattinger &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree, true is definitely the expected behavior. In particular, it<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; seems absurd to me that `a.hasPrefix(b)` and `a.hasSuffix(b)` could be<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; false when `a == b` is true.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; I expect to be reworking Strings for Swift 4, and this is one of the<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; many things we plan to address.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Bianca<br>&gt;&gt;&gt;&gt;&gt;&gt; http://biancatamayo.me &lt;http://biancatamayo.me/&gt;_______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/bc504650/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
