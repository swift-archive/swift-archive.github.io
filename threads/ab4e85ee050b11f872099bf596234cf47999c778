<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3679b974d53f17b3b684fc9cadb99fa3?s=50"></div><header><strong>Remove Failable Initializers</strong> from <string>Kyle Sherman</string> &lt;kyledsherman at gmail.com&gt;<p>March  2, 2016 at 04:00:00pm</p></header><div class="content"><p>It seems to me that Haravikk’s example shows that you can handle the case of “string to int” with the error handling model just fine instead of having the failable initializers. I have found that failable initializers really don’t fit in well with Swift’s strict initialization rules (which I think are great). Every time I tried to use them I always had to make sacrifices with having an implicitly unwrapped optional or optional when I shouldn’t.<br></p><p>I think using the error handling model in combination with try? would be simpler and would lead to better code.<br></p><p>&gt; &gt; On 2 Mar 2016, at 23:07, Chris Lattner via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; On Mar 2, 2016, at 1:11 PM, James Campbell via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; Given that we now have error handling and availability checks does it make sense to have Failable Initializers which date back to Swift 1.1?<br>&gt; &gt; <br>&gt; &gt; Our error handling schema (https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst#kinds-of-error) defines how error conditions are handled, and one important class of them (e.g. the &quot;string to int&quot; case) is best modeled as returning an optional.This works really well in practice for functions/methods in general.<br>&gt; Could you give an example of why failable is the better fit here? To me the following two statements are identical:<br>&gt; <br>&gt; let a = FailableType()<br>&gt; let b = try? ThrowableType()<br>&gt; <br>&gt; Except that in the latter case the try? is more explicit about what is happening (and that it can fail), and I have the option of catching the error to find out more about what went wrong. With some optimisation it should be possible for try? to be just as efficient as a failable initialiser I think.<br>&gt; <br>&gt; That said, the failable initialiser could have the same explicit call syntax if it required a trailing question-mark, e.g:<br>&gt; <br>&gt; let a = FailableType()?<br>&gt; <br>&gt; As currently the only indicator is on the initialiser declaration itself. Still, when it comes to debugging I’ve found it very useful to force myself to use error handling instead, as it means I have to give reasons for why something failed, which can make it easier to track issues when they do arise._______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Remove Failable Initializers</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  3, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; I have found that failable initializers really don’t fit in well with Swift’s strict initialization rules (which I think are great). Every time I tried to use them I always had to make sacrifices with having an implicitly unwrapped optional or optional when I shouldn’t.<br></p><p>Are you talking about the &quot;All stored properties of a class instance must be initialized before returning nil from an initializer&quot; error? Because that&#39;s being fixed in Swift 2.2.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3679b974d53f17b3b684fc9cadb99fa3?s=50"></div><header><strong>Remove Failable Initializers</strong> from <string>Kyle Sherman</string> &lt;kyledsherman at gmail.com&gt;<p>March  3, 2016 at 07:00:00am</p></header><div class="content"><p>Oh. I missed that. Thanks. Then I guess I could go either way. Keeping failable initializers, in that case, would be fine and makes sense. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 3, 2016, at 12:55 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br></p><p>&gt; I have found that failable initializers really don’t fit in well with Swift’s strict initialization rules (which I think are great). Every time I tried to use them I always had to make sacrifices with having an implicitly unwrapped optional or optional when I shouldn’t.<br></p><p>Are you talking about the &quot;All stored properties of a class instance must be initialized before returning nil from an initializer&quot; error? Because that&#39;s being fixed in Swift 2.2.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
