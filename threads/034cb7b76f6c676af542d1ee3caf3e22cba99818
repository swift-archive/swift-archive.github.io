<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>August 25, 2016 at 06:00:00pm</p></header><div class="content"><p>Swift Evolution Community,<br></p><p>In the standard library there is a `min` and a `max` function but there<br>isn&#39;t<br>a `bounds` function, or a function that takes a value and an upper and<br>lower bound and returns that value if it is within the specified range or<br>if not the closer of the lower or upper values supplied to the `bounds`<br>function.<br>(Other possible names for such a function could be something like `clamp`,<br>or `clip`)<br></p><p>I personally see merit in adding a function to bound the value of a<br>variable within a range and think it would be simple to write with the<br>existing implementations of `min` and `max` with something like:<br></p><p>    public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt;<br>T {<br></p><p>        return max(lower, min(value, upper))<br></p><p>    }<br></p><p>Does this sound like something the community thinks would be worthwhile to<br>add?<br></p><p>If so I would love to write a quick proposal.<br></p><p><br>- Nick<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160825/034c9818/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>August 25, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 25 Aug 2016, at 12:05, Nicholas Maccharoli wrote:<br>&gt; <br>&gt; I personally see merit in adding a function to bound the value of a variable within a range and think it would be simple to write with the existing implementations of `min` and `max` with something like:<br>&gt; <br>&gt;     public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T) -&gt; T {<br>&gt;         return max(lower, min(value, upper))<br>&gt;     }<br>&gt; <br>&gt; Does this sound like something the community thinks would be worthwhile to add?<br></p><p>I&#39;d welcome that addition. In terms of function interface, I think we can do better than the 3-argument `clamp(x, min, max)` function that is seen in several math libraries.<br></p><p>Our ***Range types already have a `clamped(to:)` member function, e.g. here&#39;s one for ClosedRange &lt;https://developer.apple.com/reference/swift/closedrange/1779071-clamped&gt;. It creates a new range constraining the receiver&#39;s bounds within the new bounds given as argument.<br></p><p>I think the sensible thing would be to add a similar, and equally named, method to the Comparable protocol, taking in the ClosedRange&lt;Self&gt; to limit the value to:<br></p><p>    extension Comparable {<br>      public func clamped(to limits: ClosedRange&lt;Self&gt;) -&gt; Self {<br>        return self &lt; limits.lowerBound ? limits.lowerBound<br>             : self &gt; limits.upperBound ? limits.upperBound<br>             : self<br>      }<br>    }<br></p><p>    (-0.1).clamped(to: 0 ... 1)       // 0.0<br>    3.14.clamped(to: 0 ... .infinity) // 3.14<br>    &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;f&quot;)    // &quot;f&quot;<br>    &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;g&quot;)    // &quot;foo&quot;<br></p><p>From my experience, I&#39;d say it&#39;d be most useful for clamping floating-point numbers and collection indices.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160825/859dfeee/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/881ccaf2edd00d9951f1cb8fe899d336?s=50"></div><header><strong>[Idea] Add `bounds` function to standard library</strong> from <string>Nicholas Maccharoli</string> &lt;nmaccharoli at gmail.com&gt;<p>August 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Georgios, Yes lets go with clamp for a name!<br></p><p>Pyry, Originally I thought of just adding a global function akin to `min`<br>and `max` but I am also<br>in favour of adding the above extension to `Comparable`.<br>I think having both the global function and the protocol extension for<br>`clamp` would be great.<br></p><p>- Nick<br></p><p><br>On Thu, Aug 25, 2016 at 9:37 PM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br></p><p>&gt; On 25 Aug 2016, at 12:05, Nicholas Maccharoli wrote:<br>&gt;<br>&gt; I personally see merit in adding a function to bound the value of a<br>&gt; variable within a range and think it would be simple to write with the<br>&gt; existing implementations of `min` and `max` with something like:<br>&gt;<br>&gt;     public func bounds&lt;T : Comparable&gt;(value: T, _ lower: T, _ upper: T)<br>&gt; -&gt; T {<br>&gt;         return max(lower, min(value, upper))<br>&gt;     }<br>&gt;<br>&gt; Does this sound like something the community thinks would be worthwhile to<br>&gt; add?<br>&gt;<br>&gt;<br>&gt; I&#39;d welcome that addition. In terms of function interface, I think we can<br>&gt; do better than the 3-argument `clamp(x, min, max)` function that is seen<br>&gt; in several math libraries.<br>&gt;<br>&gt; Our ***Range types already have a `clamped(to:)` member function, e.g. here&#39;s<br>&gt; one for ClosedRange<br>&gt; &lt;https://developer.apple.com/reference/swift/closedrange/1779071-clamped&gt;.<br>&gt; It creates a new range constraining the receiver&#39;s bounds within the new<br>&gt; bounds given as argument.<br>&gt;<br>&gt; I think the sensible thing would be to add a similar, and equally named,<br>&gt; method to the Comparable protocol, taking in the ClosedRange&lt;Self&gt; to<br>&gt; limit the value to:<br>&gt;<br>&gt;     extension Comparable {<br>&gt;       public func clamped(to limits: ClosedRange&lt;Self&gt;) -&gt; Self {<br>&gt;         return self &lt; limits.lowerBound ? limits.lowerBound<br>&gt;              : self &gt; limits.upperBound ? limits.upperBound<br>&gt;              : self<br>&gt;       }<br>&gt;     }<br>&gt;<br>&gt;     (-0.1).clamped(to: 0 ... 1)       // 0.0<br>&gt;     3.14.clamped(to: 0 ... .infinity) // 3.14<br>&gt;     &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;f&quot;)    // &quot;f&quot;<br>&gt;     &quot;foo&quot;.clamped(to: &quot;a&quot; ... &quot;g&quot;)    // &quot;foo&quot;<br>&gt;<br>&gt; From my experience, I&#39;d say it&#39;d be most useful for clamping<br>&gt; floating-point numbers and collection indices.<br>&gt;<br>&gt; — Pyry<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160829/73229a7c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
