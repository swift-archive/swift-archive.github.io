<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  7, 2016 at 11:00:00am</p></header><div class="content"><p>on Thu Apr 07 2016, David Owens II &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It would be nice to know the rationale behind the choice of the current syntax.<br>&gt; I agree that these seem more natural:<br>&gt;<br>&gt;     @warn_unused_result<br>&gt;     public func ~=&lt;I : ForwardIndexType where I : Comparable&gt;(value: I, pattern:<br>&gt;     Range&lt;I&gt;) -&gt; Bool<br>&gt;<br>&gt;     @warn_unused_result<br>&gt;     public func ~=&lt;I : IntervalType&gt;(value: I.Bound, pattern: I) -&gt; Bool<br></p><p>+1<br></p><p>&gt; I would not change from `~=` to `=~` though.<br></p><p>One downside with `~=` is that it reads like `+=`, which mutates the<br>LHS.  Of course, `=~` has its own issues, e.g. `x=~y` might read as `x =<br>~y`.<br></p><p>&gt; So you have this:<br>&gt;<br>&gt;     let x = 4<br>&gt;<br>&gt;     switch x {<br>&gt;     case let v where x ~= 0...5: print(&quot;matched: \(v)&quot;)<br>&gt;     default: print(&quot;nothing!!&quot;)<br>&gt;     }<br>&gt;<br>&gt; -David<br>&gt;<br>&gt;     On Apr 7, 2016, at 4:57 AM, David Rodrigues via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Hi all,<br>&gt;<br>&gt;     Swift has a pattern match operator, ~=, which is unknown to many (like me<br>&gt;     until a few weeks ago), that performs a match between a value and a certain<br>&gt;     pattern, e.g. checking if an integer value is contained in a range of<br>&gt;     integers.<br>&gt;<br>&gt;     This operator may be little known, but it plays a key role in the language<br>&gt;     since it&#39;s used behind the scenes to support expression patterns in `switch<br>&gt;     ` statement case labels, which we all know are extremely popular.<br>&gt;<br>&gt;     let point = (2, 4)<br>&gt;     switch point {<br>&gt;     case (0, 0):<br>&gt;     print(&quot;The point is at the origin&quot;)<br>&gt;     case (0...4, 0...4):<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt;     default:<br>&gt;     break<br>&gt;     }<br>&gt;<br>&gt;     Most of the time we don&#39;t use the operator directly but it is available and<br>&gt;     can be handy in certain conditions.<br>&gt;<br>&gt;     let point = (2, 4)<br>&gt;     switch point {<br>&gt;     case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y:<br>&gt;     print(&quot;The point is in the subregion&quot;)<br>&gt;     default:<br>&gt;     break<br>&gt;     }<br>&gt;<br>&gt;     However the current syntax is not ideal (in my opinion). We&#39;re not really<br>&gt;     declaring the operation that we want to do, and that has an impact in the<br>&gt;     expressivity and readability of the code. Currently we&#39;re doing matches like<br>&gt;     &quot;if blue is the ocean&quot; instead of &quot;if the ocean is blue&quot; or &quot;if the ocean<br>&gt;     contains the whale&quot; instead of &quot;if the whale is in the ocean&quot;.<br>&gt;<br>&gt;     For that reason, I would like to suggest inverting the order of the operator<br>&gt;     to match more closely our logical thought.<br>&gt;<br>&gt;     case (let x, let y) where x =~ 0...4 &amp;&amp; y =~ 0...4: // Proposed<br>&gt;     // vs<br>&gt;     case (let x, let y) where 0...4 ~= x &amp;&amp; 0...4 ~= y: // Current<br>&gt;<br>&gt;     I have an ongoing proposal to suggest this change and it contains a little<br>&gt;     more context. It is available here: <br>&gt;<br>&gt;     https://github.com/dmcrodrigues/swift-evolution/blob/proposal/invert-order-of-pattern-match-operator/proposals/NNNN-invert-order-of-pattern-match-operator.md<br>&gt;    .<br>&gt;<br>&gt;     Any feedback is very welcome.<br>&gt;<br>&gt;     Thank you.<br>&gt;<br>&gt;     David Rodrigues<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/728c1be08b1a4c91add43688b40592cf?s=50"></div><header><strong>[Proposal] Invert the order of pattern match operator</strong> from <string>David Rodrigues</string> &lt;david.ndh at gmail.com&gt;<p>April  7, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 07 Apr 2016, at 19:16, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; It would be nice to know the rationale behind the choice of the current syntax.<br>&gt;&gt; I agree that these seem more natural:<br>&gt;&gt; <br>&gt;&gt;    @warn_unused_result<br>&gt;&gt;    public func ~=&lt;I : ForwardIndexType where I : Comparable&gt;(value: I, pattern:<br>&gt;&gt;    Range&lt;I&gt;) -&gt; Bool<br>&gt;&gt; <br>&gt;&gt;    @warn_unused_result<br>&gt;&gt;    public func ~=&lt;I : IntervalType&gt;(value: I.Bound, pattern: I) -&gt; Bool<br>&gt; <br>&gt; +1<br></p><p>This operator was firstly introduced in Swift in the form =~ but then it was reversed to the current form (~3y ago). There’s a little context about this change on Twitter: https://twitter.com/dmcrodrigues/status/717063623957471232 &lt;https://twitter.com/dmcrodrigues/status/717063623957471232&gt;.<br></p><p>&gt;&gt; I would not change from `~=` to `=~` though.<br>&gt; <br>&gt; One downside with `~=` is that it reads like `+=`, which mutates the<br>&gt; LHS.  Of course, `=~` has its own issues, e.g. `x=~y` might read as `x =<br>&gt; ~y`.<br></p><p>I agree but this operator already exists in other languages like Ruby and Perl, so align the syntax may be a good option.<br></p><p>&gt; On 07 Apr 2016, at 18:56, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I&#39;d prefer to offer both ~= and =~, allowing the consumer to choose which side the pattern sits on.<br></p><p>On the other hand, I like in particular the option of having both `~=` and `=~` to provide more flexibility like Erica has suggested. The main question is if that’s ok introduce another operator in the language.<br></p><p>— <br>David<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160407/4d8c87f6/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
