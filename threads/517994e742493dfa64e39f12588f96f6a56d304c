<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b887e9795e182e99576e0cde141903b?s=50"></div><header><strong>Automatic generation of initializer including default values</strong> from <string>Guy Miller</string> &lt;guyjohnmiller at gmail.com&gt;<p>October 10, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>When I am defining a struct I find myself often using a style as shown in the following example:<br></p><p>struct Foo {<br></p><p>	var greeting: String<br>	var x: Int<br>	var y: Int<br>	var z: Int<br></p><p>	init(greeting: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>		self.greeting = greeting<br>		self.x = x<br>		self.y = y<br>		self.z = z<br>	}<br>}<br></p><p>This enables one to write code when one doesn’t need to change defaults:<br></p><p>let f = Foo(greeting: “Hello”)<br></p><p>and when one wishes to change one of the defaults:<br></p><p>let f = Foo(greeting: “Hello”, z: 4)<br></p><p>It would be better if one could write the struct in what I understand is the preferred style:<br></p><p>struct Foo {<br>	var greeting: String<br>	var x = 1<br>	var y = 2<br>	var z = 3<br>}<br></p><p>and have the compiler generate the initializer:<br></p><p>init(name: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>	self.name = name<br>	self.x = x<br>	self.y = y<br>	self.z = z<br>}<br></p><p>rather than one where all the parameters that have a default value need to be specified in the initializer if one wishes to change just one of them.<br></p><p>Regards,<br>Guy Miller<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Automatic generation of initializer including default values</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 10, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;m ambivalent here.  I know this is convenient, but I have a stronger interest in controlling my APIs, initializers included.  The more the compiler synthesizes, the less control I have and the more code I have to write to make up for that.  I don&#39;t think there&#39;s enough here (yet?) to justify synthesis.<br></p><p>tl;dr  Not everybody chains convenience initializers like this.<br></p><p>~Robert Widmann<br></p><p>2016/10/10 8:27、Guy Miller via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Hi,<br>&gt; <br>&gt; When I am defining a struct I find myself often using a style as shown in the following example:<br>&gt; <br>&gt; struct Foo {<br>&gt; <br>&gt;    var greeting: String<br>&gt;    var x: Int<br>&gt;    var y: Int<br>&gt;    var z: Int<br>&gt; <br>&gt;    init(greeting: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>&gt;        self.greeting = greeting<br>&gt;        self.x = x<br>&gt;        self.y = y<br>&gt;        self.z = z<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; This enables one to write code when one doesn’t need to change defaults:<br>&gt; <br>&gt; let f = Foo(greeting: “Hello”)<br>&gt; <br>&gt; and when one wishes to change one of the defaults:<br>&gt; <br>&gt; let f = Foo(greeting: “Hello”, z: 4)<br>&gt; <br>&gt; It would be better if one could write the struct in what I understand is the preferred style:<br>&gt; <br>&gt; struct Foo {<br>&gt;    var greeting: String<br>&gt;    var x = 1<br>&gt;    var y = 2<br>&gt;    var z = 3<br>&gt; }<br>&gt; <br>&gt; and have the compiler generate the initializer:<br>&gt; <br>&gt; init(name: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>&gt;    self.name = name<br>&gt;    self.x = x<br>&gt;    self.y = y<br>&gt;    self.z = z<br>&gt; }<br>&gt; <br>&gt; rather than one where all the parameters that have a default value need to be specified in the initializer if one wishes to change just one of them.<br>&gt; <br>&gt; Regards,<br>&gt; Guy Miller<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Automatic generation of initializer including default values</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>October 10, 2016 at 03:00:00pm</p></header><div class="content"><p>We considered a proposal I wrote early in the year.  There was extensive discussion of the topic at that time.  The core team decided to defer the topic at the time.  Everyone was convinced there are better ways to handle it than I originally proposed (including myself).  The topic will be revisited at some point in the future but is not in scope for Swift 4, phase 1.<br></p><p>If you wish to catch up on the discussion, here’s a link to the proposal which includes links to the discussion as well as the core team’s rationale for their decision on this proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&gt;<br></p><p><br>&gt; On Oct 10, 2016, at 7:27 AM, Guy Miller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; When I am defining a struct I find myself often using a style as shown in the following example:<br>&gt; <br>&gt; struct Foo {<br>&gt; <br>&gt; 	var greeting: String<br>&gt; 	var x: Int<br>&gt; 	var y: Int<br>&gt; 	var z: Int<br>&gt; <br>&gt; 	init(greeting: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>&gt; 		self.greeting = greeting<br>&gt; 		self.x = x<br>&gt; 		self.y = y<br>&gt; 		self.z = z<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; This enables one to write code when one doesn’t need to change defaults:<br>&gt; <br>&gt; let f = Foo(greeting: “Hello”)<br>&gt; <br>&gt; and when one wishes to change one of the defaults:<br>&gt; <br>&gt; let f = Foo(greeting: “Hello”, z: 4)<br>&gt; <br>&gt; It would be better if one could write the struct in what I understand is the preferred style:<br>&gt; <br>&gt; struct Foo {<br>&gt; 	var greeting: String<br>&gt; 	var x = 1<br>&gt; 	var y = 2<br>&gt; 	var z = 3<br>&gt; }<br>&gt; <br>&gt; and have the compiler generate the initializer:<br>&gt; <br>&gt; init(name: String, x: Int = 1, y: Int = 2, z: Int = 3) {<br>&gt; 	self.name = name<br>&gt; 	self.x = x<br>&gt; 	self.y = y<br>&gt; 	self.z = z<br>&gt; }<br>&gt; <br>&gt; rather than one where all the parameters that have a default value need to be specified in the initializer if one wishes to change just one of them.<br>&gt; <br>&gt; Regards,<br>&gt; Guy Miller<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161010/ccd0182b/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
