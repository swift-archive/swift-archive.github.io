<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>May  5, 2016 at 04:00:00pm</p></header><div class="content"><p>The idea of adding a syntax to reference zero-argument functions just like foo(arg:) is used to reference a one-parameter function has come up several times on the list. Pyry and I have put together a proposal to let foo(_) refer to a function foo without any parameters. GitHub-Link: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md &lt;https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md&gt;<br></p><p>Comments welcome, especially if someone thinks that any of the issues listed in &quot;Possible issues&quot; are major or sees any other problems.<br></p><p>– Alex<br></p><p><br>Referencing zero-parameter functions<br></p><p>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;, Pyry Jahkola &lt;https://github.com/pyrtsa&gt;<br>Status: Draft<br>Review manager: TBD<br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#introduction&gt;Introduction<br></p><p>Since the approval of SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. This proposal adds a new syntax foo(_) to reference an overloaded function with zero parameters.<br></p><p>This was one point in the discussion: [Pitch] Richer function identifiers, simpler function types &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15577/&gt;<br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#motivation&gt;Motivation<br></p><p>Consider the following example<br></p><p>class Bar {<br>  func foo() {<br>  }<br></p><p>  func foo(arg: Int) {<br>  }<br>}<br>You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo() as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#proposed-solution&gt;Proposed solution<br></p><p>We propose that Bar.foo(_) references the function with no parameters just as Bar.foo(arg:) references the function with one argument named arg. <br></p><p>In the context of functions declarations _ already has the meaning of &quot;there is nothing&quot; (e.g. func foo(_ arg: Int)). Thus, we believe that _ is the right character to mean that a function has no parameters.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#detailed-design&gt;Detailed design<br></p><p>The unqualified-name grammar rule from SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; changes to <br></p><p>unqualified-name -&gt; identifier<br>                  | identifier &#39;(&#39; ((identifier | &#39;_&#39;) &#39;:&#39;)+ &#39;)&#39;<br>                  | identifier &#39;(_)&#39;<br>If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#impact-on-existing-code&gt;Impact on existing code<br></p><p>This is a purely additive feature and has no impact on existing code.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#possible-issues&gt;Possible issues<br></p><p>If Swift should ever support out-only parameters Bar.foo(_) could mean that the only out-only parameter shall be ignored. This would clash with the currently proposed syntax. However, since Swift functions may return multiple values as a tuple, we don&#39;t see this coming.<br></p><p>Bar.foo(_) may be mistaken for Bar.foo(_:) if there is also a one-parameter function without a label. This mistake would, however, be mostly detected by the compiler when later calling the function with an argument.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternatives-considered&gt;Alternatives considered<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-1-barfoo&gt;Alternative 1: Bar.foo<br></p><p>Let Bar.foo reference the function with zero parameters only. While this works around the possible issue of ignored out-only parameters described above, this has several minor drawbacks to the proposed solution (some of these drawbacks are mutually exclusive based on possible future proposals but one always applies):<br></p><p>Most functions are not overloadad and using the base name only offers a shorthand way to reference these functions.<br>This would block the way of allowing properties with the same name as a function with zero parameters by banning Bar.foo as a function reference (could be another proposal once this one is accepted).<br>Bar.foo(arg:) hints that a function is referenced by its paranthesis. Bar.foo doesn&#39;t include paranthesis, which causes a subtle inconsistency.<br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-2-barfoo-inside-selector&gt;Alternative 2: Bar.foo() inside #selector<br></p><p>Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here &lt;https://github.com/apple/swift-evolution/pull/280#discussion_r61849122&gt;. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;) to be approved. Issues we see are:<br></p><p>This gives the illusion that foo is actually called which it isn&#39;t<br>It doen&#39;t solve the issue of referncing a zero-parameter function in arbitrary expressions somewhere else in code.<br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#future-directions&gt;Future directions<br></p><p>If this proposal is accepted there is no need that Bar.foo references a function with base name foo since there is a notation with paranthesis for every argument constellation. We could disallow Bar.foo to reference a function and allow a property named foo on Bar. Bar.foo would then refer to this property.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/899604f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>What’s wrong with `foo()` again? To me, a `_` in the parameter list means that something is there, but the label doesn’t matter.<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 5, 2016, at 9:42 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The idea of adding a syntax to reference zero-argument functions just like foo(arg:) is used to reference a one-parameter function has come up several times on the list. Pyry and I have put together a proposal to let foo(_) refer to a function foo without any parameters. GitHub-Link: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md &lt;https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md&gt;<br>&gt; <br>&gt; Comments welcome, especially if someone thinks that any of the issues listed in &quot;Possible issues&quot; are major or sees any other problems.<br>&gt; <br>&gt; – Alex<br>&gt; <br>&gt; <br>&gt; Referencing zero-parameter functions<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;, Pyry Jahkola &lt;https://github.com/pyrtsa&gt;<br>&gt; Status: Draft<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#introduction&gt;Introduction<br>&gt; <br>&gt; Since the approval of SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. This proposal adds a new syntax foo(_) to reference an overloaded function with zero parameters.<br>&gt; <br>&gt; This was one point in the discussion: [Pitch] Richer function identifiers, simpler function types &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/15577/&gt;<br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#motivation&gt;Motivation<br>&gt; <br>&gt; Consider the following example<br>&gt; <br>&gt; class Bar {<br>&gt;   func foo() {<br>&gt;   }<br>&gt; <br>&gt;   func foo(arg: Int) {<br>&gt;   }<br>&gt; }<br>&gt; You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo() as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; We propose that Bar.foo(_) references the function with no parameters just as Bar.foo(arg:) references the function with one argument named arg. <br>&gt; <br>&gt; In the context of functions declarations _ already has the meaning of &quot;there is nothing&quot; (e.g. func foo(_ arg: Int)). Thus, we believe that _ is the right character to mean that a function has no parameters.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#detailed-design&gt;Detailed design<br>&gt; <br>&gt; The unqualified-name grammar rule from SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; changes to <br>&gt; <br>&gt; unqualified-name -&gt; identifier<br>&gt;                   | identifier &#39;(&#39; ((identifier | &#39;_&#39;) &#39;:&#39;)+ &#39;)&#39;<br>&gt;                   | identifier &#39;(_)&#39;<br>&gt; If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; This is a purely additive feature and has no impact on existing code.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#possible-issues&gt;Possible issues<br>&gt; <br>&gt; If Swift should ever support out-only parameters Bar.foo(_) could mean that the only out-only parameter shall be ignored. This would clash with the currently proposed syntax. However, since Swift functions may return multiple values as a tuple, we don&#39;t see this coming.<br>&gt; <br>&gt; Bar.foo(_) may be mistaken for Bar.foo(_:) if there is also a one-parameter function without a label. This mistake would, however, be mostly detected by the compiler when later calling the function with an argument.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-1-barfoo&gt;Alternative 1: Bar.foo<br>&gt; <br>&gt; Let Bar.foo reference the function with zero parameters only. While this works around the possible issue of ignored out-only parameters described above, this has several minor drawbacks to the proposed solution (some of these drawbacks are mutually exclusive based on possible future proposals but one always applies):<br>&gt; <br>&gt; Most functions are not overloadad and using the base name only offers a shorthand way to reference these functions.<br>&gt; This would block the way of allowing properties with the same name as a function with zero parameters by banning Bar.foo as a function reference (could be another proposal once this one is accepted).<br>&gt; Bar.foo(arg:) hints that a function is referenced by its paranthesis. Bar.foo doesn&#39;t include paranthesis, which causes a subtle inconsistency.<br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-2-barfoo-inside-selector&gt;Alternative 2: Bar.foo() inside #selector<br>&gt; <br>&gt; Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here &lt;https://github.com/apple/swift-evolution/pull/280#discussion_r61849122&gt;. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;) to be approved. Issues we see are:<br>&gt; <br>&gt; This gives the illusion that foo is actually called which it isn&#39;t<br>&gt; It doen&#39;t solve the issue of referncing a zero-parameter function in arbitrary expressions somewhere else in code.<br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#future-directions&gt;Future directions<br>&gt; <br>&gt; If this proposal is accepted there is no need that Bar.foo references a function with base name foo since there is a notation with paranthesis for every argument constellation. We could disallow Bar.foo to reference a function and allow a property named foo on Bar. Bar.foo would then refer to this property.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/a9912b93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>May  5, 2016 at 05:00:00pm</p></header><div class="content"><p>Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br></p><p>As to `_`: Like I stated in the proposal the underscore is already used in functions to state that there is no parameter name. So I think it’s a natural extension to also use it for saying that there are no arguments at all.<br></p><p>– Alex<br></p><p>&gt; On 05 May 2016, at 17:21, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt; What’s wrong with `foo()` again? To me, a `_` in the parameter list means that something is there, but the label doesn’t matter.<br>&gt; <br>&gt; - Dave Sweeris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  5, 2016 at 04:00:00pm</p></header><div class="content"><p>I disagree. Not having a parameter label implies presence of a parameter.<br>It is not natural at all to use the same symbol to denote absence of a<br>parameter. `foo(_)` is a single typo away from `foo(_:)`.<br></p><p>IMO, after arbitrary expressions are removed from #selector, it is<br>straightforwardly a bug that `foo()` cannot be used to denote a function<br>with no parameters.<br>On Thu, May 5, 2016 at 10:59 Alex Hoppen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and<br>&gt; returns its return value of type `Int` – not a reference to the function of<br>&gt; type `Void -&gt; Int`.<br>&gt;<br>&gt; As to `_`: Like I stated in the proposal the underscore is already used in<br>&gt; functions to state that there is no parameter name. So I think it’s a<br>&gt; natural extension to also use it for saying that there are no arguments at<br>&gt; all.<br>&gt;<br>&gt; – Alex<br>&gt;<br>&gt; &gt; On 05 May 2016, at 17:21, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What’s wrong with `foo()` again? To me, a `_` in the parameter list<br>&gt; means that something is there, but the label doesn’t matter.<br>&gt; &gt;<br>&gt; &gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/20226ef8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>I agree with Xiaodi about the syntax. We should not use ‘_’ here for the same reason that we do use it for label-less parameters: it makes every argument always marked by at least two characters. That makes it easier to read and harder to typo.<br></p><p>I do see that there’s a problem between ‘foo()’ (a reference to a function with no arguments) and ‘foo()’ (the result of calling a function with no arguments).<br></p><p>I’m personally not so inclined to worry about the “reference to a function” syntax; I’ve ultimately fallen into the camp that prefers a wrapper closure in most cases. The selector case is a little different. If we ban general expressions there, then I think there’s no problem with it being mistaken for an actual call, because nothing in #selector would act like a call anyway. If we don’t, it’d still be unambiguous…but I agree that it could be confusing.<br></p><p>Jordan<br></p><p><br>&gt; On May 5, 2016, at 09:34, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I disagree. Not having a parameter label implies presence of a parameter. It is not natural at all to use the same symbol to denote absence of a parameter. `foo(_)` is a single typo away from `foo(_:)`.<br>&gt; <br>&gt; IMO, after arbitrary expressions are removed from #selector, it is straightforwardly a bug that `foo()` cannot be used to denote a function with no parameters.<br>&gt; On Thu, May 5, 2016 at 10:59 Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`.<br>&gt; <br>&gt; As to `_`: Like I stated in the proposal the underscore is already used in functions to state that there is no parameter name. So I think it’s a natural extension to also use it for saying that there are no arguments at all.<br>&gt; <br>&gt; – Alex<br>&gt; <br>&gt; &gt; On 05 May 2016, at 17:21, David Sweeris &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; What’s wrong with `foo()` again? To me, a `_` in the parameter list means that something is there, but the label doesn’t matter.<br>&gt; &gt;<br>&gt; &gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/2fc48b3e/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br></p><p>Right.<br></p><p>That said, what is wrong with just “foo”?<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27ca9066ad05bd8aa9ec366115f3cd38?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Kurt Werle</string> &lt;kurt at circlew.org&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>On Thu, May 5, 2016 at 10:03 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and<br>&gt; returns its return value of type `Int` – not a reference to the function of<br>&gt; type `Void -&gt; Int`.<br>&gt;<br>&gt; Right.<br>&gt;<br>&gt; That said, what is wrong with just “foo”?<br>&gt;<br></p><p>Yeah, that&#39;d work.  The problems:<br>* Name collisions with variables (not a big deal, I think)<br>* &quot;foo&quot; looks substantially different than &quot;bar(baz:)&quot;, but they mean the<br>same thing<br></p><p>I prefer something like #foo(), #bar(baz:).  Clearly that particular choice<br>can&#39;t work.<br></p><p>Kurt<br>-- <br>kurt at CircleW.org<br>http://www.CircleW.org/kurt/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/2acec499/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 5, 2016, at 10:03, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br>&gt; <br>&gt; Right.<br>&gt; <br>&gt; That said, what is wrong with just “foo”?<br></p><p>As pointed out in the original post, that can refer to both ‘foo()’ and ‘foo(bar:)’ today.<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 5, 2016, at 10:16 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 5, 2016, at 10:03, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br>&gt;&gt; <br>&gt;&gt; Right.<br>&gt;&gt; <br>&gt;&gt; That said, what is wrong with just “foo”?<br>&gt; <br>&gt; As pointed out in the original post, that can refer to both ‘foo()’ and ‘foo(bar:)’ today.<br></p><p>We could change that, so that to refer to `foo(bar:)` you must use the full compound name.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>May  5, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 05 May 2016, at 19:38, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 5, 2016, at 10:16 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 10:03, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, what is wrong with just “foo”?<br>&gt;&gt; <br>&gt;&gt; As pointed out in the original post, that can refer to both ‘foo()’ and ‘foo(bar:)’ today.<br>&gt; <br>&gt; We could change that, so that to refer to `foo(bar:)` you must use the full compound name.<br>&gt; <br>&gt; -Joe<br></p><p>That would be my second favourite option if there is no support for `foo(_)`, which there doesn’t seem to be. If there is support for letting `foo` refer to the zero-parameter function, I will change the proposal.<br></p><p>– Alex<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Can I offer a more verbose alternative? How&#39;s `foo() -&gt; _` for referring to<br>a zero-parameter function? It&#39;s clearly not a function call, and it says<br>you want to match regardless of what the return value is...<br></p><p>On Thu, May 5, 2016 at 1:06 PM, Alex Hoppen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 05 May 2016, at 19:38, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On May 5, 2016, at 10:16 AM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On May 5, 2016, at 10:03, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo`<br>&gt; and returns its return value of type `Int` – not a reference to the<br>&gt; function of type `Void -&gt; Int`.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Right.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; That said, what is wrong with just “foo”?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; As pointed out in the original post, that can refer to both ‘foo()’ and<br>&gt; ‘foo(bar:)’ today.<br>&gt; &gt;<br>&gt; &gt; We could change that, so that to refer to `foo(bar:)` you must use the<br>&gt; full compound name.<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt;<br>&gt; That would be my second favourite option if there is no support for<br>&gt; `foo(_)`, which there doesn’t seem to be. If there is support for letting<br>&gt; `foo` refer to the zero-parameter function, I will change the proposal.<br>&gt;<br>&gt; – Alex<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/e85d561f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>May  6, 2016 at 09:00:00am</p></header><div class="content"><p>Thanks for your feedback so far. Based on the discussion, I have updated the proposal to let `foo` refer to the zero-parameter function instead of `foo(_)`.<br></p><p>The updated proposal is also available on GitHub: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md &lt;https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md&gt;.<br></p><p>Again comments would be greatly appreciated.<br></p><p>– Alex<br></p><p>Referencing zero-parameter functions<br></p><p>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;, Pyry Jahkola &lt;https://github.com/pyrtsa&gt;<br>Status: Draft<br>Review manager: TBD<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#introduction&gt;Introduction<br></p><p>Since the approval of SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. foo currently references all methods with base name foo. If there are multiple methods with this base name, one has to disambiguate the referenced function by its type using as.<br></p><p>This proposal changes the behaviour of foo to always reference a zero-parameter function. To reference a function with more parameters, the argument labels have to be explicitly named (e.g. foo(arg:)).<br></p><p>Originally, the proposal sought to introduce the new syntax foo(_) to reference an overloaded function with zero parameters, but was discarded based on the discussion on swift-evolution &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16150&gt;.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#motivation&gt;Motivation<br></p><p>Consider the following example<br></p><p>class Bar {<br>  func foo() {<br>  }<br></p><p>  func foo(arg: Int) {<br>  }<br>}<br>You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#proposed-solution&gt;Proposed solution<br></p><p>We propose that Bar.foo only references methods with no parameters just as Bar.foo(arg:) references the methods with one argument named arg.<br></p><p>This is a breaking change since Bar.foo currently refers to all methods with base name foo.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#detailed-design&gt;Detailed design<br></p><p>The existing syntax Bar.foo is reinterpreted to not reference any method on Bar with base name foo but to only reference functions named foo that take no parameters.<br></p><p>If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#impact-on-existing-code&gt;Impact on existing code<br></p><p>Existing code that uses Bar.foo to reference methods with parameters needs to be changed. We believe this will effect many developers, so a fix-it would be essential.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#possible-issues&gt;Possible issues<br></p><p>Bar.foo may be mistaken for a reference to a property, since all other references to functions will contain parenthesis if this proposal is accepted.<br></p><p>Most functions are not overloaded and using the base name only offers a shorthand way to reference these functions. If this proposal is accepted, this shorthand is no longer available for methods with parameters.<br></p><p><br> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternatives-considered&gt;Alternatives considered<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-1-barfoo-inside-selector&gt;Alternative 1: Bar.foo() inside #selector<br></p><p>Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here &lt;https://github.com/apple/swift-evolution/pull/280#discussion_r61849122&gt;. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;) to be approved. Issues we see are:<br></p><p>This gives the illusion that foo is actually called which it isn&#39;t<br>It doesn&#39;t solve the issue of referencing a zero-parameter function in arbitrary expressions somewhere else in code.<br></p><p> &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-2-barfoo_&gt;Alternative 2: Bar.foo(_)<br></p><p>The original idea of using Bar.foo(_) to refer to the zero-parameter method was discarded after discussion on the mailing list because of the following reasons:<br></p><p>It is only a single typo away from Bar.foo(_:) which references the method with one unnamed argument<br>In argument lists _ implies the presence of an unnamed parameter, while _ in Bar.foo(_) would mark the absence of a any parameters.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/a3a85ba8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>May 12, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On May 6, 2016, at 12:34 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for your feedback so far. Based on the discussion, I have updated the proposal to let `foo` refer to the zero-parameter function instead of `foo(_)`.<br>&gt; <br>&gt; The updated proposal is also available on GitHub: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md &lt;https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md&gt;.<br></p><p>&gt; <br>&gt; Again comments would be greatly appreciated.<br></p><p>General comment: now that this proposal has pivoted to always requiring the argument labels when referencing a function, the title and introduction are misleading. This is a *much* larger change than Alternative 1 or Alternative 2, and is now source-breaking.<br></p><p>(Personally, I still think “Alternative 1” is the right answer)<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; – Alex<br>&gt; <br>&gt; Referencing zero-parameter functions<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;, Pyry Jahkola &lt;https://github.com/pyrtsa&gt;<br>&gt; Status: Draft<br>&gt; Review manager: TBD<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#introduction&gt;Introduction<br>&gt; <br>&gt; Since the approval of SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. foo currently references all methods with base name foo. If there are multiple methods with this base name, one has to disambiguate the referenced function by its type using as.<br>&gt; <br>&gt; <br>&gt; This proposal changes the behaviour of foo to always reference a zero-parameter function. To reference a function with more parameters, the argument labels have to be explicitly named (e.g. foo(arg:)).<br>&gt; <br>&gt; Originally, the proposal sought to introduce the new syntax foo(_) to reference an overloaded function with zero parameters, but was discarded based on the discussion on swift-evolution &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16150&gt;.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#motivation&gt;Motivation<br>&gt; <br>&gt; Consider the following example<br>&gt; <br>&gt; class Bar {<br>&gt;   func foo() {<br>&gt;   }<br>&gt; <br>&gt;   func foo(arg: Int) {<br>&gt;   }<br>&gt; }<br>&gt; You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; We propose that Bar.foo only references methods with no parameters just as Bar.foo(arg:) references the methods with one argument named arg.<br>&gt; <br>&gt; This is a breaking change since Bar.foo currently refers to all methods with base name foo.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#detailed-design&gt;Detailed design<br>&gt; <br>&gt; The existing syntax Bar.foo is reinterpreted to not reference any method on Bar with base name foo but to only reference functions named foo that take no parameters.<br>&gt; <br>&gt; If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; Existing code that uses Bar.foo to reference methods with parameters needs to be changed. We believe this will effect many developers, so a fix-it would be essential.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#possible-issues&gt;Possible issues<br>&gt; <br>&gt; Bar.foo may be mistaken for a reference to a property, since all other references to functions will contain parenthesis if this proposal is accepted.<br>&gt; <br>&gt; Most functions are not overloaded and using the base name only offers a shorthand way to reference these functions. If this proposal is accepted, this shorthand is no longer available for methods with parameters.<br>&gt; <br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-1-barfoo-inside-selector&gt;Alternative 1: Bar.foo() inside #selector<br>&gt; <br>&gt; Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here &lt;https://github.com/apple/swift-evolution/pull/280#discussion_r61849122&gt;. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;) to be approved. Issues we see are:<br>&gt; <br>&gt; This gives the illusion that foo is actually called which it isn&#39;t<br>&gt; It doesn&#39;t solve the issue of referencing a zero-parameter function in arbitrary expressions somewhere else in code.<br>&gt; <br>&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-2-barfoo_&gt;Alternative 2: Bar.foo(_)<br>&gt; <br>&gt; The original idea of using Bar.foo(_) to refer to the zero-parameter method was discarded after discussion on the mailing list because of the following reasons:<br>&gt; <br>&gt; It is only a single typo away from Bar.foo(_:) which references the method with one unnamed argument<br>&gt; In argument lists _ implies the presence of an unnamed parameter, while _ in Bar.foo(_) would mark the absence of a any parameters.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/afdc746b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>May 12, 2016 at 11:00:00pm</p></header><div class="content"><p>Since there doesn’t seem to be much support for the proposal, I’ll drop it and incorporate Alternative 1 into the #selector proposal like Doug suggested.<br></p><p>– Alex<br></p><p>&gt; On 12 May 2016, at 20:52, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 6, 2016, at 12:34 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for your feedback so far. Based on the discussion, I have updated the proposal to let `foo` refer to the zero-parameter function instead of `foo(_)`.<br>&gt;&gt; <br>&gt;&gt; The updated proposal is also available on GitHub: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md &lt;https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md&gt;.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Again comments would be greatly appreciated.<br>&gt; <br>&gt; General comment: now that this proposal has pivoted to always requiring the argument labels when referencing a function, the title and introduction are misleading. This is a *much* larger change than Alternative 1 or Alternative 2, and is now source-breaking.<br>&gt; <br>&gt; (Personally, I still think “Alternative 1” is the right answer)<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt;&gt; <br>&gt;&gt; – Alex<br>&gt;&gt; <br>&gt;&gt; Referencing zero-parameter functions<br>&gt;&gt; <br>&gt;&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt;&gt; Author(s): Alex Hoppen &lt;https://github.com/ahoppen&gt;, Pyry Jahkola &lt;https://github.com/pyrtsa&gt;<br>&gt;&gt; Status: Draft<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; Since the approval of SE-0021 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt; it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. foo currently references all methods with base name foo. If there are multiple methods with this base name, one has to disambiguate the referenced function by its type using as.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This proposal changes the behaviour of foo to always reference a zero-parameter function. To reference a function with more parameters, the argument labels have to be explicitly named (e.g. foo(arg:)).<br>&gt;&gt; <br>&gt;&gt; Originally, the proposal sought to introduce the new syntax foo(_) to reference an overloaded function with zero parameters, but was discarded based on the discussion on swift-evolution &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/16150&gt;.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; Consider the following example<br>&gt;&gt; <br>&gt;&gt; class Bar {<br>&gt;&gt;   func foo() {<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func foo(arg: Int) {<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#proposed-solution&gt;Proposed solution<br>&gt;&gt; <br>&gt;&gt; We propose that Bar.foo only references methods with no parameters just as Bar.foo(arg:) references the methods with one argument named arg.<br>&gt;&gt; <br>&gt;&gt; This is a breaking change since Bar.foo currently refers to all methods with base name foo.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#detailed-design&gt;Detailed design<br>&gt;&gt; <br>&gt;&gt; The existing syntax Bar.foo is reinterpreted to not reference any method on Bar with base name foo but to only reference functions named foo that take no parameters.<br>&gt;&gt; <br>&gt;&gt; If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt; <br>&gt;&gt; Existing code that uses Bar.foo to reference methods with parameters needs to be changed. We believe this will effect many developers, so a fix-it would be essential.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#possible-issues&gt;Possible issues<br>&gt;&gt; <br>&gt;&gt; Bar.foo may be mistaken for a reference to a property, since all other references to functions will contain parenthesis if this proposal is accepted.<br>&gt;&gt; <br>&gt;&gt; Most functions are not overloaded and using the base name only offers a shorthand way to reference these functions. If this proposal is accepted, this shorthand is no longer available for methods with parameters.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternatives-considered&gt;Alternatives considered<br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-1-barfoo-inside-selector&gt;Alternative 1: Bar.foo() inside #selector<br>&gt;&gt; <br>&gt;&gt; Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here &lt;https://github.com/apple/swift-evolution/pull/280#discussion_r61849122&gt;. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link &lt;https://github.com/ahoppen/swift-evolution/blob/arbitrary-expressions-in-selectors/proposals/0000-arbitrary-expressions-in-selectors.md&gt;) to be approved. Issues we see are:<br>&gt;&gt; <br>&gt;&gt; This gives the illusion that foo is actually called which it isn&#39;t<br>&gt;&gt; It doesn&#39;t solve the issue of referencing a zero-parameter function in arbitrary expressions somewhere else in code.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://github.com/ahoppen/swift-evolution/tree/reference-zero-param-func#alternative-2-barfoo_&gt;Alternative 2: Bar.foo(_)<br>&gt;&gt; <br>&gt;&gt; The original idea of using Bar.foo(_) to refer to the zero-parameter method was discarded after discussion on the mailing list because of the following reasons:<br>&gt;&gt; <br>&gt;&gt; It is only a single typo away from Bar.foo(_:) which references the method with one unnamed argument<br>&gt;&gt; In argument lists _ implies the presence of an unnamed parameter, while _ in Bar.foo(_) would mark the absence of a any parameters.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/a475ed8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 13, 2016 at 12:00:00am</p></header><div class="content"><p>What about &lt;name&gt;:&lt;argument list&gt;? You could reference &quot;foo()&quot; as &quot;foo:()&quot;, &quot;foo(arg: T)&quot; as &quot;foo:(arg:)&quot;, and the property &quot;foo&quot; as &quot;foo:&quot;.<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 12, 2016, at 16:40, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Since there doesn’t seem to be much support for the proposal, I’ll drop it and incorporate Alternative 1 into the #selector proposal like Doug suggested.<br>&gt; <br>&gt; – Alex<br>&gt; <br>&gt;&gt;&gt; On 12 May 2016, at 20:52, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 6, 2016, at 12:34 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for your feedback so far. Based on the discussion, I have updated the proposal to let `foo` refer to the zero-parameter function instead of `foo(_)`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The updated proposal is also available on GitHub: https://github.com/ahoppen/swift-evolution/blob/reference-zero-param-func/proposals/0000-refernce-zero-param-func.md.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Again comments would be greatly appreciated.<br>&gt;&gt; <br>&gt;&gt; General comment: now that this proposal has pivoted to always requiring the argument labels when referencing a function, the title and introduction are misleading. This is a *much* larger change than Alternative 1 or Alternative 2, and is now source-breaking.<br>&gt;&gt; <br>&gt;&gt; (Personally, I still think “Alternative 1” is the right answer)<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; – Alex<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Referencing zero-parameter functions<br>&gt;&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt;&gt; Author(s): Alex Hoppen, Pyry Jahkola<br>&gt;&gt;&gt; Status: Draft<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since the approval of SE-0021 it is possible to reference a function by its argument names using the foo(arg:) syntax but there is no way to reference a zero-parameter function. foo currently references all methods with base name foo. If there are multiple methods with this base name, one has to disambiguate the referenced function by its type using as.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal changes the behaviour of foo to always reference a zero-parameter function. To reference a function with more parameters, the argument labels have to be explicitly named (e.g. foo(arg:)).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Originally, the proposal sought to introduce the new syntax foo(_) to reference an overloaded function with zero parameters, but was discarded based on the discussion on swift-evolution.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consider the following example<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Bar {<br>&gt;&gt;&gt;   func foo() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func foo(arg: Int) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; You can reference foo(arg: Int) using Bar.foo(arg:) but there is currently no syntax to reference foo() without using disambiguation by type Bar.foo as () -&gt; Void. We believe this is a major hole in the current disambiguation syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposed solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We propose that Bar.foo only references methods with no parameters just as Bar.foo(arg:) references the methods with one argument named arg.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a breaking change since Bar.foo currently refers to all methods with base name foo.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The existing syntax Bar.foo is reinterpreted to not reference any method on Bar with base name foo but to only reference functions named foo that take no parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If two overloads with zero-parameters exist with different return types, disambiguation has still to be done via as just like with the foo(arg:) syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Existing code that uses Bar.foo to reference methods with parameters needs to be changed. We believe this will effect many developers, so a fix-it would be essential.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Possible issues<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Bar.foo may be mistaken for a reference to a property, since all other references to functions will contain parenthesis if this proposal is accepted.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most functions are not overloaded and using the base name only offers a shorthand way to reference these functions. If this proposal is accepted, this shorthand is no longer available for methods with parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternatives considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alternative 1: Bar.foo() inside #selector<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Let Bar.foo() refer to the zero-parameter function only inside #selector as it was proposed by Doug Gregor here. This requires the proposal to disallow arbitrary expressions in #selector (GitHub-Link) to be approved. Issues we see are:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This gives the illusion that foo is actually called which it isn&#39;t<br>&gt;&gt;&gt; It doesn&#39;t solve the issue of referencing a zero-parameter function in arbitrary expressions somewhere else in code.<br>&gt;&gt;&gt; Alternative 2: Bar.foo(_)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The original idea of using Bar.foo(_) to refer to the zero-parameter method was discarded after discussion on the mailing list because of the following reasons:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It is only a single typo away from Bar.foo(_:) which references the method with one unnamed argument<br>&gt;&gt;&gt; In argument lists _ implies the presence of an unnamed parameter, while _ in Bar.foo(_) would mark the absence of a any parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160513/f5a85a3d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Referencing zero-parameter functions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 10:38 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 5, 2016, at 10:16 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 10:03, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 8:59 AM, Alex Hoppen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Say you have the function `foo() -&gt; Int`. Then `foo()` calls `foo` and returns its return value of type `Int` – not a reference to the function of type `Void -&gt; Int`. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, what is wrong with just “foo”?<br>&gt;&gt; <br>&gt;&gt; As pointed out in the original post, that can refer to both ‘foo()’ and ‘foo(bar:)’ today.<br>&gt; <br>&gt; We could change that, so that to refer to `foo(bar:)` you must use the full compound name.<br></p><p>Right.  that seems like the most logical solution to this problem, if it is really significant enough to fix.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
