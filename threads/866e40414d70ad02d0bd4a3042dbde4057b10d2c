<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] Find alternatives to `switch self`</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 23, 2016 at 05:00:00pm</p></header><div class="content"><p>on Wed Mar 23 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; If you&#39;ve written enums before, you&#39;ve no doubt noticed the irritating<br>&gt; phenomenon of `switch self` being absolutely everywhere. I first<br>&gt; discovered this in some of my very first Swift code, code so old we<br>&gt; were still using the `T[]` shorthand syntax:<br>&gt;<br>&gt;     enum Suit: Int {<br>&gt;         case Hearts, Spades, Diamonds, Clubs<br>&gt;<br>&gt;         static var all: Suit[] { return [ Hearts, Spades, Diamonds, Clubs ] }<br>&gt;<br>&gt;         var description: String {<br>&gt;             switch(self) {<br>&gt;             case .Hearts:<br>&gt;                 return &quot;♥️&quot;<br>&gt;             case .Spades:<br>&gt;                 return &quot;♠️&quot;<br>&gt;             case .Diamonds:<br>&gt;                 return &quot;♦️&quot;<br>&gt;             case .Clubs:<br>&gt;                 return &quot;♣️&quot;<br>&gt;             }<br>&gt;         }<br>&gt;<br>&gt;         var isRed: Bool {<br>&gt;             switch(self) {<br>&gt;             case .Hearts, .Diamonds:<br>&gt;                 return true<br>&gt;             case .Spades, .Clubs:<br>&gt;                 return false<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; It would be nice if we could somehow eliminate that. I have two suggestions:<br>&gt;<br>&gt; * Implicitly switch on `self` at the top level of a function or<br>&gt; accessor (or at least an enum one with top-level `case` statements).<br>&gt;<br>&gt;     enum Suit: Int {<br>&gt;         case Hearts, Spades, Diamonds, Clubs<br>&gt;<br>&gt;         static var all = [ Hearts, Spades, Diamonds, Clubs ]<br>&gt;<br>&gt;         var description: String {<br>&gt;         case .Hearts:<br>&gt;             return &quot;♥️&quot;<br>&gt;         case .Spades:<br>&gt;             return &quot;♠️&quot;<br>&gt;         case .Diamonds:<br>&gt;             return &quot;♦️&quot;<br>&gt;         case .Clubs:<br>&gt;             return &quot;♣️&quot;<br>&gt;         }<br>&gt;<br>&gt;         var isRed: Bool {<br>&gt;         case .Hearts, .Diamonds:<br>&gt;             return true<br>&gt;         case .Spades, .Clubs:<br>&gt;             return false<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt; * Allow you to attach member definitions to particular cases. It would<br>&gt; be an error if they didn&#39;t all define the same members, unless there<br>&gt; was a top-level catchall.<br>&gt;<br>&gt;     enum Suit: Int {<br>&gt;         var isRed: Bool { return false }<br>&gt;<br>&gt;         case Hearts {<br>&gt;             let description: String { return &quot;♥️&quot; }<br>&gt;             let isRed: Bool { return true }<br>&gt;         }<br>&gt;         case Spades {<br>&gt;             let description: String { return  &quot;♠️&quot; }<br>&gt;         }<br>&gt;         case Diamonds {<br>&gt;             let description: String { return  &quot;♦️&quot; }<br>&gt;             let isRed: Bool { return true }<br>&gt;         }<br>&gt;         case Clubs {<br>&gt;             let description: String { return  &quot;♣️&quot; }<br>&gt;         }<br>&gt;<br>&gt;         static var all = [ Hearts, Spades, Diamonds, Clubs ]<br>&gt;     }<br>&gt;<br>&gt; Any thoughts? This has, to be honest, bothered me since approximately<br>&gt; the third day I used the language; I&#39;d love to address it sooner or<br>&gt; later.<br></p><p>Type-switching is a “feature” of enums. If you don&#39;t want it, you could<br>consider using protocols instead :-)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Idea] Find alternatives to `switch self`</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Type-switching is a “feature” of enums. If you don&#39;t want it, you could<br>&gt; consider using protocols instead :-)<br></p><p>I don&#39;t think it&#39;s a bad thing that you *can* switch on an enum&#39;s type. Rather, I think that it is so commonly necessary that we should consider ways to avoid having to state it explicitly.<br></p><p>To try to get an idea of how common this is, I did a quick survey of the standard library. Of the 35 enum instance members I found:<br></p><p>* 12 had a `switch self` statement at the top level.<br>* 12 more, mainly in HashedCollections.swift.gyb, had a stdlib-only speed hack followed by a `switch self` containing the rest of the code. In normal user code, these would have just had the `switch self`.<br>* 11 had other code at the top level.<br></p><p>2/3 of members being entirely inside a `switch self` fits with my general sense of how things go down in user code.<br></p><p>I feel like, at that point, the `switch self` is basically just boilerplate, and we ought to consider whether or not we can get rid of it somehow.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
