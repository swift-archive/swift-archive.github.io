<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>November  9, 2016 at 08:00:00pm</p></header><div class="content"><p>1.<br></p><p>   Upon implementation of SE-0077 in Swift 3, some libraries started to<br>   drop operators entirely: link #1<br>   &lt;https://github.com/antitypical/Result/issues/191&gt;, link #2<br>   &lt;https://github.com/typelift/SwiftCheck/pull/179&gt;.<br>   - Declarations of the same custom operator with different precedence<br>      groups create a conflict.<br>      - The conflict can be resolved manually, but the resolution has to be<br>      made in *every* file that uses the operator, which defeats the reason<br>      for using operators in the first place.<br>      - This is a part of a larger problem of conflict resolution, for<br>      which we don’t currently have a systematic approach.<br>      - Many libraries dealing with custom operators choose to import Runes<br>      &lt;https://github.com/thoughtbot/Runes&gt;, which is basically a stockpile<br>      of operator declarations. But it conflicts with Result, Swiftx and<br>      Operadics.<br>   2.<br></p><p>   Even if operator conflicts are resolved, precedencegroups’ names are not<br>   module-scoped, and don’t support conflict resolution.<br>   - Many libraries decide to just go ahead and prefix precedencegroups<br>      with module name.<br>      - Some developer on Github specifically complained about having to do<br>      this, but I’ve lost the link.<br>   3.<br></p><p>   Some precedencegroup names don’t seem perfect to me. This concern may<br>   not be strong enough to make a source-breaking change, though.<br>   - LogicalDisjunctionPrecedence -&gt; DisjunctionPrecedence<br>      - LogicalConjunctionPrecedence -&gt; ConjunctionPrecedence<br>      - BitwiseShiftPrecedence should be renamed to ExponentiationPrecedence,<br>      if we decide not to branch bitwise operators off arithmetic.<br>   4.<br></p><p>   For the mentioned branching, I’m going to post a separate [Pitch] soon.<br></p><p>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161109/98d6de1e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November  9, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Upon implementation of SE-0077 in Swift 3, some libraries started to drop operators entirely: link #1 &lt;https://github.com/antitypical/Result/issues/191&gt;, link #2 &lt;https://github.com/typelift/SwiftCheck/pull/179&gt;.<br>&gt; Declarations of the same custom operator with different precedence groups create a conflict.<br>&gt; The conflict can be resolved manually, but the resolution has to be made in every file that uses the operator, which defeats the reason for using operators in the first place.<br>&gt; This is a part of a larger problem of conflict resolution, for which we don’t currently have a systematic approach.<br>&gt; Many libraries dealing with custom operators choose to import Runes &lt;https://github.com/thoughtbot/Runes&gt;, which is basically a stockpile of operator declarations. But it conflicts with Result, Swiftx and Operadics.<br>&gt; Even if operator conflicts are resolved, precedencegroups’ names are not module-scoped, and don’t support conflict resolution.<br>&gt; Many libraries decide to just go ahead and prefix precedencegroups with module name.<br>&gt; Some developer on Github specifically complained about having to do this, but I’ve lost the link.<br>Do you know if bugs have been filed about these issues? IIRC, SE-0077 specified that precedence groups should act like normal named declarations and be scopable. The fact that they aren&#39;t sounds like a bug to be fixed.<br></p><p>-Joe<br>&gt; <br>&gt; Some precedencegroup names don’t seem perfect to me. This concern may not be strong enough to make a source-breaking change, though.<br>&gt; LogicalDisjunctionPrecedence -&gt; DisjunctionPrecedence<br>&gt; LogicalConjunctionPrecedence -&gt; ConjunctionPrecedence<br>&gt; BitwiseShiftPrecedence should be renamed to ExponentiationPrecedence, if we decide not to branch bitwise operators off arithmetic.<br>&gt; For the mentioned branching, I’m going to post a separate [Pitch] soon.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161109/e73f5567/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>November  9, 2016 at 10:00:00pm</p></header><div class="content"><p>2016-11-09 21:56 GMT+03:00 Joe Groff &lt;jgroff at apple.com&gt;:<br>&gt;<br>&gt; Do you know if bugs have been filed about these issues? IIRC, SE-0077<br>&gt; specified that precedence groups should act like normal named declarations<br>&gt; and be scopable. The fact that they aren&#39;t sounds like a bug to be fixed.<br>&gt;<br></p><p>I don&#39;t know of any. At one stage during review a core team insisted on<br>that, because it is simpler to implement, plus conflicts in custom<br>operators sphere are unavoidable anyway. But I agree that it can be<br>considered a bug.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161109/b62be8f6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>November  9, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; 	• Upon implementation of SE-0077 in Swift 3, some libraries started to drop operators entirely: link #1, link #2.<br>&gt; 		• Declarations of the same custom operator with different precedence groups create a conflict.<br>&gt; 		• The conflict can be resolved manually, but the resolution has to be made in every file that uses the operator, which defeats the reason for using operators in the first place.<br>&gt; 		• This is a part of a larger problem of conflict resolution, for which we don’t currently have a systematic approach.<br></p><p>It makes sense to me to provide a more module-wide conflict resolution mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism where a file can introduce imports into other files within a project.<br></p><p>&gt; 		• Many libraries dealing with custom operators choose to import Runes, which is basically a stockpile of operator declarations. But it conflicts with Result, Swiftx and Operadics.<br></p><p>Won&#39;t this just shake itself out pretty soon, assuming these projects have any interest in interoperating?<br></p><p>&gt; 	• Even if operator conflicts are resolved, precedencegroups’ names are not module-scoped, and don’t support conflict resolution.<br>&gt; 		• Many libraries decide to just go ahead and prefix precedencegroups with module name.<br>&gt; 		• Some developer on Github specifically complained about having to do this, but I’ve lost the link.<br></p><p>Seems like a bug.<br></p><p>&gt; 	• Some precedencegroup names don’t seem perfect to me. This concern may not be strong enough to make a source-breaking change, though.<br>&gt; 		• LogicalDisjunctionPrecedence -&gt; DisjunctionPrecedence<br>&gt; 		• LogicalConjunctionPrecedence -&gt; ConjunctionPrecedence<br>&gt; 		• BitwiseShiftPrecedence should be renamed to ExponentiationPrecedence, if we decide not to branch bitwise operators off arithmetic.<br></p><p>Yeah, the time for this feedback was several months ago.<br></p><p>John.<br></p><p>&gt; 	• For the mentioned branching, I’m going to post a separate [Pitch] soon.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>Some concerns on custom operators</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>November  9, 2016 at 11:00:00pm</p></header><div class="content"><p>2016-11-09 22:20 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; &gt; On Nov 9, 2016, at 9:25 AM, Anton Zhilin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;       • Upon implementation of SE-0077 in Swift 3, some libraries<br>&gt; started to drop operators entirely: link #1, link #2.<br>&gt; &gt;               • Declarations of the same custom operator with different<br>&gt; precedence groups create a conflict.<br>&gt; &gt;               • The conflict can be resolved manually, but the<br>&gt; resolution has to be made in every file that uses the operator, which<br>&gt; defeats the reason for using operators in the first place.<br>&gt; &gt;               • This is a part of a larger problem of conflict<br>&gt; resolution, for which we don’t currently have a systematic approach.<br>&gt;<br>&gt; It makes sense to me to provide a more module-wide conflict resolution<br>&gt; mechanism.  Maybe we can have some sort of &quot;internal export&quot; mechanism<br>&gt; where a file can introduce imports into other files within a project.<br>&gt;<br></p><p>It would also be generally useful for modules that are made use of<br>throughout the project, like logging or those generic operators and<br>collections libraries. I can create a proposal for that.<br></p><p>&gt;               • Many libraries dealing with custom operators choose to<br>&gt; import Runes, which is basically a stockpile of operator declarations. But<br>&gt; it conflicts with Result, Swiftx and Operadics.<br>&gt;<br>&gt; Won&#39;t this just shake itself out pretty soon, assuming these projects have<br>&gt; any interest in interoperating?<br></p><p><br>Maybe. Anyway, &quot;internal import&quot; can make such conflicts not that much of a<br>problem.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161109/cd684768/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
