<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>I love that the team has released API Design Guidelines and find them very helpful. One piece of advice, however, seems to be at odds with current Standard Library practice.<br></p><p>Currently the methods sort() and sortInPlace() are the non-mutating and mutating versions of sorting a collection. Similarly, there are pairs of methods in Set named union() and unionInPlace(), intersect() and intersectInPlace() and so on.<br></p><p>I think the x(), xInPlace() pairs are easier to use than the previous pairs. the inPlace variant is clearly the mutating implementation as the name tells me that the operation is going to be performed in place on the reciever.<br></p><p>Previously the sort methods were named sort() and sorted(). I never could remember which is which. The API Guidelines currently recommend this sort/sorted practice as opposed to  sort/sortInPlace. <br></p><p>I know this is a small issue - given the many important tasks you have before you, but I’d love to see the section “Be Grammatical” revised to update the following advice to match current practice. The following two are not consistent with library practices.<br></p><p>Uses of mutating methods should read as imperative verb phrases, e.g., x.reverse(), x.sort(), x.append(y).<br></p><p> and<br></p><p>When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed/ing” rule, e.g. the non-mutating versions of x.sort() and x.append(y) are x.sorted() and x.appending(y).<br></p><p>The Swift Programming Language Guide 2.1 reflects the actual use of sort()<br></p><p>For example, the Swift standard library provides both the mutating method sortInPlace() and the nonmutating method sort() to collections whose generator element conforms to the Comparableprotocol. <br></p><p>Note that in the API Guidelines sort() should be mutating and in actuality (and in the Language Guide) sort() is non-mutating.<br></p><p><br></p><p><br>Thank you,<br></p><p>Daniel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/7b277522/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I love that the team has released API Design Guidelines and find them very helpful. One piece of advice, however, seems to be at odds with current Standard Library practice.<br>&gt; <br>&gt; Currently the methods sort() and sortInPlace() are the non-mutating and mutating versions of sorting a collection. Similarly, there are pairs of methods in Set named union() and unionInPlace(), intersect() and intersectInPlace() and so on.<br></p><p>Hi Daniel,<br></p><p>This is a known issue, and it is because we want to keep Swift 2.2 reasonable source compatible with Swift 2.  The changes to the standard library will land after Swift 2.2 branches for its release in the spring.  <br></p><p>If you’re interested in more details on this effort, check out this blog post:<br>https://swift.org/blog/swift-3-api-design/ &lt;https://swift.org/blog/swift-3-api-design/&gt;<br></p><p>It includes a link to the diff-in-progress for the standard library.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/8961cb30/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 3:03 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I love that the team has released API Design Guidelines and find them very<br>&gt; helpful. One piece of advice, however, seems to be at odds with current<br>&gt; Standard Library practice.<br>&gt;<br>&gt; Currently the methods sort() and sortInPlace() are the non-mutating and<br>&gt; mutating versions of sorting a collection. Similarly, there are pairs of<br>&gt; methods in Set named union() and unionInPlace(), intersect() and<br>&gt; intersectInPlace() and so on.<br>&gt;<br>&gt;<br>&gt; Hi Daniel,<br>&gt;<br>&gt; This is a known issue, and it is because we want to keep Swift 2.2<br>&gt; reasonable source compatible with Swift 2.  The changes to the standard<br>&gt; library will land after Swift 2.2 branches for its release in the spring.<br>&gt;<br>&gt; If you’re interested in more details on this effort, check out this blog<br>&gt; post:<br>&gt; https://swift.org/blog/swift-3-api-design/<br>&gt;<br>&gt; It includes a link to the diff-in-progress for the standard library.<br>&gt;<br></p><p>Hi Chris,<br></p><p>I think Daniel is not highlighting the inconsistency, but saying that he<br>likes ~InPlace better:<br></p><p>On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br>&gt; Previously the sort methods were named sort() and sorted(). I never could<br>remember which is which.<br></p><p>Dmitri<br></p><p><br>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/c89eb2f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  6, 2015 at 06:00:00pm</p></header><div class="content"><p>Yes<br>&gt; On Dec 6, 2015, at 6:10 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 3:03 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I love that the team has released API Design Guidelines and find them very helpful. One piece of advice, however, seems to be at odds with current Standard Library practice.<br>&gt;&gt; <br>&gt;&gt; Currently the methods sort() and sortInPlace() are the non-mutating and mutating versions of sorting a collection. Similarly, there are pairs of methods in Set named union() and unionInPlace(), intersect() and intersectInPlace() and so on.<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt; This is a known issue, and it is because we want to keep Swift 2.2 reasonable source compatible with Swift 2.  The changes to the standard library will land after Swift 2.2 branches for its release in the spring.  <br>&gt; <br>&gt; If you’re interested in more details on this effort, check out this blog post:<br>&gt; https://swift.org/blog/swift-3-api-design/ &lt;https://swift.org/blog/swift-3-api-design/&gt;<br>&gt; <br>&gt; It includes a link to the diff-in-progress for the standard library.<br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; I think Daniel is not highlighting the inconsistency, but saying that he likes ~InPlace better:<br>&gt; <br>&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; Previously the sort methods were named sort() and sorted(). I never could remember which is which.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/28fc8376/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>Ah, sorry for the misunderstanding!<br></p><p>-Chris<br></p><p>&gt; On Dec 6, 2015, at 3:10 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 3:03 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I love that the team has released API Design Guidelines and find them very helpful. One piece of advice, however, seems to be at odds with current Standard Library practice.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Currently the methods sort() and sortInPlace() are the non-mutating and mutating versions of sorting a collection. Similarly, there are pairs of methods in Set named union() and unionInPlace(), intersect() and intersectInPlace() and so on.<br>&gt;&gt; <br>&gt;&gt; Hi Daniel,<br>&gt;&gt; <br>&gt;&gt; This is a known issue, and it is because we want to keep Swift 2.2 reasonable source compatible with Swift 2.  The changes to the standard library will land after Swift 2.2 branches for its release in the spring.  <br>&gt;&gt; <br>&gt;&gt; If you’re interested in more details on this effort, check out this blog post:<br>&gt;&gt; https://swift.org/blog/swift-3-api-design/<br>&gt;&gt; <br>&gt;&gt; It includes a link to the diff-in-progress for the standard library.<br>&gt; <br>&gt; <br>&gt; Hi Chris,<br>&gt; <br>&gt; I think Daniel is not highlighting the inconsistency, but saying that he likes ~InPlace better:<br>&gt; <br>&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; Previously the sort methods were named sort() and sorted(). I never could remember which is which.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/fbcf019a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Proposal: Update the API Design Guidelines to reflect current Standard Library method naming conventions</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>December  6, 2015 at 06:00:00pm</p></header><div class="content"><p>Thank you<br>&gt; On Dec 6, 2015, at 6:03 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 6:40 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I love that the team has released API Design Guidelines and find them very helpful. One piece of advice, however, seems to be at odds with current Standard Library practice.<br>&gt;&gt; <br>&gt;&gt; Currently the methods sort() and sortInPlace() are the non-mutating and mutating versions of sorting a collection. Similarly, there are pairs of methods in Set named union() and unionInPlace(), intersect() and intersectInPlace() and so on.<br>&gt; <br>&gt; Hi Daniel,<br>&gt; <br>&gt; This is a known issue, and it is because we want to keep Swift 2.2 reasonable source compatible with Swift 2.  The changes to the standard library will land after Swift 2.2 branches for its release in the spring.  <br>&gt; <br>&gt; If you’re interested in more details on this effort, check out this blog post:<br>&gt; https://swift.org/blog/swift-3-api-design/ &lt;https://swift.org/blog/swift-3-api-design/&gt;<br>&gt; <br>&gt; It includes a link to the diff-in-progress for the standard library.<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/e523f54d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
