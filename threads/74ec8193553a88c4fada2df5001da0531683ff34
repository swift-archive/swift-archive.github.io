<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  9, 2016 at 10:00:00am</p></header><div class="content"><p>Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br></p><p>func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br></p><p>This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/74ecff34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>March  9, 2016 at 11:00:00am</p></header><div class="content"><p>+1000000000000000 =)<br></p><p>-David<br></p><p>&gt; On Mar 9, 2016, at 10:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/4eb0b398/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  9, 2016 at 12:00:00pm</p></header><div class="content"><p>+1.<br></p><p>Swift is not Objective-C.<br></p><p>-- E<br></p><p>&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/8cfcc625/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>March  9, 2016 at 08:00:00pm</p></header><div class="content"><p>+1<br></p><p>On Wed, Mar 9, 2016 at 8:04 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1.<br>&gt;<br>&gt; Swift is not Objective-C.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/cee73da8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>March  9, 2016 at 07:00:00pm</p></header><div class="content"><p>You say it like it is a bad thing :P.<br></p><p>+1 to argument labels. The thing I dislike the most in C/C++/Java... The lack of them :).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 9 Mar 2016, at 19:04, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1.<br>&gt; <br>&gt; Swift is not Objective-C.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/ee876168/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>+0.8 - change is hard. :P<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Mar 9, 2016, at 12:58 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>March  9, 2016 at 12:00:00pm</p></header><div class="content"><p>+1 Yes<br></p><p>the current solution makes me wish we still have the # from swift 1 ;)<br></p><p>	func foo(x x: Int, y: Int) // Swift 2<br>	func foo(#x: Int, y: Int) // Swift 1<br></p><p><br>&gt; On Mar 9, 2016, at 10:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/f4e36dd3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5e393bcde3a003bb7c1525c8e9877f2a?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Tanner Nelson</string> &lt;me at tanner.xyz&gt;<p>March  9, 2016 at 03:00:00pm</p></header><div class="content"><p>I would agree that in following the Swift.org API Design Guidelines I&#39;ve had to do a lot of `func foo(x x: Type)`.<br></p><p>But simple functions like `.remove(element)` or `.append(element)` that really don&#39;t need labels are ubiquitous and would need to be changed to `_ x:`. <br></p><p>I assume the goal is to have the default case be whatever developers will use most commonly. <br></p><p>&gt; On Mar 9, 2016, at 3:15 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 Yes<br>&gt; <br>&gt; the current solution makes me wish we still have the # from swift 1 ;)<br>&gt; <br>&gt; 	func foo(x x: Int, y: Int) // Swift 2<br>&gt; 	func foo(#x: Int, y: Int) // Swift 1<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 10:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/17c4c34c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>March  9, 2016 at 04:00:00pm</p></header><div class="content"><p>I actually thought that this change was implied with the new guidelines.<br></p><p>Félix<br></p><p>&gt; Le 9 mars 2016 à 15:35:12, Tanner Nelson via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I would agree that in following the Swift.org &lt;http://swift.org/&gt; API Design Guidelines I&#39;ve had to do a lot of `func foo(x x: Type)`.<br>&gt; <br>&gt; But simple functions like `.remove(element)` or `.append(element)` that really don&#39;t need labels are ubiquitous and would need to be changed to `_ x:`. <br>&gt; <br>&gt; I assume the goal is to have the default case be whatever developers will use most commonly. <br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 3:15 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 Yes<br>&gt;&gt; <br>&gt;&gt; the current solution makes me wish we still have the # from swift 1 ;)<br>&gt;&gt; <br>&gt;&gt; 	func foo(x x: Int, y: Int) // Swift 2<br>&gt;&gt; 	func foo(#x: Int, y: Int) // Swift 1<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 9, 2016, at 10:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/f48c29f2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>March  9, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>I&#39;d like the same rules for subscripts:<br></p><p>e.g. public subscript (_ index: Int) -&gt; Element<br></p><p>And also for closures, so that the Clang Importer can use the same block parameter names as Objective-C:<br></p><p>e.g. public func enumerateByteRanges(_ block: (_ bytes: UnsafePointer&lt;Void&gt;, _ byteRange: NSRange, _ stop: UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Void)<br></p><p>The latter wouldn&#39;t affect public API, but could be used in Xcode&#39;s auto-completion of the trailing closure.<br></p><p>-- Ben<br></p><p>&gt; On 9 Mar 2016, at 18:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/60ea78e8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br></p><p>+1. (This was actually in my mental list of things to propose.)<br></p><p>I believe this leaves only subscripts with a rule that doesn&#39;t label all parameters. Subscripts (or at least unary subscripts) *should* usually have unlabeled parameters, but having a single rule might be worth requiring `_` in those.<br></p><p>I also think there&#39;s a good case for bringing back something like the old `#foo`, but that&#39;s a separable issue.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  9, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; I also think there&#39;s a good case for bringing back something like the old `#foo`, but that&#39;s a separable issue.<br></p><p>Wait, what was I thinking? Scratch that.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March  9, 2016 at 10:00:00pm</p></header><div class="content"><p>+0.9<br>Although I favor a different approach discussed in an old thread, the major goal in this discussion was unification.<br></p><p>I&#39;m not that sure that a labeled first parameter is the best choice for the majority of methods, but I&#39;m confident to find ways to avoid most underscores ;-)<br></p><p>Tino<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 10, 2016 at 09:00:00am</p></header><div class="content"><p>Definite +1 from me.<br></p><p>On Thursday, 10 March 2016, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/3b083f7e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March  9, 2016 at 11:00:00pm</p></header><div class="content"><p>+1<br></p><p>P.S. During my Swift tutoring lessons, the current behavior confuses everybody to no end.<br></p><p>R+<br></p><p>&gt; On 9 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/dca26e93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3e4acc351c34224514f9d58b08389390?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Myles Schultz</string> &lt;myleslschultz at icloud.com&gt;<p>March  9, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Mar 9, 2016, at 5:24 PM, Rudolf Adamkovič via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt; P.S. During my Swift tutoring lessons, the current behavior confuses everybody to no end.<br></p><p>…are we sure this isn’t just because people are just down right daft at times.  I would in no way consider the Swift 2 syntax confusing.  It’s ugly (compared to the proposed &#39;func foo(x: Int, y: Int)&#39;) and frustrating to be sure, but not confusing.  Like all students learning something, sometimes one just have to take something at face value—it is what it is and that’s life, haha.  Sometimes I really find myself wondering if anyone has ever read “The Swift Programming Language” text.  It always seems like people spend more time just “playing around&quot; with Swift—learning by trial and error.  That’s a bad idea for learning anything as experimenting and understanding what the result requires knowing something in the first place.<br></p><p>No offense, but if people would spend more time learning the language instead of comparing it to other languages while they learn it, they may not have such problems.  Perhaps even a good number of the arguments put forth on these threads may not come up either… food for thought.<br></p><p>I’m definitely +1 on making ‘func&#39; and and ‘init&#39; have the same type of argument signature.<br></p><p>    func foo(x: Int, y: Int) // Looks so much BETTER!!!!<br></p><p>Myles<br></p><p>&gt; R+<br>&gt; <br>&gt;&gt; On 9 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/316102ea/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>March  9, 2016 at 05:00:00pm</p></header><div class="content"><p>+1<br></p><p>Please, please, please! :)<br></p><p>On Wed, Mar 9, 2016 at 1:58 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/3de37ae5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>March  9, 2016 at 11:00:00pm</p></header><div class="content"><p>Looking at my code, the majority of methods should still have the first parameter unlabeled. <br></p><p>I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br></p><p>— Radek<br></p><p>&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/042057ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>March  9, 2016 at 05:00:00pm</p></header><div class="content"><p>This is my concern too. Our guidelines often lead to the first parameter having a label, but usually that name isn&#39;t the same as the name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m pretty sure the common case is still unlabeled. Does that justify the complexity of the current rule?<br></p><p>(But because Objective-C methods will now often have labeled arguments, it would at least no longer be a marker differentiating &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br></p><p>Jordan<br></p><p><br>&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Looking at my code, the majority of methods should still have the first parameter unlabeled. <br>&gt; <br>&gt; I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/42a75030/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Mar 9, 2016, at 5:03 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; This is my concern too. Our guidelines often lead to the first parameter having a label, but usually that name isn&#39;t the same as the name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m pretty sure the common case is still unlabeled. Does that justify the complexity of the current rule?<br></p><p>I think it&#39;s also common under our guidelines for the second argument label to not make sense as a parameter name, since it&#39;s often also a preposition, e.g. `move(from origin: T, to destination: U)`.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; (But because Objective-C methods will now often have labeled arguments, it would at least no longer be a marker differentiating &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Looking at my code, the majority of methods should still have the first parameter unlabeled. <br>&gt;&gt; <br>&gt;&gt; I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/227f635a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>March 10, 2016 at 02:00:00pm</p></header><div class="content"><p>This is a valid concern.<br> <br>If we assumed that 50% of methods would have a labelled first parameter, and 50% would leave them unlabelled, and furthermore we assume that all methods with labelled first parameters would use the parameter name as the label, then I would support this proposal purely on the grounds that it&#39;s easier to write `func foo(_ bar: T)` than it is to write `func foo(bar bar: T)`.<br> <br>However, if we assume that the majority of methods still want an<br>unlabelled first parameter (which seems like a reasonable assumption to<br>me; most of the methods I write would certainly have the first parameter<br>unlabelled), and similarly if we assume that a non-trivial amount of<br>labelled first parameters use a different label than the parameter name,<br>then this change doesn&#39;t make as much sense anymore.<br> <br>Another concern with this proposal is that, even if you assume most<br>methods with multiple parameters would want to label all the parameters,<br>it&#39;s likely that most methods with a single parameter will leave the<br>parameter unlabelled. But this proposed rule would cause even single-<br>argument methods to label the sole argument.<br> <br>-Kevin Ballard<br> <br>On Wed, Mar 9, 2016, at 05:03 PM, Jordan Rose via swift-evolution wrote:<br>&gt; This is my concern too. Our guidelines often lead to the first<br>&gt; parameter having a label, but usually that name isn&#39;t the same as the<br>&gt; name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m<br>&gt; pretty sure the common case is still unlabeled. Does that justify the<br>&gt; complexity of the current rule?<br>&gt;<br>&gt; (But because Objective-C methods will now often have labeled<br>&gt; arguments, it would at least no longer be a marker differentiating<br>&gt; &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Looking at my code, the majority of methods should still have the<br>&gt;&gt; first parameter unlabeled.<br>&gt;&gt;<br>&gt;&gt; I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br>&gt;&gt;<br>&gt;&gt; — Radek<br>&gt;&gt;<br>&gt;&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; This would also make `init` and `func` parameters behave<br>&gt;&gt;&gt; consistently, which is nice. There may still be hope for our keyword<br>&gt;&gt;&gt; argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/07abeca6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 11, 2016 at 09:00:00am</p></header><div class="content"><p>But _ is so easy to type the simplicity of everything is labelled wins for<br>me. Also remember that inits have 1st argument labels.<br></p><p>  -- Howard.<br></p><p>On 11 March 2016 at 09:21, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is a valid concern.<br>&gt;<br>&gt; If we assumed that 50% of methods would have a labelled first parameter,<br>&gt; and 50% would leave them unlabelled, and furthermore we assume that all<br>&gt; methods with labelled first parameters would use the parameter name as the<br>&gt; label, then I would support this proposal purely on the grounds that it&#39;s<br>&gt; easier to write `func foo(_ bar: T)` than it is to write `func foo(bar bar:<br>&gt; T)`.<br>&gt;<br>&gt; However, if we assume that the majority of methods still want an<br>&gt; unlabelled first parameter (which seems like a reasonable assumption to me;<br>&gt; most of the methods I write would certainly have the first parameter<br>&gt; unlabelled), and similarly if we assume that a non-trivial amount of<br>&gt; labelled first parameters use a different label than the parameter name,<br>&gt; then this change doesn&#39;t make as much sense anymore.<br>&gt;<br>&gt; Another concern with this proposal is that, even if you assume most<br>&gt; methods with multiple parameters would want to label all the parameters,<br>&gt; it&#39;s likely that most methods with a single parameter will leave the<br>&gt; parameter unlabelled. But this proposed rule would cause even<br>&gt; single-argument methods to label the sole argument.<br>&gt;<br>&gt; -Kevin Ballard<br>&gt;<br>&gt; On Wed, Mar 9, 2016, at 05:03 PM, Jordan Rose via swift-evolution wrote:<br>&gt;<br>&gt; This is my concern too. Our guidelines often lead to the first parameter<br>&gt; having a label, but usually that name isn&#39;t the same as the name of the<br>&gt; parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m pretty sure the<br>&gt; common case is still unlabeled. Does that justify the complexity of the<br>&gt; current rule?<br>&gt;<br>&gt; (But because Objective-C methods will now often have labeled arguments, it<br>&gt; would at least no longer be a marker differentiating &quot;pure Swift&quot; code from<br>&gt; &quot;Cocoa&quot; code.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Looking at my code, the majority of methods should still have the first<br>&gt; parameter unlabeled.<br>&gt;<br>&gt; I like the consistency of what you’re proposing and the fact that I don’t<br>&gt; have to write `func foo(someArgument someArgument: T)` anymore. But I also<br>&gt; fear people won’t get it that they can (and in many, probably most,<br>&gt; situations should) make the first parameter `_ foo`.<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;<br>&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; *_______________________________________________*<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/c7095f60/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>I’m a +1 for this proposal; underscore is easy to add for methods where it does make sense to skip the parameter name, and it would encourage developers to think a little more about how to define it.<br></p><p>&gt; On 10 Mar 2016, at 22:30, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; But _ is so easy to type the simplicity of everything is labelled wins for me. Also remember that inits have 1st argument labels.<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 11 March 2016 at 09:21, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; This is a valid concern.<br>&gt;  <br>&gt; If we assumed that 50% of methods would have a labelled first parameter, and 50% would leave them unlabelled, and furthermore we assume that all methods with labelled first parameters would use the parameter name as the label, then I would support this proposal purely on the grounds that it&#39;s easier to write `func foo(_ bar: T)` than it is to write `func foo(bar bar: T)`.<br>&gt;  <br>&gt; However, if we assume that the majority of methods still want an unlabelled first parameter (which seems like a reasonable assumption to me; most of the methods I write would certainly have the first parameter unlabelled), and similarly if we assume that a non-trivial amount of labelled first parameters use a different label than the parameter name, then this change doesn&#39;t make as much sense anymore.<br>&gt;  <br>&gt; Another concern with this proposal is that, even if you assume most methods with multiple parameters would want to label all the parameters, it&#39;s likely that most methods with a single parameter will leave the parameter unlabelled. But this proposed rule would cause even single-argument methods to label the sole argument.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Wed, Mar 9, 2016, at 05:03 PM, Jordan Rose via swift-evolution wrote:<br>&gt;&gt; This is my concern too. Our guidelines often lead to the first parameter having a label, but usually that name isn&#39;t the same as the name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m pretty sure the common case is still unlabeled. Does that justify the complexity of the current rule?<br>&gt;&gt;  <br>&gt;&gt; (But because Objective-C methods will now often have labeled arguments, it would at least no longer be a marker differentiating &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br>&gt;&gt;  <br>&gt;&gt; Jordan<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Looking at my code, the majority of methods should still have the first parameter unlabeled. <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/4da85425/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>March 10, 2016 at 03:00:00pm</p></header><div class="content"><p>I’ve been thinking about this proposal, and don’t like it. I feel that it makes the language uglier, even if more consistent, and for a very common case.<br></p><p>But I do have one idea, which is to substitute a dot for the colon in the definition when no label is desired:<br></p><p>	func foo(x: Int, y: Int)		// x is labeled<br>	func foo(x. Int, y: Int)		// x is unlabeled<br>	func foo(x. Int, y. Int)		// x and y are both unlabeled<br>	func foo(xx x. Int)			// Illegal to label a parameter when using the “.” shortcut<br></p><p>This makes things consistent, and even sortof pretty. It also has a bit of a shorthand, since you’re leaving out one dot of the colon to make it silent (unlabeled). I have no idea how much his might mess up the rest of the grammar, but it seems like it might work.<br></p><p>James<br></p><p><br></p><p>&gt; On Mar 10, 2016, at 2:21 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is a valid concern.<br>&gt;  <br>&gt; If we assumed that 50% of methods would have a labelled first parameter, and 50% would leave them unlabelled, and furthermore we assume that all methods with labelled first parameters would use the parameter name as the label, then I would support this proposal purely on the grounds that it&#39;s easier to write `func foo(_ bar: T)` than it is to write `func foo(bar bar: T)`.<br>&gt;  <br>&gt; However, if we assume that the majority of methods still want an unlabelled first parameter (which seems like a reasonable assumption to me; most of the methods I write would certainly have the first parameter unlabelled), and similarly if we assume that a non-trivial amount of labelled first parameters use a different label than the parameter name, then this change doesn&#39;t make as much sense anymore.<br>&gt;  <br>&gt; Another concern with this proposal is that, even if you assume most methods with multiple parameters would want to label all the parameters, it&#39;s likely that most methods with a single parameter will leave the parameter unlabelled. But this proposed rule would cause even single-argument methods to label the sole argument.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Wed, Mar 9, 2016, at 05:03 PM, Jordan Rose via swift-evolution wrote:<br>&gt;&gt; This is my concern too. Our guidelines often lead to the first parameter having a label, but usually that name isn&#39;t the same as the name of the parameter—one&#39;s a preposition, the other&#39;s a noun. I&#39;m pretty sure the common case is still unlabeled. Does that justify the complexity of the current rule?<br>&gt;&gt;  <br>&gt;&gt; (But because Objective-C methods will now often have labeled arguments, it would at least no longer be a marker differentiating &quot;pure Swift&quot; code from &quot;Cocoa&quot; code.)<br>&gt;&gt;  <br>&gt;&gt; Jordan<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Mar 9, 2016, at 14:32, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Looking at my code, the majority of methods should still have the first parameter unlabeled. <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; I like the consistency of what you’re proposing and the fact that I don’t have to write `func foo(someArgument someArgument: T)` anymore. But I also fear people won’t get it that they can (and in many, probably most, situations should) make the first parameter `_ foo`.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On 09 Mar 2016, at 19:58, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/f5cab834/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>March  9, 2016 at 02:00:00pm</p></header><div class="content"><p>+1. Would definitely like to see this change make it in.<br></p><p>On Wed, Mar 9, 2016 at 10:58 AM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/5ec07dff/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March  9, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br></p><p>tweet: 		http://twitter.com/jckarter/status/707691862836924416 &lt;http://twitter.com/jckarter/status/707691862836924416&gt;<br>gist:  		https://gist.github.com/erica/e83893998ca7b5f46afe &lt;https://gist.github.com/erica/e83893998ca7b5f46afe&gt;<br>Pull request: 	https://github.com/apple/swift-evolution/pull/200 &lt;https://github.com/apple/swift-evolution/pull/200&gt;<br></p><p>Establish consistent label behavior across all parameters including first labels<br></p><p>Proposal: TBD<br>Author(s): Joe Groff &lt;http://github.com/jckarter&gt;, Jake Carter &lt;https://github.com/JakeCarter&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#introduction&gt;Introduction<br></p><p>We propose to normalize the first parameter declaration in methods and functions. In this proposal, first parameter declarations will match the existing behavior of the second and later parameters. All parameters, regardless of position, will behave uniformly. This will create a simple, consistent approach to parameter declaration throughout the Swift programming language and bring method and function declarations in-sync with initalizers, which already use this standard.<br></p><p>Discussion took place on the Swift Evolution mailing list in the Make the first parameter in a function declaration follow the same rules as the others &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt; thread.<br></p><p> &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#motivation&gt;Motivation<br></p><p>In the current state of the art, Swift 2 methods and functions combine local and external names to label parameters. These differentiated symbols distinguish names for internal implementation and external consumption. By default, a Swift 2 parameter declaration that appears first in the parameter list omits its external name. Second and later parameters duplicate local names as external labels. Under these Swift 2 rules, a declaration that looks like this:<br></p><p>func foo(a: T, b: U, c: V)<br>declares foo(_:b:c:) and not foo(a:b:c).<br></p><p>Historically, this label behavior was normalized in Swift 2, unifying parameter naming rules for methods and functions, which had previously used separate defaults behaviors. The new unified approach approximated Objective-C naming conventions where first parameter labels were subsumed into the first part of a method signature. For the most part, Swift 2 developers were encouraged to mimic this approach and build calls that moved the label name out of the parameter list and into the function or method name.<br></p><p>Swift 3&#39;s newly accepted API naming guidelines &lt;https://swift.org/documentation/api-design-guidelines/&gt; shook up this approach. They more thoroughly embraced method and function first argument labels. The updated naming guidance is further supported by the automated Objective-C API translation rules &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt; recently accepted for Swift 3. Under these revised guidelines, first argument labels are encouraged for but are not limited to:<br></p><p>methods and functions where the first parameter of a method is defaulted<br>methods and functions where the first argument uses a prepositional phrase<br>methods and functions that implement factory methods<br>methods and functions where method arguments represent a split form of a single abstraction<br>First argument labels are also the standard for initializers.<br></p><p>This expanded guidance creates a greater reach of first argument label usage and weakens justification for a first-parameter exception. Ensuring that parameter declarations behave uniformly supports Swift&#39;s goals of clarity and consistency. This change produces the simplest and most predictable usage, simplifying naming tasks, reducing confusion, and easing transition to the language.<br></p><p> &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#detail-design&gt;Detail Design<br></p><p>Under this proposal, first parameters names automatically create matching external labels, mimicking the second and later parameters. For example<br></p><p>func foo(x: Int, y: Int) <br>will declare foo(x:y:) and not foo(_:,y:). Developers will no longer need to double the first label to expose it to consuming API calls.<br></p><p>The existing external label overrides will continue to apply to first parameters. You establish external parameter names before the local parameter name it supports, separated by a space. For example,<br></p><p>func foo(xx x: Int, yy y: Int)<br>declares foo(xx:yy:) and <br></p><p>func foo(_ x: Int, y: Int)<br>explicitly declares foo(_:y:)<br></p><p> &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#impact-on-existing-code&gt;Impact on Existing Code<br></p><p>This proposal will impact existing code, requiring migration support from Xcode. We propose the following solution:<br></p><p>Function declarations that do not include explicit first item external labels (for example, func foo(x: Int, y: Int)) will translate to func foo(_ x: Int, y: Int).<br>Function call sites (e.g. foo(2, y: 3)) will remain unaffected.<br>Alternatively, this fixit behavior can be swapped. The callsite can update (foo(x:2, y:3)) and the declaration left as is. We feel the latter approach has a greater impact on existing code as functions are more often called than declared.<br></p><p>Ideally the migrator will locate patterns where the last letters of a function name match the first parameter name, for example tintWithColor(color: UIColor), and insert a FIXME: warning suggesting manual migration. Swift&#39;s automatic Objective-C import code might be repurposed to detect a prepositional phrase and parameter match to automate a fixit for tint(color: UIColor) but this would involve a more complicated implementation.<br></p><p> &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#alternatives-considered&gt;Alternatives Considered<br></p><p>There are no alternatives considered at this time.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/b5f05495/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>[Draft] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>March  9, 2016 at 06:00:00pm</p></header><div class="content"><p>+1.  As a newbie to Swift, the special first-argument rules caused no end<br>of confusion.  As a more experienced Swift dev, I find that I use a first<br>argument label fairly frequently, and it&#39;s one less rule to remember.<br></p><p>On Wed, Mar 9, 2016 at 5:02 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Our accepted naming guidelines have embraced first argument labels for<br>&gt; functions and methods. This weakens our justification for making the first<br>&gt; parameter declaration in a `func` declaration behave differently from the<br>&gt; others, implicitly being unlabeled. It seems pretty clear to me we should<br>&gt; make all of the parameter declarations behave uniformly:<br>&gt;<br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;<br>&gt; This would also make `init` and `func` parameters behave consistently,<br>&gt; which is nice. There may still be hope for our keyword argument rules to<br>&gt; one day be shorter than the Smalltalk spec…<br>&gt;<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; tweet:  http://twitter.com/jckarter/status/707691862836924416<br>&gt; gist:   https://gist.github.com/erica/e83893998ca7b5f46afe<br>&gt; Pull request:  https://github.com/apple/swift-evolution/pull/200<br>&gt;<br>&gt; Establish consistent label behavior across all parameters including first<br>&gt; labels<br>&gt;<br>&gt;    - Proposal: TBD<br>&gt;    - Author(s): Joe Groff &lt;http://github.com/jckarter&gt;, Jake Carter<br>&gt;    &lt;https://github.com/JakeCarter&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt;    - Status: TBD<br>&gt;    - Review manager: TBD<br>&gt;<br>&gt; &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#introduction&gt;<br>&gt; Introduction<br>&gt;<br>&gt; We propose to normalize the first parameter declaration in methods and<br>&gt; functions. In this proposal, first parameter declarations will match the<br>&gt; existing behavior of the second and later parameters. All parameters,<br>&gt; regardless of position, will behave uniformly. This will create a simple,<br>&gt; consistent approach to parameter declaration throughout the Swift<br>&gt; programming language and bring method and function declarations in-sync<br>&gt; with initalizers, which already use this standard.<br>&gt;<br>&gt; *Discussion took place on the Swift Evolution mailing list in the Make the<br>&gt; first parameter in a function declaration follow the same rules as the<br>&gt; others<br>&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt; thread.*<br>&gt; &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#motivation&gt;Motivation<br>&gt;<br>&gt; In the current state of the art, Swift 2 methods and functions combine<br>&gt; local and external names to label parameters. These differentiated symbols<br>&gt; distinguish names for internal implementation and external consumption. By<br>&gt; default, a Swift 2 parameter declaration that appears first in the<br>&gt; parameter list omits its external name. Second and later parameters<br>&gt; duplicate local names as external labels. Under these Swift 2 rules, a<br>&gt; declaration that looks like this:<br>&gt;<br>&gt; func foo(a: T, b: U, c: V)<br>&gt;<br>&gt; declares foo(_:b:c:) and not foo(a:b:c).<br>&gt;<br>&gt; Historically, this label behavior was normalized in Swift 2, unifying<br>&gt; parameter naming rules for methods and functions, which had previously used<br>&gt; separate defaults behaviors. The new unified approach approximated<br>&gt; Objective-C naming conventions where first parameter labels were subsumed<br>&gt; into the first part of a method signature. For the most part, Swift 2<br>&gt; developers were encouraged to mimic this approach and build calls that<br>&gt; moved the label name out of the parameter list and into the function or<br>&gt; method name.<br>&gt;<br>&gt; Swift 3&#39;s newly accepted API naming guidelines<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines/&gt; shook up this<br>&gt; approach. They more thoroughly embraced method and function first argument<br>&gt; labels. The updated naming guidance is further supported by the automated<br>&gt; Objective-C API translation rules<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt; recently<br>&gt; accepted for Swift 3. Under these revised guidelines, first argument labels<br>&gt; are encouraged for but are not limited to:<br>&gt;<br>&gt;    - methods and functions where the first parameter of a method is<br>&gt;    defaulted<br>&gt;    - methods and functions where the first argument uses a prepositional<br>&gt;    phrase<br>&gt;    - methods and functions that implement factory methods<br>&gt;    - methods and functions where method arguments represent a split form<br>&gt;    of a single abstraction<br>&gt;<br>&gt; First argument labels are also the standard for initializers.<br>&gt;<br>&gt; This expanded guidance creates a greater reach of first argument label<br>&gt; usage and weakens justification for a first-parameter exception. Ensuring<br>&gt; that parameter declarations behave uniformly supports Swift&#39;s goals of<br>&gt; clarity and consistency. This change produces the simplest and most<br>&gt; predictable usage, simplifying naming tasks, reducing confusion, and easing<br>&gt; transition to the language.<br>&gt; &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#detail-design&gt;Detail<br>&gt; Design<br>&gt;<br>&gt; Under this proposal, first parameters names automatically create matching<br>&gt; external labels, mimicking the second and later parameters. For example<br>&gt;<br>&gt; func foo(x: Int, y: Int)<br>&gt;<br>&gt; will declare foo(x:y:) and not foo(_:,y:). Developers will no longer need<br>&gt; to double the first label to expose it to consuming API calls.<br>&gt;<br>&gt; The existing external label overrides will continue to apply to first<br>&gt; parameters. You establish external parameter names before the local<br>&gt; parameter name it supports, separated by a space. For example,<br>&gt;<br>&gt; func foo(xx x: Int, yy y: Int)<br>&gt;<br>&gt; declares foo(xx:yy:) and<br>&gt;<br>&gt; func foo(_ x: Int, y: Int)<br>&gt;<br>&gt; explicitly declares foo(_:y:)<br>&gt;<br>&gt; &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#impact-on-existing-code&gt;Impact<br>&gt; on Existing Code<br>&gt;<br>&gt; This proposal will impact existing code, requiring migration support from<br>&gt; Xcode. We propose the following solution:<br>&gt;<br>&gt;    - Function declarations that do not include explicit first item<br>&gt;    external labels (for example, func foo(x: Int, y: Int)) will translate<br>&gt;    to func foo(_ x: Int, y: Int).<br>&gt;    - Function call sites (e.g. foo(2, y: 3)) will remain unaffected.<br>&gt;<br>&gt; Alternatively, this fixit behavior can be swapped. The callsite can update<br>&gt; (foo(x:2, y:3)) and the declaration left as is. We feel the latter<br>&gt; approach has a greater impact on existing code as functions are more often<br>&gt; called than declared.<br>&gt;<br>&gt; Ideally the migrator will locate patterns where the last letters of a<br>&gt; function name match the first parameter name, for example tintWithColor(color:<br>&gt; UIColor), and insert a FIXME: warning suggesting manual migration.<br>&gt; Swift&#39;s automatic Objective-C import code might be repurposed to detect a<br>&gt; prepositional phrase and parameter match to automate a fixit for tint(color:<br>&gt; UIColor) but this would involve a more complicated implementation.<br>&gt;<br>&gt; &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#alternatives-considered&gt;Alternatives<br>&gt; Considered<br>&gt; There are no alternatives considered at this time.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/094b5359/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Draft] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>March 10, 2016 at 08:00:00am</p></header><div class="content"><p>+1<br></p><p>&gt; On 10 Mar 2016, at 02:02, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; tweet: 		http://twitter.com/jckarter/status/707691862836924416 &lt;http://twitter.com/jckarter/status/707691862836924416&gt;<br>&gt; gist:  		https://gist.github.com/erica/e83893998ca7b5f46afe &lt;https://gist.github.com/erica/e83893998ca7b5f46afe&gt;<br>&gt; Pull request: 	https://github.com/apple/swift-evolution/pull/200 &lt;https://github.com/apple/swift-evolution/pull/200&gt;<br>&gt; <br>&gt; Establish consistent label behavior across all parameters including first labels<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author(s): Joe Groff &lt;http://github.com/jckarter&gt;, Jake Carter &lt;https://github.com/JakeCarter&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#introduction&gt;Introduction<br>&gt; <br>&gt; We propose to normalize the first parameter declaration in methods and functions. In this proposal, first parameter declarations will match the existing behavior of the second and later parameters. All parameters, regardless of position, will behave uniformly. This will create a simple, consistent approach to parameter declaration throughout the Swift programming language and bring method and function declarations in-sync with initalizers, which already use this standard.<br>&gt; <br>&gt; Discussion took place on the Swift Evolution mailing list in the Make the first parameter in a function declaration follow the same rules as the others &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt; thread.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#motivation&gt;Motivation<br>&gt; <br>&gt; In the current state of the art, Swift 2 methods and functions combine local and external names to label parameters. These differentiated symbols distinguish names for internal implementation and external consumption. By default, a Swift 2 parameter declaration that appears first in the parameter list omits its external name. Second and later parameters duplicate local names as external labels. Under these Swift 2 rules, a declaration that looks like this:<br>&gt; <br>&gt; func foo(a: T, b: U, c: V)<br>&gt; declares foo(_:b:c:) and not foo(a:b:c).<br>&gt; <br>&gt; Historically, this label behavior was normalized in Swift 2, unifying parameter naming rules for methods and functions, which had previously used separate defaults behaviors. The new unified approach approximated Objective-C naming conventions where first parameter labels were subsumed into the first part of a method signature. For the most part, Swift 2 developers were encouraged to mimic this approach and build calls that moved the label name out of the parameter list and into the function or method name.<br>&gt; <br>&gt; Swift 3&#39;s newly accepted API naming guidelines &lt;https://swift.org/documentation/api-design-guidelines/&gt; shook up this approach. They more thoroughly embraced method and function first argument labels. The updated naming guidance is further supported by the automated Objective-C API translation rules &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt; recently accepted for Swift 3. Under these revised guidelines, first argument labels are encouraged for but are not limited to:<br>&gt; <br>&gt; methods and functions where the first parameter of a method is defaulted<br>&gt; methods and functions where the first argument uses a prepositional phrase<br>&gt; methods and functions that implement factory methods<br>&gt; methods and functions where method arguments represent a split form of a single abstraction<br>&gt; First argument labels are also the standard for initializers.<br>&gt; <br>&gt; This expanded guidance creates a greater reach of first argument label usage and weakens justification for a first-parameter exception. Ensuring that parameter declarations behave uniformly supports Swift&#39;s goals of clarity and consistency. This change produces the simplest and most predictable usage, simplifying naming tasks, reducing confusion, and easing transition to the language.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#detail-design&gt;Detail Design<br>&gt; <br>&gt; Under this proposal, first parameters names automatically create matching external labels, mimicking the second and later parameters. For example<br>&gt; <br>&gt; func foo(x: Int, y: Int) <br>&gt; will declare foo(x:y:) and not foo(_:,y:). Developers will no longer need to double the first label to expose it to consuming API calls.<br>&gt; <br>&gt; The existing external label overrides will continue to apply to first parameters. You establish external parameter names before the local parameter name it supports, separated by a space. For example,<br>&gt; <br>&gt; func foo(xx x: Int, yy y: Int)<br>&gt; declares foo(xx:yy:) and <br>&gt; <br>&gt; func foo(_ x: Int, y: Int)<br>&gt; explicitly declares foo(_:y:)<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#impact-on-existing-code&gt;Impact on Existing Code<br>&gt; <br>&gt; This proposal will impact existing code, requiring migration support from Xcode. We propose the following solution:<br>&gt; <br>&gt; Function declarations that do not include explicit first item external labels (for example, func foo(x: Int, y: Int)) will translate to func foo(_ x: Int, y: Int).<br>&gt; Function call sites (e.g. foo(2, y: 3)) will remain unaffected.<br>&gt; Alternatively, this fixit behavior can be swapped. The callsite can update (foo(x:2, y:3)) and the declaration left as is. We feel the latter approach has a greater impact on existing code as functions are more often called than declared.<br>&gt; <br>&gt; Ideally the migrator will locate patterns where the last letters of a function name match the first parameter name, for example tintWithColor(color: UIColor), and insert a FIXME: warning suggesting manual migration. Swift&#39;s automatic Objective-C import code might be repurposed to detect a prepositional phrase and parameter match to automate a fixit for tint(color: UIColor) but this would involve a more complicated implementation.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; There are no alternatives considered at this time.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/440ed205/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/063adc064d3d040fcbfba0265019aecd?s=50"></div><header><strong>[Draft] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>James Hillhouse</string> &lt;jdhillhouse4 at icloud.com&gt;<p>March 10, 2016 at 02:00:00am</p></header><div class="content"><p>+1. Because I’m old and slow, it took a long time to not get an eyeball jolt upon seeing foo(_:y:). Thank you.<br></p><p>&gt; On Mar 10, 2016, at 1:20 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1<br>&gt; <br>&gt;&gt; On 10 Mar 2016, at 02:02, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 9, 2016, at 11:58 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; tweet: 		http://twitter.com/jckarter/status/707691862836924416 &lt;http://twitter.com/jckarter/status/707691862836924416&gt;<br>&gt;&gt; gist:  		https://gist.github.com/erica/e83893998ca7b5f46afe &lt;https://gist.github.com/erica/e83893998ca7b5f46afe&gt;<br>&gt;&gt; Pull request: 	https://github.com/apple/swift-evolution/pull/200 &lt;https://github.com/apple/swift-evolution/pull/200&gt;<br>&gt;&gt; <br>&gt;&gt; Establish consistent label behavior across all parameters including first labels<br>&gt;&gt; <br>&gt;&gt; Proposal: TBD<br>&gt;&gt; Author(s): Joe Groff &lt;http://github.com/jckarter&gt;, Jake Carter &lt;https://github.com/JakeCarter&gt;, Erica Sadun &lt;http://github.com/erica&gt;<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; We propose to normalize the first parameter declaration in methods and functions. In this proposal, first parameter declarations will match the existing behavior of the second and later parameters. All parameters, regardless of position, will behave uniformly. This will create a simple, consistent approach to parameter declaration throughout the Swift programming language and bring method and function declarations in-sync with initalizers, which already use this standard.<br>&gt;&gt; <br>&gt;&gt; Discussion took place on the Swift Evolution mailing list in the Make the first parameter in a function declaration follow the same rules as the others &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/9029&gt; thread.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; In the current state of the art, Swift 2 methods and functions combine local and external names to label parameters. These differentiated symbols distinguish names for internal implementation and external consumption. By default, a Swift 2 parameter declaration that appears first in the parameter list omits its external name. Second and later parameters duplicate local names as external labels. Under these Swift 2 rules, a declaration that looks like this:<br>&gt;&gt; <br>&gt;&gt; func foo(a: T, b: U, c: V)<br>&gt;&gt; declares foo(_:b:c:) and not foo(a:b:c).<br>&gt;&gt; <br>&gt;&gt; Historically, this label behavior was normalized in Swift 2, unifying parameter naming rules for methods and functions, which had previously used separate defaults behaviors. The new unified approach approximated Objective-C naming conventions where first parameter labels were subsumed into the first part of a method signature. For the most part, Swift 2 developers were encouraged to mimic this approach and build calls that moved the label name out of the parameter list and into the function or method name.<br>&gt;&gt; <br>&gt;&gt; Swift 3&#39;s newly accepted API naming guidelines &lt;https://swift.org/documentation/api-design-guidelines/&gt; shook up this approach. They more thoroughly embraced method and function first argument labels. The updated naming guidance is further supported by the automated Objective-C API translation rules &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt; recently accepted for Swift 3. Under these revised guidelines, first argument labels are encouraged for but are not limited to:<br>&gt;&gt; <br>&gt;&gt; methods and functions where the first parameter of a method is defaulted<br>&gt;&gt; methods and functions where the first argument uses a prepositional phrase<br>&gt;&gt; methods and functions that implement factory methods<br>&gt;&gt; methods and functions where method arguments represent a split form of a single abstraction<br>&gt;&gt; First argument labels are also the standard for initializers.<br>&gt;&gt; <br>&gt;&gt; This expanded guidance creates a greater reach of first argument label usage and weakens justification for a first-parameter exception. Ensuring that parameter declarations behave uniformly supports Swift&#39;s goals of clarity and consistency. This change produces the simplest and most predictable usage, simplifying naming tasks, reducing confusion, and easing transition to the language.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#detail-design&gt;Detail Design<br>&gt;&gt; <br>&gt;&gt; Under this proposal, first parameters names automatically create matching external labels, mimicking the second and later parameters. For example<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) <br>&gt;&gt; will declare foo(x:y:) and not foo(_:,y:). Developers will no longer need to double the first label to expose it to consuming API calls.<br>&gt;&gt; <br>&gt;&gt; The existing external label overrides will continue to apply to first parameters. You establish external parameter names before the local parameter name it supports, separated by a space. For example,<br>&gt;&gt; <br>&gt;&gt; func foo(xx x: Int, yy y: Int)<br>&gt;&gt; declares foo(xx:yy:) and <br>&gt;&gt; <br>&gt;&gt; func foo(_ x: Int, y: Int)<br>&gt;&gt; explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#impact-on-existing-code&gt;Impact on Existing Code<br>&gt;&gt; <br>&gt;&gt; This proposal will impact existing code, requiring migration support from Xcode. We propose the following solution:<br>&gt;&gt; <br>&gt;&gt; Function declarations that do not include explicit first item external labels (for example, func foo(x: Int, y: Int)) will translate to func foo(_ x: Int, y: Int).<br>&gt;&gt; Function call sites (e.g. foo(2, y: 3)) will remain unaffected.<br>&gt;&gt; Alternatively, this fixit behavior can be swapped. The callsite can update (foo(x:2, y:3)) and the declaration left as is. We feel the latter approach has a greater impact on existing code as functions are more often called than declared.<br>&gt;&gt; <br>&gt;&gt; Ideally the migrator will locate patterns where the last letters of a function name match the first parameter name, for example tintWithColor(color: UIColor), and insert a FIXME: warning suggesting manual migration. Swift&#39;s automatic Objective-C import code might be repurposed to detect a prepositional phrase and parameter match to automate a fixit for tint(color: UIColor) but this would involve a more complicated implementation.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/e83893998ca7b5f46afe#alternatives-considered&gt;Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; There are no alternatives considered at this time.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/db94f9ae/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>March 10, 2016 at 11:00:00am</p></header><div class="content"><p>Big +1<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 09.03.2016, o godz. 19:58:<br>&gt; <br>&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt; <br>&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt; <br>&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/2b98df22/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4002684831b0a89736f4837d2e60f66a?s=50"></div><header><strong>[Pitch] Make the first parameter in a function declaration follow the same rules as the others</strong> from <string>Pierre Monod-Broca</string> &lt;pierremonodbroca at gmail.com&gt;<p>March 10, 2016 at 01:00:00pm</p></header><div class="content"><p>Big +1 too.<br></p><p><br>Pierre<br></p><p>&gt; Le 10 mars 2016 à 11:07, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Big +1<br>&gt; <br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br>&gt; <br>&gt;&gt; Wiadomość napisana przez Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 09.03.2016, o godz. 19:58:<br>&gt;&gt; <br>&gt;&gt; Our accepted naming guidelines have embraced first argument labels for functions and methods. This weakens our justification for making the first parameter declaration in a `func` declaration behave differently from the others, implicitly being unlabeled. It seems pretty clear to me we should make all of the parameter declarations behave uniformly:<br>&gt;&gt; <br>&gt;&gt; func foo(x: Int, y: Int) // Should declare foo(x:y:), instead of foo(_:y:)<br>&gt;&gt; func foo(_ x: Int, y: Int) // Explicitly declares foo(_:y:)<br>&gt;&gt; <br>&gt;&gt; This would also make `init` and `func` parameters behave consistently, which is nice. There may still be hope for our keyword argument rules to one day be shorter than the Smalltalk spec…<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/3baafe50/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
