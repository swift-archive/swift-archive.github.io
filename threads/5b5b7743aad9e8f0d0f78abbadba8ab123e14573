<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>September  1, 2016 at 09:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;UnsafeBytes&quot; begins now and runs through September<br>7th. This late addition to Swift 3 is a follow-up to SE-0107:<br>UnsafeRawPointer. It addresses common use cases for UnsafeRawPointer,<br>allowing developers to continue working with collections of UInt8 values,<br>but now doing so via a type safe API. The UnsafeBytes API will not require <br>direct manipulation of raw pointers or reasoning about binding memory.<br></p><p>The proposal is available here:<br></p><p>  &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsafebytes.md&gt;<br></p><p>Reviews are an important part of the Swift evolution process. All reviews<br>should be sent to the swift-evolution mailing list at<br></p><p>  &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the<br>review manager. When replying, please try to keep the proposal link at<br>the top of the message:<br></p><p>Proposal link:<br>  &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review<br>through constructive criticism and, eventually, determine the direction of<br>Swift. When writing your review, here are some questions you might want to<br>answer in your review:<br></p><p>  * What is your evaluation of the proposal?<br>  * Is the problem being addressed significant enough to warrant a<br>    change to Swift?<br>  * Does this proposal fit well with the feel and direction of Swift?<br>  * If you have used other languages or libraries with a similar<br>    feature, how do you feel that this proposal compares to those?<br>  * How much effort did you put into your review? A glance, a quick<br>    reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>  &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>Thank you,<br></p><p>-Dave Abrahams<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  3, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; <br>&gt;  * What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt;  * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br></p><p>Yup<br></p><p>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is unsafe about getting the byte-representation of a value?<br></p><p>As I understand it, “Raw” is what we use for “untyped”, so might I suggest “RawBytes&quot;?<br></p><p>&gt;  * If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br></p><p>Don’t know; maybe, I can’t remember. Better than what we would otherwise have for Swift 3, in any case.<br></p><p>&gt;  * How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br></p><p>Read the proposal, glossed over the previous discussion. I’ve had similar trouble deciphering the new API, so I sympathise with the demonstrations.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;  &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Dave Abrahams<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>September  6, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 7:36 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is unsafe about getting the byte-representation of a value?<br>&gt; <br>&gt; As I understand it, “Raw” is what we use for “untyped”, so might I suggest “RawBytes&quot;?<br></p><p>It’s annoying, but a strict requirement in Swift that any “unsafe” operation be marked with the word “Unsafe” either at that point or in some enclosing scope. Unsafe broadly refers to various forms of memory unsafety. Unsafe bytes is actually safe with respect to pointer aliasing but it is unsafe because<br></p><p>1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br></p><p>2. It does not perform bounds-checking in release mode.<br></p><p>In both those respects, it’s just like UnsafeBufferPointer.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/59de7aa0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt;&gt;   1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br>  <br></p><p>  <br>Isn&#39;t that just a pointer? Is it really necessary to say &quot;unsafe&quot; and &quot;pointer&quot;?<br>  <br></p><p>  <br>And if we did want to make it explicit, perhaps we say &quot;unowned&quot; instead, to make it clear how it is unsafe. &quot;RawBufferPointer&quot;/&quot;UnownedRawBufferPointer&quot; sound pretty good to me. You can derive some pretty solid expectations from those names.<br>  <br>  <br>  <br>    <br> Karl<br>  <br>  <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Sep 6, 2016 at 10:59 pm,  &lt;Andrew Trick (mailto:atrick at apple.com)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;   <br>&gt; &gt;   <br>&gt; &gt; On Sep 2, 2016, at 7:36 PM, Karl via swift-evolution  &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote:<br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt; &gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;   <br>&gt; &gt;   Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is unsafe about getting the byte-representation of a value?<br>&gt; &gt;   <br>&gt; &gt;   As I understand it, “Raw” is what we use for “untyped”, so might I suggest “RawBytes&quot;?         <br>&gt;   <br>&gt; It’s annoying, but a strict requirement in Swift that any “unsafe” operation be marked with the word “Unsafe” either at that point or in some enclosing scope. Unsafe broadly refers to various forms of memory unsafety. Unsafe bytes is actually safe with respect to pointer aliasing but it is unsafe because<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; 1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; 2. It does not perform bounds-checking in release mode.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; In both those respects, it’s just like UnsafeBufferPointer.<br>&gt;   <br>&gt;<br>&gt;   <br>&gt; -Andy<br>&gt;   <br>&gt;   <br>  <br>  <br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/463ce5ff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Isn&#39;t every use of &quot;Pointer&quot; in the standard library prefixed by &quot;Unsafe&quot;?<br>If so, we&#39;ll want to follow the convention here.<br>On Wed, Sep 7, 2016 at 07:48 Karl Wagner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt;&gt; 1. It points into memory that it does not own. The developer must do<br>&gt; something to to manage the memory’s lifetime.<br>&gt;<br>&gt; Isn&#39;t that just a pointer? Is it really necessary to say &quot;unsafe&quot; and<br>&gt; &quot;pointer&quot;?<br>&gt;<br>&gt; And if we did want to make it explicit, perhaps we say &quot;unowned&quot; instead,<br>&gt; to make it clear how it is unsafe. &quot;RawBufferPointer&quot;/&quot;UnownedRawBufferPointer&quot;<br>&gt; sound pretty good to me. You can derive some pretty solid expectations from<br>&gt; those names.<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt;<br>&gt; On Sep 6, 2016 at 10:59 pm, &lt;Andrew Trick &lt;atrick at apple.com&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Sep 2, 2016, at 7:36 PM, Karl via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt;<br>&gt; Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is<br>&gt; unsafe about getting the byte-representation of a value?<br>&gt;<br>&gt; As I understand it, “Raw” is what we use for “untyped”, so might I suggest<br>&gt; “RawBytes&quot;?<br>&gt;<br>&gt;<br>&gt; It’s annoying, but a strict requirement in Swift that any “unsafe”<br>&gt; operation be marked with the word “Unsafe” either at that point or in some<br>&gt; enclosing scope. Unsafe broadly refers to various forms of memory unsafety.<br>&gt; Unsafe bytes is actually safe with respect to pointer aliasing but it is<br>&gt; unsafe because<br>&gt;<br>&gt; 1. It points into memory that it does not own. The developer must do<br>&gt; something to to manage the memory’s lifetime.<br>&gt;<br>&gt; 2. It does not perform bounds-checking in release mode.<br>&gt;<br>&gt; In both those respects, it’s just like UnsafeBufferPointer.<br>&gt;<br>&gt; -Andy<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/38c1d567/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>September  7, 2016 at 03:00:00pm</p></header><div class="content"><p>As much as I would like to get rid of the “Unsafe” prefix, for this change it should imo be considered “out of scope”.<br>Since it is used for the other pointers, it should be used here also.<br></p><p>Maybe a separate proposal to get rid of “Unsafe”?<br></p><p>Rien<br></p><p>&gt; On 07 Sep 2016, at 14:48, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;&gt; 1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br>&gt; <br>&gt; Isn&#39;t that just a pointer? Is it really necessary to say &quot;unsafe&quot; and &quot;pointer&quot;?<br>&gt; <br>&gt; And if we did want to make it explicit, perhaps we say &quot;unowned&quot; instead, to make it clear how it is unsafe. &quot;RawBufferPointer&quot;/&quot;UnownedRawBufferPointer&quot; sound pretty good to me. You can derive some pretty solid expectations from those names.<br>&gt; <br>&gt; Karl<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 6, 2016 at 10:59 pm, &lt;Andrew Trick&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 2, 2016, at 7:36 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is unsafe about getting the byte-representation of a value?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I understand it, “Raw” is what we use for “untyped”, so might I suggest “RawBytes&quot;?<br>&gt;&gt; <br>&gt;&gt; It’s annoying, but a strict requirement in Swift that any “unsafe” operation be marked with the word “Unsafe” either at that point or in some enclosing scope. Unsafe broadly refers to various forms of memory unsafety. Unsafe bytes is actually safe with respect to pointer aliasing but it is unsafe because<br>&gt;&gt; <br>&gt;&gt; 1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br>&gt;&gt; <br>&gt;&gt; 2. It does not perform bounds-checking in release mode.<br>&gt;&gt; <br>&gt;&gt; In both those respects, it’s just like UnsafeBufferPointer.<br>&gt;&gt; <br>&gt;&gt; -Andy<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>September  7, 2016 at 06:00:00pm</p></header><div class="content"><p>Yeah it definitely should be it&#39;s own proposal. It&#39;s just that add we add new Unsafe types, the naming is becoming ridiculous and doesn&#39;t clearly express the information developer&#39;s need to know when using the types.<br>  <br></p><p>  <br>It&#39;s always been a bit iffy, but as I look at the proposal, DaveA&#39;s logic that it should be called Unsafe(Mutable)RawBufferPointer is sound but I really don&#39;t like that name.<br>  <br></p><p>  <br>I&#39;ll start a thread to pitch removing/renaming Unsafe.<br>  <br></p><p>  <br>Karl<br>    <br>  <br></p><p>  <br>  <br>&gt;   <br>&gt; On Sep 7, 2016 at 3:27 pm,  &lt;Rien (mailto:rien at balancingrock.nl)&gt;  wrote:<br>&gt;   <br>&gt;   <br>&gt;   <br>&gt;  As much as I would like to get rid of the “Unsafe” prefix, for this change it should imo be considered “out of scope”.  <br>&gt; Since it is used for the other pointers, it should be used here also.  <br>&gt;<br>&gt; Maybe a separate proposal to get rid of “Unsafe”?  <br>&gt;<br>&gt; Rien  <br>&gt;<br>&gt; &gt;  On 07 Sep 2016, at 14:48, Karl Wagner via swift-evolution  &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote:  <br>&gt; &gt;   <br>&gt; &gt;   &gt;&gt;  1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.  <br>&gt; &gt;   <br>&gt; &gt;  Isn&#39;t that just a pointer? Is it really necessary to say &quot;unsafe&quot; and &quot;pointer&quot;?  <br>&gt; &gt;   <br>&gt; &gt;  And if we did want to make it explicit, perhaps we say &quot;unowned&quot; instead, to make it clear how it is unsafe. &quot;RawBufferPointer&quot;/&quot;UnownedRawBufferPointer&quot; sound pretty good to me. You can derive some pretty solid expectations from those names.  <br>&gt; &gt;   <br>&gt; &gt;  Karl  <br>&gt; &gt;   <br>&gt; &gt;   <br>&gt; &gt;&gt;  On Sep 6, 2016 at 10:59 pm,  &lt;Andrew Trick&gt;  wrote:  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;&gt;  On Sep 2, 2016, at 7:36 PM, Karl via swift-evolution  &lt;swift-evolution at swift.org (mailto:swift-evolution at swift.org)&gt;  wrote:  <br>&gt; &gt;&gt;&gt;   <br>&gt; &gt;&gt;&gt;&gt;  * Does this proposal fit well with the feel and direction of Swift?  <br>&gt; &gt;&gt;&gt;   <br>&gt; &gt;&gt;&gt;  Yes, but I’m not sure about the “Unsafe” part of “UnsafeBytes” — what is unsafe about getting the byte-representation of a value?  <br>&gt; &gt;&gt;&gt;   <br>&gt; &gt;&gt;&gt;  As I understand it, “Raw” is what we use for “untyped”, so might I suggest “RawBytes&quot;?  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;  It’s annoying, but a strict requirement in Swift that any “unsafe” operation be marked with the word “Unsafe” either at that point or in some enclosing scope. Unsafe broadly refers to various forms of memory unsafety. Unsafe bytes is actually safe with respect to pointer aliasing but it is unsafe because  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;  1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;  2. It does not perform bounds-checking in release mode.  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;  In both those respects, it’s just like UnsafeBufferPointer.  <br>&gt; &gt;&gt;   <br>&gt; &gt;&gt;  -Andy  <br>&gt; &gt;  _______________________________________________  <br>&gt; &gt;  swift-evolution mailing list  <br>&gt; &gt;   swift-evolution at swift.org (mailto:swift-evolution at swift.org)   <br>&gt; &gt;   https://lists.swift.org/mailman/listinfo/swift-evolution   <br>&gt;<br>&gt;          <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/ba0dd7d2/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>September  7, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Sep 7, 2016, at 05:48, Karl Wagner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;&gt; 1. It points into memory that it does not own. The developer must do something to to manage the memory’s lifetime.<br>&gt; <br>&gt; Isn&#39;t that just a pointer? Is it really necessary to say &quot;unsafe&quot; and &quot;pointer&quot;?<br>&gt; <br>&gt; And if we did want to make it explicit, perhaps we say &quot;unowned&quot; instead, to make it clear how it is unsafe. &quot;RawBufferPointer&quot;/&quot;UnownedRawBufferPointer&quot; sound pretty good to me. You can derive some pretty solid expectations from those names.<br></p><p>Yeah, I didn&#39;t realize exactly what &quot;unsafe&quot; meant until quite recently.<br></p><p>- Dave Sweeris<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>September  3, 2016 at 09:00:00am</p></header><div class="content"><p>+1 <br></p><p>I think that &#39;Unsafe&#39; is fine because the mutable variant is definitely unsafe. <br></p><p>I have some audio related code that would benefit greatly from this addition so I am all for it.<br></p><p>TJ <br></p><p>&gt; On Sep 1, 2016, at 12:10, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;UnsafeBytes&quot; begins now and runs through September<br>&gt; 7th. This late addition to Swift 3 is a follow-up to SE-0107:<br>&gt; UnsafeRawPointer. It addresses common use cases for UnsafeRawPointer,<br>&gt; allowing developers to continue working with collections of UInt8 values,<br>&gt; but now doing so via a type safe API. The UnsafeBytes API will not require <br>&gt; direct manipulation of raw pointers or reasoning about binding memory.<br>&gt; <br>&gt; The proposal is available here:<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsafebytes.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a<br>&gt;   change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar<br>&gt;   feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick<br>&gt;   reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Dave Abrahams<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0138 UnsafeBytes</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  3, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 as well. I would love to have Data.withUnsafeBytes use this type, and I<br>agree that UnsafeBytes and Data have orthogonal and not overlapping use<br>cases.<br>On Sat, Sep 3, 2016 at 08:59 gs. via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1<br>&gt;<br>&gt; I think that &#39;Unsafe&#39; is fine because the mutable variant is definitely<br>&gt; unsafe.<br>&gt;<br>&gt; I have some audio related code that would benefit greatly from this<br>&gt; addition so I am all for it.<br>&gt;<br>&gt; TJ<br>&gt;<br>&gt; &gt; On Sep 1, 2016, at 12:10, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;UnsafeBytes&quot; begins now and runs through September<br>&gt; &gt; 7th. This late addition to Swift 3 is a follow-up to SE-0107:<br>&gt; &gt; UnsafeRawPointer. It addresses common use cases for UnsafeRawPointer,<br>&gt; &gt; allowing developers to continue working with collections of UInt8 values,<br>&gt; &gt; but now doing so via a type safe API. The UnsafeBytes API will not<br>&gt; require<br>&gt; &gt; direct manipulation of raw pointers or reasoning about binding memory.<br>&gt; &gt;<br>&gt; &gt; The proposal is available here:<br>&gt; &gt;<br>&gt; &gt; &lt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsafebytes.md<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; &gt; should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; &gt; review manager. When replying, please try to keep the proposal link at<br>&gt; &gt; the top of the message:<br>&gt; &gt;<br>&gt; &gt; Proposal link:<br>&gt; &gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and, eventually, determine the direction<br>&gt; of<br>&gt; &gt; Swift. When writing your review, here are some questions you might want<br>&gt; to<br>&gt; &gt; answer in your review:<br>&gt; &gt;<br>&gt; &gt; * What is your evaluation of the proposal?<br>&gt; &gt; * Is the problem being addressed significant enough to warrant a<br>&gt; &gt;   change to Swift?<br>&gt; &gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt; * If you have used other languages or libraries with a similar<br>&gt; &gt;   feature, how do you feel that this proposal compares to those?<br>&gt; &gt; * How much effort did you put into your review? A glance, a quick<br>&gt; &gt;   reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt; &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Dave Abrahams<br>&gt; &gt; Review Manager<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/854578d7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
