<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>March 19, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi All,<br></p><p>today I was trying to investigate how to build a proper cross-platform<br>server-side Swift project and only use SwiftPM to do it. In particular, I<br>was interested in getting OpenSSL/libcurl working as a dependency (built<br>from source). The main reason is that currently the big Swift server<br>frameworks all require manual steps during deployment (running apt-get/brew<br>to install libcurl/openssl/others) and I am trying to get rid of these<br>manual steps, eventually only requiring a `swift build` and run.<br></p><p>With the great initial work<br>&lt;https://github.com/apple/swift-package-manager/pull/183&gt; to support<br>building C-family packages in SwiftPM done by Ankit, I was able to have a<br>simple C package as a dependency, as advertised. However, the reality of<br>big cross-platform open source projects like OpenSSL and libcurl is that in<br>order to actually build it from source, a configure (or similar) script has<br>to be run to get the source code ready for compilation. And this is where I<br>got stuck.<br></p><p>Thus I wanted to kick off a discussion of what approach of solving this<br>problem with SwiftPM should be. The simple solution, which I&#39;m tentatively<br>proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s<br>repository. Then, the Package.swift would optionally contain a field for<br>the path to this script - and if present, it&#39;d get run after SwiftPM clones<br>this package. Note that this would be a &quot;post-clone&quot; script, not a<br>&quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then only<br>after each clean.<br></p><p>In order to get users to stop having to run manual script to install all<br>dependencies, I believe that we need to allow packages to declare what work<br>needs to be done on its source before compilation can begin.<br></p><p>What do you think?<br></p><p>Honza Dvorsky<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160319/8b1ce8f7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>March 21, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 19, 2016, at 10:55 AM, Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All,<br>&gt; <br>&gt; today I was trying to investigate how to build a proper cross-platform server-side Swift project and only use SwiftPM to do it. In particular, I was interested in getting OpenSSL/libcurl working as a dependency (built from source). The main reason is that currently the big Swift server frameworks all require manual steps during deployment (running apt-get/brew to install libcurl/openssl/others) and I am trying to get rid of these manual steps, eventually only requiring a `swift build` and run.<br>&gt; <br>&gt; With the great initial work &lt;https://github.com/apple/swift-package-manager/pull/183&gt; to support building C-family packages in SwiftPM done by Ankit, I was able to have a simple C package as a dependency, as advertised. However, the reality of big cross-platform open source projects like OpenSSL and libcurl is that in order to actually build it from source, a configure (or similar) script has to be run to get the source code ready for compilation. And this is where I got stuck.<br>&gt; <br>&gt; Thus I wanted to kick off a discussion of what approach of solving this problem with SwiftPM should be. The simple solution, which I&#39;m tentatively proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s repository. Then, the Package.swift would optionally contain a field for the path to this script - and if present, it&#39;d get run after SwiftPM clones this package. Note that this would be a &quot;post-clone&quot; script, not a &quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then only after each clean. <br>&gt; <br>&gt; In order to get users to stop having to run manual script to install all dependencies, I believe that we need to allow packages to declare what work needs to be done on its source before compilation can begin.<br></p><p>I have a proposal I’d like to push today that adds knowledge to SwiftPM about how to install system dependencies for System Module Packages.<br></p><p>We are not keen to add arbitrary script execution to SwiftPM, because: 1) Arbitrary scripts cannot be controlled and this leads to dependency hell and 2) arbitrary scripts mean your package graph may do anything, which nobody wants.<br></p><p>Now I’m fine with the “root package” ie. the package the user has control over doing more, but this would be a different discussion.<br></p><p>So the question becomes, is this sufficient? To have `brew install openssl` run, or do you really need to install from source?<br></p><p>Max<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160321/e84bfa9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>March 21, 2016 at 06:00:00pm</p></header><div class="content"><p>I personally don&#39;t like the idea of an arbitrary script either, it was just<br>the first obvious solution to a problem I believe needs solving. The<br>advantage of building from source even of these base dependencies is that<br>the exact version of system dependencies<br>- can be ensured to be the same version across platforms<br>- their version is part of the explicit dependency graph<br></p><p>Currently, AFAIR, installing Redis with homebrew and apt-get each produce a<br>different version, which IMO defeats the point of having a dependency<br>manager in the first place. But I guess if your proposal could ensure that<br>the same version is installed on all platforms, this particular problem<br>would be solved.<br></p><p>&gt; So the question becomes, is this sufficient? To have `brew install<br>openssl` run, or do you really need to install from source?<br></p><p>I&#39;m still not sure. Now I think your proposal will probably help with most<br>cases (which is a very good way to approach things), but definitely not<br>all. Imagine you yourself having a cross-platform C project which needs<br>platform configuring before compilation. Even when you&#39;re completely in<br>control, the fact that you still can&#39;t get this working is troubling. But<br>maybe I&#39;m just inflating extremely uncommon usecases.<br></p><p>One more thing - consider two Swift packages each needing a different<br>version of OpenSSL. Does your proposal handle that case?<br></p><p>Anyway, I&#39;d love to read your proposal and then re-evaluate whether I still<br>feel like there&#39;s a large enough benefit in introducing such customization<br>to SwiftPM :)<br></p><p>Honza<br></p><p>On Mon, Mar 21, 2016 at 6:19 PM Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Mar 19, 2016, at 10:55 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi All,<br>&gt;<br>&gt; today I was trying to investigate how to build a proper cross-platform<br>&gt; server-side Swift project and only use SwiftPM to do it. In particular, I<br>&gt; was interested in getting OpenSSL/libcurl working as a dependency (built<br>&gt; from source). The main reason is that currently the big Swift server<br>&gt; frameworks all require manual steps during deployment (running apt-get/brew<br>&gt; to install libcurl/openssl/others) and I am trying to get rid of these<br>&gt; manual steps, eventually only requiring a `swift build` and run.<br>&gt;<br>&gt; With the great initial work<br>&gt; &lt;https://github.com/apple/swift-package-manager/pull/183&gt; to support<br>&gt; building C-family packages in SwiftPM done by Ankit, I was able to have a<br>&gt; simple C package as a dependency, as advertised. However, the reality of<br>&gt; big cross-platform open source projects like OpenSSL and libcurl is that in<br>&gt; order to actually build it from source, a configure (or similar) script has<br>&gt; to be run to get the source code ready for compilation. And this is where I<br>&gt; got stuck.<br>&gt;<br>&gt; Thus I wanted to kick off a discussion of what approach of solving this<br>&gt; problem with SwiftPM should be. The simple solution, which I&#39;m tentatively<br>&gt; proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s<br>&gt; repository. Then, the Package.swift would optionally contain a field for<br>&gt; the path to this script - and if present, it&#39;d get run after SwiftPM clones<br>&gt; this package. Note that this would be a &quot;post-clone&quot; script, not a<br>&gt; &quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then only<br>&gt; after each clean.<br>&gt;<br>&gt; In order to get users to stop having to run manual script to install all<br>&gt; dependencies, I believe that we need to allow packages to declare what work<br>&gt; needs to be done on its source before compilation can begin.<br>&gt;<br>&gt;<br>&gt; I have a proposal I’d like to push today that adds knowledge to SwiftPM<br>&gt; about how to install system dependencies for System Module Packages.<br>&gt;<br>&gt; We are not keen to add arbitrary script execution to SwiftPM, because: 1)<br>&gt; Arbitrary scripts cannot be controlled and this leads to dependency hell<br>&gt; and 2) arbitrary scripts mean your package graph may do anything, which<br>&gt; nobody wants.<br>&gt;<br>&gt; Now I’m fine with the “root package” ie. the package the user has control<br>&gt; over doing more, but this would be a different discussion.<br>&gt;<br>&gt; So the question becomes, is this sufficient? To have `brew install<br>&gt; openssl` run, or do you really need to install from source?<br>&gt;<br>&gt; Max<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160321/5717a2ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>March 22, 2016 at 09:00:00am</p></header><div class="content"><p>To add one more question on the installation of system dependencies - does <br>that then drive a need to install as root/sudo? If so, I can see that <br>being a challenge for any cloud based application deployments, where your <br>both unlikely to be able to run as root/sudo, or indeed be able to install <br>into /usr/lib<br></p><p><br>Chris<br></p><p><br></p><p>From:   Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org&gt;<br>To:     Max Howell &lt;max.howell at apple.com&gt;<br>Cc:     &quot;swift-build-dev at swift.org&quot; &lt;swift-build-dev at swift.org&gt;<br>Date:   21/03/2016 18:38<br>Subject:        Re: [swift-build-dev] [Discussion Starter] Package <br>post-clone script<br>Sent by:        swift-build-dev-bounces at swift.org<br></p><p><br></p><p>I personally don&#39;t like the idea of an arbitrary script either, it was <br>just the first obvious solution to a problem I believe needs solving. The <br>advantage of building from source even of these base dependencies is that <br>the exact version of system dependencies<br>- can be ensured to be the same version across platforms<br>- their version is part of the explicit dependency graph<br></p><p>Currently, AFAIR, installing Redis with homebrew and apt-get each produce <br>a different version, which IMO defeats the point of having a dependency <br>manager in the first place. But I guess if your proposal could ensure that <br>the same version is installed on all platforms, this particular problem <br>would be solved.<br></p><p>&gt; So the question becomes, is this sufficient? To have `brew install <br>openssl` run, or do you really need to install from source?<br></p><p>I&#39;m still not sure. Now I think your proposal will probably help with most <br>cases (which is a very good way to approach things), but definitely not <br>all. Imagine you yourself having a cross-platform C project which needs <br>platform configuring before compilation. Even when you&#39;re completely in <br>control, the fact that you still can&#39;t get this working is troubling. But <br>maybe I&#39;m just inflating extremely uncommon usecases.<br></p><p>One more thing - consider two Swift packages each needing a different <br>version of OpenSSL. Does your proposal handle that case?<br></p><p>Anyway, I&#39;d love to read your proposal and then re-evaluate whether I <br>still feel like there&#39;s a large enough benefit in introducing such <br>customization to SwiftPM :)<br></p><p>Honza<br></p><p>On Mon, Mar 21, 2016 at 6:19 PM Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>On Mar 19, 2016, at 10:55 AM, Honza Dvorsky via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>Hi All,<br></p><p>today I was trying to investigate how to build a proper cross-platform <br>server-side Swift project and only use SwiftPM to do it. In particular, I <br>was interested in getting OpenSSL/libcurl working as a dependency (built <br>from source). The main reason is that currently the big Swift server <br>frameworks all require manual steps during deployment (running <br>apt-get/brew to install libcurl/openssl/others) and I am trying to get rid <br>of these manual steps, eventually only requiring a `swift build` and run.<br></p><p>With the great initial work to support building C-family packages in <br>SwiftPM done by Ankit, I was able to have a simple C package as a <br>dependency, as advertised. However, the reality of big cross-platform open <br>source projects like OpenSSL and libcurl is that in order to actually <br>build it from source, a configure (or similar) script has to be run to get <br>the source code ready for compilation. And this is where I got stuck.<br></p><p>Thus I wanted to kick off a discussion of what approach of solving this <br>problem with SwiftPM should be. The simple solution, which I&#39;m tentatively <br>proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s <br>repository. Then, the Package.swift would optionally contain a field for <br>the path to this script - and if present, it&#39;d get run after SwiftPM <br>clones this package. Note that this would be a &quot;post-clone&quot; script, not a <br>&quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then <br>only after each clean. <br></p><p>In order to get users to stop having to run manual script to install all <br>dependencies, I believe that we need to allow packages to declare what <br>work needs to be done on its source before compilation can begin.<br></p><p>I have a proposal I’d like to push today that adds knowledge to SwiftPM <br>about how to install system dependencies for System Module Packages.<br></p><p>We are not keen to add arbitrary script execution to SwiftPM, because: 1) <br>Arbitrary scripts cannot be controlled and this leads to dependency hell <br>and 2) arbitrary scripts mean your package graph may do anything, which <br>nobody wants.<br></p><p>Now I’m fine with the “root package” ie. the package the user has control <br>over doing more, but this would be a different discussion.<br></p><p>So the question becomes, is this sufficient? To have `brew install <br>openssl` run, or do you really need to install from source?<br></p><p>Max<br>_______________________________________________<br>swift-build-dev mailing list<br>swift-build-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160322/97f0ffac/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>March 22, 2016 at 05:00:00pm</p></header><div class="content"><p>My $0.02 here is that I do want to see us have some support for plugging in arbitrary build processes. However, I want it to be done in a very controlled manner, so that we are guaranteed we can evolve the package manager in sensible ways. I definitely would not want this to take the form of an arbitrary &quot;post clone&quot; script that we just run, with no other imposed structure.<br></p><p>I have a concept in mind, but have not had time to write it up.<br></p><p>I think Max and I agree that we don&#39;t want to support &quot;scripts&quot; just as a way to build things which we should have well-defined, proper ways to build in the first place. It would be nice to see how ffar we can get with our own features or adaption of existing technologies before adding this capability...<br></p><p> - Daniel<br></p><p>&gt; On Mar 21, 2016, at 11:38 AM, Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I personally don&#39;t like the idea of an arbitrary script either, it was just the first obvious solution to a problem I believe needs solving. The advantage of building from source even of these base dependencies is that the exact version of system dependencies<br>&gt; - can be ensured to be the same version across platforms<br>&gt; - their version is part of the explicit dependency graph<br>&gt; <br>&gt; Currently, AFAIR, installing Redis with homebrew and apt-get each produce a different version, which IMO defeats the point of having a dependency manager in the first place. But I guess if your proposal could ensure that the same version is installed on all platforms, this particular problem would be solved.<br>&gt; <br>&gt; &gt; So the question becomes, is this sufficient? To have `brew install openssl` run, or do you really need to install from source?<br>&gt; <br>&gt; I&#39;m still not sure. Now I think your proposal will probably help with most cases (which is a very good way to approach things), but definitely not all. Imagine you yourself having a cross-platform C project which needs platform configuring before compilation. Even when you&#39;re completely in control, the fact that you still can&#39;t get this working is troubling. But maybe I&#39;m just inflating extremely uncommon usecases.<br>&gt; <br>&gt; One more thing - consider two Swift packages each needing a different version of OpenSSL. Does your proposal handle that case?<br>&gt; <br>&gt; Anyway, I&#39;d love to read your proposal and then re-evaluate whether I still feel like there&#39;s a large enough benefit in introducing such customization to SwiftPM :)<br>&gt; <br>&gt; Honza<br>&gt; <br>&gt; On Mon, Mar 21, 2016 at 6:19 PM Max Howell &lt;max.howell at apple.com &lt;mailto:max.howell at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Mar 19, 2016, at 10:55 AM, Honza Dvorsky via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All,<br>&gt;&gt; <br>&gt;&gt; today I was trying to investigate how to build a proper cross-platform server-side Swift project and only use SwiftPM to do it. In particular, I was interested in getting OpenSSL/libcurl working as a dependency (built from source). The main reason is that currently the big Swift server frameworks all require manual steps during deployment (running apt-get/brew to install libcurl/openssl/others) and I am trying to get rid of these manual steps, eventually only requiring a `swift build` and run.<br>&gt;&gt; <br>&gt;&gt; With the great initial work &lt;https://github.com/apple/swift-package-manager/pull/183&gt; to support building C-family packages in SwiftPM done by Ankit, I was able to have a simple C package as a dependency, as advertised. However, the reality of big cross-platform open source projects like OpenSSL and libcurl is that in order to actually build it from source, a configure (or similar) script has to be run to get the source code ready for compilation. And this is where I got stuck.<br>&gt;&gt; <br>&gt;&gt; Thus I wanted to kick off a discussion of what approach of solving this problem with SwiftPM should be. The simple solution, which I&#39;m tentatively proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s repository. Then, the Package.swift would optionally contain a field for the path to this script - and if present, it&#39;d get run after SwiftPM clones this package. Note that this would be a &quot;post-clone&quot; script, not a &quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then only after each clean. <br>&gt;&gt; <br>&gt;&gt; In order to get users to stop having to run manual script to install all dependencies, I believe that we need to allow packages to declare what work needs to be done on its source before compilation can begin.<br>&gt; <br>&gt; I have a proposal I’d like to push today that adds knowledge to SwiftPM about how to install system dependencies for System Module Packages.<br>&gt; <br>&gt; We are not keen to add arbitrary script execution to SwiftPM, because: 1) Arbitrary scripts cannot be controlled and this leads to dependency hell and 2) arbitrary scripts mean your package graph may do anything, which nobody wants.<br>&gt; <br>&gt; Now I’m fine with the “root package” ie. the package the user has control over doing more, but this would be a different discussion.<br>&gt; <br>&gt; So the question becomes, is this sufficient? To have `brew install openssl` run, or do you really need to install from source?<br>&gt; <br>&gt; Max<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160322/a1190f37/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc38aef146f886571b3c445851add884?s=50"></div><header><strong>[Discussion Starter] Package post-clone script</strong> from <string>Honza Dvorsky</string> &lt;jan.dvorsky at me.com&gt;<p>March 23, 2016 at 12:00:00am</p></header><div class="content"><p>Thanks everyone, I agree with most things said here. Daniel, please let us<br>know when you have time to write up your proposed solution. As I&#39;m trying<br>to get more serious with server-side Swift applications, the inability to<br>use external libraries like libCurl and OpenSSL without manual installation<br>are holding me back most at the moment.<br></p><p>I&#39;ll welcome any solution that gets us closer to solving that problem and<br>honestly, I&#39;m not a fan of the arbitrary script solution either, so I&#39;m<br>happy to see any realistic alternatives.<br></p><p>Honza<br>On Wed, Mar 23, 2016 at 12:05 AM Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; My $0.02 here is that I do want to see us have some support for plugging<br>&gt; in arbitrary build processes. However, I want it to be done in a very<br>&gt; controlled manner, so that we are guaranteed we can evolve the package<br>&gt; manager in sensible ways. I definitely would not want this to take the form<br>&gt; of an arbitrary &quot;post clone&quot; script that we just run, with no other imposed<br>&gt; structure.<br>&gt;<br>&gt; I have a concept in mind, but have not had time to write it up.<br>&gt;<br>&gt; I think Max and I agree that we don&#39;t want to support &quot;scripts&quot; just as a<br>&gt; way to build things which we should have well-defined, proper ways to build<br>&gt; in the first place. It would be nice to see how ffar we can get with our<br>&gt; own features or adaption of existing technologies before adding this<br>&gt; capability...<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Mar 21, 2016, at 11:38 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I personally don&#39;t like the idea of an arbitrary script either, it was<br>&gt; just the first obvious solution to a problem I believe needs solving. The<br>&gt; advantage of building from source even of these base dependencies is that<br>&gt; the exact version of system dependencies<br>&gt; - can be ensured to be the same version across platforms<br>&gt; - their version is part of the explicit dependency graph<br>&gt;<br>&gt; Currently, AFAIR, installing Redis with homebrew and apt-get each produce<br>&gt; a different version, which IMO defeats the point of having a dependency<br>&gt; manager in the first place. But I guess if your proposal could ensure that<br>&gt; the same version is installed on all platforms, this particular problem<br>&gt; would be solved.<br>&gt;<br>&gt; &gt; So the question becomes, is this sufficient? To have `brew install<br>&gt; openssl` run, or do you really need to install from source?<br>&gt;<br>&gt; I&#39;m still not sure. Now I think your proposal will probably help with most<br>&gt; cases (which is a very good way to approach things), but definitely not<br>&gt; all. Imagine you yourself having a cross-platform C project which needs<br>&gt; platform configuring before compilation. Even when you&#39;re completely in<br>&gt; control, the fact that you still can&#39;t get this working is troubling. But<br>&gt; maybe I&#39;m just inflating extremely uncommon usecases.<br>&gt;<br>&gt; One more thing - consider two Swift packages each needing a different<br>&gt; version of OpenSSL. Does your proposal handle that case?<br>&gt;<br>&gt; Anyway, I&#39;d love to read your proposal and then re-evaluate whether I<br>&gt; still feel like there&#39;s a large enough benefit in introducing such<br>&gt; customization to SwiftPM :)<br>&gt;<br>&gt; Honza<br>&gt;<br>&gt; On Mon, Mar 21, 2016 at 6:19 PM Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Mar 19, 2016, at 10:55 AM, Honza Dvorsky via swift-build-dev &lt;<br>&gt;&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi All,<br>&gt;&gt;<br>&gt;&gt; today I was trying to investigate how to build a proper cross-platform<br>&gt;&gt; server-side Swift project and only use SwiftPM to do it. In particular, I<br>&gt;&gt; was interested in getting OpenSSL/libcurl working as a dependency (built<br>&gt;&gt; from source). The main reason is that currently the big Swift server<br>&gt;&gt; frameworks all require manual steps during deployment (running apt-get/brew<br>&gt;&gt; to install libcurl/openssl/others) and I am trying to get rid of these<br>&gt;&gt; manual steps, eventually only requiring a `swift build` and run.<br>&gt;&gt;<br>&gt;&gt; With the great initial work<br>&gt;&gt; &lt;https://github.com/apple/swift-package-manager/pull/183&gt; to support<br>&gt;&gt; building C-family packages in SwiftPM done by Ankit, I was able to have a<br>&gt;&gt; simple C package as a dependency, as advertised. However, the reality of<br>&gt;&gt; big cross-platform open source projects like OpenSSL and libcurl is that in<br>&gt;&gt; order to actually build it from source, a configure (or similar) script has<br>&gt;&gt; to be run to get the source code ready for compilation. And this is where I<br>&gt;&gt; got stuck.<br>&gt;&gt;<br>&gt;&gt; Thus I wanted to kick off a discussion of what approach of solving this<br>&gt;&gt; problem with SwiftPM should be. The simple solution, which I&#39;m tentatively<br>&gt;&gt; proposing, is to have an optional &quot;post-clone&quot; script in the package&#39;s<br>&gt;&gt; repository. Then, the Package.swift would optionally contain a field for<br>&gt;&gt; the path to this script - and if present, it&#39;d get run after SwiftPM clones<br>&gt;&gt; this package. Note that this would be a &quot;post-clone&quot; script, not a<br>&gt;&gt; &quot;prebuild&quot; script - I imagine it&#39;d only run once when cloning and then only<br>&gt;&gt; after each clean.<br>&gt;&gt;<br>&gt;&gt; In order to get users to stop having to run manual script to install all<br>&gt;&gt; dependencies, I believe that we need to allow packages to declare what work<br>&gt;&gt; needs to be done on its source before compilation can begin.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I have a proposal I’d like to push today that adds knowledge to SwiftPM<br>&gt;&gt; about how to install system dependencies for System Module Packages.<br>&gt;&gt;<br>&gt;&gt; We are not keen to add arbitrary script execution to SwiftPM, because: 1)<br>&gt;&gt; Arbitrary scripts cannot be controlled and this leads to dependency hell<br>&gt;&gt; and 2) arbitrary scripts mean your package graph may do anything, which<br>&gt;&gt; nobody wants.<br>&gt;&gt;<br>&gt;&gt; Now I’m fine with the “root package” ie. the package the user has control<br>&gt;&gt; over doing more, but this would be a different discussion.<br>&gt;&gt;<br>&gt;&gt; So the question becomes, is this sufficient? To have `brew install<br>&gt;&gt; openssl` run, or do you really need to install from source?<br>&gt;&gt;<br>&gt;&gt; Max<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160323/06956fe8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
