<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 21, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Jun 21 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jun 21, 2016, at 2:36 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jun 21 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt;&gt; On Jun 21, 2016, at 12:45 PM, Joe Groff via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; This could be enabled by having sizeof and friends formally take an<br>&gt;&gt;&gt;&gt; Any.Type instead of &lt;T&gt; T.Type. (This might need some tweaking of<br>&gt;&gt;&gt;&gt; the underlying builtins to be able to open existential metatypes,<br>&gt;&gt;&gt;&gt; but it seems implementable.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I&#39;m not a huge fan of Dave A&#39;s generic struct approach (for<br>&gt;&gt;&gt; reasons detailed in the proposal), <br>&gt;&gt; <br>&gt;&gt; Some of the examples used to justify avoiding that approach look<br>&gt;&gt; wrong or overly complicated to me.  Am I missing something?<br>&gt;&gt; <br>&gt;&gt;    let errnoSize = MemoryLayout.init(t: errno).size<br>&gt;&gt; <br>&gt;&gt;    _class_getInstancePositiveExtentSize(bufferClass) ==<br>&gt;&gt;    MemoryLayout&lt;_HeapObject.self&gt;.size<br>&gt;&gt; <br>&gt;&gt; wouldn&#39;t that be:<br>&gt;&gt; <br>&gt;&gt;    let errnoSize = MemoryLayout(errno).size<br>&gt;&gt; <br>&gt;&gt;    _class_getInstancePositiveExtentSize(bufferClass) == <br>&gt;&gt;    MemoryLayout&lt;_HeapObject&gt;.size<br>&gt;&gt; <br>&gt;&gt; ? <br>&gt;&gt; <br>&gt;&gt; Once you fix those issues, I don&#39;t find my proposal to hurt<br>&gt;&gt; readability at all.  One has to put those examples into their actual<br>&gt;&gt; contexts rather than packing them all next to one another, to evaluate<br>&gt;&gt; it fairly.<br>&gt;&gt; <br>&gt;&gt; Finally, I still object to doubling the API surface area just so you can<br>&gt;&gt; pass values instead of types to these functions.  Having three global<br>&gt;&gt; functions is acceptable, but six is too many, and arguably, having a<br>&gt;&gt; single type would be better.<br>&gt;<br>&gt; * I sourced my examples from the stdlib. That one&#39;s from ManagedBuffer.swift.<br>&gt;   Only qualification was that I was looking for examples of sizeof.<br></p><p>I understand that, but I don&#39;t see how it&#39;s relevant.  My point was that<br>these don&#39;t appear in code stacked one on top of another like that.<br></p><p>&gt; * In regard to offering both of and ofValue, I agree: I&#39;d rather offer<br>&gt; half the surface area, especially since Joe says the main issue is<br>&gt; technically avoidable.<br>&gt;<br>&gt; * I don&#39;t like having to scan past the MemoryLayout and the type in question to<br>&gt; get to the member name that defines what property is requested. You have to read it back<br>&gt; to front. I find that to be a human factors limitation that makes it<br>&gt; less desirable to use.<br></p><p>The “type in question” is very much relevant, just as in<br>`customers.count`, `customers` is relevant.  <br></p><p>If I didn&#39;t think it would produce semantic confusion, these would be<br>static members e.g. `Array.memoryAlignment`, and you&#39;d have to “scan<br>past” `Array`.  It&#39;s a perfectly natural way to express a property of a<br>type.<br></p><p>&gt; * At the same time, what I do like about the struct is that it&#39;s<br>&gt; extensible without introducing standalone functions (and shrinks the<br>&gt; number of functions that exist in the stdlib), and that the properties<br>&gt; express intrinsic characteristics of the memory layout of a given<br>&gt; type. The functions are measure-y. The properties are<br>&gt; characteristic-y.<br></p><p>It even directly supports the -Value variants without expanding the<br>global API surface area, per<br></p><p>   MemoryLayout(errno).size<br></p><p>however, I don&#39;t think this is a good idea because of the potential for<br>confusion in cases like this:<br></p><p>   MemoryLayout(Int.self).size<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 3:02 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If I didn&#39;t think it would produce semantic confusion, these would be<br>&gt; static members e.g. `Array.memoryAlignment`, and you&#39;d have to “scan<br>&gt; past” `Array`.  It&#39;s a perfectly natural way to express a property of a<br>&gt; type.<br></p><p><br>I think<br></p><p>Array&lt;Int&gt;.memoryAlignment <br></p><p>is quite different to scan than<br></p><p>MemoryLayout(Array&lt;Int&gt;).alignment<br></p><p>(And I obviously like the former a lot more if it wouldn&#39;t produce<br>semantic confusion -- I assume you mean in the compiler and not<br>the reader of the code). That said, I think<br></p><p>memoryAlignment(Array&lt;Int&gt;.self)<br></p><p>reads better than<br></p><p>MemoryLayout(Array&lt;Int&gt;).alignment<br></p><p>You don&#39;t have to brainparse(TM by Cognition Inc) two other things <br>before arriving at alignment.  The MemoryLayout feels more prominent<br>than it should. The alignment feels less prominent than it should.<br></p><p>I recognize we disagree on this, and we&#39;re unlikely to convince each other <br>on-list, which is why I tried hard to make sure that your alternative was <br>properly presented in the proposal. If  I have made any errors in expressing <br>your design, its intent, and rationale, please let me know and I will edit the <br>proposal to fix.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/583a3a54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>on Tue Jun 21 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 21, 2016, at 3:02 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If I didn&#39;t think it would produce semantic confusion, these would be<br>&gt;&gt; static members e.g. `Array.memoryAlignment`, and you&#39;d have to “scan<br>&gt;&gt; past” `Array`.  It&#39;s a perfectly natural way to express a property of a<br>&gt;&gt; type.<br>&gt;<br>&gt; I think<br>&gt;<br>&gt; Array&lt;Int&gt;.memoryAlignment <br>&gt;<br>&gt; is quite different to scan than<br>&gt;<br>&gt; MemoryLayout(Array&lt;Int&gt;).alignment<br>&gt;<br>&gt; (And I obviously like the former a lot more if it wouldn&#39;t produce<br>&gt; semantic confusion -- I assume you mean in the compiler and not<br>&gt; the reader of the code). <br></p><p>No, I mean to the reader of the code.  The former might easily be<br>interpreted as the memory alignment of the elements in the array, for<br>example.  And the effect is much worse with the counterpart to sizeof.<br></p><p>&gt; That said, I think<br>&gt;<br>&gt; memoryAlignment(Array&lt;Int&gt;.self)<br>&gt;<br>&gt; reads better than<br>&gt;<br>&gt; MemoryLayout(Array&lt;Int&gt;).alignment<br>&gt;<br>&gt; You don&#39;t have to brainparse(TM by Cognition Inc) two other things <br>&gt; before arriving at alignment.  The MemoryLayout feels more prominent<br>&gt; than it should. The alignment feels less prominent than it should.<br>&gt;<br>&gt; I recognize we disagree on this, <br></p><p>We don&#39;t, actually.  I agree that by themselves the APIs you are<br>proposing look better.<br></p><p>It&#39;s just that I don&#39;t think this part of the library API is important<br>enough, to enough people, that this readability is worth the additional<br>exposed surface area (and further exposure later on—I can easily imagine<br>a “minimumAlignment”).  I would *much* rather keep this stuff corralled<br>in a single namespace where it can all be found.<br></p><p>So, my argument is really about the overall shape of the standard<br>library and its effect on ordinary users more than the look/feel of<br>these particular APIs.<br></p><p>&gt; and we&#39;re unlikely to convince each other on-list, which is why I<br>&gt; tried hard to make sure that your alternative was properly presented<br>&gt; in the proposal. If I have made any errors in expressing your design,<br>&gt; its intent, and rationale, please let me know and I will edit the<br>&gt; proposal to fix.<br></p><p>I think you represented it just fine, thanks... I just don&#39;t think<br>you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>“filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>only reach for when performing unsafe operations, mostly inside the guts<br>of higher-level constructs.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 6:06 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Tue Jun 21 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; and we&#39;re unlikely to convince each other on-list, which is why I<br>&gt;&gt; tried hard to make sure that your alternative was properly presented<br>&gt;&gt; in the proposal. If I have made any errors in expressing your design,<br>&gt;&gt; its intent, and rationale, please let me know and I will edit the<br>&gt;&gt; proposal to fix.<br>&gt; <br>&gt; I think you represented it just fine, thanks... I just don&#39;t think<br>&gt; you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>&gt; “filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>&gt; only reach for when performing unsafe operations, mostly inside the guts<br>&gt; of higher-level constructs.<br></p><p>Late arrival to the thread, but wouldn’t these make sense to move these closer to the ‘Indexable’ Pointer/Buffer types, possibly onto them as static methods?<br></p><p>-DW<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/97c5c84d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 6:06 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; It&#39;s just that I don&#39;t think this part of the library API is important<br>&gt; enough, to enough people, that this readability is worth the additional<br>&gt; exposed surface area (and further exposure later on—I can easily imagine<br>&gt; a “minimumAlignment”).  I would *much* rather keep this stuff corralled<br>&gt; in a single namespace where it can all be found.<br></p><p>See? That, I totally get.<br></p><p>&gt; I think you represented it just fine, thanks... I just don&#39;t think<br>&gt; you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>&gt; “filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>&gt; only reach for when performing unsafe operations, mostly inside the guts<br>&gt; of higher-level constructs.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>Would you like me to edit it and flip the proposal then? Put the MemoryLayout in as primary,<br>mine as secondary, and add in text to explain that the motivation is less usability than serving<br>an unsafe API with minimal surface area?<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/060a21a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>on Tue Jun 21 2016, Erica Sadun &lt;erica-AT-ericasadun.com&gt; wrote:<br></p><p>&gt;&gt; On Jun 21, 2016, at 6:06 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s just that I don&#39;t think this part of the library API is important<br>&gt;&gt; enough, to enough people, that this readability is worth the additional<br>&gt;&gt; exposed surface area (and further exposure later on—I can easily imagine<br>&gt;&gt; a “minimumAlignment”).  I would *much* rather keep this stuff corralled<br>&gt;&gt; in a single namespace where it can all be found.<br>&gt;<br>&gt; See? That, I totally get.<br>&gt;<br>&gt;&gt; I think you represented it just fine, thanks... I just don&#39;t think<br>&gt;&gt; you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>&gt;&gt; “filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>&gt;&gt; only reach for when performing unsafe operations, mostly inside the guts<br>&gt;&gt; of higher-level constructs.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;<br>&gt; Would you like me to edit it and flip the proposal then? Put the<br>&gt; MemoryLayout in as primary, mine as secondary, and add in text to<br>&gt; explain that the motivation is less usability than serving an unsafe<br>&gt; API with minimal surface area?<br></p><p>Well, the review has already started, so I don&#39;t think we ought to go<br>inverting the proposal now.  Let&#39;s see how the discussion plays out.  If<br>at the end, you agree with my point-of-view, you can say so and the<br>review manager and core team will take that into account.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 7:07 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jun 21 2016, Erica Sadun &lt;erica-AT-ericasadun.com &lt;http://erica-at-ericasadun.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 6:06 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s just that I don&#39;t think this part of the library API is important<br>&gt;&gt;&gt; enough, to enough people, that this readability is worth the additional<br>&gt;&gt;&gt; exposed surface area (and further exposure later on—I can easily imagine<br>&gt;&gt;&gt; a “minimumAlignment”).  I would *much* rather keep this stuff corralled<br>&gt;&gt;&gt; in a single namespace where it can all be found.<br>&gt;&gt; <br>&gt;&gt; See? That, I totally get.<br>&gt;&gt; <br>&gt;&gt;&gt; I think you represented it just fine, thanks... I just don&#39;t think<br>&gt;&gt;&gt; you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>&gt;&gt;&gt; “filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>&gt;&gt;&gt; only reach for when performing unsafe operations, mostly inside the guts<br>&gt;&gt;&gt; of higher-level constructs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; Would you like me to edit it and flip the proposal then? Put the<br>&gt;&gt; MemoryLayout in as primary, mine as secondary, and add in text to<br>&gt;&gt; explain that the motivation is less usability than serving an unsafe<br>&gt;&gt; API with minimal surface area?<br>&gt; <br>&gt; Well, the review has already started, so I don&#39;t think we ought to go<br>&gt; inverting the proposal now.  Let&#39;s see how the discussion plays out.  If<br>&gt; at the end, you agree with my point-of-view, you can say so and the<br>&gt; review manager and core team will take that into account.<br></p><p>No, I&#39;d do edits on a gist page not in-place<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/09151e0f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Review] SE-0101: Rename sizeof and related functions to comply with API Guidelines</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>June 22, 2016 at 11:00:00pm</p></header><div class="content"><p>+1 to MemoryLayout, as I do like how it is namespaced under one type, which allows straight forward looking up of documentation. Writers from C or other sizeof() languages will able to see all available methods, allowing them to be educated to say not go for size but interval/spacing as the better choice.<br></p><p>Patrick<br></p><p>&gt; On 22 Jun 2016, at 10:26 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 6:06 PM, Dave Abrahams &lt;dabrahams at apple.com &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s just that I don&#39;t think this part of the library API is important<br>&gt;&gt; enough, to enough people, that this readability is worth the additional<br>&gt;&gt; exposed surface area (and further exposure later on—I can easily imagine<br>&gt;&gt; a “minimumAlignment”).  I would *much* rather keep this stuff corralled<br>&gt;&gt; in a single namespace where it can all be found.<br>&gt; <br>&gt; See? That, I totally get.<br>&gt; <br>&gt;&gt; I think you represented it just fine, thanks... I just don&#39;t think<br>&gt;&gt; you&#39;re accounting for the big picture.  These APIs are not like “map,”<br>&gt;&gt; “filter,” and “Dictionary.”  They&#39;re specialty items that you should<br>&gt;&gt; only reach for when performing unsafe operations, mostly inside the guts<br>&gt;&gt; of higher-level constructs.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt; <br>&gt; Would you like me to edit it and flip the proposal then? Put the MemoryLayout in as primary,<br>&gt; mine as secondary, and add in text to explain that the motivation is less usability than serving<br>&gt; an unsafe API with minimal surface area?<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/2393cda8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
