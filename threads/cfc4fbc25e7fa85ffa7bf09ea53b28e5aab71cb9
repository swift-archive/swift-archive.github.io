<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/241eedc162ca8004f61c04a8b6b96352?s=50"></div><header><strong>Throws, rethrows and declaration-modifiers in function declarations</strong> from <string>Matthieu Oger</string> &lt;moger at pixelnest.io&gt;<p>July 19, 2016 at 07:00:00pm</p></header><div class="content"><p>Hello,<br> <br>I&#39;m currently reading the updated Swift 3 preview book, and was<br>wondering about the `throws` and `rethrows` keywords.<br> <br>In a function declaration, all the keywords are at the beginning, except<br>for `throws` and `rethrows`, which are… oddly placed.<br> <br>In the grammar:<br> <br>```<br>*function-declaration *→ *function-head[1] ­function-name[2]­ **generic-parameter-clause[3]­*opt­*function-<br>signature[4]­ **function-body[5]­*opt­<br>*function-head *→ *attributes[6]­*opt­*declaration-<br>modifiers[7]­*opt­func­<br>*function-signature *→ *parameter-clause[8]­*throws­opt­*function-<br>result[9]­*opt­<br>*function-signature *→ *parameter-clause[10]­*rethrows­*function-<br>result[11]­*opt­<br>```<br>Is there a reason to have throws and rethrows at this specific position,<br>instead of declaration-modifiers?<br> <br>ie.:<br> <br>This:<br> <br>```<br>func send() throws -&gt; String {}<br>```<br> <br>Becomes:<br> <br>```<br>throwing func send() -&gt; String {}<br>rethrowing func send() -&gt; String {}<br>```<br> <br>Like:<br> <br>```<br>mutating func send() -&gt; String {}<br>```<br> <br>Or:<br> <br>```<br>throw func send() -&gt; String {}<br>rethrow func send() -&gt; String {}<br>```<br> <br>Like: <br> <br>```<br>override func send() -&gt; String {}<br>```<br> <br>(You can also see the weird difference between `override` and<br>`mutating`, one using the -ing suffix, the other being infinitive)<br> <br>Am I missing something? I find that these keywords break the flow of the<br>function declaration, separating the parameters and the return type,<br>which is never done anywhere else.<br> <br>Thanks.<br> <br>--<br>Matthieu Oger<br>Pixelnest Studio[12]<br> <br></p><p>Links:<br></p><p>   1. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-head<br>   2. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-name<br>   3. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/GenericParametersAndArguments.html#//apple_ref/swift/grammar/generic-parameter-clause<br>   4. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-signature<br>   5. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-body<br>   6. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/swift/grammar/attributes<br>   7. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/declaration-modifiers<br>   8. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause<br>   9. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result<br>  10. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause<br>  11. https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result<br>  12. http://pixelnest.io/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/cfc41cb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Throws, rethrows and declaration-modifiers in function declarations</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>July 19, 2016 at 07:00:00pm</p></header><div class="content"><p>I see where you&#39;re coming from.<br>Without any actual insight into the design of this syntax, I think throws<br>is in the position it is because it relates more to the return type of the<br>function. Aka a `throws -&gt; T` function can either throw ErrorProtocol OR<br>return a T value.<br>On Tue, Jul 19, 2016 at 10:51 AM Matthieu Oger via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I&#39;m currently reading the updated Swift 3 preview book, and was wondering<br>&gt; about the `throws` and `rethrows` keywords.<br>&gt;<br>&gt; In a function declaration, all the keywords are at the beginning, except<br>&gt; for `throws` and `rethrows`, which are… oddly placed.<br>&gt;<br>&gt; In the grammar:<br>&gt;<br>&gt; ```<br>&gt;<br>&gt; *function-declaration *→ *function-head<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-head&gt; ­function-name<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-name&gt;­ **generic-parameter-clause<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/GenericParametersAndArguments.html#//apple_ref/swift/grammar/generic-parameter-clause&gt;­*<br>&gt; opt­*function-signature<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-signature&gt;­ **function-body<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-body&gt;­*<br>&gt; opt­<br>&gt;<br>&gt; *function-head *→ *attributes<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/swift/grammar/attributes&gt;­*<br>&gt; opt­*declaration-modifiers<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/declaration-modifiers&gt;­*<br>&gt; opt­func­<br>&gt;<br>&gt; *function-signature *→ *parameter-clause<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause&gt;­*<br>&gt; throws­opt­*function-result<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result&gt;­*<br>&gt; opt­<br>&gt;<br>&gt; *function-signature *→ *parameter-clause<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause&gt;­*<br>&gt; rethrows­*function-result<br>&gt; &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result&gt;­*<br>&gt; opt­<br>&gt;<br>&gt; ```<br>&gt; Is there a reason to have throws and rethrows at this specific position,<br>&gt; instead of declaration-modifiers?<br>&gt;<br>&gt; ie.:<br>&gt;<br>&gt; This:<br>&gt;<br>&gt; ```<br>&gt; func send() throws -&gt; String {}<br>&gt; ```<br>&gt;<br>&gt; Becomes:<br>&gt;<br>&gt; ```<br>&gt; throwing func send() -&gt; String {}<br>&gt; rethrowing func send() -&gt; String {}<br>&gt; ```<br>&gt;<br>&gt; Like:<br>&gt;<br>&gt; ```<br>&gt; mutating func send() -&gt; String {}<br>&gt; ```<br>&gt;<br>&gt; Or:<br>&gt;<br>&gt; ```<br>&gt; throw func send() -&gt; String {}<br>&gt; rethrow func send() -&gt; String {}<br>&gt; ```<br>&gt;<br>&gt; Like:<br>&gt;<br>&gt; ```<br>&gt; override func send() -&gt; String {}<br>&gt; ```<br>&gt;<br>&gt; (You can also see the weird difference between `override` and `mutating`,<br>&gt; one using the -ing suffix, the other being infinitive)<br>&gt;<br>&gt; Am I missing something? I find that these keywords break the flow of the<br>&gt; function declaration, separating the parameters and the return type, which<br>&gt; is never done anywhere else.<br>&gt;<br>&gt; Thanks.<br>&gt;<br>&gt; --<br>&gt; Matthieu Oger<br>&gt; Pixelnest Studio &lt;http://pixelnest.io/&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/e5e25951/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Throws, rethrows and declaration-modifiers in function declarations</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 19, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;m really really sure I don&#39;t want to see a `override throwing<br>mutating func foo()` anywhere. Too much to read and no commas (please,<br>I&#39;m not saying this as a challenge!).<br></p><p>Additionally, I think `overriden` would make the code much more<br>english-readable and I&#39;m still not proposing it.<br></p><p>L<br></p><p><br>On 19 July 2016 at 16:01, Javier Soto via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I see where you&#39;re coming from.<br>&gt; Without any actual insight into the design of this syntax, I think throws is<br>&gt; in the position it is because it relates more to the return type of the<br>&gt; function. Aka a `throws -&gt; T` function can either throw ErrorProtocol OR<br>&gt; return a T value.<br>&gt; On Tue, Jul 19, 2016 at 10:51 AM Matthieu Oger via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello,<br>&gt;&gt;<br>&gt;&gt; I&#39;m currently reading the updated Swift 3 preview book, and was wondering<br>&gt;&gt; about the `throws` and `rethrows` keywords.<br>&gt;&gt;<br>&gt;&gt; In a function declaration, all the keywords are at the beginning, except<br>&gt;&gt; for `throws` and `rethrows`, which are… oddly placed.<br>&gt;&gt;<br>&gt;&gt; In the grammar:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; function-declaration → function-head ­function-name­<br>&gt;&gt; generic-parameter-clause­opt­function-signature­ function-body­opt­<br>&gt;&gt;<br>&gt;&gt; function-head → attributes­opt­declaration-modifiers­opt­func­<br>&gt;&gt;<br>&gt;&gt; function-signature → parameter-clause­throws­opt­function-result­opt­<br>&gt;&gt;<br>&gt;&gt; function-signature → parameter-clause­rethrows­function-result­opt­<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Is there a reason to have throws and rethrows at this specific position,<br>&gt;&gt; instead of declaration-modifiers?<br>&gt;&gt;<br>&gt;&gt; ie.:<br>&gt;&gt;<br>&gt;&gt; This:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; func send() throws -&gt; String {}<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Becomes:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; throwing func send() -&gt; String {}<br>&gt;&gt; rethrowing func send() -&gt; String {}<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Like:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; mutating func send() -&gt; String {}<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Or:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; throw func send() -&gt; String {}<br>&gt;&gt; rethrow func send() -&gt; String {}<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Like:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; override func send() -&gt; String {}<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; (You can also see the weird difference between `override` and `mutating`,<br>&gt;&gt; one using the -ing suffix, the other being infinitive)<br>&gt;&gt;<br>&gt;&gt; Am I missing something? I find that these keywords break the flow of the<br>&gt;&gt; function declaration, separating the parameters and the return type, which<br>&gt;&gt; is never done anywhere else.<br>&gt;&gt;<br>&gt;&gt; Thanks.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Matthieu Oger<br>&gt;&gt; Pixelnest Studio<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; Javier Soto<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Throws, rethrows and declaration-modifiers in function declarations</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 20, 2016 at 08:00:00am</p></header><div class="content"><p>Because its part of the type. That’s why we can have throws on closure types:<br></p><p>func foo(bar: Int throws -&gt; Void) {}<br></p><p>&gt; On 19 Jul 2016, at 19:51, Matthieu Oger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt;  <br>&gt; I&#39;m currently reading the updated Swift 3 preview book, and was wondering about the `throws` and `rethrows` keywords.<br>&gt;  <br>&gt; In a function declaration, all the keywords are at the beginning, except for `throws` and `rethrows`, which are… oddly placed.<br>&gt;  <br>&gt; In the grammar:<br>&gt;  <br>&gt; ```<br>&gt; function-declaration → function-head &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-head&gt; ­function-name &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-name&gt;­ generic-parameter-clause &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/GenericParametersAndArguments.html#//apple_ref/swift/grammar/generic-parameter-clause&gt;­opt­function-signature &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-signature&gt;­ function-body &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-body&gt;­opt­<br>&gt; function-head → attributes &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/swift/grammar/attributes&gt;­opt­declaration-modifiers &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/declaration-modifiers&gt;­opt­func­<br>&gt; function-signature → parameter-clause &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause&gt;­throws­opt­function-result &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result&gt;­opt­<br>&gt; function-signature → parameter-clause &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/parameter-clause&gt;­rethrows­function-result &lt;https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/function-result&gt;­opt­<br>&gt; ```<br>&gt; Is there a reason to have throws and rethrows at this specific position, instead of declaration-modifiers?<br>&gt;  <br>&gt; ie.:<br>&gt;  <br>&gt; This:<br>&gt;  <br>&gt; ```<br>&gt; func send() throws -&gt; String {}<br>&gt; ```<br>&gt;  <br>&gt; Becomes:<br>&gt;  <br>&gt; ```<br>&gt; throwing func send() -&gt; String {}<br>&gt; rethrowing func send() -&gt; String {}<br>&gt; ```<br>&gt;  <br>&gt; Like:<br>&gt;  <br>&gt; ```<br>&gt; mutating func send() -&gt; String {}<br>&gt; ```<br>&gt;  <br>&gt; Or:<br>&gt;  <br>&gt; ```<br>&gt; throw func send() -&gt; String {}<br>&gt; rethrow func send() -&gt; String {}<br>&gt; ```<br>&gt;  <br>&gt; Like: <br>&gt;  <br>&gt; ```<br>&gt; override func send() -&gt; String {}<br>&gt; ```<br>&gt;  <br>&gt; (You can also see the weird difference between `override` and `mutating`, one using the -ing suffix, the other being infinitive) <br>&gt;  <br>&gt; Am I missing something? I find that these keywords break the flow of the function declaration, separating the parameters and the return type, which is never done anywhere else.<br>&gt;  <br>&gt; Thanks.<br>&gt;  <br>&gt; --<br>&gt; Matthieu Oger<br>&gt; Pixelnest Studio &lt;http://pixelnest.io/&gt;<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/66a2fcc0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
