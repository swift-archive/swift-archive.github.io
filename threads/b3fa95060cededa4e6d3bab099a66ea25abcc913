<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0025 Scoped Access Level</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>March  1, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; &gt; On Feb 29, 2016, at 8:08 PM, Ilya Belenkiy&lt;ilya.belenkiy at gmail.com(mailto:ilya.belenkiy at gmail.com)&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; This is one interoperation. Here is another that makes it fit perfectly well:<br>&gt; &gt; <br>&gt; &gt; - public: exports symbol to all files<br>&gt; &gt; - internal: exports symbol to module files<br>&gt; &gt; - private: exports symbol to one file containing the scope<br>&gt; &gt; - scoped: no export<br>&gt; &gt; <br>&gt; I disagree. The conceptual model is file scoping.<br>&gt; <br>&gt; `public` - available in any source file within the module and in external source files that link the module<br>&gt; `internal` - available in any source file within the module<br>&gt; `private` - available in its own source file<br>&gt; <br>&gt; <br>&gt; The addition of `local` adds a new conceptual model around access control: lexical scoping. This type of scoping also actively works against various Swift patterns that are fairly common: using extensions to implement protocol conformance.<br></p><p>I find it insteresting that you are mentioning this to motvate your disagreement of the proposal, because it’s precisely the reason I gave to motivate my support.<br></p><p>&gt; <br>&gt; &gt; struct TypeA {<br>&gt; &gt; vara:String<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; extensionTypeA:StringLiteralConvertible{<br>&gt; &gt; init(stringLiteral value:String) {<br>&gt; &gt; self.a= value<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; init(extendedGraphemeClusterLiteral value:String) {<br>&gt; &gt; self.a= value<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; init(unicodeScalarLiteral value:String) {<br>&gt; &gt; self.a= value<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; When `a` on type `TypeA` is declared as `local`, this pattern is no longer possible. Thus I find the use cases for `local`, as presented in the proposal, extremely limited in real use cases.<br></p><p>Indeed, `local`wouldn’t be useful with such a layout. But what about this:<br></p><p>struct TypeA {<br>    local var a: String<br></p><p>    init(var a: String) {<br>        self.a = a<br>    }<br>}<br></p><p>extensionTypeA:StringLiteralConvertible{<br>    init(stringLiteral value:String) {<br>        self.init(a: value)<br>    }<br></p><p>    init(extendedGraphemeClusterLiteral value:String) {<br>        self.init(a: value)<br>    }<br></p><p>    init(unicodeScalarLiteral value:String) {<br>        self.init(a: value)<br>    }<br>}<br></p><p>With this change, `a` has become an implementation detail that nobody—nobody!—can access directly, not even methods of the type itself, can access, unless they are declared in the same scope.<br></p><p>Of course this is just a toy example; but in real world cases where you need to guarantee invariants, having `local`would mean that to verify the correctness of your code you would only need to look at the immediate surroundings, instead of having to check the whole file.<br></p><p>&gt; <br>&gt; Now, if the proposal was to have `local` be scoped to the type that defines it, thus allowing extensions access to it, then it becomes more interesting, and has many more applicable use cases while still allowing the use case defined in the proposal.<br>&gt; <br>&gt; -David<br></p><p>I would find such an access control quite useless. Types can be extended by anyone, so declaring some member `private`in the C++ sense would be the same as declaring it public—everyone would be able to access it just by defining an ad-hoc extension.<br></p><p>—<br>Nicola<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
