<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0023 API Design Guidelines: Mutating vs Functional</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 24, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;m finding the thread on the SE-0023 Review overwhelming. I&#39;m starting a new thread and I&#39;m including a link to a write-up of why I believe naming is better served with functional/procedural differentiation over mutating/non-mutating. <br></p><p>https://github.com/erica/SwiftStyle/blob/master/Grammatical.md &lt;https://github.com/erica/SwiftStyle/blob/master/Grammatical.md&gt;<br></p><p>If I have not addressed any of Dave&#39;s concerns, I will be happy to update this.<br></p><p>-- Erica<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/bc41f250/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>SE-0023 API Design Guidelines: Mutating vs Functional</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January 25, 2016 at 01:00:00am</p></header><div class="content"><p>&#39;Functional&#39; is pretty vague in this context. Mutating cuts to<br>differentiating trait.<br></p><p>&quot;A function produces something&quot; can fall down if I have a function with<br>side effects.<br></p><p>``` swift<br>private var state = 0<br>func generateCount() -&gt; String {<br>    state += 1<br>    return &quot;I&#39;ve been called \(state) times&quot;<br>}<br>```<br></p><p>We could narrow it by saying that a pure function has no side effects but<br>this just draws us further from the relevant point, in my opinion.<br></p><p><br>On Sun, Jan 24, 2016 at 7:09 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m finding the thread on the SE-0023 Review overwhelming. I&#39;m starting a<br>&gt; new thread and I&#39;m including a link to a write-up of why I believe naming<br>&gt; is better served with functional/procedural differentiation over<br>&gt; mutating/non-mutating.<br>&gt;<br>&gt; https://github.com/erica/SwiftStyle/blob/master/Grammatical.md<br>&gt;<br>&gt; If I have not addressed any of Dave&#39;s concerns, I will be happy to update<br>&gt; this.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160125/cf1d450e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0fc40f95a5c6b063df44b3bc136d764b?s=50"></div><header><strong>SE-0023 API Design Guidelines: Mutating vs Functional</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.com&gt;<p>January 25, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 25 Jan 2016, at 06:12, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &#39;Functional&#39; is pretty vague in this context. Mutating cuts to differentiating trait. <br>&gt; <br>&gt; &quot;A function produces something&quot; can fall down if I have a function with side effects. <br>&gt; <br>&gt; ``` swift<br>&gt; private var state = 0 <br>&gt; func generateCount() -&gt; String {<br>&gt;     state += 1<br>&gt;     return &quot;I&#39;ve been called \(state) times&quot; <br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; We could narrow it by saying that a pure function has no side effects but this just draws us further from the relevant point, in my opinion.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>Also, how do we differentiate between functions that have @warn_unused_result? In your example the string that’s returned isn’t actually required to be used, so someone could call the function purely with the intention of increment state; not that it would be a very useful thing to do, but some functions have return values that aren’t necessarily required, like removeLast() on Arrays (I may not actually want the last array element, or I already know what it is and just want it removed).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>SE-0023 API Design Guidelines: Mutating vs Functional</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 25, 2016 at 02:00:00pm</p></header><div class="content"><p>I incorporated your feedback. Please reload: https://github.com/erica/SwiftStyle/blob/master/Grammatical.md<br></p><p>-- E<br></p><p><br>&gt; On Jan 25, 2016, at 2:52 AM, Haravikk &lt;swift-evolution at haravikk.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 25 Jan 2016, at 06:12, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &#39;Functional&#39; is pretty vague in this context. Mutating cuts to differentiating trait. <br>&gt;&gt; <br>&gt;&gt; &quot;A function produces something&quot; can fall down if I have a function with side effects. <br>&gt;&gt; <br>&gt;&gt; ``` swift<br>&gt;&gt; private var state = 0 <br>&gt;&gt; func generateCount() -&gt; String {<br>&gt;&gt;    state += 1<br>&gt;&gt;    return &quot;I&#39;ve been called \(state) times&quot; <br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; We could narrow it by saying that a pure function has no side effects but this just draws us further from the relevant point, in my opinion.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; Also, how do we differentiate between functions that have @warn_unused_result? In your example the string that’s returned isn’t actually required to be used, so someone could call the function purely with the intention of increment state; not that it would be a very useful thing to do, but some functions have return values that aren’t necessarily required, like removeLast() on Arrays (I may not actually want the last array element, or I already know what it is and just want it removed).<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
