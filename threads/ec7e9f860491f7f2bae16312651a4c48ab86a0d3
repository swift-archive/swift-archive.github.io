<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cbc6c0487c2b8af3ee7589b1eb5fa362?s=50"></div><header><strong>REPL questions</strong> from <string>Todd Fiala</string> &lt;todd.fiala at gmail.com&gt;<p>December  5, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>Thanks for the questions on the REPL.<br></p><p>With respect to incorporating a REPL into another program, the text-based<br>Swift REPL is available in and implemented via LLDB.  As Swift LLDB is<br>implemented on top of LLDB, there are two projects involved with regards to<br>the source.  The source code for the core of LLDB (as available via llvm.org)<br>is available according to the terms of the license as spelled out at<br>llvm.org.  The Swift-specific parts (i.e. any files not in the llvm.org<br>LLDB source base) are available according to the license as specified at<br>swift.org.  I would direct you to those licenses to see if they are<br>compatible with your desired usage.<br></p><p>There are at least a few apps that incorporate LLDB into their IDEs, either<br>via the SB API (the LLDB C++-based API), via the GDB Remote protocol, and<br>via the GDB mi protocol (via lldb-mi).  It is definitely possible to go the<br>route of setting up an app that communicates with LLDB to get a REPL<br>experience that way.<br></p><p>I&#39;ll be able to comment more directly on questions this upcoming week.<br>-- <br>-Todd<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20151205/ec7ea0d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e3903086ed803b3e3dadf2f0d68e6042?s=50"></div><header><strong>REPL questions</strong> from <string>Gage Morgan</string> &lt;gagemorgan at outlook.com&gt;<p>December  6, 2015 at 12:00:00am</p></header><div class="content"><p>If we had a language binding for gtk, and entered code to create a window, would REPL running the Swift command be able to respond interactively from CLI? Thanks,MGage Morgan<br></p><p>Sent from Outlook<br></p><p><br></p><p><br>On Sat, Dec 5, 2015 at 4:33 PM -0800, &quot;Todd Fiala via swift-lldb-dev&quot; &lt;swift-lldb-dev at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p>Hi all,<br></p><p>Thanks for the questions on the REPL.<br></p><p>With respect to incorporating a REPL into another program, the text-based<br>Swift REPL is available in and implemented via LLDB.  As Swift LLDB is<br>implemented on top of LLDB, there are two projects involved with regards to<br>the source.  The source code for the core of LLDB (as available via llvm.org)<br>is available according to the terms of the license as spelled out at<br>llvm.org.  The Swift-specific parts (i.e. any files not in the llvm.org<br>LLDB source base) are available according to the license as specified at<br>swift.org.  I would direct you to those licenses to see if they are<br>compatible with your desired usage.<br></p><p>There are at least a few apps that incorporate LLDB into their IDEs, either<br>via the SB API (the LLDB C++-based API), via the GDB Remote protocol, and<br>via the GDB mi protocol (via lldb-mi).  It is definitely possible to go the<br>route of setting up an app that communicates with LLDB to get a REPL<br>experience that way.<br></p><p>I&#39;ll be able to comment more directly on questions this upcoming week.<br>--<br>-Todd<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20151206/38e81ab3/attachment.html&gt;<br>-------------- next part --------------<br>_______________________________________________<br>swift-lldb-dev mailing list<br>swift-lldb-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f6b43a34278b86fef0fb5aad3771d7b?s=50"></div><header><strong>REPL questions</strong> from <string>Perry E. Metzger</string> &lt;perry at piermont.com&gt;<p>December  6, 2015 at 09:00:00am</p></header><div class="content"><p>On Sat, 5 Dec 2015 16:33:54 -0800 Todd Fiala via swift-lldb-dev<br>&lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; Thanks for the questions on the REPL.<br>[...]<br>&gt; I would direct you to those licenses to see if they are<br>&gt; compatible with your desired usage.<br></p><p>Licensing isn&#39;t really what I&#39;m worried about. I have a technical<br>issue.<br></p><p>&gt; There are at least a few apps that incorporate LLDB into their<br>&gt; IDEs, either via the SB API (the LLDB C++-based API), via the GDB<br>&gt; Remote protocol, and via the GDB mi protocol (via lldb-mi).  It is<br>&gt; definitely possible to go the route of setting up an app that<br>&gt; communicates with LLDB to get a REPL experience that way.<br>&gt; <br>&gt; I&#39;ll be able to comment more directly on questions this upcoming<br>&gt; week.<br></p><p>What I&#39;m more looking for is this. Consider how Emacs uses elisp --<br>the application can be extended and altered by the end user at will<br>by adding new interpreted elisp code in the field.<br></p><p>Say I wanted to have a Swift based system that did more or less the<br>same thing, that is, which provided users with the ability to extend<br>the function of their program by writing Swift code which was loaded<br>and interpreted at run time and which interacted seamlessly with the<br>Swift code that makes up the body of the application.<br></p><p>I&#39;m sure that given enough work this could be done, but I&#39;m asking<br>if this is something that should be reasonably practical to do with<br>the REPL given the current architecture or if it would require an<br>unreasonable amount of work.<br></p><p>Note that I&#39;m not trying to build an IDE. It is rather an application<br>where a sophisticated end user may have needs that are difficult for<br>the application programmer to fully anticipate.<br></p><p>(If there is some other way to do this that is more practical, say<br>somehow incorporating the compiler at runtime and compiling and<br>loading new code into the app, I&#39;d be interested in knowing. However,<br>an interpreter seemed like the easier choice.)<br></p><p>Perry<br>-- <br>Perry E. Metzger		perry at piermont.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>REPL questions</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>December  7, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 6:48 AM, Perry E. Metzger via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sat, 5 Dec 2015 16:33:54 -0800 Todd Fiala via swift-lldb-dev<br>&gt; &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt;&gt; Thanks for the questions on the REPL.<br>&gt; [...]<br>&gt;&gt; I would direct you to those licenses to see if they are<br>&gt;&gt; compatible with your desired usage.<br>&gt; <br>&gt; Licensing isn&#39;t really what I&#39;m worried about. I have a technical<br>&gt; issue.<br>&gt; <br>&gt;&gt; There are at least a few apps that incorporate LLDB into their<br>&gt;&gt; IDEs, either via the SB API (the LLDB C++-based API), via the GDB<br>&gt;&gt; Remote protocol, and via the GDB mi protocol (via lldb-mi).  It is<br>&gt;&gt; definitely possible to go the route of setting up an app that<br>&gt;&gt; communicates with LLDB to get a REPL experience that way.<br>&gt;&gt; <br>&gt;&gt; I&#39;ll be able to comment more directly on questions this upcoming<br>&gt;&gt; week.<br>&gt; <br>&gt; What I&#39;m more looking for is this. Consider how Emacs uses elisp --<br>&gt; the application can be extended and altered by the end user at will<br>&gt; by adding new interpreted elisp code in the field.<br>&gt; <br>&gt; Say I wanted to have a Swift based system that did more or less the<br>&gt; same thing, that is, which provided users with the ability to extend<br>&gt; the function of their program by writing Swift code which was loaded<br>&gt; and interpreted at run time and which interacted seamlessly with the<br>&gt; Swift code that makes up the body of the application.<br>&gt; <br>&gt; I&#39;m sure that given enough work this could be done, but I&#39;m asking<br>&gt; if this is something that should be reasonably practical to do with<br>&gt; the REPL given the current architecture or if it would require an<br>&gt; unreasonable amount of work.<br>&gt; <br>&gt; Note that I&#39;m not trying to build an IDE. It is rather an application<br>&gt; where a sophisticated end user may have needs that are difficult for<br>&gt; the application programmer to fully anticipate.<br>&gt; <br>&gt; (If there is some other way to do this that is more practical, say<br>&gt; somehow incorporating the compiler at runtime and compiling and<br>&gt; loading new code into the app, I&#39;d be interested in knowing. However,<br>&gt; an interpreter seemed like the easier choice.)<br>&gt; <br></p><p>Sorry I missed this yesterday.  My normal gmail account is missing from the lists, so my last answer was made without seeing this first.<br></p><p>The Swift REPL works by injecting code into a separate Swift process.  The code is JIT-ed and then run in the separate process by way of LLDB’s highly-specialized code used to control other processes (as one would expect to find in a debugger).  It would be challenging to adapt that code as is to run in the same process (as it sounds like you want, for purposes of app customization along the lines of Python/Maya, elisp/Emacs, etc.)  However, it certainly would act as a template on how to do it.  I don’t think you’d want to try to build the app incorporating LLDB, because LLDB brings with it a whole lot of functionality that is likely not useful unless your app is a debugger.<br></p><p>The places to start looking would be any of the files with *Expression* to get a sense of how our expression engine works.  The Swift specific ones will set up a context to compile, JIT and run code.  The run part is what you would likely need to change, as instead of sending code over to another process, usurping a thread, and sending results back, your code will instead want to arrange to run the newly JIT-ed code in the local process.<br></p><p>I don’t think interpreting will be easier if you plan to base your code on what you find in LLDB.  The JIT is all there, but I don’t think there is any existing interpreter code (Sean - please correct me if I’m wrong here).  Unless that’s incorrect, I think you’d find that you need to write more code to handle interpreting rather than JIT-ing it.<br></p><p>Hope that helps!<br></p><p>-Todd<br></p><p>&gt; Perry<br>&gt; -- <br>&gt; Perry E. Metzger		perry at piermont.com<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f6b43a34278b86fef0fb5aad3771d7b?s=50"></div><header><strong>REPL questions</strong> from <string>Perry E. Metzger</string> &lt;perry at piermont.com&gt;<p>December  7, 2015 at 09:00:00pm</p></header><div class="content"><p>On Mon, 07 Dec 2015 08:29:39 -0800 Todd Fiala &lt;tfiala at apple.com&gt;<br>wrote:<br>&gt; The Swift REPL works by injecting code into a separate Swift<br>&gt; process.<br>[...]<br></p><p>Thanks for this and the rest of the technical information you&#39;ve<br>provided here. It is quite useful.<br></p><p>&gt; I don&#39;t think interpreting will be easier if you plan to base your<br>&gt; code on what you find in LLDB.  The JIT is all there, but I don&#39;t<br>&gt; think there is any existing interpreter code (Sean - please correct<br>&gt; me if I&#39;m wrong here).  Unless that&#39;s incorrect, I think you&#39;d find<br>&gt; that you need to write more code to handle interpreting rather than<br>&gt; JIT-ing it.<br></p><p>&quot;Interpreting&quot; can be read as &quot;executing user provided extension<br>language source code at run time&quot;. A JIT is just as useful for this<br>purpose as a &quot;true&quot; interpreter (whatever that might be).<br></p><p>I presume questions about the JIT stuff in the LLDB codebase should go<br>to this list?<br></p><p>&gt; Hope that helps!<br></p><p>It is very helpful! Thank you!<br></p><p>Perry<br>-- <br>Perry E. Metzger		perry at piermont.com<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e3903086ed803b3e3dadf2f0d68e6042?s=50"></div><header><strong>REPL questions</strong> from <string>Gage Morgan</string> &lt;gagemorgan at outlook.com&gt;<p>December  7, 2015 at 02:00:00am</p></header><div class="content"><p>&gt; The Swift-specific parts (i.e. any files not in the llvm.org LLDB source base) are &gt; available according to the license as specified at swift.org.  I would direct you to &gt; those licenses to see if they are compatible with your desired usage.<br>Let me rephrase that, I think that was a response to asking what Apple says you can or cannot do with REPL. I meant &quot;Has Apple stated possible uses for REPL other than from the CLI-only interface?&quot; <br>I&#39;m looking to develop GUIs with it, but am unsure how. <br>Thanks,--MGage--<br></p><p>Sent from Outlook<br></p><p>    _____________________________<br>From: Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt;<br>Sent: Saturday, December 5, 2015 7:33 PM<br>Subject: [swift-lldb-dev] REPL questions<br>To:  &lt;swift-lldb-dev at swift.org&gt;<br></p><p><br>       Hi all,       <br>          Thanks for the questions on the REPL.          <br>          With respect to incorporating a REPL into another program, the text-based Swift REPL is available in and implemented via LLDB.  As Swift LLDB is implemented on top of LLDB, there are two projects involved with regards to the source.  The source code for the core of LLDB (as available via     llvm.org) is available according to the terms of the license as spelled out at     llvm.org.  The Swift-specific parts (i.e. any files not in the     llvm.org LLDB source base) are available according to the license as specified at     swift.org.  I would direct you to those licenses to see if they are compatible with your desired usage.          <br>          There are at least a few apps that incorporate LLDB into their IDEs, either via the SB API (the LLDB C++-based API), via the GDB Remote protocol, and via the GDB mi protocol (via lldb-mi).  It is definitely possible to go the route of setting up an app that communicates with LLDB to get a REPL experience that way.          <br>          I&#39;ll be able to comment more directly on questions this upcoming week.               --      <br>                   -Todd                    <br></p><p><br>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20151207/6cbad6bd/attachment.html&gt;<br>-------------- next part --------------<br>_______________________________________________<br>swift-lldb-dev mailing list<br>swift-lldb-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cbc6c0487c2b8af3ee7589b1eb5fa362?s=50"></div><header><strong>REPL questions</strong> from <string>Todd Fiala</string> &lt;todd.fiala at gmail.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi Gage,<br></p><p>The REPL does let you import Swift modules.  If you wanted to make or find<br>a GTK binding, load it into the REPL, and drive that via the REPL, you<br>certainly could do that.  Using the REPL to do this would allow you to<br>explore the binding at runtime, as many REPL-based languages afford.  Is<br>that the kind of thing you&#39;re after?<br></p><p>The last comment makes me think you may be asking more about a graphical<br>REPL, though.  Xcode has Playgrounds, but that doesn&#39;t exist in Open Source<br>Swift.  I don&#39;t see what would stop somebody from trying to write something<br>similar against GTK or any other GUI library.<br></p><p>Hope that helps!<br></p><p>-Todd<br></p><p>On Sun, Dec 6, 2015 at 6:12 PM, Gage Morgan &lt;gagemorgan at outlook.com&gt; wrote:<br></p><p>&gt; &gt; The Swift-specific parts (i.e. any files not in the llvm.org LLDB<br>&gt; source base) are &gt; available according to the license as specified at<br>&gt; swift.org. I would direct you to &gt; those licenses to see if they are<br>&gt; compatible with your desired usage.<br>&gt;<br>&gt; Let me rephrase that, I think that was a response to asking what Apple<br>&gt; says you can or cannot do with REPL. I meant &quot;Has Apple stated possible<br>&gt; uses for REPL other than from the CLI-only interface?&quot;<br>&gt;<br>&gt; I&#39;m looking to develop GUIs with it, but am unsure how.<br>&gt;<br>&gt; Thanks,<br>&gt; --MGage--<br>&gt;<br>&gt; Sent from Outlook &lt;http://aka.ms/Ox5hz3&gt;<br>&gt;<br>&gt; _____________________________<br>&gt; From: Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt;<br>&gt; Sent: Saturday, December 5, 2015 7:33 PM<br>&gt; Subject: [swift-lldb-dev] REPL questions<br>&gt; To: &lt;swift-lldb-dev at swift.org&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; Thanks for the questions on the REPL.<br>&gt;<br>&gt; With respect to incorporating a REPL into another program, the text-based<br>&gt; Swift REPL is available in and implemented via LLDB.  As Swift LLDB is<br>&gt; implemented on top of LLDB, there are two projects involved with regards to<br>&gt; the source.  The source code for the core of LLDB (as available via<br>&gt; llvm.org) is available according to the terms of the license as spelled<br>&gt; out at llvm.org.  The Swift-specific parts (i.e. any files not in the<br>&gt; llvm.org LLDB source base) are available according to the license as<br>&gt; specified at swift.org.  I would direct you to those licenses to see if<br>&gt; they are compatible with your desired usage.<br>&gt;<br>&gt; There are at least a few apps that incorporate LLDB into their IDEs,<br>&gt; either via the SB API (the LLDB C++-based API), via the GDB Remote<br>&gt; protocol, and via the GDB mi protocol (via lldb-mi).  It is definitely<br>&gt; possible to go the route of setting up an app that communicates with LLDB<br>&gt; to get a REPL experience that way.<br>&gt;<br>&gt; I&#39;ll be able to comment more directly on questions this upcoming week.<br>&gt; --<br>&gt; -Todd<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br>-Todd<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20151206/629e1ca6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e3903086ed803b3e3dadf2f0d68e6042?s=50"></div><header><strong>REPL questions</strong> from <string>Gage Morgan</string> &lt;gagemorgan at outlook.com&gt;<p>December  8, 2015 at 02:00:00am</p></header><div class="content"><p>That was what I was looking for. Just one more question: For any project, how is a C to Swift function binding created? I&#39;d like to know how to import C functions to Swift. Once I can do this successfully, I&#39;ll be all set.<br></p><p>Sent from Outlook<br></p><p><br></p><p><br>On Sun, Dec 6, 2015 at 10:39 PM -0800, &quot;Todd Fiala&quot; &lt;todd.fiala at gmail.com&gt; wrote:<br></p><p><br></p><p><br></p><p>Hi Gage,<br></p><p>The REPL does let you import Swift modules.  If you wanted to make or find<br>a GTK binding, load it into the REPL, and drive that via the REPL, you<br>certainly could do that.  Using the REPL to do this would allow you to<br>explore the binding at runtime, as many REPL-based languages afford.  Is<br>that the kind of thing you&#39;re after?<br></p><p>The last comment makes me think you may be asking more about a graphical<br>REPL, though.  Xcode has Playgrounds, but that doesn&#39;t exist in Open Source<br>Swift.  I don&#39;t see what would stop somebody from trying to write something<br>similar against GTK or any other GUI library.<br></p><p>Hope that helps!<br></p><p>-Todd<br></p><p>On Sun, Dec 6, 2015 at 6:12 PM, Gage Morgan &lt;gagemorgan at outlook.com&gt; wrote:<br></p><p>&gt; &gt; The Swift-specific parts (i.e. any files not in the llvm.org LLDB<br>&gt; source base) are &gt; available according to the license as specified at<br>&gt; swift.org. I would direct you to &gt; those licenses to see if they are<br>&gt; compatible with your desired usage.<br>&gt;<br>&gt; Let me rephrase that, I think that was a response to asking what Apple<br>&gt; says you can or cannot do with REPL. I meant &quot;Has Apple stated possible<br>&gt; uses for REPL other than from the CLI-only interface?&quot;<br>&gt;<br>&gt; I&#39;m looking to develop GUIs with it, but am unsure how.<br>&gt;<br>&gt; Thanks,<br>&gt; --MGage--<br>&gt;<br>&gt; Sent from Outlook &lt;http://aka.ms/Ox5hz3&gt;<br>&gt;<br>&gt; _____________________________<br>&gt; From: Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt;<br>&gt; Sent: Saturday, December 5, 2015 7:33 PM<br>&gt; Subject: [swift-lldb-dev] REPL questions<br>&gt; To: &lt;swift-lldb-dev at swift.org&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; Thanks for the questions on the REPL.<br>&gt;<br>&gt; With respect to incorporating a REPL into another program, the text-based<br>&gt; Swift REPL is available in and implemented via LLDB.  As Swift LLDB is<br>&gt; implemented on top of LLDB, there are two projects involved with regards to<br>&gt; the source.  The source code for the core of LLDB (as available via<br>&gt; llvm.org) is available according to the terms of the license as spelled<br>&gt; out at llvm.org.  The Swift-specific parts (i.e. any files not in the<br>&gt; llvm.org LLDB source base) are available according to the license as<br>&gt; specified at swift.org.  I would direct you to those licenses to see if<br>&gt; they are compatible with your desired usage.<br>&gt;<br>&gt; There are at least a few apps that incorporate LLDB into their IDEs,<br>&gt; either via the SB API (the LLDB C++-based API), via the GDB Remote<br>&gt; protocol, and via the GDB mi protocol (via lldb-mi).  It is definitely<br>&gt; possible to go the route of setting up an app that communicates with LLDB<br>&gt; to get a REPL experience that way.<br>&gt;<br>&gt; I&#39;ll be able to comment more directly on questions this upcoming week.<br>&gt; --<br>&gt; -Todd<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>--<br>-Todd<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20151208/2c57c7fb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52cd4e8dbbba27ff1ea5fa122af8bd56?s=50"></div><header><strong>REPL questions</strong> from <string>Jim Ingham</string> &lt;jingham at apple.com&gt;<p>December  7, 2015 at 06:00:00pm</p></header><div class="content"><p>&gt; On Dec 7, 2015, at 6:19 PM, Gage Morgan via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; That was what I was looking for. Just one more question: For any project, how is a C to Swift function binding created? I&#39;d like to know how to import C functions to Swift. Once I can do this successfully, I&#39;ll be all set. <br></p><p>That&#39;s a question that is more appropriate for swift-users.  You want the place where some compiler folks hang out...<br></p><p>Jim<br></p><p>&gt; <br>&gt; Sent from Outlook<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 10:39 PM -0800, &quot;Todd Fiala&quot; &lt;todd.fiala at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi Gage,<br>&gt; <br>&gt; The REPL does let you import Swift modules.  If you wanted to make or find a GTK binding, load it into the REPL, and drive that via the REPL, you certainly could do that.  Using the REPL to do this would allow you to explore the binding at runtime, as many REPL-based languages afford.  Is that the kind of thing you&#39;re after?<br>&gt; <br>&gt; The last comment makes me think you may be asking more about a graphical REPL, though.  Xcode has Playgrounds, but that doesn&#39;t exist in Open Source Swift.  I don&#39;t see what would stop somebody from trying to write something similar against GTK or any other GUI library.<br>&gt; <br>&gt; Hope that helps!<br>&gt; <br>&gt; -Todd<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 6:12 PM, Gage Morgan &lt;gagemorgan at outlook.com&gt; wrote:<br>&gt; &gt; The Swift-specific parts (i.e. any files not in the llvm.org LLDB source base) are &gt; available according to the license as specified at swift.org. I would direct you to &gt; those licenses to see if they are compatible with your desired usage.<br>&gt; <br>&gt; Let me rephrase that, I think that was a response to asking what Apple says you can or cannot do with REPL. I meant &quot;Has Apple stated possible uses for REPL other than from the CLI-only interface?&quot; <br>&gt; <br>&gt; I&#39;m looking to develop GUIs with it, but am unsure how. <br>&gt; <br>&gt; Thanks,<br>&gt; --MGage--<br>&gt; <br>&gt; Sent from Outlook<br>&gt; <br>&gt; _____________________________<br>&gt; From: Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt;<br>&gt; Sent: Saturday, December 5, 2015 7:33 PM<br>&gt; Subject: [swift-lldb-dev] REPL questions<br>&gt; To: &lt;swift-lldb-dev at swift.org&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Thanks for the questions on the REPL.<br>&gt; <br>&gt; With respect to incorporating a REPL into another program, the text-based Swift REPL is available in and implemented via LLDB.  As Swift LLDB is implemented on top of LLDB, there are two projects involved with regards to the source.  The source code for the core of LLDB (as available via llvm.org) is available according to the terms of the license as spelled out at llvm.org.  The Swift-specific parts (i.e. any files not in the llvm.org LLDB source base) are available according to the license as specified at swift.org.  I would direct you to those licenses to see if they are compatible with your desired usage.<br>&gt; <br>&gt; There are at least a few apps that incorporate LLDB into their IDEs, either via the SB API (the LLDB C++-based API), via the GDB Remote protocol, and via the GDB mi protocol (via lldb-mi).  It is definitely possible to go the route of setting up an app that communicates with LLDB to get a REPL experience that way.<br>&gt; <br>&gt; I&#39;ll be able to comment more directly on questions this upcoming week.<br>&gt; --  <br>&gt; -Todd<br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Todd<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
