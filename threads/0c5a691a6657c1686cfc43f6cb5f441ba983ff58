<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Protocol Arrays Adding vs. Instantiating</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>July 25, 2016 at 01:00:00pm</p></header><div class="content"><p>In swift 3.0 beta 3, I defined a fairly simple protocol and two structs<br>that implement it, if I initialize the array when creating the objects, it<br>works, but if I try to add elements I get an error:<br></p><p>Cannot convert value of type &#39;[H]&#39; to expected argument type &#39;inout _&#39;<br></p><p>Shouldn&#39;t this work?<br></p><p>protocol H {<br></p><p>    var v : Int { get set }<br></p><p>    func hello()<br></p><p>}<br></p><p><br>struct J : H {<br></p><p>    var v : Int<br></p><p>    func hello() {<br></p><p>        print(&quot;j&quot;)<br></p><p>    }<br></p><p>}<br></p><p><br>struct K : H {<br></p><p>    var v : Int<br></p><p>    func hello() {<br></p><p>        print(&quot;k&quot;)<br></p><p>    }<br></p><p>}<br></p><p><br>let ag:[H] =  [K(v:3), J(v:4)]<br></p><p>ag[0].hello()<br></p><p>ag[1].hello() //works<br></p><p><br>var af:[H] =  []<br></p><p>af += [K(v:3)] // does not work<br></p><p>af += [J(v:4)]<br></p><p>af[0].hello()<br></p><p>af[1].hello()<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160725/0c5aff58/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Protocol Arrays Adding vs. Instantiating</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>July 25, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks to matt on stack overflow, you need to assign it to a temporary to<br>ensure the type is correct:<br></p><p>let w : H = K(v:3)<br></p><p>let x : H = J(v:3)<br></p><p>af += [w]<br></p><p>af += [x]<br></p><p>Is this worthy of a bug report? Or is it inherent in the design of the<br>language?<br></p><p>On Mon, Jul 25, 2016 at 1:02 PM, Paul Ossenbruggen &lt;possen at gmail.com&gt; wrote:<br></p><p>&gt; In swift 3.0 beta 3, I defined a fairly simple protocol and two structs<br>&gt; that implement it, if I initialize the array when creating the objects, it<br>&gt; works, but if I try to add elements I get an error:<br>&gt;<br>&gt; Cannot convert value of type &#39;[H]&#39; to expected argument type &#39;inout _&#39;<br>&gt;<br>&gt; Shouldn&#39;t this work?<br>&gt;<br>&gt; protocol H {<br>&gt;<br>&gt;     var v : Int { get set }<br>&gt;<br>&gt;     func hello()<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; struct J : H {<br>&gt;<br>&gt;     var v : Int<br>&gt;<br>&gt;     func hello() {<br>&gt;<br>&gt;         print(&quot;j&quot;)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; struct K : H {<br>&gt;<br>&gt;     var v : Int<br>&gt;<br>&gt;     func hello() {<br>&gt;<br>&gt;         print(&quot;k&quot;)<br>&gt;<br>&gt;     }<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; let ag:[H] =  [K(v:3), J(v:4)]<br>&gt;<br>&gt; ag[0].hello()<br>&gt;<br>&gt; ag[1].hello() //works<br>&gt;<br>&gt;<br>&gt; var af:[H] =  []<br>&gt;<br>&gt; af += [K(v:3)] // does not work<br>&gt;<br>&gt; af += [J(v:4)]<br>&gt;<br>&gt; af[0].hello()<br>&gt;<br>&gt; af[1].hello()<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160725/c15dc56f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/63d70ad2d90f4767adc0e8db980be66a?s=50"></div><header><strong>Protocol Arrays Adding vs. Instantiating</strong> from <string>Team Nera</string> &lt;teamnera at dev.ri1.fr&gt;<p>July 26, 2016 at 02:00:00am</p></header><div class="content"><p>Hi,<br>here are a few other ways that will compile:<br></p><p>af = af + [J(v:3)]<br>af += [J(v:4)] as [H]<br>af += [K(v:5)].map{ $0 as H }<br>af.append(K(v:6))<br></p><p>It does seem that &quot;+=&quot; does not trigger the inference of the type of the <br>array literal the way &quot;+&quot; does. I don&#39;t know if that&#39;s a bug or one of <br>those situations where you need to help the type system, the error seems <br>a little bit too cryptic though.<br></p><p>It is by design that swift does not convert an array of concrete type to <br>an array of protocol (it can take a long time), whereas single values <br>are (like &quot;w&quot; and &quot;x&quot;). As I understand it, it&#39;s only because of the <br>type inference on the array literal that its items are converted in the <br>first two examples.<br></p><p>Nera<br></p><p><br></p><p>Le 25/07/2016 à 23:11, Paul Ossenbruggen via swift-users a écrit :<br>&gt; Thanks to matt on stack overflow, you need to assign it to a temporary <br>&gt; to ensure the type is correct:<br>&gt;<br>&gt; let w : H = K(v:3)<br>&gt;<br>&gt; let x : H = J(v:3)<br>&gt;<br>&gt; af += [w]<br>&gt;<br>&gt; af += [x]<br>&gt;<br>&gt;<br>&gt; Is this worthy of a bug report? Or is it inherent in the design of the <br>&gt; language?<br>&gt;<br>&gt; On Mon, Jul 25, 2016 at 1:02 PM, Paul Ossenbruggen &lt;possen at gmail.com <br>&gt; &lt;mailto:possen at gmail.com&gt;&gt; wrote:<br>&gt;<br>&gt;     In swift 3.0 beta 3, I defined a fairly simple protocol and two<br>&gt;     structs that implement it, if I initialize the array when creating<br>&gt;     the objects, it works, but if I try to add elements I get an error:<br>&gt;<br>&gt;     Cannot convert value of type &#39;[H]&#39; to expected argument type &#39;inout _&#39;<br>&gt;<br>&gt;     Shouldn&#39;t this work?<br>&gt;<br>&gt;     protocol H {<br>&gt;<br>&gt;       var v : Int { get set }<br>&gt;<br>&gt;       func hello()<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     struct J : H {<br>&gt;<br>&gt;       var v : Int<br>&gt;<br>&gt;       func hello() {<br>&gt;<br>&gt;           print(&quot;j&quot;)<br>&gt;<br>&gt;       }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     struct K : H {<br>&gt;<br>&gt;       var v : Int<br>&gt;<br>&gt;       func hello() {<br>&gt;<br>&gt;           print(&quot;k&quot;)<br>&gt;<br>&gt;       }<br>&gt;<br>&gt;     }<br>&gt;<br>&gt;<br>&gt;     let ag:[H] =  [K(v:3), J(v:4)]<br>&gt;<br>&gt;     ag[0].hello()<br>&gt;<br>&gt;     ag[1].hello() //works<br>&gt;<br>&gt;<br>&gt;     var af:[H] =  []<br>&gt;<br>&gt;     af += [K(v:3)] // does not work<br>&gt;<br>&gt;     af += [J(v:4)]<br>&gt;<br>&gt;     af[0].hello()<br>&gt;<br>&gt;     af[1].hello()<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160726/3e41411c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
