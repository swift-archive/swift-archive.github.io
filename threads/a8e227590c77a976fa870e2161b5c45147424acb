<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br></p><p>The review of &quot;SE-0133: Rename flatten() to joined()&quot; ran from Active review July 24…26. The proposal has been *accepted*.<br></p><p>This proposal had significant positive community feedback for aligning common operation names, but raised questions about whether ‘flatten’ was term of art, and what it would mean for related operations like ‘flatMap’.  The core team discussed both sides of this debate, and decided it is best to rename ‘flatten’ to ‘joined’, but keep ‘flatMap’ as it is, to preserve its term of art.  The core team prefers that it remain a distinct overload of joined(separator:) to preserve performance.  It also requests that the returned collection types (FlattenCollection and friends) be left as-is for now, since they are not names commonly directly referenced, and we’d like to keep the change minimal.<br></p><p>Thank you to Jacob Bandes-Storch for driving this discussion forward!  Time is short, we’d appreciate it if someone could implement this ASAP.<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>I&#39;ll get right on it.  Thanks to everyone who provided great feedback<br>during the review!<br></p><p>On Wed, Jul 27, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal Link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;<br>&gt; The review of &quot;SE-0133: Rename flatten() to joined()&quot; ran from Active<br>&gt; review July 24…26. The proposal has been *accepted*.<br>&gt;<br>&gt; This proposal had significant positive community feedback for aligning<br>&gt; common operation names, but raised questions about whether ‘flatten’ was<br>&gt; term of art, and what it would mean for related operations like ‘flatMap’.<br>&gt; The core team discussed both sides of this debate, and decided it is best<br>&gt; to rename ‘flatten’ to ‘joined’, but keep ‘flatMap’ as it is, to preserve<br>&gt; its term of art.  The core team prefers that it remain a distinct overload<br>&gt; of joined(separator:) to preserve performance.  It also requests that the<br>&gt; returned collection types (FlattenCollection and friends) be left as-is for<br>&gt; now, since they are not names commonly directly referenced, and we’d like<br>&gt; to keep the change minimal.<br>&gt;<br>&gt; Thank you to Jacob Bandes-Storch for driving this discussion forward!<br>&gt; Time is short, we’d appreciate it if someone could implement this ASAP.<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/ceec343b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 27, 2016 at 02:00:00pm</p></header><div class="content"><p>Does the core team have feedback on whether Collection&lt;String&gt;&#39;s<br>joined(separator:) should have a default separator of &quot;&quot;, or another<br>overload with no parameter?<br></p><p>On Wed, Jul 27, 2016 at 2:56 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>wrote:<br></p><p>&gt; I&#39;ll get right on it.  Thanks to everyone who provided great feedback<br>&gt; during the review!<br>&gt;<br>&gt; On Wed, Jul 27, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal Link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0133: Rename flatten() to joined()&quot; ran from Active<br>&gt;&gt; review July 24…26. The proposal has been *accepted*.<br>&gt;&gt;<br>&gt;&gt; This proposal had significant positive community feedback for aligning<br>&gt;&gt; common operation names, but raised questions about whether ‘flatten’ was<br>&gt;&gt; term of art, and what it would mean for related operations like ‘flatMap’.<br>&gt;&gt; The core team discussed both sides of this debate, and decided it is best<br>&gt;&gt; to rename ‘flatten’ to ‘joined’, but keep ‘flatMap’ as it is, to preserve<br>&gt;&gt; its term of art.  The core team prefers that it remain a distinct overload<br>&gt;&gt; of joined(separator:) to preserve performance.  It also requests that the<br>&gt;&gt; returned collection types (FlattenCollection and friends) be left as-is for<br>&gt;&gt; now, since they are not names commonly directly referenced, and we’d like<br>&gt;&gt; to keep the change minimal.<br>&gt;&gt;<br>&gt;&gt; Thank you to Jacob Bandes-Storch for driving this discussion forward!<br>&gt;&gt; Time is short, we’d appreciate it if someone could implement this ASAP.<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/d51372cc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 27, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 2:59 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Does the core team have feedback on whether Collection&lt;String&gt;&#39;s joined(separator:) should have a default separator of &quot;&quot;, or another overload with no parameter?<br></p><p>&quot;The core team prefers that it remain a distinct overload of joined(separator:) to preserve performance.”  :-)<br></p><p>Thanks Jacob!<br></p><p>-Chris<br></p><p>&gt; <br>&gt; On Wed, Jul 27, 2016 at 2:56 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; I&#39;ll get right on it.  Thanks to everyone who provided great feedback during the review!<br>&gt; <br>&gt; On Wed, Jul 27, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md&gt;<br>&gt; <br>&gt; The review of &quot;SE-0133: Rename flatten() to joined()&quot; ran from Active review July 24…26. The proposal has been *accepted*.<br>&gt; <br>&gt; This proposal had significant positive community feedback for aligning common operation names, but raised questions about whether ‘flatten’ was term of art, and what it would mean for related operations like ‘flatMap’.  The core team discussed both sides of this debate, and decided it is best to rename ‘flatten’ to ‘joined’, but keep ‘flatMap’ as it is, to preserve its term of art.  The core team prefers that it remain a distinct overload of joined(separator:) to preserve performance.  It also requests that the returned collection types (FlattenCollection and friends) be left as-is for now, since they are not names commonly directly referenced, and we’d like to keep the change minimal.<br>&gt; <br>&gt; Thank you to Jacob Bandes-Storch for driving this discussion forward!  Time is short, we’d appreciate it if someone could implement this ASAP.<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/dc46e75b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 27, 2016 at 04:00:00pm</p></header><div class="content"><p>I figured that sentence was in reference to the methods currently named<br>flatten().<br></p><p>The proposal also said that the String-based version of joined(separator:)<br>(which are implemented separately) should have a default separator of &quot;&quot;.<br>There is currently no flatten() for collections of Strings.<br></p><p>https://github.com/apple/swift/blob/c6e828f761fc30f7ce444431de7da52814f96595/stdlib/public/core/String.swift#L769<br></p><p>I doubt there would be a performance difference between adding `func<br>joined() { return joined(separator: &quot;&quot;) }` and changing the parameter to<br>`separator: String = &quot;&quot;`.<br></p><p>Jacob<br></p><p>On Wed, Jul 27, 2016 at 3:57 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 27, 2016, at 2:59 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Does the core team have feedback on whether Collection&lt;String&gt;&#39;s<br>&gt; joined(separator:) should have a default separator of &quot;&quot;, or another<br>&gt; overload with no parameter?<br>&gt;<br>&gt;<br>&gt; &quot;The core team prefers that it remain a distinct overload of<br>&gt; joined(separator:) to preserve performance.”  :-)<br>&gt;<br>&gt; Thanks Jacob!<br>&gt;<br>&gt; -Chris<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 27, 2016 at 2:56 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; I&#39;ll get right on it.  Thanks to everyone who provided great feedback<br>&gt;&gt; during the review!<br>&gt;&gt;<br>&gt;&gt; On Wed, Jul 27, 2016 at 2:53 PM, Chris Lattner via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Proposal Link:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0133-rename-flatten-to-joined.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of &quot;SE-0133: Rename flatten() to joined()&quot; ran from Active<br>&gt;&gt;&gt; review July 24…26. The proposal has been *accepted*.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This proposal had significant positive community feedback for aligning<br>&gt;&gt;&gt; common operation names, but raised questions about whether ‘flatten’ was<br>&gt;&gt;&gt; term of art, and what it would mean for related operations like ‘flatMap’.<br>&gt;&gt;&gt; The core team discussed both sides of this debate, and decided it is best<br>&gt;&gt;&gt; to rename ‘flatten’ to ‘joined’, but keep ‘flatMap’ as it is, to preserve<br>&gt;&gt;&gt; its term of art.  The core team prefers that it remain a distinct overload<br>&gt;&gt;&gt; of joined(separator:) to preserve performance.  It also requests that the<br>&gt;&gt;&gt; returned collection types (FlattenCollection and friends) be left as-is for<br>&gt;&gt;&gt; now, since they are not names commonly directly referenced, and we’d like<br>&gt;&gt;&gt; to keep the change minimal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you to Jacob Bandes-Storch for driving this discussion forward!<br>&gt;&gt;&gt; Time is short, we’d appreciate it if someone could implement this ASAP.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/ab4fee81/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 27, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jul 27, 2016, at 4:00 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; I figured that sentence was in reference to the methods currently named flatten().<br>&gt; <br>&gt; The proposal also said that the String-based version of joined(separator:) (which are implemented separately) should have a default separator of &quot;&quot;. There is currently no flatten() for collections of Strings.<br>&gt; <br>&gt; https://github.com/apple/swift/blob/c6e828f761fc30f7ce444431de7da52814f96595/stdlib/public/core/String.swift#L769 &lt;https://github.com/apple/swift/blob/c6e828f761fc30f7ce444431de7da52814f96595/stdlib/public/core/String.swift#L769&gt;<br>&gt; <br>&gt; I doubt there would be a performance difference between adding `func joined() { return joined(separator: &quot;&quot;) }` and changing the parameter to `separator: String = &quot;”`.<br></p><p>I’ll let a stdlib guru comment on this :-)<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160727/95c6c0d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/19ca8ea29768acdbb87dc016d7d9a8e4?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Paulo Faria</string> &lt;paulo at zewo.io&gt;<p>July 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt;&gt; I doubt there would be a performance difference between adding `func joined() { return joined(separator: &quot;&quot;) }` and changing the parameter to `separator: String = &quot;”`.<br>&gt; <br>&gt; I’ll let a stdlib guru comment on this :-)<br></p><p>I’m very curious about this. Default parameters are really slower?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 28, 2016, at 6:38 AM, Paulo Faria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; I doubt there would be a performance difference between adding `func joined() { return joined(separator: &quot;&quot;) }` and changing the parameter to `separator: String = &quot;”`.<br>&gt;&gt; <br>&gt;&gt; I’ll let a stdlib guru comment on this :-)<br>&gt; <br>&gt; I’m very curious about this. Default parameters are really slower?<br></p><p>The version that takes an arbitrary separator as a parameter (defaulted or not) does twice as many appends unless it specifically recognizes the empty separator as a special case.<br></p><p>That said, I&#39;m not sure it shouldn&#39;t try to recognize the empty separator as a special case.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>[Accepted] SE-0133: Rename flatten() to joined()</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>July 29, 2016 at 03:00:00pm</p></header><div class="content"><p>This makes perfect sense why it would perform worse, and I agree this seems like a legitimate place for a special case.<br></p><p>&gt; On 29 Jul 2016, at 3:01 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 6:38 AM, Paulo Faria via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I doubt there would be a performance difference between adding `func joined() { return joined(separator: &quot;&quot;) }` and changing the parameter to `separator: String = &quot;”`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ll let a stdlib guru comment on this :-)<br>&gt;&gt; <br>&gt;&gt; I’m very curious about this. Default parameters are really slower?<br>&gt; <br>&gt; The version that takes an arbitrary separator as a parameter (defaulted or not) does twice as many appends unless it specifically recognizes the empty separator as a special case.<br>&gt; <br>&gt; That said, I&#39;m not sure it shouldn&#39;t try to recognize the empty separator as a special case.<br>&gt; <br>&gt; John.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
