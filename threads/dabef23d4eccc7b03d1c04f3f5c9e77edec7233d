<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Idea: Let Generic Parameters Have Labels &amp; Default Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 23, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sat Jan 23 2016, David Sweeris &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The title seems fairly self-explanatory. Does anyone else think this could be useful?<br>&gt; struct True : BooleanType {…} // Just part of the example… not in the proposal (although I do like it)<br>&gt; struct False : BooleanType {…}  // Same<br>&gt; // This is where the actual idea starts<br>&gt; struct BigInt &lt;BaseType: T = Int, CanEqualZero: U = Yes where T: IntegerArithmeticType, U: BooleanType&gt; {…}<br>&gt;<br>&gt; The first parameter label could be skipped (or not), depending on<br>&gt; whatever the rules for functions parameter labels ends up being<br>&gt; (either way, they should be the same IMHO). Then variables could be<br>&gt; declared like this:<br>&gt; let foo =   BigInt()	    // BigInt&lt;Int, No&gt;()<br>&gt; let bar =   BigInt&lt;Int32&gt;() // For when your data will be processed on a 32-bit platform or something<br>&gt; let divisor = BigInt&lt;CanEqualZero: False&gt;()<br>&gt;<br>&gt; (The obvious follow-up suggestion is to then allow a generic type’s<br>&gt; definition to change based on the results of logical operations<br>&gt; performed purely on the types that are passed in, but I think that’s<br>&gt; getting into “macro system” territory, and should probably be its own<br>&gt; thing.)<br>&gt;<br>&gt; Anyway, thoughts?<br>&gt;<br></p><p>+1<br>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Idea: Let Generic Parameters Have Labels &amp; Default Values</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 24, 2016 at 02:00:00pm</p></header><div class="content"><p>I like the idea.<br></p><p>I think I&#39;d be using typealias a lot to make things more concise, but<br>that&#39;s not necessarily a problem.<br></p><p>How would I name the following parameter?<br></p><p>    struct OrderedCollection&lt;T: Comparable&gt; {<br>    }<br></p><p>As I understand it, would I do it as follows?<br></p><p>    struct OrderedCollection&lt;Element: T: Comparable&gt; {<br>    }<br></p><p>Or would all type constraints now require `where`, like this:<br>    struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>    }<br></p><p>Also, a typealias seems somewhat redundant when the parameter is labelled:<br></p><p>    struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>        typealias Element = T<br>    }<br></p><p>I wonder if the typealias could be implied.<br></p><p><br>On Sun, Jan 24, 2016 at 9:52 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sat Jan 23 2016, David Sweeris &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; The title seems fairly self-explanatory. Does anyone else think this<br>&gt; could be useful?<br>&gt; &gt; struct True : BooleanType {…} // Just part of the example… not in the<br>&gt; proposal (although I do like it)<br>&gt; &gt; struct False : BooleanType {…}  // Same<br>&gt; &gt; // This is where the actual idea starts<br>&gt; &gt; struct BigInt &lt;BaseType: T = Int, CanEqualZero: U = Yes where T:<br>&gt; IntegerArithmeticType, U: BooleanType&gt; {…}<br>&gt; &gt;<br>&gt; &gt; The first parameter label could be skipped (or not), depending on<br>&gt; &gt; whatever the rules for functions parameter labels ends up being<br>&gt; &gt; (either way, they should be the same IMHO). Then variables could be<br>&gt; &gt; declared like this:<br>&gt; &gt; let foo =   BigInt()      // BigInt&lt;Int, No&gt;()<br>&gt; &gt; let bar =   BigInt&lt;Int32&gt;() // For when your data will be processed on a<br>&gt; 32-bit platform or something<br>&gt; &gt; let divisor = BigInt&lt;CanEqualZero: False&gt;()<br>&gt; &gt;<br>&gt; &gt; (The obvious follow-up suggestion is to then allow a generic type’s<br>&gt; &gt; definition to change based on the results of logical operations<br>&gt; &gt; performed purely on the types that are passed in, but I think that’s<br>&gt; &gt; getting into “macro system” territory, and should probably be its own<br>&gt; &gt; thing.)<br>&gt; &gt;<br>&gt; &gt; Anyway, thoughts?<br>&gt; &gt;<br>&gt;<br>&gt; +1<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/8e911bb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Idea: Let Generic Parameters Have Labels &amp; Default Values</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 24, 2016 at 07:00:00am</p></header><div class="content"><p>I think it’d more readable to move type constraints to the where clause, but I don’t know if it needs to be a requirement.<br></p><p>I really like your implicit typealias idea…<br>struct Foo&lt;Element: T, _: U where T: Comparable&gt; {<br>    // implicit typealias Element = T<br>    typealias Bar = U // not implicit because U didn’t have a label<br>}<br></p><p>On Jan 23, 2016, at 19:18, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>&gt; I like the idea.<br>&gt; <br>&gt; I think I&#39;d be using typealias a lot to make things more concise, but that&#39;s not necessarily a problem. <br>&gt; <br>&gt; How would I name the following parameter?<br>&gt; <br>&gt;     struct OrderedCollection&lt;T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; As I understand it, would I do it as follows?<br>&gt; <br>&gt;     struct OrderedCollection&lt;Element: T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; Or would all type constraints now require `where`, like this:<br>&gt;     struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; Also, a typealias seems somewhat redundant when the parameter is labelled:<br>&gt; <br>&gt;     struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>&gt;         typealias Element = T<br>&gt;     }<br>&gt; <br>&gt; I wonder if the typealias could be implied.<br>&gt; <br>&gt; <br>&gt; On Sun, Jan 24, 2016 at 9:52 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; on Sat Jan 23 2016, David Sweeris &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; The title seems fairly self-explanatory. Does anyone else think this could be useful?<br>&gt; &gt; struct True : BooleanType {…} // Just part of the example… not in the proposal (although I do like it)<br>&gt; &gt; struct False : BooleanType {…}  // Same<br>&gt; &gt; // This is where the actual idea starts<br>&gt; &gt; struct BigInt &lt;BaseType: T = Int, CanEqualZero: U = Yes where T: IntegerArithmeticType, U: BooleanType&gt; {…}<br>&gt; &gt;<br>&gt; &gt; The first parameter label could be skipped (or not), depending on<br>&gt; &gt; whatever the rules for functions parameter labels ends up being<br>&gt; &gt; (either way, they should be the same IMHO). Then variables could be<br>&gt; &gt; declared like this:<br>&gt; &gt; let foo =   BigInt()      // BigInt&lt;Int, No&gt;()<br>&gt; &gt; let bar =   BigInt&lt;Int32&gt;() // For when your data will be processed on a 32-bit platform or something<br>&gt; &gt; let divisor = BigInt&lt;CanEqualZero: False&gt;()<br>&gt; &gt;<br>&gt; &gt; (The obvious follow-up suggestion is to then allow a generic type’s<br>&gt; &gt; definition to change based on the results of logical operations<br>&gt; &gt; performed purely on the types that are passed in, but I think that’s<br>&gt; &gt; getting into “macro system” territory, and should probably be its own<br>&gt; &gt; thing.)<br>&gt; &gt;<br>&gt; &gt; Anyway, thoughts?<br>&gt; &gt;<br>&gt; <br>&gt; +1<br>&gt; --<br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160124/674687a2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Idea: Let Generic Parameters Have Labels &amp; Default Values</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 25, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 19:18, Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I like the idea.<br>&gt; <br>&gt; I think I&#39;d be using typealias a lot to make things more concise, but that&#39;s not necessarily a problem. <br>&gt; <br>&gt; How would I name the following parameter?<br>&gt; <br>&gt;     struct OrderedCollection&lt;T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; As I understand it, would I do it as follows?<br>&gt; <br>&gt;     struct OrderedCollection&lt;Element: T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; Or would all type constraints now require `where`, like this:<br>&gt;     struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>&gt;     }<br>&gt; <br>&gt; Also, a typealias seems somewhat redundant when the parameter is labelled:<br>&gt; <br>&gt;     struct OrderedCollection&lt;Element: T where T: Comparable&gt; {<br>&gt;         typealias Element = T<br>&gt;     }<br>&gt; <br>&gt; I wonder if the typealias could be implied.<br></p><p>Without commenting on anything else, IIRC we were already planning to make the local typealias implied, even for today&#39;s generic parameters.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160125/feb273d4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
