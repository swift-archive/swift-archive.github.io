<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Evolving UnsafeMutablePointer.alloc (was Re: [Review] SE-0006 Apply API Guidelines to the Standard Library)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 24, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sat Jan 23 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 22, 2016, at 11:31 PM, Guillaume Lessard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I disagree with the following change to UnsafeMutablePointer:<br>&gt;<br>&gt;&gt; -  public static func alloc(num: Int) -&gt; UnsafeMutablePointer&lt;Pointee&gt;<br>&gt;&gt; +  public init(allocatingCapacity count: Int)<br>&gt;&gt; <br>&gt;&gt; This would make it the only constructor in any of OpaquePointer,<br>&gt;&gt; UnsafePointer, UnsafeMutablePointer and UnsafeReference to have the<br>&gt;&gt; side-effect of allocating memory. All the others are relatively<br>&gt;&gt; cheap transformations on pointer values, and get used a lot for<br>&gt;&gt; typecasting. An allocating constructor would be less locatable among<br>&gt;&gt; such uses of typecasting-via-constructor. The memory-allocating<br>&gt;&gt; static method has the merit of sticking out, and pairs nicely with<br>&gt;&gt; the necessary deallocation call, like the malloc/free pair.<br>&gt;<br>&gt; This all probably deserves a separate discussion from the overall<br>&gt; umbrella proposal. Another thing to consider here is whether the logic<br>&gt; to allocate an array of values really belongs on<br>&gt; UnsafeMutablePointer—it seems like a better fit for<br>&gt; UnsafeMutableBufferPointer, whose whole job is to reference an array<br>&gt; of objects in memory. <br>&gt;<br>&gt; Currently, you need to allocate the memory using<br>&gt; UnsafeMutablePointer.alloc, then immediately wrap it in a<br>&gt; BufferPointer with the same count, which is a bit awkward.<br></p><p>You make a good point, Joe.  Why would we throw out the size<br>information immediately after allocating the memory?<br></p><p>*On the other hand*, UnsafeMutableBufferPointer is really not designed<br>to support allocated-but-initialized memory, and I think I&#39;d prefer to<br>keep it that way.  I don&#39;t think once you step into unsafe-land, you<br>should have to live more dangerously than the individual situation<br>requires, and modifying part of an array without ARC overhead is an<br>important use-case.<br></p><p>For buffers with some uninitialized elements we have ManagedBuffer et<br>al., but of course that doesn&#39;t cover the use-case of manual memory<br>deallocation.  So maybe a different component altogether—or some kind of<br>more-general unification of these components—is what we need in the long<br>run.  Definitely more appropriate to pursue this in another thread.<br></p><p>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>Evolving UnsafeMutablePointer.alloc (was Re: [Review] SE-0006 Apply API Guidelines to the Standard Library)</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  1, 2016 at 01:00:00am</p></header><div class="content"><p>Speaking of memory allocation, another improvement I would like is to allow allocation of **at least** `capacity` elements where the actual capacity of the buffer is part of the return value(s).<br></p><p>Given that dynamic allocators generally work with a fixed set of block sizes (buckets, pages, ...) it seems to make sense to expose this. ManagedBuffer already works this way.<br></p><p>For example you can use `malloc_good_size()` on Darwin to implement this. With the current static function on `UnsafeMutablePointer` you can simply return a tuple with the Pointer and actual capacity but an initializer directly precludes this. OTOH `UnsafeMutableBufferPointer` could support this even more elegantly and a hypothetical future component could probably also easily support this.<br></p><p><br>- Janosch<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
