<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  9, 2016 at 03:00:00pm</p></header><div class="content"><p>The review of SE-0011 &quot;Replace `typealias` keyword with `associatedtype` for associated type declarations&quot; ran from January 3-6, 2016. The proposal has been accepted. We will introduce the “associatedtype” syntax in Swift 2.2 (deprecating “typealias”) and remove the “typealias” syntax in Swift 3.<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md&gt;<br></p><p>Thank you to everyone who participated in the review process! We welcome an implementation of this proposal, which is tracked by<br></p><p>	https://bugs.swift.org/browse/SR-511 &lt;https://bugs.swift.org/browse/SR-511&gt;<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160109/0537b39d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  9, 2016 at 03:00:00pm</p></header><div class="content"><p>In the previous thread on this topic, there was a lot of bikeshedding<br>about the specific keyword. A bunch of people (myself included)<br>suggested just &quot;associated&quot; instead, some people suggested a few<br>alternatives (like &quot;type&quot; or &quot;associated type&quot;). I don&#39;t recall if<br>anyone actually explicitly said they prefer the given name<br>&quot;associatedtype&quot;, though there were of course people who voted +1<br>without opining on the subject at all.<br></p><p>In any case, my point is, given that this proposal is now accepted, are<br>we committed to the keyword &quot;associatedtype&quot; or is there still room to<br>pick a different keyword? Enough people in the thread were in favor of<br>using a different keyword that it seems worth considering.<br></p><p>-Kevin Ballard<br></p><p>On Sat, Jan 9, 2016, at 03:18 PM, Douglas Gregor wrote:<br>&gt; The review of SE-0011 &quot;Replace `typealias` keyword with<br>&gt; `associatedtype` for associated type declarations&quot; ran from January<br>&gt; 3-6, 2016. The proposal has been *accepted*. We will introduce the<br>&gt; “associatedtype” syntax in Swift 2.2 (deprecating “typealias”) and<br>&gt; remove the “typealias” syntax in Swift 3.<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md<br>&gt;<br>&gt; Thank you to everyone who participated in the review process! We<br>&gt; welcome an implementation of this proposal, which is tracked by<br>&gt;<br>&gt; https://bugs.swift.org/browse/SR-511<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution-announce mailing list swift-evolution-<br>&gt; announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/49812adb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 9, 2016, at 3:24 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In the previous thread on this topic, there was a lot of bikeshedding about the specific keyword. A bunch of people (myself included) suggested just &quot;associated&quot; instead, some people suggested a few alternatives (like &quot;type&quot; or &quot;associated type&quot;). I don&#39;t recall if anyone actually explicitly said they prefer the given name &quot;associatedtype&quot;, though there were of course people who voted +1 without opining on the subject at all.<br>&gt;  <br>&gt; In any case, my point is, given that this proposal is now accepted, are we committed to the keyword &quot;associatedtype&quot; or is there still room to pick a different keyword? Enough people in the thread were in favor of using a different keyword that it seems worth considering.<br></p><p>Yes, associatedtype is what we’re planning to go with.  We discussed the keyword used carefully, and there was a lot of discussion/bikeshedding about the keyword on the mailing lists.<br></p><p>Here are a few things I remember from the discussion and the core team perspective, but this is definitely not exhaustive of all the discuss.<br></p><p>“type&quot;: Overly general, implies a declaration kind that could be used in other places in the language.  Associated types are a very specific kind of type, not a general type.<br></p><p>“associated”: Ok on the face of it, but problematic because declarations should be nouns and it isn’t “googlable”.<br></p><p>“associatedtype”:  “googlable”.  verbose, but specific.  Reasonably advanced feature that occurs infrequently, so verbosity is a good thing.<br></p><p><br>The major argument against associatedtype was that *all* protocol requirements are associated, and we don’t require associatedvar etc.  On the balance with other tradeoffs, we felt that this is the right way to go.<br></p><p><br>On it being a conjoined word, we agreed that the language is currently inconsistent (we have typealias, fallthrough, but also didSet/willSet and @warn_unused_result) and that we should clean it up.  Conjoined feels like the right direction to go for this case.  We didn’t discuss it but IMO, didSet should get lowercased as well.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 9, 2016, at 5:16 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 9, 2016, at 3:24 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In the previous thread on this topic, there was a lot of bikeshedding about the specific keyword. A bunch of people (myself included) suggested just &quot;associated&quot; instead, some people suggested a few alternatives (like &quot;type&quot; or &quot;associated type&quot;). I don&#39;t recall if anyone actually explicitly said they prefer the given name &quot;associatedtype&quot;, though there were of course people who voted +1 without opining on the subject at all.<br>&gt;&gt; <br>&gt;&gt; In any case, my point is, given that this proposal is now accepted, are we committed to the keyword &quot;associatedtype&quot; or is there still room to pick a different keyword? Enough people in the thread were in favor of using a different keyword that it seems worth considering.<br>&gt; <br>&gt; Yes, associatedtype is what we’re planning to go with.  We discussed the keyword used carefully, and there was a lot of discussion/bikeshedding about the keyword on the mailing lists.<br>&gt; <br>&gt; Here are a few things I remember from the discussion and the core team perspective, but this is definitely not exhaustive of all the discuss.<br>&gt; <br>&gt; “type&quot;: Overly general, implies a declaration kind that could be used in other places in the language.  Associated types are a very specific kind of type, not a general type.<br>&gt; <br>&gt; “associated”: Ok on the face of it, but problematic because declarations should be nouns and it isn’t “googlable”.<br></p><p>The meta-problem with associated is this:<br></p><p>protocol Foo {<br>  associated Bar<br>}<br></p><p>because it is so general and not googlable (and also an advanced feature that all swift users aren’t expected to memorize) it is difficult to find out what is going on here. <br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>That&#39;s a fair answer.<br></p><p>Based on this experience, in the future when a proposal is accepted, if there was any serious bikeshedding about the names used in the proposal (in particular, bikeshedding in the actual review thread), it might be a good idea to acknowledge this in the acceptance email and explain both what the final decision is about the name in question as well as a brief explanation as to why.<br></p><p>-Kevin Ballard<br></p><p>On Sat, Jan 9, 2016, at 05:16 PM, Chris Lattner wrote:<br>&gt; <br>&gt; &gt; On Jan 9, 2016, at 3:24 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; In the previous thread on this topic, there was a lot of bikeshedding about the specific keyword. A bunch of people (myself included) suggested just &quot;associated&quot; instead, some people suggested a few alternatives (like &quot;type&quot; or &quot;associated type&quot;). I don&#39;t recall if anyone actually explicitly said they prefer the given name &quot;associatedtype&quot;, though there were of course people who voted +1 without opining on the subject at all.<br>&gt; &gt;  <br>&gt; &gt; In any case, my point is, given that this proposal is now accepted, are we committed to the keyword &quot;associatedtype&quot; or is there still room to pick a different keyword? Enough people in the thread were in favor of using a different keyword that it seems worth considering.<br>&gt; <br>&gt; Yes, associatedtype is what we’re planning to go with.  We discussed the keyword used carefully, and there was a lot of discussion/bikeshedding about the keyword on the mailing lists.<br>&gt; <br>&gt; Here are a few things I remember from the discussion and the core team perspective, but this is definitely not exhaustive of all the discuss.<br>&gt; <br>&gt; “type&quot;: Overly general, implies a declaration kind that could be used in other places in the language.  Associated types are a very specific kind of type, not a general type.<br>&gt; <br>&gt; “associated”: Ok on the face of it, but problematic because declarations should be nouns and it isn’t “googlable”.<br>&gt; <br>&gt; “associatedtype”:  “googlable”.  verbose, but specific.  Reasonably advanced feature that occurs infrequently, so verbosity is a good thing.<br>&gt; <br>&gt; <br>&gt; The major argument against associatedtype was that *all* protocol requirements are associated, and we don’t require associatedvar etc.  On the balance with other tradeoffs, we felt that this is the right way to go.<br>&gt; <br>&gt; <br>&gt; On it being a conjoined word, we agreed that the language is currently inconsistent (we have typealias, fallthrough, but also didSet/willSet and @warn_unused_result) and that we should clean it up.  Conjoined feels like the right direction to go for this case.  We didn’t discuss it but IMO, didSet should get lowercased as well.<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution-announce] [Accepted] SE-0011 Replace `typealias` keyword with `associatedtype` for associated type declarations</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Jan 9, 2016, at 5:33 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That&#39;s a fair answer.<br>&gt; <br>&gt; Based on this experience, in the future when a proposal is accepted, if there was any serious bikeshedding about the names used in the proposal (in particular, bikeshedding in the actual review thread), it might be a good idea to acknowledge this in the acceptance email and explain both what the final decision is about the name in question as well as a brief explanation as to why.<br></p><p>Yes, I should have reported on our rationale. <br></p><p>  - Doug<br></p><p>&gt; -Kevin Ballard<br>&gt; <br>&gt;&gt; On Sat, Jan 9, 2016, at 05:16 PM, Chris Lattner wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 9, 2016, at 3:24 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the previous thread on this topic, there was a lot of bikeshedding about the specific keyword. A bunch of people (myself included) suggested just &quot;associated&quot; instead, some people suggested a few alternatives (like &quot;type&quot; or &quot;associated type&quot;). I don&#39;t recall if anyone actually explicitly said they prefer the given name &quot;associatedtype&quot;, though there were of course people who voted +1 without opining on the subject at all.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In any case, my point is, given that this proposal is now accepted, are we committed to the keyword &quot;associatedtype&quot; or is there still room to pick a different keyword? Enough people in the thread were in favor of using a different keyword that it seems worth considering.<br>&gt;&gt; <br>&gt;&gt; Yes, associatedtype is what we’re planning to go with.  We discussed the keyword used carefully, and there was a lot of discussion/bikeshedding about the keyword on the mailing lists.<br>&gt;&gt; <br>&gt;&gt; Here are a few things I remember from the discussion and the core team perspective, but this is definitely not exhaustive of all the discuss.<br>&gt;&gt; <br>&gt;&gt; “type&quot;: Overly general, implies a declaration kind that could be used in other places in the language.  Associated types are a very specific kind of type, not a general type.<br>&gt;&gt; <br>&gt;&gt; “associated”: Ok on the face of it, but problematic because declarations should be nouns and it isn’t “googlable”.<br>&gt;&gt; <br>&gt;&gt; “associatedtype”:  “googlable”.  verbose, but specific.  Reasonably advanced feature that occurs infrequently, so verbosity is a good thing.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; The major argument against associatedtype was that *all* protocol requirements are associated, and we don’t require associatedvar etc.  On the balance with other tradeoffs, we felt that this is the right way to go.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On it being a conjoined word, we agreed that the language is currently inconsistent (we have typealias, fallthrough, but also didSet/willSet and @warn_unused_result) and that we should clean it up.  Conjoined feels like the right direction to go for this case.  We didn’t discuss it but IMO, didSet should get lowercased as well.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
