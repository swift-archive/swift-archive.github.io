<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>May  8, 2016 at 10:00:00pm</p></header><div class="content"><p>Hi everyone!<br></p><p>I’m working on the following method:<br></p><p>extension SequenceType {<br></p><p>    /// Check if `predicate` is true for all elements of `self`<br>    ///<br>    /// - Parameter predicate: The predicate called on each element of `self`<br>    ///<br>    /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br></p><p>    @warn_unused_result<br>    func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>        for element in self where try !predicate(element) {<br>            return false<br>        }<br></p><p>        return true<br>    }<br>}<br></p><p>However, when the sequence is empty the method returns true, which is not the desired behaviour.<br></p><p>let a = [Int]()<br>let b = a.all(where: { $0 &gt; 7 })<br>XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br></p><p>Does anyone know how to guard against an empty sequence?<br></p><p>I’m using Xcode 7.3.1 and Swift 2.2.<br></p><p>Best,<br></p><p>— A<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160508/2fb6790d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May  8, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;d argue that this behavior is correct. By extension of De Morgan&#39;s laws<br>&lt;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&gt;, &quot;seq.all { pred($0) }&quot;<br>should be equivalent to &quot;!seq.contains { !pred($0) }&quot;.<br></p><p>Jacob<br></p><p>On Sun, May 8, 2016 at 7:16 PM, Adriano Ferreira via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone!<br>&gt;<br>&gt; I’m working on the following method:<br>&gt;<br>&gt; extension SequenceType {<br>&gt;<br>&gt;     /// Check if `predicate` is true for all elements of `self`<br>&gt;     ///<br>&gt;     /// - Parameter predicate: The predicate called on each element of<br>&gt; `self`<br>&gt;     ///<br>&gt;     /// - Returns: True iff every element in `self` satisfies<br>&gt; `predicate`, false otherwise<br>&gt;<br>&gt;     @warn_unused_result<br>&gt;     func all(@noescape where predicate: Generator.Element throws -&gt; Bool)<br>&gt; rethrows -&gt; Bool {<br>&gt;         for element in self where try !predicate(element) {<br>&gt;             return false<br>&gt;         }<br>&gt;<br>&gt;         return true<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; However, when the sequence is empty the method returns true, which is not<br>&gt; the desired behaviour.<br>&gt;<br>&gt; let a = [Int]()<br>&gt; let b = a.all(where: { $0 &gt; 7 })<br>&gt; XCTAssertFalse(b)   // This fails, cause there’s no guard against an<br>&gt; empty sequence<br>&gt;<br>&gt; Does anyone know how to guard against an empty sequence?<br>&gt;<br>&gt; I’m using Xcode 7.3.1 and Swift 2.2.<br>&gt;<br>&gt; Best,<br>&gt;<br>&gt; — A<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160508/9fc89d3c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cb1ca7c823f65ddac613a22234a1c81?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Shane S</string> &lt;electro_alchemy at hotmail.com&gt;<p>May  9, 2016 at 03:00:00am</p></header><div class="content"><p>I imagine `#underestimateCount()` is going to be your best bet, though you may not always see the results you desire<br></p><p>some notes:<br></p><p>1. most would argue that the results you are describing are correct: it is vacuously true that for an empty sequence _every_ element in the sequence will satisfy any predicate you give it<br></p><p>2. do you have the option to constrain this to CollectionType instead?<br></p><p>3. one option would be for you to grab the generator and iteratively send it `next()` on your own - that way you could check if it returns `nil` the first time that you call it (i.e. the sequence is empty) and return whatever you desire in that case<br></p><p>— Shane S<br></p><p><br>On May 8, 2016, at 7:16 PM, Adriano Ferreira via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Hi everyone!<br></p><p>I’m working on the following method:<br></p><p>extension SequenceType {<br></p><p>    /// Check if `predicate` is true for all elements of `self`<br>    ///<br>    /// - Parameter predicate: The predicate called on each element of `self`<br>    ///<br>    /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br></p><p>    @warn_unused_result<br>    func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>        for element in self where try !predicate(element) {<br>            return false<br>        }<br></p><p>        return true<br>    }<br>}<br></p><p>However, when the sequence is empty the method returns true, which is not the desired behaviour.<br></p><p>let a = [Int]()<br>let b = a.all(where: { $0 &gt; 7 })<br>XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br></p><p>Does anyone know how to guard against an empty sequence?<br></p><p>I’m using Xcode 7.3.1 and Swift 2.2.<br></p><p>Best,<br></p><p>— A<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160509/262ef939/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>May  9, 2016 at 09:00:00am</p></header><div class="content"><p>Hi all, thanks for the replies.<br></p><p>So, I thought about “underestimatedCount” but was not sure how to use it properly.<br></p><p>I chose to put this method on SequenceType rather than CollectionType because I’d like it to be less restrictive since there was no need to subscripting.<br></p><p>Also, about using “next”, Austin mentioned something interesting:<br></p><p>“… a sequence might actually be a sequence of n random numbers coming out of a PRNG; checking for &#39;emptiness&#39; by calling &#39;next&#39; would consume a random number that you couldn&#39;t ever get back, even if you called &#39;next&#39; again using a different generator.”<br></p><p>So far, I have a mixed feeling about using a boolean to track whether or not the loop has even been executed.<br></p><p>I wonder why there’s no simple way (or I’m overlooking it) to check if a sequence is empty.<br></p><p>Any other suggestions?<br></p><p>Cheers,<br></p><p>— A<br></p><p>&gt; On May 8, 2016, at 11:42 PM, Shane S &lt;electro_alchemy at hotmail.com&gt; wrote:<br>&gt; <br>&gt; I imagine `#underestimateCount()` is going to be your best bet, though you may not always see the results you desire<br>&gt; <br>&gt; some notes:<br>&gt; <br>&gt; 1. most would argue that the results you are describing are correct: it is vacuously true that for an empty sequence _every_ element in the sequence will satisfy any predicate you give it<br>&gt; <br>&gt; 2. do you have the option to constrain this to CollectionType instead?<br>&gt; <br>&gt; 3. one option would be for you to grab the generator and iteratively send it `next()` on your own - that way you could check if it returns `nil` the first time that you call it (i.e. the sequence is empty) and return whatever you desire in that case<br>&gt; <br>&gt; — Shane S<br>&gt; <br>&gt; <br>&gt;&gt; On May 8, 2016, at 7:16 PM, Adriano Ferreira via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone!<br>&gt;&gt; <br>&gt;&gt; I’m working on the following method:<br>&gt;&gt; <br>&gt;&gt; extension SequenceType {<br>&gt;&gt; <br>&gt;&gt;     /// Check if `predicate` is true for all elements of `self`<br>&gt;&gt;     ///<br>&gt;&gt;     /// - Parameter predicate: The predicate called on each element of `self`<br>&gt;&gt;     ///<br>&gt;&gt;     /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br>&gt;&gt; <br>&gt;&gt;     @warn_unused_result<br>&gt;&gt;     func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>&gt;&gt;         for element in self where try !predicate(element) {<br>&gt;&gt;             return false<br>&gt;&gt;         }<br>&gt;&gt; <br>&gt;&gt;         return true<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; However, when the sequence is empty the method returns true, which is not the desired behaviour.<br>&gt;&gt; <br>&gt;&gt; let a = [Int]()<br>&gt;&gt; let b = a.all(where: { $0 &gt; 7 })<br>&gt;&gt; XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br>&gt;&gt; <br>&gt;&gt; Does anyone know how to guard against an empty sequence?<br>&gt;&gt; <br>&gt;&gt; I’m using Xcode 7.3.1 and Swift 2.2.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; <br>&gt;&gt; — A<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160509/66ce1a28/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3cb1ca7c823f65ddac613a22234a1c81?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Shane S</string> &lt;electro_alchemy at hotmail.com&gt;<p>May  9, 2016 at 03:00:00pm</p></header><div class="content"><p>On May 9, 2016, at 6:18 AM, Adriano Ferreira &lt;adriano.ferreira at me.com&lt;mailto:adriano.ferreira at me.com&gt;&gt; wrote:<br></p><p>So, I thought about “underestimatedCount” but was not sure how to use it properly.<br></p><p>`guard self.underestimateCount &gt; 0 else {return false}`<br></p><p>Also, about using “next”, Austin mentioned something interesting:<br></p><p>“… a sequence might actually be a sequence of n random numbers coming out of a PRNG; checking for &#39;emptiness&#39; by calling &#39;next&#39; would consume a random number that you couldn&#39;t ever get back, even if you called &#39;next&#39; again using a different generator.”<br></p><p>the `for … each` enumeration in the body of your function also consumes the elements of your sequence  :)  so I assumed that was an acceptable consequence of applying this function<br></p><p>if you’re thinking specifically about checking the first value returned by `next()` for nil and then no longer having it available to test against your predicate, then I was thinking roughly along the lines of something like:<br></p><p>```<br>var generator = self.generate()<br>var isPredicateSatisfiedForAllElements = false<br></p><p>while let element = generator.next() {<br>  isPredicateSatisfiedForAllElements = try predicate(element)<br>  if !isPredicateSatisfiedForAllElements {break}<br>}<br></p><p>return isPredicateSatisfiedForAllElements<br>```<br></p><p>— Shane S<br></p><p><br></p><p><br>On May 8, 2016, at 11:42 PM, Shane S &lt;electro_alchemy at hotmail.com&lt;mailto:electro_alchemy at hotmail.com&gt;&gt; wrote:<br></p><p>I imagine `#underestimateCount()` is going to be your best bet, though you may not always see the results you desire<br></p><p>some notes:<br></p><p>1. most would argue that the results you are describing are correct: it is vacuously true that for an empty sequence _every_ element in the sequence will satisfy any predicate you give it<br></p><p>2. do you have the option to constrain this to CollectionType instead?<br></p><p>3. one option would be for you to grab the generator and iteratively send it `next()` on your own - that way you could check if it returns `nil` the first time that you call it (i.e. the sequence is empty) and return whatever you desire in that case<br></p><p>— Shane S<br></p><p><br>On May 8, 2016, at 7:16 PM, Adriano Ferreira via swift-users &lt;swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br></p><p>Hi everyone!<br></p><p>I’m working on the following method:<br></p><p>extension SequenceType {<br></p><p>    /// Check if `predicate` is true for all elements of `self`<br>    ///<br>    /// - Parameter predicate: The predicate called on each element of `self`<br>    ///<br>    /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br></p><p>    @warn_unused_result<br>    func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>        for element in self where try !predicate(element) {<br>            return false<br>        }<br></p><p>        return true<br>    }<br>}<br></p><p>However, when the sequence is empty the method returns true, which is not the desired behaviour.<br></p><p>let a = [Int]()<br>let b = a.all(where: { $0 &gt; 7 })<br>XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br></p><p>Does anyone know how to guard against an empty sequence?<br></p><p>I’m using Xcode 7.3.1 and Swift 2.2.<br></p><p>Best,<br></p><p>— A<br>_______________________________________________<br>swift-users mailing list<br>swift-users at swift.org&lt;mailto:swift-users at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-users<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160509/2e5b6b79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May  9, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, May 9, 2016 at 8:21 AM, Shane S via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; On May 9, 2016, at 6:18 AM, Adriano Ferreira &lt;adriano.ferreira at me.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; So, I thought about “underestimatedCount” but was not sure how to use it<br>&gt; properly.<br>&gt;<br>&gt;<br>&gt; `guard self.underestimateCount &gt; 0 else {return false}`<br></p><p>`underestimateCount` is what it says, an underestimate.  A non-empty<br>sequence can return 0.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  9, 2016 at 11:00:00am</p></header><div class="content"><p>I know this is completely not answering your question, but why wouldn&#39;t an empty sequence return true? There is no element in an empty sequence that does not satisfy the predicate.<br></p><p>As for guarding against an empty sequence, you can create a buffered sequence type with 1-lookahead. Off the top of my head, n o guarantees for correctness:<br></p><p>public struct BufferedSequence&lt;Base : SequenceType&gt;:GeneratorType, SequenceType {<br>    <br>    internal var _base: Base<br>    internal var _generator: Base.Generator<br>    public var bufferedElement: Base.Generator.Element?<br>    <br>    public init(_ base: Base) {<br>        _base = base<br>        _generator = base.generate()<br>        bufferedElement = _generator.next()<br>    }<br></p><p>    public mutating func next() -&gt; Base.Generator.Element? {<br>        defer {<br>            if bufferedElement != nil {<br>                bufferedElement = _generator.next()<br>            }<br>        }<br>        return bufferedElement<br>    }<br>    <br>    public func isEmpty() -&gt; Bool {<br>        return bufferedElement == nil<br>    }<br>}<br></p><p>-- E<br></p><p><br>&gt; On May 8, 2016, at 8:16 PM, Adriano Ferreira via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I’m working on the following method:<br>&gt; <br>&gt; extension SequenceType {<br>&gt; <br>&gt;     /// Check if `predicate` is true for all elements of `self`<br>&gt;     ///<br>&gt;     /// - Parameter predicate: The predicate called on each element of `self`<br>&gt;     ///<br>&gt;     /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br>&gt; <br>&gt;     @warn_unused_result<br>&gt;     func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>&gt;         for element in self where try !predicate(element) {<br>&gt;             return false<br>&gt;         }<br>&gt; <br>&gt;         return true<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; However, when the sequence is empty the method returns true, which is not the desired behaviour.<br>&gt; <br>&gt; let a = [Int]()<br>&gt; let b = a.all(where: { $0 &gt; 7 })<br>&gt; XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br>&gt; <br>&gt; Does anyone know how to guard against an empty sequence?<br>&gt; <br>&gt; I’m using Xcode 7.3.1 and Swift 2.2.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; — A<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160509/ff3ad856/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Guarding against an empty sequence</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 10, 2016 at 02:00:00pm</p></header><div class="content"><p>I would agree with everybody else who says an empty sequence should return true (and your documentation comment seems to confirm that). However, to implement the behaviour you want, there is no need to think of something clever, simply count the number of iterations of the for loop.<br></p><p>    func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>	var count = 0<br>        for element in self {<br>	    guard try predicate(element) else { return false }<br>	    count += 1<br>        }<br>        return count &gt; 0<br>    }<br></p><p>YMMV, but I think the above (even without the count) is more readable than the original version with the where clause because it is more explicit about how the algorithm works.<br></p><p>Obviously “count” could be a boolean that starts out false and gets set to true on each iteration after the guard and I know you don’t like the idea, but it is cleaner and simpler than mucking about with explicitly calling next() or creating a whole new buffered sequence just to avoid two lines of code.<br></p><p>&gt; On 9 May 2016, at 03:16, Adriano Ferreira via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I’m working on the following method:<br>&gt; <br>&gt; extension SequenceType {<br>&gt; <br>&gt;     /// Check if `predicate` is true for all elements of `self`<br>&gt;     ///<br>&gt;     /// - Parameter predicate: The predicate called on each element of `self`<br>&gt;     ///<br>&gt;     /// - Returns: True iff every element in `self` satisfies `predicate`, false otherwise<br>&gt; <br>&gt;     @warn_unused_result<br>&gt;     func all(@noescape where predicate: Generator.Element throws -&gt; Bool) rethrows -&gt; Bool {<br>&gt;         for element in self where try !predicate(element) {<br>&gt;             return false<br>&gt;         }<br>&gt; <br>&gt;         return true<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; However, when the sequence is empty the method returns true, which is not the desired behaviour.<br>&gt; <br>&gt; let a = [Int]()<br>&gt; let b = a.all(where: { $0 &gt; 7 })<br>&gt; XCTAssertFalse(b)   // This fails, cause there’s no guard against an empty sequence<br>&gt; <br>&gt; Does anyone know how to guard against an empty sequence?<br>&gt; <br>&gt; I’m using Xcode 7.3.1 and Swift 2.2.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; — A<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
