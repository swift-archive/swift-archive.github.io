<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Adding retain to CFCalendar.c - SR2879</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>October  7, 2016 at 02:00:00pm</p></header><div class="content"><p>I&#39;m looking at https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt; which is exposing itself through an over-release of a constant CF string (in this case, kCFEmptyString). I don&#39;t believe it to be a Swift related problem, because Swift doesn&#39;t get into the internals of CFCalendar where the problem occurs.<br></p><p>The problem is that CFCalendar releases the localeID when it&#39;s deallocated:<br></p><p>if (calendar-&gt;_localeID) CFRelease(calendar-&gt;_localeID);<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54&gt; <br></p><p>The problem is that when the localeID is assigned, it doesn&#39;t appear to be copied or renamed:<br></p><p>calendar-&gt;_localeID = CFLocaleGetIdentifier(CFLocaleGetSystem());<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252&gt; <br>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281&gt;  <br></p><p>but elsewhere in the code, we do retain it:<br></p><p>   CFStringRef localeID = CFLocaleGetIdentifier(locale);<br>    if (localeID != calendar-&gt;_localeID) {<br>	CFRelease(calendar-&gt;_localeID);<br>	CFRetain(localeID);<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306&gt; <br></p><p>When a locale isn&#39;t supplied, it uses the default global one, which is defined to be an empty string:<br></p><p>CFLocaleRef CFLocaleGetSystem(void) {<br>    CFLocaleRef locale;<br>    CFLocaleRef uselessLocale = NULL; //if we lose the race creating the global locale, we need to release the one we created, but we want to do it outside the lock.<br>    __CFLocaleLockGlobal();<br>    if (NULL == __CFLocaleSystem) {<br>	__CFLocaleUnlockGlobal();<br>	locale = CFLocaleCreate(kCFAllocatorSystemDefault, CFSTR(&quot;&quot;));<br>	if (!locale) return NULL;<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261&gt; <br></p><p>The CFSTR(&quot;&quot;) results in a reference to kCFEmptyString, which reduces by one each time a CFCalendar is created and destroyed, leading to the (unrelated) test failures of https://github.com/apple/swift-corelibs-foundation/pull/667 &lt;https://github.com/apple/swift-corelibs-foundation/pull/667&gt; as documented in https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt;<br></p><p>My suggestion is to insert a CFRetain when the calendar-&gt;locale is set, to balance out the CFRelease that&#39;s being performed in the deallocator. Building with this simple change and checking the retain count of kCFEmptyString verifies that it does fix the problem, although I&#39;m open to suggestions as to improvements of where the retain takes place, if not on lines 252 and 282.<br></p><p>  1&gt; import Foundation <br>  2&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>(int) $11 = 1<br>  2&gt; _ = Calendar(identifier:.gregorian)<br>  3&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>(int) $12 = 3<br>  3&gt; _ = Calendar(identifier:.chinese)<br>  4&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>(int) $13 = 3<br>  4&gt; _ = Calendar(identifier:.hebrew)<br>  5&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>(int) $14 = 3<br>  5&gt; ^D<br></p><p>Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161007/fc7158aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Adding retain to CFCalendar.c - SR2879</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>October  7, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Alex,<br></p><p>Thanks for digging into this. This seems like a correct solution for now.<br></p><p>I think there is a larger question though, which is why it’s possible to overrelease kCFEmptyString. I think we skirted the issue early in bringup of SCL-Foundation, but constant strings are supposed to be “pinned” and ref count operations on them a no-op.<br></p><p>- Tony<br></p><p>&gt; On Oct 7, 2016, at 6:47 AM, Alex Blewitt via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m looking at https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt; which is exposing itself through an over-release of a constant CF string (in this case, kCFEmptyString). I don&#39;t believe it to be a Swift related problem, because Swift doesn&#39;t get into the internals of CFCalendar where the problem occurs.<br>&gt; <br>&gt; The problem is that CFCalendar releases the localeID when it&#39;s deallocated:<br>&gt; <br>&gt; if (calendar-&gt;_localeID) CFRelease(calendar-&gt;_localeID);<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54&gt; <br>&gt; <br>&gt; The problem is that when the localeID is assigned, it doesn&#39;t appear to be copied or renamed:<br>&gt; <br>&gt; calendar-&gt;_localeID = CFLocaleGetIdentifier(CFLocaleGetSystem());<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281&gt;  <br>&gt; <br>&gt; but elsewhere in the code, we do retain it:<br>&gt; <br>&gt;    CFStringRef localeID = CFLocaleGetIdentifier(locale);<br>&gt;     if (localeID != calendar-&gt;_localeID) {<br>&gt; 	CFRelease(calendar-&gt;_localeID);<br>&gt; 	CFRetain(localeID);<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306&gt; <br>&gt; <br>&gt; When a locale isn&#39;t supplied, it uses the default global one, which is defined to be an empty string:<br>&gt; <br>&gt; CFLocaleRef CFLocaleGetSystem(void) {<br>&gt;     CFLocaleRef locale;<br>&gt;     CFLocaleRef uselessLocale = NULL; //if we lose the race creating the global locale, we need to release the one we created, but we want to do it outside the lock.<br>&gt;     __CFLocaleLockGlobal();<br>&gt;     if (NULL == __CFLocaleSystem) {<br>&gt; 	__CFLocaleUnlockGlobal();<br>&gt; 	locale = CFLocaleCreate(kCFAllocatorSystemDefault, CFSTR(&quot;&quot;));<br>&gt; 	if (!locale) return NULL;<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261&gt; <br>&gt; <br>&gt; The CFSTR(&quot;&quot;) results in a reference to kCFEmptyString, which reduces by one each time a CFCalendar is created and destroyed, leading to the (unrelated) test failures of https://github.com/apple/swift-corelibs-foundation/pull/667 &lt;https://github.com/apple/swift-corelibs-foundation/pull/667&gt; as documented in https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt;<br>&gt; <br>&gt; My suggestion is to insert a CFRetain when the calendar-&gt;locale is set, to balance out the CFRelease that&#39;s being performed in the deallocator. Building with this simple change and checking the retain count of kCFEmptyString verifies that it does fix the problem, although I&#39;m open to suggestions as to improvements of where the retain takes place, if not on lines 252 and 282.<br>&gt; <br>&gt;   1&gt; import Foundation <br>&gt;   2&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt; (int) $11 = 1<br>&gt;   2&gt; _ = Calendar(identifier:.gregorian)<br>&gt;   3&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt; (int) $12 = 3<br>&gt;   3&gt; _ = Calendar(identifier:.chinese)<br>&gt;   4&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt; (int) $13 = 3<br>&gt;   4&gt; _ = Calendar(identifier:.hebrew)<br>&gt;   5&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt; (int) $14 = 3<br>&gt;   5&gt; ^D<br>&gt; <br>&gt; Alex<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161007/e2df7b8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c60436f08b7b107f0bb0848c31297fa?s=50"></div><header><strong>Adding retain to CFCalendar.c - SR2879</strong> from <string>Alex Blewitt</string> &lt;alblue at apple.com&gt;<p>October  7, 2016 at 06:00:00pm</p></header><div class="content"><p>That&#39;s what I was expecting, too, but then I found this:<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Base.subproj/CFInternal.h#L387-L389 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Base.subproj/CFInternal.h#L387-L389&gt;<br></p><p>#if DEPLOYMENT_RUNTIME_SWIFT<br> // TODO: Pinned retain count for constants?<br> #define __CFSTR_RC_INIT _CF_CONSTANT_OBJECT_STRONG_RC, 0,<br></p><p>Alex<br></p><p>&gt; On 7 Oct 2016, at 17:51, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Alex,<br>&gt; <br>&gt; Thanks for digging into this. This seems like a correct solution for now.<br>&gt; <br>&gt; I think there is a larger question though, which is why it’s possible to overrelease kCFEmptyString. I think we skirted the issue early in bringup of SCL-Foundation, but constant strings are supposed to be “pinned” and ref count operations on them a no-op.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Oct 7, 2016, at 6:47 AM, Alex Blewitt via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m looking at https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt; which is exposing itself through an over-release of a constant CF string (in this case, kCFEmptyString). I don&#39;t believe it to be a Swift related problem, because Swift doesn&#39;t get into the internals of CFCalendar where the problem occurs.<br>&gt;&gt; <br>&gt;&gt; The problem is that CFCalendar releases the localeID when it&#39;s deallocated:<br>&gt;&gt; <br>&gt;&gt; if (calendar-&gt;_localeID) CFRelease(calendar-&gt;_localeID);<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54&gt; <br>&gt;&gt; <br>&gt;&gt; The problem is that when the localeID is assigned, it doesn&#39;t appear to be copied or renamed:<br>&gt;&gt; <br>&gt;&gt; calendar-&gt;_localeID = CFLocaleGetIdentifier(CFLocaleGetSystem());<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281&gt;  <br>&gt;&gt; <br>&gt;&gt; but elsewhere in the code, we do retain it:<br>&gt;&gt; <br>&gt;&gt;    CFStringRef localeID = CFLocaleGetIdentifier(locale);<br>&gt;&gt;     if (localeID != calendar-&gt;_localeID) {<br>&gt;&gt; 	CFRelease(calendar-&gt;_localeID);<br>&gt;&gt; 	CFRetain(localeID);<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306&gt; <br>&gt;&gt; <br>&gt;&gt; When a locale isn&#39;t supplied, it uses the default global one, which is defined to be an empty string:<br>&gt;&gt; <br>&gt;&gt; CFLocaleRef CFLocaleGetSystem(void) {<br>&gt;&gt;     CFLocaleRef locale;<br>&gt;&gt;     CFLocaleRef uselessLocale = NULL; //if we lose the race creating the global locale, we need to release the one we created, but we want to do it outside the lock.<br>&gt;&gt;     __CFLocaleLockGlobal();<br>&gt;&gt;     if (NULL == __CFLocaleSystem) {<br>&gt;&gt; 	__CFLocaleUnlockGlobal();<br>&gt;&gt; 	locale = CFLocaleCreate(kCFAllocatorSystemDefault, CFSTR(&quot;&quot;));<br>&gt;&gt; 	if (!locale) return NULL;<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261&gt; <br>&gt;&gt; <br>&gt;&gt; The CFSTR(&quot;&quot;) results in a reference to kCFEmptyString, which reduces by one each time a CFCalendar is created and destroyed, leading to the (unrelated) test failures of https://github.com/apple/swift-corelibs-foundation/pull/667 &lt;https://github.com/apple/swift-corelibs-foundation/pull/667&gt; as documented in https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt;<br>&gt;&gt; <br>&gt;&gt; My suggestion is to insert a CFRetain when the calendar-&gt;locale is set, to balance out the CFRelease that&#39;s being performed in the deallocator. Building with this simple change and checking the retain count of kCFEmptyString verifies that it does fix the problem, although I&#39;m open to suggestions as to improvements of where the retain takes place, if not on lines 252 and 282.<br>&gt;&gt; <br>&gt;&gt;   1&gt; import Foundation <br>&gt;&gt;   2&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt; (int) $11 = 1<br>&gt;&gt;   2&gt; _ = Calendar(identifier:.gregorian)<br>&gt;&gt;   3&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt; (int) $12 = 3<br>&gt;&gt;   3&gt; _ = Calendar(identifier:.chinese)<br>&gt;&gt;   4&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt; (int) $13 = 3<br>&gt;&gt;   4&gt; _ = Calendar(identifier:.hebrew)<br>&gt;&gt;   5&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt; (int) $14 = 3<br>&gt;&gt;   5&gt; ^D<br>&gt;&gt; <br>&gt;&gt; Alex<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161007/6c83cb30/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Adding retain to CFCalendar.c - SR2879</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>October  7, 2016 at 10:00:00am</p></header><div class="content"><p>Yes, that was the “skirting of the issue”. =)<br></p><p>It’s likely not a huge deal in the end; since CF is an implementation detail of swift-corelibs-foundation, we just need to remember to retain/release constant strings as we would others and we would be ok. However, I suspect there are other places in CF where we get away with it on Darwin but can’t on Swift. So it would be nice to have them be consistent, for our own sanity.<br></p><p>- Tony<br></p><p>&gt; On Oct 7, 2016, at 10:31 AM, Alex Blewitt &lt;alblue at apple.com&gt; wrote:<br>&gt; <br>&gt; That&#39;s what I was expecting, too, but then I found this:<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Base.subproj/CFInternal.h#L387-L389 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Base.subproj/CFInternal.h#L387-L389&gt;<br>&gt; <br>&gt; #if DEPLOYMENT_RUNTIME_SWIFT<br>&gt;  // TODO: Pinned retain count for constants?<br>&gt;  #define __CFSTR_RC_INIT _CF_CONSTANT_OBJECT_STRONG_RC, 0,<br>&gt; <br>&gt; Alex<br>&gt; <br>&gt;&gt; On 7 Oct 2016, at 17:51, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Alex,<br>&gt;&gt; <br>&gt;&gt; Thanks for digging into this. This seems like a correct solution for now.<br>&gt;&gt; <br>&gt;&gt; I think there is a larger question though, which is why it’s possible to overrelease kCFEmptyString. I think we skirted the issue early in bringup of SCL-Foundation, but constant strings are supposed to be “pinned” and ref count operations on them a no-op.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 7, 2016, at 6:47 AM, Alex Blewitt via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m looking at https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt; which is exposing itself through an over-release of a constant CF string (in this case, kCFEmptyString). I don&#39;t believe it to be a Swift related problem, because Swift doesn&#39;t get into the internals of CFCalendar where the problem occurs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that CFCalendar releases the localeID when it&#39;s deallocated:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if (calendar-&gt;_localeID) CFRelease(calendar-&gt;_localeID);<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L54&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is that when the localeID is assigned, it doesn&#39;t appear to be copied or renamed:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; calendar-&gt;_localeID = CFLocaleGetIdentifier(CFLocaleGetSystem());<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L252&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L281&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but elsewhere in the code, we do retain it:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    CFStringRef localeID = CFLocaleGetIdentifier(locale);<br>&gt;&gt;&gt;     if (localeID != calendar-&gt;_localeID) {<br>&gt;&gt;&gt; 	CFRelease(calendar-&gt;_localeID);<br>&gt;&gt;&gt; 	CFRetain(localeID);<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFCalendar.c#L303-L306&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When a locale isn&#39;t supplied, it uses the default global one, which is defined to be an empty string:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; CFLocaleRef CFLocaleGetSystem(void) {<br>&gt;&gt;&gt;     CFLocaleRef locale;<br>&gt;&gt;&gt;     CFLocaleRef uselessLocale = NULL; //if we lose the race creating the global locale, we need to release the one we created, but we want to do it outside the lock.<br>&gt;&gt;&gt;     __CFLocaleLockGlobal();<br>&gt;&gt;&gt;     if (NULL == __CFLocaleSystem) {<br>&gt;&gt;&gt; 	__CFLocaleUnlockGlobal();<br>&gt;&gt;&gt; 	locale = CFLocaleCreate(kCFAllocatorSystemDefault, CFSTR(&quot;&quot;));<br>&gt;&gt;&gt; 	if (!locale) return NULL;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261 &lt;https://github.com/apple/swift-corelibs-foundation/blob/1a76e814212e781a9d50782ee24117760cfe9b48/CoreFoundation/Locale.subproj/CFLocale.c#L255-L261&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The CFSTR(&quot;&quot;) results in a reference to kCFEmptyString, which reduces by one each time a CFCalendar is created and destroyed, leading to the (unrelated) test failures of https://github.com/apple/swift-corelibs-foundation/pull/667 &lt;https://github.com/apple/swift-corelibs-foundation/pull/667&gt; as documented in https://bugs.swift.org/browse/SR-2879 &lt;https://bugs.swift.org/browse/SR-2879&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My suggestion is to insert a CFRetain when the calendar-&gt;locale is set, to balance out the CFRelease that&#39;s being performed in the deallocator. Building with this simple change and checking the retain count of kCFEmptyString verifies that it does fix the problem, although I&#39;m open to suggestions as to improvements of where the retain takes place, if not on lines 252 and 282.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   1&gt; import Foundation <br>&gt;&gt;&gt;   2&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt;&gt; (int) $11 = 1<br>&gt;&gt;&gt;   2&gt; _ = Calendar(identifier:.gregorian)<br>&gt;&gt;&gt;   3&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt;&gt; (int) $12 = 3<br>&gt;&gt;&gt;   3&gt; _ = Calendar(identifier:.chinese)<br>&gt;&gt;&gt;   4&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt;&gt; (int) $13 = 3<br>&gt;&gt;&gt;   4&gt; _ = Calendar(identifier:.hebrew)<br>&gt;&gt;&gt;   5&gt; :p (int)swift_retainCount(&amp;__kCFEmptyString) <br>&gt;&gt;&gt; (int) $14 = 3<br>&gt;&gt;&gt;   5&gt; ^D<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Alex<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20161007/18970a4f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
