<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/596d46131ce1b8e377c19be5a3fb29ba?s=50"></div><header><strong>Parameter names in closures in Swift 3 are no longer possible</strong> from <string>Andrew Hart</string> &lt;andrew at projectdent.com&gt;<p>October  8, 2016 at 06:00:00am</p></header><div class="content"><p>I’ve been a little dismayed to see that closures in Swift 3 no longer have<br>parameter names. As an example, in Swift 2, a function with a completion<br>block may look like this:<br></p><p>func sendMessage(completion: (success: Bool, recipientID: String?,<br>senderID: String?) -&gt; Void) {<br>    //Oh no it failed<br>    completion(success: false, recipientID: nil, senderID: nil)<br>}<br></p><p>Now, in Swift 3, it looks like this:<br></p><p>func sendMessage(completion: @escaping (_ success: String, _ recipientID:<br>String?, _ senderID: String?) -&gt; Void {<br>    //Oh no it failed<br>    completion(false, nil, nil)<br>}<br></p><p>So now all parameter names, if you wish to include them, must be preceded<br>by a _. Removing the _, it forces you to put it back. Or putting the<br>parameter name twice, it forces you to replace the first occurrence with a<br>_.<br></p><p>To me, one of the great advantages of Swift over a language like Python or<br>Ruby is its self-documenting nature. If I’m calling a function, I don’t<br>need to look elsewhere for a reference to the parameters I’m using. When<br>reading back over my code, I don’t have to look elsewhere to check whether<br>I used the correct parameters, and in the correct order. In Swift 2, I can<br>easily glance at my code to check its correctness, and I can clearly see<br>I’m responding to the completion block correctly. In Swift 3, I need to<br>look elsewhere to see what the parameters in “(false, nil, nil)&quot; refers to,<br>and that negates one of the key advantages that Swift has.<br></p><p>For this kind of closure, I feel like it’s almost required that we be able<br>to have parameter names. My request is that if we list the parameter names<br>explicitly, like in the Swift 2 example, then they appear in the closure<br>call by default.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161008/52f6fed3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Parameter names in closures in Swift 3 are no longer possible</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 10, 2016 at 04:00:00pm</p></header><div class="content"><p>As mentioned previously, the core team has laid out a two-step roadmap to<br>restoring parameter names:<br></p><p>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160711/024331.html<br></p><p>On Mon, Oct 10, 2016 at 10:55 Andrew Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’ve been a little dismayed to see that closures in Swift 3 no longer have<br>&gt; parameter names. As an example, in Swift 2, a function with a completion<br>&gt; block may look like this:<br>&gt;<br>&gt; func sendMessage(completion: (success: Bool, recipientID: String?,<br>&gt; senderID: String?) -&gt; Void) {<br>&gt;     //Oh no it failed<br>&gt;     completion(success: false, recipientID: nil, senderID: nil)<br>&gt; }<br>&gt;<br>&gt; Now, in Swift 3, it looks like this:<br>&gt;<br>&gt; func sendMessage(completion: @escaping (_ success: String, _ recipientID:<br>&gt; String?, _ senderID: String?) -&gt; Void {<br>&gt;     //Oh no it failed<br>&gt;     completion(false, nil, nil)<br>&gt; }<br>&gt;<br>&gt; So now all parameter names, if you wish to include them, must be preceded<br>&gt; by a _. Removing the _, it forces you to put it back. Or putting the<br>&gt; parameter name twice, it forces you to replace the first occurrence with a<br>&gt; _.<br>&gt;<br>&gt; To me, one of the great advantages of Swift over a language like Python or<br>&gt; Ruby is its self-documenting nature. If I’m calling a function, I don’t<br>&gt; need to look elsewhere for a reference to the parameters I’m using. When<br>&gt; reading back over my code, I don’t have to look elsewhere to check whether<br>&gt; I used the correct parameters, and in the correct order. In Swift 2, I can<br>&gt; easily glance at my code to check its correctness, and I can clearly see<br>&gt; I’m responding to the completion block correctly. In Swift 3, I need to<br>&gt; look elsewhere to see what the parameters in “(false, nil, nil)&quot; refers to,<br>&gt; and that negates one of the key advantages that Swift has.<br>&gt;<br>&gt; For this kind of closure, I feel like it’s almost required that we be able<br>&gt; to have parameter names. My request is that if we list the parameter names<br>&gt; explicitly, like in the Swift 2 example, then they appear in the closure<br>&gt; call by default.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161010/921f7ce2/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
