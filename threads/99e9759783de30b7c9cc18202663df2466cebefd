<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 28, 2016 at 09:00:00am</p></header><div class="content"><p>on Thu Jan 28 2016, David Hart &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Loss of &#39;with&#39; sounds weird in certain cases:<br>&gt;<br>&gt; - func account(identifier identifier: String!) -&gt; ACAccount!<br>&gt; + func account(identifier: String!) -&gt; ACAccount!<br></p><p>? I don&#39;t see a loss of &#39;with&#39; in this case.  But even so, what matters<br>is the use site.  Is there something wrong with<br></p><p>   x.account(&quot;C18C1191-7761-4C70-9C7D-FB8B61E87E40&quot;)<br></p><p>?<br></p><p>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On 28 Jan 2016, at 00:31, Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 27, 2016, at 10:03 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Wed Jan 27 2016, Matthew Johnson<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doug,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this change looks great!  I don’t have time to look through<br>&gt;&gt;&gt;&gt; the full patch but did look through quite a bit.  It adds clarity in<br>&gt;&gt;&gt;&gt; the vast majority of cases I looked at.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems like with-as-separator is a good heuristic for determining<br>&gt;&gt;&gt;&gt; when the first parameter is not essential to a good name for the<br>&gt;&gt;&gt;&gt; fundamental operation.  I agree with the comments earlier on that in<br>&gt;&gt;&gt;&gt; these cases a label for the first parameter is the best approach.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also really like that this groups methods with the same fundamental<br>&gt;&gt;&gt;&gt; operation into overload families where they previously had independent<br>&gt;&gt;&gt;&gt; names.  This is a big win IMO.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There is a first-parameter-is-an-ID pattern I noticed after this<br>&gt;&gt;&gt;&gt; change.  I show a few examples here, but there are a lot more:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVFragmentedAssetTrack?<br>&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVFragmentedAssetTrack?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -  func trackWithTrackID(trackID: CMPersistentTrackID) -&gt; AVCompositionTrack?<br>&gt;&gt;&gt;&gt; +  func track(trackID trackID: CMPersistentTrackID) -&gt; AVCompositionTrack?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - func discoverUserInfoWithUserRecordID(userRecordID: CKRecordID,<br>&gt;&gt;&gt;&gt; completionHandler: (CKDiscoveredUserInfo?, Error?) -&gt; Void)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; + func discoverUserInfo(userRecordID userRecordID: CKRecordID,<br>&gt;&gt;&gt;&gt; completionHandler: (CKDiscoveredUserInfo?, Error?) -&gt; Void)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The first argument label `trackID` seems like it repeats type<br>&gt;&gt;&gt;&gt; information without adding clarity.  I think it would be better to<br>&gt;&gt;&gt;&gt; just use `id` here.  It seems like a candidate for heuristics as well.<br>&gt;&gt;&gt;&gt; For example, if the type name ends in ID and the label is a suffix of<br>&gt;&gt;&gt;&gt; the type name we could just use `id`.  This is a somewhat specific<br>&gt;&gt;&gt;&gt; pattern, but IDs are common enough that it might make sense.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually I&#39;ve been saying for a while that arguments called ID,<br>&gt;&gt;&gt; identifier, and name should not be labelled at all in many cases.  Think<br>&gt;&gt;&gt; about it.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Patch where the words “ID”, “Identifier”, and “Name” in a name are<br>&gt;&gt; considered to match the type “String”:<br>&gt;&gt; <br>&gt;&gt; &lt;id-identifier-name-match-string.patch&gt;<br>&gt;&gt; <br>&gt;&gt; … and then extending the rule to zap first argument labels named<br>&gt;&gt; “identifier”, “id”, or “name”:<br>&gt;&gt; <br>&gt;&gt; &lt;id-identifier-name-no-first-arg-label.patch&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; (I’m not sure which one of these you meant, or something different):<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
