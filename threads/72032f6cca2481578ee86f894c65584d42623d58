<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b5e7f229ebf32c8eca02e7cee0f379f?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Nicola Salmoria</string> &lt;nicola.salmoria at gmail.com&gt;<p>April 16, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Oh, a couple more things I just thought of:<br>&gt; <br>&gt; &gt; public protocol Arithmetic: Equatable, IntegerLiteralConvertible {<br>&gt; If your goals include supporting complex numbers, how is IntegerLiteralConvertible going to fit in there?<br>&gt; <br>&gt; &gt; /// Initialize to zero<br>&gt; &gt; init()<br>&gt; 0 is valuable as the additive identity. Should there also be a way to get 1, the multiplicative identity? If you need both, should these be static properties instead of initializers?<br></p><p>Interestingly, these two questions are related.<br></p><p>If you expose the multiplicative identity, you automatically expose a natural way to convert from an integer N: just add `one` to itself N times.<br>If N is negative, take the opposite.<br></p><p>For complex numbers the multiplicative identity is 1 + 0i, so this means that Complex(N) = N + 0i.<br></p><p>As an aside, a default generic implementation of IntegerLiteralConvertible would run in O(log N) steps, using the “double-and-add” algorithm:<br>https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Double-and-add.<br>Though I don’t think this is particularly useful for our use case :-)<br></p><p>—<br>Nicola<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 17, 2016 at 09:00:00am</p></header><div class="content"><p>For the Arithmetic protocol how about changing it to:<br></p><p>    protocol Arithmetic {<br>        func + (lhs: Self, rhs: Self) -&gt; Self<br>        mutating func += (rhs: Self) -&gt; Self<br>        ...<br>    }<br></p><p>That way naming issues are largely avoided, except for `mutating func<br>negate()` which has no operator and would therefore have to be a normal,<br>non-operator, func.<br></p><p>On Saturday, 16 April 2016, Nicola Salmoria via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; Oh, a couple more things I just thought of:<br>&gt; &gt;<br>&gt; &gt; &gt; public protocol Arithmetic: Equatable, IntegerLiteralConvertible {<br>&gt; &gt; If your goals include supporting complex numbers, how is<br>&gt; IntegerLiteralConvertible going to fit in there?<br>&gt; &gt;<br>&gt; &gt; &gt; /// Initialize to zero<br>&gt; &gt; &gt; init()<br>&gt; &gt; 0 is valuable as the additive identity. Should there also be a way to<br>&gt; get 1, the multiplicative identity? If you need both, should these be<br>&gt; static properties instead of initializers?<br>&gt;<br>&gt; Interestingly, these two questions are related.<br>&gt;<br>&gt; If you expose the multiplicative identity, you automatically expose a<br>&gt; natural way to convert from an integer N: just add `one` to itself N times.<br>&gt; If N is negative, take the opposite.<br>&gt;<br>&gt; For complex numbers the multiplicative identity is 1 + 0i, so this means<br>&gt; that Complex(N) = N + 0i.<br>&gt;<br>&gt; As an aside, a default generic implementation of IntegerLiteralConvertible<br>&gt; would run in O(log N) steps, using the “double-and-add” algorithm:<br>&gt;<br>&gt; https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Double-and-add<br>&gt; .<br>&gt; Though I don’t think this is particularly useful for our use case :-)<br>&gt;<br>&gt; —<br>&gt; Nicola<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160417/64079412/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Apr 16, 2016, at 6:12 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; For the Arithmetic protocol how about changing it to:<br>&gt; <br>&gt;     protocol Arithmetic {<br>&gt;         func + (lhs: Self, rhs: Self) -&gt; Self<br>&gt;         mutating func += (rhs: Self) -&gt; Self<br>&gt;         ...<br>&gt;     }<br>&gt; <br>&gt; That way naming issues are largely avoided, except for `mutating func negate()` which has no operator and would therefore have to be a normal, non-operator, func. <br>“prefix -&quot; works for negate, at least off the top of my head.<br></p><p>I think.<br></p><p>- Dave Sweeris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/240b0377/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 19, 2016 at 08:00:00am</p></header><div class="content"><p>I think `prefix -` works for `negated` (non-mutating form) but not `negate`<br>(mutating form). IE `-=` is the mutating form of `infix -` and there is no<br>equivalent in C-like languages for `negated` :(<br></p><p>  -- Howard.<br></p><p>On 19 April 2016 at 08:28, &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; On Apr 16, 2016, at 6:12 PM, Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; For the Arithmetic protocol how about changing it to:<br>&gt;<br>&gt;     protocol Arithmetic {<br>&gt;         func + (lhs: Self, rhs: Self) -&gt; Self<br>&gt;         mutating func += (rhs: Self) -&gt; Self<br>&gt;         ...<br>&gt;     }<br>&gt;<br>&gt; That way naming issues are largely avoided, except for `mutating func<br>&gt; negate()` which has no operator and would therefore have to be a normal,<br>&gt; non-operator, func.<br>&gt;<br>&gt; “prefix -&quot; works for negate, at least off the top of my head.<br>&gt;<br>&gt; I think.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/fec55d77/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&quot;prefix -=“?<br></p><p>(I’m not sure if I’m serious)<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 18, 2016, at 5:57 PM, Howard Lovatt &lt;howard.lovatt at gmail.com&gt; wrote:<br>&gt; <br>&gt; I think `prefix -` works for `negated` (non-mutating form) but not `negate` (mutating form). IE `-=` is the mutating form of `infix -` and there is no equivalent in C-like languages for `negated` :(<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt; On 19 April 2016 at 08:28, &lt;davesweeris at mac.com &lt;mailto:davesweeris at mac.com&gt;&gt; wrote:<br>&gt;&gt; On Apr 16, 2016, at 6:12 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For the Arithmetic protocol how about changing it to:<br>&gt;&gt; <br>&gt;&gt;     protocol Arithmetic {<br>&gt;&gt;         func + (lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;         mutating func += (rhs: Self) -&gt; Self<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; That way naming issues are largely avoided, except for `mutating func negate()` which has no operator and would therefore have to be a normal, non-operator, func. <br>&gt; “prefix -&quot; works for negate, at least off the top of my head.<br>&gt; <br>&gt; I think.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/ca38b3a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Proposal draft] Enhanced floating-point protocols</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 19, 2016 at 11:00:00am</p></header><div class="content"><p>+1 `prefix -=`, it logically follows :)<br></p><p>  -- Howard.<br></p><p>On 19 April 2016 at 09:02, &lt;davesweeris at mac.com&gt; wrote:<br></p><p>&gt; &quot;prefix -=“?<br>&gt;<br>&gt; (I’m not sure if I’m serious)<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; On Apr 18, 2016, at 5:57 PM, Howard Lovatt &lt;howard.lovatt at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I think `prefix -` works for `negated` (non-mutating form) but not<br>&gt; `negate` (mutating form). IE `-=` is the mutating form of `infix -` and<br>&gt; there is no equivalent in C-like languages for `negated` :(<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>&gt; On 19 April 2016 at 08:28, &lt;davesweeris at mac.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Apr 16, 2016, at 6:12 PM, Howard Lovatt via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; For the Arithmetic protocol how about changing it to:<br>&gt;&gt;<br>&gt;&gt;     protocol Arithmetic {<br>&gt;&gt;         func + (lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;         mutating func += (rhs: Self) -&gt; Self<br>&gt;&gt;         ...<br>&gt;&gt;     }<br>&gt;&gt;<br>&gt;&gt; That way naming issues are largely avoided, except for `mutating func<br>&gt;&gt; negate()` which has no operator and would therefore have to be a normal,<br>&gt;&gt; non-operator, func.<br>&gt;&gt;<br>&gt;&gt; “prefix -&quot; works for negate, at least off the top of my head.<br>&gt;&gt;<br>&gt;&gt; I think.<br>&gt;&gt;<br>&gt;&gt; - Dave Sweeris<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160419/169e2ab0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
