<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d932a7cff4e614f7b268b11b3b362a7?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Alexandre Lopoukhine</string> &lt;superlopuh at gmail.com&gt;<p>December 18, 2015 at 04:00:00pm</p></header><div class="content"><p>Hello everyone,<br></p><p>To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br></p><p>Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br></p><p>func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>    return tuple.0<br>}<br></p><p>Having functions like this transforms<br></p><p>pairArray.map({$0.0})<br></p><p>into<br></p><p>pairArray.map(first)<br></p><p>This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br></p><p>Here’s an alternative:<br></p><p>pairArray.map(().0)<br></p><p>I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br></p><p>What do you all think?<br></p><p>— Sasha<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 18, 2015 at 09:00:00am</p></header><div class="content"><p>This is already possible today.  You just need to write overloads for tuples of up to n members.  Are you asking for this to be a library feature?<br></p><p><br>&gt; On Dec 18, 2015, at 9:30 AM, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone,<br>&gt; <br>&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt; <br>&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt; <br>&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;    return tuple.0<br>&gt; }<br>&gt; <br>&gt; Having functions like this transforms<br>&gt; <br>&gt; pairArray.map({$0.0})<br>&gt; <br>&gt; into<br>&gt; <br>&gt; pairArray.map(first)<br>&gt; <br>&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt; <br>&gt; Here’s an alternative:<br>&gt; <br>&gt; pairArray.map(().0)<br>&gt; <br>&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt; <br>&gt; What do you all think?<br>&gt; <br>&gt; — Sasha<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d932a7cff4e614f7b268b11b3b362a7?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Alexandre Lopoukhine</string> &lt;superlopuh at gmail.com&gt;<p>December 18, 2015 at 05:00:00pm</p></header><div class="content"><p>Matthew,<br></p><p>What I’m thinking about would be a true equivalent of the closure syntax, where the following:<br></p><p>{$0.0.1.2} becomes<br></p><p>Tuple.0.1.2<br></p><p>I’m not aware of this being achievable at the language level today.<br></p><p>— Sasha<br></p><p><br>&gt; On 18 Dec 2015, at 16:34, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; This is already possible today.  You just need to write overloads for tuples of up to n members.  Are you asking for this to be a library feature?<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 18, 2015, at 9:30 AM, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello everyone,<br>&gt;&gt; <br>&gt;&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt;&gt; <br>&gt;&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt;&gt; <br>&gt;&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;&gt;   return tuple.0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Having functions like this transforms<br>&gt;&gt; <br>&gt;&gt; pairArray.map({$0.0})<br>&gt;&gt; <br>&gt;&gt; into<br>&gt;&gt; <br>&gt;&gt; pairArray.map(first)<br>&gt;&gt; <br>&gt;&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt;&gt; <br>&gt;&gt; Here’s an alternative:<br>&gt;&gt; <br>&gt;&gt; pairArray.map(().0)<br>&gt;&gt; <br>&gt;&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt;&gt; <br>&gt;&gt; What do you all think?<br>&gt;&gt; <br>&gt;&gt; — Sasha<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>Sorry, I didn’t read your post carefully enough.  You are correct, this is not possible.<br></p><p>If you need to dig 3 levels deep into a tuple you may have cases where structs would be more appropriate.<br></p><p>&gt; On Dec 18, 2015, at 10:01 AM, Alexandre Lopoukhine &lt;superlopuh at gmail.com&gt; wrote:<br>&gt; <br>&gt; Matthew,<br>&gt; <br>&gt; What I’m thinking about would be a true equivalent of the closure syntax, where the following:<br>&gt; <br>&gt; {$0.0.1.2} becomes<br>&gt; <br>&gt; Tuple.0.1.2<br>&gt; <br>&gt; I’m not aware of this being achievable at the language level today.<br>&gt; <br>&gt; — Sasha<br>&gt; <br>&gt; <br>&gt;&gt; On 18 Dec 2015, at 16:34, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is already possible today.  You just need to write overloads for tuples of up to n members.  Are you asking for this to be a library feature?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 18, 2015, at 9:30 AM, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;&gt;&gt;  return tuple.0<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having functions like this transforms<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; pairArray.map({$0.0})<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; into<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; pairArray.map(first)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s an alternative:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; pairArray.map(().0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What do you all think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Sasha<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 18, 2015 at 10:00:00am</p></header><div class="content"><p>To consider: the empty tuple expression is currently legal and represents the void value.<br></p><p>&gt; Le 18 déc. 2015 à 10:30:57, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello everyone,<br>&gt; <br>&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt; <br>&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt; <br>&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;    return tuple.0<br>&gt; }<br>&gt; <br>&gt; Having functions like this transforms<br>&gt; <br>&gt; pairArray.map({$0.0})<br>&gt; <br>&gt; into<br>&gt; <br>&gt; pairArray.map(first)<br>&gt; <br>&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt; <br>&gt; Here’s an alternative:<br>&gt; <br>&gt; pairArray.map(().0)<br>&gt; <br>&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt; <br>&gt; What do you all think?<br>&gt; <br>&gt; — Sasha<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d932a7cff4e614f7b268b11b3b362a7?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Alexandre Lopoukhine</string> &lt;superlopuh at gmail.com&gt;<p>December 18, 2015 at 04:00:00pm</p></header><div class="content"><p>Oh, you’re right. The first options I considered were either a global function or a new Tuple class/struct with a bunch of these methods built in, which seemed less elegant but I guess are now the only possibility.<br></p><p>— Sasha<br></p><p>&gt; On 18 Dec 2015, at 16:36, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; To consider: the empty tuple expression is currently legal and represents the void value.<br>&gt; <br>&gt;&gt; Le 18 déc. 2015 à 10:30:57, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Hello everyone,<br>&gt;&gt; <br>&gt;&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt;&gt; <br>&gt;&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt;&gt; <br>&gt;&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;&gt;   return tuple.0<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Having functions like this transforms<br>&gt;&gt; <br>&gt;&gt; pairArray.map({$0.0})<br>&gt;&gt; <br>&gt;&gt; into<br>&gt;&gt; <br>&gt;&gt; pairArray.map(first)<br>&gt;&gt; <br>&gt;&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt;&gt; <br>&gt;&gt; Here’s an alternative:<br>&gt;&gt; <br>&gt;&gt; pairArray.map(().0)<br>&gt;&gt; <br>&gt;&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt;&gt; <br>&gt;&gt; What do you all think?<br>&gt;&gt; <br>&gt;&gt; — Sasha<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Tuple accessor shorthand</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>December 18, 2015 at 09:00:00pm</p></header><div class="content"><p>I think this proposal: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003373.html &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003373.html&gt; would also solve this problem<br></p><p>as you’d be able to do .map(.0), and AFAICT it will still be unambiguous.<br></p><p>— Radek<br></p><p>&gt; On 18 Dec 2015, at 16:30, Alexandre Lopoukhine via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone,<br>&gt; <br>&gt; To tie into the discussion of shorthands for “map&quot;, here’s something that I think is worth considering:<br>&gt; <br>&gt; Skipping the motivation (mostly, I’m on a mission to eliminate the $ character in my functional code), here’s a function definition:<br>&gt; <br>&gt; func first&lt;A,B&gt;(tuple: (A,B)) -&gt; A {<br>&gt;    return tuple.0<br>&gt; }<br>&gt; <br>&gt; Having functions like this transforms<br>&gt; <br>&gt; pairArray.map({$0.0})<br>&gt; <br>&gt; into<br>&gt; <br>&gt; pairArray.map(first)<br>&gt; <br>&gt; This is not ideal, as it pollutes the global space, and there would need to be tons of those for various tuple sizes.<br>&gt; <br>&gt; Here’s an alternative:<br>&gt; <br>&gt; pairArray.map(().0)<br>&gt; <br>&gt; I think that this makes the intent pretty clear, as well as non-conflicting with anything in the language.<br>&gt; <br>&gt; What do you all think?<br>&gt; <br>&gt; — Sasha<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151218/d1f5fefa/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
