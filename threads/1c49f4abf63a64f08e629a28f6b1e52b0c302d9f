<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>bridging (SR-138)</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>January  2, 2016 at 02:00:00am</p></header><div class="content"><p>I&#39;ve noticed that e.g. String is not bridged to NSString.  The expected workaround seems to be calling .bridge() everywhere.<br></p><p>1.  Is there a plan for bridging e.g. String with NSString?<br>2.  Would it be appropriate to PR in the meantime e.g.<br></p><p>extension String {<br>        public func cStringUsingEncoding(encoding: UInt) -&gt; UnsafePointer&lt;Int8&gt; {<br>            return self.bridge().cStringUsingEncoding(encoding)<br>        }<br>    }<br></p><p>  3.  The README also says<br></p><p>&gt; We will also drop the &#39;NS&#39; prefix from all Foundation classes<br></p><p><br>...is that the resolution?  e.g what is currently class NSString will become instead extension String?  Is there a bug open for that?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160102/1c492d9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ab7ae85b84ebb323fab427b11500742?s=50"></div><header><strong>bridging (SR-138)</strong> from <string>Keith Smiley</string> &lt;keithbsmiley at gmail.com&gt;<p>January  2, 2016 at 12:00:00am</p></header><div class="content"><p>There&#39;s a mention of this in the &quot;Issues&quot; document here:<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/master/Docs/Issues.md#known-issues<br></p><p>That makes it sound like this isn&#39;t meant to be a long term limitation:<br></p><p>&gt; In order to translate between these types, we have temporarily added a<br>&gt; protocol to these types that allows them to be converted.<br></p><p>And:<br></p><p>&gt; These limitations should hopefully be very short-term.<br></p><p>--<br>Keith Smiley<br></p><p>On 01/02, Drew Crawford via swift-corelibs-dev wrote:<br>&gt; I&#39;ve noticed that e.g. String is not bridged to NSString.  The expected workaround seems to be calling .bridge() everywhere.<br>&gt;<br>&gt; 1.  Is there a plan for bridging e.g. String with NSString?<br>&gt; 2.  Would it be appropriate to PR in the meantime e.g.<br>&gt;<br>&gt; extension String {<br>&gt;         public func cStringUsingEncoding(encoding: UInt) -&gt; UnsafePointer&lt;Int8&gt; {<br>&gt;             return self.bridge().cStringUsingEncoding(encoding)<br>&gt;         }<br>&gt;     }<br>&gt;<br>&gt;   3.  The README also says<br>&gt;<br>&gt; &gt; We will also drop the &#39;NS&#39; prefix from all Foundation classes<br>&gt;<br>&gt;<br>&gt; ...is that the resolution?  e.g what is currently class NSString will become instead extension String?  Is there a bug open for that?<br></p><p>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>bridging (SR-138)</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>January  2, 2016 at 12:00:00am</p></header><div class="content"><p>String is bridged it just is not yet implicitly converted via the compiler; we are missing certain functionality due to the compiler not supporting the objc code paths on linux.<br></p><p>The re-naming of swift classes exposed from Foundation will likely leave the class NSString still a thing (however it likely will have some special case of naming since there is a conflict between Foundation’s String and Swift’s String that is yet to be determined fully on how that will be done), so it is still a bit up-in-the-air on how that will be achieved. However since there are desired behavioral differences between NSString and String we cannot just wholesale make it an extension since some of the functions that apply to NSString don’t make much sense for String (e.g. characterAtIndex etc).<br></p><p>The bug you are probably looking for is: https://bugs.swift.org/browse/SR-138. Basically what we need is _ObjectTypeBridgeable to behave similarly to the type conversion portion of _ObjectiveCBridgeable. This would likely be primarily work in the compiler and also a bit of work in the stdlib for a few of the overlay extensions etc.<br></p><p><br>&gt; On Jan 2, 2016, at 12:24 AM, Drew Crawford via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve noticed that e.g. String is not bridged to NSString.  The expected workaround seems to be calling .bridge() everywhere.<br>&gt; <br>&gt; 1.  Is there a plan for bridging e.g. String with NSString?<br>&gt; 2.  Would it be appropriate to PR in the meantime e.g.<br>&gt; <br>&gt; extension String {<br>&gt;         public func cStringUsingEncoding(encoding: UInt) -&gt; UnsafePointer&lt;Int8&gt; {<br>&gt;             return self.bridge().cStringUsingEncoding(encoding)<br>&gt;         }<br>&gt;     }<br>&gt; <br>&gt;   3.  The README also says<br>&gt; <br>&gt;&gt; We will also drop the &#39;NS&#39; prefix from all Foundation classes<br>&gt; <br>&gt; <br>&gt; ...is that the resolution?  e.g what is currently class NSString will become instead extension String?  Is there a bug open for that?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160102/c65358b8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
