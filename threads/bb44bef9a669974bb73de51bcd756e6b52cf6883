<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Suppose *Apple* ships a framework that is only supported in iOS 9.3.  As a direct consequence, the framework is only #available in iOS 9.3 or later.<br></p><p>Suppose Jane links this framework into her iOS application.  The deployment target for her application *can be any value*.  She sets the framework to be weakly linked, and as long as the code that uses the Apple framework is guarded by a 9.3 availability check, she can deploy back to 8.0, 7.0, etc.<br></p><p>Suppose *I* ship a custom framework that I only want to bother supporting for iOS 9.3 users.  I&#39;m not testing on old OS, I don&#39;t have CI on old OS, and quite frankly I have no idea if it works.  And I&#39;m not in the habit of shipping code that wasn&#39;t even tested on my machine.  As a direct consequence, I set my framework deployment target to 9.3.<br></p><p>Now Jane links this framework into her &quot;deployment target 8.0&quot; application.  She weakly links it and uses availability checks just like she did with the Apple framework.  But this time the compiler says no:<br></p><p>error: module file&#39;s minimum deployment target is ios9.3 v9.3<br></p><p>Jane now has a set of bad choices:<br></p><p>1.  She can not use my framework at all<br>2.  She can drop support for &lt;9.3 entirely from her application in order to use my framework<br>3.  She can convince me to support iOS 8, when I don&#39;t want to invest in the QA and test time.<br>4.  She can convince me to set my deployment target to 8, try to find all my public APIs, sprinkle `@available(iOS 9.3, *)` everywhere and hope I didn&#39;t miss any.  Spoiler alert: that&#39;s what I did all afternoon.<br></p><p>This is too hard.  IMO Jane should be able to use my &quot;9.3+&quot; frameworks as easily as she can use Apple&#39;s.<br></p><p>IMO, when Jane imports a &quot;DT 9.3&quot; framework, into her &quot;DT 8.0&quot; application, it should A) import successfully, B) link weakly, and C) have `@availability(9.3, *)` overlayed on the interface.<br></p><p>There may be some subtle additional details because I don&#39;t know exactly the implementation of these features, but that&#39;s the general idea.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/bb446883/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>April  4, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 to this.  It&#39;s really important for getting a sane third-party library<br>ecosystem working.<br></p><p>I assume that the @available annotation generated would also work for<br>watchOS, tvOS, etc. frameworks.  How would it work for non-iOS Swift<br>platforms?  I&#39;m not terribly familiar with how #available works on Linux,<br>but the versioning problem exists there too.<br></p><p>On Mon, Apr 4, 2016 at 4:48 PM, Drew Crawford via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Suppose **Apple** ships a framework that is only supported in iOS 9.3.<br>&gt; As a direct consequence, the framework is only #available in iOS 9.3 or<br>&gt; later.<br>&gt;<br>&gt; Suppose Jane links this framework into her iOS application.  The<br>&gt; deployment target for her application *can be any value*.  She sets the<br>&gt; framework to be weakly linked, and as long as the code that uses the Apple<br>&gt; framework is guarded by a 9.3 availability check, she can deploy back to<br>&gt; 8.0, 7.0, etc.<br>&gt;<br>&gt; Suppose *I* ship a custom framework that I only want to bother supporting<br>&gt; for iOS 9.3 users.  I&#39;m not testing on old OS, I don&#39;t have CI on old OS,<br>&gt; and quite frankly I have no idea if it works.  And I&#39;m not in the habit of<br>&gt; shipping code that wasn&#39;t even tested on my machine.  As a direct<br>&gt; consequence, I set my framework deployment target to 9.3.<br>&gt;<br>&gt; Now Jane links this framework into her &quot;deployment target 8.0&quot;<br>&gt; application.  She weakly links it and uses availability checks just like<br>&gt; she did with the Apple framework.  But this time the compiler says no:<br>&gt;<br>&gt; error: module file&#39;s minimum deployment target is ios9.3 v9.3<br>&gt;<br>&gt;<br>&gt; Jane now has a set of bad choices:<br>&gt;<br>&gt; 1.  She can not use my framework at all<br>&gt; 2.  She can drop support for &lt;9.3 entirely from her application in order<br>&gt; to use my framework<br>&gt; 3.  She can convince me to support iOS 8, when I don&#39;t want to invest in<br>&gt; the QA and test time.<br>&gt; 4.  She can convince me to set my deployment target to 8, try to find all<br>&gt; my public APIs, sprinkle `@available(iOS 9.3, *)` everywhere and hope I<br>&gt; didn&#39;t miss any.  Spoiler alert: that&#39;s what I did all afternoon.<br>&gt;<br>&gt; This is too hard.  IMO Jane should be able to use my &quot;9.3+&quot; frameworks as<br>&gt; easily as she can use Apple&#39;s.<br>&gt;<br>&gt; IMO, when Jane imports a &quot;DT 9.3&quot; framework, into her &quot;DT 8.0&quot;<br>&gt; application, it should A) import successfully, B) link weakly, and C) have<br>&gt; `@availability(9.3, *)` overlayed on the interface.<br>&gt;<br>&gt; There may be some subtle additional details because I don&#39;t know exactly<br>&gt; the implementation of these features, but that&#39;s the general idea.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/c1f5d7be/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April  4, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Apr 4, 2016, at 7:01 PM, Jonathan Tang &lt;jonathan.d.tang at gmail.com&gt; wrote:<br>&gt; <br>&gt; I assume that the @available annotation generated would also work for watchOS, tvOS, etc. frameworks.<br></p><p>Yes<br></p><p>&gt; How would it work for non-iOS Swift platforms?  I&#39;m not terribly familiar with how #available works on Linux, but the versioning problem exists there too.<br></p><p>In my experience, &quot;linux&quot; cannot be listed inside @available.  I think we need to add it.<br></p><p>I&#39;m not sure the &quot;version&quot; of Linux is meaningful (e.g. - interpreted as kernel version? glibc?) but I think clearly &quot;linux&quot; the vaguely-versioned platform should be allowed in an @availability attribute.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/43c74380/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>April  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Strong +1 on this. Been there myself.<br></p><p>A.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 4, 2016, at 4:48 PM, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Suppose *Apple* ships a framework that is only supported in iOS 9.3.  As a direct consequence, the framework is only #available in iOS 9.3 or later.<br>&gt; <br>&gt; Suppose Jane links this framework into her iOS application.  The deployment target for her application *can be any value*.  She sets the framework to be weakly linked, and as long as the code that uses the Apple framework is guarded by a 9.3 availability check, she can deploy back to 8.0, 7.0, etc.<br>&gt; <br>&gt; Suppose *I* ship a custom framework that I only want to bother supporting for iOS 9.3 users.  I&#39;m not testing on old OS, I don&#39;t have CI on old OS, and quite frankly I have no idea if it works.  And I&#39;m not in the habit of shipping code that wasn&#39;t even tested on my machine.  As a direct consequence, I set my framework deployment target to 9.3.<br>&gt; <br>&gt; Now Jane links this framework into her &quot;deployment target 8.0&quot; application.  She weakly links it and uses availability checks just like she did with the Apple framework.  But this time the compiler says no:<br>&gt; <br>&gt; error: module file&#39;s minimum deployment target is ios9.3 v9.3<br>&gt; <br>&gt; Jane now has a set of bad choices:<br>&gt; <br>&gt; 1.  She can not use my framework at all<br>&gt; 2.  She can drop support for &lt;9.3 entirely from her application in order to use my framework<br>&gt; 3.  She can convince me to support iOS 8, when I don&#39;t want to invest in the QA and test time.<br>&gt; 4.  She can convince me to set my deployment target to 8, try to find all my public APIs, sprinkle `@available(iOS 9.3, *)` everywhere and hope I didn&#39;t miss any.  Spoiler alert: that&#39;s what I did all afternoon.<br>&gt; <br>&gt; This is too hard.  IMO Jane should be able to use my &quot;9.3+&quot; frameworks as easily as she can use Apple&#39;s.<br>&gt; <br>&gt; IMO, when Jane imports a &quot;DT 9.3&quot; framework, into her &quot;DT 8.0&quot; application, it should A) import successfully, B) link weakly, and C) have `@availability(9.3, *)` overlayed on the interface.<br></p><p>I would not want this to be implicit behavior: it should be recorded in the source with, e.g.,<br></p><p>	@availability(iOS: 9.3) import YourCustomFramework<br></p><p>so that it is clear that the imported declarations are only available on iOS 9.3 or newer.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160405/36578165/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April  5, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Apr 5, 2016, at 12:06 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; I would not want this to be implicit behavior: it should be recorded in the source with, e.g.,<br>&gt; <br>&gt; 	@availability(iOS: 9.3) import YourCustomFramework<br>&gt; <br>&gt; so that it is clear that the imported declarations are only available on iOS 9.3 or newer.<br>&gt; <br>&gt; 	- Doug<br></p><p>Would you promote using this syntax for the Apple frameworks as well?<br></p><p>A major goal for me is syntax consistency between Apple&#39;s and third-party frameworks.  That way the knowledge of how to use one transfers to the other, and we ensure people with fresh ideas about how to build frameworks are not burdened with educating application developers about &quot;novel&quot; import syntax.<br></p><p>From consulting the table &lt;https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/iPhoneOSFrameworks/iPhoneOSFrameworks.html&gt;, developers with a DT of 7.0 (which is the oldest Swift supports) would need to add e.g. @availability(iOS 8.0, *) import CloudKit for a few frameworks, but that seems like a pretty easy change.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160405/85b12828/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  6, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 5, 2016, at 4:04 PM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 5, 2016, at 12:06 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I would not want this to be implicit behavior: it should be recorded in the source with, e.g.,<br>&gt;&gt; <br>&gt;&gt; 	@availability(iOS: 9.3) import YourCustomFramework<br>&gt;&gt; <br>&gt;&gt; so that it is clear that the imported declarations are only available on iOS 9.3 or newer.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt; <br>&gt; Would you promote using this syntax for the Apple frameworks as well?<br></p><p><br>&gt; A major goal for me is syntax consistency between Apple&#39;s and third-party frameworks.  That way the knowledge of how to use one transfers to the other, and we ensure people with fresh ideas about how to build frameworks are not burdened with educating application developers about &quot;novel&quot; import syntax.<br></p><p>Apple frameworks tend to have ail their various classes and other APIs annotated with availability attributes, so I wouldn’t expect to need this import syntax for any of those. Really, this syntax is a shorthand for “treat the imported library as if the author had put this availability annotation on all of its public APIs”. If your goal is consistency between Apple frameworks and other frameworks, I don’t think this is the way to go.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/3edda037/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>April  6, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Apr 6, 2016 at 9:58 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Apr 5, 2016, at 4:04 PM, Drew Crawford &lt;drew at sealedabstract.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Apr 5, 2016, at 12:06 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;<br>&gt; I would not want this to be implicit behavior: it should be recorded in<br>&gt; the source with, e.g.,<br>&gt;<br>&gt; @availability(iOS: 9.3) import YourCustomFramework<br>&gt;<br>&gt; so that it is clear that the imported declarations are only available on<br>&gt; iOS 9.3 or newer.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; Would you promote using this syntax for the Apple frameworks as well?<br>&gt;<br>&gt;<br>&gt;<br>&gt; A major goal for me is syntax consistency between Apple&#39;s and third-party<br>&gt; frameworks.  That way the knowledge of how to use one transfers to the<br>&gt; other, and we ensure people with fresh ideas about how to build frameworks<br>&gt; are not burdened with educating application developers about &quot;novel&quot; import<br>&gt; syntax.<br>&gt;<br>&gt;<br>&gt; Apple frameworks tend to have ail their various classes and other APIs<br>&gt; annotated with availability attributes, so I wouldn’t expect to need this<br>&gt; import syntax for any of those. Really, this syntax is a shorthand for<br>&gt; “treat the imported library as if the author had put this availability<br>&gt; annotation on all of its public APIs”. If your goal is consistency between<br>&gt; Apple frameworks and other frameworks, I don’t think this is the way to go.<br>&gt;<br>&gt;<br>&gt;<br>Does this mean that the recommended best practice for framework authors is<br>to set the deployment target low and then add an availability attribute for<br>every public symbol?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/f0172d20/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>deployment targets and frameworks</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Apr 6, 2016, at 11:04 AM, Jonathan Tang &lt;jonathan.d.tang at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Wed, Apr 6, 2016 at 9:58 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 5, 2016, at 4:04 PM, Drew Crawford &lt;drew at sealedabstract.com &lt;mailto:drew at sealedabstract.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 5, 2016, at 12:06 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would not want this to be implicit behavior: it should be recorded in the source with, e.g.,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	@availability(iOS: 9.3) import YourCustomFramework<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; so that it is clear that the imported declarations are only available on iOS 9.3 or newer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; Would you promote using this syntax for the Apple frameworks as well?<br>&gt; <br>&gt; <br>&gt;&gt; A major goal for me is syntax consistency between Apple&#39;s and third-party frameworks.  That way the knowledge of how to use one transfers to the other, and we ensure people with fresh ideas about how to build frameworks are not burdened with educating application developers about &quot;novel&quot; import syntax.<br>&gt; <br>&gt; Apple frameworks tend to have ail their various classes and other APIs annotated with availability attributes, so I wouldn’t expect to need this import syntax for any of those. Really, this syntax is a shorthand for “treat the imported library as if the author had put this availability annotation on all of its public APIs”. If your goal is consistency between Apple frameworks and other frameworks, I don’t think this is the way to go.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Does this mean that the recommended best practice for framework authors is to set the deployment target low and then add an availability attribute for every public symbol? <br></p><p>Every public symbol that needs it, sure. Fortunately, Swift tells you when you get it wrong.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160406/e900927a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
