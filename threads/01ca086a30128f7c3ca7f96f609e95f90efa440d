<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Fixing Apple Framework APIs in regard to the Swift Design Guidelines</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 16, 2016 at 03:00:00pm</p></header><div class="content"><p>I’ve only started using the transformed APIs from Apple frameworks that were auto-modified and I’ve found a few cases where the automatic translation doesn’t seem to follow the Swift Design Guidelines. I don’t know how much can be fixed manually, but if it can, it would be forth congregating as a community to prepare a massive list of proportions before the new APIs are set in stone in the fall.<br></p><p>Care to give feedback of what I currently have (I only did CoreMotion):<br></p><p>https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4 &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4&gt;<br></p><p>Thanks!<br>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/01ca440d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Fixing Apple Framework APIs in regard to the Swift Design Guidelines</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 16, 2016 at 04:00:00pm</p></header><div class="content"><p>Inline for ease of read:<br></p><p>CoreMotion<br></p><p> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmmotionactivitymanager&gt;CMMotionActivityManager<br></p><p>Two modifications here:<br></p><p>Remove the starting suffix as it only really pertains to the first argument.<br>Rename the queue label to on to reduce the ambiguity from using two label with the same name (to).<br>- public func queryActivityStarting(from start: Date, to end: Date, to queue: OperationQueue, withHandler handler: CoreMotion.CMMotionActivityQueryHandler)<br>+ public func queryActivity(from start: Date, to end: Date, on queue: OperationQueue, withHandler handler: CoreMotion.CMMotionActivityQueryHandler)<br>Change to mirror the label change on CMMotionActivityManager.queryActivityStarting(from:to:to:withHandler:):<br></p><p>- public func startActivityUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMMotionActivityHandler)<br>+ public func startActivityUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMMotionActivityHandler)<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmmotionmanager&gt;CMMotionManager<br></p><p>Changes to mirror the label change on CMMotionActivityManager.queryActivityStarting(from:to:to:withHandler:):<br></p><p>- public func startAccelerometerUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMAccelerometerHandler)<br>+ public func startAccelerometerUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMAccelerometerHandler)<br>...<br>- public func startGyroUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMGyroHandler)<br>+ public func startGyroUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMGyroHandler)<br>...<br>- public func startMagnetometerUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMMagnetometerHandler)<br>+ public func startMagnetometerUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMMagnetometerHandler)<br>...<br>- public func startDeviceMotionUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMDeviceMotionHandler)<br>+ public func startDeviceMotionUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMDeviceMotionHandler)<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmaltimeter&gt;CMAltimeter<br></p><p>Change to mirror the label change on CMMotionActivityManager.queryActivityStarting(from:to:to:withHandler:):<br></p><p>- public func startRelativeAltitudeUpdates(to queue: OperationQueue, withHandler handler: CoreMotion.CMAltitudeHandler) {<br>+ public func startRelativeAltitudeUpdates(on queue: OperationQueue, withHandler handler: CoreMotion.CMAltitudeHandler) {<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmstepcounter&gt;CMStepCounter<br></p><p>Change to mirror the label change on CMMotionActivityManager.queryActivityStarting(from:to:to:withHandler:):<br></p><p>- public func queryStepCountStarting(from start: Date, to end: Date, to queue: OperationQueue, withHandler handler: CoreMotion.CMStepQueryHandler)<br>+ public func queryStepCountStarting(from start: Date, to end: Date, on queue: OperationQueue, withHandler handler: CoreMotion.CMStepQueryHandler)<br>The following method has two changes:<br></p><p>Change to mirror the label change on CMMotionActivityManager.queryActivityStarting(from:to:to:withHandler:)<br>The updateOn is fairly unclear as use site.<br>- public func startStepCountingUpdates(to queue: OperationQueue, updateOn stepCounts: Int, withHandler handler: CoreMotion.CMStepUpdateHandler)<br>+ public func startStepCountingUpdates(on queue: OperationQueue, updateOnStepCounts stepCounts: Int, withHandler handler: CoreMotion.CMStepUpdateHandler)<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmmagneticfieldcalibrationaccuracy&gt;CMMagneticFieldCalibrationAccuracy<br></p><p>The type is better represented as an enum.<br></p><p>- public struct CMMagneticFieldCalibrationAccuracy : RawRepresentable, Equatable {<br>-     public init(_ rawValue: Int32)<br>-     public init(rawValue: Int32)<br>-     public var rawValue: Int32<br>- }<br>- public var CMMagneticFieldCalibrationAccuracyUncalibrated: CMMagneticFieldCalibrationAccuracy { get }<br>- public var CMMagneticFieldCalibrationAccuracyLow: CMMagneticFieldCalibrationAccuracy { get }<br>- public var CMMagneticFieldCalibrationAccuracyMedium: CMMagneticFieldCalibrationAccuracy { get }<br>- public var CMMagneticFieldCalibrationAccuracyHigh: CMMagneticFieldCalibrationAccuracy { get }<br>+ public enum CMMagneticFieldCalibrationAccuracy: Int32 {<br>+     case uncalibrated = -1,<br>+     case low<br>+     case medium<br>+     case high<br>+ }<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmerror&gt;CMError<br></p><p>The type is better represented as an enum conforming to ErrorProtocol:<br></p><p>- public struct CMError : RawRepresentable, Equatable {<br>-     public init(_ rawValue: UInt32)<br>-     public init(rawValue: UInt32)<br>-     public var rawValue: UInt32<br>- }<br>- public var CMErrorNULL: CMError { get }<br>- public var CMErrorDeviceRequiresMovement: CMError { get }<br>- public var CMErrorTrueNorthNotAvailable: CMError { get }<br>- public var CMErrorUnknown: CMError { get }<br>- public var CMErrorMotionActivityNotAvailable: CMError { get }<br>- public var CMErrorMotionActivityNotAuthorized: CMError { get }<br>- public var CMErrorMotionActivityNotEntitled: CMError { get }<br>- public var CMErrorInvalidParameter: CMError { get }<br>- public var CMErrorInvalidAction: CMError { get }<br>- public var CMErrorNotAvailable: CMError { get }<br>- public var CMErrorNotEntitled: CMError { get }<br>- public var CMErrorNotAuthorized: CMError { get }<br>+ public enum CMError : UInt32, ErrorProtocol {<br>+     case null<br>+     case requiresMovement<br>+     case trueNorthNotAvailable<br>+     case unknown<br>+     case activityNotAvailable<br>+     case activityNotAuthorized<br>+     case activityNotEntitled<br>+     case invalidParameter<br>+     case invalidAction<br>+     case notAvailable<br>+     case notEntitled<br>+     case notAuthorized<br>+ }<br> &lt;https://gist.github.com/hartbit/07b5684814e2adc2d0185138465a60b4#cmmotionactivity&gt;CMMotionActivity<br></p><p>Boolean methods and properties that should read as assertions:<br></p><p>- public var unknown: Bool { get }<br>+ public var isUnknown: Bool { get }<br>...<br>- public var stationary: Bool { get }<br>+ public var isStationary: Bool { get }<br>...<br>- public var walking: Bool { get }<br>+ public var isWalking: Bool { get }<br>...<br>- public var running: Bool { get }<br>+ public var isRunning: Bool { get }<br>...<br>- public var automotive: Bool { get }<br>+ public var isAutomotive: Bool { get }<br>...<br>- public var cycling: Bool { get }<br>+ public var isCycling: Bool { get }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160616/1e65b2c1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Fixing Apple Framework APIs in regard to the Swift Design Guidelines</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 18, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 16, 2016, at 3:57 PM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve only started using the transformed APIs from Apple frameworks that were auto-modified and I’ve found a few cases where the automatic translation doesn’t seem to follow the Swift Design Guidelines. I don’t know how much can be fixed manually, but if it can, it would be forth congregating as a community to prepare a massive list of proportions before the new APIs are set in stone in the fall.<br></p><p>Hi David,<br></p><p>swift-evolution isn’t the right process for proposing changes to Apple frameworks, but you raise good points, and I really value the feedback.  <br></p><p>If you file a radar with bugreporter.apple.com &lt;http://bugreporter.apple.com/&gt; and let us know the radar #, we will be happy to escalate this with the team in question.  Thank you!<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160618/e5fc437f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Fixing Apple Framework APIs in regard to the Swift Design Guidelines</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 18, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; swift-evolution isn’t the right process for proposing changes to Apple frameworks, but you raise good points, and I really value the feedback.  <br>&gt; <br>&gt; If you file a radar with bugreporter.apple.com and let us know the radar #, we will be happy to escalate this with the team in question.  Thank you!<br></p><p>Oh, I&#39;ve got a list of radars to file that&#39;s as long as my arm.<br></p><p>To clarify: Radar is the best place to file imperfect APIs in random frameworks. Where is the best place to bring up:<br></p><p>1. Migrator issues?<br></p><p>2. Foundation issues (with the new value types)?<br></p><p>3. Foundation issues caused by evolution-proposed features behaving in ways that are problematic for certain uses Foundation puts them to? (Specifically, symbols marked with NSNotificationName get imported as constants on Notification.Name by default due to the design of SE-0033; you&#39;d probably prefer they be prefix-matched and inserted into the type they belong to.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Fixing Apple Framework APIs in regard to the Swift Design Guidelines</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 18, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 18, 2016, at 10:14 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; swift-evolution isn’t the right process for proposing changes to Apple frameworks, but you raise good points, and I really value the feedback.  <br>&gt;&gt; <br>&gt;&gt; If you file a radar with bugreporter.apple.com and let us know the radar #, we will be happy to escalate this with the team in question.  Thank you!<br>&gt; <br>&gt; Oh, I&#39;ve got a list of radars to file that&#39;s as long as my arm.<br>&gt; <br>&gt; To clarify: Radar is the best place to file imperfect APIs in random frameworks. Where is the best place to bring up:<br>&gt; <br>&gt; 1. Migrator issues?<br></p><p>swift-users or swift-dev (if you’re trying to improve the migrator and have questions about it).<br></p><p>&gt; <br>&gt; 2. Foundation issues (with the new value types)?<br>&gt; 3. Foundation issues caused by evolution-proposed features behaving in ways that are problematic for certain uses Foundation puts them to? (Specifically, symbols marked with NSNotificationName get imported as constants on Notification.Name by default due to the design of SE-0033; you&#39;d probably prefer they be prefix-matched and inserted into the type they belong to.)<br></p><p>I’d ask the folks on swift-corelibs-dev what they prefer.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
