<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1fffbbc1521737493f5a7d8f7859455?s=50"></div><header><strong>[Pitch] #if swift version with third version component</strong> from <string>Richard Wei</string> &lt;rxrwei at gmail.com&gt;<p>October 22, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>Foundation in 3.0-RELEASE didn&#39;t fully resolve the renaming in SE-0086, so we have `RegularExpression` on Linux and `NSRegularExpression` on macOS. The naming is now unified in Swift 3.0.1, but there doesn’t seem to be a possible way to resolve the code breaking change. Consider the example below:<br></p><p>Currently the following code is only compatible with 3.0-RELEASE, because RegularExpression on Linux becomes NSRegularExpression in 3.0.1, while we cannot use `#if` to differentiate between 3.0 and 3.0.1.<br></p><p>  #if !os(macOS)<br>  let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>  #else<br>  let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>  #endif<br></p><p>Proposed solution:<br></p><p>If `#if swift(&gt;=)` can take the third version component, we can make the code compatible with 3.0.1 by the following:<br></p><p>  #if os(macOS) || swift(&gt;=3.0.1)<br>  let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])  <br>  #else<br>  let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>  #endif<br></p><p>Additionally, we can consider supporting the == operator, so that checking only the version with inconsistent naming is sufficient:<br></p><p>  #if !os(macOS) &amp;&amp; swift(==3.0.0)<br>  let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>  #else<br>  let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>  #endif<br></p><p>Impact on existing code:<br></p><p>`#if swift(&gt;=X.X.X)` and `#if swift(==X.X.X)` are purely additive.<br></p><p>-Richard<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161022/db8068b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] #if swift version with third version component</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>October 23, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Oct 22, 2016, at 2:44 PM, Richard Wei via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Foundation in 3.0-RELEASE didn&#39;t fully resolve the renaming in SE-0086, so we have `RegularExpression` on Linux and `NSRegularExpression` on macOS. The naming is now unified in Swift 3.0.1, but there doesn’t seem to be a possible way to resolve the code breaking change. Consider the example below:<br></p><p>+1.  Assuming there are no major objections, I don’t think this needs a full evolution cycle.  This seems like a bug fix to me.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; Currently the following code is only compatible with 3.0-RELEASE, because RegularExpression on Linux becomes NSRegularExpression in 3.0.1, while we cannot use `#if` to differentiate between 3.0 and 3.0.1.<br>&gt; <br>&gt;   #if !os(macOS)<br>&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;   #else<br>&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;   #endif<br>&gt; <br>&gt; Proposed solution:<br>&gt; <br>&gt; If `#if swift(&gt;=)` can take the third version component, we can make the code compatible with 3.0.1 by the following:<br>&gt; <br>&gt;   #if os(macOS) || swift(&gt;=3.0.1)<br>&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])  <br>&gt;   #else<br>&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;   #endif<br>&gt; <br>&gt; Additionally, we can consider supporting the == operator, so that checking only the version with inconsistent naming is sufficient:<br>&gt; <br>&gt;   #if !os(macOS) &amp;&amp; swift(==3.0.0)<br>&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;   #else<br>&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;   #endif<br>&gt; <br>&gt; Impact on existing code:<br>&gt; <br>&gt; `#if swift(&gt;=X.X.X)` and `#if swift(==X.X.X)` are purely additive.<br>&gt; <br>&gt; -Richard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161023/851770c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23bb59b802aac41afdf8ffffae1040d5?s=50"></div><header><strong>[Pitch] #if swift version with third version component</strong> from <string>Alex Martini</string> &lt;amartini at apple.com&gt;<p>October 24, 2016 at 09:00:00am</p></header><div class="content"><p>When you file the bug, can you post the Jira number?  The grammar in TSPL will also need to be changed to accept three version components.<br></p><p>https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/swift-version<br></p><p>Thanks!<br>— Alex<br></p><p><br>&gt; On Oct 23, 2016, at 9:25 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 22, 2016, at 2:44 PM, Richard Wei via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; Foundation in 3.0-RELEASE didn&#39;t fully resolve the renaming in SE-0086, so we have `RegularExpression` on Linux and `NSRegularExpression` on macOS. The naming is now unified in Swift 3.0.1, but there doesn’t seem to be a possible way to resolve the code breaking change. Consider the example below:<br>&gt; <br>&gt; +1.  Assuming there are no major objections, I don’t think this needs a full evolution cycle.  This seems like a bug fix to me.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Currently the following code is only compatible with 3.0-RELEASE, because RegularExpression on Linux becomes NSRegularExpression in 3.0.1, while we cannot use `#if` to differentiate between 3.0 and 3.0.1.<br>&gt;&gt; <br>&gt;&gt;   #if !os(macOS)<br>&gt;&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;&gt;   #else<br>&gt;&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;&gt;   #endif<br>&gt;&gt; <br>&gt;&gt; Proposed solution:<br>&gt;&gt; <br>&gt;&gt; If `#if swift(&gt;=)` can take the third version component, we can make the code compatible with 3.0.1 by the following:<br>&gt;&gt; <br>&gt;&gt;   #if os(macOS) || swift(&gt;=3.0.1)<br>&gt;&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])  <br>&gt;&gt;   #else<br>&gt;&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;&gt;   #endif<br>&gt;&gt; <br>&gt;&gt; Additionally, we can consider supporting the == operator, so that checking only the version with inconsistent naming is sufficient:<br>&gt;&gt; <br>&gt;&gt;   #if !os(macOS) &amp;&amp; swift(==3.0.0)<br>&gt;&gt;   let regex = try RegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;&gt;   #else<br>&gt;&gt;   let regex = try NSRegularExpression(pattern: pattern, options: [ .dotMatchesLineSeparators ])<br>&gt;&gt;   #endif<br>&gt;&gt; <br>&gt;&gt; Impact on existing code:<br>&gt;&gt; <br>&gt;&gt; `#if swift(&gt;=X.X.X)` and `#if swift(==X.X.X)` are purely additive.<br>&gt;&gt; <br>&gt;&gt; -Richard<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161024/07e68884/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
