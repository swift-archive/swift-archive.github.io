<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>April 14, 2016 at 08:00:00am</p></header><div class="content"><p>Howdy,<br></p><p>I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>give it one more shot.<br></p><p>Has anyone out there tried building, from scratch, the Swift 3.0 package on<br>Ubuntu?  The compile, link, packaging steps all complete successfully, but<br>then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>properly:<br></p><p>  2&gt; import Glibc<br>warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>#sourceLocation instead<br>#line 2 &quot;repl.swift&quot;<br>^~~~~<br>#sourceLocation<br></p><p>warning: repl.swift:3:1: warning: #line directive is deprecated, please use<br>#sourceLocation instead<br>#line<br>^~~~~<br>#sourceLocation<br></p><p>error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>import Glibc<br></p><p>This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>greenfield VM with all of the prerequisites/clang-3.6 installed.<br></p><p>Stumped on this one and was just curious if anyone can reproduce.<br></p><p>Thanks,<br>Joe<br></p><p><br></p><p>---<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160414/bcf6dd93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt; Howdy,<br>&gt;<br>&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought<br>&gt; I&#39;d give it one more shot.<br>&gt;<br>&gt; Has anyone out there tried building, from scratch, the Swift 3.0<br>&gt; package on Ubuntu?  The compile, link, packaging steps all complete<br>&gt; successfully, but then the repl/test-repl-glibc.py fails.  The failure<br>&gt; is that the REPL doesn&#39;t interact (the underlying script is using<br>&gt; pexpect to send/expect) properly:<br>&gt;<br>&gt; 2&gt; import Glibc<br>&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please<br>&gt; use #sourceLocation instead<br>&gt; #line 2 &quot;repl.swift&quot;<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; warning: repl.swift:3:1: warning: #line directive is deprecated,<br>&gt; please use #sourceLocation instead<br>&gt; #line<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; import Glibc<br>&gt;<br>&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which<br>&gt; is a greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt;<br>&gt; Stumped on this one and was just curious if anyone can reproduce.<br> <br>I can also reproduce. I actually broght this up yesterday too (just on a<br>different list) [1]. I suggest you go vote for SR-1109 [2] which is the<br>bug report for this issue.<br> <br>I think this is show stopper. Not for the REPL break but because it also<br>breaks the debugger on Linux as well.<br> <br>Right now I&#39;m trying to bisect the repos to see which commit(s?) might<br>have introduced this regression. Kate Stone mentioned that she thinks<br>this issue was introduced sometime after the 3-16 snapshot. I&#39;m trying<br>to corroborate that.<br> <br>[1] https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>[2] https://bugs.swift.org/browse/SR-1109<br> <br>&gt;<br>&gt; Thanks,<br>&gt; Joe<br>&gt;<br>&gt;<br>&gt;<br>&gt; ---<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br>&gt; _________________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160414/b9e4c1ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>reproduce as well.<br></p><p>I think now its clear why the 14.04 and 15.10 packaging tests are passing,<br>and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if<br>you look at the console log for the 14.04 test:<br>https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br></p><p>lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related<br>tests<br></p><p>Perhaps pexpect should be added to the CI server so these tests can begin<br>failing properly.<br></p><p><br>On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt;<br>&gt; Howdy,<br>&gt;<br>&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>&gt; give it one more shot.<br>&gt;<br>&gt; Has anyone out there tried building, from scratch, the Swift 3.0 package<br>&gt; on Ubuntu?  The compile, link, packaging steps all complete successfully,<br>&gt; but then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt; doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>&gt; properly:<br>&gt;<br>&gt;   2&gt; import Glibc<br>&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt; #sourceLocation instead<br>&gt; #line 2 &quot;repl.swift&quot;<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please<br>&gt; use #sourceLocation instead<br>&gt; #line<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; import Glibc<br>&gt;<br>&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>&gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt;<br>&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt;<br>&gt;<br>&gt; I can also reproduce. I actually broght this up yesterday too (just on a<br>&gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug<br>&gt; report for this issue.<br>&gt;<br>&gt; I think this is show stopper. Not for the REPL break but because it also<br>&gt; breaks the debugger on Linux as well.<br>&gt;<br>&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might<br>&gt; have introduced this regression. Kate Stone mentioned that she thinks this<br>&gt; issue was introduced sometime after the 3-16 snapshot. I&#39;m trying to<br>&gt; corroborate that.<br>&gt;<br>&gt; [1]<br>&gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt;<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; Joe<br>&gt;<br>&gt;<br>&gt;<br>&gt; ---<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br>&gt; *_______________________________________________*<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br>---<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160414/e8cccc4c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>+swift-lldb-dev<br></p><p>&gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to reproduce as well.  <br>&gt; <br>&gt; I think now its clear why the 14.04 and 15.10 packaging tests are passing, and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if you look at the console log for the 14.04 test: https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText &lt;https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText&gt;<br>&gt; <br>&gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related tests<br>&gt; <br>&gt; Perhaps pexpect should be added to the CI server so these tests can begin failing properly.<br>&gt; <br>&gt; <br>&gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt;&gt; Howdy,<br>&gt;&gt;  <br>&gt;&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d give it one more shot.<br>&gt;&gt;  <br>&gt;&gt; Has anyone out there tried building, from scratch, the Swift 3.0 package on Ubuntu?  The compile, link, packaging steps all complete successfully, but then the repl/test-repl-glibc.py fails.  The failure is that the REPL doesn&#39;t interact (the underlying script is using pexpect to send/expect) properly:<br>&gt;&gt;  <br>&gt;&gt;   2&gt; import Glibc <br>&gt;&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use #sourceLocation instead<br>&gt;&gt; #line 2 &quot;repl.swift&quot;<br>&gt;&gt; ^~~~~<br>&gt;&gt; #sourceLocation<br>&gt;&gt;  <br>&gt;&gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please use #sourceLocation instead<br>&gt;&gt; #line<br>&gt;&gt; ^~~~~<br>&gt;&gt; #sourceLocation<br>&gt;&gt;  <br>&gt;&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt;&gt; import Glibc<br>&gt;&gt;  <br>&gt;&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt;&gt;  <br>&gt;&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt;  <br>&gt; I can also reproduce. I actually broght this up yesterday too (just on a different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug report for this issue.<br>&gt;  <br>&gt; I think this is show stopper. Not for the REPL break but because it also breaks the debugger on Linux as well.<br>&gt;  <br>&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might have introduced this regression. Kate Stone mentioned that she thinks this issue was introduced sometime after the 3-16 snapshot. I&#39;m trying to corroborate that. <br>&gt;  <br>&gt; [1] https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html &lt;https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html&gt;<br>&gt; [2] https://bugs.swift.org/browse/SR-1109 &lt;https://bugs.swift.org/browse/SR-1109&gt; <br>&gt;  <br>&gt;&gt;  <br>&gt;&gt; Thanks,<br>&gt;&gt; Joe<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; ---<br>&gt;&gt; http://dev.iachieved.it/iachievedit/ &lt;http://dev.iachieved.it/iachievedit/&gt;<br>&gt;&gt; @iachievedit<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; ---<br>&gt; http://dev.iachieved.it/iachievedit/ &lt;http://dev.iachieved.it/iachievedit/&gt;<br>&gt; @iachievedit<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160414/749c9bc7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 14, 2016 at 05:00:00pm</p></header><div class="content"><p>I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down to<br>this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the<br>issue, SR-1109, to include this information.<br> <br>c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>commit c6121d56b19305cf59148d46af54c06b771f3180<br>Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>Date:   Wed Mar 16 13:29:42 2016 -0400<br> <br>[Un-revert][Glibc] Configure modulemap for target, not host<br>    <br>This reverts commit f2154ee94d, which reverted 04e1cd5bda. The original<br>commit needed to be reverted because of an issue in which install<br>targets were added to OS X builds that did not target Linux. This<br>addresses that issue by guarding all the Linux-only CMake logic with a<br>check for the SDK being built.<br> <br>:040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>:90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>:040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>:1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>:040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>:41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br> <br>[1] https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>[2] https://github.com/apple/swift/pull/1704<br> <br> <br>On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt; +swift-lldb-dev<br>&gt;<br>&gt;&gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-<br>&gt;&gt; dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt;&gt; reproduce as well.<br>&gt;&gt;<br>&gt;&gt; I think now its clear why the 14.04 and 15.10 packaging tests are<br>&gt;&gt; passing, and that&#39;s because they aren&#39;t running the tests that<br>&gt;&gt; leverage pexpect, if you look at the console log for the 14.04 test:<br>&gt;&gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt;&gt;<br>&gt;&gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping<br>&gt;&gt; related tests<br>&gt;&gt;<br>&gt;&gt; Perhaps pexpect should be added to the CI server so these tests can<br>&gt;&gt; begin failing properly.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev &lt;swift-<br>&gt;&gt; dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; __<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt;&gt;&gt;&gt; Howdy,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I<br>&gt;&gt;&gt;&gt; thought I&#39;d give it one more shot.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Has anyone out there tried building, from scratch, the Swift 3.0<br>&gt;&gt;&gt;&gt; package on Ubuntu?  The compile, link, packaging steps all complete<br>&gt;&gt;&gt;&gt; successfully, but then the repl/test-repl-glibc.py fails.  The<br>&gt;&gt;&gt;&gt; failure is that the REPL doesn&#39;t interact (the underlying script is<br>&gt;&gt;&gt;&gt; using pexpect to send/expect) properly:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2&gt; import Glibc<br>&gt;&gt;&gt;&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please<br>&gt;&gt;&gt;&gt; use #sourceLocation instead<br>&gt;&gt;&gt;&gt; #line 2 &quot;repl.swift&quot;<br>&gt;&gt;&gt;&gt; ^~~~~<br>&gt;&gt;&gt;&gt; #sourceLocation<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; warning: repl.swift:3:1: warning: #line directive is deprecated,<br>&gt;&gt;&gt;&gt; please use #sourceLocation instead<br>&gt;&gt;&gt;&gt; #line<br>&gt;&gt;&gt;&gt; ^~~~~<br>&gt;&gt;&gt;&gt; #sourceLocation<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt;&gt; import Glibc<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is occurring on two separate Ubuntu 14.04 systems, one of<br>&gt;&gt;&gt;&gt; which is a greenfield VM with all of the prerequisites/clang-3.6<br>&gt;&gt;&gt;&gt; installed.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I can also reproduce. I actually broght this up yesterday too (just<br>&gt;&gt;&gt; on a different list) [1]. I suggest you go vote for SR-1109 [2]<br>&gt;&gt;&gt; which is the bug report for this issue.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think this is show stopper. Not for the REPL break but because it<br>&gt;&gt;&gt; also breaks the debugger on Linux as well.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?)<br>&gt;&gt;&gt; might have introduced this regression. Kate Stone mentioned that she<br>&gt;&gt;&gt; thinks this issue was introduced sometime after the 3-16 snapshot.<br>&gt;&gt;&gt; I&#39;m trying to corroborate that.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [1] https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt;&gt;&gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Joe<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ---<br>&gt;&gt;&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt;&gt;&gt;&gt; @iachievedit<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _________________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; ---<br>&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt;&gt; @iachievedit<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160414/0c5a871c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>April 14, 2016 at 02:00:00pm</p></header><div class="content"><p>+Brian<br></p><p>On Thu, Apr 14, 2016 at 2:46 PM, Ryan Lovelett via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down to<br>&gt; this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the issue,<br>&gt; SR-1109, to include this information.<br>&gt;<br>&gt; c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>&gt; commit c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>&gt; Date:   Wed Mar 16 13:29:42 2016 -0400<br>&gt;<br>&gt;     [Un-revert][Glibc] Configure modulemap for target, not host<br>&gt;<br>&gt;     This reverts commit f2154ee94d, which reverted 04e1cd5bda. The original<br>&gt;     commit needed to be reverted because of an issue in which install<br>&gt;     targets were added to OS X builds that did not target Linux. This<br>&gt;     addresses that issue by guarding all the Linux-only CMake logic with a<br>&gt;     check for the SDK being built.<br>&gt;<br>&gt; :040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>&gt; 90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>&gt; :040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>&gt; 1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>&gt; :040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>&gt; 41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br>&gt;<br>&gt; [1]<br>&gt; https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; [2] https://github.com/apple/swift/pull/1704<br>&gt;<br>&gt;<br>&gt; On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt;<br>&gt; +swift-lldb-dev<br>&gt;<br>&gt;<br>&gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt; reproduce as well.<br>&gt;<br>&gt; I think now its clear why the 14.04 and 15.10 packaging tests are passing,<br>&gt; and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if<br>&gt; you look at the console log for the 14.04 test:<br>&gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt;<br>&gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related<br>&gt; tests<br>&gt;<br>&gt; Perhaps pexpect should be added to the CI server so these tests can begin<br>&gt; failing properly.<br>&gt;<br>&gt;<br>&gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt;<br>&gt; Howdy,<br>&gt;<br>&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>&gt; give it one more shot.<br>&gt;<br>&gt; Has anyone out there tried building, from scratch, the Swift 3.0 package on<br>&gt; Ubuntu?  The compile, link, packaging steps all complete successfully, but<br>&gt; then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt; doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>&gt; properly:<br>&gt;<br>&gt;   2&gt; import Glibc<br>&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt; #sourceLocation instead<br>&gt; #line 2 &quot;repl.swift&quot;<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please use<br>&gt; #sourceLocation instead<br>&gt; #line<br>&gt; ^~~~~<br>&gt; #sourceLocation<br>&gt;<br>&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; import Glibc<br>&gt;<br>&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>&gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt;<br>&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt;<br>&gt;<br>&gt;<br>&gt; I can also reproduce. I actually broght this up yesterday too (just on a<br>&gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug<br>&gt; report for this issue.<br>&gt;<br>&gt; I think this is show stopper. Not for the REPL break but because it also<br>&gt; breaks the debugger on Linux as well.<br>&gt;<br>&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might have<br>&gt; introduced this regression. Kate Stone mentioned that she thinks this issue<br>&gt; was introduced sometime after the 3-16 snapshot. I&#39;m trying to corroborate<br>&gt; that.<br>&gt;<br>&gt; [1]<br>&gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; Joe<br>&gt;<br>&gt;<br>&gt;<br>&gt; ---<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; ---<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 15, 2016 at 11:00:00am</p></header><div class="content"><p>I&#39;ve tried reverting c6121d56b19305cf59148d46af54c06b771f3180 just to<br>see if doing that will restore functionality to lldb/repl.<br></p><p>Unfortunately too many things have changed in the build system since<br>that commit for a revert to make sense anymore.<br></p><p>Can anyone provide documentation/explain the mechanics of what happens<br>when I type &quot;import Glibc&quot; into the REPL/lldb?<br></p><p>On Thu, Apr 14, 2016, at 05:47 PM, Dmitri Gribenko wrote:<br>&gt; +Brian<br>&gt; <br>&gt; On Thu, Apr 14, 2016 at 2:46 PM, Ryan Lovelett via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down to<br>&gt; &gt; this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the issue,<br>&gt; &gt; SR-1109, to include this information.<br>&gt; &gt;<br>&gt; &gt; c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>&gt; &gt; commit c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt; Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>&gt; &gt; Date:   Wed Mar 16 13:29:42 2016 -0400<br>&gt; &gt;<br>&gt; &gt;     [Un-revert][Glibc] Configure modulemap for target, not host<br>&gt; &gt;<br>&gt; &gt;     This reverts commit f2154ee94d, which reverted 04e1cd5bda. The original<br>&gt; &gt;     commit needed to be reverted because of an issue in which install<br>&gt; &gt;     targets were added to OS X builds that did not target Linux. This<br>&gt; &gt;     addresses that issue by guarding all the Linux-only CMake logic with a<br>&gt; &gt;     check for the SDK being built.<br>&gt; &gt;<br>&gt; &gt; :040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>&gt; &gt; 90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>&gt; &gt; :040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>&gt; &gt; 1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>&gt; &gt; :040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>&gt; &gt; 41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br>&gt; &gt;<br>&gt; &gt; [1]<br>&gt; &gt; https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt; [2] https://github.com/apple/swift/pull/1704<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt; &gt;<br>&gt; &gt; +swift-lldb-dev<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; &gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt; &gt; reproduce as well.<br>&gt; &gt;<br>&gt; &gt; I think now its clear why the 14.04 and 15.10 packaging tests are passing,<br>&gt; &gt; and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if<br>&gt; &gt; you look at the console log for the 14.04 test:<br>&gt; &gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt; &gt;<br>&gt; &gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related<br>&gt; &gt; tests<br>&gt; &gt;<br>&gt; &gt; Perhaps pexpect should be added to the CI server so these tests can begin<br>&gt; &gt; failing properly.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev<br>&gt; &gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt; &gt;<br>&gt; &gt; Howdy,<br>&gt; &gt;<br>&gt; &gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>&gt; &gt; give it one more shot.<br>&gt; &gt;<br>&gt; &gt; Has anyone out there tried building, from scratch, the Swift 3.0 package on<br>&gt; &gt; Ubuntu?  The compile, link, packaging steps all complete successfully, but<br>&gt; &gt; then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt; &gt; doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>&gt; &gt; properly:<br>&gt; &gt;<br>&gt; &gt;   2&gt; import Glibc<br>&gt; &gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt; &gt; #sourceLocation instead<br>&gt; &gt; #line 2 &quot;repl.swift&quot;<br>&gt; &gt; ^~~~~<br>&gt; &gt; #sourceLocation<br>&gt; &gt;<br>&gt; &gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please use<br>&gt; &gt; #sourceLocation instead<br>&gt; &gt; #line<br>&gt; &gt; ^~~~~<br>&gt; &gt; #sourceLocation<br>&gt; &gt;<br>&gt; &gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; &gt; import Glibc<br>&gt; &gt;<br>&gt; &gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>&gt; &gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt; &gt;<br>&gt; &gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I can also reproduce. I actually broght this up yesterday too (just on a<br>&gt; &gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug<br>&gt; &gt; report for this issue.<br>&gt; &gt;<br>&gt; &gt; I think this is show stopper. Not for the REPL break but because it also<br>&gt; &gt; breaks the debugger on Linux as well.<br>&gt; &gt;<br>&gt; &gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might have<br>&gt; &gt; introduced this regression. Kate Stone mentioned that she thinks this issue<br>&gt; &gt; was introduced sometime after the 3-16 snapshot. I&#39;m trying to corroborate<br>&gt; &gt; that.<br>&gt; &gt;<br>&gt; &gt; [1]<br>&gt; &gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt; &gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thanks,<br>&gt; &gt; Joe<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; ---<br>&gt; &gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt; @iachievedit<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; ---<br>&gt; &gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt; @iachievedit<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-dev mailing list<br>&gt; &gt; swift-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>April 15, 2016 at 11:00:00am</p></header><div class="content"><p>+Mishal, while Ryan et al are looking at the broken REPL, would it make<br>sense to update the CI servers with the Python pexpect module so that the<br>test-repl-glibc.py will fail the build?<br></p><p>On Fri, Apr 15, 2016 at 10:19 AM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt;<br>wrote:<br></p><p>&gt; I&#39;ve tried reverting c6121d56b19305cf59148d46af54c06b771f3180 just to<br>&gt; see if doing that will restore functionality to lldb/repl.<br>&gt;<br>&gt; Unfortunately too many things have changed in the build system since<br>&gt; that commit for a revert to make sense anymore.<br>&gt;<br>&gt; Can anyone provide documentation/explain the mechanics of what happens<br>&gt; when I type &quot;import Glibc&quot; into the REPL/lldb?<br>&gt;<br>&gt; On Thu, Apr 14, 2016, at 05:47 PM, Dmitri Gribenko wrote:<br>&gt; &gt; +Brian<br>&gt; &gt;<br>&gt; &gt; On Thu, Apr 14, 2016 at 2:46 PM, Ryan Lovelett via swift-dev<br>&gt; &gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; &gt; I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down<br>&gt; to<br>&gt; &gt; &gt; this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the<br>&gt; issue,<br>&gt; &gt; &gt; SR-1109, to include this information.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>&gt; &gt; &gt; commit c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt; &gt; Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>&gt; &gt; &gt; Date:   Wed Mar 16 13:29:42 2016 -0400<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;     [Un-revert][Glibc] Configure modulemap for target, not host<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;     This reverts commit f2154ee94d, which reverted 04e1cd5bda. The<br>&gt; original<br>&gt; &gt; &gt;     commit needed to be reverted because of an issue in which install<br>&gt; &gt; &gt;     targets were added to OS X builds that did not target Linux. This<br>&gt; &gt; &gt;     addresses that issue by guarding all the Linux-only CMake logic<br>&gt; with a<br>&gt; &gt; &gt;     check for the SDK being built.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; :040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>&gt; &gt; &gt; 90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>&gt; &gt; &gt; :040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>&gt; &gt; &gt; 1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>&gt; &gt; &gt; :040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>&gt; &gt; &gt; 41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; [1]<br>&gt; &gt; &gt;<br>&gt; https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt; &gt; [2] https://github.com/apple/swift/pull/1704<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; +swift-lldb-dev<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt;<br>&gt; &gt; &gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt; &gt; &gt; reproduce as well.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I think now its clear why the 14.04 and 15.10 packaging tests are<br>&gt; passing,<br>&gt; &gt; &gt; and that&#39;s because they aren&#39;t running the tests that leverage<br>&gt; pexpect, if<br>&gt; &gt; &gt; you look at the console log for the 14.04 test:<br>&gt; &gt; &gt;<br>&gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping<br>&gt; related<br>&gt; &gt; &gt; tests<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Perhaps pexpect should be added to the CI server so these tests can<br>&gt; begin<br>&gt; &gt; &gt; failing properly.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev<br>&gt; &gt; &gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Howdy,<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought<br>&gt; I&#39;d<br>&gt; &gt; &gt; give it one more shot.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Has anyone out there tried building, from scratch, the Swift 3.0<br>&gt; package on<br>&gt; &gt; &gt; Ubuntu?  The compile, link, packaging steps all complete successfully,<br>&gt; but<br>&gt; &gt; &gt; then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt; &gt; &gt; doesn&#39;t interact (the underlying script is using pexpect to<br>&gt; send/expect)<br>&gt; &gt; &gt; properly:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;   2&gt; import Glibc<br>&gt; &gt; &gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt; &gt; &gt; #sourceLocation instead<br>&gt; &gt; &gt; #line 2 &quot;repl.swift&quot;<br>&gt; &gt; &gt; ^~~~~<br>&gt; &gt; &gt; #sourceLocation<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; warning: repl.swift:3:1: warning: #line directive is deprecated,<br>&gt; please use<br>&gt; &gt; &gt; #sourceLocation instead<br>&gt; &gt; &gt; #line<br>&gt; &gt; &gt; ^~~~~<br>&gt; &gt; &gt; #sourceLocation<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; &gt; &gt; import Glibc<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; This is occurring on two separate Ubuntu 14.04 systems, one of which<br>&gt; is a<br>&gt; &gt; &gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I can also reproduce. I actually broght this up yesterday too (just on<br>&gt; a<br>&gt; &gt; &gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is<br>&gt; the bug<br>&gt; &gt; &gt; report for this issue.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I think this is show stopper. Not for the REPL break but because it<br>&gt; also<br>&gt; &gt; &gt; breaks the debugger on Linux as well.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might<br>&gt; have<br>&gt; &gt; &gt; introduced this regression. Kate Stone mentioned that she thinks this<br>&gt; issue<br>&gt; &gt; &gt; was introduced sometime after the 3-16 snapshot. I&#39;m trying to<br>&gt; corroborate<br>&gt; &gt; &gt; that.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; [1]<br>&gt; &gt; &gt;<br>&gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt; &gt; &gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; Thanks,<br>&gt; &gt; &gt; Joe<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; ---<br>&gt; &gt; &gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt; &gt; @iachievedit<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; ---<br>&gt; &gt; &gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt; &gt; @iachievedit<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-dev mailing list<br>&gt; &gt; &gt; swift-dev at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>---<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160415/e7a59c91/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/52cd4e8dbbba27ff1ea5fa122af8bd56?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Jim Ingham</string> &lt;jingham at apple.com&gt;<p>April 15, 2016 at 03:00:00pm</p></header><div class="content"><p>The REPL makes a swift compiler, in which it runs your code (obvious...)  So when you do &quot;import &lt;some_module&gt;&quot; in the REPL, we need to load that module into our swift compiler. In the lldb REPL that is managed in SwiftExpressionParser::PerformAutoImport.  This will call lldb&#39;s SwiftASTContext::FindAndLoadModule -&gt; SwiftASTContext::LoadModule, which will then do three things: find &amp; tell the swift compiler about the .swiftmodule, dlopen any underlying libraries the .swiftmodule needs.  Finally, if the module imported C/ObjC code, the swift module doesn&#39;t describe the types coming from C but relies on types being in a clang module that can be imported into Swift.  That means that the REPL must rebuild a clang module which matches the one originally used to build the swift module.  <br></p><p>It&#39;s that final step that tends to be tricky, since Swift has to be convinced that the Clang module that the ClangImporter builds is compatible with the one that was originally used to build the swift module, and it is somewhat picky about this.  All that checking goes on in swift, not lldb, and I&#39;m not very familiar with how this is done.<br></p><p>One difficulty that comes up often is figuring out where the module map &amp; headers that were used to build the ClangImporter when the Swift module was originally constructed are on the current system.  On OS X the options that were used to build the ClangImporter are serialized in the swift module.  So we just grab that blob and use it to initialize the ClangImporter.  Construction this environment happens in SwiftASTContext::CreateInstance - for instance the call to loadFromSerializedAST is where we load the serialized options.  <br></p><p>That wasn&#39;t the way it was done in the early Swift days, instead the DWARF for the swift module would have the compiler options used to create the swift compiler (including some that were for the importer) and lldb would try to parse them and extract whatever goodies it needed.  That was fragile, and we switched to the serialization approach, but the code to parse up the DWARF is still there, as well as a bunch of assist functions so that we could add any extra information we might know (like what SDK&#39;s are being used.)<br></p><p>If you poke around in this code you&#39;ll see that we log pretty extensively the options we are using to make up both our Swift compiler and the ClangImporter.  To see this in action in the REPL, turn on the &quot;types&quot; log:<br></p><p> &gt; :log enable -f /tmp/lldb-types-log.txt lldb type<br></p><p>Then do your import.  If this is getting auto-imported too early for you to turn on the log by hand, then just put the log command (without the &quot;:&quot;) in your .lldbinit file, the REPL, being just a particular invocation of lldb, will read that file.<br></p><p>Hope this helps,<br></p><p>Jim<br></p><p><br></p><p><br>&gt; On Apr 15, 2016, at 8:19 AM, Ryan Lovelett via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve tried reverting c6121d56b19305cf59148d46af54c06b771f3180 just to<br>&gt; see if doing that will restore functionality to lldb/repl.<br>&gt; <br>&gt; Unfortunately too many things have changed in the build system since<br>&gt; that commit for a revert to make sense anymore<br>&gt; <br>&gt; Can anyone provide documentation/explain the mechanics of what happens<br>&gt; when I type &quot;import Glibc&quot; into the REPL/lldb?<br>&gt; <br>&gt; On Thu, Apr 14, 2016, at 05:47 PM, Dmitri Gribenko wrote:<br>&gt;&gt; +Brian<br>&gt;&gt; <br>&gt;&gt; On Thu, Apr 14, 2016 at 2:46 PM, Ryan Lovelett via swift-dev<br>&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down to<br>&gt;&gt;&gt; this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the issue,<br>&gt;&gt;&gt; SR-1109, to include this information.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>&gt;&gt;&gt; commit c6121d56b19305cf59148d46af54c06b771f3180<br>&gt;&gt;&gt; Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>&gt;&gt;&gt; Date:   Wed Mar 16 13:29:42 2016 -0400<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    [Un-revert][Glibc] Configure modulemap for target, not host<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    This reverts commit f2154ee94d, which reverted 04e1cd5bda. The original<br>&gt;&gt;&gt;    commit needed to be reverted because of an issue in which install<br>&gt;&gt;&gt;    targets were added to OS X builds that did not target Linux. This<br>&gt;&gt;&gt;    addresses that issue by guarding all the Linux-only CMake logic with a<br>&gt;&gt;&gt;    check for the SDK being built.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; :040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>&gt;&gt;&gt; 90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>&gt;&gt;&gt; :040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>&gt;&gt;&gt; 1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>&gt;&gt;&gt; :040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>&gt;&gt;&gt; 41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1]<br>&gt;&gt;&gt; https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>&gt;&gt;&gt; [2] https://github.com/apple/swift/pull/1704<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +swift-lldb-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt;&gt;&gt; reproduce as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think now its clear why the 14.04 and 15.10 packaging tests are passing,<br>&gt;&gt;&gt; and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if<br>&gt;&gt;&gt; you look at the console log for the 14.04 test:<br>&gt;&gt;&gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related<br>&gt;&gt;&gt; tests<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps pexpect should be added to the CI server so these tests can begin<br>&gt;&gt;&gt; failing properly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev<br>&gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Howdy,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>&gt;&gt;&gt; give it one more shot.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Has anyone out there tried building, from scratch, the Swift 3.0 package on<br>&gt;&gt;&gt; Ubuntu?  The compile, link, packaging steps all complete successfully, but<br>&gt;&gt;&gt; then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt;&gt;&gt; doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>&gt;&gt;&gt; properly:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  2&gt; import Glibc<br>&gt;&gt;&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt;&gt;&gt; #sourceLocation instead<br>&gt;&gt;&gt; #line 2 &quot;repl.swift&quot;<br>&gt;&gt;&gt; ^~~~~<br>&gt;&gt;&gt; #sourceLocation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please use<br>&gt;&gt;&gt; #sourceLocation instead<br>&gt;&gt;&gt; #line<br>&gt;&gt;&gt; ^~~~~<br>&gt;&gt;&gt; #sourceLocation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt; import Glibc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>&gt;&gt;&gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can also reproduce. I actually broght this up yesterday too (just on a<br>&gt;&gt;&gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug<br>&gt;&gt;&gt; report for this issue.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this is show stopper. Not for the REPL break but because it also<br>&gt;&gt;&gt; breaks the debugger on Linux as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might have<br>&gt;&gt;&gt; introduced this regression. Kate Stone mentioned that she thinks this issue<br>&gt;&gt;&gt; was introduced sometime after the 3-16 snapshot. I&#39;m trying to corroborate<br>&gt;&gt;&gt; that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1]<br>&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt;&gt;&gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt;&gt;&gt; @iachievedit<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt;&gt;&gt; @iachievedit<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 19, 2016 at 04:00:00pm</p></header><div class="content"><p>First I want to say wonderful help! Thank you.<br></p><p>On Fri, Apr 15, 2016, at 06:01 PM, Jim Ingham wrote:<br>&gt; The REPL makes a swift compiler, in which it runs your code (obvious...) <br>&gt; So when you do &quot;import &lt;some_module&gt;&quot; in the REPL, we need to load that<br>&gt; module into our swift compiler. In the lldb REPL that is managed in<br>&gt; SwiftExpressionParser::PerformAutoImport.  This will call lldb&#39;s<br>&gt; SwiftASTContext::FindAndLoadModule -&gt; SwiftASTContext::LoadModule, which<br>&gt; will then do three things: find &amp; tell the swift compiler about the<br>&gt; .swiftmodule, dlopen any underlying libraries the .swiftmodule needs. <br>&gt; Finally, if the module imported C/ObjC code, the swift module doesn&#39;t<br>&gt; describe the types coming from C but relies on types being in a clang<br>&gt; module that can be imported into Swift.  That means that the REPL must<br>&gt; rebuild a clang module which matches the one originally used to build the<br>&gt; swift module.  <br>&gt; <br>&gt; It&#39;s that final step that tends to be tricky, since Swift has to be<br>&gt; convinced that the Clang module that the ClangImporter builds is<br>&gt; compatible with the one that was originally used to build the swift<br>&gt; module, and it is somewhat picky about this.  All that checking goes on<br>&gt; in swift, not lldb, and I&#39;m not very familiar with how this is done.<br>&gt; <br>&gt; One difficulty that comes up often is figuring out where the module map &amp;<br>&gt; headers that were used to build the ClangImporter when the Swift module<br>&gt; was originally constructed are on the current system.  On OS X the<br>&gt; options that were used to build the ClangImporter are serialized in the<br>&gt; swift module.  So we just grab that blob and use it to initialize the<br>&gt; ClangImporter.  Construction this environment happens in<br>&gt; SwiftASTContext::CreateInstance - for instance the call to<br>&gt; loadFromSerializedAST is where we load the serialized options.  <br>&gt;<br></p><p>Not sure if you&#39;ll find this interesting or not but<br>loadFromSerializedAST never actually gets reached when I&#39;m debugging<br>(e.g., `b SwiftASTContext.cpp:1489` and `b SwiftASTContext.cpp:1809`)<br>based on what you&#39;ve discussed here that seems to be counter to your<br>explanation.<br></p><p>I&#39;ve devised a &quot;work-around&quot;.<br></p><p>But I cannot seem to root out the code that is responsible for building<br>the path where it looks for the modulemap. Currently it is looking for<br>it in `/usr/lib/lldb/clang/linux/x86_64/glibc.modulemap`. Which is not<br>where it gets installed.<br></p><p>I could make a patch for Swift that copies the module map to that<br>location during install. But that feels like a hack. I&#39;d rather get into<br>the logic of how that path is constructed and resolve it there.<br> <br>&gt; That wasn&#39;t the way it was done in the early Swift days, instead the<br>&gt; DWARF for the swift module would have the compiler options used to create<br>&gt; the swift compiler (including some that were for the importer) and lldb<br>&gt; would try to parse them and extract whatever goodies it needed.  That was<br>&gt; fragile, and we switched to the serialization approach, but the code to<br>&gt; parse up the DWARF is still there, as well as a bunch of assist functions<br>&gt; so that we could add any extra information we might know (like what SDK&#39;s<br>&gt; are being used.)<br>&gt; <br>&gt; If you poke around in this code you&#39;ll see that we log pretty extensively<br>&gt; the options we are using to make up both our Swift compiler and the<br>&gt; ClangImporter.  To see this in action in the REPL, turn on the &quot;types&quot;<br>&gt; log:<br>&gt; <br>&gt;  &gt; :log enable -f /tmp/lldb-types-log.txt lldb type<br>&gt; <br>&gt; Then do your import.  If this is getting auto-imported too early for you<br>&gt; to turn on the log by hand, then just put the log command (without the<br>&gt; &quot;:&quot;) in your .lldbinit file, the REPL, being just a particular invocation<br>&gt; of lldb, will read that file.<br>&gt; <br>&gt; Hope this helps,<br>&gt; <br>&gt; Jim<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; &gt; On Apr 15, 2016, at 8:19 AM, Ryan Lovelett via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; I&#39;ve tried reverting c6121d56b19305cf59148d46af54c06b771f3180 just to<br>&gt; &gt; see if doing that will restore functionality to lldb/repl.<br>&gt; &gt; <br>&gt; &gt; Unfortunately too many things have changed in the build system since<br>&gt; &gt; that commit for a revert to make sense anymore<br>&gt; &gt; <br>&gt; &gt; Can anyone provide documentation/explain the mechanics of what happens<br>&gt; &gt; when I type &quot;import Glibc&quot; into the REPL/lldb?<br>&gt; &gt; <br>&gt; &gt; On Thu, Apr 14, 2016, at 05:47 PM, Dmitri Gribenko wrote:<br>&gt; &gt;&gt; +Brian<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; On Thu, Apr 14, 2016 at 2:46 PM, Ryan Lovelett via swift-dev<br>&gt; &gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; I&#39;ve played around with `git bisect` and I think I&#39;ve tracked it down to<br>&gt; &gt;&gt;&gt; this commit [1]. Which came from PR #1704 [2]. I&#39;ve also updated the issue,<br>&gt; &gt;&gt;&gt; SR-1109, to include this information.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; c6121d56b19305cf59148d46af54c06b771f3180 is the first bad commit<br>&gt; &gt;&gt;&gt; commit c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt;&gt;&gt; Author: Brian Gesiak &lt;bgesiak at fb.com&gt;<br>&gt; &gt;&gt;&gt; Date:   Wed Mar 16 13:29:42 2016 -0400<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;    [Un-revert][Glibc] Configure modulemap for target, not host<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;    This reverts commit f2154ee94d, which reverted 04e1cd5bda. The original<br>&gt; &gt;&gt;&gt;    commit needed to be reverted because of an issue in which install<br>&gt; &gt;&gt;&gt;    targets were added to OS X builds that did not target Linux. This<br>&gt; &gt;&gt;&gt;    addresses that issue by guarding all the Linux-only CMake logic with a<br>&gt; &gt;&gt;&gt;    check for the SDK being built.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; :040000 040000 e92829c16aa22f20edfdf95f3bb18bb15a3fa226<br>&gt; &gt;&gt;&gt; 90062ad44050a19fc0d5bc846409945e83619b01 M    lib<br>&gt; &gt;&gt;&gt; :040000 040000 bbe94bf4af832e154065bc0bcafffab2dacb839e<br>&gt; &gt;&gt;&gt; 1a8be73f86884bda848cde22885bcd72a17660b2 M    stdlib<br>&gt; &gt;&gt;&gt; :040000 040000 abf55068f67ee44e2bd52169aa8b988fb8aead28<br>&gt; &gt;&gt;&gt; 41db0f8ddec3281f51c6798dd47c86675b7118b3 M    tools<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; [1]<br>&gt; &gt;&gt;&gt; https://github.com/apple/swift/commit/c6121d56b19305cf59148d46af54c06b771f3180<br>&gt; &gt;&gt;&gt; [2] https://github.com/apple/swift/pull/1704<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Thu, Apr 14, 2016, at 12:36 PM, Jordan Rose wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; +swift-lldb-dev<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Apr 14, 2016, at 7:20 , Joseph Bell via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt; &gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Ryan, thanks.  I&#39;ve voted on SR-1109 and will add the steps I use to<br>&gt; &gt;&gt;&gt; reproduce as well.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; I think now its clear why the 14.04 and 15.10 packaging tests are passing,<br>&gt; &gt;&gt;&gt; and that&#39;s because they aren&#39;t running the tests that leverage pexpect, if<br>&gt; &gt;&gt;&gt; you look at the console log for the 14.04 test:<br>&gt; &gt;&gt;&gt; https://ci.swift.org/view/Packages/job/oss-swift-package-linux-ubuntu-14_04/993/consoleText<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; lit.py: lit.cfg:101: note: &#39;pexpect&#39; module unavailable, skipping related<br>&gt; &gt;&gt;&gt; tests<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Perhaps pexpect should be added to the CI server so these tests can begin<br>&gt; &gt;&gt;&gt; failing properly.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Thu, Apr 14, 2016 at 8:47 AM, Ryan Lovelett via swift-dev<br>&gt; &gt;&gt;&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; On Thu, Apr 14, 2016, at 09:17 AM, Joseph Bell via swift-dev wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Howdy,<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; I&#39;ve mentioned this once before and didn&#39;t get any feedback; I thought I&#39;d<br>&gt; &gt;&gt;&gt; give it one more shot.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Has anyone out there tried building, from scratch, the Swift 3.0 package on<br>&gt; &gt;&gt;&gt; Ubuntu?  The compile, link, packaging steps all complete successfully, but<br>&gt; &gt;&gt;&gt; then the repl/test-repl-glibc.py fails.  The failure is that the REPL<br>&gt; &gt;&gt;&gt; doesn&#39;t interact (the underlying script is using pexpect to send/expect)<br>&gt; &gt;&gt;&gt; properly:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;  2&gt; import Glibc<br>&gt; &gt;&gt;&gt; warning: &lt;REPL&gt;:1:1: warning: #line directive is deprecated, please use<br>&gt; &gt;&gt;&gt; #sourceLocation instead<br>&gt; &gt;&gt;&gt; #line 2 &quot;repl.swift&quot;<br>&gt; &gt;&gt;&gt; ^~~~~<br>&gt; &gt;&gt;&gt; #sourceLocation<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; warning: repl.swift:3:1: warning: #line directive is deprecated, please use<br>&gt; &gt;&gt;&gt; #sourceLocation instead<br>&gt; &gt;&gt;&gt; #line<br>&gt; &gt;&gt;&gt; ^~~~~<br>&gt; &gt;&gt;&gt; #sourceLocation<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; error: repl.swift:2:8: error: missing required module &#39;SwiftGlibc&#39;<br>&gt; &gt;&gt;&gt; import Glibc<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; This is occurring on two separate Ubuntu 14.04 systems, one of which is a<br>&gt; &gt;&gt;&gt; greenfield VM with all of the prerequisites/clang-3.6 installed.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Stumped on this one and was just curious if anyone can reproduce.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; I can also reproduce. I actually broght this up yesterday too (just on a<br>&gt; &gt;&gt;&gt; different list) [1]. I suggest you go vote for SR-1109 [2] which is the bug<br>&gt; &gt;&gt;&gt; report for this issue.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; I think this is show stopper. Not for the REPL break but because it also<br>&gt; &gt;&gt;&gt; breaks the debugger on Linux as well.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Right now I&#39;m trying to bisect the repos to see which commit(s?) might have<br>&gt; &gt;&gt;&gt; introduced this regression. Kate Stone mentioned that she thinks this issue<br>&gt; &gt;&gt;&gt; was introduced sometime after the 3-16 snapshot. I&#39;m trying to corroborate<br>&gt; &gt;&gt;&gt; that.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; [1]<br>&gt; &gt;&gt;&gt; https://lists.swift.org/pipermail/swift-lldb-dev/Week-of-Mon-20160411/000106.html<br>&gt; &gt;&gt;&gt; [2] https://bugs.swift.org/browse/SR-1109<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Thanks,<br>&gt; &gt;&gt;&gt; Joe<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; ---<br>&gt; &gt;&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt;&gt;&gt; @iachievedit<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; ---<br>&gt; &gt;&gt;&gt; http://dev.iachieved.it/iachievedit/<br>&gt; &gt;&gt;&gt; @iachievedit<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-dev mailing list<br>&gt; &gt;&gt;&gt; swift-dev at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; -- <br>&gt; &gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; &gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-lldb-dev mailing list<br>&gt; &gt; swift-lldb-dev at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 15, 2016 at 11:00:00pm</p></header><div class="content"><p>Progress. Hat tip to William Dillon (@hpux735 on Twitter) for pointing<br>something out; `strace`<br></p><p>Ran `strace` on the REPL while trying to import Glibc. Noticed that it<br>was looking for a file: /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>which does not exist. However,<br>/usr/lib/lldb/clang/linux/x86_64/glibc.modulemap does exist.<br></p><p>Provided a symbolic link from<br>/usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>/usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>now.<br></p><p>I&#39;ll start working on a patch in the morning (of course if someone beats<br>me to it I won&#39;t be mad; please). Just thought I&#39;d update those<br>interested with a work around in the meantime.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 15, 2016 at 11:00:00pm</p></header><div class="content"><p>Facepalm.<br></p><p>On Fri, Apr 15, 2016, at 11:11 PM, Ryan Lovelett wrote:<br>&gt; Progress. Hat tip to William Dillon (@hpux735 on Twitter) for pointing<br>&gt; something out; `strace`<br>&gt; <br>&gt; Ran `strace` on the REPL while trying to import Glibc. Noticed that it<br>&gt; was looking for a file: /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>&gt; which does not exist. However,<br>&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap does exist.<br></p><p>/usr/lib/swift/linux/x86_64/glibc.modulemap<br></p><p>&gt; <br>&gt; Provided a symbolic link from<br>&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt; now.<br></p><p>Provided a symbolic link from<br>/usr/lib/swift/linux/x86_64/glibc.modulemap to<br>/usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>now.<br></p><p>&gt; <br>&gt; I&#39;ll start working on a patch in the morning (of course if someone beats<br>&gt; me to it I won&#39;t be mad; please). Just thought I&#39;d update those<br>&gt; interested with a work around in the meantime.<br></p><p>It is late. I&#39;m clearly done for the day.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>April 19, 2016 at 10:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>Has anyone looked further at getting the REPL working again on the master<br>branch builds?  Or for that matter installed pexpect on the CI server to<br>properly fail the build?<br></p><p>Joe<br></p><p><br>On Fri, Apr 15, 2016 at 10:13 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me&gt;<br>wrote:<br></p><p>&gt; Facepalm.<br>&gt;<br>&gt; On Fri, Apr 15, 2016, at 11:11 PM, Ryan Lovelett wrote:<br>&gt; &gt; Progress. Hat tip to William Dillon (@hpux735 on Twitter) for pointing<br>&gt; &gt; something out; `strace`<br>&gt; &gt;<br>&gt; &gt; Ran `strace` on the REPL while trying to import Glibc. Noticed that it<br>&gt; &gt; was looking for a file: /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>&gt; &gt; which does not exist. However,<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap does exist.<br>&gt;<br>&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Provided a symbolic link from<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt; &gt; now.<br>&gt;<br>&gt; Provided a symbolic link from<br>&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap to<br>&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt; now.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; I&#39;ll start working on a patch in the morning (of course if someone beats<br>&gt; &gt; me to it I won&#39;t be mad; please). Just thought I&#39;d update those<br>&gt; &gt; interested with a work around in the meantime.<br>&gt;<br>&gt; It is late. I&#39;m clearly done for the day.<br>&gt;<br></p><p><br></p><p>-- <br>Joseph Bell<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160419/191a23ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cbc6c0487c2b8af3ee7589b1eb5fa362?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Todd Fiala</string> &lt;todd.fiala at gmail.com&gt;<p>April 19, 2016 at 08:00:00am</p></header><div class="content"><p>Hi Joseph,<br></p><p>I&#39;ll poke around at this today and see if I can get this rolling forward<br>(or at least figure out what we&#39;re waiting on).<br></p><p>Thanks for your patience!<br></p><p>-Todd<br></p><p>On Tue, Apr 19, 2016 at 8:00 AM, Joseph Bell via swift-lldb-dev &lt;<br>swift-lldb-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; Has anyone looked further at getting the REPL working again on the master<br>&gt; branch builds?  Or for that matter installed pexpect on the CI server to<br>&gt; properly fail the build?<br>&gt;<br>&gt; Joe<br>&gt;<br>&gt;<br>&gt; On Fri, Apr 15, 2016 at 10:13 PM, Ryan Lovelett &lt;<br>&gt; swift-dev at ryan.lovelett.me&gt; wrote:<br>&gt;<br>&gt;&gt; Facepalm.<br>&gt;&gt;<br>&gt;&gt; On Fri, Apr 15, 2016, at 11:11 PM, Ryan Lovelett wrote:<br>&gt;&gt; &gt; Progress. Hat tip to William Dillon (@hpux735 on Twitter) for pointing<br>&gt;&gt; &gt; something out; `strace`<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Ran `strace` on the REPL while trying to import Glibc. Noticed that it<br>&gt;&gt; &gt; was looking for a file: /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>&gt;&gt; &gt; which does not exist. However,<br>&gt;&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap does exist.<br>&gt;&gt;<br>&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Provided a symbolic link from<br>&gt;&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>&gt;&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt;&gt; &gt; now.<br>&gt;&gt;<br>&gt;&gt; Provided a symbolic link from<br>&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap to<br>&gt;&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt;&gt; now.<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;ll start working on a patch in the morning (of course if someone beats<br>&gt;&gt; &gt; me to it I won&#39;t be mad; please). Just thought I&#39;d update those<br>&gt;&gt; &gt; interested with a work around in the meantime.<br>&gt;&gt;<br>&gt;&gt; It is late. I&#39;m clearly done for the day.<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Joseph Bell<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt;<br>&gt;<br></p><p><br>-- <br>-Todd<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160419/7743056b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/12dd65fe648ab7baf7b432dd586a8388?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>mishal_shah</string> &lt;mishal_shah at apple.com&gt;<p>April 19, 2016 at 09:00:00am</p></header><div class="content"><p>Hi Joseph, <br></p><p>We are currently reviewing pexpect module with security team, once we have an approval I will install it on swift-ci system. <br></p><p>Thanks,<br>Mishal shah<br>&gt; On Apr 19, 2016, at 8:23 AM, Todd Fiala via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Joseph,<br>&gt; <br>&gt; I&#39;ll poke around at this today and see if I can get this rolling forward (or at least figure out what we&#39;re waiting on).<br>&gt; <br>&gt; Thanks for your patience!<br>&gt; <br>&gt; -Todd<br>&gt; <br>&gt; On Tue, Apr 19, 2016 at 8:00 AM, Joseph Bell via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi all,<br>&gt; <br>&gt; Has anyone looked further at getting the REPL working again on the master branch builds?  Or for that matter installed pexpect on the CI server to properly fail the build?<br>&gt; <br>&gt; Joe<br>&gt; <br>&gt; <br>&gt; On Fri, Apr 15, 2016 at 10:13 PM, Ryan Lovelett &lt;swift-dev at ryan.lovelett.me &lt;mailto:swift-dev at ryan.lovelett.me&gt;&gt; wrote:<br>&gt; Facepalm.<br>&gt; <br>&gt; On Fri, Apr 15, 2016, at 11:11 PM, Ryan Lovelett wrote:<br>&gt; &gt; Progress. Hat tip to William Dillon (@hpux735 on Twitter) for pointing<br>&gt; &gt; something out; `strace`<br>&gt; &gt;<br>&gt; &gt; Ran `strace` on the REPL while trying to import Glibc. Noticed that it<br>&gt; &gt; was looking for a file: /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>&gt; &gt; which does not exist. However,<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap does exist.<br>&gt; <br>&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap<br>&gt; <br>&gt; &gt;<br>&gt; &gt; Provided a symbolic link from<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>&gt; &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt; &gt; now.<br>&gt; <br>&gt; Provided a symbolic link from<br>&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap to<br>&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is importing<br>&gt; now.<br>&gt; <br>&gt; &gt;<br>&gt; &gt; I&#39;ll start working on a patch in the morning (of course if someone beats<br>&gt; &gt; me to it I won&#39;t be mad; please). Just thought I&#39;d update those<br>&gt; &gt; interested with a work around in the meantime.<br>&gt; <br>&gt; It is late. I&#39;m clearly done for the day.<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Joseph Bell<br>&gt; http://dev.iachieved.it/iachievedit/ &lt;http://dev.iachieved.it/iachievedit/&gt;<br>&gt; @iachievedit<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Todd<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160419/4810598f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>[swift-lldb-dev] repl/test-repl-glibc.py Failure on Ubuntu</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>April 19, 2016 at 01:00:00pm</p></header><div class="content"><p>On Tue, Apr 19, 2016, at 11:00 AM, Joseph Bell wrote:<br>&gt; Hi all,<br>&gt;<br>&gt; Has anyone looked further at getting the REPL working again on the<br>&gt; master branch builds?  Or for that matter installed pexpect on the CI<br>&gt; server to properly fail the build?<br> <br>@Joe,<br> <br>Out of curiosity, did the work-around I proposed on Friday work for you?<br>I&#39;ve built from master and created the symbolic links and restored<br>functionality to lldb and the REPL.<br> <br>If that does work I think that gives me something to work towards for<br>fixing it permanently.<br> <br>&gt;<br>&gt; Joe<br>&gt;<br>&gt;<br>&gt; On Fri, Apr 15, 2016 at 10:13 PM, Ryan Lovelett &lt;swift-<br>&gt; dev at ryan.lovelett.me&gt; wrote:<br>&gt;&gt; Facepalm.<br>&gt;&gt;<br>&gt;&gt;  On Fri, Apr 15, 2016, at 11:11 PM, Ryan Lovelett wrote:<br>&gt;&gt;  &gt; Progress. Hat tip to William Dillon (@hpux735 on Twitter) for<br>&gt;&gt;  &gt; pointing something out; `strace`<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; Ran `strace` on the REPL while trying to import Glibc. Noticed<br>&gt;&gt;  &gt; that it was looking for a file:<br>&gt;&gt;  &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap which does not<br>&gt;&gt;  &gt; exist. However, /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap<br>&gt;&gt;  &gt; does exist.<br>&gt;&gt;<br>&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap<br>&gt;&gt;<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; Provided a symbolic link from<br>&gt;&gt;  &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap to<br>&gt;&gt;  &gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is<br>&gt;&gt;  &gt; importing now.<br>&gt;&gt;<br>&gt;&gt;  Provided a symbolic link from<br>&gt;&gt;  /usr/lib/swift/linux/x86_64/glibc.modulemap to<br>&gt;&gt; /usr/lib/lldb/clang/linux/x86_64/glibc.modulemap. Voila! It is<br>&gt;&gt; importing now.<br>&gt;&gt;<br>&gt;&gt;  &gt;<br>&gt;&gt;  &gt; I&#39;ll start working on a patch in the morning (of course if someone<br>&gt;&gt;  &gt; beats me to it I won&#39;t be mad; please). Just thought I&#39;d update<br>&gt;&gt;  &gt; those interested with a work around in the meantime.<br>&gt;&gt;<br>&gt;&gt; It is late. I&#39;m clearly done for the day.<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Joseph Bell<br>&gt; http://dev.iachieved.it/iachievedit/<br>&gt; @iachievedit<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160419/1e2ed100/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
