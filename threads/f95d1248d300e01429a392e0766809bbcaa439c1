<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Joe Groff via swift-dev &lt;swift-dev &lt;at&gt; swift.org&gt; writes:<br>&gt;<br>&gt;   return local // returning forms a closure, so ref is escapable<br></p><p>My plan was to check all return statements with FuncDecl as results, if<br>any of them has inout captures, complain.<br></p><p>But this diagnosis is too coarse. A function can capture from any level of<br>outer scope, so sometimes it&#39;s safe to let a inout escape, as long as the<br>reference is still inside the scope it&#39;s captured from. Example:<br></p><p>func a(inout x: Int) -&gt; () -&gt; Void {<br>    func b() -&gt; () -&gt; Void {<br>        func c() {<br>            _ = x<br>        }<br>        return c // is this safe? We&#39;ll see…<br>    }<br></p><p>    let f = b() // &#39;x&#39; captured by f hasn&#39;t *really* escaped.<br></p><p>    return f // now we have a problem<br>}<br></p><p>It&#39;s unclear whether the statement &#39;return c&#39; is problematic.<br></p><p>So there are two paths:<br></p><p>1. make *any* escaping inout capture an error<br>2. track down original scope of each inout capture, compare it with the return<br>   statement.<br></p><p>At the moment I haven&#39;t looked into how feasible 2 is.<br></p><p>What&#39;s your opinion?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 11, 2016, at 1:28 PM, Daniel Duan via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Joe Groff via swift-dev &lt;swift-dev &lt;at&gt; swift.org&gt; writes:<br>&gt;&gt; <br>&gt;&gt;  return local // returning forms a closure, so ref is escapable<br>&gt; <br>&gt; My plan was to check all return statements with FuncDecl as results, if<br>&gt; any of them has inout captures, complain.<br>&gt; <br>&gt; But this diagnosis is too coarse. A function can capture from any level of<br>&gt; outer scope, so sometimes it&#39;s safe to let a inout escape, as long as the<br>&gt; reference is still inside the scope it&#39;s captured from. Example:<br>&gt; <br>&gt; func a(inout x: Int) -&gt; () -&gt; Void {<br>&gt;    func b() -&gt; () -&gt; Void {<br>&gt;        func c() {<br>&gt;            _ = x<br>&gt;        }<br>&gt;        return c // is this safe? We&#39;ll see…<br>&gt;    }<br>&gt; <br>&gt;    let f = b() // &#39;x&#39; captured by f hasn&#39;t *really* escaped.<br>&gt; <br>&gt;    return f // now we have a problem<br>&gt; }<br>&gt; <br>&gt; It&#39;s unclear whether the statement &#39;return c&#39; is problematic.<br>&gt; <br>&gt; So there are two paths:<br>&gt; <br>&gt; 1. make *any* escaping inout capture an error<br>&gt; 2. track down original scope of each inout capture, compare it with the return<br>&gt;   statement.<br>&gt; <br>&gt; At the moment I haven&#39;t looked into how feasible 2 is.<br></p><p>A local analysis is fine, and more predictable anyways. We already impose these constraints on @noescape parameters. If the local function reference appears as part of a function application or as a noescape argument, then treat the reference as noescape, otherwise consider it to escape.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Help needed: SE-0035 design detail</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>April 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Ah, closures do get the same treatment here. Good point.<br></p><p>- Daniel Duan<br></p><p><br></p><p><br>On Mon, Apr 11, 2016 at 1:39 PM -0700, &quot;Joe Groff&quot; &lt;jgroff at apple.com&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p>&gt; On Apr 11, 2016, at 1:28 PM, Daniel Duan via swift-dev  wrote:<br>&gt; <br>&gt;&gt; Joe Groff via swift-dev  swift.org&gt; writes:<br>&gt;&gt; <br>&gt;&gt;  return local // returning forms a closure, so ref is escapable<br>&gt; <br>&gt; My plan was to check all return statements with FuncDecl as results, if<br>&gt; any of them has inout captures, complain.<br>&gt; <br>&gt; But this diagnosis is too coarse. A function can capture from any level of<br>&gt; outer scope, so sometimes it&#39;s safe to let a inout escape, as long as the<br>&gt; reference is still inside the scope it&#39;s captured from. Example:<br>&gt; <br>&gt; func a(inout x: Int) -&gt; () -&gt; Void {<br>&gt;    func b() -&gt; () -&gt; Void {<br>&gt;        func c() {<br>&gt;            _ = x<br>&gt;        }<br>&gt;        return c // is this safe? We&#39;ll see…<br>&gt;    }<br>&gt; <br>&gt;    let f = b() // &#39;x&#39; captured by f hasn&#39;t *really* escaped.<br>&gt; <br>&gt;    return f // now we have a problem<br>&gt; }<br>&gt; <br>&gt; It&#39;s unclear whether the statement &#39;return c&#39; is problematic.<br>&gt; <br>&gt; So there are two paths:<br>&gt; <br>&gt; 1. make *any* escaping inout capture an error<br>&gt; 2. track down original scope of each inout capture, compare it with the return<br>&gt;   statement.<br>&gt; <br>&gt; At the moment I haven&#39;t looked into how feasible 2 is.<br></p><p>A local analysis is fine, and more predictable anyways. We already impose these constraints on @noescape parameters. If the local function reference appears as part of a function application or as a noescape argument, then treat the reference as noescape, otherwise consider it to escape.<br></p><p>-Joe<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160411/46a10297/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
