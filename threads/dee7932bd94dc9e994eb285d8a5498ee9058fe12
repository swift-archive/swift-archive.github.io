<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review #2] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 25, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>Steve opted to revise his original proposal in order to incorporate great feedback from the original review period.  As such, we’re extending the review period in order to get adequate consideration of his new changes.  The extended review of &quot;SE-0067: Enhanced Floating Point Protocols&quot; runs through April 29. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md<br></p><p>His previous revision is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/fb1368a6a5474f57aa8f1846b5355d18753098f3/proposals/0067-floating-point-protocols.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review #2] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>April 25, 2016 at 05:00:00pm</p></header><div class="content"><p>The diff might be helpful as well:<br></p><p>https://github.com/apple/swift-evolution/commit/5015578c019818234f1b33d82ad96b94cb444b1b?short_path=3a8f57a#diff-3a8f57ac6db03a3be35cb05972e95d69<br></p><p>On Mon, Apr 25, 2016 at 4:35 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; Steve opted to revise his original proposal in order to incorporate great<br>&gt; feedback from the original review period.  As such, we’re extending the<br>&gt; review period in order to get adequate consideration of his new changes.<br>&gt; The extended review of &quot;SE-0067: Enhanced Floating Point Protocols&quot; runs<br>&gt; through April 29. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0067-floating-point-protocols.md<br>&gt;<br>&gt; His previous revision is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/fb1368a6a5474f57aa8f1846b5355d18753098f3/proposals/0067-floating-point-protocols.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at:<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/9700b723/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review #2] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April 25, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>Improved.<br></p><p>Suggestions re naming of `isLessThanOrEqualTo(_:)`:<br>&quot;Less-than&quot; can be regarded as a unit. Thus, `isLessThan(_:)` is<br>reasonable. However, `isEqualTo(_:)` is kind of a stretch, but it could<br>just be `equals(_:)`. Thus, you could have:<br>```<br>equals(_:)<br>isLessThan(_:)<br>isLessThanOrEquals(_:)<br>isGreaterThan(_:)<br>isGreaterThanOrEquals(_:)<br>isTotallyOrdered(below:)<br>```<br></p><p>Typos in comments (not exhaustive):<br>* Above `init(signOf:magnitudeOf:)`, comment should read &quot;...exponent and<br>significand are taken from `magnitudeOf`&quot; instead of &quot;...taken from<br>`magnitude`&quot;<br>* Above `isTotallyOrdered(below:)`, &quot;preceeds&quot; [sic] should be &quot;precedes&quot;<br></p><p>Other thoughts:<br>* I finally see why IEEE 754 calls it &quot;minNum&quot;--namely, &quot;Num&quot; implies<br>strongly how NaNs are handled. (What&#39;s the minimum of 0 and NaN? I dunno,<br>they&#39;re unordered. What&#39;s the minimum *number* given 0 and NaN? Well, it<br>has to be 0, because NaN isn&#39;t a number.) I wonder if this is a useful<br>thing to include in the Swift name (i.e. `minimumNumber`)<br>* Still not sure about ulpOfOne; if the point is to encourage people who<br>incorrectly reach for DBL_EPSILON to understand what&#39;s going on, then by<br>the time they learn what ULP is they should know that `(1.0).ulp ==<br>Double.ulpOfOne`<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Yes, as mentioned previously.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes, fits much better with these revisions.<br></p><p><br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;<br></p><p>Compares favorably.<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Quick reading of revised proposal; in-depth study of earlier iterations.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/f374448f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Review #2] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>April 25, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Apr 25, 2016, at 8:45 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Suggestions re naming of `isLessThanOrEqualTo(_:)`:<br>&gt; &quot;Less-than&quot; can be regarded as a unit. Thus, `isLessThan(_:)` is reasonable. However, `isEqualTo(_:)` is kind of a stretch, but it could just be `equals(_:)`. Thus, you could have:<br>&gt; ```<br>&gt; equals(_:)<br>&gt; isLessThan(_:)<br>&gt; isLessThanOrEquals(_:)<br>&gt; isGreaterThan(_:)<br>&gt; isGreaterThanOrEquals(_:)<br>&gt; isTotallyOrdered(below:)<br></p><p>The other thing that comes to mind is:<br></p><p>	isEqual(comparedWith: )<br>	isLess(comparedWith: )<br>	isLessOrEqual(comparedWith: )<br></p><p>	isTotallyOrdered(below: )<br></p><p>I don’t love these either, but something in this direction may be workable.<br>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160425/33e978b1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review #2] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 26, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; isLessThanOrEqual(to:) --&gt; isLessThanOrEqualTo(_:). I&#39;m still not totally convinced that this is an improvement, so I&#39;d love to hear further suggestions on how to handle this case.<br></p><p>One possibility would be `isNoGreater(than:)`, which neatly sidesteps the problem. However, given the bizarreness of NaNs, you could argue whether it&#39;s actually accurate. (I would say it is, while `isNotGreater(than:)` would not be correct name, but admittedly that&#39;s a slight stretch.)<br></p><p>I&#39;ll comment on the rest another time.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
