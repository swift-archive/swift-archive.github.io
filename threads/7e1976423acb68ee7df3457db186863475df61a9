<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 12, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0123: Disallow coercion to optionals in operator arguments&quot; begins now and runs through July 19. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0123-disallow-value-to-optional-coercion-in-operator-arguments.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>-1. This feels like a band-aid rather than a well-considered fix to the issues raised in the proposal. I don&#39;t see what makes operators as a class of functions more or less susceptible to these surprising optional upcasts. Removing the comparison operators for optionals will resolve the issue with &#39;&lt;&#39;, and if we&#39;re concerned about &#39;??&#39;, an unavailable overload for ??(T, T) could address that specific issue. Optional promotion in operators is clearly useful in many cases, as the proposal itself concedes by special-case exempting the assignment operator from the restriction and proposing the addition of more than a dozen overloads to restore the equivalent of explicit promotion behavior for specific operators, and that doing so accepts other undesirable formulations like &#39;nonOptional == nil&#39;. This proposal doesn&#39;t make a compelling case that being an operator is the correct criterion to disable optional promotion.<br></p><p>-Joe<br></p><p>&gt; On Jul 12, 2016, at 10:25 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0123: Disallow coercion to optionals in operator arguments&quot; begins now and runs through July 19. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0123-disallow-value-to-optional-coercion-in-operator-arguments.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>July 13, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 13, 2016, at 10:06 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; -1. This feels like a band-aid rather than a well-considered fix to the issues raised in the proposal. I don&#39;t see what makes operators as a class of functions more or less susceptible to these surprising optional upcasts. Removing the comparison operators for optionals will resolve the issue with &#39;&lt;&#39;, and if we&#39;re concerned about &#39;??&#39;, an unavailable overload for ??(T, T) could address that specific issue. Optional promotion in operators is clearly useful in many cases, as the proposal itself concedes by special-case exempting the assignment operator from the restriction and proposing the addition of more than a dozen overloads to restore the equivalent of explicit promotion behavior for specific operators, and that doing so accepts other undesirable formulations like &#39;nonOptional == nil&#39;. This proposal doesn&#39;t make a compelling case that being an operator is the correct criterion to disable optional promotion.<br></p><p>Agreed.  To me, the right solution is some attribute to suppress promotion for specific arguments.<br></p><p>When we get to decl-based overload resolution, this will become straightforward to implement.<br></p><p>John.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Jul 12, 2016, at 10:25 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0123: Disallow coercion to optionals in operator arguments&quot; begins now and runs through July 19. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0123-disallow-value-to-optional-coercion-in-operator-arguments.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July 13, 2016 at 02:00:00pm</p></header><div class="content"><p>I concur with Joe Groff and John McCall, this proposal does not seem to be<br>the right approach.<br></p><p>What I would really like is the complete elimination of implicit coercion<br>to Optional (implicit type conversions are not Swifty!) and the<br>simultaneous introduction of a simple notation for doing so explicitly.<br></p><p>If we can make it play nice with optional chaining, then a postfix `?`<br>operator is the natural choice: `(42?, &quot;babel fish&quot;?, mattressSwamp?)`<br>would be a tuple of optionals, and `(1, 2, 3)?` an optional tuple.<br></p><p>Nevin<br></p><p><br>On Wed, Jul 13, 2016 at 1:16 PM, John McCall via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; On Jul 13, 2016, at 10:06 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; -1. This feels like a band-aid rather than a well-considered fix to the<br>&gt; issues raised in the proposal. I don&#39;t see what makes operators as a class<br>&gt; of functions more or less susceptible to these surprising optional upcasts.<br>&gt; Removing the comparison operators for optionals will resolve the issue with<br>&gt; &#39;&lt;&#39;, and if we&#39;re concerned about &#39;??&#39;, an unavailable overload for ??(T,<br>&gt; T) could address that specific issue. Optional promotion in operators is<br>&gt; clearly useful in many cases, as the proposal itself concedes by<br>&gt; special-case exempting the assignment operator from the restriction and<br>&gt; proposing the addition of more than a dozen overloads to restore the<br>&gt; equivalent of explicit promotion behavior for specific operators, and that<br>&gt; doing so accepts other undesirable formulations like &#39;nonOptional == nil&#39;.<br>&gt; This proposal doesn&#39;t make a compelling case that being an operator is the<br>&gt; correct criterion to disable optional promotion.<br>&gt;<br>&gt; Agreed.  To me, the right solution is some attribute to suppress promotion<br>&gt; for specific arguments.<br>&gt;<br>&gt; When we get to decl-based overload resolution, this will become<br>&gt; straightforward to implement.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt;<br>&gt; &gt;&gt; On Jul 12, 2016, at 10:25 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hello Swift community,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The review of &quot;SE-0123: Disallow coercion to optionals in operator<br>&gt; arguments&quot; begins now and runs through July 19. The proposal is available<br>&gt; here:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0123-disallow-value-to-optional-coercion-in-operator-arguments.md<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;      https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; What goes into a review?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;      * What is your evaluation of the proposal?<br>&gt; &gt;&gt;      * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;&gt;      * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;&gt;      * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;&gt;      * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; More information about the Swift evolution process is available at<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;      https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Thank you,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -Chris Lattner<br>&gt; &gt;&gt; Review Manager<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160713/b4ae457e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>July 15, 2016 at 06:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>Given SE-0121 would get accepted, this proposal does only add small additional value, and might even make code unnecessary complicated.<br></p><p>BUT the nil-coalescing operator (??) really should not allow a non-optional on its left hand side.<br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, not really once SE-0121 is accepted.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, too much boilerplate needed in some cases where the coercion is obvious<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>-<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Working with optionals for some while now, and a few minutes thinking through the implications of the proposal.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 17, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I&#39;m not in favor.<br></p><p>Briefly: I may soon propose an overload of `..&lt;` like so:<br></p><p>	func ..&lt; &lt;Bound: Comparable&gt;(lhs: Bound?, rhs: Bound?) -&gt; IncompleteRange&lt;Bound&gt; {…}<br></p><p>This operator is one which ought to lift its parameters to greater optionality. I can only assume there will be other operators like this too.<br></p><p>There may be a place for making the lifting behavior more explicit, either only in operators, or in all functions. But I don&#39;t think disabling lifting always in operators and never in functions is the best solution.<br></p><p>(I hope to have this ready for a second look in the next couple days. It&#39;s at the top of my to-do list.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0123: Disallow coercion to optionals in operator arguments</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July 19, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>-1. I agree that there is a problem with optional coercion for the ?? operator (and have on occasion encountered the type of bugs/mistakes that the proposal mentions). However, I&#39;m against the proposed solution to that a problem.<br></p><p>Some operators (like +) already have a way of not allowing coercion to optionals. For other operators (including custom operators) allowing coercion to optionals can still be useful (for the same arguments as it is useful for functions).<br></p><p>I feel that a more appropriate solution to this problem is to disallow coercion to optionals for only the ?? operator (similar to SE-0121 or the various comparison operators).<br></p><p>---<br></p><p>Since this proposal wants to change the behavior of all operators it would nice be if it included a list of other operators, pointing out which ones already don&#39;t permit optional coercion, for which ones optional coercion is problematic, and for which ones it is convenient. <br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>If SE-0121 is accepted, then the optional coercion for the comparison operators will already be dealt with.<br></p><p>I feel that the ?? operator is problematic enough to warrant a change, but am not convinced that the same is true for operators in general.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>-<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>-<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and experimented with optional coercion for some other operators in a playground.<br></p><p>- David<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
