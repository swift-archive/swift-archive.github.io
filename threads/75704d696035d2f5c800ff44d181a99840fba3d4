<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44330516abe967fb36e6fac4ec419b99?s=50"></div><header><strong>Returning more than two scalars from C code</strong> from <string>Bryan Chan</string> &lt;bryan.chan at ca.ibm.com&gt;<p>March 22, 2016 at 07:00:00am</p></header><div class="content"><p>I tried to google for an answer but couldn&#39;t find anything. What is the<br>correct way to do the following on Linux?<br></p><p>  @_silgen_name(&quot;foo&quot;)<br>  func foo(theInt: UInt)<br>    -&gt; (a: UInt, b: UInt, c: UInt)<br></p><p>  var (d, e, f) = foo(aNum)<br></p><p>Where foo is:<br></p><p>  typedef struct {<br>    long a;<br>    long b;<br>    long c;<br>  } Tuple;<br></p><p>  extern &quot;C&quot; {<br>    Tuple foo(int i) {<br>      return Tuple{ i, i, i };<br>    }<br>  }<br></p><p>Currently, the call to foo crashes because foo wants to return the tuple<br>indirectly, but the Swift call expects the three scalar return values in<br>registers. This example is a generalization of runtime functions such as<br>swift_class_getInstanceExtents, which happens to work because it only<br>returns two scalars in RAX and RDX, which is supported by Clang. But my<br>tests show that three-scalar tuples/structs will cause problems. On<br>architectures where Clang only supports one scalar return value, the<br>problem is worse.<br></p><p>Am I doing something wrong or is there already a way to deal with this<br>(e.g. annotation in Swift code to make it obey C ABI, or vice versa)?<br></p><p>Thanks, Bryan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160322/7570a3d4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Returning more than two scalars from C code</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 22, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 22, 2016, at 5:57 AM, Bryan Chan via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I tried to google for an answer but couldn&#39;t find anything. What is the correct way to do the following on Linux?<br>&gt; <br>&gt; @_silgen_name(&quot;foo&quot;)<br>&gt; func foo(theInt: UInt)<br>&gt; -&gt; (a: UInt, b: UInt, c: UInt)<br>&gt; <br>&gt; var (d, e, f) = foo(aNum)<br>&gt; <br>&gt; Where foo is:<br>&gt; <br>&gt; typedef struct {<br>&gt; long a;<br>&gt; long b;<br>&gt; long c;<br>&gt; } Tuple;<br>&gt; <br>&gt; extern &quot;C&quot; {<br>&gt; Tuple foo(int i) {<br>&gt; return Tuple{ i, i, i };<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; Currently, the call to foo crashes because foo wants to return the tuple indirectly, but the Swift call expects the three scalar return values in registers. This example is a generalization of runtime functions such as swift_class_getInstanceExtents, which happens to work because it only returns two scalars in RAX and RDX, which is supported by Clang. But my tests show that three-scalar tuples/structs will cause problems. On architectures where Clang only supports one scalar return value, the problem is worse.<br>&gt; <br>&gt; Am I doing something wrong or is there already a way to deal with this (e.g. annotation in Swift code to make it obey C ABI, or vice versa)?<br>&gt; <br></p><p>Don&#39;t use @_silgen_name. If you want to use a C API from Swift, define a Clang module for its headers, and import the module. See http://clang.llvm.org/docs/Modules.html for documentation on Clang module maps.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160322/7b0d4175/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44330516abe967fb36e6fac4ec419b99?s=50"></div><header><strong>Returning more than two scalars from C code</strong> from <string>Bryan Chan</string> &lt;bryan.chan at ca.ibm.com&gt;<p>March 22, 2016 at 01:00:00pm</p></header><div class="content"><p>jgroff at apple.com wrote on 2016-03-22 12:05:06 PM:<br></p><p>&gt; On Mar 22, 2016, at 5:57 AM, Bryan Chan via swift-dev<br>&lt;swift-dev at swift.org<br>&gt; wrote:<br>&gt;<br>&gt; &gt; I tried to google for an answer but couldn&#39;t find anything. What is<br>&gt; &gt; the correct way to do the following on Linux?<br>&gt; &gt;<br>&gt; &gt; @_silgen_name(&quot;foo&quot;)<br>&gt; &gt; func foo(theInt: UInt)<br>&gt; &gt; -&gt; (a: UInt, b: UInt, c: UInt)<br>&gt; &gt;<br>&gt; &gt; var (d, e, f) = foo(aNum)<br>&gt; &gt;<br>[snip]<br>&gt; &gt;<br>&gt; &gt; Currently, the call to foo crashes because foo wants to return the<br>&gt; &gt; tuple indirectly, but the Swift call expects the three scalar return<br>&gt; &gt; values in registers. This example is a generalization of runtime<br>&gt; &gt; functions such as swift_class_getInstanceExtents, which happens to<br>&gt; &gt; work because it only returns two scalars in RAX and RDX, which is<br>&gt; &gt; supported by Clang. But my tests show that three-scalar tuples/<br>&gt; &gt; structs will cause problems. On architectures where Clang only<br>&gt; &gt; supports one scalar return value, the problem is worse.<br>&gt; &gt;<br>&gt; &gt; Am I doing something wrong or is there already a way to deal with<br>&gt; &gt; this (e.g. annotation in Swift code to make it obey C ABI, or vice<br>versa)?<br>&gt;<br>&gt; Don&#39;t use @_silgen_name. If you want to use a C API from Swift,<br>&gt; define a Clang module for its headers, and import the module. See<br>&gt; http://clang.llvm.org/docs/Modules.html for documentation on Clang<br>&gt; module maps.<br></p><p>Is this the solution for runtime functions like<br>swift_class_getInstanceExtents as well?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160322/6b7f0f50/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
