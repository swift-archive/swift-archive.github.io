<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1abe86b70e18c7e3f4025a3062d7671?s=50"></div><header><strong>Advice on adding PGO support</strong> from <string>Vedant Kumar</string> &lt;vsk at apple.com&gt;<p>September  6, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi swift-dev,<br></p><p>I&#39;ve been working on some patches which add basic support for PGO to swift [1].<br>What I have so far is just a proof-of-concept. I&#39;d like to get some feedback on<br>the approach I&#39;ve taken.<br></p><p>I&#39;ve added support for loading profile data, matching up execution counts to<br>the right parts of the AST, and attaching those execution counts to conditional<br>branches. I added two fields to CondBranchInst (in SIL):<br></p><p>  /// The number of times the True branch was executed.<br>  Optional&lt;uint64_t&gt; TrueBBCount;<br></p><p>  /// The number of times the False branch was executed.<br>  Optional&lt;uint64_t&gt; FalseBBCount;<br></p><p>I fixed up the SILCloner and a few other sites where conditional branches are<br>created to propagate the branch taken counts. I have a patch to propagate<br>branch taken counts through the SILOptimizer, but I didn&#39;t include it in [1]<br>because I don&#39;t know how to write tests for it.<br></p><p>In IRGen, I added some logic to scale execution counts and create llvm<br>branch_weight metadata.<br></p><p>Some questions:<br></p><p>  1. Is it acceptable to make some SIL objects larger in order to store<br>     execution counts (e.g CondBranchInst)? If not, what&#39;s the best way to make<br>     this information visible to SILOptimizer and IRGen?<br></p><p>  2. Is it better to associate counts with SIL instructions, or with<br>     SILSuccessor?<br></p><p>  3. Does anyone have tips on modifying swift/benchmark? I&#39;d like to add a<br>     benchmark driver which generates profile data, and another driver which<br>     uses that data to turn on PGO.<br></p><p>thanks,<br>vedant<br></p><p>[1] https://github.com/vedantk/swift/tree/profile_use<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8978dbb959b069613e2d027420615f?s=50"></div><header><strong>Advice on adding PGO support</strong> from <string>Erik Eckstein</string> &lt;eeckstein at apple.com&gt;<p>September  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Vedant,<br></p><p>nice work!<br></p><p>&gt; On Sep 6, 2016, at 12:36 PM, Vedant Kumar via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi swift-dev,<br>&gt; <br>&gt; I&#39;ve been working on some patches which add basic support for PGO to swift [1].<br>&gt; What I have so far is just a proof-of-concept. I&#39;d like to get some feedback on<br>&gt; the approach I&#39;ve taken.<br>&gt; <br>&gt; I&#39;ve added support for loading profile data, matching up execution counts to<br>&gt; the right parts of the AST, and attaching those execution counts to conditional<br>&gt; branches. I added two fields to CondBranchInst (in SIL):<br>&gt; <br>&gt;  /// The number of times the True branch was executed.<br>&gt;  Optional&lt;uint64_t&gt; TrueBBCount;<br>&gt; <br>&gt;  /// The number of times the False branch was executed.<br>&gt;  Optional&lt;uint64_t&gt; FalseBBCount;<br>&gt; <br>&gt; I fixed up the SILCloner and a few other sites where conditional branches are<br>&gt; created to propagate the branch taken counts. I have a patch to propagate<br>&gt; branch taken counts through the SILOptimizer, but I didn&#39;t include it in [1]<br>&gt; because I don&#39;t know how to write tests for it.<br>&gt; <br>&gt; In IRGen, I added some logic to scale execution counts and create llvm<br>&gt; branch_weight metadata.<br>&gt; <br>&gt; Some questions:<br>&gt; <br>&gt;  1. Is it acceptable to make some SIL objects larger in order to store<br>&gt;     execution counts (e.g CondBranchInst)?<br></p><p>Yes, I don’t see a problem with that.<br>But for saving some space, you might want to store the counts as a plain uint64_t instead of an Optional and use a special value (e.g. ~0) for the none-case.<br></p><p><br>&gt; If not, what&#39;s the best way to make<br>&gt;     this information visible to SILOptimizer and IRGen?<br>&gt; <br>&gt;  2. Is it better to associate counts with SIL instructions, or with<br>&gt;     SILSuccessor?<br></p><p>I think storing the counts in SILSuccessor makes sense, because counts are needed for all kind of terminator instructions (like switch_enum), except for the unconditional br, but IMO we can live with wasting some bytes for this instructions.<br></p><p>Another thing to consider is that the count information should be printed/parsed/serialized when writing and reading SIL.<br></p><p>&gt; <br>&gt;  3. Does anyone have tips on modifying swift/benchmark? I&#39;d like to add a<br>&gt;     benchmark driver which generates profile data, and another driver which<br>&gt;     uses that data to turn on PGO.<br>&gt; <br>&gt; thanks,<br>&gt; vedant<br>&gt; <br>&gt; [1] https://github.com/vedantk/swift/tree/profile_use<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1abe86b70e18c7e3f4025a3062d7671?s=50"></div><header><strong>Advice on adding PGO support</strong> from <string>Vedant Kumar</string> &lt;vsk at apple.com&gt;<p>September  8, 2016 at 08:00:00am</p></header><div class="content"><p>Hi Erik,<br></p><p>Thanks for your advice!<br></p><p>&gt; On Sep 7, 2016, at 12:53 PM, Erik Eckstein &lt;eeckstein at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Vedant,<br>&gt; <br>&gt; nice work!<br>&gt; <br>&gt;&gt; On Sep 6, 2016, at 12:36 PM, Vedant Kumar via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi swift-dev,<br>&gt;&gt; <br>&gt;&gt; I&#39;ve been working on some patches which add basic support for PGO to swift [1].<br>&gt;&gt; What I have so far is just a proof-of-concept. I&#39;d like to get some feedback on<br>&gt;&gt; the approach I&#39;ve taken.<br>&gt;&gt; <br>&gt;&gt; I&#39;ve added support for loading profile data, matching up execution counts to<br>&gt;&gt; the right parts of the AST, and attaching those execution counts to conditional<br>&gt;&gt; branches. I added two fields to CondBranchInst (in SIL):<br>&gt;&gt; <br>&gt;&gt; /// The number of times the True branch was executed.<br>&gt;&gt; Optional&lt;uint64_t&gt; TrueBBCount;<br>&gt;&gt; <br>&gt;&gt; /// The number of times the False branch was executed.<br>&gt;&gt; Optional&lt;uint64_t&gt; FalseBBCount;<br>&gt;&gt; <br>&gt;&gt; I fixed up the SILCloner and a few other sites where conditional branches are<br>&gt;&gt; created to propagate the branch taken counts. I have a patch to propagate<br>&gt;&gt; branch taken counts through the SILOptimizer, but I didn&#39;t include it in [1]<br>&gt;&gt; because I don&#39;t know how to write tests for it.<br>&gt;&gt; <br>&gt;&gt; In IRGen, I added some logic to scale execution counts and create llvm<br>&gt;&gt; branch_weight metadata.<br>&gt;&gt; <br>&gt;&gt; Some questions:<br>&gt;&gt; <br>&gt;&gt; 1. Is it acceptable to make some SIL objects larger in order to store<br>&gt;&gt;    execution counts (e.g CondBranchInst)?<br>&gt; <br>&gt; Yes, I don’t see a problem with that.<br>&gt; But for saving some space, you might want to store the counts as a plain uint64_t instead of an Optional and use a special value (e.g. ~0) for the none-case.<br></p><p>Right, this makes sense. Reserving that value should be fine, since it looks<br>like llvm expects weights to be scaled below UINT32_MAX.<br></p><p><br>&gt;&gt; If not, what&#39;s the best way to make<br>&gt;&gt;    this information visible to SILOptimizer and IRGen?<br>&gt;&gt; <br>&gt;&gt; 2. Is it better to associate counts with SIL instructions, or with<br>&gt;&gt;    SILSuccessor?<br>&gt; <br>&gt; I think storing the counts in SILSuccessor makes sense, because counts are needed for all kind of terminator instructions (like switch_enum), except for the unconditional br, but IMO we can live with wasting some bytes for this instructions.<br></p><p>Storing counts in SILSuccessor has pros and cons, like you mentioned. It may<br>lead to wasted space in some cases, but would require fewer invasive API<br>changes to implement.<br></p><p><br>&gt; Another thing to consider is that the count information should be printed/parsed/serialized when writing and reading SIL.<br></p><p>Yes! I jotted these down as &quot;TODO&#39;s&quot; in my commit messages.<br></p><p><br>&gt;&gt; 3. Does anyone have tips on modifying swift/benchmark? I&#39;d like to add a<br>&gt;&gt;    benchmark driver which generates profile data, and another driver which<br>&gt;&gt;    uses that data to turn on PGO.<br></p><p>I still need to work out how to configure swift/benchmark.<br></p><p>At any rate, I&#39;m going to start gradually cleaning up these patches and<br>submitting PR&#39;s. I expect swift to support frontend-based PGO in the future,<br>but if it doesn&#39;t, some of these patches will still be useful. I&#39;d rather have<br>them in-tree than let them bitrot.<br></p><p>Here&#39;s the first one:<br></p><p>    https://github.com/apple/swift/pull/4675<br></p><p>Reviews appreciated :).<br></p><p>best,<br>vedant<br></p><p><br>&gt;&gt; <br>&gt;&gt; thanks,<br>&gt;&gt; vedant<br>&gt;&gt; <br>&gt;&gt; [1] https://github.com/vedantk/swift/tree/profile_use<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
