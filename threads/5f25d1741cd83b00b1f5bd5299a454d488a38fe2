<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd72324972b4859ccfe8713465cc132d?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Igor Vasilenko</string> &lt;spb.vasilenko at gmail.com&gt;<p>September  7, 2016 at 11:00:00am</p></header><div class="content"><p>Introduction<br></p><p>Right now, for Array implemented array.contains(element) and array.indexOf(element)for searching in an array. Both of these methods iterate over all elements in the array, starting at index 0, until they find a match. In the worst case (there is no match), they have to iterate over the entire array. In big O notation, the methods’ performance characteristic is O(n). This is usually not a problem for small arrays with only a few dozen elements. But if your code regularly needs to find objects in arrays with thousands of elements, you may want to look for a faster search algorithm.<br></p><p>Motivation<br></p><p>If the array is sorted by the search key, binary search can give you a huge boost in performance. By comparing the middle element in the array to the search item, the algorithm effectively halves the number of elements it has to search trough with each iteration. Binary search has O(log n) performance. What does this mean in practice? Searching a sorted array of 100,000 elements using binary search would require at most 17 comparisons compared to the 50,000 comparisons a naive linear search would take on average.<br></p><p>Detailed design<br></p><p>public func binarySearch&lt;T: Comparable&gt;(array: [T], key: T, range: Range&lt;Int&gt;) -&gt; Int? {<br>    if range.startIndex &gt;= range.endIndex {<br>        return nil<br>    } else {<br>        let midIndex = range.endIndex + (range.endIndex - range.startIndex) / 2<br>        if array[midIndex] &gt; key {<br>            return binarySearch(array, key: key, range: range.startIndex ..&lt; midIndex)<br>        } else if array[midIndex] &lt; key {<br>            return binarySearch(array, key: key, range: midIndex + 1 ..&lt; range.endIndex)<br>        } else {<br>            return midIndex<br>        }<br>    }<br>}<br></p><p>let numbers = [1, 2, 3, 4, 5]<br>binarySearch(numbers, key: 3, range: 1 ..&lt; numbers.count)<br>Best regards, Igor Vasilenko <br></p><p>iOS Developer at Yota<br></p><p>spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br></p><p><br></p><p><br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/5f258fe2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>September  7, 2016 at 11:00:00am</p></header><div class="content"><p>Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br></p><p>This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion...<br></p><p>&gt; On Sep 7, 2016, at 10:59 AM, Igor Vasilenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Introduction<br>&gt; <br>&gt; Right now, for Array implemented array.contains(element) and array.indexOf(element)for searching in an array. Both of these methods iterate over all elements in the array, starting at index 0, until they find a match. In the worst case (there is no match), they have to iterate over the entire array. In big O notation, the methods’ performance characteristic is O(n). This is usually not a problem for small arrays with only a few dozen elements. But if your code regularly needs to find objects in arrays with thousands of elements, you may want to look for a faster search algorithm.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; If the array is sorted by the search key, binary search can give you a huge boost in performance. By comparing the middle element in the array to the search item, the algorithm effectively halves the number of elements it has to search trough with each iteration. Binary search has O(log n) performance. What does this mean in practice? Searching a sorted array of 100,000 elements using binary search would require at most 17 comparisons compared to the 50,000 comparisons a naive linear search would take on average.<br>&gt; <br>&gt; Detailed design<br>&gt; <br>&gt; public func binarySearch&lt;T: Comparable&gt;(array: [T], key: T, range: Range&lt;Int&gt;) -&gt; Int? {<br>&gt;     if range.startIndex &gt;= range.endIndex {<br>&gt;         return nil<br>&gt;     } else {<br>&gt;         let midIndex = range.endIndex + (range.endIndex - range.startIndex) / 2<br>&gt;         if array[midIndex] &gt; key {<br>&gt;             return binarySearch(array, key: key, range: range.startIndex ..&lt; midIndex)<br>&gt;         } else if array[midIndex] &lt; key {<br>&gt;             return binarySearch(array, key: key, range: midIndex + 1 ..&lt; range.endIndex)<br>&gt;         } else {<br>&gt;             return midIndex<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let numbers = [1, 2, 3, 4, 5]<br>&gt; binarySearch(numbers, key: 3, range: 1 ..&lt; numbers.count)<br>&gt; Best regards, Igor Vasilenko <br>&gt; <br>&gt; iOS Developer at Yota<br>&gt; <br>&gt; spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/867b113f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd72324972b4859ccfe8713465cc132d?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Igor Vasilenko</string> &lt;spb.vasilenko at gmail.com&gt;<p>September  7, 2016 at 12:00:00pm</p></header><div class="content"><p>In my mind, caller should be guarantee that array is sorted. As an example, in Objective-C SDK, NSArray should be is sorted before for using binary search method.<br>But this is a good idea to make a SortedArray. <br>Best regards, Igor Vasilenko <br></p><p>iOS Developer at Yota<br></p><p>+7 (999) 527 - 07 - 59<br>spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br>www.spbvasilenko.github.io &lt;http://www.e-legion.com/&gt;<br></p><p><br></p><p><br></p><p><br></p><p>&gt; On 07 Sep 2016, at 12:08, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br>&gt; <br>&gt; This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion...<br>&gt; <br>&gt;&gt; On Sep 7, 2016, at 10:59 AM, Igor Vasilenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Right now, for Array implemented array.contains(element) and array.indexOf(element)for searching in an array. Both of these methods iterate over all elements in the array, starting at index 0, until they find a match. In the worst case (there is no match), they have to iterate over the entire array. In big O notation, the methods’ performance characteristic is O(n). This is usually not a problem for small arrays with only a few dozen elements. But if your code regularly needs to find objects in arrays with thousands of elements, you may want to look for a faster search algorithm.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; If the array is sorted by the search key, binary search can give you a huge boost in performance. By comparing the middle element in the array to the search item, the algorithm effectively halves the number of elements it has to search trough with each iteration. Binary search has O(log n) performance. What does this mean in practice? Searching a sorted array of 100,000 elements using binary search would require at most 17 comparisons compared to the 50,000 comparisons a naive linear search would take on average.<br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; public func binarySearch&lt;T: Comparable&gt;(array: [T], key: T, range: Range&lt;Int&gt;) -&gt; Int? {<br>&gt;&gt;     if range.startIndex &gt;= range.endIndex {<br>&gt;&gt;         return nil<br>&gt;&gt;     } else {<br>&gt;&gt;         let midIndex = range.endIndex + (range.endIndex - range.startIndex) / 2<br>&gt;&gt;         if array[midIndex] &gt; key {<br>&gt;&gt;             return binarySearch(array, key: key, range: range.startIndex ..&lt; midIndex)<br>&gt;&gt;         } else if array[midIndex] &lt; key {<br>&gt;&gt;             return binarySearch(array, key: key, range: midIndex + 1 ..&lt; range.endIndex)<br>&gt;&gt;         } else {<br>&gt;&gt;             return midIndex<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let numbers = [1, 2, 3, 4, 5]<br>&gt;&gt; binarySearch(numbers, key: 3, range: 1 ..&lt; numbers.count)<br>&gt;&gt; Best regards, Igor Vasilenko <br>&gt;&gt; <br>&gt;&gt; iOS Developer at Yota<br>&gt;&gt; <br>&gt;&gt; spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/1d8e9236/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>September  7, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 7 Sep 2016, at 10:08, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br>&gt; <br>&gt; This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion…<br></p><p>I don&#39;t think this is really a problem, just needs to be clear that behaviour is undefined if the array wasn&#39;t previously sorted (or not in the same order).<br></p><p>On this topic there was a previous proposal that was undergoing refinements after being initially rejected, you can find it here:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8a7a98d998c4108fe9443d33575515bf?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Guillaume DIDIER</string> &lt;guillaume.didier.2014 at polytechnique.org&gt;<p>September  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Basically for a binary search to work it needs to operate on a sorted array (it is a necessary invariant).<br></p><p>It is really interesting when you make a lot of search in the same sorted array, hence I would +1 the sorted array, with initializer from an array.<br></p><p><br>Guillaume  DIDIER<br>—<br>ÉCOLE POLYTECHNIQUE<br>91128 PALAISEAU CEDEX<br>M. +33 (0)7 70 43 18 40<br>guillaume.didier at polytechnique.edu &lt;mailto:guillaume.didier at polytechnique.edu?subject=&gt;<br>www.polytechnique.edu &lt;http://www.polytechnique.edu/&gt;<br>—<br></p><p>&gt; Le 7 sept. 2016 à 12:04, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On 7 Sep 2016, at 10:08, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br>&gt;&gt; <br>&gt;&gt; This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion…<br>&gt; <br>&gt; I don&#39;t think this is really a problem, just needs to be clear that behaviour is undefined if the array wasn&#39;t previously sorted (or not in the same order).<br>&gt; <br>&gt; On this topic there was a previous proposal that was undergoing refinements after being initially rejected, you can find it here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/8d25574c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd72324972b4859ccfe8713465cc132d?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Igor Vasilenko</string> &lt;spb.vasilenko at gmail.com&gt;<p>September  7, 2016 at 01:00:00pm</p></header><div class="content"><p>do you mean this?<br>public func binarySearch&lt;T: Comparable&gt;(array: [T], key: T, range: Range&lt;Int&gt;, sorted: Bool) -&gt; Int?<br>Best regards, Igor Vasilenko <br></p><p>iOS Developer at Yota<br></p><p>+7 (999) 527 - 07 - 59<br>spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br>www.spbvasilenko.github.io &lt;http://www.e-legion.com/&gt;<br></p><p><br></p><p><br></p><p><br></p><p>&gt; On 07 Sep 2016, at 13:08, Guillaume DIDIER &lt;guillaume.didier.2014 at polytechnique.org&gt; wrote:<br>&gt; <br>&gt; Basically for a binary search to work it needs to operate on a sorted array (it is a necessary invariant).<br>&gt; <br>&gt; It is really interesting when you make a lot of search in the same sorted array, hence I would +1 the sorted array, with initializer from an array.<br>&gt; <br>&gt; <br>&gt; Guillaume  DIDIER<br>&gt; —<br>&gt; ÉCOLE POLYTECHNIQUE<br>&gt; 91128 PALAISEAU CEDEX<br>&gt; M. +33 (0)7 70 43 18 40<br>&gt; guillaume.didier at polytechnique.edu &lt;mailto:guillaume.didier at polytechnique.edu?subject=&gt;<br>&gt; www.polytechnique.edu &lt;http://www.polytechnique.edu/&gt;<br>&gt; —<br>&gt; <br>&gt;&gt; Le 7 sept. 2016 à 12:04, Haravikk via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 7 Sep 2016, at 10:08, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion…<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think this is really a problem, just needs to be clear that behaviour is undefined if the array wasn&#39;t previously sorted (or not in the same order).<br>&gt;&gt; <br>&gt;&gt; On this topic there was a previous proposal that was undergoing refinements after being initially rejected, you can find it here:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/750b4d38/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Igor,<br></p><p>Since your proposal would be additive, it probably wouldn&#39;t be considered<br>for review until the next phase of Swift evolution.<br></p><p>My read of the core team&#39;s feedback is that some binary search<br>functionality is welcome, but it&#39;s a question of *how* it&#39;s designed. When<br>purely additive changes are in scope, a successful proposal will likely<br>address the weaknesses of the previous proposal. Since that proposal<br>considered as an alternative a design such as yours, but it concluded that<br>a different design was better, you&#39;ll probably want to address why you<br>think this API design is best, or alternatively, you may want to study the<br>alternatives presented in that proposal and refine them to be better.<br>On Wed, Sep 7, 2016 at 05:16 Igor Vasilenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; do you mean this?<br>&gt;<br>&gt; public func binarySearch&lt;T: Comparable&gt;(array: [T], key: T, range: Range&lt;Int&gt;, sorted: Bool) -&gt; Int?<br>&gt;<br>&gt; Best regards, Igor Vasilenko<br>&gt;<br>&gt; iOS Developer at Yota<br>&gt;<br>&gt; +7 (999) 527 - 07 - 59<br>&gt; spb.vasilenko at gmail.com &lt;name.surname at e-legion.com&gt;<br>&gt; www.spbvasilenko.github.io &lt;http://www.e-legion.com/&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 07 Sep 2016, at 13:08, Guillaume DIDIER &lt;<br>&gt; guillaume.didier.2014 at polytechnique.org&gt; wrote:<br>&gt;<br>&gt; Basically for a binary search to work it needs to operate on a sorted<br>&gt; array (it is a necessary invariant).<br>&gt;<br>&gt; It is really interesting when you make a lot of search in the same sorted<br>&gt; array, hence I would +1 the sorted array, with initializer from an array.<br>&gt;<br>&gt;<br>&gt; *Guillaume  DIDIER*<br>&gt; —<br>&gt; *ÉCOLE POLYTECHNIQUE*<br>&gt; 91128 PALAISEAU CEDEX<br>&gt; M. +33 (0)7 70 43 18 40<br>&gt; guillaume.didier at polytechnique.edu<br>&gt; &lt;guillaume.didier at polytechnique.edu?subject=&gt;<br>&gt; www.polytechnique.edu<br>&gt; —<br>&gt;<br>&gt; Le 7 sept. 2016 à 12:04, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; On 7 Sep 2016, at 10:08, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Aside from this being additive (i.e. out of scope for Swift 4), this<br>&gt; requires the array to be sorted in order for the search to work - who will<br>&gt; guarantee this? The caller? What happens when this is called on an array<br>&gt; that is not sorted? You likely get nil, while the item is in the array<br>&gt; (false negative).<br>&gt;<br>&gt; This would probably make sense by not extending Array itself, but<br>&gt; introducing SortedArray which would automatically keep its members sorted<br>&gt; instead - this way there would be a guarantee that the array is sorted and<br>&gt; the user won&#39;t have to deal with sorting the array. It would however be at<br>&gt; the cost of O(log N) for insertion…<br>&gt;<br>&gt;<br>&gt; I don&#39;t think this is really a problem, just needs to be clear that<br>&gt; behaviour is undefined if the array wasn&#39;t previously sorted (or not in the<br>&gt; same order).<br>&gt;<br>&gt; On this topic there was a previous proposal that was undergoing<br>&gt; refinements after being initially rejected, you can find it here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/7bf137ae/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd72324972b4859ccfe8713465cc132d?s=50"></div><header><strong>[Proposal] Add Array binary search to the standard library</strong> from <string>Igor Vasilenko</string> &lt;spb.vasilenko at gmail.com&gt;<p>September  7, 2016 at 01:00:00pm</p></header><div class="content"><p>This is mean that my PR/proposal will be as duplicate previous rejected proposal?  <br>Or my proposal have a good chance for accept? <br>Best regards, Igor Vasilenko <br></p><p>iOS Developer at Yota<br></p><p>+7 (999) 527 - 07 - 59<br>spb.vasilenko at gmail.com &lt;mailto:name.surname at e-legion.com&gt;<br>www.spbvasilenko.github.io &lt;http://www.e-legion.com/&gt;<br></p><p><br></p><p><br></p><p><br></p><p>&gt; On 07 Sep 2016, at 13:04, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 7 Sep 2016, at 10:08, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Aside from this being additive (i.e. out of scope for Swift 4), this requires the array to be sorted in order for the search to work - who will guarantee this? The caller? What happens when this is called on an array that is not sorted? You likely get nil, while the item is in the array (false negative).<br>&gt;&gt; <br>&gt;&gt; This would probably make sense by not extending Array itself, but introducing SortedArray which would automatically keep its members sorted instead - this way there would be a guarantee that the array is sorted and the user won&#39;t have to deal with sorting the array. It would however be at the cost of O(log N) for insertion…<br>&gt; <br>&gt; I don&#39;t think this is really a problem, just needs to be clear that behaviour is undefined if the array wasn&#39;t previously sorted (or not in the same order).<br>&gt; <br>&gt; On this topic there was a previous proposal that was undergoing refinements after being initially rejected, you can find it here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0074-binary-search.md<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/e1bc40be/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
