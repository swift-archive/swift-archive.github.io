<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e2aa7fd262b7c4b6f53a89a52f527f9?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>Travis Griggs</string> &lt;travisgriggs at gmail.com&gt;<p>August 24, 2016 at 06:00:00pm</p></header><div class="content"><p>Upgrading to beta6 of Xcode8, I’ve read through various SE’s and made fixes as appropriate, but the following behavior I didn’t catch an explanation as to why its now an error where it was fine before.<br></p><p>In a ViewController, I have something that looks like:<br></p><p>    var addButton = UIButton(type: .custom)<br>    var addPrompt = UILabel()<br>    var timesButton = UIButton(type: .system)<br>    var removeButton = UIButton(type: .system)<br>    var menuButton = UIButton(type: .system)<br>	<br>    func commonInit() {<br>        [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { control in<br>            control.sizeToFit()<br>            self.addSubview(control)<br>    }<br></p><p>This code was fine until the latest update. It seemed to a heterogenous array of UILabel and UIButtons was a homogeneous array of UIView objects. But now I get the errors:<br></p><p>    Value of type ‘Any’ has no member ‘sizeToFit&#39;<br>    Cannot covert value of type ‘Any’ to expected argument type of ‘UIView’<br></p><p>This seems like it might be related to SE-0116 (Import Objective-C id as Swift Any ) but I’m not sure why the inferencer can no longer find the shared parent type, where it could before.<br></p><p>Aside, I can fix it by simply helping it a little, e.g.<br></p><p>    [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { (control:UIView) in...<br></p><p>But remain curious why the inferencer can’t handle this for me anymore.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>August 25, 2016 at 09:00:00am</p></header><div class="content"><p>You can’t call arbitrary functions on AnyObject anymore. Previously, you could do this:<br></p><p>let a: AnyObject = UIView()<br>a.hasPrefix(“test”) // This compiled (because hasPrefix(:_) exists on NSString), but would obviously crash<br></p><p>This is not allowed anymore.<br></p><p>&gt; On 25 Aug 2016, at 03:33, Travis Griggs via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Upgrading to beta6 of Xcode8, I’ve read through various SE’s and made fixes as appropriate, but the following behavior I didn’t catch an explanation as to why its now an error where it was fine before.<br>&gt; <br>&gt; In a ViewController, I have something that looks like:<br>&gt; <br>&gt;    var addButton = UIButton(type: .custom)<br>&gt;    var addPrompt = UILabel()<br>&gt;    var timesButton = UIButton(type: .system)<br>&gt;    var removeButton = UIButton(type: .system)<br>&gt;    var menuButton = UIButton(type: .system)<br>&gt; 	<br>&gt;    func commonInit() {<br>&gt;        [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { control in<br>&gt;            control.sizeToFit()<br>&gt;            self.addSubview(control)<br>&gt;    }<br>&gt; <br>&gt; This code was fine until the latest update. It seemed to a heterogenous array of UILabel and UIButtons was a homogeneous array of UIView objects. But now I get the errors:<br>&gt; <br>&gt;    Value of type ‘Any’ has no member ‘sizeToFit&#39;<br>&gt;    Cannot covert value of type ‘Any’ to expected argument type of ‘UIView’<br>&gt; <br>&gt; This seems like it might be related to SE-0116 (Import Objective-C id as Swift Any ) but I’m not sure why the inferencer can no longer find the shared parent type, where it could before.<br>&gt; <br>&gt; Aside, I can fix it by simply helping it a little, e.g.<br>&gt; <br>&gt;    [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { (control:UIView) in...<br>&gt; <br>&gt; But remain curious why the inferencer can’t handle this for me anymore.<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/389ea0cf26e2a2d4646bf580da2fb6b5?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>Martin R</string> &lt;martinr448 at gmail.com&gt;<p>August 25, 2016 at 09:00:00am</p></header><div class="content"><p>Did that change recently? In Xcode 8 beta 6<br></p><p>    let a: AnyObject = UIView()<br>    a.hasPrefix(&quot;test&quot;)<br></p><p>still compiles (but of course crashes at runtime). <br></p><p>Martin<br></p><p>&gt; Am 25.08.2016 um 09:23 schrieb David Hart via swift-users &lt;swift-users at swift.org&gt;:<br>&gt; <br>&gt; You can’t call arbitrary functions on AnyObject anymore. Previously, you could do this:<br>&gt; <br>&gt; let a: AnyObject = UIView()<br>&gt; a.hasPrefix(“test”) // This compiled (because hasPrefix(:_) exists on NSString), but would obviously crash<br>&gt; <br>&gt; This is not allowed anymore.<br>&gt; <br>&gt;&gt; On 25 Aug 2016, at 03:33, Travis Griggs via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Upgrading to beta6 of Xcode8, I’ve read through various SE’s and made fixes as appropriate, but the following behavior I didn’t catch an explanation as to why its now an error where it was fine before.<br>&gt;&gt; <br>&gt;&gt; In a ViewController, I have something that looks like:<br>&gt;&gt; <br>&gt;&gt;   var addButton = UIButton(type: .custom)<br>&gt;&gt;   var addPrompt = UILabel()<br>&gt;&gt;   var timesButton = UIButton(type: .system)<br>&gt;&gt;   var removeButton = UIButton(type: .system)<br>&gt;&gt;   var menuButton = UIButton(type: .system)<br>&gt;&gt; 	<br>&gt;&gt;   func commonInit() {<br>&gt;&gt;       [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { control in<br>&gt;&gt;           control.sizeToFit()<br>&gt;&gt;           self.addSubview(control)<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; This code was fine until the latest update. It seemed to a heterogenous array of UILabel and UIButtons was a homogeneous array of UIView objects. But now I get the errors:<br>&gt;&gt; <br>&gt;&gt;   Value of type ‘Any’ has no member ‘sizeToFit&#39;<br>&gt;&gt;   Cannot covert value of type ‘Any’ to expected argument type of ‘UIView’<br>&gt;&gt; <br>&gt;&gt; This seems like it might be related to SE-0116 (Import Objective-C id as Swift Any ) but I’m not sure why the inferencer can no longer find the shared parent type, where it could before.<br>&gt;&gt; <br>&gt;&gt; Aside, I can fix it by simply helping it a little, e.g.<br>&gt;&gt; <br>&gt;&gt;   [self.addButton, self.addPrompt, self.timesButton, self.removeButton, self.menuButton].forEach { (control:UIView) in...<br>&gt;&gt; <br>&gt;&gt; But remain curious why the inferencer can’t handle this for me anymore.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>August 25, 2016 at 08:00:00am</p></header><div class="content"><p>On 25 Aug 2016, at 08:23, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; You can’t call arbitrary functions on AnyObject anymore.<br></p><p>You’re mixing up `Any` and `AnyObject`.  You can still call arbitrary methods on `AnyObject`, as Martin demonstrated, but Travis’s error message referenced `Any`.<br></p><p>SE-0116 [1] means that `Any` is a lot more common these days.<br></p><p>Notwithstanding the above, I don’t have any input on the change of behaviour Travis is seeing.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p><p>[1] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>August 25, 2016 at 10:00:00am</p></header><div class="content"><p>That proposal also says:<br>Deciding the fate of AnyObject lookup<br></p><p>We currently bestow the AnyObject existential type with the special ability to look up any @objc method dynamically, in order to ensure id-based ObjC APIs remain fluent when used in Swift. This is another special, unprincipled, nonportable feature that relies on the Objective-C runtime. If we change  id to bridge to Any, it definitely no longer makes sense to apply to AnyObject. A couple of possibilities to consider:<br></p><p>We could transfer the existing AnyObject behavior verbatim to Any.<br>We could attempt to eliminate the behavior as a language feature. An approximation of AnyObject&#39;s magic behavior can be made using operators and unapplied method references, in a way that also works for Swift types:<br></p><p>  /// Dynamically dispatch a method on Any.<br>  func =&gt; &lt;T, V&gt;(myself: Any, method: (T) -&gt; V) -&gt; V? {<br>    if let myself = myself as? T {<br>      return method(myself)<br>    }<br>    return nil<br>  }<br>though that&#39;s not quite the right thing for id lookup, since you want a respondsToSelector rather than isKindOfClass check.<br></p><p>We could narrow the scope of the behavior. Jordan has suggested allowing only property and subscript lookup off of AnyObject or Any, as a way of allowing easy navigation of property lists, one of the most common sources of id in Foundation.<br>If we&#39;re confident that the SDK will be sufficiently Swiftified that ids become relatively rare, maybe we could get away without a replacement at all.<br>What was decided concerning that? I felt sure that the lookup had been completely removed, but I’m obviously mistaken.<br></p><p>David.<br></p><p><br>&gt; On 25 Aug 2016, at 09:59, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 25 Aug 2016, at 08:23, David Hart via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; You can’t call arbitrary functions on AnyObject anymore.<br>&gt; <br>&gt; You’re mixing up `Any` and `AnyObject`.  You can still call arbitrary methods on `AnyObject`, as Martin demonstrated, but Travis’s error message referenced `Any`.<br>&gt; <br>&gt; SE-0116 [1] means that `Any` is a lot more common these days.<br>&gt; <br>&gt; Notwithstanding the above, I don’t have any input on the change of behaviour Travis is seeing.<br>&gt; <br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; [1] &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160825/9f1fea2c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>August 25, 2016 at 09:00:00am</p></header><div class="content"><p>On 25 Aug 2016, at 09:27, David Hart &lt;david at hartbit.com&gt; wrote:<br></p><p>&gt; That proposal also says:<br></p><p>Indeed.  Good point.<br></p><p>&gt; What was decided concerning that?<br></p><p>I don’t know, although given that that text was from the “Future Directions” section it seems like that nothing has changed yet.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Regression in Xcode8-beta6 Swift?</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>August 25, 2016 at 10:00:00am</p></header><div class="content"><p>I misunderstood the release notes for Xcode 8 beta 6 I read a few days ago. Here what will interest you:<br></p><p>Since ‘id’ now imports as ‘Any’ rather than ‘AnyObject’, you may see errors where you were previously performing dynamic lookup on ‘AnyObject’. For example in:<br></p><p>      guard let fileEnumerator = FileManager.default.enumerator(atPath: path)<br>      else {<br>return }<br></p><p>      for fileName in fileEnumerator {<br>          if fileName.hasSuffix(&quot;.txt&quot;) {<br>              // error: value of type ‘Element’ (aka ‘Any’) has no member<br>      hasSuffix<br>              print(fileName)<br>          }<br>}<br>The fix is to either cast to AnyObject explicitly before doing the dynamic lookup, or force cast to a<br></p><p>specific object type:<br></p><p>      guard let fileEnumerator = FileManager.default.enumerator(atPath: path)<br>      else {<br>return }<br></p><p>      for fileName in fileEnumerator {<br>          if (fileName as AnyObject).hasSuffix(&quot;.txt&quot;) {<br>              // cast to AnyObject<br>              print(fileName)<br>          }<br>}<br></p><p>(27639935) <br></p><p><br></p><p>&gt; On 25 Aug 2016, at 10:32, Quinn The Eskimo! via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; On 25 Aug 2016, at 09:27, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt;&gt; That proposal also says:<br>&gt; <br>&gt; Indeed.  Good point.<br>&gt; <br>&gt;&gt; What was decided concerning that?<br>&gt; <br>&gt; I don’t know, although given that that text was from the “Future Directions” section it seems like that nothing has changed yet.<br>&gt; <br>&gt; Share and Enjoy<br>&gt; --<br>&gt; Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>&gt; Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160825/2fc7f758/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
