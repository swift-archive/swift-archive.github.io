<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal Draft] Provide Custom Collections for Dictionary Keys and Values</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 12, 2016 at 11:00:00pm</p></header><div class="content"><p>on Wed Oct 12 2016, Alexis &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Just to clarify: It seems like the only ABI-affecting change here is the type of keys/values. As you<br>&gt; note at the end of your proposal, this should just be Dictionary.Keys/Dictionary.Values regardless<br>&gt; of whether we implement this proposal or not, in which case this can<br>&gt; be punted for Swift 4. <br></p><p>No, it can&#39;t, in the sense that just making them typealiases would be<br>insufficient to create resilience.<br></p><p>&gt; It should be fine to keep .Keys/.Values resilient so that we can<br>&gt; change their implementation details later if we want.<br>&gt;<br>&gt; On the actual proposal: this is a pretty reasonable given Swift’s<br>&gt; current design and constraints. That said, I expect pushing forward on<br>&gt; this kind of thing right now is premature given the goals of Swift<br>&gt; 4. A major aspect of Swift 4 is reworking the way CoW semantics<br>&gt; function internally, which could drastically affect the way we<br>&gt; approach this problem.<br>&gt;<br>&gt; I’d really like if we could eliminate the “double search/hash” in the<br>&gt; no-existing-key case. There are ways to do this really cleanly, but<br>&gt; they probably involve more advanced CoW-safety propagation. In<br>&gt; particular, you want some way for the collection to return its search<br>&gt; state to the caller so that they can hand it back to insertion to just<br>&gt; resume from there.<br>&gt;<br>&gt; For instance:<br>&gt;<br>&gt; map.entries[key]           // An enum like Found(Value) | NotFound(SearchState)<br>&gt;    .withDefault(value: []) // Unwrap the enum by completing the NotFound(SearchState)<br>&gt;    .append(1)              // Now we have a value in both cases, we can append!<br>&gt;<br>&gt; Or more complex:<br>&gt;<br>&gt; map.entries[key] <br>&gt;    .withDefault { /* logic that computes value */ }<br>&gt;    .append(1)<br>&gt;<br>&gt; I think this can be made to work in the current system if withDefault<br>&gt; is actually `[withDefault:]`, which is fine but a bit weird from a<br>&gt; user’s perspective.<br></p><p>IMO this should be written as follows:<br></p><p>  map[key, default: []].append(1)<br></p><p>&gt; In an ideal world the user could actually pattern match on the result<br>&gt; of `entries[key]`. In this way they could match on it and perform<br>&gt; special logic in both cases for really complex situations. This would<br>&gt; make withDefault “just a convenience”, so we aren’t pressured to add<br>&gt; more methods like it every time someone has a new Even More Complex<br>&gt; use-case. e.g.:<br>&gt;<br>&gt; switch map.entries[key] {<br>&gt; case .Found(entry):<br>&gt;   if entry.value == 10 { <br>&gt;     entry.remove()<br>&gt;     print(“Found a value too many times! Moving key to fast-path auxiliary structure…”) <br>&gt;   } else {<br>&gt;     entry.value += 1<br>&gt;   }<br>&gt; case .NotFound(entry):<br>&gt;   entry.insert(1)<br>&gt;   print(“Found a value for the first time! Registering a bunch of extra stuff…”) <br>&gt; }<br>&gt;<br>&gt; But again, this is all dependent on a much more powerful SIL/ARC, and<br>&gt; we just don’t know what we’re going to get at this stage.<br></p><p>This compiles today:<br></p><p>  extension Dictionary {<br>    subscript(k: Key, body: (inout Value?)-&gt;()) -&gt; Void {<br>      get {<br>        // Exercise for the reader.  Efficient and safe implementation only<br>        // possible inside the stdlib.<br>      }<br>    }<br>  }<br></p><p>  map[key] { v in <br>    if let found = v { <br>      if found == 10 { v = nil; print(&quot;Found too many&quot;) }<br>      else { v = found + 1 }<br>    }<br>    else {<br>      v = 1<br>      print(&quot;Found first&quot;)<br>    }<br>  }<br></p><p>No need, really, to use subscript; it could be spelled:<br></p><p>  map.withValue(forKey: key) { ... }<br></p><p>ersump&#39;n.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
