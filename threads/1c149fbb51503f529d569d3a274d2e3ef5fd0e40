<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 11, 2016 at 10:00:00am</p></header><div class="content"><p>While I&#39;m not keen on introducing braces, your comparison to property getters and setters is a good one. This is an inconsistency.<br></p><p>To be honest, I wouldn&#39;t mind putting up with braces for a while, with the promise that we&#39;ll get a lightweight alternative to the switch statement, like the ternary operator is to if statements.<br>I feel like I use switch much more often to initialise a variable, or return a value, than I do to branch program logic (especially working with with enums), and it already seems a very heavy construct in these cases.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;0C3EC993-9320-4F4C-B2AA-66967BEDFFED at gmail.com&gt; <br></p><p>The discussion so far has given me a chance to organize my thinking, so here’s a more complete train of thought.<br></p><p>I get that people don’t like extra punctuation.  The commonly rejected proposals, however, make it clear that braces are here to stay and we should be designing the syntax right now with that in mind.  It took me a long time to get used to not using them in Python, now I’m getting used to using them again in Swift.  Swift has a long life ahead of it, and there are going to be plenty of places where the syntax is going to become inconsistent in the service of supporting new features.  Now is when we set the starting point though and try to set ourselves up in a way that requires a minimum of syntax goofs in the future.<br></p><p><br>―=Philosophy=― <br></p><p>As philosophical backdrop, here’s the link on removing braces in the “commonly rejected proposals” section:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br></p><p>I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&quot;There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure.”<br></p><p>and another edited as suggested by Chris Lattner:<br>&quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that is most familiar to programmers in the extended C family is a good idea.&quot;<br></p><p><br>So, from that I take:<br>1) braces indicate scoping<br>2) conciseness isn’t an end in itself<br>3) we should err on the side of being Cish when no other arguments prevail.<br></p><p><br></p><p><br>―=In C `cases` Aren’t Scopes, in Swift They Are=―<br></p><p>Starting from what’s Cish, here’s a snippet of Swift code:<br></p><p>let x=5<br>switch x {<br>  case 3:<br>    let y=5<br>    print(x,&quot; &quot;,y)<br></p><p>  case 5:<br>    print(&quot;Two&quot;,x,&quot;s”)<br></p><p>  default:<br>    print(“default&quot;)<br>}<br></p><p><br>This runs fine and prints “Two 5 s” to the console.<br></p><p>This is something similar in C:<br></p><p>int x=5;<br>switch (x) {<br>  case 3:<br>    int y=5;<br>    printf(&quot;%d %d&quot;,x,y);<br>    break;<br></p><p>  case 5:<br>    printf(&quot;Two %d s&quot;,x);<br>    break;<br></p><p>  default:<br>    printf(“default&quot;);<br>}<br></p><p><br>This code fails.  C gives me an error pointing at `int y=5;` complaining that it expected an expression there.  C++ gives me an error that it can’t jump to `case 5:` because it would skip over the declaration of `y`.<br></p><p>I can fix this in both C and C++ by wrapping the `case 3:` in curly braces, creating a local scope:<br></p><p>int x=5;<br>switch (x) {<br>  case 3:  {<br>    int y=5;<br>    printf(&quot;%d %d&quot;,x,y);<br>    break;<br>  }<br></p><p>  case 5:<br>    printf(&quot;Two %d s&quot;,x);<br>    break;<br></p><p>  default:<br>    printf(&quot;default&quot;);<br>}<br></p><p>This code compiles fine in both C and C++.  A new scope has been delimited and created, and `y` only exists in that scope.<br></p><p><br>So, by both criteria 1) and 3), Swift should be using braces on `case` statements.  Each case is a scope unto itself, and the extended C family of languages would require braces in that event.<br></p><p><br></p><p><br></p><p>―=Conciseness, Ugliness and Nested Braces=―<br></p><p>Conciseness is not an emphasis of Swift, but even if it were then this is not a particularly in-concise change to the syntax.  The suggestion here is to remove one punctuation mark and add two for a net gain of 1 character.  This doesn’t strike me as unduly burdensome.<br></p><p>The better arguments are those on aesthetics and ease of use.  Each of these seems to focus on opposite situations.  The ugliness is when there is only one line per case, the ease of use challenge is when there are many and the developer needs to determine how many braces to close.<br></p><p>How common is it to have a single line per case?<br></p><p>Aesthetics, at least, are mostly subjective.  Ease of use, in part, depends on habits.  In both cases, however, I’d argue that the aesthetically preferable design, and the method least likely to introduce errors, is the one that is most consistent with the rest of the language.  Things tend to be uglier when they stand out as unusual, and habits force us to follow patterns, introducing errors when the pattern doesn’t hold.<br></p><p>From that perspective, this is what Swift looks like everywhere else:<br></p><p>if x = 3      { print(“Three”) }<br>else if x = 5 { print(“Five”) }<br>else          { print(“Default”) }<br></p><p>It also doesn’t shy away from nested braces:<br></p><p>var x:Int {<br>  get { return _x }<br>  set { _x = newValue }<br>}<br></p><p><br>Aesthetically, is it less ugly to have some scopes require braces and others not?  I really thought the square bracket messaging syntax of Obj-C was ugly until I got used to it because square brackets were for subscripting and looked “heavy” for method calls.  <br></p><p>From an ease of use perspective, it is more likely to forget to add a closing brace when braces are used everywhere, or to accidentally add one in the one place they aren’t?<br></p><p><br></p><p><br>―=What Isn’t Like C Shouldn’t Look Like C=―<br></p><p>There’s also the point that `switch` statements in Swift aren’t the same as those in C.  The different scoping rules are one difference. The lack of default fall through is another.  And of course the additional capabilities of the `case` condition itself.<br></p><p>For those reasons, deviating from the C syntax might not only be justified, but desirable as a notational reminder that this isn’t your father’s `switch` statement.  The closing brace in particular gives a visual cue that fall through isn’t going to happen.<br></p><p><br></p><p><br>―=Leaving the Door Open for a `switch` Expression=―<br></p><p>Another commonly rejected proposal is the request for a `switch` expression:<br>https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br></p><p>To my eyes, the rejection of this proposal is not as iron clad as the rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br></p><p>&quot;FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br></p><p>That said, there are challenges here in the details.  How will the grammar work?”<br></p><p><br>I think wrapping the `case` statements in curly braces in the statement version of `switch` gets us closer to a reasonable answer for how the grammar might work on an expression version:  the expression version would be delimited with colons similar to how the ternary operator is.<br></p><p>Something like this might work:<br></p><p>let s:String? = switch x <br>                case 3: “Three” <br>                case 5: “Five” <br>                default: nil<br></p><p>In the expression, the `case` clauses don’t represent scopes and shouldn’t be curly braced so the colons give a nice syntactic distinction.<br></p><p>I’m not holding by breath for such a feature, but this change to the `switch` statement makes such a thing easier to adopt.<br></p><p><br></p><p><br></p><p>&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt; wrote:<br>&gt; <br>&gt; I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br>&gt; <br>&gt; I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br>&gt; <br>&gt; This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br>&gt; <br>&gt; Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br>&gt; <br>&gt; Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br>&gt; <br>&gt; I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br>&gt; <br>&gt; - Dennis D.<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>------------- End Message ------------- <br></p><p><br></p><p>From James F<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 17, 2016 at 02:00:00pm</p></header><div class="content"><p>I think the discussion on this has run its course and it sounds like there’s mixed feelings, but it’s mostly a matter of opinion between consistency and “ugliness”.  As I understand it, the “socialization” process isn’t meant to reach consensus, but to hone the proposal (or abandon it if the feedback is overwhelmingly negative).  I think my last formulation is probably as well formed as I’ll get with the idea, I think there’s still mixed feedback, and a review is the way to settle the differences of opinion.<br></p><p>I think a proposal like this is in scope for Swift 3, and this is probably the last reasonable opportunity to consider it for a while, is that correct?<br></p><p>If so, I’ll put together a formal proposal.  <br></p><p>The general process is described here:<br>https://github.com/apple/swift-evolution/blob/master/process.md<br>but I just want to double check the process because I’m not terribly familiar with GitHub, pull requests, etc and want to avoid generating more noise than I need to:<br></p><p><br>I need to clone the swift-evolution repo<br>Create a local branch<br>Copy the proposal template, and edit it for the proposal<br>Push the branch (do I need special permissions for this, or can anyone push a branch?)<br>Flag the branch for a pull request<br></p><p>Presumably someone else along the line assigns it a number.<br></p><p><br>Anything else I need to consider?<br></p><p> <br></p><p><br>&gt; On Jul 11, 2016, at 02:04 , James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; While I&#39;m not keen on introducing braces, your comparison to property getters and setters is a good one. This is an inconsistency.<br>&gt; <br>&gt; To be honest, I wouldn&#39;t mind putting up with braces for a while, with the promise that we&#39;ll get a lightweight alternative to the switch statement, like the ternary operator is to if statements.<br>&gt; I feel like I use switch much more often to initialise a variable, or return a value, than I do to branch program logic (especially working with with enums), and it already seems a very heavy construct in these cases.<br>&gt; <br>&gt; ------------ Begin Message ------------ <br>&gt; Group: gmane.comp.lang.swift.evolution <br>&gt; MsgID: &lt;0C3EC993-9320-4F4C-B2AA-66967BEDFFED at gmail.com&gt; <br>&gt; <br>&gt; The discussion so far has given me a chance to organize my thinking, so here’s a more complete train of thought.<br>&gt; <br>&gt; I get that people don’t like extra punctuation.  The commonly rejected proposals, however, make it clear that braces are here to stay and we should be designing the syntax right now with that in mind.  It took me a long time to get used to not using them in Python, now I’m getting used to using them again in Swift.  Swift has a long life ahead of it, and there are going to be plenty of places where the syntax is going to become inconsistent in the service of supporting new features.  Now is when we set the starting point though and try to set ourselves up in a way that requires a minimum of syntax goofs in the future.<br>&gt; <br>&gt; <br>&gt; ―=Philosophy=― <br>&gt; <br>&gt; As philosophical backdrop, here’s the link on removing braces in the “commonly rejected proposals” section:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br>&gt; <br>&gt; I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&gt; &quot;There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure.”<br>&gt; <br>&gt; and another edited as suggested by Chris Lattner:<br>&gt; &quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that is most familiar to programmers in the extended C family is a good idea.&quot;<br>&gt; <br>&gt; <br>&gt; So, from that I take:<br>&gt; 1) braces indicate scoping<br>&gt; 2) conciseness isn’t an end in itself<br>&gt; 3) we should err on the side of being Cish when no other arguments prevail.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; ―=In C `cases` Aren’t Scopes, in Swift They Are=―<br>&gt; <br>&gt; Starting from what’s Cish, here’s a snippet of Swift code:<br>&gt; <br>&gt; let x=5<br>&gt; switch x {<br>&gt;  case 3:<br>&gt;    let y=5<br>&gt;    print(x,&quot; &quot;,y)<br>&gt; <br>&gt;  case 5:<br>&gt;    print(&quot;Two&quot;,x,&quot;s”)<br>&gt; <br>&gt;  default:<br>&gt;    print(“default&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This runs fine and prints “Two 5 s” to the console.<br>&gt; <br>&gt; This is something similar in C:<br>&gt; <br>&gt; int x=5;<br>&gt; switch (x) {<br>&gt;  case 3:<br>&gt;    int y=5;<br>&gt;    printf(&quot;%d %d&quot;,x,y);<br>&gt;    break;<br>&gt; <br>&gt;  case 5:<br>&gt;    printf(&quot;Two %d s&quot;,x);<br>&gt;    break;<br>&gt; <br>&gt;  default:<br>&gt;    printf(“default&quot;);<br>&gt; }<br>&gt; <br>&gt; <br>&gt; This code fails.  C gives me an error pointing at `int y=5;` complaining that it expected an expression there.  C++ gives me an error that it can’t jump to `case 5:` because it would skip over the declaration of `y`.<br>&gt; <br>&gt; I can fix this in both C and C++ by wrapping the `case 3:` in curly braces, creating a local scope:<br>&gt; <br>&gt; int x=5;<br>&gt; switch (x) {<br>&gt;  case 3:  {<br>&gt;    int y=5;<br>&gt;    printf(&quot;%d %d&quot;,x,y);<br>&gt;    break;<br>&gt;  }<br>&gt; <br>&gt;  case 5:<br>&gt;    printf(&quot;Two %d s&quot;,x);<br>&gt;    break;<br>&gt; <br>&gt;  default:<br>&gt;    printf(&quot;default&quot;);<br>&gt; }<br>&gt; <br>&gt; This code compiles fine in both C and C++.  A new scope has been delimited and created, and `y` only exists in that scope.<br>&gt; <br>&gt; <br>&gt; So, by both criteria 1) and 3), Swift should be using braces on `case` statements.  Each case is a scope unto itself, and the extended C family of languages would require braces in that event.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; ―=Conciseness, Ugliness and Nested Braces=―<br>&gt; <br>&gt; Conciseness is not an emphasis of Swift, but even if it were then this is not a particularly in-concise change to the syntax.  The suggestion here is to remove one punctuation mark and add two for a net gain of 1 character.  This doesn’t strike me as unduly burdensome.<br>&gt; <br>&gt; The better arguments are those on aesthetics and ease of use.  Each of these seems to focus on opposite situations.  The ugliness is when there is only one line per case, the ease of use challenge is when there are many and the developer needs to determine how many braces to close.<br>&gt; <br>&gt; How common is it to have a single line per case?<br>&gt; <br>&gt; Aesthetics, at least, are mostly subjective.  Ease of use, in part, depends on habits.  In both cases, however, I’d argue that the aesthetically preferable design, and the method least likely to introduce errors, is the one that is most consistent with the rest of the language.  Things tend to be uglier when they stand out as unusual, and habits force us to follow patterns, introducing errors when the pattern doesn’t hold.<br>&gt; <br>&gt; From that perspective, this is what Swift looks like everywhere else:<br>&gt; <br>&gt; if x = 3      { print(“Three”) }<br>&gt; else if x = 5 { print(“Five”) }<br>&gt; else          { print(“Default”) }<br>&gt; <br>&gt; It also doesn’t shy away from nested braces:<br>&gt; <br>&gt; var x:Int {<br>&gt;  get { return _x }<br>&gt;  set { _x = newValue }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Aesthetically, is it less ugly to have some scopes require braces and others not?  I really thought the square bracket messaging syntax of Obj-C was ugly until I got used to it because square brackets were for subscripting and looked “heavy” for method calls.  <br>&gt; <br>&gt; From an ease of use perspective, it is more likely to forget to add a closing brace when braces are used everywhere, or to accidentally add one in the one place they aren’t?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; ―=What Isn’t Like C Shouldn’t Look Like C=―<br>&gt; <br>&gt; There’s also the point that `switch` statements in Swift aren’t the same as those in C.  The different scoping rules are one difference. The lack of default fall through is another.  And of course the additional capabilities of the `case` condition itself.<br>&gt; <br>&gt; For those reasons, deviating from the C syntax might not only be justified, but desirable as a notational reminder that this isn’t your father’s `switch` statement.  The closing brace in particular gives a visual cue that fall through isn’t going to happen.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; ―=Leaving the Door Open for a `switch` Expression=―<br>&gt; <br>&gt; Another commonly rejected proposal is the request for a `switch` expression:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br>&gt; <br>&gt; To my eyes, the rejection of this proposal is not as iron clad as the rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br>&gt; <br>&gt; &quot;FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br>&gt; <br>&gt; That said, there are challenges here in the details.  How will the grammar work?”<br>&gt; <br>&gt; <br>&gt; I think wrapping the `case` statements in curly braces in the statement version of `switch` gets us closer to a reasonable answer for how the grammar might work on an expression version:  the expression version would be delimited with colons similar to how the ternary operator is.<br>&gt; <br>&gt; Something like this might work:<br>&gt; <br>&gt; let s:String? = switch x <br>&gt;                case 3: “Three” <br>&gt;                case 5: “Five” <br>&gt;                default: nil<br>&gt; <br>&gt; In the expression, the `case` clauses don’t represent scopes and shouldn’t be curly braced so the colons give a nice syntactic distinction.<br>&gt; <br>&gt; I’m not holding by breath for such a feature, but this change to the `switch` statement makes such a thing easier to adopt.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br>&gt;&gt; <br>&gt;&gt; I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br>&gt;&gt; <br>&gt;&gt; This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br>&gt;&gt; <br>&gt;&gt; Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br>&gt;&gt; <br>&gt;&gt; Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br>&gt;&gt; <br>&gt;&gt; I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br>&gt;&gt; <br>&gt;&gt; - Dennis D.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; ------------- End Message ------------- <br>&gt; <br>&gt; <br>&gt; <br>&gt; From James F<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 17, 2016 at 10:00:00pm</p></header><div class="content"><p>I think this proposal is not <br></p><p> &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br></p><p>And I think the same would go for this<br></p><p>“Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br></p><p>https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br></p><p>I just don’t think we gain much by switching to curly braces. <br></p><p>I made a similar argument about getting rid of the elvis operator ( ?: ) because it used colons and question marks. <br></p><p><br></p><p><br>&gt; On Jul 17, 2016, at 2:27 PM, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think the discussion on this has run its course and it sounds like there’s mixed feelings, but it’s mostly a matter of opinion between consistency and “ugliness”.  As I understand it, the “socialization” process isn’t meant to reach consensus, but to hone the proposal (or abandon it if the feedback is overwhelmingly negative).  I think my last formulation is probably as well formed as I’ll get with the idea, I think there’s still mixed feedback, and a review is the way to settle the differences of opinion.<br>&gt; <br>&gt; I think a proposal like this is in scope for Swift 3, and this is probably the last reasonable opportunity to consider it for a while, is that correct?<br>&gt; <br>&gt; If so, I’ll put together a formal proposal.  <br>&gt; <br>&gt; The general process is described here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; but I just want to double check the process because I’m not terribly familiar with GitHub, pull requests, etc and want to avoid generating more noise than I need to:<br>&gt; <br>&gt; <br>&gt; I need to clone the swift-evolution repo<br>&gt; Create a local branch<br>&gt; Copy the proposal template, and edit it for the proposal<br>&gt; Push the branch (do I need special permissions for this, or can anyone push a branch?)<br>&gt; Flag the branch for a pull request<br>&gt; <br>&gt; Presumably someone else along the line assigns it a number.<br>&gt; <br>&gt; <br>&gt; Anything else I need to consider?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 11, 2016, at 02:04 , James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; While I&#39;m not keen on introducing braces, your comparison to property getters and setters is a good one. This is an inconsistency.<br>&gt;&gt; <br>&gt;&gt; To be honest, I wouldn&#39;t mind putting up with braces for a while, with the promise that we&#39;ll get a lightweight alternative to the switch statement, like the ternary operator is to if statements.<br>&gt;&gt; I feel like I use switch much more often to initialise a variable, or return a value, than I do to branch program logic (especially working with with enums), and it already seems a very heavy construct in these cases.<br>&gt;&gt; <br>&gt;&gt; ------------ Begin Message ------------ <br>&gt;&gt; Group: gmane.comp.lang.swift.evolution <br>&gt;&gt; MsgID: &lt;0C3EC993-9320-4F4C-B2AA-66967BEDFFED at gmail.com&gt; <br>&gt;&gt; <br>&gt;&gt; The discussion so far has given me a chance to organize my thinking, so here’s a more complete train of thought.<br>&gt;&gt; <br>&gt;&gt; I get that people don’t like extra punctuation.  The commonly rejected proposals, however, make it clear that braces are here to stay and we should be designing the syntax right now with that in mind.  It took me a long time to get used to not using them in Python, now I’m getting used to using them again in Swift.  Swift has a long life ahead of it, and there are going to be plenty of places where the syntax is going to become inconsistent in the service of supporting new features.  Now is when we set the starting point though and try to set ourselves up in a way that requires a minimum of syntax goofs in the future.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ―=Philosophy=― <br>&gt;&gt; <br>&gt;&gt; As philosophical backdrop, here’s the link on removing braces in the “commonly rejected proposals” section:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br>&gt;&gt; <br>&gt;&gt; I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&gt;&gt; &quot;There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure.”<br>&gt;&gt; <br>&gt;&gt; and another edited as suggested by Chris Lattner:<br>&gt;&gt; &quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that is most familiar to programmers in the extended C family is a good idea.&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; So, from that I take:<br>&gt;&gt; 1) braces indicate scoping<br>&gt;&gt; 2) conciseness isn’t an end in itself<br>&gt;&gt; 3) we should err on the side of being Cish when no other arguments prevail.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ―=In C `cases` Aren’t Scopes, in Swift They Are=―<br>&gt;&gt; <br>&gt;&gt; Starting from what’s Cish, here’s a snippet of Swift code:<br>&gt;&gt; <br>&gt;&gt; let x=5<br>&gt;&gt; switch x {<br>&gt;&gt; case 3:<br>&gt;&gt;   let y=5<br>&gt;&gt;   print(x,&quot; &quot;,y)<br>&gt;&gt; <br>&gt;&gt; case 5:<br>&gt;&gt;   print(&quot;Two&quot;,x,&quot;s”)<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt;   print(“default&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This runs fine and prints “Two 5 s” to the console.<br>&gt;&gt; <br>&gt;&gt; This is something similar in C:<br>&gt;&gt; <br>&gt;&gt; int x=5;<br>&gt;&gt; switch (x) {<br>&gt;&gt; case 3:<br>&gt;&gt;   int y=5;<br>&gt;&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;&gt;   break;<br>&gt;&gt; <br>&gt;&gt; case 5:<br>&gt;&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;&gt;   break;<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt;   printf(“default&quot;);<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This code fails.  C gives me an error pointing at `int y=5;` complaining that it expected an expression there.  C++ gives me an error that it can’t jump to `case 5:` because it would skip over the declaration of `y`.<br>&gt;&gt; <br>&gt;&gt; I can fix this in both C and C++ by wrapping the `case 3:` in curly braces, creating a local scope:<br>&gt;&gt; <br>&gt;&gt; int x=5;<br>&gt;&gt; switch (x) {<br>&gt;&gt; case 3:  {<br>&gt;&gt;   int y=5;<br>&gt;&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;&gt;   break;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; case 5:<br>&gt;&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;&gt;   break;<br>&gt;&gt; <br>&gt;&gt; default:<br>&gt;&gt;   printf(&quot;default&quot;);<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This code compiles fine in both C and C++.  A new scope has been delimited and created, and `y` only exists in that scope.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; So, by both criteria 1) and 3), Swift should be using braces on `case` statements.  Each case is a scope unto itself, and the extended C family of languages would require braces in that event.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ―=Conciseness, Ugliness and Nested Braces=―<br>&gt;&gt; <br>&gt;&gt; Conciseness is not an emphasis of Swift, but even if it were then this is not a particularly in-concise change to the syntax.  The suggestion here is to remove one punctuation mark and add two for a net gain of 1 character.  This doesn’t strike me as unduly burdensome.<br>&gt;&gt; <br>&gt;&gt; The better arguments are those on aesthetics and ease of use.  Each of these seems to focus on opposite situations.  The ugliness is when there is only one line per case, the ease of use challenge is when there are many and the developer needs to determine how many braces to close.<br>&gt;&gt; <br>&gt;&gt; How common is it to have a single line per case?<br>&gt;&gt; <br>&gt;&gt; Aesthetics, at least, are mostly subjective.  Ease of use, in part, depends on habits.  In both cases, however, I’d argue that the aesthetically preferable design, and the method least likely to introduce errors, is the one that is most consistent with the rest of the language.  Things tend to be uglier when they stand out as unusual, and habits force us to follow patterns, introducing errors when the pattern doesn’t hold.<br>&gt;&gt; <br>&gt;&gt; From that perspective, this is what Swift looks like everywhere else:<br>&gt;&gt; <br>&gt;&gt; if x = 3      { print(“Three”) }<br>&gt;&gt; else if x = 5 { print(“Five”) }<br>&gt;&gt; else          { print(“Default”) }<br>&gt;&gt; <br>&gt;&gt; It also doesn’t shy away from nested braces:<br>&gt;&gt; <br>&gt;&gt; var x:Int {<br>&gt;&gt; get { return _x }<br>&gt;&gt; set { _x = newValue }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Aesthetically, is it less ugly to have some scopes require braces and others not?  I really thought the square bracket messaging syntax of Obj-C was ugly until I got used to it because square brackets were for subscripting and looked “heavy” for method calls.  <br>&gt;&gt; <br>&gt;&gt; From an ease of use perspective, it is more likely to forget to add a closing brace when braces are used everywhere, or to accidentally add one in the one place they aren’t?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ―=What Isn’t Like C Shouldn’t Look Like C=―<br>&gt;&gt; <br>&gt;&gt; There’s also the point that `switch` statements in Swift aren’t the same as those in C.  The different scoping rules are one difference. The lack of default fall through is another.  And of course the additional capabilities of the `case` condition itself.<br>&gt;&gt; <br>&gt;&gt; For those reasons, deviating from the C syntax might not only be justified, but desirable as a notational reminder that this isn’t your father’s `switch` statement.  The closing brace in particular gives a visual cue that fall through isn’t going to happen.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ―=Leaving the Door Open for a `switch` Expression=―<br>&gt;&gt; <br>&gt;&gt; Another commonly rejected proposal is the request for a `switch` expression:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br>&gt;&gt; <br>&gt;&gt; To my eyes, the rejection of this proposal is not as iron clad as the rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br>&gt;&gt; <br>&gt;&gt; &quot;FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br>&gt;&gt; <br>&gt;&gt; That said, there are challenges here in the details.  How will the grammar work?”<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think wrapping the `case` statements in curly braces in the statement version of `switch` gets us closer to a reasonable answer for how the grammar might work on an expression version:  the expression version would be delimited with colons similar to how the ternary operator is.<br>&gt;&gt; <br>&gt;&gt; Something like this might work:<br>&gt;&gt; <br>&gt;&gt; let s:String? = switch x <br>&gt;&gt;               case 3: “Three” <br>&gt;&gt;               case 5: “Five” <br>&gt;&gt;               default: nil<br>&gt;&gt; <br>&gt;&gt; In the expression, the `case` clauses don’t represent scopes and shouldn’t be curly braced so the colons give a nice syntactic distinction.<br>&gt;&gt; <br>&gt;&gt; I’m not holding by breath for such a feature, but this change to the `switch` statement makes such a thing easier to adopt.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dennis D.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ------------- End Message ------------- <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; From James F<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160717/6f14c0bd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July 18, 2016 at 07:00:00pm</p></header><div class="content"><p>Was the problem with the ternary conditional operator that nothing could be<br>found to replace it? That doesn&#39;t seem to be the issue here.<br>On Mon, Jul 18, 2016 at 00:02 Jose Cheyo Jimenez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think this proposal is not<br>&gt;<br>&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent<br>&gt; established by the C family of languages.”<br>&gt;<br>&gt; And I think the same would go for this<br>&gt;<br>&gt; “Swift is designed to feel like a member of the C family of languages.<br>&gt; Switching keywords away from C precedent without strong motivation is a<br>&gt; non-goal”<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br>&gt;<br>&gt; I just don’t think we gain much by switching to curly braces.<br>&gt;<br>&gt; I made a similar argument about getting rid of the elvis operator ( ?: )<br>&gt; because it used colons and question marks.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 17, 2016, at 2:27 PM, G B via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think the discussion on this has run its course and it sounds like<br>&gt; there’s mixed feelings, but it’s mostly a matter of opinion between<br>&gt; consistency and “ugliness”.  As I understand it, the “socialization”<br>&gt; process isn’t meant to reach consensus, but to hone the proposal (or<br>&gt; abandon it if the feedback is overwhelmingly negative).  I think my last<br>&gt; formulation is probably as well formed as I’ll get with the idea, I think<br>&gt; there’s still mixed feedback, and a review is the way to settle the<br>&gt; differences of opinion.<br>&gt;<br>&gt; I think a proposal like this is in scope for Swift 3, and this is probably<br>&gt; the last reasonable opportunity to consider it for a while, is that correct?<br>&gt;<br>&gt; If so, I’ll put together a formal proposal.<br>&gt;<br>&gt; The general process is described here:<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; but I just want to double check the process because I’m not terribly<br>&gt; familiar with GitHub, pull requests, etc and want to avoid generating more<br>&gt; noise than I need to:<br>&gt;<br>&gt;<br>&gt; I need to clone the swift-evolution repo<br>&gt; Create a local branch<br>&gt; Copy the proposal template, and edit it for the proposal<br>&gt; Push the branch (do I need special permissions for this, or can anyone<br>&gt; push a branch?)<br>&gt; Flag the branch for a pull request<br>&gt;<br>&gt; Presumably someone else along the line assigns it a number.<br>&gt;<br>&gt;<br>&gt; Anything else I need to consider?<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 11, 2016, at 02:04 , James Froggatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; While I&#39;m not keen on introducing braces, your comparison to property<br>&gt; getters and setters is a good one. This is an inconsistency.<br>&gt;<br>&gt; To be honest, I wouldn&#39;t mind putting up with braces for a while, with the<br>&gt; promise that we&#39;ll get a lightweight alternative to the switch statement,<br>&gt; like the ternary operator is to if statements.<br>&gt; I feel like I use switch much more often to initialise a variable, or<br>&gt; return a value, than I do to branch program logic (especially working with<br>&gt; with enums), and it already seems a very heavy construct in these cases.<br>&gt;<br>&gt; ------------ Begin Message ------------<br>&gt; Group: gmane.comp.lang.swift.evolution<br>&gt; MsgID: &lt;0C3EC993-9320-4F4C-B2AA-66967BEDFFED at gmail.com&gt;<br>&gt;<br>&gt; The discussion so far has given me a chance to organize my thinking, so<br>&gt; here’s a more complete train of thought.<br>&gt;<br>&gt; I get that people don’t like extra punctuation.  The commonly rejected<br>&gt; proposals, however, make it clear that braces are here to stay and we<br>&gt; should be designing the syntax right now with that in mind.  It took me a<br>&gt; long time to get used to not using them in Python, now I’m getting used to<br>&gt; using them again in Swift.  Swift has a long life ahead of it, and there<br>&gt; are going to be plenty of places where the syntax is going to become<br>&gt; inconsistent in the service of supporting new features.  Now is when we set<br>&gt; the starting point though and try to set ourselves up in a way that<br>&gt; requires a minimum of syntax goofs in the future.<br>&gt;<br>&gt;<br>&gt; ―=Philosophy=―<br>&gt;<br>&gt; As philosophical backdrop, here’s the link on removing braces in the<br>&gt; “commonly rejected proposals” section:<br>&gt;<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br>&gt;<br>&gt; I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&gt; &quot;There is not in fact an emphasis on conciseness. This has been repeated<br>&gt; many times by the swift team. Conciseness is not a goal of Swift, but<br>&gt; expressiveness absolutely is. Braces are a well-understood and simple way<br>&gt; to express the notion of a scope/closure.”<br>&gt;<br>&gt; and another edited as suggested by Chris Lattner:<br>&gt; &quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two<br>&gt; alternatives that have no compelling arguments either way, picking the one<br>&gt; that is most familiar to programmers in the extended C family is a good<br>&gt; idea.&quot;<br>&gt;<br>&gt;<br>&gt; So, from that I take:<br>&gt; 1) braces indicate scoping<br>&gt; 2) conciseness isn’t an end in itself<br>&gt; 3) we should err on the side of being Cish when no other arguments prevail.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; ―=In C `cases` Aren’t Scopes, in Swift They Are=―<br>&gt;<br>&gt; Starting from what’s Cish, here’s a snippet of Swift code:<br>&gt;<br>&gt; let x=5<br>&gt; switch x {<br>&gt; case 3:<br>&gt;   let y=5<br>&gt;   print(x,&quot; &quot;,y)<br>&gt;<br>&gt; case 5:<br>&gt;   print(&quot;Two&quot;,x,&quot;s”)<br>&gt;<br>&gt; default:<br>&gt;   print(“default&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This runs fine and prints “Two 5 s” to the console.<br>&gt;<br>&gt; This is something similar in C:<br>&gt;<br>&gt; int x=5;<br>&gt; switch (x) {<br>&gt; case 3:<br>&gt;   int y=5;<br>&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;   break;<br>&gt;<br>&gt; case 5:<br>&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;   break;<br>&gt;<br>&gt; default:<br>&gt;   printf(“default&quot;);<br>&gt; }<br>&gt;<br>&gt;<br>&gt; This code fails.  C gives me an error pointing at `int y=5;` complaining<br>&gt; that it expected an expression there.  C++ gives me an error that it can’t<br>&gt; jump to `case 5:` because it would skip over the declaration of `y`.<br>&gt;<br>&gt; I can fix this in both C and C++ by wrapping the `case 3:` in curly<br>&gt; braces, creating a local scope:<br>&gt;<br>&gt; int x=5;<br>&gt; switch (x) {<br>&gt; case 3:  {<br>&gt;   int y=5;<br>&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;   break;<br>&gt; }<br>&gt;<br>&gt; case 5:<br>&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;   break;<br>&gt;<br>&gt; default:<br>&gt;   printf(&quot;default&quot;);<br>&gt; }<br>&gt;<br>&gt; This code compiles fine in both C and C++.  A new scope has been delimited<br>&gt; and created, and `y` only exists in that scope.<br>&gt;<br>&gt;<br>&gt; So, by both criteria 1) and 3), Swift should be using braces on `case`<br>&gt; statements.  Each case is a scope unto itself, and the extended C family of<br>&gt; languages would require braces in that event.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; ―=Conciseness, Ugliness and Nested Braces=―<br>&gt;<br>&gt; Conciseness is not an emphasis of Swift, but even if it were then this is<br>&gt; not a particularly in-concise change to the syntax.  The suggestion here is<br>&gt; to remove one punctuation mark and add two for a net gain of 1 character.<br>&gt; This doesn’t strike me as unduly burdensome.<br>&gt;<br>&gt; The better arguments are those on aesthetics and ease of use.  Each of<br>&gt; these seems to focus on opposite situations.  The ugliness is when there is<br>&gt; only one line per case, the ease of use challenge is when there are many<br>&gt; and the developer needs to determine how many braces to close.<br>&gt;<br>&gt; How common is it to have a single line per case?<br>&gt;<br>&gt; Aesthetics, at least, are mostly subjective.  Ease of use, in part,<br>&gt; depends on habits.  In both cases, however, I’d argue that the<br>&gt; aesthetically preferable design, and the method least likely to introduce<br>&gt; errors, is the one that is most consistent with the rest of the language.<br>&gt; Things tend to be uglier when they stand out as unusual, and habits force<br>&gt; us to follow patterns, introducing errors when the pattern doesn’t hold.<br>&gt;<br>&gt; From that perspective, this is what Swift looks like everywhere else:<br>&gt;<br>&gt; if x = 3      { print(“Three”) }<br>&gt; else if x = 5 { print(“Five”) }<br>&gt; else          { print(“Default”) }<br>&gt;<br>&gt; It also doesn’t shy away from nested braces:<br>&gt;<br>&gt; var x:Int {<br>&gt; get { return _x }<br>&gt; set { _x = newValue }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Aesthetically, is it less ugly to have some scopes require braces and<br>&gt; others not?  I really thought the square bracket messaging syntax of Obj-C<br>&gt; was ugly until I got used to it because square brackets were for<br>&gt; subscripting and looked “heavy” for method calls.<br>&gt;<br>&gt; From an ease of use perspective, it is more likely to forget to add a<br>&gt; closing brace when braces are used everywhere, or to accidentally add one<br>&gt; in the one place they aren’t?<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; ―=What Isn’t Like C Shouldn’t Look Like C=―<br>&gt;<br>&gt; There’s also the point that `switch` statements in Swift aren’t the same<br>&gt; as those in C.  The different scoping rules are one difference. The lack of<br>&gt; default fall through is another.  And of course the additional capabilities<br>&gt; of the `case` condition itself.<br>&gt;<br>&gt; For those reasons, deviating from the C syntax might not only be<br>&gt; justified, but desirable as a notational reminder that this isn’t your<br>&gt; father’s `switch` statement.  The closing brace in particular gives a<br>&gt; visual cue that fall through isn’t going to happen.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; ―=Leaving the Door Open for a `switch` Expression=―<br>&gt;<br>&gt; Another commonly rejected proposal is the request for a `switch`<br>&gt; expression:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br>&gt;<br>&gt; To my eyes, the rejection of this proposal is not as iron clad as the<br>&gt; rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br>&gt;<br>&gt; &quot;FWIW, I (and many other people) would like to consider turning many<br>&gt; statement-y things in swift into expressions.  I’d love to see the weird ?:<br>&gt; ternary operator get nuked and replaced with an if/else expression of some<br>&gt; sort.  This is an area that the apple team hasn’t had bandwidth to consider<br>&gt; carefully.<br>&gt;<br>&gt; That said, there are challenges here in the details.  How will the grammar<br>&gt; work?”<br>&gt;<br>&gt;<br>&gt; I think wrapping the `case` statements in curly braces in the statement<br>&gt; version of `switch` gets us closer to a reasonable answer for how the<br>&gt; grammar might work on an expression version:  the expression version would<br>&gt; be delimited with colons similar to how the ternary operator is.<br>&gt;<br>&gt; Something like this might work:<br>&gt;<br>&gt; let s:String? = switch x<br>&gt;               case 3: “Three”<br>&gt;               case 5: “Five”<br>&gt;               default: nil<br>&gt;<br>&gt; In the expression, the `case` clauses don’t represent scopes and shouldn’t<br>&gt; be curly braced so the colons give a nice syntactic distinction.<br>&gt;<br>&gt; I’m not holding by breath for such a feature, but this change to the<br>&gt; `switch` statement makes such a thing easier to adopt.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I don’t like this idea at all. The current switch syntax is really clean,<br>&gt; one of the nicest parts of Swift, and this would really turn it into<br>&gt; something messy.<br>&gt;<br>&gt; I’ll make a possibly controversial statement here: one of the worst<br>&gt; aspects of C syntax, which is unfortunately perpetuated by many modern<br>&gt; languages, Swift included, is the use of curly braces everywhere to<br>&gt; demarcate every kind of block: every control structure, every data<br>&gt; structure and every function body.<br>&gt;<br>&gt; This leads to a proliferation of nested braces which all have to be placed<br>&gt; correctly in order for the code to be correct. Of course, we all use<br>&gt; indentation to help manage this, but I think we all know that once the<br>&gt; closing brace is sufficiently far from the opening brace, it becomes<br>&gt; difficult to tell which brace matches which even with indentation. I think<br>&gt; I spend a significant amount of my development time just eyeballing those<br>&gt; closing braces. Of course, we also have editor features to help match them<br>&gt; up but relying on such editor features might be an indication of a flaw in<br>&gt; the language. At any rate, it impedes readability of the code, editor or no<br>&gt; editor.<br>&gt;<br>&gt; Not having the braces for each case is, to me, analogous to the way Swift<br>&gt; removed the outermost parenthesis in the if statement conditional part.<br>&gt; When you have a complex conditional expression with nested parentheses,<br>&gt; removing that unnecessary outermost pair really improves readability (and<br>&gt; reduces possibility of error). This can be done because the outermost<br>&gt; parentheses aren’t really necessary to demarcate the boundaries of the<br>&gt; expression.<br>&gt;<br>&gt; Similarly, the case keywords in the switch statement sufficiently<br>&gt; demarcate the extent of the statement block; it is unnecessary to toss in<br>&gt; an extra pair of these brace characters that may already be heavily used in<br>&gt; the statement block itself.<br>&gt;<br>&gt; I think the extra burden on readability (and writability) of having the<br>&gt; extra pair of nested braces is not justified by the desire for consistency.<br>&gt; If consistency is so important, then rather than detracting from the<br>&gt; quality of the switch statement by adding the braces, why don’t we improve<br>&gt; the quality of the rest of the language by getting rid of some of those<br>&gt; braces in the other constructs that use them! (Note: I don’t really expect<br>&gt; that to happen…)<br>&gt;<br>&gt; - Dennis D.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; ------------- End Message -------------<br>&gt;<br>&gt;<br>&gt;<br>&gt; From James F<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/94f08813/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 18, 2016 at 01:00:00pm</p></header><div class="content"><p>The issue I see is that diverging from the c-based switch needs to have a much better solution and I just don&#39;t think that swapping the colon for curly braces is that much better to motivate a move away from c-based languages. I would err on the side on familiarity. <br></p><p>&gt; On Jul 18, 2016, at 12:31 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Was the problem with the ternary conditional operator that nothing could be found to replace it? That doesn&#39;t seem to be the issue here.<br>&gt;&gt; On Mon, Jul 18, 2016 at 00:02 Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I think this proposal is not <br>&gt;&gt; <br>&gt;&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br>&gt;&gt; <br>&gt;&gt; And I think the same would go for this<br>&gt;&gt; <br>&gt;&gt; “Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br>&gt;&gt; <br>&gt;&gt; I just don’t think we gain much by switching to curly braces. <br>&gt;&gt; <br>&gt;&gt; I made a similar argument about getting rid of the elvis operator ( ?: ) because it used colons and question marks. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 17, 2016, at 2:27 PM, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the discussion on this has run its course and it sounds like there’s mixed feelings, but it’s mostly a matter of opinion between consistency and “ugliness”.  As I understand it, the “socialization” process isn’t meant to reach consensus, but to hone the proposal (or abandon it if the feedback is overwhelmingly negative).  I think my last formulation is probably as well formed as I’ll get with the idea, I think there’s still mixed feedback, and a review is the way to settle the differences of opinion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think a proposal like this is in scope for Swift 3, and this is probably the last reasonable opportunity to consider it for a while, is that correct?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If so, I’ll put together a formal proposal.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The general process is described here:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; but I just want to double check the process because I’m not terribly familiar with GitHub, pull requests, etc and want to avoid generating more noise than I need to:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I need to clone the swift-evolution repo<br>&gt;&gt;&gt; Create a local branch<br>&gt;&gt;&gt; Copy the proposal template, and edit it for the proposal<br>&gt;&gt;&gt; Push the branch (do I need special permissions for this, or can anyone push a branch?)<br>&gt;&gt;&gt; Flag the branch for a pull request<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Presumably someone else along the line assigns it a number.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anything else I need to consider?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 11, 2016, at 02:04 , James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; While I&#39;m not keen on introducing braces, your comparison to property getters and setters is a good one. This is an inconsistency.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To be honest, I wouldn&#39;t mind putting up with braces for a while, with the promise that we&#39;ll get a lightweight alternative to the switch statement, like the ternary operator is to if statements.<br>&gt;&gt;&gt;&gt; I feel like I use switch much more often to initialise a variable, or return a value, than I do to branch program logic (especially working with with enums), and it already seems a very heavy construct in these cases.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ------------ Begin Message ------------ <br>&gt;&gt;&gt;&gt; Group: gmane.comp.lang.swift.evolution <br>&gt;&gt;&gt;&gt; MsgID: &lt;0C3EC993-9320-4F4C-B2AA-66967BEDFFED at gmail.com&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The discussion so far has given me a chance to organize my thinking, so here’s a more complete train of thought.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I get that people don’t like extra punctuation.  The commonly rejected proposals, however, make it clear that braces are here to stay and we should be designing the syntax right now with that in mind.  It took me a long time to get used to not using them in Python, now I’m getting used to using them again in Swift.  Swift has a long life ahead of it, and there are going to be plenty of places where the syntax is going to become inconsistent in the service of supporting new features.  Now is when we set the starting point though and try to set ourselves up in a way that requires a minimum of syntax goofs in the future.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ―=Philosophy=― <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As philosophical backdrop, here’s the link on removing braces in the “commonly rejected proposals” section:<br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003656.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ll pull out two quotes from that post, one from Kevin Ballard:<br>&gt;&gt;&gt;&gt; &quot;There is not in fact an emphasis on conciseness. This has been repeated many times by the swift team. Conciseness is not a goal of Swift, but expressiveness absolutely is. Braces are a well-understood and simple way to express the notion of a scope/closure.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and another edited as suggested by Chris Lattner:<br>&gt;&gt;&gt;&gt; &quot;&#39;Be like C&#39; isn&#39;t a goal either of course, but when deciding between two alternatives that have no compelling arguments either way, picking the one that is most familiar to programmers in the extended C family is a good idea.&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So, from that I take:<br>&gt;&gt;&gt;&gt; 1) braces indicate scoping<br>&gt;&gt;&gt;&gt; 2) conciseness isn’t an end in itself<br>&gt;&gt;&gt;&gt; 3) we should err on the side of being Cish when no other arguments prevail.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ―=In C `cases` Aren’t Scopes, in Swift They Are=―<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Starting from what’s Cish, here’s a snippet of Swift code:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let x=5<br>&gt;&gt;&gt;&gt; switch x {<br>&gt;&gt;&gt;&gt; case 3:<br>&gt;&gt;&gt;&gt;   let y=5<br>&gt;&gt;&gt;&gt;   print(x,&quot; &quot;,y)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case 5:<br>&gt;&gt;&gt;&gt;   print(&quot;Two&quot;,x,&quot;s”)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;   print(“default&quot;)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This runs fine and prints “Two 5 s” to the console.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is something similar in C:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; int x=5;<br>&gt;&gt;&gt;&gt; switch (x) {<br>&gt;&gt;&gt;&gt; case 3:<br>&gt;&gt;&gt;&gt;   int y=5;<br>&gt;&gt;&gt;&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;&gt;&gt;&gt;   break;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case 5:<br>&gt;&gt;&gt;&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;&gt;&gt;&gt;   break;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;   printf(“default&quot;);<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This code fails.  C gives me an error pointing at `int y=5;` complaining that it expected an expression there.  C++ gives me an error that it can’t jump to `case 5:` because it would skip over the declaration of `y`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can fix this in both C and C++ by wrapping the `case 3:` in curly braces, creating a local scope:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; int x=5;<br>&gt;&gt;&gt;&gt; switch (x) {<br>&gt;&gt;&gt;&gt; case 3:  {<br>&gt;&gt;&gt;&gt;   int y=5;<br>&gt;&gt;&gt;&gt;   printf(&quot;%d %d&quot;,x,y);<br>&gt;&gt;&gt;&gt;   break;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; case 5:<br>&gt;&gt;&gt;&gt;   printf(&quot;Two %d s&quot;,x);<br>&gt;&gt;&gt;&gt;   break;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:<br>&gt;&gt;&gt;&gt;   printf(&quot;default&quot;);<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This code compiles fine in both C and C++.  A new scope has been delimited and created, and `y` only exists in that scope.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So, by both criteria 1) and 3), Swift should be using braces on `case` statements.  Each case is a scope unto itself, and the extended C family of languages would require braces in that event.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ―=Conciseness, Ugliness and Nested Braces=―<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Conciseness is not an emphasis of Swift, but even if it were then this is not a particularly in-concise change to the syntax.  The suggestion here is to remove one punctuation mark and add two for a net gain of 1 character.  This doesn’t strike me as unduly burdensome.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The better arguments are those on aesthetics and ease of use.  Each of these seems to focus on opposite situations.  The ugliness is when there is only one line per case, the ease of use challenge is when there are many and the developer needs to determine how many braces to close.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How common is it to have a single line per case?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aesthetics, at least, are mostly subjective.  Ease of use, in part, depends on habits.  In both cases, however, I’d argue that the aesthetically preferable design, and the method least likely to introduce errors, is the one that is most consistent with the rest of the language.  Things tend to be uglier when they stand out as unusual, and habits force us to follow patterns, introducing errors when the pattern doesn’t hold.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From that perspective, this is what Swift looks like everywhere else:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if x = 3      { print(“Three”) }<br>&gt;&gt;&gt;&gt; else if x = 5 { print(“Five”) }<br>&gt;&gt;&gt;&gt; else          { print(“Default”) }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It also doesn’t shy away from nested braces:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var x:Int {<br>&gt;&gt;&gt;&gt; get { return _x }<br>&gt;&gt;&gt;&gt; set { _x = newValue }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Aesthetically, is it less ugly to have some scopes require braces and others not?  I really thought the square bracket messaging syntax of Obj-C was ugly until I got used to it because square brackets were for subscripting and looked “heavy” for method calls.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From an ease of use perspective, it is more likely to forget to add a closing brace when braces are used everywhere, or to accidentally add one in the one place they aren’t?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ―=What Isn’t Like C Shouldn’t Look Like C=―<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There’s also the point that `switch` statements in Swift aren’t the same as those in C.  The different scoping rules are one difference. The lack of default fall through is another.  And of course the additional capabilities of the `case` condition itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For those reasons, deviating from the C syntax might not only be justified, but desirable as a notational reminder that this isn’t your father’s `switch` statement.  The closing brace in particular gives a visual cue that fall through isn’t going to happen.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ―=Leaving the Door Open for a `switch` Expression=―<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another commonly rejected proposal is the request for a `switch` expression:<br>&gt;&gt;&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/2015-December/000393.html<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To my eyes, the rejection of this proposal is not as iron clad as the rejection of removing curly braces.  Here’s a quote from Chris Lattner:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &quot;FWIW, I (and many other people) would like to consider turning many statement-y things in swift into expressions.  I’d love to see the weird ?: ternary operator get nuked and replaced with an if/else expression of some sort.  This is an area that the apple team hasn’t had bandwidth to consider carefully.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That said, there are challenges here in the details.  How will the grammar work?”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think wrapping the `case` statements in curly braces in the statement version of `switch` gets us closer to a reasonable answer for how the grammar might work on an expression version:  the expression version would be delimited with colons similar to how the ternary operator is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Something like this might work:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; let s:String? = switch x <br>&gt;&gt;&gt;&gt;               case 3: “Three” <br>&gt;&gt;&gt;&gt;               case 5: “Five” <br>&gt;&gt;&gt;&gt;               default: nil<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In the expression, the `case` clauses don’t represent scopes and shouldn’t be curly braced so the colons give a nice syntactic distinction.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m not holding by breath for such a feature, but this change to the `switch` statement makes such a thing easier to adopt.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 10, 2016, at 13:37 , Dennis De Mars &lt;demars at fractaldomains.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t like this idea at all. The current switch syntax is really clean, one of the nicest parts of Swift, and this would really turn it into something messy.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’ll make a possibly controversial statement here: one of the worst aspects of C syntax, which is unfortunately perpetuated by many modern languages, Swift included, is the use of curly braces everywhere to demarcate every kind of block: every control structure, every data structure and every function body.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This leads to a proliferation of nested braces which all have to be placed correctly in order for the code to be correct. Of course, we all use indentation to help manage this, but I think we all know that once the closing brace is sufficiently far from the opening brace, it becomes difficult to tell which brace matches which even with indentation. I think I spend a significant amount of my development time just eyeballing those closing braces. Of course, we also have editor features to help match them up but relying on such editor features might be an indication of a flaw in the language. At any rate, it impedes readability of the code, editor or no editor.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Not having the braces for each case is, to me, analogous to the way Swift removed the outermost parenthesis in the if statement conditional part. When you have a complex conditional expression with nested parentheses, removing that unnecessary outermost pair really improves readability (and reduces possibility of error). This can be done because the outermost parentheses aren’t really necessary to demarcate the boundaries of the expression.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Similarly, the case keywords in the switch statement sufficiently demarcate the extent of the statement block; it is unnecessary to toss in an extra pair of these brace characters that may already be heavily used in the statement block itself.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think the extra burden on readability (and writability) of having the extra pair of nested braces is not justified by the desire for consistency. If consistency is so important, then rather than detracting from the quality of the switch statement by adding the braces, why don’t we improve the quality of the rest of the language by getting rid of some of those braces in the other constructs that use them! (Note: I don’t really expect that to happen…)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Dennis D.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ------------- End Message ------------- <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; From James F<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/135e74b3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 18, 2016 at 04:00:00pm</p></header><div class="content"><p>On Jul 17, 2016, at 10:07 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think this proposal is not <br>&gt; <br>&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br>&gt; <br>&gt; And I think the same would go for this<br>&gt; <br>&gt; “Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br>&gt; <br>&gt; I just don’t think we gain much by switching to curly braces. <br></p><p>I agree.  I don’t think this proposal is worth considering at this point.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/856a91ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>July 19, 2016 at 05:00:00pm</p></header><div class="content"><p>The main advantage is not in this change by itself, but in the fact that it tidies up the syntax and makes it easier to support other additive proposals in the future that might make better use of the colon syntax— such as targeted continue statements in `switch` or a `switch` expression syntax.  Both could probably be accomplished without this change, but I think they’d be less clean.<br></p><p>I guess my argument on familiarity has been that using curly braces is more like the C family of languages in that the Swift `case`s are separate scopes and C/C++ would require curly braces to create those scopes. At the same time the Swift `switch` is different from the C `switch` in that it does not implicitly fall through so a small syntax difference isn’t without justification.<br></p><p><br>That said, reactions haven&#39;t been overwhelmingly positive, so I’ll let it go unless someone suggests otherwise.<br></p><p><br>&gt; On Jul 18, 2016, at 16:23 , Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Jul 17, 2016, at 10:07 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think this proposal is not <br>&gt;&gt; <br>&gt;&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br>&gt;&gt; <br>&gt;&gt; And I think the same would go for this<br>&gt;&gt; <br>&gt;&gt; “Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br>&gt;&gt; <br>&gt;&gt; I just don’t think we gain much by switching to curly braces. <br>&gt; <br>&gt; I agree.  I don’t think this proposal is worth considering at this point.<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/11975d8d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 19, 2016 at 05:00:00pm</p></header><div class="content"><p>I also agree that curly braces would be both *more* clear and *more* C-like for what it’s worth, but it seems like there may be no time for this. 😞<br></p><p>&gt; On Jul 19, 2016, at 5:01 PM, G B via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The main advantage is not in this change by itself, but in the fact that it tidies up the syntax and makes it easier to support other additive proposals in the future that might make better use of the colon syntax— such as targeted continue statements in `switch` or a `switch` expression syntax.  Both could probably be accomplished without this change, but I think they’d be less clean.<br>&gt; <br>&gt; I guess my argument on familiarity has been that using curly braces is more like the C family of languages in that the Swift `case`s are separate scopes and C/C++ would require curly braces to create those scopes. At the same time the Swift `switch` is different from the C `switch` in that it does not implicitly fall through so a small syntax difference isn’t without justification.<br>&gt; <br>&gt; <br>&gt; That said, reactions haven&#39;t been overwhelmingly positive, so I’ll let it go unless someone suggests otherwise.<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 18, 2016, at 16:23 , Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Jul 17, 2016, at 10:07 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this proposal is not <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And I think the same would go for this<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I just don’t think we gain much by switching to curly braces. <br>&gt;&gt; <br>&gt;&gt; I agree.  I don’t think this proposal is worth considering at this point.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/f1780704/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Idea] Wrap switch cases in curly braces</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 19, 2016 at 05:00:00pm</p></header><div class="content"><p>It’s probably worth pointing out that Swift&#39;s `switch` statement has been a thing I’ve seen new programmers struggle with when learning Swift. The syntax differs quite significantly from other control flow constructs in the language.<br></p><p>&gt; On Jul 19, 2016, at 5:04 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt; <br>&gt; I also agree that curly braces would be both *more* clear and *more* C-like for what it’s worth, but it seems like there may be no time for this. 😞<br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 5:01 PM, G B via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The main advantage is not in this change by itself, but in the fact that it tidies up the syntax and makes it easier to support other additive proposals in the future that might make better use of the colon syntax— such as targeted continue statements in `switch` or a `switch` expression syntax.  Both could probably be accomplished without this change, but I think they’d be less clean.<br>&gt;&gt; <br>&gt;&gt; I guess my argument on familiarity has been that using curly braces is more like the C family of languages in that the Swift `case`s are separate scopes and C/C++ would require curly braces to create those scopes. At the same time the Swift `switch` is different from the C `switch` in that it does not implicitly fall through so a small syntax difference isn’t without justification.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That said, reactions haven&#39;t been overwhelmingly positive, so I’ll let it go unless someone suggests otherwise.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 18, 2016, at 16:23 , Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 17, 2016, at 10:07 PM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this proposal is not <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &quot;&quot;better enough&quot; for it to make sense to diverge from the precedent established by the C family of languages.”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And I think the same would go for this<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; “Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal”<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I just don’t think we gain much by switching to curly braces. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree.  I don’t think this proposal is worth considering at this point.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/84167a33/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
