<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Inconsistencies between Foundation APIs</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>December 22, 2015 at 01:00:00am</p></header><div class="content"><p>I&#39;ve been working on SR-276 &lt;https://bugs.swift.org/browse/SR-276&gt; and I&#39;m<br>finding a fair amount of inconsistencies between corelib Foundation and OS<br>X Foundation. It seems to be most common with optionality of return values.<br>e.g., in NSURL<br></p><p>corelib:<br>    public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL?<br></p><p>OS X:<br>    public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL<br></p><p>That particular case seems to be a difference in the treatment of the<br>return value from CFURL<br></p><p>   public func CFURLCreateCopyAppendingPathComponent(allocator: CFAllocator!,<br>_ url: CFURL!, _ pathComponent: CFString!, _ isDirectory: Bool) -&gt; CFURL!<br></p><p>Which briefly looking appears to be the same between corelib and OS X.<br></p><p>I&#39;m not sure what the best way forward on these things is, though, as the<br>corelib versions have seemed consistently improved, but presumably we still<br>want maintain compatibility. Anyone have ideas?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151222/051bbb67/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Inconsistencies between Foundation APIs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January  4, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Ian,<br></p><p>Any place where the API differs should be marked with a comment like this:<br></p><p>/// - Experiment: This is a draft API currently under consideration for official import into Foundation<br></p><p>If not, then we found some place that we either need to change or propose a change for. We can track those with bugs on bugs.swift.org &lt;http://bugs.swift.org/&gt;. Most of the ‘Experiment’ APIs are something we have no alternative but to change, though.<br></p><p>Thanks for your work on this,<br>- Tony<br></p><p>&gt; On Dec 21, 2015, at 5:39 PM, Ian Ynda-Hummel via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve been working on SR-276 &lt;https://bugs.swift.org/browse/SR-276&gt; and I&#39;m finding a fair amount of inconsistencies between corelib Foundation and OS X Foundation. It seems to be most common with optionality of return values. e.g., in NSURL<br>&gt; <br>&gt; corelib:<br>&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL?<br>&gt; <br>&gt; OS X:<br>&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL<br>&gt; <br>&gt; That particular case seems to be a difference in the treatment of the return value from CFURL<br>&gt; <br>&gt;    public func CFURLCreateCopyAppendingPathComponent(allocator: CFAllocator!, _ url: CFURL!, _ pathComponent: CFString!, _ isDirectory: Bool) -&gt; CFURL!<br>&gt; <br>&gt; Which briefly looking appears to be the same between corelib and OS X.<br>&gt; <br>&gt; I&#39;m not sure what the best way forward on these things is, though, as the corelib versions have seemed consistently improved, but presumably we still want maintain compatibility. Anyone have ideas?<br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/5bea5a85/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85ade213ef182c4a30916753b3c82b1e?s=50"></div><header><strong>Inconsistencies between Foundation APIs</strong> from <string>Ian Ynda-Hummel</string> &lt;ianynda at gmail.com&gt;<p>January  4, 2016 at 07:00:00pm</p></header><div class="content"><p>Got it. I&#39;ve seen the experimental thing elsewhere in the code. I&#39;ll work<br>under the assumption that inconsistencies are experimental and I&#39;ll open<br>bugs for things that are inconsistent but not marked as such.<br></p><p>On Mon, Jan 4, 2016 at 2:51 PM Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br></p><p>&gt; Hi Ian,<br>&gt;<br>&gt; Any place where the API differs should be marked with a comment like this:<br>&gt;<br>&gt; /// - Experiment: This is a draft API currently under consideration for<br>&gt; official import into Foundation<br>&gt;<br>&gt; If not, then we found some place that we either need to change or propose<br>&gt; a change for. We can track those with bugs on bugs.swift.org. Most of the<br>&gt; ‘Experiment’ APIs are something we have no alternative but to change,<br>&gt; though.<br>&gt;<br>&gt; Thanks for your work on this,<br>&gt; - Tony<br>&gt;<br>&gt; On Dec 21, 2015, at 5:39 PM, Ian Ynda-Hummel via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;ve been working on SR-276 &lt;https://bugs.swift.org/browse/SR-276&gt; and<br>&gt; I&#39;m finding a fair amount of inconsistencies between corelib Foundation and<br>&gt; OS X Foundation. It seems to be most common with optionality of return<br>&gt; values. e.g., in NSURL<br>&gt;<br>&gt; corelib:<br>&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt;<br>&gt; NSURL?<br>&gt;<br>&gt; OS X:<br>&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt;<br>&gt; NSURL<br>&gt;<br>&gt; That particular case seems to be a difference in the treatment of the<br>&gt; return value from CFURL<br>&gt;<br>&gt;    public func CFURLCreateCopyAppendingPathComponent(allocator:<br>&gt; CFAllocator!, _ url: CFURL!, _ pathComponent: CFString!, _ isDirectory:<br>&gt; Bool) -&gt; CFURL!<br>&gt;<br>&gt; Which briefly looking appears to be the same between corelib and OS X.<br>&gt;<br>&gt; I&#39;m not sure what the best way forward on these things is, though, as the<br>&gt; corelib versions have seemed consistently improved, but presumably we still<br>&gt; want maintain compatibility. Anyone have ideas?<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/404a8d5d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Inconsistencies between Foundation APIs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>January  4, 2016 at 02:00:00pm</p></header><div class="content"><p>Great, sounds good. If you ever notice a divergence, feel free to either file a bug or submit a PR that adds the comment. I don’t want to lose track of these things.<br></p><p>- Tony<br></p><p>&gt; On Jan 4, 2016, at 11:55 AM, Ian Ynda-Hummel &lt;ianynda at gmail.com&gt; wrote:<br>&gt; <br>&gt; Got it. I&#39;ve seen the experimental thing elsewhere in the code. I&#39;ll work under the assumption that inconsistencies are experimental and I&#39;ll open bugs for things that are inconsistent but not marked as such.<br>&gt; <br>&gt; On Mon, Jan 4, 2016 at 2:51 PM Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt; Hi Ian,<br>&gt; <br>&gt; Any place where the API differs should be marked with a comment like this:<br>&gt; <br>&gt; /// - Experiment: This is a draft API currently under consideration for official import into Foundation<br>&gt; <br>&gt; If not, then we found some place that we either need to change or propose a change for. We can track those with bugs on bugs.swift.org &lt;http://bugs.swift.org/&gt;. Most of the ‘Experiment’ APIs are something we have no alternative but to change, though.<br>&gt; <br>&gt; Thanks for your work on this,<br>&gt; - Tony<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 5:39 PM, Ian Ynda-Hummel via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt; <br>&gt;&gt; I&#39;ve been working on SR-276 &lt;https://bugs.swift.org/browse/SR-276&gt; and I&#39;m finding a fair amount of inconsistencies between corelib Foundation and OS X Foundation. It seems to be most common with optionality of return values. e.g., in NSURL<br>&gt;&gt; <br>&gt;&gt; corelib:<br>&gt;&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL?<br>&gt;&gt; <br>&gt;&gt; OS X:<br>&gt;&gt;     public func URLByAppendingPathComponent(pathComponent: String) -&gt; NSURL<br>&gt;&gt; <br>&gt;&gt; That particular case seems to be a difference in the treatment of the return value from CFURL<br>&gt;&gt; <br>&gt;&gt;    public func CFURLCreateCopyAppendingPathComponent(allocator: CFAllocator!, _ url: CFURL!, _ pathComponent: CFString!, _ isDirectory: Bool) -&gt; CFURL!<br>&gt;&gt; <br>&gt;&gt; Which briefly looking appears to be the same between corelib and OS X.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure what the best way forward on these things is, though, as the corelib versions have seemed consistently improved, but presumably we still want maintain compatibility. Anyone have ideas?<br>&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160104/7a38137c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
