<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 31, 2016 at 09:00:00am</p></header><div class="content"><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md<br></p><p>The review of SE-0054 &quot;Abolish ImplicitlyUnwrappedOptional type&quot; ran from Mar 25…30, 2016. The proposal has been *accepted, pending implementation experience*:<br></p><p>There is generally positive feedback on the proposal, as it keeps the good behaviors of the existing T! type syntax (including support for importing un-nullability-audited APIs, support for 2-phase initialization patterns, etc) while dramatically reducing the confusion and surprise that they introduce as they trickle through type inference.  The core team sees significant value in having a simple and predictable model that can be explained concisely. <br></p><p>That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.  Chris Willmore is working on an implementation of this now, so we should know in the next week or two.<br></p><p>Thank you to Chris Willmore for driving this forward!<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[swift-evolution-announce] [Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 31, 2016 at 09:00:00pm</p></header><div class="content"><p>On Thu, Mar 31, 2016 at 9:43 AM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; That said, this is the sort of proposal that can have a profound impact on<br>&gt; the actual experience using unaudited APIs.  The core team believes that<br>&gt; the experience will be good, but we would like to get some experience<br>&gt; moving a couple of existing projects (both low-level code that interacts<br>&gt; with C, and an “App” project working with high level frameworks) to see<br>&gt; what the impact is in practice.  If something unexpected comes up, we will<br>&gt; revisit this, and potentially reject it later.<br>&gt;<br></p><p>On the topic of unaudited APIs. Does a recommended way exist that I as say<br>a user of on an unaudited C API / library can add attributes to the C API<br>for my use in Swift? (e.g. code that I don&#39;t own, I just use)<br></p><p>It is likely a number of C APIs won&#39;t get attributed for improved use in<br>Swift by the authors so having a good way that the community could overlay<br>attributes for the benefit of Swift could be helpful.<br></p><p>Anything better then cloning headers?<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/99536e8a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[swift-evolution-announce] [Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>March 31, 2016 at 05:00:00pm</p></header><div class="content"><p>This seems like it would be a useful facility in general - the community may be able to provide audited headers even if the maintainers of the original project have zero interest in merging those changes. That burden is unreasonably high if it requires constant merging of the headers.<br></p><p>Russ<br></p><p>&gt; On Mar 31, 2016, at 2:24 PM, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Thu, Mar 31, 2016 at 9:43 AM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.<br>&gt; <br>&gt; On the topic of unaudited APIs. Does a recommended way exist that I as say a user of on an unaudited C API / library can add attributes to the C API for my use in Swift? (e.g. code that I don&#39;t own, I just use)<br>&gt; <br>&gt; It is likely a number of C APIs won&#39;t get attributed for improved use in Swift by the authors so having a good way that the community could overlay attributes for the benefit of Swift could be helpful.<br>&gt; <br>&gt; Anything better then cloning headers?<br>&gt; <br>&gt; -Shawn<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/11cc8b1b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 31, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Mar 31, 2016, at 2:24 PM, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Thu, Mar 31, 2016 at 9:43 AM Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.<br>&gt; <br>&gt; On the topic of unaudited APIs. Does a recommended way exist that I as say a user of on an unaudited C API / library can add attributes to the C API for my use in Swift? (e.g. code that I don&#39;t own, I just use)<br>&gt; <br>&gt; It is likely a number of C APIs won&#39;t get attributed for improved use in Swift by the authors so having a good way that the community could overlay attributes for the benefit of Swift could be helpful.<br></p><p>We have a facility for doing this (called “API notes”).  The problem is that it is currently hacked together to solve specific problems, not something that is really properly designed.<br></p><p>I know that many people would like to see this situation get improved, and make it a first class feature of the swift experience.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/45c3829b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>April  1, 2016 at 06:00:00am</p></header><div class="content"><p>Great to hear IUOs losing ground :-)<br></p><p>Might adding additional compiler warnings as described in SR-104 accompany the implementation of this proposal well?<br>https://bugs.swift.org/browse/SR-104<br></p><p>Fabian<br></p><p><br>On 31.03.2016, at 18:43, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p>Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md<br></p><p>The review of SE-0054 &quot;Abolish ImplicitlyUnwrappedOptional type&quot; ran from Mar 25…30, 2016. The proposal has been *accepted, pending implementation experience*:<br></p><p>There is generally positive feedback on the proposal, as it keeps the good behaviors of the existing T! type syntax (including support for importing un-nullability-audited APIs, support for 2-phase initialization patterns, etc) while dramatically reducing the confusion and surprise that they introduce as they trickle through type inference.  The core team sees significant value in having a simple and predictable model that can be explained concisely.<br></p><p>That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.  Chris Willmore is working on an implementation of this now, so we should know in the next week or two.<br></p><p>Thank you to Chris Willmore for driving this forward!<br></p><p>-Chris Lattner<br>Review Manager<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/0902ec54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April  1, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Mar 31, 2016, at 11:43 PM, Fabian Ehrentraud &lt;Fabian.Ehrentraud at willhaben.at&gt; wrote:<br>&gt; <br>&gt; Great to hear IUOs losing ground :-)<br>&gt; <br>&gt; Might adding additional compiler warnings as described in SR-104 accompany the implementation of this proposal well?<br>&gt; https://bugs.swift.org/browse/SR-104 &lt;https://bugs.swift.org/browse/SR-104&gt;<br>This is definitely related, but orthogonal to SE-0054.  <br></p><p>Just MHO, but I think warning on every implicit unwrap would completely defeat the point of having the T! feature in the first place: if that were the model we wanted, we would just import unaudited pointers as optional.  Doing that has been extensively discussed and is not a good idea.<br></p><p>-Chris<br></p><p>&gt; <br>&gt; Fabian<br>&gt; <br>&gt; <br>&gt;&gt; On 31.03.2016, at 18:43, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md&gt;<br>&gt;&gt; <br>&gt;&gt; The review of SE-0054 &quot;Abolish ImplicitlyUnwrappedOptional type&quot; ran from Mar 25…30, 2016. The proposal has been *accepted, pending implementation experience*:<br>&gt;&gt; <br>&gt;&gt; There is generally positive feedback on the proposal, as it keeps the good behaviors of the existing T! type syntax (including support for importing un-nullability-audited APIs, support for 2-phase initialization patterns, etc) while dramatically reducing the confusion and surprise that they introduce as they trickle through type inference.  The core team sees significant value in having a simple and predictable model that can be explained concisely. <br>&gt;&gt; <br>&gt;&gt; That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.  Chris Willmore is working on an implementation of this now, so we should know in the next week or two.<br>&gt;&gt; <br>&gt;&gt; Thank you to Chris Willmore for driving this forward!<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/a7427277/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a4606102970379a01dfe692a141c3662?s=50"></div><header><strong>[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Chris Willmore</string> &lt;cwillmore at apple.com&gt;<p>April 21, 2016 at 03:00:00pm</p></header><div class="content"><p>I evaluated the effects of this proposal on five projects written in Swift against Foundation and other well-audited OS X and iOS Objective-C APIs. The only changes that had to be made were the result of Objective-C API in the project itself that had not yet been annotated with nullability information. In addition, it ended up revealing a programming error in one project where a property had been unintentionally inferred to have IUO type. I presented these results at the Swift core team review meeting.<br></p><p>Jordan Rose expressed some concern that this sampling of projects didn’t really say anything about the effect of these changes on projects that depend on unaudited API, especially the Linux case. So I investigated the effect of this proposal on building swiftpm, which makes extensive use of POSIX C API. It ended up requiring ten new uses of the ! operator (out of 14k lines of Swift) to get building again; they were all return values from C API (ctime_r, getcwd, getenv, strerror, realpath) that had been saved to intermediate variables. Jordan observes that most of the cases are better expressed with “if let” or “guard let” statements anyway.<br></p><p>We have concluded that we should move forward with implementing the proposal.<br>  <br>-- Chris Willmore<br></p><p>&gt; On Mar 31, 2016, at 9:43 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md<br>&gt; <br>&gt; The review of SE-0054 &quot;Abolish ImplicitlyUnwrappedOptional type&quot; ran from Mar 25…30, 2016. The proposal has been *accepted, pending implementation experience*:<br>&gt; <br>&gt; There is generally positive feedback on the proposal, as it keeps the good behaviors of the existing T! type syntax (including support for importing un-nullability-audited APIs, support for 2-phase initialization patterns, etc) while dramatically reducing the confusion and surprise that they introduce as they trickle through type inference.  The core team sees significant value in having a simple and predictable model that can be explained concisely. <br>&gt; <br>&gt; That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.  Chris Willmore is working on an implementation of this now, so we should know in the next week or two.<br>&gt; <br>&gt; Thank you to Chris Willmore for driving this forward!<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160421/2dcc6c34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted, pending implementation] SE-0054: Abolish ImplicitlyUnwrappedOptional type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 24, 2016 at 02:00:00pm</p></header><div class="content"><p>On Apr 21, 2016, at 3:12 PM, Chris Willmore via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I evaluated the effects of this proposal on five projects written in Swift against Foundation and other well-audited OS X and iOS Objective-C APIs. The only changes that had to be made were the result of Objective-C API in the project itself that had not yet been annotated with nullability information. In addition, it ended up revealing a programming error in one project where a property had been unintentionally inferred to have IUO type. I presented these results at the Swift core team review meeting.<br>&gt; <br>&gt; Jordan Rose expressed some concern that this sampling of projects didn’t really say anything about the effect of these changes on projects that depend on unaudited API, especially the Linux case. So I investigated the effect of this proposal on building swiftpm, which makes extensive use of POSIX C API. It ended up requiring ten new uses of the ! operator (out of 14k lines of Swift) to get building again; they were all return values from C API (ctime_r, getcwd, getenv, strerror, realpath) that had been saved to intermediate variables. Jordan observes that most of the cases are better expressed with “if let” or “guard let” statements anyway.<br>&gt; <br>&gt; We have concluded that we should move forward with implementing the proposal.<br></p><p>Thank you for doing this extra analysis Chris, and thank you also for driving this whole effort forward!<br></p><p>-Chris<br></p><p>&gt;   <br>&gt; -- Chris Willmore<br>&gt; <br>&gt;&gt; On Mar 31, 2016, at 9:43 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md&gt;<br>&gt;&gt; <br>&gt;&gt; The review of SE-0054 &quot;Abolish ImplicitlyUnwrappedOptional type&quot; ran from Mar 25…30, 2016. The proposal has been *accepted, pending implementation experience*:<br>&gt;&gt; <br>&gt;&gt; There is generally positive feedback on the proposal, as it keeps the good behaviors of the existing T! type syntax (including support for importing un-nullability-audited APIs, support for 2-phase initialization patterns, etc) while dramatically reducing the confusion and surprise that they introduce as they trickle through type inference.  The core team sees significant value in having a simple and predictable model that can be explained concisely. <br>&gt;&gt; <br>&gt;&gt; That said, this is the sort of proposal that can have a profound impact on the actual experience using unaudited APIs.  The core team believes that the experience will be good, but we would like to get some experience moving a couple of existing projects (both low-level code that interacts with C, and an “App” project working with high level frameworks) to see what the impact is in practice.  If something unexpected comes up, we will revisit this, and potentially reject it later.  Chris Willmore is working on an implementation of this now, so we should know in the next week or two.<br>&gt;&gt; <br>&gt;&gt; Thank you to Chris Willmore for driving this forward!<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160424/89da3eb9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
