<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>January  3, 2016 at 12:00:00am</p></header><div class="content"><p>Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br></p><p>~Robert Widmann<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  2, 2016 at 11:00:00pm</p></header><div class="content"><p>+10<br></p><p>On Sat, Jan 2, 2016 at 11:36 PM, Developer via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Swift currently does not allow operators to use $ - I assume because the<br>&gt; grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see<br>&gt; why an entire class of identifiers has been eliminated, so I propose $<br>&gt; instead be reclassified as an `operator-character` so it can be used mixed<br>&gt; in with other such characters, but prevents the introduction of<br>&gt; `$Identifier`-style declarations that might conflict with implicit<br>&gt; parameters.<br>&gt;<br>&gt; ~Robert Widmann<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160102/2369ed91/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  2, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br></p><p>I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br></p><p>	brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>	Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>	  1&gt; &quot;foo&quot;<br>	$R0: String = &quot;foo&quot;<br>	  2&gt; print($R0)<br>	foo<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>January  3, 2016 at 01:00:00am</p></header><div class="content"><p>Well, that&#39;s just it.  $ is a perfectly valid character in identifiers everywhere but in the grammar for operators for some reason.  It isn&#39;t reserved, it just isn&#39;t there.<br></p><p>~Robert Widmann<br></p><p>2016/01/03 0:53、Brent Royal-Gordon &lt;brent at architechies.com&gt; のメッセージ:<br></p><p>&gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt; <br>&gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt; <br>&gt;    brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt;    Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt;      1&gt; &quot;foo&quot;<br>&gt;    $R0: String = &quot;foo&quot;<br>&gt;      2&gt; print($R0)<br>&gt;    foo<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  3, 2016 at 01:00:00pm</p></header><div class="content"><p>As I recall it, there is no overlap between operator characters and identifier characters. If it&#39;s not in the operator set, it&#39;s effectively reserved for identifiers.<br></p><p>I also remember someone from Apple confirming what Brent said but I can&#39;t find it at the moment.<br></p><p>Félix<br></p><p>&gt; Le 3 janv. 2016 à 03:47:39, Developer via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Well, that&#39;s just it.  $ is a perfectly valid character in identifiers everywhere but in the grammar for operators for some reason.  It isn&#39;t reserved, it just isn&#39;t there.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/01/03 0:53、Brent Royal-Gordon &lt;brent at architechies.com&gt; のメッセージ:<br>&gt; <br>&gt;&gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt;&gt; <br>&gt;&gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt;&gt; <br>&gt;&gt;   brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt;&gt;   Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt;&gt;     1&gt; &quot;foo&quot;<br>&gt;&gt;   $R0: String = &quot;foo&quot;<br>&gt;&gt;     2&gt; print($R0)<br>&gt;&gt;   foo<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>January  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Le 3 janv. 2016 à 13:40, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; As I recall it, there is no overlap between operator characters and identifier characters. If it&#39;s not in the operator set, it&#39;s effectively reserved for identifiers.<br></p><p>It&#39;s funny that ¢, £, and ¥ are operator characters but not any other currency symbol.<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On Sun, Jan 3, 2016, at 12:55 PM, Michel Fortin via swift-evolution wrote:<br>&gt; Le 3 janv. 2016 à 13:40, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; &gt; As I recall it, there is no overlap between operator characters and identifier characters. If it&#39;s not in the operator set, it&#39;s effectively reserved for identifiers.<br>&gt; <br>&gt; It&#39;s funny that ¢, £, and ¥ are operator characters but not any other currency symbol.<br></p><p>Blame Unicode. $, ¢, £, and ¥ are the only Currency Symbols that have the Pattern_Syntax property, and since Swift explicitly reserves $ for identifiers that leaves just ¢, £, and ¥ for operators. Although you can in fact use ¤ if you want, which is the symbol that denotes an unspecified currency sign.<br></p><p>I suppose Swift could explicitly include the Currency_Symbol general category in the list of operators, but it seems odd to say that things like ฿, ₦, or ₭ should be operators when they look like letters. It would actually make more sense for Swift to explicitly reserve Currency_Symbol for identifiers, which would remove ¢, £, and ¥ from the operator list (but that would be a bit odd because Pattern_Syntax characters make sense as operators, with $ being the single special case that I&#39;m aware of).<br></p><p>-Kevin Ballard<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt; <br>&gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt; <br>&gt; 	brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt; 	Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt; 	  1&gt; &quot;foo&quot;<br>&gt; 	$R0: String = &quot;foo&quot;<br>&gt; 	  2&gt; print($R0)<br>&gt; 	foo<br></p><p>Right.  That said, our current operator space (particularly the unicode segments covered) is not super well considered.  It would be great for someone to take a more systematic pass over them to rationalize things.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>Is it considered infeasible for any characters to be allowed in both<br>identifiers and operators?<br></p><p>On Sun, Jan 3, 2016 at 1:23 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Swift currently does not allow operators to use $ - I assume because<br>&gt; the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t<br>&gt; see why an entire class of identifiers has been eliminated, so I propose $<br>&gt; instead be reclassified as an `operator-character` so it can be used mixed<br>&gt; in with other such characters, but prevents the introduction of<br>&gt; `$Identifier`-style declarations that might conflict with implicit<br>&gt; parameters.<br>&gt; &gt;<br>&gt; &gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re<br>&gt; reserved for the debugger and REPL.<br>&gt; &gt;<br>&gt; &gt;       brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt; &gt;       Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15<br>&gt; clang-700.1.81). Type :help for assistance.<br>&gt; &gt;         1&gt; &quot;foo&quot;<br>&gt; &gt;       $R0: String = &quot;foo&quot;<br>&gt; &gt;         2&gt; print($R0)<br>&gt; &gt;       foo<br>&gt;<br>&gt; Right.  That said, our current operator space (particularly the unicode<br>&gt; segments covered) is not super well considered.  It would be great for<br>&gt; someone to take a more systematic pass over them to rationalize things.<br>&gt;<br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/c64e25d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  3, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m routinely proven wrong, but if $ was allowed to be either an operator or an identifier, it seems to me that `a &lt;$&gt; b` could produce two different and (potentially) valid ASTs depending only on whether &lt;$&gt; exists as an operator. Some people don&#39;t like operator overloading, imagine if you told them that they can&#39;t even be sure that what they&#39;re looking at is an operator at all.<br></p><p>Félix<br></p><p>&gt; Le 3 janv. 2016 à 21:02:40, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Is it considered infeasible for any characters to be allowed in both identifiers and operators?<br>&gt; <br>&gt; On Sun, Jan 3, 2016 at 1:23 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt; &gt;<br>&gt; &gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt; &gt;<br>&gt; &gt;       brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt; &gt;       Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt; &gt;         1&gt; &quot;foo&quot;<br>&gt; &gt;       $R0: String = &quot;foo&quot;<br>&gt; &gt;         2&gt; print($R0)<br>&gt; &gt;       foo<br>&gt; <br>&gt; Right.  That said, our current operator space (particularly the unicode segments covered) is not super well considered.  It would be great for someone to take a more systematic pass over them to rationalize things.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/869d15ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January  3, 2016 at 06:00:00pm</p></header><div class="content"><p>That&#39;s an interesting issue, I think you&#39;re right. Technically I think it<br>would only be a problem if you omitted spaces: &quot;a&lt;$&gt;b&quot;, since infix<br>identifiers aren&#39;t allowed to have a space on one side but not the other<br>(thus &quot;a &lt;$&gt; b&quot; couldn&#39;t be &quot;&gt;(&lt;(a, $), b)&quot;, but &quot;a&lt;$&gt;b&quot; could).<br></p><p>Jacob<br></p><p>On Sun, Jan 3, 2016 at 6:27 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br></p><p>&gt; I&#39;m routinely proven wrong, but if $ was allowed to be either an operator<br>&gt; or an identifier, it seems to me that `a &lt;$&gt; b` could produce two different<br>&gt; and (potentially) valid ASTs depending only on whether &lt;$&gt; exists as an<br>&gt; operator. Some people don&#39;t like operator overloading, imagine if you told<br>&gt; them that they can&#39;t even be sure that what they&#39;re looking at is an<br>&gt; operator at all.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 3 janv. 2016 à 21:02:40, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; Is it considered infeasible for any characters to be allowed in both<br>&gt; identifiers and operators?<br>&gt;<br>&gt; On Sun, Jan 3, 2016 at 1:23 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Swift currently does not allow operators to use $ - I assume because<br>&gt;&gt; the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t<br>&gt;&gt; see why an entire class of identifiers has been eliminated, so I propose $<br>&gt;&gt; instead be reclassified as an `operator-character` so it can be used mixed<br>&gt;&gt; in with other such characters, but prevents the introduction of<br>&gt;&gt; `$Identifier`-style declarations that might conflict with implicit<br>&gt;&gt; parameters.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I believe the reason you don&#39;t see any other $ variables is that<br>&gt;&gt; they&#39;re reserved for the debugger and REPL.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt;&gt; &gt;       Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15<br>&gt;&gt; clang-700.1.81). Type :help for assistance.<br>&gt;&gt; &gt;         1&gt; &quot;foo&quot;<br>&gt;&gt; &gt;       $R0: String = &quot;foo&quot;<br>&gt;&gt; &gt;         2&gt; print($R0)<br>&gt;&gt; &gt;       foo<br>&gt;&gt;<br>&gt;&gt; Right.  That said, our current operator space (particularly the unicode<br>&gt;&gt; segments covered) is not super well considered.  It would be great for<br>&gt;&gt; someone to take a more systematic pass over them to rationalize things.<br>&gt;&gt;<br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/3da876c0/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January  3, 2016 at 07:00:00pm</p></header><div class="content"><p>We need a token to be unambiguously an operator or identifier - we can have different rules for the leading and subsequent characters though.<br></p><p>-Chris<br></p><p>&gt; On Jan 3, 2016, at 6:02 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Is it considered infeasible for any characters to be allowed in both identifiers and operators?<br>&gt; <br>&gt;&gt; On Sun, Jan 3, 2016 at 1:23 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt;&gt; &gt;       Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt;&gt; &gt;         1&gt; &quot;foo&quot;<br>&gt;&gt; &gt;       $R0: String = &quot;foo&quot;<br>&gt;&gt; &gt;         2&gt; print($R0)<br>&gt;&gt; &gt;       foo<br>&gt;&gt; <br>&gt;&gt; Right.  That said, our current operator space (particularly the unicode segments covered) is not super well considered.  It would be great for someone to take a more systematic pass over them to rationalize things.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/7a888b1e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8993e184f091e98f018c07d96ac4731f?s=50"></div><header><strong>[Proposal]: Free the &#39;$&#39; Symbol!</strong> from <string>John Joyce</string> &lt;uchuugaka at icloud.com&gt;<p>January  4, 2016 at 03:00:00pm</p></header><div class="content"><p>I have been thinking about this topic a lot, but not &#39;$&#39; symbol, rather the tools to create DSLs within Swift to enable productive &amp; meaningful special casing. (Ruby&#39;s Rake vs Make/GNUMake come to mind a lot, or Ruby&#39;s Sinatra web framework come to mind, perhaps Python&#39;s Flask to  a lesser extent, and in general the way things can be constructed for tools like HTTP handling or similar.)<br></p><p>I think native Regular Expressions will enable a lot of things, but if it were possible to have more flexibility in the operator space, a lot could be possible.<br>My thinking is along the lines of class or struct internal operators or pseudo operators.<br>The infix operator pattern allows functions without parens. If these can be written to be human language characters, this enables many interesting DSL behaviors.<br></p><p>From thinking about Regular Expression support and how many languages use / to delimit Regular Expression literals, and provide special scoping rules that make escaping \ unnecessary, perhaps there is something to the scoping rules that might be more flexible, long-term?<br></p><p>Apologies if I have wandered off a bit on a tangent but the DSL space seems to tie these together potentially.<br></p><p>I would posit that making human language characters available rather than symbols will have a much greater productivity and creativity impact. (and also likely more accessible by virtue of being potentially readable, literally) <br></p><p>The alternatives at the moment all seem to come back to either stringly-typed dictionaries or to enums + boilerplate.<br></p><p><br>&gt; On Jan 4, 2016, at 12:17 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We need a token to be unambiguously an operator or identifier - we can have different rules for the leading and subsequent characters though.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; On Jan 3, 2016, at 6:02 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Is it considered infeasible for any characters to be allowed in both identifiers and operators?<br>&gt;&gt; <br>&gt;&gt; On Sun, Jan 3, 2016 at 1:23 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Jan 2, 2016, at 11:53 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; Swift currently does not allow operators to use $ - I assume because the grammar reserves it in one place: `implicit-parameter-name`.  I don&#39;t see why an entire class of identifiers has been eliminated, so I propose $ instead be reclassified as an `operator-character` so it can be used mixed in with other such characters, but prevents the introduction of `$Identifier`-style declarations that might conflict with implicit parameters.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I believe the reason you don&#39;t see any other $ variables is that they&#39;re reserved for the debugger and REPL.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;       brent at Brents-MacBook-Pro ~/D/Code&gt; swift<br>&gt;&gt; &gt;       Welcome to Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81). Type :help for assistance.<br>&gt;&gt; &gt;         1&gt; &quot;foo&quot;<br>&gt;&gt; &gt;       $R0: String = &quot;foo&quot;<br>&gt;&gt; &gt;         2&gt; print($R0)<br>&gt;&gt; &gt;       foo<br>&gt;&gt; <br>&gt;&gt; Right.  That said, our current operator space (particularly the unicode segments covered) is not super well considered.  It would be great for someone to take a more systematic pass over them to rationalize things.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160104/98708399/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
