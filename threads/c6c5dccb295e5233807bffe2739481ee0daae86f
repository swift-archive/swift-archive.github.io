<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 18, 2016 at 08:00:00pm</p></header><div class="content"><p>The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br></p><p>It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br></p><p>This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br></p><p>The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br></p><p>Krystof<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 18, 2016 at 04:00:00pm</p></header><div class="content"><p>+1<br></p><p>I&#39;m getting used to go back to code and unwrap my optionals but if<br>this could be done more automatically in interpolation it&#39;d be great.<br></p><p>On 18 May 2016 at 15:50, Krystof Vasa via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;<br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;<br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;<br>&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;<br>&gt; Krystof<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>Well, I wouldn&#39;t deprecate them.<br></p><p>Maybe it should print something different: the value itself if it is not nil, and &quot;nil&quot; otherwise?<br></p><p>Or there may be an optional warning for this case.<br></p><p>Or maybe both. But not just deprecate the feature altogether. It will make people use the &quot;!&quot; instead in unsafe places (like &quot;\(someOptional!)&quot;) - it&#39;s better not to crash and print something strange instead. Especially when in production.<br></p><p>-Michael<br></p><p>&gt; Am 18.05.2016 um 20:50 schrieb Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt; <br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt; <br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; <br>&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>May 18, 2016 at 08:00:00pm</p></header><div class="content"><p>We could make Optional conform to CustomStringConvertible:<br>var description: String {<br>    switch self {<br>        case .some(let x): return &quot;\(x)&quot;<br>        case .none: return &quot;\(Wrapped.self)?.none&quot;<br>    }<br>}<br></p><p>- Dave Sweeris<br></p><p>&gt; On May 18, 2016, at 15:56, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Well, I wouldn&#39;t deprecate them.<br>&gt; <br>&gt; Maybe it should print something different: the value itself if it is not nil, and &quot;nil&quot; otherwise?<br>&gt; <br>&gt; Or there may be an optional warning for this case.<br>&gt; <br>&gt; Or maybe both. But not just deprecate the feature altogether. It will make people use the &quot;!&quot; instead in unsafe places (like &quot;\(someOptional!)&quot;) - it&#39;s better not to crash and print something strange instead. Especially when in production.<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 18.05.2016 um 20:50 schrieb Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt;&gt; <br>&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt;&gt; <br>&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; <br>&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; <br>&gt;&gt; Krystof<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 19, 2016 at 02:00:00am</p></header><div class="content"><p>Optional is already CustomStringConvertible. Again, this was done on<br>purpose (that&#39;s not an argument to keep it this way, though). Source<br>&lt;https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift#L260&gt;<br></p><p>On Wed, May 18, 2016 at 6:33 PM David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We could make Optional conform to CustomStringConvertible:<br>&gt; var description: String {<br>&gt;     switch self {<br>&gt;         case .some(let x): return &quot;\(x)&quot;<br>&gt;         case .none: return &quot;\(Wrapped.self)?.none&quot;<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; &gt; On May 18, 2016, at 15:56, Michael Peternell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Well, I wouldn&#39;t deprecate them.<br>&gt; &gt;<br>&gt; &gt; Maybe it should print something different: the value itself if it is not<br>&gt; nil, and &quot;nil&quot; otherwise?<br>&gt; &gt;<br>&gt; &gt; Or there may be an optional warning for this case.<br>&gt; &gt;<br>&gt; &gt; Or maybe both. But not just deprecate the feature altogether. It will<br>&gt; make people use the &quot;!&quot; instead in unsafe places (like &quot;\(someOptional!)&quot;)<br>&gt; - it&#39;s better not to crash and print something strange instead. Especially<br>&gt; when in production.<br>&gt; &gt;<br>&gt; &gt; -Michael<br>&gt; &gt;<br>&gt; &gt;&gt; Am 18.05.2016 um 20:50 schrieb Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt; one of its weaknesses.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt; with an optional by mistake and the result is then far from the expected<br>&gt; result.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt; happened since as well.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The user will seldomly want to really get the output<br>&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt; believe this should be addressed by a warning to force the user to check<br>&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt; return a non-optional value to force the current behavior.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Krystof<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/25b53514/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>May 18, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 from me as well. All these “Optional(foo)” things showing up in user-facing strings are a pain, and since they don’t show up until runtime, it’s really easy to miss them.<br></p><p>Charles<br></p><p>&gt; On May 18, 2016, at 1:50 PM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt; <br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt; <br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; <br>&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>+1, personally I have taken to using `x+&quot;str&quot;+y` instead of<br>`&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I<br>do this accidentally.<br></p><p>But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for<br>simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like<br>&quot;\(describing: x)&quot; ?<br></p><p><br>On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The string interpolation is one of the strong sides of Swift, but also one<br>&gt; of its weaknesses.<br>&gt;<br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with<br>&gt; an optional by mistake and the result is then far from the expected result.<br>&gt;<br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened<br>&gt; since as well.<br>&gt;<br>&gt; The user will seldomly want to really get the output<br>&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt; believe this should be addressed by a warning to force the user to check<br>&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt; return a non-optional value to force the current behavior.<br>&gt;<br>&gt; Krystof<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/4436f7fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 18, 2016 at 10:00:00pm</p></header><div class="content"><p>-1.<br></p><p>Optional(foo) better depicts the actual type (it&#39;s an options string, after<br>all). If you&#39;re not happy with it, just use the nil coalescing operator<br>such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as<br>implicit casting - there are reasons it&#39;s done the way it is.<br>On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of<br>&gt; `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I<br>&gt; do this accidentally.<br>&gt;<br>&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for<br>&gt; simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like<br>&gt; &quot;\(describing: x)&quot; ?<br>&gt;<br>&gt;<br>&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt; one of its weaknesses.<br>&gt;&gt;<br>&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt; result.<br>&gt;&gt;<br>&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt; happened since as well.<br>&gt;&gt;<br>&gt;&gt; The user will seldomly want to really get the output<br>&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt;<br>&gt;&gt; Krystof<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/a7ad6d3e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eae087af7a459cd70a62c2f8a63371a8?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Valentin</string> &lt;val1984 at gmail.com&gt;<p>May 19, 2016 at 08:00:00am</p></header><div class="content"><p>From what I understand of this thread, the argument here is that directly using an optional in a string interpolation is almost never what you really want to do (except mainly for debugging purposes) but you wouldn&#39;t see this mistake until much later at runtime.<br>And I feel like one of Swift goals is to enable us, imperfect human creatures, to detect as many problems or mistakes as possible long before runtime.<br></p><p>&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1. <br>&gt; <br>&gt; Optional(foo) better depicts the actual type (it&#39;s an options string, after all). If you&#39;re not happy with it, just use the nil coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt;&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I do this accidentally.<br>&gt;&gt; <br>&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dan Appel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/62aa98c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 19, 2016 at 01:00:00am</p></header><div class="content"><p>Making string interpolation reject just optional (at compile time) when it doesn’t reject any other type sounds tricky to express.<br></p><p>What if instead Optional just didn’t decorate the wrapped value, outputting either the inner value or “nil” in these cases?<br></p><p>The debugDescription could remain &quot;Optional(data)&quot; style.<br></p><p>-DW<br></p><p>&gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; From what I understand of this thread, the argument here is that directly using an optional in a string interpolation is almost never what you really want to do (except mainly for debugging purposes) but you wouldn&#39;t see this mistake until much later at runtime.<br>&gt; And I feel like one of Swift goals is to enable us, imperfect human creatures, to detect as many problems or mistakes as possible long before runtime.<br>&gt; <br>&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; -1. <br>&gt;&gt; <br>&gt;&gt; Optional(foo) better depicts the actual type (it&#39;s an options string, after all). If you&#39;re not happy with it, just use the nil coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt;&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I do this accidentally.<br>&gt;&gt; <br>&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt; <br>&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt; <br>&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; <br>&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; <br>&gt;&gt; Krystof<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Dan Appel<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/de512fb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 19, 2016 at 07:00:00am</p></header><div class="content"><p>You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label?<br>Seeing &quot;nil&quot;. When the optional is there, it is made clear to the developer<br>that the string they are showing *can be nil*. However, if you hide that<br>from the users you are less likely to unwrap that optional and hence more<br>likely to show the user &quot;nil&quot;. This behavior really goes against some of<br>the core ideas of Swift - you want your code to be expressive but not<br>abstract away potentially useful information.<br></p><p>On Thu, May 19, 2016 at 12:24 AM David Waite &lt;david at alkaline-solutions.com&gt;<br>wrote:<br></p><p>&gt; Making string interpolation reject just optional (at compile time) when it<br>&gt; doesn’t reject any other type sounds tricky to express.<br>&gt;<br>&gt; What if instead Optional just didn’t decorate the wrapped value,<br>&gt; outputting either the inner value or “nil” in these cases?<br>&gt;<br>&gt; The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt;<br>&gt; -DW<br>&gt;<br>&gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; From what I understand of this thread, the argument here is that directly<br>&gt; using an optional in a string interpolation is almost never what you really<br>&gt; want to do (except mainly for debugging purposes) but you wouldn&#39;t see this<br>&gt; mistake until much later at runtime.<br>&gt; And I feel like one of Swift goals is to enable us, imperfect human<br>&gt; creatures, to detect as many problems or mistakes as possible long before<br>&gt; runtime.<br>&gt;<br>&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; -1.<br>&gt;<br>&gt; Optional(foo) better depicts the actual type (it&#39;s an options string,<br>&gt; after all). If you&#39;re not happy with it, just use the nil coalescing<br>&gt; operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals<br>&gt; as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of<br>&gt;&gt; `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I<br>&gt;&gt; do this accidentally.<br>&gt;&gt;<br>&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for<br>&gt;&gt; simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like<br>&gt;&gt; &quot;\(describing: x)&quot; ?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt;&gt; one of its weaknesses.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt;&gt; result.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt;&gt; happened since as well.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The user will seldomly want to really get the output<br>&gt;&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Dan Appel<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; --<br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/d9f30827/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 19, 2016 at 07:00:00am</p></header><div class="content"><p>Actually, I just noticed the comment about never wanting to show an<br>optional value. That is a fair point, and worthy of consideration. I&#39;m<br>happy as long as there is no surprising behavior going on :)<br></p><p>On Thu, May 19, 2016 at 12:28 AM Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br></p><p>&gt; You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label?<br>&gt; Seeing &quot;nil&quot;. When the optional is there, it is made clear to the developer<br>&gt; that the string they are showing *can be nil*. However, if you hide that<br>&gt; from the users you are less likely to unwrap that optional and hence more<br>&gt; likely to show the user &quot;nil&quot;. This behavior really goes against some of<br>&gt; the core ideas of Swift - you want your code to be expressive but not<br>&gt; abstract away potentially useful information.<br>&gt;<br>&gt; On Thu, May 19, 2016 at 12:24 AM David Waite &lt;david at alkaline-solutions.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Making string interpolation reject just optional (at compile time) when<br>&gt;&gt; it doesn’t reject any other type sounds tricky to express.<br>&gt;&gt;<br>&gt;&gt; What if instead Optional just didn’t decorate the wrapped value,<br>&gt;&gt; outputting either the inner value or “nil” in these cases?<br>&gt;&gt;<br>&gt;&gt; The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt;&gt;<br>&gt;&gt; -DW<br>&gt;&gt;<br>&gt;&gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; From what I understand of this thread, the argument here is that directly<br>&gt;&gt; using an optional in a string interpolation is almost never what you really<br>&gt;&gt; want to do (except mainly for debugging purposes) but you wouldn&#39;t see this<br>&gt;&gt; mistake until much later at runtime.<br>&gt;&gt; And I feel like one of Swift goals is to enable us, imperfect human<br>&gt;&gt; creatures, to detect as many problems or mistakes as possible long before<br>&gt;&gt; runtime.<br>&gt;&gt;<br>&gt;&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; -1.<br>&gt;&gt;<br>&gt;&gt; Optional(foo) better depicts the actual type (it&#39;s an options string,<br>&gt;&gt; after all). If you&#39;re not happy with it, just use the nil coalescing<br>&gt;&gt; operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals<br>&gt;&gt; as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt;&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of<br>&gt;&gt;&gt; `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I<br>&gt;&gt;&gt; do this accidentally.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for<br>&gt;&gt;&gt; simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like<br>&gt;&gt;&gt; &quot;\(describing: x)&quot; ?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt;&gt;&gt; one of its weaknesses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt;&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt;&gt;&gt; result.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt;&gt;&gt; happened since as well.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The user will seldomly want to really get the output<br>&gt;&gt;&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt;&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt;&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt;&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt;&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt;&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt;&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dan Appel<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt; Dan Appel<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/e04f9a88/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 19, 2016 at 09:00:00am</p></header><div class="content"><p>Consider the following example:<br></p><p>let originalURL: NSURL = NSURL(string: &quot;http://apple.com/iphone&quot;)!<br>let newURL = NSURL(string: &quot;http://apple.com\(originalURL.path)/help&quot;)<br></p><p>What&#39;s the newURL? Nil, because it was being inited with<br></p><p>http://apple.comOptional(/iphone)/help<br></p><p>Since the path property is optional.<br></p><p>Which is not something you figure out until runtime, wondering why the URL is nil. This is very annoying when you run into this issue repeatedly on several occasions because you forget to unwrap the value.<br></p><p>*This* is IMHO an undesired and unexpected behavior.<br></p><p>If interpolating optionals did become a warning, you&#39;d immediately know about a potential bug: you don&#39;t check if path != nil.<br></p><p>BTW if you still want the original behavior of printing <br></p><p>Optional(my string value),<br></p><p>you can still write <br></p><p>&quot;http://apple.com\(originalURL.path.debugDescription)/help&quot; <br></p><p>which invokes debugDescription on the Optional, not the String (since there is no &quot;?&quot;), and you get the original value anyway. And this could be the Fix-It for it as well to maintain original behavior.<br></p><p>Krystof<br></p><p>&gt; On May 19, 2016, at 9:28 AM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label? Seeing &quot;nil&quot;. When the optional is there, it is made clear to the developer that the string they are showing can be nil. However, if you hide that from the users you are less likely to unwrap that optional and hence more likely to show the user &quot;nil&quot;. This behavior really goes against some of the core ideas of Swift - you want your code to be expressive but not abstract away potentially useful information.<br>&gt; <br>&gt; On Thu, May 19, 2016 at 12:24 AM David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt; Making string interpolation reject just optional (at compile time) when it doesn’t reject any other type sounds tricky to express.<br>&gt; <br>&gt; What if instead Optional just didn’t decorate the wrapped value, outputting either the inner value or “nil” in these cases?<br>&gt; <br>&gt; The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; From what I understand of this thread, the argument here is that directly using an optional in a string interpolation is almost never what you really want to do (except mainly for debugging purposes) but you wouldn&#39;t see this mistake until much later at runtime.<br>&gt;&gt; And I feel like one of Swift goals is to enable us, imperfect human creatures, to detect as many problems or mistakes as possible long before runtime.<br>&gt;&gt; <br>&gt;&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; -1. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Optional(foo) better depicts the actual type (it&#39;s an options string, after all). If you&#39;re not happy with it, just use the nil coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt;&gt;&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I do this accidentally.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; Dan Appel<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/a54c60ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May 19, 2016 at 06:00:00pm</p></header><div class="content"><p>Yes, I think I agree this should show a warning, and require you to explicitly state that you are happy dealing with an optional.<br></p><p>Possibly you would have to add a ? suffix to make it explicit:<br></p><p>&quot;http://apple.com\(originalURL.path?)/help”<br></p><p>This would be compatible with StringInterpolationConvertible, where you may still want the original optional passed, whereas `.debugDescription` would always pass a string.<br></p><p><br>&gt; On 19 May 2016, at 5:39 PM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the following example:<br>&gt; <br>&gt; let originalURL: NSURL = NSURL(string: &quot;http://apple.com/iphone &lt;http://apple.com/iphone&gt;&quot;)!<br>&gt; let newURL = NSURL(string: &quot;http://apple.com\(originalURL.path)/help &lt;http://apple.com/(originalurl.path)/help&gt;&quot;)<br>&gt; <br>&gt; What&#39;s the newURL? Nil, because it was being inited with<br>&gt; <br>&gt; http://apple.comOptional(/iphone)/help &lt;http://apple.comoptional(/iphone)/help&gt;<br>&gt; <br>&gt; Since the path property is optional.<br>&gt; <br>&gt; Which is not something you figure out until runtime, wondering why the URL is nil. This is very annoying when you run into this issue repeatedly on several occasions because you forget to unwrap the value.<br>&gt; <br>&gt; *This* is IMHO an undesired and unexpected behavior.<br>&gt; <br>&gt; If interpolating optionals did become a warning, you&#39;d immediately know about a potential bug: you don&#39;t check if path != nil.<br>&gt; <br>&gt; BTW if you still want the original behavior of printing <br>&gt; <br>&gt; Optional(my string value),<br>&gt; <br>&gt; you can still write <br>&gt; <br>&gt; &quot;http://apple.com\(originalURL.path.debugDescription)/help &lt;http://apple.com/(originalurl.path.debugdescription)/help&gt;&quot; <br>&gt; <br>&gt; which invokes debugDescription on the Optional, not the String (since there is no &quot;?&quot;), and you get the original value anyway. And this could be the Fix-It for it as well to maintain original behavior.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt;&gt; On May 19, 2016, at 9:28 AM, Dan Appel &lt;dan.appel00 at gmail.com &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label? Seeing &quot;nil&quot;. When the optional is there, it is made clear to the developer that the string they are showing can be nil. However, if you hide that from the users you are less likely to unwrap that optional and hence more likely to show the user &quot;nil&quot;. This behavior really goes against some of the core ideas of Swift - you want your code to be expressive but not abstract away potentially useful information.<br>&gt;&gt; <br>&gt;&gt; On Thu, May 19, 2016 at 12:24 AM David Waite &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt; Making string interpolation reject just optional (at compile time) when it doesn’t reject any other type sounds tricky to express.<br>&gt;&gt; <br>&gt;&gt; What if instead Optional just didn’t decorate the wrapped value, outputting either the inner value or “nil” in these cases?<br>&gt;&gt; <br>&gt;&gt; The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From what I understand of this thread, the argument here is that directly using an optional in a string interpolation is almost never what you really want to do (except mainly for debugging purposes) but you wouldn&#39;t see this mistake until much later at runtime.<br>&gt;&gt;&gt; And I feel like one of Swift goals is to enable us, imperfect human creatures, to detect as many problems or mistakes as possible long before runtime.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Optional(foo) better depicts the actual type (it&#39;s an options string, after all). If you&#39;re not happy with it, just use the nil coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt;&gt;&gt;&gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I do this accidentally.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dan Appel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/e1b99346/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/74b2be3f33e2efebef65c9a48c32872a?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Angelo Villegas</string> &lt;gelo.web at gmail.com&gt;<p>May 19, 2016 at 04:00:00pm</p></header><div class="content"><p>I think displaying a warning instead of deprecation would suffice.<br></p><p>A down vote for deprecation.<br></p><p><br>On 19 May 2016, 4:06 PM +0800, Patrick Smith via swift-evolution&lt;swift-evolution at swift.org&gt;, wrote:<br>&gt; Yes, I think I agree this should show a warning, and require you to explicitly state that you are happy dealing with an optional.<br>&gt;  <br>&gt; Possibly you would have to add a ? suffix to make it explicit:<br>&gt;  <br>&gt; &quot;http://apple.com\(originalURL.path?)/help(http://apple.com/(originalurl.path?)/help)”<br>&gt;  <br>&gt; This would be compatible withStringInterpolationConvertible, where you may still want the original optional passed, whereas `.debugDescription` would always pass a string.<br>&gt;  <br>&gt;  <br>&gt; &gt; On 19 May 2016, at 5:39 PM, Krystof Vasa via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; Consider the following example:<br>&gt; &gt;  <br>&gt; &gt; let originalURL: NSURL = NSURL(string: &quot;http://apple.com/iphone&quot;)!<br>&gt; &gt; let newURL = NSURL(string: &quot;http://apple.com\(originalURL.path)/help(http://apple.com/(originalurl.path)/help)&quot;)<br>&gt; &gt;  <br>&gt; &gt; What&#39;s the newURL? Nil, because it was being inited with<br>&gt; &gt;  <br>&gt; &gt; http://apple.comOptional(/iphone)/help(http://apple.comoptional(/iphone)/help)<br>&gt; &gt;  <br>&gt; &gt; Since the path property is optional.<br>&gt; &gt;  <br>&gt; &gt; Which is not something you figure out until runtime, wondering why the URL is nil. This is very annoying when you run into this issue repeatedly on several occasions because you forget to unwrap the value.<br>&gt; &gt;  <br>&gt; &gt; *This* is IMHO an undesired and unexpected behavior.<br>&gt; &gt;  <br>&gt; &gt; If interpolating optionals did become a warning, you&#39;d immediately know about a potential bug: you don&#39;t check if path != nil.<br>&gt; &gt;  <br>&gt; &gt; BTW if you still want the original behavior of printing<br>&gt; &gt;  <br>&gt; &gt; Optional(my string value),<br>&gt; &gt;  <br>&gt; &gt; you can still write<br>&gt; &gt;  <br>&gt; &gt; &quot;http://apple.com\(originalURL.path.debugDescription)/help(http://apple.com/(originalurl.path.debugdescription)/help)&quot;<br>&gt; &gt;  <br>&gt; &gt; which invokes debugDescription on the Optional, not the String (since there is no &quot;?&quot;), and you get the original value anyway. And this could be the Fix-It for it as well to maintain original behavior.<br>&gt; &gt;  <br>&gt; &gt; Krystof<br>&gt; &gt;  <br>&gt; &gt; &gt; On May 19, 2016, at 9:28 AM, Dan Appel&lt;dan.appel00 at gmail.com(mailto:dan.appel00 at gmail.com)&gt;wrote:<br>&gt; &gt; &gt; You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label? Seeing &quot;nil&quot;. When the optional is there, it is made clear to the developer that the string they are showingcan be nil. However, if you hide that from the users you are less likely to unwrap that optional and hence more likely to show the user &quot;nil&quot;. This behavior really goes against some of the core ideas of Swift - you want your code to be expressive but not abstract away potentially useful information.<br>&gt; &gt; &gt; On Thu, May 19, 2016 at 12:24 AM David Waite&lt;david at alkaline-solutions.com(mailto:david at alkaline-solutions.com)&gt;wrote:<br>&gt; &gt; &gt; &gt; Making string interpolation reject just optional (at compile time) when it doesn’t reject any other type sounds tricky to express.<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; What if instead Optional just didn’t decorate the wrapped value, outputting either the inner value or “nil” in these cases?<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; -DW<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; On May 19, 2016, at 12:52 AM, Valentin via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; From what I understand of this thread, the argument here is that directly using an optional in a string interpolation is almost never what you really want to do (except mainly for debugging purposes) but you wouldn&#39;t see this mistake until much later at runtime.<br>&gt; &gt; &gt; &gt; &gt; And I feel like one of Swift goals is to enable us, imperfect human creatures, to detect as many problems or mistakes as possible long before runtime.<br>&gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; On 19 mai 2016, at 00:56, Dan Appel via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; -1.<br>&gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; Optional(foo) better depicts the actual type (it&#39;s an options string, after all). If you&#39;re not happy with it, just use the nil coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same series of proposals as implicit casting - there are reasons it&#39;s done the way it is.<br>&gt; &gt; &gt; &gt; &gt; &gt; On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; +1, personally I have taken to using `x+&quot;str&quot;+y` instead of `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a compile-time error if I do this accidentally.<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; But I do see the appeal of being able to print(&quot;the data: \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Krystof<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt; &gt; &gt; --<br>&gt; &gt; &gt; &gt; &gt; &gt; Dan Appel<br>&gt; &gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; Dan Appel<br>&gt; &gt;  <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/f276ec7d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 19, 2016 at 02:00:00pm</p></header><div class="content"><p>Strong +1 for the (at least) warning in case of optional in string <br>interpolation.<br></p><p>Actually I think `Optional(something)` is a form of text representation for <br>*debugging only*, not for &#39;production&#39;. It is clear, that by default we <br>need text representation for &#39;production&#39;, so it is logical for me that <br>optional in string interpolation should return text without `Optional(..)`. <br>Probably this means that optional should not have default .description for <br>`production`, but just debugDescription for debugging.<br></p><p>So, for production you&#39;ll need to have:<br></p><p>let newURL = NSURL(string: &quot;http://apple.com\(originalURL.path!)/help&quot;)<br>(or use ?? etc)<br></p><p>for debugging:<br>let newURL = NSURL(string: <br>&quot;http://apple.com\(originalURL.path.debugDescription)/help&quot;)<br></p><p><br>On 19.05.2016 10:39, Krystof Vasa via swift-evolution wrote:<br>&gt; Consider the following example:<br>&gt;<br>&gt; let originalURL: NSURL = NSURL(string: &quot;http://apple.com/iphone&quot;)!<br>&gt; let newURL = NSURL(string: &quot;http://apple.com\(originalURL.path)/help&quot;)<br>&gt;<br>&gt; What&#39;s the newURL? Nil, because it was being inited with<br>&gt;<br>&gt; http://apple.comOptional(/iphone)/help<br>&gt; &lt;http://apple.comoptional%28/iphone%29/help&gt;<br>&gt;<br>&gt; Since the path property is optional.<br>&gt;<br>&gt; Which is not something you figure out until runtime, wondering why the URL<br>&gt; is nil. This is very annoying when you run into this issue repeatedly on<br>&gt; several occasions because you forget to unwrap the value.<br>&gt;<br>&gt; *This* is IMHO an undesired and unexpected behavior.<br>&gt;<br>&gt; If interpolating optionals did become a warning, you&#39;d immediately know<br>&gt; about a potential bug: you don&#39;t check if path != nil.<br>&gt;<br>&gt; BTW if you still want the original behavior of printing<br>&gt;<br>&gt; Optional(my string value),<br>&gt;<br>&gt; you can still write<br>&gt;<br>&gt; &quot;http://apple.com\(originalURL.path.debugDescription)/help&quot;<br>&gt;<br>&gt; which invokes debugDescription on the Optional, not the String (since there<br>&gt; is no &quot;?&quot;), and you get the original value anyway. And this could be the<br>&gt; Fix-It for it as well to maintain original behavior.<br>&gt;<br>&gt; Krystof<br>&gt;<br>&gt;&gt; On May 19, 2016, at 9:28 AM, Dan Appel &lt;dan.appel00 at gmail.com<br>&gt;&gt; &lt;mailto:dan.appel00 at gmail.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; You know what&#39;s worse than seeing &quot;Optional(my string value)&quot; in a label?<br>&gt;&gt; Seeing &quot;nil&quot;. When the optional is there, it is made clear to the<br>&gt;&gt; developer that the string they are showing /can be nil/. However, if you<br>&gt;&gt; hide that from the users you are less likely to unwrap that optional and<br>&gt;&gt; hence more likely to show the user &quot;nil&quot;. This behavior really goes<br>&gt;&gt; against some of the core ideas of Swift - you want your code to be<br>&gt;&gt; expressive but not abstract away potentially useful information.<br>&gt;&gt;<br>&gt;&gt; On Thu, May 19, 2016 at 12:24 AM David Waite<br>&gt;&gt; &lt;david at alkaline-solutions.com &lt;mailto:david at alkaline-solutions.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     Making string interpolation reject just optional (at compile time)<br>&gt;&gt;     when it doesn’t reject any other type sounds tricky to express.<br>&gt;&gt;<br>&gt;&gt;     What if instead Optional just didn’t decorate the wrapped value,<br>&gt;&gt;     outputting either the inner value or “nil” in these cases?<br>&gt;&gt;<br>&gt;&gt;     The debugDescription could remain &quot;Optional(data)&quot; style.<br>&gt;&gt;<br>&gt;&gt;     -DW<br>&gt;&gt;<br>&gt;&gt;&gt;     On May 19, 2016, at 12:52 AM, Valentin via swift-evolution<br>&gt;&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     From what I understand of this thread, the argument here is that<br>&gt;&gt;&gt;     directly using an optional in a string interpolation is almost never<br>&gt;&gt;&gt;     what you really want to do (except mainly for debugging purposes)<br>&gt;&gt;&gt;     but you wouldn&#39;t see this mistake until much later at runtime.<br>&gt;&gt;&gt;     And I feel like one of Swift goals is to enable us, imperfect human<br>&gt;&gt;&gt;     creatures, to detect as many problems or mistakes as possible long<br>&gt;&gt;&gt;     before runtime.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On 19 mai 2016, at 00:56, Dan Appel via swift-evolution<br>&gt;&gt;&gt;     &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     -1.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Optional(foo) better depicts the actual type (it&#39;s an options<br>&gt;&gt;&gt;&gt;     string, after all). If you&#39;re not happy with it, just use the nil<br>&gt;&gt;&gt;&gt;     coalescing operator such as &quot;\(foo ?? &quot;&quot;)&quot;. This is from the same<br>&gt;&gt;&gt;&gt;     series of proposals as implicit casting - there are reasons it&#39;s<br>&gt;&gt;&gt;&gt;     done the way it is.<br>&gt;&gt;&gt;&gt;     On Wed, May 18, 2016 at 3:49 PM Jacob Bandes-Storch via<br>&gt;&gt;&gt;&gt;     swift-evolution &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         +1, personally I have taken to using `x+&quot;str&quot;+y` instead of<br>&gt;&gt;&gt;&gt;         `&quot;\(x)str\(y)&quot;`, if x/y are strings, so I can get a<br>&gt;&gt;&gt;&gt;         compile-time error if I do this accidentally.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         But I do see the appeal of being able to print(&quot;the data:<br>&gt;&gt;&gt;&gt;         \(data)&quot;) for simple use cases. Didn&#39;t someone earlier propose<br>&gt;&gt;&gt;&gt;         some modifiers/labels like &quot;\(describing: x)&quot; ?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         On Wed, May 18, 2016 at 11:50 AM, Krystof Vasa via<br>&gt;&gt;&gt;&gt;         swift-evolution &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;         &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             The string interpolation is one of the strong sides of<br>&gt;&gt;&gt;&gt;             Swift, but also one of its weaknesses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             It has happened to me more than once that I&#39;ve used the<br>&gt;&gt;&gt;&gt;             interpolation with an optional by mistake and the result is<br>&gt;&gt;&gt;&gt;             then far from the expected result.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             This happened mostly before Swift 2.0&#39;s guard expression,<br>&gt;&gt;&gt;&gt;             but has happened since as well.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             The user will seldomly want to really get the output<br>&gt;&gt;&gt;&gt;             &quot;Optional(something)&quot;, but is almost always expecting just<br>&gt;&gt;&gt;&gt;             &quot;something&quot;. I believe this should be addressed by a<br>&gt;&gt;&gt;&gt;             warning to force the user to check the expression to<br>&gt;&gt;&gt;&gt;             prevent unwanted results. If you indeed want the output of<br>&gt;&gt;&gt;&gt;             an optional, it&#39;s almost always better to use the ??<br>&gt;&gt;&gt;&gt;             operator and supply a null value placeholder, e.g.<br>&gt;&gt;&gt;&gt;             &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt;&gt;&gt;             myOptional.debugDescription - which is a valid expression<br>&gt;&gt;&gt;&gt;             that will always return a non-optional value to force the<br>&gt;&gt;&gt;&gt;             current behavior.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             Krystof<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             _______________________________________________<br>&gt;&gt;&gt;&gt;             swift-evolution mailing list<br>&gt;&gt;&gt;&gt;             swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-evolution mailing list<br>&gt;&gt;&gt;&gt;         swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;     Dan Appel<br>&gt;&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dan Appel<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 19, 2016 at 05:00:00pm</p></header><div class="content"><p>-1<br></p><p>This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br></p><p>&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt; <br>&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt; <br>&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; <br>&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 19, 2016 at 07:00:00pm</p></header><div class="content"><p>I&#39;m wondering which scenario this is actually wanted behavior:<br></p><p>- strings that are for user interaction? Definitely not.<br>- logs? To be honest, the logs riddled with Optional(value) are pain to read. Following example:<br></p><p>key1: Optional(&quot;Value&quot;)<br>key2: nil<br></p><p>vs<br></p><p>key1: Value<br>key2: nil<br></p><p>Which is more readable in the log?<br></p><p>I just don&#39;t see the benefit of the current behavior than perhaps in Xcode&#39;s playground where it displays the value on the right and perhaps a few minor cases - but definitely not 99% of the time.<br></p><p>This is IMHO not crippling interpolation, just asking for a non-nil values for it to be interpoled with.<br></p><p>Krystof<br></p><p><br>&gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt; <br>&gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt;&gt; <br>&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt;&gt; <br>&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; <br>&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; <br>&gt;&gt; Krystof<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>May 19, 2016 at 07:00:00pm</p></header><div class="content"><p>Forget me if I&#39;m wrong, but wouldn&#39;t localization requirements make string interpolation unsuitable for user facing strings anyway? <br></p><p>(I remember localization being discussed previously, but don&#39;t recall it turning into a proposal)<br></p><p>- David <br></p><p>Sent from my iPhone<br></p><p>&gt; On 19 May 2016, at 19:06, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m wondering which scenario this is actually wanted behavior:<br>&gt; <br>&gt; - strings that are for user interaction? Definitely not.<br>&gt; - logs? To be honest, the logs riddled with Optional(value) are pain to read. Following example:<br>&gt; <br>&gt; key1: Optional(&quot;Value&quot;)<br>&gt; key2: nil<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; key1: Value<br>&gt; key2: nil<br>&gt; <br>&gt; Which is more readable in the log?<br>&gt; <br>&gt; I just don&#39;t see the benefit of the current behavior than perhaps in Xcode&#39;s playground where it displays the value on the right and perhaps a few minor cases - but definitely not 99% of the time.<br>&gt; <br>&gt; This is IMHO not crippling interpolation, just asking for a non-nil values for it to be interpoled with.<br>&gt; <br>&gt; Krystof<br>&gt; <br>&gt; <br>&gt;&gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1<br>&gt;&gt; <br>&gt;&gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt; <br>&gt;&gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 19, 2016 at 07:00:00pm</p></header><div class="content"><p>Sure, though not all apps are designed to be localized and can serve for internal purposes or simply the developer can say that he&#39;s supporting English (or another language) only - that&#39;s entirely his decision.<br></p><p>Also some strings, do not get localized. For example some kinds of string-ified lists, when you put together name of the app + version + build, etc.<br></p><p><br>&gt; On May 19, 2016, at 7:41 PM, David Rönnqvist &lt;david.ronnqvist at gmail.com&gt; wrote:<br>&gt; <br>&gt; Forget me if I&#39;m wrong, but wouldn&#39;t localization requirements make string interpolation unsuitable for user facing strings anyway? <br>&gt; <br>&gt; (I remember localization being discussed previously, but don&#39;t recall it turning into a proposal)<br>&gt; <br>&gt; - David <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On 19 May 2016, at 19:06, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m wondering which scenario this is actually wanted behavior:<br>&gt;&gt; <br>&gt;&gt; - strings that are for user interaction? Definitely not.<br>&gt;&gt; - logs? To be honest, the logs riddled with Optional(value) are pain to read. Following example:<br>&gt;&gt; <br>&gt;&gt; key1: Optional(&quot;Value&quot;)<br>&gt;&gt; key2: nil<br>&gt;&gt; <br>&gt;&gt; vs<br>&gt;&gt; <br>&gt;&gt; key1: Value<br>&gt;&gt; key2: nil<br>&gt;&gt; <br>&gt;&gt; Which is more readable in the log?<br>&gt;&gt; <br>&gt;&gt; I just don&#39;t see the benefit of the current behavior than perhaps in Xcode&#39;s playground where it displays the value on the right and perhaps a few minor cases - but definitely not 99% of the time.<br>&gt;&gt; <br>&gt;&gt; This is IMHO not crippling interpolation, just asking for a non-nil values for it to be interpoled with.<br>&gt;&gt; <br>&gt;&gt; Krystof<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Krystof<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 23, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 19 May 2016, at 18:06, Krystof Vasa &lt;kvasa at icloud.com&gt; wrote:<br>&gt; <br>&gt; I&#39;m wondering which scenario this is actually wanted behavior:<br>&gt; <br>&gt; - strings that are for user interaction? Definitely not.<br></p><p>There would almost certainly be other manipulation going on that renders this moot for user facing strings, for instance, you would never interpolate a date without running it through an NSDateFormatter.<br></p><p><br>&gt; - logs? To be honest, the logs riddled with Optional(value) are pain to read. Following example:<br>&gt; <br>&gt; key1: Optional(&quot;Value&quot;)<br>&gt; key2: nil<br>&gt; <br>&gt; vs<br>&gt; <br>&gt; key1: Value<br>&gt; key2: nil<br>&gt; <br>&gt; Which is more readable in the log?<br>&gt; <br></p><p>Which is a ore honest representation of the variable you are logging?<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c0eafab7106ab63b8db4025e57c1a8d2?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Javier Soto</string> &lt;javier.api at gmail.com&gt;<p>May 19, 2016 at 05:00:00pm</p></header><div class="content"><p>+1.<br></p><p>Instead of \(optional) having to do \(optional?. description ?? &quot;&quot;) or<br>whatever fallback string you want is not that cumbersome and can prevent<br>Optional(Foo) sort of strings from appearing in user facing text, which I<br>have seen in several shipping app store apps already.<br>On Thu, May 19, 2016 at 9:07 AM Jeremy Pereira via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1<br>&gt;<br>&gt; This seems to me like crippling string interpolation just because<br>&gt; sometimes we make mistakes. 99% of the time, if I interpolate an optional,<br>&gt; it’s because I want it that way. I don’t want to have to put up with a<br>&gt; warning or write the same boilerplate 99% of the time just to flag up the<br>&gt; 1% more easily. Sorry.<br>&gt;<br>&gt; &gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt; one of its weaknesses.<br>&gt; &gt;<br>&gt; &gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt; with an optional by mistake and the result is then far from the expected<br>&gt; result.<br>&gt; &gt;<br>&gt; &gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt; happened since as well.<br>&gt; &gt;<br>&gt; &gt; The user will seldomly want to really get the output<br>&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt; believe this should be addressed by a warning to force the user to check<br>&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt; return a non-optional value to force the current behavior.<br>&gt; &gt;<br>&gt; &gt; Krystof<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Javier Soto<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160519/2b214450/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 20, 2016 at 06:00:00am</p></header><div class="content"><p>BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br></p><p>&gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt; <br>&gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses. <br>&gt;&gt; <br>&gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result. <br>&gt;&gt; <br>&gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; <br>&gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; <br>&gt;&gt; Krystof<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 04:00:00am</p></header><div class="content"><p>&gt;google for swift print optional stackoverflow. I think that kind of speaks<br>for itself.<br></p><p>I think this is actually an example of why the current behavior is a<br>*good* thing.<br>I did just google that and the top comment of the first result explains<br>what an optional is. That is very good and encourages beginners to<br>understand how optionals work under the hood. If you hide that from them,<br>they will only be even more confused when they see just the string &quot;nil&quot;<br>pop up when it previously was showing the correct value.<br></p><p>On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; BTW - google for swift print optional stackoverflow. I think that kind of<br>&gt; speaks for itself.<br>&gt;<br>&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; -1<br>&gt; &gt;<br>&gt; &gt; This seems to me like crippling string interpolation just because<br>&gt; sometimes we make mistakes. 99% of the time, if I interpolate an optional,<br>&gt; it’s because I want it that way. I don’t want to have to put up with a<br>&gt; warning or write the same boilerplate 99% of the time just to flag up the<br>&gt; 1% more easily. Sorry.<br>&gt; &gt;<br>&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt; one of its weaknesses.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt; with an optional by mistake and the result is then far from the expected<br>&gt; result.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt; happened since as well.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The user will seldomly want to really get the output<br>&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt; believe this should be addressed by a warning to force the user to check<br>&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt; return a non-optional value to force the current behavior.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Krystof<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/0eea3090/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 20, 2016 at 07:00:00am</p></header><div class="content"><p>With this proposal in place:<br></p><p>1) The user would type print(myURL.path).<br>2) The compiler will immediately issue a warning about printing an optional - the user would hence learn about optionals *before* the code is run.<br>3) If he ran the code anyway, he&#39;d still get Optional(/iphone/) anyway.<br>4) Xcode would offer a Fix-It, adding .debugDescription to the optional, getting Optional(/iphone/) on the anyway, yet again.<br></p><p>I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br></p><p>&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt; <br>&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt; <br>&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt; <br>&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; -1<br>&gt; &gt;<br>&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt; &gt;<br>&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Krystof<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; -- <br>&gt; Dan Appel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/d4d8951e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8f823910f180809a2420a8be5460be3?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Dan Appel</string> &lt;dan.appel00 at gmail.com&gt;<p>May 20, 2016 at 05:00:00am</p></header><div class="content"><p>Thats a fair solution. I still disagree, but not as strongly.<br></p><p>On Thu, May 19, 2016 at 10:01 PM Krystof Vasa &lt;kvasa at icloud.com&gt; wrote:<br></p><p>&gt; With this proposal in place:<br>&gt;<br>&gt; 1) The user would type print(myURL.path).<br>&gt; 2) The compiler will immediately issue a warning about printing an<br>&gt; optional - the user would hence learn about optionals *before* the code is<br>&gt; run.<br>&gt; 3) If he ran the code anyway, he&#39;d still get Optional(/iphone/) anyway.<br>&gt; 4) Xcode would offer a Fix-It, adding .debugDescription to the optional,<br>&gt; getting Optional(/iphone/) on the anyway, yet again.<br>&gt;<br>&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for<br>&gt; this - you&#39;d get the same result ignoring the warning and applying the<br>&gt; Fix-It, but you&#39;d have control over this.<br>&gt;<br>&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;google for swift print optional stackoverflow. I think that kind of<br>&gt; speaks for itself.<br>&gt;<br>&gt; I think this is actually an example of why the current behavior is a<br>&gt; *good* thing. I did just google that and the top comment of the first<br>&gt; result explains what an optional is. That is very good and encourages<br>&gt; beginners to understand how optionals work under the hood. If you hide that<br>&gt; from them, they will only be even more confused when they see just the<br>&gt; string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;<br>&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of<br>&gt;&gt; speaks for itself.<br>&gt;&gt;<br>&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This seems to me like crippling string interpolation just because<br>&gt;&gt; sometimes we make mistakes. 99% of the time, if I interpolate an optional,<br>&gt;&gt; it’s because I want it that way. I don’t want to have to put up with a<br>&gt;&gt; warning or write the same boilerplate 99% of the time just to flag up the<br>&gt;&gt; 1% more easily. Sorry.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also<br>&gt;&gt; one of its weaknesses.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation<br>&gt;&gt; with an optional by mistake and the result is then far from the expected<br>&gt;&gt; result.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has<br>&gt;&gt; happened since as well.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The user will seldomly want to really get the output<br>&gt;&gt; &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I<br>&gt;&gt; believe this should be addressed by a warning to force the user to check<br>&gt;&gt; the expression to prevent unwanted results. If you indeed want the output<br>&gt;&gt; of an optional, it&#39;s almost always better to use the ?? operator and supply<br>&gt;&gt; a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use<br>&gt;&gt; myOptional.debugDescription - which is a valid expression that will always<br>&gt;&gt; return a non-optional value to force the current behavior.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; --<br>&gt; Dan Appel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; --<br>Dan Appel<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/8ce751be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 20, 2016 at 07:00:00am</p></header><div class="content"><p>Sorry, my previous example didn&#39;t use the string interpolation, it should be<br></p><p>print(&quot;http://apple.com\(myURL.path)&quot;).<br></p><p>&gt; On May 20, 2016, at 7:04 AM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thats a fair solution. I still disagree, but not as strongly.<br>&gt; <br>&gt; On Thu, May 19, 2016 at 10:01 PM Krystof Vasa &lt;kvasa at icloud.com &lt;mailto:kvasa at icloud.com&gt;&gt; wrote:<br>&gt; With this proposal in place:<br>&gt; <br>&gt; 1) The user would type print(myURL.path).<br>&gt; 2) The compiler will immediately issue a warning about printing an optional - the user would hence learn about optionals *before* the code is run.<br>&gt; 3) If he ran the code anyway, he&#39;d still get Optional(/iphone/) anyway.<br>&gt; 4) Xcode would offer a Fix-It, adding .debugDescription to the optional, getting Optional(/iphone/) on the anyway, yet again.<br>&gt; <br>&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br>&gt; <br>&gt;&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt; <br>&gt;&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;&gt; <br>&gt;&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt; <br>&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Dan Appel<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; Dan Appel<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/b5a49850/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May 20, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;ve been bit by this many times. A warning would really have helped me.<br></p><p>&gt; On 20 May 2016, at 07:06, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, my previous example didn&#39;t use the string interpolation, it should be<br>&gt; <br>&gt; print(&quot;http://apple.com\(myURL.path)&quot;).<br>&gt; <br>&gt;&gt; On May 20, 2016, at 7:04 AM, Dan Appel &lt;dan.appel00 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thats a fair solution. I still disagree, but not as strongly.<br>&gt;&gt; <br>&gt;&gt; On Thu, May 19, 2016 at 10:01 PM Krystof Vasa &lt;kvasa at icloud.com&gt; wrote:<br>&gt;&gt;&gt; With this proposal in place:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) The user would type print(myURL.path).<br>&gt;&gt;&gt; 2) The compiler will immediately issue a warning about printing an optional - the user would hence learn about optionals *before* the code is run.<br>&gt;&gt;&gt; 3) If he ran the code anyway, he&#39;d still get Optional(/iphone/) anyway.<br>&gt;&gt;&gt; 4) Xcode would offer a Fix-It, adding .debugDescription to the optional, getting Optional(/iphone/) on the anyway, yet again.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; -1<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dan Appel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/eb4113ac/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 20, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On May 19, 2016, at 11:01 PM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; With this proposal in place:<br>&gt; <br>&gt; 1) The user would type print(myURL.path).<br>&gt; 2) The compiler will immediately issue a warning about printing an optional - the user would hence learn about optionals *before* the code is run.<br>&gt; 3) If he ran the code anyway, he&#39;d still get Optional(/iphone/) anyway.<br>&gt; 4) Xcode would offer a Fix-It, adding .debugDescription to the optional, getting Optional(/iphone/) on the anyway, yet again.<br></p><p>Four questions:<br>1. If I was printing a protocol type that Optional supports, such as Any, would I get a warning?<br>2. I believe debugDescription is discouraged from being called directly [from CustomDebugStringConvertible docs]. Perhaps String(reflecting: ) instead, although such debug description behavior could cause different results if you were expecting this fixit to apply to Any types.<br>3. How would I have the ability to opt into this behavior for my own types (such as Result or Future)?<br>4. How would I opt in/out of this behavior for my own StringInterpolationConvertible implementations?<br></p><p>-DW<br></p><p>&gt; <br>&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br>&gt; <br>&gt;&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt; <br>&gt;&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;&gt; <br>&gt;&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt; <br>&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; -1<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; -- <br>&gt;&gt; Dan Appel<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/e3668beb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3dad7bea24aa580cabe5c16e8e64183e?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Krystof Vasa</string> &lt;kvasa at icloud.com&gt;<p>May 20, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; Four questions:<br>&gt; 1. If I was printing a protocol type that Optional supports, such as Any, would I get a warning?<br></p><p>This was my bad, I wrote an incorrect example, print(&quot;http://apple.com\(myURL.path)&quot;) was what I meant - which will print <br></p><p>http://apple.comOptional(/iphone/). <br></p><p>Putting an optional directly into print(_:) should be fine with no warning. Only within the string interpolation.<br></p><p>&gt; 2. I believe debugDescription is discouraged from being called directly [from CustomDebugStringConvertible docs]. Perhaps String(reflecting: ) instead, although such debug description behavior could cause different results if you were expecting this fixit to apply to Any types.<br></p><p>This is not invoked on the value within the Optional, but directly *on* the Optional. As declared here (part of Swift):<br></p><p>extension Optional : CustomDebugStringConvertible {<br>    /// A textual representation of `self`, suitable for debugging.<br>    public var debugDescription: String { get }<br>}<br></p><p>Example:<br></p><p>let stringOptional: String? = &quot;Hello&quot;<br></p><p>// Notice no ? is used - the optional is not unwrapped<br>stringOptional.debugDescription // Optional(Hello)<br></p><p>// Unwrapping the optional<br>stringOptional!.debugDescription // Hello<br></p><p>Not sure what would be the impact of making Optional CustomStringConvertible (i.e. instead of using debugDescription, one would use just description).<br></p><p>&gt; 3. How would I have the ability to opt into this behavior for my own types (such as Result or Future)?<br>&gt; 4. How would I opt in/out of this behavior for my own StringInterpolationConvertible implementations?<br></p><p>This is not about customizing the interpolation but about warning the user when using optionals in string interpolation to prevent from such mistakes as above with the URL. This is more common than one would think and sometimes is hard to spot. I&#39;m sorry if I misunderstood you questions.<br></p><p>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; -1<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/85864027/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 21, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ve jotted up a proposal here:<br></p><p>https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385<br></p><p>Please let me know if there are any comments to it.<br></p><p>Charlie<br></p><p>&gt; On May 20, 2016, at 9:11 AM, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Four questions:<br>&gt;&gt; 1. If I was printing a protocol type that Optional supports, such as Any, would I get a warning?<br>&gt; <br>&gt; This was my bad, I wrote an incorrect example, print(&quot;http://apple.com\(myURL.path) &lt;http://apple.com/(myurl.path)&gt;&quot;) was what I meant - which will print <br>&gt; <br>&gt; http://apple.comOptional(/iphone/) &lt;http://apple.comoptional(/iphone/)&gt;. <br>&gt; <br>&gt; Putting an optional directly into print(_:) should be fine with no warning. Only within the string interpolation.<br>&gt; <br>&gt;&gt; 2. I believe debugDescription is discouraged from being called directly [from CustomDebugStringConvertible docs]. Perhaps String(reflecting: ) instead, although such debug description behavior could cause different results if you were expecting this fixit to apply to Any types.<br>&gt; <br>&gt; This is not invoked on the value within the Optional, but directly *on* the Optional. As declared here (part of Swift):<br>&gt; <br>&gt; extension Optional : CustomDebugStringConvertible {<br>&gt;     /// A textual representation of `self`, suitable for debugging.<br>&gt;     public var debugDescription: String { get }<br>&gt; }<br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; let stringOptional: String? = &quot;Hello&quot;<br>&gt; <br>&gt; // Notice no ? is used - the optional is not unwrapped<br>&gt; stringOptional.debugDescription // Optional(Hello)<br>&gt; <br>&gt; // Unwrapping the optional<br>&gt; stringOptional!.debugDescription // Hello<br>&gt; <br>&gt; Not sure what would be the impact of making Optional CustomStringConvertible (i.e. instead of using debugDescription, one would use just description).<br>&gt; <br>&gt;&gt; 3. How would I have the ability to opt into this behavior for my own types (such as Result or Future)?<br>&gt;&gt; 4. How would I opt in/out of this behavior for my own StringInterpolationConvertible implementations?<br>&gt; <br>&gt; This is not about customizing the interpolation but about warning the user when using optionals in string interpolation to prevent from such mistakes as above with the URL. This is more common than one would think and sometimes is hard to spot. I&#39;m sorry if I misunderstood you questions.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -DW<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not saying *removing* the current behavior, but adding a warning for this - you&#39;d get the same result ignoring the warning and applying the Fix-It, but you&#39;d have control over this.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 20, 2016, at 6:48 AM, Dan Appel via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt;google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this is actually an example of why the current behavior is a good thing. I did just google that and the top comment of the first result explains what an optional is. That is very good and encourages beginners to understand how optionals work under the hood. If you hide that from them, they will only be even more confused when they see just the string &quot;nil&quot; pop up when it previously was showing the correct value.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, May 19, 2016 at 9:36 PM Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; BTW - google for swift print optional stackoverflow. I think that kind of speaks for itself.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &gt; On May 19, 2016, at 6:07 PM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; -1<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; This seems to me like crippling string interpolation just because sometimes we make mistakes. 99% of the time, if I interpolate an optional, it’s because I want it that way. I don’t want to have to put up with a warning or write the same boilerplate 99% of the time just to flag up the 1% more easily. Sorry.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; On 18 May 2016, at 19:50, Krystof Vasa via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; The string interpolation is one of the strong sides of Swift, but also one of its weaknesses.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; It has happened to me more than once that I&#39;ve used the interpolation with an optional by mistake and the result is then far from the expected result.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; This happened mostly before Swift 2.0&#39;s guard expression, but has happened since as well.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; The user will seldomly want to really get the output &quot;Optional(something)&quot;, but is almost always expecting just &quot;something&quot;. I believe this should be addressed by a warning to force the user to check the expression to prevent unwanted results. If you indeed want the output of an optional, it&#39;s almost always better to use the ?? operator and supply a null value placeholder, e.g. &quot;\(myOptional ?? &quot;&lt;&lt;none&gt;&gt;&quot;)&quot;, or use myOptional.debugDescription - which is a valid expression that will always return a non-optional value to force the current behavior.<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; Krystof<br>&gt;&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dan Appel<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/6e515589/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>May 23, 2016 at 02:00:00pm</p></header><div class="content"><p>I’m still unclear what the answers to my questions below would be. I’ll restate them below.<br></p><p>&gt;&gt;&gt; 1. If I was printing a protocol type that Optional supports, such as Any, would I get a warning?<br></p><p>Since this may have been misunderstood, let me phrase it a different way.<br></p><p>If the URL path property was defined not to return ‘String?&#39; but to return ‘Any’ (which can of course hold an Optional just like it can hold any other type) what would the proposed compiler behavior be?<br></p><p>&gt;&gt;&gt; 2. I believe debugDescription is discouraged from being called directly [from CustomDebugStringConvertible docs]. Perhaps String(reflecting: ) instead, although such debug description behavior could cause different results if you were expecting this fixit to apply to Any types.<br></p><p>The actual definition of debugDescription is discouraged from being called by user code. This method also only coincidentally provides the identical text as string interpolation today. Are you proposing to change the standard library documentation to say that users should be calling debugDescription in this scenario, and change optional to define what its implementation of debugDescription returns?<br></p><p>&gt;&gt;&gt; 3. How would I have the ability to opt into this behavior for my own types (such as Result or Future)?<br>&gt;&gt;&gt; 4. How would I opt in/out of this behavior for my own StringInterpolationConvertible implementations?<br>&gt;&gt; <br>&gt;&gt; This is not about customizing the interpolation but about warning the user when using optionals in string interpolation to prevent from such mistakes as above with the URL. This is more common than one would think and sometimes is hard to spot. I&#39;m sorry if I misunderstood you questions.<br></p><p>If I have a type which I don’t want used in String interpolation, I would like to mark it as giving a warning. Examples would be a Result type for representing success or error from a function call, or a future type to represent a task dispatched to another thread that may or may not have finished and returned a result yet. Do you propose a way for me to have the compiler warn if I accidentally have these types used in string interpolation as well, or do I only benefit from optional as a special case.<br></p><p>And finally, I can have my own type which implements StringInterpolationConvertible. Examples might be <br>- LocalizableString type which maps the provided string to correct user output through a localization table<br>- DebugString for debug logging that uses CustomDebugStringConvertible when available to represent types<br>- an HtmlEscapedString which deals with making values that don’t implement the HtmlEscaped protocol HTML-safe, including Strings<br></p><p>How would I get the optional usage defined for String type interpolation for these cases. DebugString would like to represent optionals as today, LocalizableString would like to capture optionals so that it can switch to a specific internationalized message in this case, and HtmlEscapedString would like the same behavior you are proposing for String.<br></p><p>-DW<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/d5182560/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 23, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; If the URL path property was defined not to return ‘String?&#39; but to return ‘Any’ (which can of course hold an Optional just like it can hold any other type) what would the proposed compiler behavior be?<br></p><p>No warning. Since you cast Optional to Any, no warning can even be issued since that will eventually be determined during runtime, there&#39;s not much the compiler can do here.<br></p><p>Only if you returned `Any?` - which then Optional&lt;Any&gt;, anyway.<br></p><p>&gt; The actual definition of debugDescription is discouraged from being called by user code. This method also only coincidentally provides the identical text as string interpolation today. Are you proposing to change the standard library documentation to say that users should be calling debugDescription in this scenario, and change optional to define what its implementation of debugDescription returns?<br></p><p>What about adding .description (i.e. comply to CustomStringConvertible) and calling .description instead? I&#39;ll update the proposal to match this.<br></p><p>&gt; If I have a type which I don’t want used in String interpolation, I would like to mark it as giving a warning. Examples would be a Result type for representing success or error from a function call, or a future type to represent a task dispatched to another thread that may or may not have finished and returned a result yet. Do you propose a way for me to have the compiler warn if I accidentally have these types used in string interpolation as well, or do I only benefit from optional as a special case.<br></p><p>I&#39;d prefer to leave the Optional as a special case handled by the language, but you can deprecate interpolation for custom types yourself - see below.<br></p><p>&gt; And finally, I can have my own type which implements StringInterpolationConvertible. Examples might be <br>&gt; - LocalizableString type which maps the provided string to correct user output through a localization table<br>&gt; - DebugString for debug logging that uses CustomDebugStringConvertible when available to represent types<br>&gt; - an HtmlEscapedString which deals with making values that don’t implement the HtmlEscaped protocol HTML-safe, including Strings<br>&gt; <br>&gt; How would I get the optional usage defined for String type interpolation for these cases. DebugString would like to represent optionals as today, LocalizableString would like to capture optionals so that it can switch to a specific internationalized message in this case, and HtmlEscapedString would like the same behavior you are proposing for String.<br></p><p>The deprecation doesn&#39;t necessarily need to be handled by the compiler itself, but can be enforced by the following code:<br></p><p>extension String {<br>	<br>	@available(*, deprecated, message=&quot;Interpolation of optionals is deprecated.&quot;)<br>	init&lt;T&gt;(stringInterpolationSegment segment: Optional&lt;T&gt;) {<br>		// fatalError()<br>	}<br>	<br>}<br></p><p><br>With this kind of implementation, you get the warnings, however, without the compiler support you won&#39;t get the Fix-It for adding .description - I&#39;m not sure the renamed= part of the attribute can be abused to do this, but I don&#39;t think it can be.<br></p><p>And in a similar fashion, you can deprecate the Optional or any other kind on your other strings and keep them on DebugString.<br></p><p>Charlie<br></p><p>&gt; -DW<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/963c9a52/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 23, 2016, at 12:12 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; If the URL path property was defined not to return ‘String?&#39; but to return ‘Any’ (which can of course hold an Optional just like it can hold any other type) what would the proposed compiler behavior be?<br>&gt; <br>&gt; No warning. Since you cast Optional to Any, no warning can even be issued since that will eventually be determined during runtime, there&#39;s not much the compiler can do here.<br></p><p>I agree.  It is important for optionals to be string literal convertible in generic situations as well as when boxed in an existential like Any.  That said, emitting a warning when the compiler knows statically that it has an optional makes a lot of sense.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Proposal: Deprecate optionals in string interpolation</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 24, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;ve pretty much rewritten the propsal (https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385) to use casting to `as Any` instead of the formally suggested `.debugDescription` or `.description` to silence the warning.<br></p><p>It also includes `Uninterpolable` protocol that `Optional` conforms to and you can hence deprecate interpolation of your own types.<br></p><p>Questions, however:<br></p><p>- `Uninterpolable` seems too restrictive a name - it&#39;s not that the type *can&#39;t* be used for interpolation, but it is discouraged from being used for interpolation. Any ideas for better names?<br></p><p>- Should the deprecation of interpolation of `Uninterpolable` be declared:<br>	- on `String`, thus allowing custom `StringInterpolationConvertible` classes to still use the `Uninterpolable` for interpolation, or<br>	- as an extension of `StringInterpolationConvertible`, thus disallowing interpolation of all `Uninterpolable` types.<br></p><p>I personally prefer the latter as you always can force the interpolation using `as Any`. Thoughts?<br> <br>Charlie<br></p><p>&gt; On May 24, 2016, at 1:23 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 23, 2016, at 12:12 PM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; If the URL path property was defined not to return ‘String?&#39; but to return ‘Any’ (which can of course hold an Optional just like it can hold any other type) what would the proposed compiler behavior be?<br>&gt;&gt; <br>&gt;&gt; No warning. Since you cast Optional to Any, no warning can even be issued since that will eventually be determined during runtime, there&#39;s not much the compiler can do here.<br>&gt; <br>&gt; I agree.  It is important for optionals to be string literal convertible in generic situations as well as when boxed in an existential like Any.  That said, emitting a warning when the compiler knows statically that it has an optional makes a lot of sense.<br>&gt; <br>&gt; -Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
