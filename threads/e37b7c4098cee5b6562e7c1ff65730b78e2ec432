<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Nesting types without nesting in place (additional)</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>As you may know we can nest types for shiny namespacing (protocol nesting might follow in Swift 3 as well).<br></p><p>What if we could create Types separated by a `.` character to determine that this is a nested type to stop building type pyramides, which could be/look ugly in some cases.<br></p><p>Imagine SomeClass and NestedClass are some huge and complex types. It might become hard to read if we had to build them in place just for good namespacing.<br></p><p>class SomeClass {<br>		<br>   class NestedClass {<br>      enum Error {}<br>   }<br>   enum Error {}<br>}<br></p><p>Split this to something like this:<br></p><p>class SomeClass {}<br></p><p>enum SomeClass.Error {}<br></p><p>class SomeClass.NestedClass {<br>    enum Error {} // nesting is still allowed<br>}<br></p><p>Extensions already allow that.<br></p><p>extension SomeClass.NestedType {}<br></p><p>What do you think? Is it something for Swift 3?<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160512/e37bc432/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Nesting types without nesting in place (additional)</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>May 18, 2016 at 08:00:00pm</p></header><div class="content"><p>May I revive this idea for a discussion. <br></p><p>When I posted this first I didn’t thought about creating these nested types inside extensions.<br></p><p>So basically I could do this (over and over):<br></p><p>extension SomeClass {<br>   class NestedClass { … }<br>}<br></p><p>But we have to surround a new nested type by an extension scope which is more boilerplate to my eyes than just `class SomeClass.NestedClass` instead.<br></p><p>Is this worth a proposal?<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 12. Mai 2016 bei 16:04:23, Adrian Zubarev (adrian.zubarev at devandartist.com) schrieb:<br></p><p>As you may know we can nest types for shiny namespacing (protocol nesting might follow in Swift 3 as well).<br></p><p>What if we could create Types separated by a `.` character to determine that this is a nested type to stop building type pyramides, which could be/look ugly in some cases.<br></p><p>Imagine SomeClass and NestedClass are some huge and complex types. It might become hard to read if we had to build them in place just for good namespacing.<br></p><p>class SomeClass {<br>   class NestedClass {<br>      enum Error {}<br>   }<br>   enum Error {}<br>}<br></p><p>Split this to something like this:<br></p><p>class SomeClass {}<br></p><p>enum SomeClass.Error {}<br></p><p>class SomeClass.NestedClass {<br>    enum Error {} // nesting is still allowed<br>}<br></p><p>Extensions already allow that.<br></p><p>extension SomeClass.NestedType {}<br></p><p>What do you think? Is it something for Swift 3?<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/572ec90f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Pitch] Nesting types without nesting in place (additional)</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 18, 2016, at 11:00 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; May I revive this idea for a discussion. <br>&gt; <br>&gt; When I posted this first I didn’t thought about creating these nested types inside extensions.<br>&gt; <br>&gt; So basically I could do this (over and over):<br>&gt; <br>&gt; extension SomeClass {<br>&gt;    class NestedClass { … }<br>&gt; }<br>&gt; <br>&gt; But we have to surround a new nested type by an extension scope which is more boilerplate to my eyes than just `class SomeClass.NestedClass` instead.<br>&gt; <br>&gt; Is this worth a proposal?<br></p><p>You&#39;re welcome to submit a proposal, but I personally don&#39;t think I&#39;d support it; this seems like it just creates another way to write something for very little benefit.<br></p><p>John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/c8682008/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
