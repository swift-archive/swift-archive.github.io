<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>Crash in generic struct</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>May  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>This code causes a segmentation fault:<br></p><p>struct MyHeapElement&lt;T:Comparable&gt;<br>	{<br>	var index:Int<br>	var	key:T<br>	}<br></p><p>struct MyHeap&lt;T:Comparable&gt;<br>	{<br>	var elements = [MyHeapElement&lt;T&gt;]()<br>	}<br></p><p>extension MyHeap<br>	{<br>	init( withElements elements:[MyHeapElement&lt;T&gt;] )<br>		{<br>		self.elements = elements<br>		}<br>	}<br></p><p>Do I have a syntax error somewhere or is this a compiler bug (apart  <br>from that ideally the compiler should never crash)?<br></p><p>Swift 2.1-2.2<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Crash in generic struct</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May  4, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, May 4, 2016, at 10:41 AM, Jan E. Schotsman via swift-users<br>wrote:<br>&gt; Hello,<br>&gt; <br>&gt; This code causes a segmentation fault:<br>&gt; <br>&gt; struct MyHeapElement&lt;T:Comparable&gt;<br>&gt; 	{<br>&gt; 	var index:Int<br>&gt; 	var	key:T<br>&gt; 	}<br>&gt; <br>&gt; struct MyHeap&lt;T:Comparable&gt;<br>&gt; 	{<br>&gt; 	var elements = [MyHeapElement&lt;T&gt;]()<br>&gt; 	}<br>&gt; <br>&gt; extension MyHeap<br>&gt; 	{<br>&gt; 	init( withElements elements:[MyHeapElement&lt;T&gt;] )<br>&gt; 		{<br>&gt; 		self.elements = elements<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; Do I have a syntax error somewhere or is this a compiler bug (apart  <br>&gt; from that ideally the compiler should never crash)?<br>&gt; <br>&gt; Swift 2.1-2.2<br>&gt; <br>&gt; Jan E.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>Drop the extension and move the initializer to the MyHeap struct and it<br>compiles for me on Swift 3.0. To me that indicates the answer to your<br>first question: I would think you do not have a syntax error. That is:<br></p><p>struct MyHeapElement &lt;T:Comparable&gt; {<br>  var index: Int<br>  var key: T<br>}<br></p><p>struct MyHeap &lt;T:Comparable&gt; {<br>  var elements = [MyHeapElement&lt;T&gt;]()<br></p><p>  init(withElements elements: [MyHeapElement&lt;T&gt;]) {<br>    self.elements = elements<br>  }<br>}<br></p><p>Regardless of whether it is or not you should file the bug at<br>bugs.swift.org. As you say the compiler should never crash.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/268e1090c88890a4ed2387a4d22c661c?s=50"></div><header><strong>Crash in generic struct</strong> from <string>J.E. Schotsman</string> &lt;jeschot at xs4all.nl&gt;<p>May  4, 2016 at 07:00:00pm</p></header><div class="content"><p>On May 4, 2016, at 5:02 PM, Ryan Lovelett wrote:<br></p><p>&gt; Drop the extension and move the initializer to the MyHeap struct and  <br>&gt; it<br>&gt; compiles for me on Swift 3.0. To me that indicates the answer to your<br>&gt; first question: I would think you do not have a syntax error. That is:<br>&gt;<br>&gt; struct MyHeapElement &lt;T:Comparable&gt; {<br>&gt;  var index: Int<br>&gt;  var key: T<br>&gt; }<br>&gt;<br>&gt; struct MyHeap &lt;T:Comparable&gt; {<br>&gt;  var elements = [MyHeapElement&lt;T&gt;]()<br>&gt;<br>&gt;  init(withElements elements: [MyHeapElement&lt;T&gt;]) {<br>&gt;    self.elements = elements<br>&gt;  }<br>&gt; }<br>&gt;<br>&gt; Regardless of whether it is or not you should file the bug at<br>&gt; bugs.swift.org. As you say the compiler should never crash.<br></p><p>That way I lose the memberwise initializer and the default initializer.<br>This is yet another crashing bug related to the position of an  <br>extension.<br></p><p>In December I reported this bug which looks similar:<br></p><p>bug 23998571<br></p><p>If the struct definition and the extension are placed in two different  <br>files of a framework project the compiler crashes.<br></p><p>struct Description<br>	{<br>	var property:Int32 = 0<br>	}<br></p><p>extension Description<br>	{<br>	init( startPtr: UnsafePointer&lt;Int32&gt; )<br>		{<br>			property = startPtr[0]<br>			}<br>	}<br></p><p>Still open, still crashing.<br></p><p>Jan E.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14477c366d6ee4e41adf14837bc4f2f9?s=50"></div><header><strong>Crash in generic struct</strong> from <string>Ryan Lovelett</string> &lt;swift-dev at ryan.lovelett.me&gt;<p>May  4, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; bug 23998571<br></p><p>That number looks like a radar issue. Swift bugs typically take the form<br>SR-#.<br></p><p>I don&#39;t work at Apple (nor do many people on this mailing list).<br>Therefore we cannot see the contents of that bug report.<br></p><p>Once again I suggest you file an issue at bugs.swift.org as that is the<br>OSS community tracker.<br></p><p>As for losing the default initializer; I understand that may occur. I<br>was pointing out that it was my simple way of validating the syntax. It<br>may or may not work as a &quot;work-around&quot;. It would appear it does not for<br>you.<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
