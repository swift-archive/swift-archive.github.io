<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a3e0949c0bd1a2d2e9c55b1cd9d78497?s=50"></div><header><strong>Auto Unwrapping Of Optionals</strong> from <string>Cristián Arenas Ulloa</string> &lt;cristian.arenas at gmail.com&gt;<p>May  3, 2016 at 10:00:00am</p></header><div class="content"><p>I think the programmer knows best in a case like that.<br>If I know it has a valid value, I wouldn&#39;t use an optional:<br></p><p>class Test {<br>    var today: NSDate? = nil<br>    func test() {<br>        let today = self.today ?? NSDate()<br>        self.today = today<br>        print(&quot;Today is \(today)&quot;) // Would not be printed as an optional<br>        let timeInterval: NSTimeInterval = today.timeIntervalSinceNow<br>    }<br>}<br></p><p>What do you think about that?<br></p><p>&gt; I&#39;m new to the swift evolution community, but I wanted to toss an idea out there to get some feedback on it. So here it goes...<br>&gt; <br>&gt; Currently, if you assign a non-nil value to an optional and then want to access that optional later, in the same context, you need to manually unwrap the value. This is usually done either by using &quot;!&quot; or by using something like &quot;if let&quot; or guard.<br>&gt; <br>&gt; What would it be like if the compiler could auto unwrap, in cases where in knows the optional will have some value? This would make the code &quot;clean&quot; and still be safe.<br>&gt; <br>&gt; This concept of Auto Unwrapping of Optionals is similar to Implicitly Unwrapped Optionals, but is only applied when the compiler knows it is safe to do so.<br>&gt; <br>&gt; Take the following example:<br>&gt; <br>&gt; class Test {<br>&gt; var today: NSDate? = nil<br>&gt; func test() {<br>&gt; today = today ?? NSDate()<br>&gt; print(&quot;Today is \(today)&quot;) // Would be printed as an optional<br>&gt; let timeInterval: NSTimeInterval = today!.timeIntervalSinceNow // Requires ! or (if let) to unwrap<br>&gt; // ... do stuff with timeInterval ...<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; With the above example, the compiler could known that today has a value after it&#39;s set in the test method. So why couldn&#39;t the compiler auto unwrap it when accessed? This would mean manual unwrapping would be unnecessary:<br>&gt; <br>&gt; class Test {<br>&gt; var today: NSDate? = nil<br>&gt; func test() {<br>&gt; today = today ?? NSDate()<br>&gt; print(&quot;Today is \(today)&quot;) // Would be printed as a value (not an optional)<br>&gt; let timeInterval: NSTimeInterval = today.timeIntervalSinceNow // No ! required (auto unwrapped)<br>&gt; // ... do stuff with timeInterval ...<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; If the value later gets set to an optional value, then it will no longer be auto unwrapable :<br>&gt; <br>&gt; class Test {<br>&gt; var today: NSDate? = nil<br>&gt; <br>&gt; func optionalDay() -&gt;NSDate? {<br>&gt; return NSDate()<br>&gt; }<br>&gt; <br>&gt; func test() {<br>&gt; today = today ?? NSDate()<br>&gt; print(&quot;Today is \(today)&quot;) // Would be printed as a value (not an optional)<br>&gt; let timeInterval: NSTimeInterval = today.timeIntervalSinceNow // No ! required (auto unwrapped)<br>&gt; let timeInterval2: NSTimeInterval = today!.timeIntervalSinceNow // Explicit unwrapping would still be allowed<br>&gt; <br>&gt; // If today is assigned an optional value, we can no longer auto unwrap it<br>&gt; today = optionalDay()<br>&gt; print(&quot;Today is \(today)&quot;) // Would be printed as an optional<br>&gt; let timeInterval3: NSTimeInterval = today!.timeIntervalSinceNow // manual unwrapping would be required<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; Note in the above example, explicit unwrapping would still be allow. The variable is still an optional. This allows for existing code to remain unchanged.<br>&gt; <br>&gt; This change would encourage less use of forced unwrapping &quot;!&quot;, generally require the developer to write less code, and would maintain code safety. On the down side, it is performing some compiler “magic”. It would be yet another thing to explain when trying to introduce people to swift and especially optionals.<br>&gt; <br>&gt; What do you all think, would something like this be worth pursuing, what other pluses or minus would this introduce, has something like this already been discussed?<br>&gt; <br>&gt; Thanks,<br>&gt; Tod Cunningham<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
