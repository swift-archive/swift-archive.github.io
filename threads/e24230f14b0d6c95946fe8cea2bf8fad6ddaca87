<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Take 2: Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>on Wed Jun 29 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Sent from my iPad<br>&gt;<br>&gt;&gt; On Jun 29, 2016, at 1:39 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I&#39;ve updated my pull request with a much more conservative set of<br>&gt;&gt; changes that preserves/restores label-free-ness for all “term of art”<br>&gt;&gt; functional methods such as filter and reduce.<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/pull/2981<br>&gt;<br>&gt; I didn&#39;t participate in this discussion but want to say that I am<br>&gt; pleased with where it ended up.  IMO this looks much better than the<br>&gt; earlier version as well as some of the alternative that were<br>&gt; discussed.  I think brevity is important for the common functional<br>&gt; operators and was previously concerned with the length of some of the<br>&gt; names.<br>&gt;<br>&gt;&gt; <br>&gt;&gt; My current thoughts are that many of the `by:` labels are awkward and<br>&gt;&gt; not adding much.  Perhaps they all ought to be omitted.<br>&gt;<br>&gt; Some cases are more awkward than others.  The value added by a label<br>&gt; is also greater in some cases than others.  Unfortunately I think<br>&gt; these tend to coincide.<br>&gt;<br>&gt; That said, I do think the value of a label outweighs the awkwardness<br>&gt; in cases like min and max.<br></p><p>? min and max are not under discussion here.<br></p><p>&gt; One change you might consider is to use different labels for<br>&gt; comparison and equivalence relations.  &#39;by&#39; feels more natural in the<br>&gt; context of comparisons and brevity feels more important in the methods<br>&gt; that use a comparator.  On the other hand, I think dropping the use of<br>&gt; the word equivalent for &#39;starts&#39; and &#39;elementsEqual&#39; feels like a step<br>&gt; back in clarity.  Maybe we use &#39;equivalentBy&#39; in these cases.<br>&gt;<br>&gt; A suggestion for the future enhancements - rename elementsEqual to<br>&gt; elementsEquivalent.  If we make that change the shorter &#39;by&#39; label<br>&gt; would feel much less awkward to me in this method.<br>&gt;<br>&gt; -Matthew<br>&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Take 2: Stdlib closure argument labels and parameter names</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jul 1, 2016, at 7:03 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Wed Jun 29 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 29, 2016, at 1:39 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve updated my pull request with a much more conservative set of<br>&gt;&gt;&gt; changes that preserves/restores label-free-ness for all “term of art”<br>&gt;&gt;&gt; functional methods such as filter and reduce.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift/pull/2981<br>&gt;&gt; <br>&gt;&gt; I didn&#39;t participate in this discussion but want to say that I am<br>&gt;&gt; pleased with where it ended up.  IMO this looks much better than the<br>&gt;&gt; earlier version as well as some of the alternative that were<br>&gt;&gt; discussed.  I think brevity is important for the common functional<br>&gt;&gt; operators and was previously concerned with the length of some of the<br>&gt;&gt; names.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My current thoughts are that many of the `by:` labels are awkward and<br>&gt;&gt;&gt; not adding much.  Perhaps they all ought to be omitted.<br>&gt;&gt; <br>&gt;&gt; Some cases are more awkward than others.  The value added by a label<br>&gt;&gt; is also greater in some cases than others.  Unfortunately I think<br>&gt;&gt; these tend to coincide.<br>&gt;&gt; <br>&gt;&gt; That said, I do think the value of a label outweighs the awkwardness<br>&gt;&gt; in cases like min and max.<br>&gt; <br>&gt; ? min and max are not under discussion here.<br></p><p>Really?  It looks like they&#39;re in your table:<br></p><p>smallest = shapes.min(<br>  isOrderedBefore: haveIncreasingSize)	<br>smallest = shapes.min(<br>  by: haveIncreasingSize)<br></p><p>largest = shapes.max(<br>  isOrderedBefore: haveIncreasingSize)	<br>largest = shapes.max(<br>  by: haveIncreasingSize)<br></p><p>&gt; <br>&gt;&gt; One change you might consider is to use different labels for<br>&gt;&gt; comparison and equivalence relations.  &#39;by&#39; feels more natural in the<br>&gt;&gt; context of comparisons and brevity feels more important in the methods<br>&gt;&gt; that use a comparator.  On the other hand, I think dropping the use of<br>&gt;&gt; the word equivalent for &#39;starts&#39; and &#39;elementsEqual&#39; feels like a step<br>&gt;&gt; back in clarity.  Maybe we use &#39;equivalentBy&#39; in these cases.<br>&gt;&gt; <br>&gt;&gt; A suggestion for the future enhancements - rename elementsEqual to<br>&gt;&gt; elementsEquivalent.  If we make that change the shorter &#39;by&#39; label<br>&gt;&gt; would feel much less awkward to me in this method.<br>&gt;&gt; <br>&gt;&gt; -Matthew<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/6d7cb88a/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Take 2: Stdlib closure argument labels and parameter names</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  1, 2016 at 08:00:00pm</p></header><div class="content"><p>on Fri Jul 01 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br></p><p>&gt; Sent from my iPad<br>&gt;<br>&gt;&gt; On Jul 1, 2016, at 7:03 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Wed Jun 29 2016, Matthew Johnson &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 29, 2016, at 1:39 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve updated my pull request with a much more conservative set of<br>&gt;&gt;&gt;&gt; changes that preserves/restores label-free-ness for all “term of art”<br>&gt;&gt;&gt;&gt; functional methods such as filter and reduce.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/2981<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I didn&#39;t participate in this discussion but want to say that I am<br>&gt;&gt;&gt; pleased with where it ended up.  IMO this looks much better than the<br>&gt;&gt;&gt; earlier version as well as some of the alternative that were<br>&gt;&gt;&gt; discussed.  I think brevity is important for the common functional<br>&gt;&gt;&gt; operators and was previously concerned with the length of some of the<br>&gt;&gt;&gt; names.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My current thoughts are that many of the `by:` labels are awkward and<br>&gt;&gt;&gt;&gt; not adding much.  Perhaps they all ought to be omitted.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some cases are more awkward than others.  The value added by a label<br>&gt;&gt;&gt; is also greater in some cases than others.  Unfortunately I think<br>&gt;&gt;&gt; these tend to coincide.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That said, I do think the value of a label outweighs the awkwardness<br>&gt;&gt;&gt; in cases like min and max.<br>&gt;&gt; <br>&gt;&gt; ? min and max are not under discussion here.<br>&gt;<br>&gt; Really?  It looks like they&#39;re in your table:<br>&gt;<br>&gt; smallest = shapes.min(<br>&gt;   isOrderedBefore: haveIncreasingSize)	<br>&gt; smallest = shapes.min(<br>&gt;   by: haveIncreasingSize)<br>&gt;<br>&gt; largest = shapes.max(<br>&gt;   isOrderedBefore: haveIncreasingSize)	<br>&gt; largest = shapes.max(<br>&gt;   by: haveIncreasingSize)<br></p><p>Oops, sorry, you&#39;re right.<br></p><p>&gt;&gt;&gt; One change you might consider is to use different labels for<br>&gt;&gt;&gt; comparison and equivalence relations.  &#39;by&#39; feels more natural in the<br>&gt;&gt;&gt; context of comparisons and brevity feels more important in the methods<br>&gt;&gt;&gt; that use a comparator.  On the other hand, I think dropping the use of<br>&gt;&gt;&gt; the word equivalent for &#39;starts&#39; and &#39;elementsEqual&#39; feels like a step<br>&gt;&gt;&gt; back in clarity.  Maybe we use &#39;equivalentBy&#39; in these cases.<br></p><p>I have a hard time justifying that to myself.  Taking the examples from<br>the PR,<br></p><p>  if expected.elementsEqual(actual, by: haveSameValue) { ... }<br></p><p>  if names.starts(with: myFamily, by: areSameExceptForCase) { ... }<br></p><p>vs.<br></p><p>  if expected.elementsEqual(actual, equivalentBy: haveSameValue) { ... }<br></p><p>  if names.starts(with: myFamily, equivalentBy: areSameExceptForCase) { ... }<br></p><p>If I was going to add words to “by,” I&#39;d go with “determinedBy:”<br></p><p>  if expected.elementsEqual(actual, determinedBy: haveSameValue) { ... }<br></p><p>  if names.starts(with: myFamily, determinedBy: areSameExceptForCase) { ... }<br></p><p>but then I think that applies equally well to min and max, which are<br>doing ordering comparison instead of equality.<br></p><p>&gt;&gt;&gt; A suggestion for the future enhancements - rename elementsEqual to<br>&gt;&gt;&gt; elementsEquivalent.  If we make that change the shorter &#39;by&#39; label<br>&gt;&gt;&gt; would feel much less awkward to me in this method.<br></p><p>Then the basename connection between the predicated and non-predicated<br>elementsEqual is broken.  Not out of the question, but doesn&#39;t seem<br>worth it to me.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
