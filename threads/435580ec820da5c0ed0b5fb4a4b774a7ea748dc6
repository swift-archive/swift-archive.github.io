<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>March 14, 2016 at 11:00:00pm</p></header><div class="content"><p>Thinking a bit longer about functions and parameters…<br>Swift has excellent facilities for collections and their descendants.<br></p><p>In swift you can easily pack items in array and pass this to a function<br>instead of a variadic.<br></p><p>Would it be a good idea to remove variadic parameters alltogethery?<br>This would greatly simplify the function logic.<br></p><p><br></p><p>TedvG<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>It&#39;s a late answer… but I wanted to be a good citizen and checked if the topic has been discussed before; so, it seems that is not the case ;-)<br></p><p>In short, I agree:<br>Variadic parameters are somewhat cool, and I think I was exited when I&#39;ve seen them in C the first time… but I afair, I never created a variadic function in production code, and I think I just used them for the first time in Swift (I checked wether print is variadic…)<br>As of today, string interpolation has several advantages over old-style string-formatting, and I can&#39;t remember any other method in one of the established libraries that uses this feature:<br>Explicitly creating an array is just two additional characters, which doesn&#39;t matter in a long list (which imho shouldn&#39;t be crammed into the function call anyways), and when there are only a few parameters, you can mimic variadics with Optionals defaulted to nil — and who knows what the long-awaited hygienic macros might do to the importance of variadic parameters.<br></p><p>Additionally, variadic parameters compete with trailing closures, which for me would always win the struggle for the last parameter ;-)<br></p><p>As I said, I can&#39;t remember a single use case in Swift — and I already utilized quite a lot of the &quot;strange&quot; techniques (currying, tuple splat, complicated combinations of generics &amp; protocols…).<br>So for me, the answer to the question &quot;would I add this feature to Swift if it wasn&#39;t there?&quot; is a clear no…<br></p><p>Tino<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>July  6, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Jul 6, 2016 at 11:38 AM Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It&#39;s a late answer… but I wanted to be a good citizen and checked if the<br>&gt; topic has been discussed before; so, it seems that is not the case ;-)<br>&gt;<br>&gt; In short, I agree:<br>&gt; Variadic parameters are somewhat cool, and I think I was exited when I&#39;ve<br>&gt; seen them in C the first time… but I afair, I never created a variadic<br>&gt; function in production code, and I think I just used them for the first<br>&gt; time in Swift (I checked wether print is variadic…)<br>&gt; As of today, string interpolation has several advantages over old-style<br>&gt; string-formatting, and I can&#39;t remember any other method in one of the<br>&gt; established libraries that uses this feature:<br>&gt; Explicitly creating an array is just two additional characters, which<br>&gt; doesn&#39;t matter in a long list (which imho shouldn&#39;t be crammed into the<br>&gt; function call anyways), and when there are only a few parameters, you can<br>&gt; mimic variadics with Optionals defaulted to nil — and who knows what the<br>&gt; long-awaited hygienic macros might do to the importance of variadic<br>&gt; parameters.<br>&gt;<br>&gt; Additionally, variadic parameters compete with trailing closures, which<br>&gt; for me would always win the struggle for the last parameter ;-)<br>&gt;<br></p><p>Actually, you don’t have to make a variadic parameter last…print doesn’t.<br></p><p><br>&gt;<br>&gt; As I said, I can&#39;t remember a single use case in Swift — and I already<br>&gt; utilized quite a lot of the &quot;strange&quot; techniques (currying, tuple splat,<br>&gt; complicated combinations of generics &amp; protocols…).<br>&gt; So for me, the answer to the question &quot;would I add this feature to Swift<br>&gt; if it wasn&#39;t there?&quot; is a clear no…<br>&gt;<br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/61cb08a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July  6, 2016 at 03:00:00pm</p></header><div class="content"><p>-1_000_000_000<br></p><p>I believe variadic parameters are useful in a range of situations and<br>I use them myself a lot. As you mentioned yourself, you never created<br>variadic functions and you are allowed to continue working like that<br>for as long as it suits you so. It is a choice and you and other<br>developers are allowed to decide when and where to use it. As for<br>trailing closures, just as Saagar mentioned, your variadic parameter<br>does not have to be the last one, as it has to in C, and thus they do<br>not compete. Give it a try.<br></p><p>L<br></p><p>On 6 July 2016 at 15:49, Saagar Jha via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Wed, Jul 6, 2016 at 11:38 AM Tino Heth via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; It&#39;s a late answer… but I wanted to be a good citizen and checked if the<br>&gt;&gt; topic has been discussed before; so, it seems that is not the case ;-)<br>&gt;&gt;<br>&gt;&gt; In short, I agree:<br>&gt;&gt; Variadic parameters are somewhat cool, and I think I was exited when I&#39;ve<br>&gt;&gt; seen them in C the first time… but I afair, I never created a variadic<br>&gt;&gt; function in production code, and I think I just used them for the first time<br>&gt;&gt; in Swift (I checked wether print is variadic…)<br>&gt;&gt; As of today, string interpolation has several advantages over old-style<br>&gt;&gt; string-formatting, and I can&#39;t remember any other method in one of the<br>&gt;&gt; established libraries that uses this feature:<br>&gt;&gt; Explicitly creating an array is just two additional characters, which<br>&gt;&gt; doesn&#39;t matter in a long list (which imho shouldn&#39;t be crammed into the<br>&gt;&gt; function call anyways), and when there are only a few parameters, you can<br>&gt;&gt; mimic variadics with Optionals defaulted to nil — and who knows what the<br>&gt;&gt; long-awaited hygienic macros might do to the importance of variadic<br>&gt;&gt; parameters.<br>&gt;&gt;<br>&gt;&gt; Additionally, variadic parameters compete with trailing closures, which<br>&gt;&gt; for me would always win the struggle for the last parameter ;-)<br>&gt;<br>&gt;<br>&gt; Actually, you don’t have to make a variadic parameter last…print doesn’t.<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; As I said, I can&#39;t remember a single use case in Swift — and I already<br>&gt;&gt; utilized quite a lot of the &quot;strange&quot; techniques (currying, tuple splat,<br>&gt;&gt; complicated combinations of generics &amp; protocols…).<br>&gt;&gt; So for me, the answer to the question &quot;would I add this feature to Swift<br>&gt;&gt; if it wasn&#39;t there?&quot; is a clear no…<br>&gt;&gt;<br>&gt;&gt; Tino<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; -Saagar Jha<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  6, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; I believe variadic parameters are useful in a range of situations and<br>&gt; I use them myself a lot.<br>Can you talk about concrete examples? Because Objective-C had no variadic messages, it&#39;s natural that the feature isn&#39;t utilized in Cocoa, but I doubt that it is used by many native Swift libraries either.<br></p><p>I&#39;m the last one to take away something that doesn&#39;t hurt, but so far, several (in my opinion) useful features have been removed with the option to reintroduce them later — and at least tuple splat really had unique aspects (compared to variadics, which are just a small dose of syntactic sugar).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>July  6, 2016 at 08:00:00pm</p></header><div class="content"><p>On Wed, Jul 6, 2016 at 2:57 PM, Tino Heth via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Can you talk about concrete examples? Because Objective-C had no variadic messages, it&#39;s natural that the feature isn&#39;t utilized in Cocoa<br></p><p>Objective-C has variadic messages. I&#39;d be surprised if any seasoned<br>Objective-C developer hasn&#39;t used `+[NSString stringWithFormat:]`.<br></p><p>These are most of the variadic messages in the El Capitan SDK:<br></p><p>-[NSGradient initWithColorsAndLocations:]<br>-[AMAction logMessageWithLevel:format:]<br>-[CIFilter apply:]<br>+[CISampler samplerWithImage:keysAndValues:]<br>-[CISampler initWithImage:keysAndValues:]<br>+[NSArray arrayWithObjects:]<br>-[NSArray initWithObjects:]<br>-[NSCoder encodeValuesOfObjCTypes:]<br>-[NSCoder decodeValuesOfObjCTypes:]<br>+[NSDictionary dictionaryWithObjectsAndKeys:]<br>-[NSDictionary initWithObjectsAndKeys:]<br>+[NSException raise:format:]<br>-[NSException handleFailureInMethod:object:file:lineNumber:description:]<br>-[NSException handleFailureInFunction:file:lineNumber:description:]<br>+[NSExpression expressionWithFormat:]<br>+[NSOrderedSet orderedSetWithObjects:]<br>-[NSOrderedSet initWithObjects:]<br>+[NSPredicate predicateWithFormat:]<br>+[NSSet setWithObjects:]<br>-[NSSet initWithObjects:]<br>-[NSString stringByAppendingFormat:]<br>-[NSString initWithFormat:]<br>-[NSString initWithFormat:locale:]<br>+[NSString stringWithFormat:]<br>+[NSString localizedStringWithFormat:]<br>-[NSString appendFormat:]<br>-[SBObject  sendEvent:id:parameters:]<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  7, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Objective-C has variadic messages. I&#39;d be surprised if any seasoned<br>my fault — how could I forget those nil-terminated array-initializers? ;-)<br>Yes, Objective-C had variadics, but imho they have been much worse than in Swift.<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July  6, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;d be reluctant to remove variadic parameters. We&#39;ve found on our team that variadic arguments are easier to read on the call site compared to array arguments, especially when it&#39;s common to pass a single value (but still possible to pass multiple values).<br></p><p>- David<br></p><p>&gt; On 6 Jul 2016, at 20:38, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s a late answer… but I wanted to be a good citizen and checked if the topic has been discussed before; so, it seems that is not the case ;-)<br>&gt; <br>&gt; In short, I agree:<br>&gt; Variadic parameters are somewhat cool, and I think I was exited when I&#39;ve seen them in C the first time… but I afair, I never created a variadic function in production code, and I think I just used them for the first time in Swift (I checked wether print is variadic…)<br>&gt; As of today, string interpolation has several advantages over old-style string-formatting, and I can&#39;t remember any other method in one of the established libraries that uses this feature:<br>&gt; Explicitly creating an array is just two additional characters, which doesn&#39;t matter in a long list (which imho shouldn&#39;t be crammed into the function call anyways), and when there are only a few parameters, you can mimic variadics with Optionals defaulted to nil — and who knows what the long-awaited hygienic macros might do to the importance of variadic parameters.<br>&gt; <br>&gt; Additionally, variadic parameters compete with trailing closures, which for me would always win the struggle for the last parameter ;-)<br>&gt; <br>&gt; As I said, I can&#39;t remember a single use case in Swift — and I already utilized quite a lot of the &quot;strange&quot; techniques (currying, tuple splat, complicated combinations of generics &amp; protocols…).<br>&gt; So for me, the answer to the question &quot;would I add this feature to Swift if it wasn&#39;t there?&quot; is a clear no…<br>&gt; <br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 6 Jul 2016, at 21:13, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d be reluctant to remove variadic parameters. We&#39;ve found on our team that variadic arguments are easier to read on the call site compared to array arguments, especially when it&#39;s common to pass a single value (but still possible to pass multiple values).<br>&gt; <br>&gt; - David<br></p><p>I&#39;m very much in the remove-them camp, however I do wonder if there might be another way to handle them? In other words, when defining a method we should always define an array, but perhaps we could use an attribute to selectively turn any Sequence or Iterator parameter into a variadic, like-so:<br></p><p>	func someMethod(@variadic _ values:[Int]) { … }<br></p><p>This can be called using the developers preference between:<br></p><p>	someMethod([1, 2, 3, 4, 5, 6])<br>	someMethod(1, 2, 3, 4, 5, 6)<br></p><p>So long as there&#39;s no ambiguity of course. This should have a few advantages over the current variadics:<br></p><p>No unique declaration syntax<br>Reinforces that a variadic function is just a function taking some kind of Collection<br>Enables us to choose the type of the parameter from any Iterator, Sequence or Collection.<br>Allows developers to choose the function&#39;s form at the call-site between passing a collection/sequence/iterator or a list of values. Also an array literal if the chosen type supports that as in the example above.<br>Allows passing of an array literal or appropriate Collection type.<br>An attribute is more discoverable (option-click in Xcode to view documentation).<br></p><p>Any got any thoughts on this alternative?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/35af8619/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July  7, 2016 at 11:00:00am</p></header><div class="content"><p>That’s a possibility (at least for our use case). <br></p><p>In our closed-source project we have 17 functions that take variadic parameters. In all cases it’s done that way because it’s possible for the caller to pass a comma separated list of values but the most common case is to only pass a single argument. Additionally, we might want to enforce that at least one value is passed (using a single value parameter and an unlabeled variadic parameter after that). <br>(the example below is Swift 2.2 syntax)<br></p><p>// requires zero or more arguments<br>func foo(xs: Int ...) {}<br></p><p>// requires one or more arguments<br>func bar(x: Int, _ xs: Int ...) {}<br></p><p>The second case would looks really strange without the variadic parameter (calling site) syntax and it would no longer look like it’s one continuous list of values.<br></p><p>As long as we can keep the call site syntactical benefits of variadic parameters and do thing like the above, I’m fine with changing the way it’s defined / works internally. <br>  <br>- David<br></p><p>&gt; On 07 Jul 2016, at 10:07, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 6 Jul 2016, at 21:13, David Rönnqvist via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d be reluctant to remove variadic parameters. We&#39;ve found on our team that variadic arguments are easier to read on the call site compared to array arguments, especially when it&#39;s common to pass a single value (but still possible to pass multiple values).<br>&gt;&gt; <br>&gt;&gt; - David<br>&gt; <br>&gt; I&#39;m very much in the remove-them camp, however I do wonder if there might be another way to handle them? In other words, when defining a method we should always define an array, but perhaps we could use an attribute to selectively turn any Sequence or Iterator parameter into a variadic, like-so:<br>&gt; <br>&gt; 	func someMethod(@variadic _ values:[Int]) { … }<br>&gt; <br>&gt; This can be called using the developers preference between:<br>&gt; <br>&gt; 	someMethod([1, 2, 3, 4, 5, 6])<br>&gt; 	someMethod(1, 2, 3, 4, 5, 6)<br>&gt; <br>&gt; So long as there&#39;s no ambiguity of course. This should have a few advantages over the current variadics:<br>&gt; <br>&gt; No unique declaration syntax<br>&gt; Reinforces that a variadic function is just a function taking some kind of Collection<br>&gt; Enables us to choose the type of the parameter from any Iterator, Sequence or Collection.<br>&gt; Allows developers to choose the function&#39;s form at the call-site between passing a collection/sequence/iterator or a list of values. Also an array literal if the chosen type supports that as in the example above.<br>&gt; Allows passing of an array literal or appropriate Collection type.<br>&gt; An attribute is more discoverable (option-click in Xcode to view documentation).<br>&gt; <br>&gt; Any got any thoughts on this alternative?<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/fe7534e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; The second case would looks really strange without the variadic parameter (calling site) syntax and it would no longer look like it’s one continuous list of values.<br>agreed, that would be odd — but I really hope that there will be a nice alternative in the future.<br></p><p>One very fundamental thing is missing in Swift: Fixed-size arrays.<br></p><p>I can&#39;t predict if or how this issue will be tackled, but the most elegant way I can see would be generic values:<br>let array: Array&lt;size: 5, Int&gt;<br>If this happens, it should be possible to create arrays with a minimal size as well — and additionally, you could impose other restrictions (max length, even number of elements, length mod x = n…).<br></p><p>I repeat that this is all speculation, and it might never happen… but would you be fine with this alternative?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160707/a6569aeb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Removing Variadic Parameters.</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July  7, 2016 at 10:00:00am</p></header><div class="content"><p>Even vb does that... If you ever want to write a compiler or anything that has to dynamically adjust its behavior (which i would expect most objc devs never do) then it might be useful to not cut all the claws of this tigger.<br>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jul 6, 2016, at 8:38 PM, Tino Heth via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s a late answer… but I wanted to be a good citizen and checked if the topic has been discussed before; so, it seems that is not the case ;-)<br>&gt; <br>&gt; In short, I agree:<br>&gt; Variadic parameters are somewhat cool, and I think I was exited when I&#39;ve seen them in C the first time… but I afair, I never created a variadic function in production code, and I think I just used them for the first time in Swift (I checked wether print is variadic…)<br>&gt; As of today, string interpolation has several advantages over old-style string-formatting, and I can&#39;t remember any other method in one of the established libraries that uses this feature:<br>&gt; Explicitly creating an array is just two additional characters, which doesn&#39;t matter in a long list (which imho shouldn&#39;t be crammed into the function call anyways), and when there are only a few parameters, you can mimic variadics with Optionals defaulted to nil — and who knows what the long-awaited hygienic macros might do to the importance of variadic parameters.<br>&gt; <br>&gt; Additionally, variadic parameters compete with trailing closures, which for me would always win the struggle for the last parameter ;-)<br>&gt; <br>&gt; As I said, I can&#39;t remember a single use case in Swift — and I already utilized quite a lot of the &quot;strange&quot; techniques (currying, tuple splat, complicated combinations of generics &amp; protocols…).<br>&gt; So for me, the answer to the question &quot;would I add this feature to Swift if it wasn&#39;t there?&quot; is a clear no…<br>&gt; <br>&gt; Tino<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
