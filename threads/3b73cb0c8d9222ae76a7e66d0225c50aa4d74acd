<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3f81c7f8da70ff137cd12afa453dd94f?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Bernardo Breder</string> &lt;bernardobreder at gmail.com&gt;<p>November  1, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I want to create a mini http server project and execute at Ubuntu 15. The<br>Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile<br>the same code at Ubuntu, this function not found<br></p><p>For example, i can compile the code above at Xcode:<br></p><p>while true {<br>    autoreleasepool {<br>    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length:<br>1\r\n\r\na&quot;.data(using: .utf8)!<br>    }<br>}<br></p><p>But when i try to compile at Ubuntu:<br></p><p>git at breder:~$ cat main.swift<br>import Foundation<br></p><p>while true {<br>    autoreleasepool {<br>    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length:<br>1\r\n\r\na&quot;.data(using: .utf8)!<br>    }<br>}<br></p><p>git at breder:~$ swiftc main.swift<br>main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>    autoreleasepool {<br>    ^~~~~~~~~~~~~~~<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161101/3b734acd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November  2, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello,<br>&gt; <br>&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt; <br>&gt; For example, i can compile the code above at Xcode:<br>&gt; <br>&gt; while true {<br>&gt;     autoreleasepool {<br>&gt;     var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; But when i try to compile at Ubuntu:<br>&gt; <br>&gt; git at breder:~$ cat main.swift     <br>&gt; import Foundation<br>&gt; <br>&gt; while true {<br>&gt;     autoreleasepool {<br>&gt;     var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; git at breder:~$ swiftc main.swift <br>&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;     autoreleasepool {<br>&gt;     ^~~~~~~~~~~~~~~<br></p><p>Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt; <br>&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt; <br>&gt;&gt; while true {<br>&gt;&gt;    autoreleasepool {<br>&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt; <br>&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; while true {<br>&gt;&gt;    autoreleasepool {<br>&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;    autoreleasepool {<br>&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt; <br>&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br></p><p>But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br></p><p>(/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/aaaea81c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November  2, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt; <br>&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt; <br>&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt; <br>&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br></p><p>If you must, you could conditionally define `autoreleasepool` to just call its argument as a compatibility shim.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/670d7a27/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3f81c7f8da70ff137cd12afa453dd94f?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Bernardo Breder</string> &lt;bernardobreder at gmail.com&gt;<p>November  2, 2016 at 04:00:00pm</p></header><div class="content"><p>I want to manager the memory, using the autoreleasepool block, with ubuntu<br>environment, as we can do with Xcode.<br></p><p>2016-11-02 15:34 GMT-02:00 Joe Groff &lt;jgroff at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I want to create a mini http server project and execute at Ubuntu 15. The<br>&gt; Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile<br>&gt; the same code at Ubuntu, this function not found<br>&gt;<br>&gt; For example, i can compile the code above at Xcode:<br>&gt;<br>&gt; while true {<br>&gt;    autoreleasepool {<br>&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length:<br>&gt; 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;    }<br>&gt; }<br>&gt;<br>&gt; But when i try to compile at Ubuntu:<br>&gt;<br>&gt; git at breder:~$ cat main.swift<br>&gt; import Foundation<br>&gt;<br>&gt; while true {<br>&gt;    autoreleasepool {<br>&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length:<br>&gt; 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;    }<br>&gt; }<br>&gt;<br>&gt; git at breder:~$ swiftc main.swift<br>&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;    autoreleasepool {<br>&gt;    ^~~~~~~~~~~~~~~<br>&gt;<br>&gt;<br>&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary<br>&gt; in standalone Swift.<br>&gt;<br>&gt;<br>&gt; But they *are* necessary in Swift programs on Apple platforms (that don’t<br>&gt; use RunLoop, anyway). Philippe, what do you think? What’s the right way to<br>&gt; write cross-platform code that doesn’t use RunLoop or dispatch_main for an<br>&gt; implicit autorelease pool?<br>&gt;<br>&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt;<br>&gt;<br>&gt; If you must, you could conditionally define `autoreleasepool` to just call<br>&gt; its argument as a compatibility shim.<br>&gt;<br>&gt; -Joe<br>&gt;<br></p><p><br></p><p>-- <br>Nome : Bernardo Breder<br>Product : Breder Language<br>Site : bernardobreder.com<br>Email : bernardobreder at gmail.com<br>Email : bbreder at tecgraf.puc-rio.br<br>Email : contato at bernardobreder.com<br>Graduação : UFF - Ciência da Computação<br>Mestrado : UFF - Ciência da Computação<br>Trabalho : TecGraf - PUC-RIO<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/50f9aa3f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br></p><p>So Swift’s ref-counting doesn’t use any autorelease mechanism? I was assuming it did (even if it’s not identical to Obj-C’s.) I implemented an ARC-like library for C++ back around 2007 and found that adding an autorelease pool helped by keeping object ref-counts from bouncing up and down so much during assignment and return value passing.<br></p><p><br>&gt; On Nov 2, 2016, at 11:11 AM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I want to manager the memory, using the autoreleasepool block, with ubuntu environment, as we can do with Xcode.<br></p><p>Apparently you don’t need to because pure Swift objects never get autoreleased, so there’s no pool that needs draining.<br></p><p>—Jens<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>So there are issues we have in swift-corelibs that suffer(leak) because we don&#39;t have ARPs on Linux. It would be super nice to have a retain until scope end concept for swift core libs where autorelease would be an accessor in unmanaged that would retain the object until the arp ends scope.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt; <br>&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt; <br>&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt; <br>&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt; <br>&gt; Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/12bc7978/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>So trivially we could do something along these lines to “solve it” in swift-corelibs-foundation instead of polluting the swift standard library with objective-c-isms on Linux. <br></p><p>internal class NSAutoreleasePool {<br>    fileprivate static var _current = NSThreadSpecific&lt;NSAutoreleasePool&gt;()<br>    internal static var current: NSAutoreleasePool {<br>        return _current.get() {<br>            return NSAutoreleasePool()<br>        }<br>    }<br>    <br>    var depth: Int = 0<br>    var objects = [[AnyObject]]()<br>    <br>    fileprivate override init() { }<br>    <br>    fileprivate func push() {<br>        objects.append([AnyObject]())<br>        depth += 1<br>    }<br>    <br>    fileprivate func pop() {<br>        objects.removeLast()<br>        depth -= 1<br>    }<br>    <br>    func add(_ object: AnyObject) {<br>        objects[depth - 1].append(object)<br>    }<br>}<br></p><p>public func autoreleasepool(_ code: () -&gt; ()) {<br>    NSAutoreleasePool.current.push()<br>    code()<br>    NSAutoreleasePool.current.pop()<br>}<br></p><p><br>&gt; On Nov 2, 2016, at 12:23 PM, Philippe Hausler via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; So there are issues we have in swift-corelibs that suffer(leak) because we don&#39;t have ARPs on Linux. It would be super nice to have a retain until scope end concept for swift core libs where autorelease would be an accessor in unmanaged that would retain the object until the arp ends scope.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt;&gt; <br>&gt;&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt;&gt; <br>&gt;&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/4e28cd95/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>I’m confused about this. Shouldn’t you be able to get away with using +1 convention everywhere? What needs to have arbitrary lifetime-extension in an ARC-ified language?<br></p><p>Jordan<br></p><p>&gt; On Nov 2, 2016, at 12:23, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; So there are issues we have in swift-corelibs that suffer(leak) because we don&#39;t have ARPs on Linux. It would be super nice to have a retain until scope end concept for swift core libs where autorelease would be an accessor in unmanaged that would retain the object until the arp ends scope.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt;&gt; <br>&gt;&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt;&gt; <br>&gt;&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt;&gt; <br>&gt;&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/21c907b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>See:<br></p><p>https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561&gt;<br></p><p>This is far and few between of cases that it would be useful but there are a few APIs that we have not been able to express without being able to autorelease items. Most of which we have either forbidden in Linux or redesigned because they were sub-par swift experiences. However it seems reasonable to have a minimal shim to provide cross platform code compatibility even if it does next to nothing. That way trivial code as the original issue showed can easily be directly compiled on either platform without littering gnarly #ifdefs about.<br></p><p>&gt; On Nov 2, 2016, at 12:55 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I’m confused about this. Shouldn’t you be able to get away with using +1 convention everywhere? What needs to have arbitrary lifetime-extension in an ARC-ified language?<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Nov 2, 2016, at 12:23, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So there are issues we have in swift-corelibs that suffer(leak) because we don&#39;t have ARPs on Linux. It would be super nice to have a retain until scope end concept for swift core libs where autorelease would be an accessor in unmanaged that would retain the object until the arp ends scope.<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/aa5f8de4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>I don’t know, this isn’t really a good Swift API either. Some of the other bare pointer cases we changed to return arrays instead for this reason, like String’s version of cString(using:). https://github.com/apple/swift/blob/master/stdlib/public/SDK/Foundation/NSStringAPI.swift#L413<br></p><p>I am actually in favor of having a minimal shim, but I’d rather it do nothing like Joe’s case than to start allowing arbitrarily-delayed deinitialization like this.<br></p><p>Jordan<br></p><p><br>&gt; On Nov 2, 2016, at 13:00, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; See:<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561&gt;<br>&gt; <br>&gt; This is far and few between of cases that it would be useful but there are a few APIs that we have not been able to express without being able to autorelease items. Most of which we have either forbidden in Linux or redesigned because they were sub-par swift experiences. However it seems reasonable to have a minimal shim to provide cross platform code compatibility even if it does next to nothing. That way trivial code as the original issue showed can easily be directly compiled on either platform without littering gnarly #ifdefs about.<br>&gt; <br>&gt;&gt; On Nov 2, 2016, at 12:55 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’m confused about this. Shouldn’t you be able to get away with using +1 convention everywhere? What needs to have arbitrary lifetime-extension in an ARC-ified language?<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 12:23, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So there are issues we have in swift-corelibs that suffer(leak) because we don&#39;t have ARPs on Linux. It would be super nice to have a retain until scope end concept for swift core libs where autorelease would be an accessor in unmanaged that would retain the object until the arp ends scope.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Nov 2, 2016, at 10:17 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Nov 2, 2016, at 09:42, Joe Groff via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Nov 1, 2016, at 6:40 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I want to create a mini http server project and execute at Ubuntu 15. The Xcode compile and access the function &quot;autoreleasepool&quot;, but when i compile the same code at Ubuntu, this function not found<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For example, i can compile the code above at Xcode:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But when i try to compile at Ubuntu:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; git at breder:~$ cat main.swift     <br>&gt;&gt;&gt;&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; while true {<br>&gt;&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    var test: Data = &quot;HTTP/1.1 200 OK\r\nContent-Length: 1\r\n\r\na&quot;.data(using: .utf8)!<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; git at breder:~$ swiftc main.swift <br>&gt;&gt;&gt;&gt;&gt;&gt; main.swift:4:5: error: use of unresolved identifier &#39;autoreleasepool&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;    autoreleasepool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    ^~~~~~~~~~~~~~~<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Autoreleasepools are an ObjC compatibility feature. They aren&#39;t necessary in standalone Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But they are necessary in Swift programs on Apple platforms (that don’t use RunLoop, anyway). Philippe, what do you think? What’s the right way to write cross-platform code that doesn’t use RunLoop or dispatch_main for an implicit autorelease pool?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; (/me remembers +[NSAutoreleasePool drain] from the ObjC-GC days)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jordan<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/1ad15c9c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 1:00 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; See:<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561&gt;<br>&gt; <br>&gt; This is far and few between of cases that it would be useful but there are a few APIs that we have not been able to express without being able to autorelease items. Most of which we have either forbidden in Linux or redesigned because they were sub-par swift experiences. However it seems reasonable to have a minimal shim to provide cross platform code compatibility even if it does next to nothing. That way trivial code as the original issue showed can easily be directly compiled on either platform without littering gnarly #ifdefs about.<br></p><p>In the fullness of time, the borrow model will hopefully give us a way to represent those kinds of &quot;returns inner pointer&quot; APIs safely in Swift without relying on dynamic lifetime extension, or awkward &#39;with { ... }&#39; callbacks.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/743dbf0e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3f81c7f8da70ff137cd12afa453dd94f?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Bernardo Breder</string> &lt;bernardobreder at gmail.com&gt;<p>November  2, 2016 at 06:00:00pm</p></header><div class="content"><p>In my http server i want to manager the memory all the time that we close a<br>socket, like the example of manager in this link:<br>http://stackoverflow.com/questions/25860942/is-it-necessary-to-use-autoreleasepool-in-a-swift-program<br></p><p>Algorithm that show the ideia:<br></p><p>*func request(content) { ... }*<br></p><p>*let server = myserver()*<br>*while let client = server.accept() {*<br>*  autoreleasepool {*<br>*    client.send(request(client.read()))*<br>*    client.close()*<br>*  }*<br>*}*<br></p><p>2016-11-02 18:08 GMT-02:00 Joe Groff &lt;jgroff at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Nov 2, 2016, at 1:00 PM, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;<br>&gt; See:<br>&gt;<br>&gt; https://github.com/apple/swift-corelibs-foundation/blob/<br>&gt; d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561<br>&gt;<br>&gt; This is far and few between of cases that it would be useful but there are<br>&gt; a few APIs that we have not been able to express without being able to<br>&gt; autorelease items. Most of which we have either forbidden in Linux or<br>&gt; redesigned because they were sub-par swift experiences. However it seems<br>&gt; reasonable to have a minimal shim to provide cross platform code<br>&gt; compatibility even if it does next to nothing. That way trivial code as the<br>&gt; original issue showed can easily be directly compiled on either platform<br>&gt; without littering gnarly #ifdefs about.<br>&gt;<br>&gt;<br>&gt; In the fullness of time, the borrow model will hopefully give us a way to<br>&gt; represent those kinds of &quot;returns inner pointer&quot; APIs safely in Swift<br>&gt; without relying on dynamic lifetime extension, or awkward &#39;with { ... }&#39;<br>&gt; callbacks.<br>&gt;<br>&gt; -Joe<br>&gt;<br></p><p><br></p><p>-- <br>Nome : Bernardo Breder<br>Product : Breder Language<br>Site : bernardobreder.com<br>Email : bernardobreder at gmail.com<br>Email : bbreder at tecgraf.puc-rio.br<br>Email : contato at bernardobreder.com<br>Graduação : UFF - Ciência da Computação<br>Mestrado : UFF - Ciência da Computação<br>Trabalho : TecGraf - PUC-RIO<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/2ad4469e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 1:16 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; In my http server i want to manager the memory all the time that we close a socket, like the example of manager in this link: http://stackoverflow.com/questions/25860942/is-it-necessary-to-use-autoreleasepool-in-a-swift-program &lt;http://stackoverflow.com/questions/25860942/is-it-necessary-to-use-autoreleasepool-in-a-swift-program&gt;<br>&gt; <br>&gt; Algorithm that show the ideia:<br>&gt; <br>&gt; func request(content) { ... }<br>&gt; <br>&gt; let server = myserver()<br>&gt; while let client = server.accept() {<br>&gt;   autoreleasepool {<br>&gt;     client.send(request(client.read()))<br>&gt;     client.close()<br>&gt;   }<br>&gt; }<br></p><p>Is `client` really getting autoreleased somewhere? autoreleasepool shouldn&#39;t normally be necessary. The client will be released when you go out of scope.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/4bfe4058/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 13:36, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Nov 2, 2016, at 1:16 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In my http server i want to manager the memory all the time that we close a socket, like the example of manager in this link: http://stackoverflow.com/questions/25860942/is-it-necessary-to-use-autoreleasepool-in-a-swift-program &lt;http://stackoverflow.com/questions/25860942/is-it-necessary-to-use-autoreleasepool-in-a-swift-program&gt;<br>&gt;&gt; <br>&gt;&gt; Algorithm that show the ideia:<br>&gt;&gt; <br>&gt;&gt; func request(content) { ... }<br>&gt;&gt; <br>&gt;&gt; let server = myserver()<br>&gt;&gt; while let client = server.accept() {<br>&gt;&gt;   autoreleasepool {<br>&gt;&gt;     client.send(request(client.read()))<br>&gt;&gt;     client.close()<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt; <br>&gt; Is `client` really getting autoreleased somewhere? autoreleasepool shouldn&#39;t normally be necessary. The client will be released when you go out of scope.<br></p><p>The problem is that on Apple platforms, the Foundation APIs used to implement the client autorelease things all over the place, so you need an autorelease pool somewhere to clean up the mess intermediate objects returned at +0.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/b2af32c6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3f81c7f8da70ff137cd12afa453dd94f?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Bernardo Breder</string> &lt;bernardobreder at gmail.com&gt;<p>November  2, 2016 at 06:00:00pm</p></header><div class="content"><p>2016-11-02 18:36 GMT-02:00 Joe Groff &lt;jgroff at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Nov 2, 2016, at 1:16 PM, Bernardo Breder via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; In my http server i want to manager the memory all the time that we close<br>&gt; a socket, like the example of manager in this link:<br>&gt; http://stackoverflow.com/questions/25860942/is-it-nece<br>&gt; ssary-to-use-autoreleasepool-in-a-swift-program<br>&gt;<br>&gt; Algorithm that show the ideia:<br>&gt;<br>&gt; *func request(content) { ... }*<br>&gt;<br>&gt; *let server = myserver()*<br>&gt; *while let client = server.accept() {*<br>&gt; *  autoreleasepool {*<br>&gt; *    client.send(request(client.read()))*<br>&gt; *    client.close()*<br>&gt; *  }*<br>&gt; *}*<br>&gt;<br>&gt;<br>&gt;<br>The algorithm that i send is a example of server code and this code will<br>execute in a ubuntu environment. When i install in the ubuntu, the swiftc<br>show me that the *autoreleasepool *is &quot;use of unresolved identifier<br>&#39;autoreleasepool&#39;&quot;. I want to clean the memory all the time when a client<br>close. I will rewrite the example replacing the client for socket:<br></p><p>func request(content) { ... }<br></p><p>let server = myserver()<br>while let *socket* = server.accept() {<br>  *autoreleasepool* {<br>    *socket*.send(request(*socket*.read()))<br>    *socket*.close()<br>  }<br>}<br></p><p><br>&gt; Is `client` really getting autoreleased somewhere? autoreleasepool<br>&gt; shouldn&#39;t normally be necessary. The client will be released when you go<br>&gt; out of scope.<br>&gt;<br>&gt; -Joe<br>&gt;<br></p><p><br></p><p>-- <br>Nome : Bernardo Breder<br>Product : Breder Language<br>Site : bernardobreder.com<br>Email : bernardobreder at gmail.com<br>Email : bbreder at tecgraf.puc-rio.br<br>Email : contato at bernardobreder.com<br>Graduação : UFF - Ciência da Computação<br>Mestrado : UFF - Ciência da Computação<br>Trabalho : TecGraf - PUC-RIO<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/0fe67dc8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 1:42 PM, Bernardo Breder via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; The algorithm that i send is a example of server code and this code will execute in a ubuntu environment. When i install in the ubuntu, the swiftc show me that the autoreleasepool is &quot;use of unresolved identifier &#39;autoreleasepool&#39;&quot;. I want to clean the memory all the time when a client close.<br></p><p>You don’t need to on Ubuntu. Autorelease pools are only to clean up Objective-C object references. Those don’t exist when you’re not running on an Apple platform; you only have Swift objects. <br></p><p>That SO question you linked to is talking about code running on macOS or iOS. It doesn’t apply to other platforms.<br></p><p>—Jens<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Autoreleasepool for Ubuntu</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>November  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 1:08 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Nov 2, 2016, at 1:00 PM, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; See:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561 &lt;https://github.com/apple/swift-corelibs-foundation/blob/d015466450b2675037c6f1ace8e17e73050ccfb9/Foundation/NSURL.swift#L561&gt;<br>&gt;&gt; <br>&gt;&gt; This is far and few between of cases that it would be useful but there are a few APIs that we have not been able to express without being able to autorelease items. Most of which we have either forbidden in Linux or redesigned because they were sub-par swift experiences. However it seems reasonable to have a minimal shim to provide cross platform code compatibility even if it does next to nothing. That way trivial code as the original issue showed can easily be directly compiled on either platform without littering gnarly #ifdefs about.<br>&gt; <br>&gt; In the fullness of time, the borrow model will hopefully give us a way to represent those kinds of &quot;returns inner pointer&quot; APIs safely in Swift without relying on dynamic lifetime extension, or awkward &#39;with { ... }&#39; callbacks.<br></p><p>Not to mention using autoreleasepool to handle returns-inner-pointer isn&#39;t memory safe anyway. If the autorelease pool pops too soon then you end up with a dangling pointer that no amount of compiler analysis can detect. <br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/13ff9c82/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
