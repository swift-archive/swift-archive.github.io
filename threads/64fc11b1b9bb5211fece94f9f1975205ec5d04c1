<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/30c2861dd4c3b094d6ef487403db6d29?s=50"></div><header><strong>REPL failed</strong> from <string>Thomas# Chiang</string> &lt;ccw.thomas at gmail.com&gt;<p>December  6, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>I built swift for Linux(openSUSE 13.2) from source code, by<br>&quot;./utils/build-script -R&quot; command.<br>It works for run test.swift file, but can not run on REPL mode,<br>the error message is:<br>&quot;LLVM ERROR: Compiler-internal integrated REPL unimplemented for this<br>platform; use the LLDB-enhanced REPL instead.&quot;<br></p><p>since I always failed to build for Debug mode,  I need some help to run<br>REPL,<br></p><p>Thanks.<br></p><p><br>ccw<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151206/64fc04c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>REPL failed</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  6, 2015 at 12:00:00am</p></header><div class="content"><p>On Sun, Dec 6, 2015 at 12:10 AM, Thomas# Chiang via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I built swift for Linux(openSUSE 13.2) from source code, by &quot;./utils/build-script -R&quot; command.<br>&gt; It works for run test.swift file, but can not run on REPL mode,<br>&gt; the error message is:<br>&gt; &quot;LLVM ERROR: Compiler-internal integrated REPL unimplemented for this platform; use the LLDB-enhanced REPL instead.&quot;<br>&gt;<br>&gt; since I always failed to build for Debug mode,  I need some help to run REPL,<br></p><p>Hi Thomas,<br></p><p>To run the REPL, the &#39;swift&#39; and &#39;lldb&#39; binaries need to be next to<br>each other. This is not the case in the build tree. Either create a<br>symlink, or build the package using &#39;build-script<br>--preset=buildbot_linux_1404 installable_package=/tmp/swift.tar.gz<br>install_destdir=/tmp/swift-install&#39;, and try again from the package.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/708abe8093c1b67c209e6713070d0fd0?s=50"></div><header><strong>REPL failed</strong> from <string>Lane Schwartz</string> &lt;dowobeha at gmail.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>I also hit this problem.<br></p><p>I compiled like so: ./swift/utils/build-script --lldb<br></p><p>I created a new directory to house the symlinks:<br></p><p>$ mkdir mybins; cd mybins<br></p><p>I created symlinks:<br></p><p>$ for i in $(ls -1 ../build/Ninja-DebugAssert/llvm-linux-x86_64/bin/*); do<br>ln -s $i; done<br>$ for i in $(ls -1 ../build/Ninja-DebugAssert/swift-linux-x86_64/bin/*); do<br>ln -s $i; done<br>$ for i in $(ls -1 ../build/Ninja-DebugAssert/lldb-linux-x86_64/bin/*); do<br>ln -s $i; done<br></p><p>So now there are symlinks in the same directory for lldb and swift.<br></p><p>$ ./swift<br></p><p>LLVM ERROR: Compiler-internal integrated REPL unimplemented for this<br>platform; use the LLDB-enhanced REPL instead.<br></p><p>And I still get the error. Any thoughts?<br></p><p>Thanks,<br>Lane<br></p><p><br></p><p><br></p><p><br>On Sun, Dec 6, 2015 at 2:14 AM, Dmitri Gribenko via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; On Sun, Dec 6, 2015 at 12:10 AM, Thomas# Chiang via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hi,<br>&gt; &gt;<br>&gt; &gt; I built swift for Linux(openSUSE 13.2) from source code, by<br>&quot;./utils/build-script -R&quot; command.<br>&gt; &gt; It works for run test.swift file, but can not run on REPL mode,<br>&gt; &gt; the error message is:<br>&gt; &gt; &quot;LLVM ERROR: Compiler-internal integrated REPL unimplemented for this<br>platform; use the LLDB-enhanced REPL instead.&quot;<br>&gt; &gt;<br>&gt; &gt; since I always failed to build for Debug mode,  I need some help to run<br>REPL,<br>&gt;<br>&gt; Hi Thomas,<br>&gt;<br>&gt; To run the REPL, the &#39;swift&#39; and &#39;lldb&#39; binaries need to be next to<br>&gt; each other. This is not the case in the build tree. Either create a<br>&gt; symlink, or build the package using &#39;build-script<br>&gt; --preset=buildbot_linux_1404 installable_package=/tmp/swift.tar.gz<br>&gt; install_destdir=/tmp/swift-install&#39;, and try again from the package.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p><br></p><p><br>--<br>When a place gets crowded enough to require ID&#39;s, social collapse is not<br>far away.  It is time to go elsewhere.  The best thing about space travel<br>is that it made it possible to go elsewhere.<br>                -- R.A. Heinlein, &quot;Time Enough For Love&quot;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/c310ac08/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>REPL failed</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 10, 2015 at 08:00:00am</p></header><div class="content"><p>Dmitri, this seems to be a common problem. What would you think about creating symlinks in the build tree (when building the appropriate projects), just to smooth over the development process?<br></p><p> - Daniel<br></p><p>&gt; On Dec 6, 2015, at 12:14 AM, Dmitri Gribenko via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sun, Dec 6, 2015 at 12:10 AM, Thomas# Chiang via swift-users<br>&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I built swift for Linux(openSUSE 13.2) from source code, by &quot;./utils/build-script -R&quot; command.<br>&gt;&gt; It works for run test.swift file, but can not run on REPL mode,<br>&gt;&gt; the error message is:<br>&gt;&gt; &quot;LLVM ERROR: Compiler-internal integrated REPL unimplemented for this platform; use the LLDB-enhanced REPL instead.&quot;<br>&gt;&gt; <br>&gt;&gt; since I always failed to build for Debug mode,  I need some help to run REPL,<br>&gt; <br>&gt; Hi Thomas,<br>&gt; <br>&gt; To run the REPL, the &#39;swift&#39; and &#39;lldb&#39; binaries need to be next to<br>&gt; each other. This is not the case in the build tree. Either create a<br>&gt; symlink, or build the package using &#39;build-script<br>&gt; --preset=buildbot_linux_1404 installable_package=/tmp/swift.tar.gz<br>&gt; install_destdir=/tmp/swift-install&#39;, and try again from the package.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>REPL failed</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>Actually, I am retracting this suggestion in favor of what I think is a better one:<br></p><p>What if we change the build process to build up a &quot;composed package&quot; as part of the regular build. We would clear this at the start of each build, and then build up the installed compiler + libraries + package manager as each project completed its build (basically just using the same install logic into a side location).<br></p><p>This has a number of benefits:<br></p><p> - At the end of the build, we have a &quot;build/&lt;config&gt;/bin&quot; directory which has a functioning compiler.<br> - Each project in the chain can use the composed build to work with. So for example, the package manager can build with the compiler + xctest as they are expected to look in a package. This would reduce some complexity in our build process, and be more maintainable.<br> - This solution scales better if/when we add more projects.<br> - This solution also lets the build easily sub in an &quot;prebuilt package&quot; into the build process (it just means pointing at a different composed package).<br></p><p>Thoughts?<br></p><p> - Daniel<br></p><p>&gt; On Dec 10, 2015, at 8:43 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Dmitri, this seems to be a common problem. What would you think about creating symlinks in the build tree (when building the appropriate projects), just to smooth over the development process?<br>&gt; <br>&gt; - Daniel<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 12:14 AM, Dmitri Gribenko via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, Dec 6, 2015 at 12:10 AM, Thomas# Chiang via swift-users<br>&gt;&gt; &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I built swift for Linux(openSUSE 13.2) from source code, by &quot;./utils/build-script -R&quot; command.<br>&gt;&gt;&gt; It works for run test.swift file, but can not run on REPL mode,<br>&gt;&gt;&gt; the error message is:<br>&gt;&gt;&gt; &quot;LLVM ERROR: Compiler-internal integrated REPL unimplemented for this platform; use the LLDB-enhanced REPL instead.&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; since I always failed to build for Debug mode,  I need some help to run REPL,<br>&gt;&gt; <br>&gt;&gt; Hi Thomas,<br>&gt;&gt; <br>&gt;&gt; To run the REPL, the &#39;swift&#39; and &#39;lldb&#39; binaries need to be next to<br>&gt;&gt; each other. This is not the case in the build tree. Either create a<br>&gt;&gt; symlink, or build the package using &#39;build-script<br>&gt;&gt; --preset=buildbot_linux_1404 installable_package=/tmp/swift.tar.gz<br>&gt;&gt; install_destdir=/tmp/swift-install&#39;, and try again from the package.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>REPL failed</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>On Thu, Dec 10, 2015 at 9:59 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; Actually, I am retracting this suggestion in favor of what I think is a better one:<br>&gt;<br>&gt; What if we change the build process to build up a &quot;composed package&quot; as part of the regular build. We would clear this at the start of each build, and then build up the installed compiler + libraries + package manager as each project completed its build (basically just using the same install logic into a side location).<br>&gt;<br>&gt; This has a number of benefits:<br>&gt;<br>&gt;  - At the end of the build, we have a &quot;build/&lt;config&gt;/bin&quot; directory which has a functioning compiler.<br>&gt;  - Each project in the chain can use the composed build to work with. So for example, the package manager can build with the compiler + xctest as they are expected to look in a package. This would reduce some complexity in our build process, and be more maintainable.<br>&gt;  - This solution scales better if/when we add more projects.<br>&gt;  - This solution also lets the build easily sub in an &quot;prebuilt package&quot; into the build process (it just means pointing at a different composed package).<br>&gt;<br>&gt; Thoughts?<br></p><p>My concern is that copying files around will significantly increase<br>the build time for everyone because of I/O.  Debug builds of Swift are<br>quite large (&gt; 700 Mb IIRC).<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>REPL failed</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 20, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 11:07 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 9:59 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; Actually, I am retracting this suggestion in favor of what I think is a better one:<br>&gt;&gt; <br>&gt;&gt; What if we change the build process to build up a &quot;composed package&quot; as part of the regular build. We would clear this at the start of each build, and then build up the installed compiler + libraries + package manager as each project completed its build (basically just using the same install logic into a side location).<br>&gt;&gt; <br>&gt;&gt; This has a number of benefits:<br>&gt;&gt; <br>&gt;&gt; - At the end of the build, we have a &quot;build/&lt;config&gt;/bin&quot; directory which has a functioning compiler.<br>&gt;&gt; - Each project in the chain can use the composed build to work with. So for example, the package manager can build with the compiler + xctest as they are expected to look in a package. This would reduce some complexity in our build process, and be more maintainable.<br>&gt;&gt; - This solution scales better if/when we add more projects.<br>&gt;&gt; - This solution also lets the build easily sub in an &quot;prebuilt package&quot; into the build process (it just means pointing at a different composed package).<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt; <br>&gt; My concern is that copying files around will significantly increase<br>&gt; the build time for everyone because of I/O.  Debug builds of Swift are<br>&gt; quite large (&gt; 700 Mb IIRC).<br></p><p>My thought here was to use rsync and its options for creating hard links where possible. This makes the copying very cheap...<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151220/c7cb9964/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>REPL failed</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 20, 2015 at 03:00:00pm</p></header><div class="content"><p>On Sun, Dec 20, 2015 at 12:03 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;<br>&gt; On Dec 10, 2015, at 11:07 AM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 9:59 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Actually, I am retracting this suggestion in favor of what I think is a<br>&gt; better one:<br>&gt;<br>&gt; What if we change the build process to build up a &quot;composed package&quot; as part<br>&gt; of the regular build. We would clear this at the start of each build, and<br>&gt; then build up the installed compiler + libraries + package manager as each<br>&gt; project completed its build (basically just using the same install logic<br>&gt; into a side location).<br>&gt;<br>&gt; This has a number of benefits:<br>&gt;<br>&gt; - At the end of the build, we have a &quot;build/&lt;config&gt;/bin&quot; directory which<br>&gt; has a functioning compiler.<br>&gt; - Each project in the chain can use the composed build to work with. So for<br>&gt; example, the package manager can build with the compiler + xctest as they<br>&gt; are expected to look in a package. This would reduce some complexity in our<br>&gt; build process, and be more maintainable.<br>&gt; - This solution scales better if/when we add more projects.<br>&gt; - This solution also lets the build easily sub in an &quot;prebuilt package&quot; into<br>&gt; the build process (it just means pointing at a different composed package).<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt;<br>&gt; My concern is that copying files around will significantly increase<br>&gt; the build time for everyone because of I/O.  Debug builds of Swift are<br>&gt; quite large (&gt; 700 Mb IIRC).<br>&gt;<br>&gt;<br>&gt; My thought here was to use rsync and its options for creating hard links<br>&gt; where possible. This makes the copying very cheap...<br></p><p>How would you implement it in practice?  CMake does not know how to<br>use rsync for its &#39;install&#39; target, IIRC.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
