<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0045: &quot;Add scan, prefix(while:), drop(while:), and unfold to the stdlib&quot; ran from April 28...May 3, 2016. A subset of the proposal is *accepted, with modifications* for Swift 3.  This proposal included four new additions to the standard library:<br></p><p>Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br></p><p>Sequence.scan(_:combine:) - This addition is *rejected* by the core team.  While this operation is provided by other functional language libraries, its use case is narrow and not obviously as applicable for Swift programmers.  Swift intentionally has a high bar for “general utility” when adding operations to the standard library: it isn’t enough to be useful in some cases - it must be broadly useful by lots of people.  The core team felt like this was too narrow to be worth including.<br></p><p>unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br></p><p>Thank you to Kevin Ballard for proposing these operations!<br></p><p>-Chris<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  5, 2016 at 02:00:00pm</p></header><div class="content"><p>On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt; <br>&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br></p><p>I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br></p><p>Core team writes:<br>&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br></p><p>A few thoughts:<br></p><p>* I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>* Not a fan of unfold or unreduce, either.<br>* Why not `induce` as a counter to `reduce`? (induction/reduction if you want to noun it, which I don&#39;t)<br></p><p>Stepping back, the definition of `reduce` is:<br></p><p>    Returns the result of repeatedly calling `combine` with an accumulated value <br>    initialized to `initial` and each element of `self`, in turn<br></p><p>    public func reduce&lt;T&gt;(initial: T, @noescape combine: (T, Self.Generator.Element) throws -&gt; T) rethrows -&gt; T<br></p><p>    e.g. print(&quot;Hello&quot;.characters.reduce(&quot; &quot;, combine: {$0 + String($1) + &quot; &quot;}))<br></p><p>The definition of whatever *this* is, is more or less:<br></p><p>    Returns the lazy sequence of repeatedly calling `generate` with an accumulated value<br>    initialized to `initial`. The sequence terminates when the generation closure returns `nil`.<br></p><p>    public func ???&lt;T&gt;(initial: T, generate: (T) -&gt; T?) -&gt; Sequence&lt;T&gt;<br></p><p>So why not `induce`? It&#39;s got a cute name relationship with `reduce`?<br></p><p>var seq = induce(10, generate: { $0 == 0 ? nil : $0 - 1 })<br>print(Array(seq)) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]<br></p><p>seq = induce(1, generate:{ $0 * 2 }).prefix(while: { $0 &lt; 1000 })<br>print(Array(seq)) // [2, 4, 8, 16, 32, 64, 128, 256, 512]<br></p><p>-- E<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/6ad9ab5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt; <br>&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt; <br>&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt; <br>&gt; Core team writes:<br>&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt; <br>&gt; A few thoughts:<br>&gt; <br>&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br></p><p>I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br></p><p>One idea that came out of the core team discussion was something like:<br></p><p>   sequence(from: 0) { $0 += 42 }<br></p><p>Since it returns a sequence.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/288e5d16/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  5, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 5, 2016, at 2:39 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt; <br>&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt; <br>&gt;&gt; Core team writes:<br>&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt; <br>&gt;&gt; A few thoughts:<br>&gt;&gt; <br>&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt; <br>&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt; <br>&gt; One idea that came out of the core team discussion was something like:<br>&gt; <br>&gt;    sequence(from: 0) { $0 += 42 }<br>&gt; <br>&gt; Since it returns a sequence.<br>&gt; <br>&gt; -Chris<br></p><p>I&#39;d +1 that.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/df0db444/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On May 5, 2016, at 3:40 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 2:39 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Core team writes:<br>&gt;&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A few thoughts:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt; <br>&gt;&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt;&gt; <br>&gt;&gt; One idea that came out of the core team discussion was something like:<br>&gt;&gt; <br>&gt;&gt;    sequence(from: 0) { $0 += 42 }<br>&gt;&gt; <br>&gt;&gt; Since it returns a sequence.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; I&#39;d +1 that<br></p><p>+1 from me as well<br></p><p>&gt; <br>&gt; -- E<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/d10c0b86/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  5, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; One idea that came out of the core team discussion was something like:<br>&gt; <br>&gt;    sequence(from: 0) { $0 += 42 }<br>&gt; <br>&gt; Since it returns a sequence.<br></p><p>It definitely occurred to me that this was kind of just a way to construct a generic iterator. Maybe a new AnyIterator (I believe there is such a thing) constructor?<br></p><p>-- <br>Brent Royal-Gordon<br>Sent from my iPhone<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>May  5, 2016 at 08:00:00pm</p></header><div class="content"><p>Or new AnySequence constructors? So the sequence can be generated more than<br>once.<br></p><p>  <br></p><p>let a = AnySequence(from: 1){ $0 * 2 }.prefix(10)  <br>print(Array(a)) // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]  <br>  <br>let b = AnySequence(from: 10){ $0 == 0 ? nil : $0 - 1 }  <br>print(Array(b)) // [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  <br></p><p>  <br></p><p>  <br></p><p>Code as implemented in Swift 2.2:<br></p><p>  <br></p><p>extension AnySequence {  <br> init(from: Element, applying: (Element) -&amp;gt; Element) {  <br>   self.init({ () -&amp;gt; AnyGenerator&amp;lt;Element&amp;gt; in  <br>     var current: Element?  <br>     return AnyGenerator{  <br>       current = current.map(applying) ?? from  <br>       return current  <br>     }  <br>   })  <br> }  <br>  <br> init(from: Element, applying: (Element) -&amp;gt; Element?) {  <br>   self.init({ () -&amp;gt; AnyGenerator&amp;lt;Element&amp;gt; in  <br>     var current: Element?  <br>     return AnyGenerator{  <br>       current = current.map(applying) ?? from  <br>       return current  <br>     }  <br>   })  <br> }  <br>}  <br></p><p>  <br></p><p>  <br>**Patrick Smith**  <br></p><p>On May 6 2016, at 7:27 am, Brent Royal-Gordon via swift-evolution &amp;lt;swift-<br>evolution at swift.org&amp;gt; wrote:  <br></p><p>&gt; &amp;gt; One idea that came out of the core team discussion was something like:  <br>&amp;gt;  <br>&amp;gt; sequence(from: 0) { $0 += 42 }  <br>&amp;gt;  <br>&amp;gt; Since it returns a sequence.<br></p><p>&gt;<br></p><p>&gt; It definitely occurred to me that this was kind of just a way to construct a<br>generic iterator. Maybe a new AnyIterator (I believe there is such a thing)<br>constructor?<br></p><p>&gt;<br></p><p>&gt; \--  <br>Brent Royal-Gordon  <br>Sent from my iPhone  <br>_______________________________________________  <br>swift-evolution mailing list  <br>swift-evolution at swift.org  <br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160505/2685abc5/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  6, 2016 at 08:00:00am</p></header><div class="content"><p>If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br></p><p>* When I first encountered it, I understood exactly what it did because I knew that term of art. If it was named sequence, I would have been confused.<br>* If we are discussing name changes, I&#39;d personally vote to change it to fold. It is the other term of art used for it, and it makes unfold work.<br></p><p>David<br></p><p>&gt; On 05 May 2016, at 22:39, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt; <br>&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt; <br>&gt;&gt; Core team writes:<br>&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt; <br>&gt;&gt; A few thoughts:<br>&gt;&gt; <br>&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt; <br>&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt; <br>&gt; One idea that came out of the core team discussion was something like:<br>&gt; <br>&gt;    sequence(from: 0) { $0 += 42 }<br>&gt; <br>&gt; Since it returns a sequence.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/8daaf102/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f50a7532821edd503161abf3f2eb87cd?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Cole Campbell</string> &lt;cole.m.campbell at icloud.com&gt;<p>May  6, 2016 at 02:00:00am</p></header><div class="content"><p>I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer it). I think changing it now with other source-breaking changes is better than moving forward with &#39;reduce&#39; and a corresponding function with a confusing name. Fold/unfold would fit in beautifully with the prefix/suffix pairings already in the standard library.<br></p><p>Cole<br></p><p>&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt; <br>&gt; * When I first encountered it, I understood exactly what it did because I knew that term of art. If it was named sequence, I would have been confused.<br>&gt; * If we are discussing name changes, I&#39;d personally vote to change it to fold. It is the other term of art used for it, and it makes unfold work.<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; On 05 May 2016, at 22:39, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Core team writes:<br>&gt;&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A few thoughts:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt; <br>&gt;&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt;&gt; <br>&gt;&gt; One idea that came out of the core team discussion was something like:<br>&gt;&gt; <br>&gt;&gt;    sequence(from: 0) { $0 += 42 }<br>&gt;&gt; <br>&gt;&gt; Since it returns a sequence.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/c833b2d3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>May  6, 2016 at 12:00:00pm</p></header><div class="content"><p>I would also be happy with ‘fold’/‘unfold’. The term of art argument applies to fold in the same way it does for ‘reduce’.<br></p><p>Otherwise (if we stick with ‘reduce’) I find both ‘induce’ and ‘expand’ to be good names. I can also suggest ‘accumulate’.<br>In each of these cases I prefer the local consistency of a pair of functions, both being verbs, over the global consistency of a pair of functions, one being a verb and one a noun (for consistency with other functions in the standard library). As such, I like the name ‘iterate’.<br></p><p><br>Regarding the name ’sequence’: I find that it works well as a name for the two versions that was specified in Revision 3:<br></p><p>func unfold&lt;T&gt;(_ initialElement: T, applying: T -&gt; T) -&gt; UnfoldSequence&lt;T&gt;<br>func unfold&lt;T, State&gt;(_ initialState: State, applying: State -&gt; (T, State)?) -&gt; UnfoldSequence&lt;T&gt;<br></p><p>corresponding to `iterate` and the list `unfoldr` (also a specialization of `ana` (for anamorphism)):<br> <br>iterate :: (a -&gt; a) -&gt; a -&gt; [a]<br>unfoldr :: (b -&gt; Maybe (a,b)) -&gt; b -&gt; [a] <br></p><p>But would like to point out that by putting the return type in the name, it makes it less suitable as a potential general name for unfolding to other data structures (e.g trees).<br></p><p> - David<br></p><p>&gt; On 06 May 2016, at 09:12, Cole Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t know if it&#39;s considered too late at this point to rename &#39;reduce&#39;, but I&#39;ll add an enthusiastic +1 to renaming it to &#39;fold&#39; and adding &#39;unfold&#39;. &#39;Fold&#39; is just as obvious a name as &#39;reduce&#39;, IMO (actually I even prefer it). I think changing it now with other source-breaking changes is better than moving forward with &#39;reduce&#39; and a corresponding function with a confusing name. Fold/unfold would fit in beautifully with the prefix/suffix pairings already in the standard library.<br>&gt; <br>&gt; Cole<br>&gt; <br>&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;&gt; <br>&gt;&gt; * When I first encountered it, I understood exactly what it did because I knew that term of art. If it was named sequence, I would have been confused.<br>&gt;&gt; * If we are discussing name changes, I&#39;d personally vote to change it to fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt; On 05 May 2016, at 22:39, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Core team writes:<br>&gt;&gt;&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A few thoughts:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One idea that came out of the core team discussion was something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    sequence(from: 0) { $0 += 42 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since it returns a sequence.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/58079cbc/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May  6, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt; <br>&gt; * When I first encountered it, I understood exactly what it did because I knew that term of art. If it was named sequence, I would have been confused.<br>&gt; * If we are discussing name changes, I&#39;d personally vote to change it to fold. It is the other term of art used for it, and it makes unfold work.<br>&gt; <br></p><p>I have always preferred fold to reduce myself.  If it solves a naming issue it might be worth making this change.<br></p><p>&gt; David<br>&gt; <br>&gt;&gt; On 05 May 2016, at 22:39, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Core team writes:<br>&gt;&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A few thoughts:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt; <br>&gt;&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt;&gt; <br>&gt;&gt; One idea that came out of the core team discussion was something like:<br>&gt;&gt; <br>&gt;&gt;    sequence(from: 0) { $0 += 42 }<br>&gt;&gt; <br>&gt;&gt; Since it returns a sequence.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/d20890a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>Chris, as many people seem to be currently in favour of renaming reduce to fold to support unfold, should be write a proposal, or can the modification be accepted with less formality?<br></p><p>&gt; On 06 May 2016, at 15:11, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On May 6, 2016, at 1:29 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; If we are discussing naming changes to reduce, here&#39;s my personal opinion:<br>&gt;&gt; <br>&gt;&gt; * When I first encountered it, I understood exactly what it did because I knew that term of art. If it was named sequence, I would have been confused.<br>&gt;&gt; * If we are discussing name changes, I&#39;d personally vote to change it to fold. It is the other term of art used for it, and it makes unfold work.<br>&gt;&gt; <br>&gt; <br>&gt; I have always preferred fold to reduce myself.  If it solves a naming issue it might be worth making this change.<br>&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt; On 05 May 2016, at 22:39, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m gratified these are hopping into the language. That said, I&#39;m going to put on my painters cap to consider selecting some exterior latex for the feature I was most looking forward to in this proposal:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Core team writes:<br>&gt;&gt;&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A few thoughts:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was picked because it was term of art (like map), which is what allowed the misuse of a verb.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One idea that came out of the core team discussion was something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    sequence(from: 0) { $0 += 42 }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Since it returns a sequence.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/5d7767cd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  6, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 6, 2016, at 8:54 AM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; Chris, as many people seem to be currently in favour of renaming reduce to fold to support unfold, should be write a proposal, or can the modification be accepted with less formality?<br></p><p>We would *definitely* have to have a full review period to rename “reduce”.  We specifically considered whether to go with “reduce” or “fold”, and chose reduce.  <br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/6554fa83/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May  6, 2016 at 11:00:00am</p></header><div class="content"><p>On Thu, May 5, 2016, at 01:39 PM, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On May 5, 2016, at 1:03 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are<br>&gt;&gt;&gt; *accepted* as specified in revision 3 of the proposal.<br>&gt;&gt;<br>&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or<br>&gt;&gt; `take`/`drop` pairs that linguistically matched.Nonetheless I&#39;m<br>&gt;&gt; gratified these are hopping into the language. That said, I&#39;m going<br>&gt;&gt; to put on my painters cap to consider selecting some exterior latex<br>&gt;&gt; for the feature I was most looking forward to in this proposal:<br>&gt;&gt;<br>&gt;&gt; Core team writes:<br>&gt;&gt;&gt; unfold(_:applying:) - This addition is *rejected* by the core team<br>&gt;&gt;&gt; as written, but deserves more discussion in the community, and<br>&gt;&gt;&gt; potentially could be the subject of a future proposal.  The core<br>&gt;&gt;&gt; team felt that the utility of this operation is high enough to be<br>&gt;&gt;&gt; worth including in the standard library, but could not find an<br>&gt;&gt;&gt; acceptable name for it.  “unfold” is problematic, despite its<br>&gt;&gt;&gt; precedence in other language, because Swift calls the corresponding<br>&gt;&gt;&gt; operation “reduce” and not “fold”.  No one could get excited about<br>&gt;&gt;&gt; “unreduce”.   “iterate” was also considered, but a noun is more<br>&gt;&gt;&gt; appropriate than an verb in this case.  Given the lack of a good<br>&gt;&gt;&gt; name, the core team preferred to reject *_to let the community<br>&gt;&gt;&gt; discuss it more_*.<br>&gt;&gt;<br>&gt;&gt; A few thoughts:<br>&gt;&gt;<br>&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce<br>&gt;&gt;   isn&#39;t a noun, prefix isn&#39;t a noun, drop isn&#39;t a noun.<br>&gt;<br>&gt; I’m not a naming guru, but my understanding is that ‘reduce’ was<br>&gt; picked because it was term of art (like map), which is what allowed<br>&gt; the misuse of a verb.<br>&gt;<br>&gt; One idea that came out of the core team discussion was something like:<br>&gt;<br>&gt; sequence(from: 0) { $0 += 42 }<br>&gt;<br>&gt; Since it returns a sequence.<br> <br>It just occurred to me that, if we follow existing naming conventions,<br>this function would end up returning a value of type SequenceSequence 😁.<br> <br>-Kevin<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/78004f40/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db7139ab902e102e5f6354a68a37a8a6?s=50"></div><header><strong>[swift-evolution-announce] [Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Pierre Grabolosa</string> &lt;pierre.grabolosa at imerir.com&gt;<p>May  5, 2016 at 11:00:00pm</p></header><div class="content"><p>Most humbly, I think &quot;expand&quot; could be an interesting name for this operation. It seems it hasn&#39;t come up, but I could be wrong.<br></p><p>Best regards,<br>Pierre<br></p><p>Sent from my iPhone<br></p><p>&gt; On 05 May 2016, at 01:50, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; unfold(_:applying:) - This addition is *rejected* by the core team as written, but deserves more discussion in the community, and potentially could be the subject of a future proposal.  The core team felt that the utility of this operation is high enough to be worth including in the standard library, but could not find an acceptable name for it.  “unfold” is problematic, despite its precedence in other language, because Swift calls the corresponding operation “reduce” and not “fold”.  No one could get excited about “unreduce”.   “iterate” was also considered, but a noun is more appropriate than an verb in this case.  Given the lack of a good name, the core team preferred to reject to let the community discuss it more.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
