<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 02:00:00pm</p></header><div class="content"><p>on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt; understand them), such a method would not be more efficient than<br>&gt; creating another String with the new initializer and concatenating the<br>&gt; two, and would require more significant plumbing changes to<br>&gt; _StringBuffer.<br></p><p>We are very interested in making significant plumbing changes to String, FWIW.<br></p><p>&gt;<br>&gt;<br>&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt; someone on the core team wants to chime in.<br>&gt;<br>&gt; Cheers,<br>&gt; Zachary Waldowski<br>&gt; zach at waldowski.me<br>&gt;<br>&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt;&gt; existing method to append Character sequences:<br>&gt;&gt; <br>&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt;&gt; Character&gt;(_: S)<br>&gt;&gt; <br>&gt;&gt; The equivalent for code units would presumably be:<br>&gt;&gt; <br>&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt;&gt; Encoding.Type)<br>&gt;&gt; <br>&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt;&gt; the code, that might not be straightforward.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt; &gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt;&gt; &gt; posted the PR to Swift itself:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt;   https://github.com/apple/swift/pull/1109<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The existing proposal PR:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; -- <br>&gt;&gt; &gt; Sincerely,<br>&gt;&gt; &gt;   Zachary Waldowski<br>&gt;&gt; &gt;   zach at waldowski.me<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt;&gt; &gt; wrote:<br>&gt;&gt; &gt;&gt; Thanks, Dave.<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt;&gt; &gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; Cheers!<br>&gt;&gt; &gt;&gt; Zach Waldowski<br>&gt;&gt; &gt;&gt; zach at waldowski.me<br>&gt;&gt; &gt;&gt; <br>&gt;&gt; &gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt;&gt; Charles -<br>&gt;&gt; &gt;&gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt; &gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt;&gt; &gt;&gt;&gt;&gt; non-descriptive,<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt;&gt; &gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt;&gt; &gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt;&gt; &gt;&gt;&gt; the use-site.<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; -Dave<br>&gt;&gt; &gt;&gt;&gt; <br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  1, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 2:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt;&gt; understand them), such a method would not be more efficient than<br>&gt;&gt; creating another String with the new initializer and concatenating the<br>&gt;&gt; two, and would require more significant plumbing changes to<br>&gt;&gt; _StringBuffer.<br>&gt; <br>&gt; We are very interested in making significant plumbing changes to String, FWIW.<br>&gt; <br></p><p>In that case, perhaps it would make sense to add String.append() for code unit sequences over the exiting plumbing just for completeness of the API, on the assumption that efficiency would come later when String gets its makeover.<br></p><p>—CK<br></p><p>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt;&gt; someone on the core team wants to chime in.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; Zachary Waldowski<br>&gt;&gt; zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt;&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt;&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt;&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt;&gt;&gt; existing method to append Character sequences:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt;&gt;&gt; Character&gt;(_: S)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The equivalent for code units would presumably be:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt;&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt;&gt;&gt; Encoding.Type)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt;&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt;&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt;&gt;&gt; the code, that might not be straightforward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —CK<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt;&gt;&gt;&gt; posted the PR to Swift itself:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  https://github.com/apple/swift/pull/1109<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The existing proposal PR:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Sincerely,<br>&gt;&gt;&gt;&gt;  Zachary Waldowski<br>&gt;&gt;&gt;&gt;  zach at waldowski.me<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Thanks, Dave.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt;&gt;&gt;&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cheers!<br>&gt;&gt;&gt;&gt;&gt; Zach Waldowski<br>&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Charles -<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; non-descriptive,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt;&gt;&gt;&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt;&gt;&gt;&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt;&gt;&gt;&gt;&gt;&gt; the use-site.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February  1, 2016 at 11:00:00pm</p></header><div class="content"><p>That&#39;d seem reasonable.<br></p><p>I guess I&#39;m not entirely sold on the benefit of the extra method here,<br>and all the weight on maintenance that&#39;d entail. Obviously I get the<br>benefit of skipping the storage reservation, but I can&#39;t imagine a<br>scenario where building something up using<br>`appendContentsOf(_:encoding:)` would be that much better then plumb<br>concatenation. I&#39;d love to hear an example, though.<br></p><p>Cheers!<br>Zach Waldowski<br>zach at waldowski.me<br></p><p>On Mon, Feb 1, 2016, at 08:36 PM, Charles Kissinger via swift-evolution<br>wrote:<br>&gt; <br>&gt; &gt; On Feb 1, 2016, at 2:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt; &gt;&gt; understand them), such a method would not be more efficient than<br>&gt; &gt;&gt; creating another String with the new initializer and concatenating the<br>&gt; &gt;&gt; two, and would require more significant plumbing changes to<br>&gt; &gt;&gt; _StringBuffer.<br>&gt; &gt; <br>&gt; &gt; We are very interested in making significant plumbing changes to String, FWIW.<br>&gt; &gt; <br>&gt; <br>&gt; In that case, perhaps it would make sense to add String.append() for code<br>&gt; unit sequences over the exiting plumbing just for completeness of the<br>&gt; API, on the assumption that efficiency would come later when String gets<br>&gt; its makeover.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt; &gt;&gt; someone on the core team wants to chime in.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Cheers,<br>&gt; &gt;&gt; Zachary Waldowski<br>&gt; &gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt; &gt;&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt; &gt;&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt; &gt;&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt; &gt;&gt;&gt; existing method to append Character sequences:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt; &gt;&gt;&gt; Character&gt;(_: S)<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; The equivalent for code units would presumably be:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt; &gt;&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt; &gt;&gt;&gt; Encoding.Type)<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt; &gt;&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt; &gt;&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt; &gt;&gt;&gt; the code, that might not be straightforward.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; —CK<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt; &gt;&gt;&gt;&gt; posted the PR to Swift itself:<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;  https://github.com/apple/swift/pull/1109<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; The existing proposal PR:<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;  https://github.com/apple/swift-evolution/pull/101<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; -- <br>&gt; &gt;&gt;&gt;&gt; Sincerely,<br>&gt; &gt;&gt;&gt;&gt;  Zachary Waldowski<br>&gt; &gt;&gt;&gt;&gt;  zach at waldowski.me<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt; Thanks, Dave.<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt; &gt;&gt;&gt;&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; Cheers!<br>&gt; &gt;&gt;&gt;&gt;&gt; Zach Waldowski<br>&gt; &gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Charles -<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; non-descriptive,<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; the use-site.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; -- <br>&gt; &gt; -Dave<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  2, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 8:53 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That&#39;d seem reasonable.<br>&gt; <br>&gt; I guess I&#39;m not entirely sold on the benefit of the extra method here,<br>&gt; and all the weight on maintenance that&#39;d entail. Obviously I get the<br>&gt; benefit of skipping the storage reservation, but I can&#39;t imagine a<br>&gt; scenario where building something up using<br>&gt; `appendContentsOf(_:encoding:)` would be that much better then plumb<br>&gt; concatenation. I&#39;d love to hear an example, though.<br></p><p>Zach,<br></p><p>Here’s a real-world example:<br></p><p>I have a case where I am assembling a String from five short ASCII character sequences scattered around different parts of each line of an input file. The maximum length of the resulting String is predictable, so in an ideal world I could create an empty string, call String.reserveCapacity() and then suck up all of the ASCII character sequences with a series of String.appendContentsOf(_, encoding:), all with just a single memory allocation per String. (But as you mentioned, it would appear to require a significant change in the String implementation for things to be that efficient.)<br></p><p>Obviously, the alternative approach of instantiating a string for each of the subsequences and concatenating them would involve a minimum of six allocations. It matters in my case, because the input files are large (sometimes millions of lines).<br></p><p>Right now, my approach is to allocate a byte buffer, assemble the substrings in it, null-terminate and call String.fromCString(). That performs reasonably well, but it still involves an extra copy of the characters and the byte buffer allocation, neither of which would be necessary with the String.appendContentsOf(_, encoding:) method. <br></p><p>I hope that example was clear. If single-character String.append() became more efficient, that would reduce the need for the function I’m proposing. And if Swift strings were to get short-string optimization it would make this all much easier, but I have no idea if that is in the cards.<br></p><p>—CK<br></p><p>&gt; <br>&gt; Cheers!<br>&gt; Zach Waldowski<br>&gt; zach at waldowski.me<br>&gt; <br>&gt; On Mon, Feb 1, 2016, at 08:36 PM, Charles Kissinger via swift-evolution<br>&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 1, 2016, at 2:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt;&gt;&gt;&gt; understand them), such a method would not be more efficient than<br>&gt;&gt;&gt;&gt; creating another String with the new initializer and concatenating the<br>&gt;&gt;&gt;&gt; two, and would require more significant plumbing changes to<br>&gt;&gt;&gt;&gt; _StringBuffer.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We are very interested in making significant plumbing changes to String, FWIW.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; In that case, perhaps it would make sense to add String.append() for code<br>&gt;&gt; unit sequences over the exiting plumbing just for completeness of the<br>&gt;&gt; API, on the assumption that efficiency would come later when String gets<br>&gt;&gt; its makeover.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt;&gt;&gt;&gt; someone on the core team wants to chime in.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt;&gt;&gt;&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt;&gt;&gt;&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt;&gt;&gt;&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt;&gt;&gt;&gt;&gt; existing method to append Character sequences:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt;&gt;&gt;&gt;&gt; Character&gt;(_: S)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The equivalent for code units would presumably be:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt;&gt;&gt;&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt;&gt;&gt;&gt;&gt; Encoding.Type)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt;&gt;&gt;&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt;&gt;&gt;&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt;&gt;&gt;&gt;&gt; the code, that might not be straightforward.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt;&gt;&gt;&gt;&gt;&gt; posted the PR to Swift itself:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/1109<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The existing proposal PR:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,<br>&gt;&gt;&gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks, Dave.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Zach Waldowski<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Charles -<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; non-descriptive,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the use-site.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February  3, 2016 at 01:00:00pm</p></header><div class="content"><p>Charles —<br></p><p>This certainly makes a lot of sense. My primary response is that I think<br>the bad behavior of reserveCapacity should be reported by one of us as a<br>bug. My second thought is that the extra method should be proposed<br>separately; whereas the current proposal surfaces things that already<br>exist, what you need is purely additive but would require underlying<br>changes. I don&#39;t see a point in implementing it now for API completeness<br>if it can&#39;t make good on its performance; that&#39;s the exact predicament<br>we&#39;re in today with reserveCapacity and append/appendContentsOf.<br></p><p>Zach Waldowski<br>zach at waldowski.me<br></p><p>On Tue, Feb 2, 2016, at 03:24 AM, Charles Kissinger wrote:<br>&gt; <br>&gt; &gt; On Feb 1, 2016, at 8:53 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; That&#39;d seem reasonable.<br>&gt; &gt; <br>&gt; &gt; I guess I&#39;m not entirely sold on the benefit of the extra method here,<br>&gt; &gt; and all the weight on maintenance that&#39;d entail. Obviously I get the<br>&gt; &gt; benefit of skipping the storage reservation, but I can&#39;t imagine a<br>&gt; &gt; scenario where building something up using<br>&gt; &gt; `appendContentsOf(_:encoding:)` would be that much better then plumb<br>&gt; &gt; concatenation. I&#39;d love to hear an example, though.<br>&gt; <br>&gt; Zach,<br>&gt; <br>&gt; Here’s a real-world example:<br>&gt; <br>&gt; I have a case where I am assembling a String from five short ASCII<br>&gt; character sequences scattered around different parts of each line of an<br>&gt; input file. The maximum length of the resulting String is predictable, so<br>&gt; in an ideal world I could create an empty string, call<br>&gt; String.reserveCapacity() and then suck up all of the ASCII character<br>&gt; sequences with a series of String.appendContentsOf(_, encoding:), all<br>&gt; with just a single memory allocation per String. (But as you mentioned,<br>&gt; it would appear to require a significant change in the String<br>&gt; implementation for things to be that efficient.)<br>&gt; <br>&gt; Obviously, the alternative approach of instantiating a string for each of<br>&gt; the subsequences and concatenating them would involve a minimum of six<br>&gt; allocations. It matters in my case, because the input files are large<br>&gt; (sometimes millions of lines).<br>&gt; <br>&gt; Right now, my approach is to allocate a byte buffer, assemble the<br>&gt; substrings in it, null-terminate and call String.fromCString(). That<br>&gt; performs reasonably well, but it still involves an extra copy of the<br>&gt; characters and the byte buffer allocation, neither of which would be<br>&gt; necessary with the String.appendContentsOf(_, encoding:) method. <br>&gt; <br>&gt; I hope that example was clear. If single-character String.append() became<br>&gt; more efficient, that would reduce the need for the function I’m<br>&gt; proposing. And if Swift strings were to get short-string optimization it<br>&gt; would make this all much easier, but I have no idea if that is in the<br>&gt; cards.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt; &gt; <br>&gt; &gt; Cheers!<br>&gt; &gt; Zach Waldowski<br>&gt; &gt; zach at waldowski.me<br>&gt; &gt; <br>&gt; &gt; On Mon, Feb 1, 2016, at 08:36 PM, Charles Kissinger via swift-evolution<br>&gt; &gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; On Feb 1, 2016, at 2:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt; &gt;&gt;&gt;&gt; understand them), such a method would not be more efficient than<br>&gt; &gt;&gt;&gt;&gt; creating another String with the new initializer and concatenating the<br>&gt; &gt;&gt;&gt;&gt; two, and would require more significant plumbing changes to<br>&gt; &gt;&gt;&gt;&gt; _StringBuffer.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; We are very interested in making significant plumbing changes to String, FWIW.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; In that case, perhaps it would make sense to add String.append() for code<br>&gt; &gt;&gt; unit sequences over the exiting plumbing just for completeness of the<br>&gt; &gt;&gt; API, on the assumption that efficiency would come later when String gets<br>&gt; &gt;&gt; its makeover.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; —CK<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt; &gt;&gt;&gt;&gt; someone on the core team wants to chime in.<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Cheers,<br>&gt; &gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt; &gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt; &gt;&gt;&gt;&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt; &gt;&gt;&gt;&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt; &gt;&gt;&gt;&gt;&gt; existing method to append Character sequences:<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt; &gt;&gt;&gt;&gt;&gt; Character&gt;(_: S)<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; The equivalent for code units would presumably be:<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt; &gt;&gt;&gt;&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt; &gt;&gt;&gt;&gt;&gt; Encoding.Type)<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt; &gt;&gt;&gt;&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt; &gt;&gt;&gt;&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt; &gt;&gt;&gt;&gt;&gt; the code, that might not be straightforward.<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; —CK<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; posted the PR to Swift itself:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/1109<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; The existing proposal PR:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/101<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Sincerely,<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks, Dave.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers!<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Zach Waldowski<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Charles -<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; non-descriptive,<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the use-site.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; -- <br>&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 3, 2016, at 10:18 AM, Zach Waldowski &lt;zach at waldowski.me&gt; wrote:<br>&gt; <br>&gt; Charles —<br>&gt; <br>&gt; This certainly makes a lot of sense. My primary response is that I think<br>&gt; the bad behavior of reserveCapacity should be reported by one of us as a<br>&gt; bug.<br></p><p>From the little bit of poking around that I’ve done, the problem might not lie with reserveCapacity() itself. It *appears* that when calling String.append(_:Character), each character is converted to a String and then concatenated. So the savings in memory allocations that reserveCapacity() provides might be getting swamped out by the per-character allocations of temporary strings. I only took a quick look though, and haven’t verified this.<br></p><p>&gt; My second thought is that the extra method should be proposed<br>&gt; separately; whereas the current proposal surfaces things that already<br>&gt; exist, what you need is purely additive but would require underlying<br>&gt; changes. I don&#39;t see a point in implementing it now for API completeness<br>&gt; if it can&#39;t make good on its performance; that&#39;s the exact predicament<br>&gt; we&#39;re in today with reserveCapacity and append/appendContentsOf.<br></p><p>Fair enough. We can always revisit the “API completeness” argument when the proposal actual undergoes review.<br></p><p>Thanks again for putting together the proposal and code!<br></p><p>—CK<br></p><p>&gt; <br>&gt; Zach Waldowski<br>&gt; zach at waldowski.me<br>&gt; <br>&gt; On Tue, Feb 2, 2016, at 03:24 AM, Charles Kissinger wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 1, 2016, at 8:53 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;d seem reasonable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess I&#39;m not entirely sold on the benefit of the extra method here,<br>&gt;&gt;&gt; and all the weight on maintenance that&#39;d entail. Obviously I get the<br>&gt;&gt;&gt; benefit of skipping the storage reservation, but I can&#39;t imagine a<br>&gt;&gt;&gt; scenario where building something up using<br>&gt;&gt;&gt; `appendContentsOf(_:encoding:)` would be that much better then plumb<br>&gt;&gt;&gt; concatenation. I&#39;d love to hear an example, though.<br>&gt;&gt; <br>&gt;&gt; Zach,<br>&gt;&gt; <br>&gt;&gt; Here’s a real-world example:<br>&gt;&gt; <br>&gt;&gt; I have a case where I am assembling a String from five short ASCII<br>&gt;&gt; character sequences scattered around different parts of each line of an<br>&gt;&gt; input file. The maximum length of the resulting String is predictable, so<br>&gt;&gt; in an ideal world I could create an empty string, call<br>&gt;&gt; String.reserveCapacity() and then suck up all of the ASCII character<br>&gt;&gt; sequences with a series of String.appendContentsOf(_, encoding:), all<br>&gt;&gt; with just a single memory allocation per String. (But as you mentioned,<br>&gt;&gt; it would appear to require a significant change in the String<br>&gt;&gt; implementation for things to be that efficient.)<br>&gt;&gt; <br>&gt;&gt; Obviously, the alternative approach of instantiating a string for each of<br>&gt;&gt; the subsequences and concatenating them would involve a minimum of six<br>&gt;&gt; allocations. It matters in my case, because the input files are large<br>&gt;&gt; (sometimes millions of lines).<br>&gt;&gt; <br>&gt;&gt; Right now, my approach is to allocate a byte buffer, assemble the<br>&gt;&gt; substrings in it, null-terminate and call String.fromCString(). That<br>&gt;&gt; performs reasonably well, but it still involves an extra copy of the<br>&gt;&gt; characters and the byte buffer allocation, neither of which would be<br>&gt;&gt; necessary with the String.appendContentsOf(_, encoding:) method. <br>&gt;&gt; <br>&gt;&gt; I hope that example was clear. If single-character String.append() became<br>&gt;&gt; more efficient, that would reduce the need for the function I’m<br>&gt;&gt; proposing. And if Swift strings were to get short-string optimization it<br>&gt;&gt; would make this all much easier, but I have no idea if that is in the<br>&gt;&gt; cards.<br>&gt;&gt; <br>&gt;&gt; —CK<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Cheers!<br>&gt;&gt;&gt; Zach Waldowski<br>&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Feb 1, 2016, at 08:36 PM, Charles Kissinger via swift-evolution<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 1, 2016, at 2:07 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt;&gt;&gt;&gt;&gt;&gt; understand them), such a method would not be more efficient than<br>&gt;&gt;&gt;&gt;&gt;&gt; creating another String with the new initializer and concatenating the<br>&gt;&gt;&gt;&gt;&gt;&gt; two, and would require more significant plumbing changes to<br>&gt;&gt;&gt;&gt;&gt;&gt; _StringBuffer.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We are very interested in making significant plumbing changes to String, FWIW.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In that case, perhaps it would make sense to add String.append() for code<br>&gt;&gt;&gt;&gt; unit sequences over the exiting plumbing just for completeness of the<br>&gt;&gt;&gt;&gt; API, on the assumption that efficiency would come later when String gets<br>&gt;&gt;&gt;&gt; its makeover.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It would be good to shop around for this proposal, though; maybe if<br>&gt;&gt;&gt;&gt;&gt;&gt; someone on the core team wants to chime in.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; existing method to append Character sequences:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Character&gt;(_: S)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The equivalent for code units would presumably be:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Encoding.Type)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the code, that might not be straightforward.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; —CK<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; posted the PR to Swift itself:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift/pull/1109<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The existing proposal PR:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/pull/101<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sincerely,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Zachary Waldowski<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks, Dave.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Zach Waldowski<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; zach at waldowski.me<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Charles -<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; non-descriptive,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the use-site.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February  1, 2016 at 11:00:00pm</p></header><div class="content"><p>Color me interested, then…<br></p><p>Zachary Waldowski<br>zach at waldowski.me<br></p><p>On Mon, Feb 1, 2016, at 05:07 PM, Dave Abrahams via swift-evolution<br>wrote:<br>&gt; <br>&gt; on Mon Feb 01 2016, Zach Waldowski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; Due to the semantics of _StringCore and _StringBuffer (as far as I<br>&gt; &gt; understand them), such a method would not be more efficient than<br>&gt; &gt; creating another String with the new initializer and concatenating the<br>&gt; &gt; two, and would require more significant plumbing changes to<br>&gt; &gt; _StringBuffer.<br>&gt; <br>&gt; We are very interested in making significant plumbing changes to String,<br>&gt; FWIW.<br>&gt; <br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; It would be good to shop around for this proposal, though; maybe if<br>&gt; &gt; someone on the core team wants to chime in.<br>&gt; &gt;<br>&gt; &gt; Cheers,<br>&gt; &gt; Zachary Waldowski<br>&gt; &gt; zach at waldowski.me<br>&gt; &gt;<br>&gt; &gt; On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt; &gt;&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt; &gt;&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt; &gt;&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt; &gt;&gt; existing method to append Character sequences:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt; &gt;&gt; Character&gt;(_: S)<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; The equivalent for code units would presumably be:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt; &gt;&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt; &gt;&gt; Encoding.Type)<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt; &gt;&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt; &gt;&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt; &gt;&gt; the code, that might not be straightforward.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; —CK<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt; &gt;&gt; &gt; posted the PR to Swift itself:<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;   https://github.com/apple/swift/pull/1109<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt; The existing proposal PR:<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt; -- <br>&gt; &gt;&gt; &gt; Sincerely,<br>&gt; &gt;&gt; &gt;   Zachary Waldowski<br>&gt; &gt;&gt; &gt;   zach at waldowski.me<br>&gt; &gt;&gt; &gt; <br>&gt; &gt;&gt; &gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt; &gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; Thanks, Dave.<br>&gt; &gt;&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt; &gt;&gt; &gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt; &gt;&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt;&gt; Cheers!<br>&gt; &gt;&gt; &gt;&gt; Zach Waldowski<br>&gt; &gt;&gt; &gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt; &gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt;&gt; Charles -<br>&gt; &gt;&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt;&gt; &gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt;&gt; &gt;&gt;&gt;&gt; non-descriptive,<br>&gt; &gt;&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; &gt;&gt; &gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; &gt;&gt; &gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; &gt;&gt; &gt;&gt;&gt; the use-site.<br>&gt; &gt;&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt; _______________________________________________<br>&gt; &gt;&gt; &gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
