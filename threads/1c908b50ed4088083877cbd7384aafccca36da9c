<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Bug or ByDesign?] unowned optional values not allowed</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July  4, 2016 at 08:00:00am</p></header><div class="content"><p>Currently it’s not possible to have an unowned optional value. E.g:<br></p><p>class A {<br>          unowned var parent : A?   // ‘unowned’ may only be applied to class and class-bound protocol types, not ‘A?&#39;<br>          deinit { <br>            if let p = parent { print(&quot;Bye, mom!&quot;) }<br>            print(&quot;deallocating&quot;)<br>        }<br>}<br></p><p>Sometimes you want an unowned value, but it doesn’t actually need to be set.<br></p><p>In a specific case I was working on, we wanted to use a private embedded struct to wrap some functionality away as a unit, but we need a reference back to the enclosing instance. We could have a weak reference, but that comes with additional overheads, and it’s unnecessary because that struct code will all get inlined and the reference will just be a pointer back to ‘self’ (it would be cool if the compiler could detect that and just not emit the variable at all, but I don’t think it’ll do that). In any case, in order to initialise it with the parent that reference needs to be an optional/implicitly-unwrapped-optional (so that it can be initialised to nil and then set after the parent calls super.init).<br></p><p>Given that weak optionals work, I’m tempted to think it’s a bug, but I’m asking in case it was intentionally omitted.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Bug or ByDesign?] unowned optional values not allowed</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  5, 2016 at 09:00:00am</p></header><div class="content"><p>Longstanding bug, rdar://problem/17277899 &lt;rdar://problem/17277899&gt;. Surprisingly few people have asked for it.<br></p><p>Jordan<br></p><p>&gt; On Jul 3, 2016, at 23:29, Karl via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Currently it’s not possible to have an unowned optional value. E.g:<br>&gt; <br>&gt; class A {<br>&gt;          unowned var parent : A?   // ‘unowned’ may only be applied to class and class-bound protocol types, not ‘A?&#39;<br>&gt;          deinit { <br>&gt;            if let p = parent { print(&quot;Bye, mom!&quot;) }<br>&gt;            print(&quot;deallocating&quot;)<br>&gt;        }<br>&gt; }<br>&gt; <br>&gt; Sometimes you want an unowned value, but it doesn’t actually need to be set.<br>&gt; <br>&gt; In a specific case I was working on, we wanted to use a private embedded struct to wrap some functionality away as a unit, but we need a reference back to the enclosing instance. We could have a weak reference, but that comes with additional overheads, and it’s unnecessary because that struct code will all get inlined and the reference will just be a pointer back to ‘self’ (it would be cool if the compiler could detect that and just not emit the variable at all, but I don’t think it’ll do that). In any case, in order to initialise it with the parent that reference needs to be an optional/implicitly-unwrapped-optional (so that it can be initialised to nil and then set after the parent calls super.init).<br>&gt; <br>&gt; Given that weak optionals work, I’m tempted to think it’s a bug, but I’m asking in case it was intentionally omitted.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/f41266c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Bug or ByDesign?] unowned optional values not allowed</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July  6, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 5 Jul 2016, at 18:21, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Longstanding bug, rdar://problem/17277899 &lt;rdar://problem/17277899&gt;. Surprisingly few people have asked for it.<br>&gt; <br>&gt; Jordan<br>&gt; <br></p><p>Good to know, thanks.<br></p><p>Maybe not enough people know/care about the overheads of weak references?<br></p><p>Since the WWDC Swift performance talk I’ve been more conscious of eliminating unnecessary retains/releases. That goes for weak references as well, as (certainly on Obj-C), accessing the value means acquiring a lock to ensure nobody is trying to zero that reference while you read it: http://opensource.apple.com//source/objc4/objc4-493.9/runtime/objc-arr.mm &lt;http://opensource.apple.com//source/objc4/objc4-493.9/runtime/objc-arr.mm&gt; (see: objc_loadWeak). It’s basically never going to be in contention, but it’s still more overhead than a simple pointer.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/ae547ad9/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>[Bug or ByDesign?] unowned optional values not allowed</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 09:00:00am</p></header><div class="content"><p>According to you description, you should use<br></p><p><br>weak var parent:A!<br></p><p><br></p><p>Zhaoxin<br></p><p>On Mon, Jul 4, 2016 at 2:29 PM, Karl via swift-users &lt;swift-users at swift.org&gt;<br>wrote:<br></p><p>&gt; Currently it’s not possible to have an unowned optional value. E.g:<br>&gt;<br>&gt; class A {<br>&gt;           unowned var parent : A?   // ‘unowned’ may only be applied to<br>&gt; class and class-bound protocol types, not ‘A?&#39;<br>&gt;           deinit {<br>&gt;             if let p = parent { print(&quot;Bye, mom!&quot;) }<br>&gt;             print(&quot;deallocating&quot;)<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; Sometimes you want an unowned value, but it doesn’t actually need to be<br>&gt; set.<br>&gt;<br>&gt; In a specific case I was working on, we wanted to use a private embedded<br>&gt; struct to wrap some functionality away as a unit, but we need a reference<br>&gt; back to the enclosing instance. We could have a weak reference, but that<br>&gt; comes with additional overheads, and it’s unnecessary because that struct<br>&gt; code will all get inlined and the reference will just be a pointer back to<br>&gt; ‘self’ (it would be cool if the compiler could detect that and just not<br>&gt; emit the variable at all, but I don’t think it’ll do that). In any case, in<br>&gt; order to initialise it with the parent that reference needs to be an<br>&gt; optional/implicitly-unwrapped-optional (so that it can be initialised to<br>&gt; nil and then set after the parent calls super.init).<br>&gt;<br>&gt; Given that weak optionals work, I’m tempted to think it’s a bug, but I’m<br>&gt; asking in case it was intentionally omitted.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/b73333fb/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
