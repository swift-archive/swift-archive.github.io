<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  9, 2016 at 11:00:00am</p></header><div class="content"><p>Hi everybody,<br></p><p>Having looked at some examples, the API guidelines working group members<br>that were present this morning agreed we really want prepositions inside<br>the parentheses of method calls.<br></p><p>Here are some results for the importer; we&#39;re still tuning some of the<br>heuristics but overall we feel very good about the preposition<br>placement:<br>  <br>  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br></p><p>Note that this is not final wording, but here are the guidelines we&#39;re<br>working with for first argument labels:<br></p><p>A. Try to form a grammatical phrase including the first argument and<br>   describing the primary semantics at the call site.<br></p><p>B. The first argument gets a label when and only when:<br></p><p>   1. It does not form part of a grammatical phrase describing the<br>      primary semantics.  For example,<br>      ```<br>      x.dismiss(animated: y)<br>      ```<br>      [more examples needed]<br>      Note that parameters with defaults never describe the primary<br>      semantics. so are always labeled.<br>      ```<br>      func invert(options options: SomeOptionSet = []) // yes<br>      func invert(_ options: SomeOptionSet = [])       // no<br>      ```<br></p><p>   2. The method is a factory method; such calls should mirror<br>      initializers, with no preposition.  For example,<br>      ```<br>      let x = UIColor(red: r, green: g, blue: b)<br>      let y = monitor.makeColor(red: r, green: g, blue: b)<br>      ```<br></p><p>   3. It is part of a prepositional phrase<br></p><p>     a. The label normally starts with the preposition. <br>        For example, <br>        ```<br>        x.move(from: a, to: b)<br>        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>        ```<br>     b. ...unless the preposition would break a very tight association<br>        between parameters:<br>        ```<br>        x.moveTo(x: a, y: b)<br>        ```<br>        [encourage grouping parameters into higher-level concepts,<br>        e.g. Point, in these cases]<br>      <br></p><p><br>Feedback most welcome, of course.<br>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  9, 2016 at 02:00:00pm</p></header><div class="content"><p>That seems good, except…<br>&gt;   2. The method is a factory method; such calls should mirror<br>&gt;      initializers, with no preposition.  For example,<br>&gt;      ```<br>&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br></p><p>I disagree with this. I believe that PascalCase for pseudo-initializers is more meaningful and modern than “make…”.<br></p><p>Because the compiler can’t yet deal with this…<br></p><p>protocol Monitor {<br>   typealias Color<br>   func Color(red: Float, green: Float, blue: Float) -&gt; Color<br>}<br>let color = monitor.Color(red: r, green: g, blue: b)<br></p><p>… I hack around it with this…<br>func Color_init(red: Float, green: Float, blue: Float) -&gt; Color<br></p><p>…but most of the time, the “_init” is not necessary. Normally we can just namespace out way out of the collision:<br>protocol Frog {}; extension Frog {<br>   func String() -&gt; Swift.String {<br>      return &quot;Frog&quot;<br>   }<br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/6723ac0a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February  9, 2016 at 11:00:00am</p></header><div class="content"><p>I think I like this direction in general. It feels more natural to have the<br>preposition in the label than outside the parenthesis (and it&#39;s worth<br>keeping the preposition because it improves clarity in most cases).<br></p><p>Here are some strange examples which need tweaking:<br></p><p>     + func accountType(withAccountTypeIdentifier typeIdentifier: String!)<br>-&gt; ACAccountType!<br></p><p>Probably should just be &quot;withIdentifier&quot;.<br></p><p>     + func comparePositionInDecodeOrderWithPosition(of cursor:<br>AVSampleCursor) -&gt; ComparisonResult<br></p><p>I would suggest comparePositionInDecodeOrder(withPositionOf cursor:<br>AVSampleCursor). Tricky because there are two prepositions.<br></p><p>      func componentsPassingTest(testHandler: (AVAudioUnitComponent,<br>UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Bool) -&gt; [AVAudioUnitComponent]<br> -    func componentsMatching(desc: AudioComponentDescription) -&gt;<br>[AVAudioUnitComponent]<br> +   func components(matching desc: AudioComponentDescription) -&gt;<br>[AVAudioUnitComponent]<br></p><p>Should &quot;passingTest&quot; become the first label?<br></p><p>     -  class func exportPresetsCompatibleWith(asset: AVAsset) -&gt; [String]<br>     +  class func exportPresetsCompatible(withAsset asset: AVAsset) -&gt;<br>[String]<br></p><p>This is not an improvement. I&#39;d suggest exportPresets(compatibleWith asset:<br>AVAsset), but that doesn&#39;t really fit under the current rules. Maybe a<br>special case for [noun][adjective][preposition]?<br></p><p>    -  func compatibleTrackFor(compositionTrack: AVCompositionTrack) -&gt;<br>AVAssetTrack?<br>    +  func compatibleTrack(forCompositionTrack compositionTrack:<br>AVCompositionTrack) -&gt; AVAssetTrack?<br></p><p>Does this indicate that some other suffix-matching rules are no longer<br>being applied? I&#39;d have expected compatibleTrack(for compositionTrack:<br>AVCompositionTrack). I also see other examples like<br>renewCredentials(forAccount account: ACAccount, ...).<br></p><p>      func createSampleBufferFor(request: AVSampleBufferRequest) -&gt;<br>CMSampleBuffer<br></p><p>Why wasn&#39;t this changed?<br></p><p>      -  class func typeOf(property property: String!) -&gt; ABPropertyType<br>      +  class func type(ofProperty property: String!) -&gt; ABPropertyType<br></p><p>I don&#39;t really like either of these. Maybe we need special rules for &quot;of&quot; ?<br></p><p><br>If anyone else is worried about special cases, I just looked this up:<br>there&#39;s a clang __attribute__((swift_name(&quot;x&quot;))), or NS_SWIFT_NAME(x),<br>which can be used to expose Obj-C methods to Swift with particular custom<br>names.<br></p><p>Jacob<br></p><p>On Tue, Feb 9, 2016 at 11:18 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Hi everybody,<br>&gt;<br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt;<br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;<br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt;<br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;    describing the primary semantics at the call site.<br>&gt;<br>&gt; B. The first argument gets a label when and only when:<br>&gt;<br>&gt;    1. It does not form part of a grammatical phrase describing the<br>&gt;       primary semantics.  For example,<br>&gt;       ```<br>&gt;       x.dismiss(animated: y)<br>&gt;       ```<br>&gt;       [more examples needed]<br>&gt;       Note that parameters with defaults never describe the primary<br>&gt;       semantics. so are always labeled.<br>&gt;       ```<br>&gt;       func invert(options options: SomeOptionSet = []) // yes<br>&gt;       func invert(_ options: SomeOptionSet = [])       // no<br>&gt;       ```<br>&gt;<br>&gt;    2. The method is a factory method; such calls should mirror<br>&gt;       initializers, with no preposition.  For example,<br>&gt;       ```<br>&gt;       let x = UIColor(red: r, green: g, blue: b)<br>&gt;       let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;       ```<br>&gt;<br>&gt;    3. It is part of a prepositional phrase<br>&gt;<br>&gt;      a. The label normally starts with the preposition.<br>&gt;         For example,<br>&gt;         ```<br>&gt;         x.move(from: a, to: b)<br>&gt;         x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;         ```<br>&gt;      b. ...unless the preposition would break a very tight association<br>&gt;         between parameters:<br>&gt;         ```<br>&gt;         x.moveTo(x: a, y: b)<br>&gt;         ```<br>&gt;         [encourage grouping parameters into higher-level concepts,<br>&gt;         e.g. Point, in these cases]<br>&gt;<br>&gt;<br>&gt;<br>&gt; Feedback most welcome, of course.<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/961f9332/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 12, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 9, 2016, at 11:50 AM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think I like this direction in general. It feels more natural to have the preposition in the label than outside the parenthesis (and it&#39;s worth keeping the preposition because it improves clarity in most cases).<br>&gt; <br>&gt; Here are some strange examples which need tweaking:<br>&gt; <br>&gt;      + func accountType(withAccountTypeIdentifier typeIdentifier: String!) -&gt; ACAccountType!<br>&gt; <br>&gt; Probably should just be &quot;withIdentifier”.<br></p><p>Interesting! I’ll have to think about this; it might just be a special case. I haven’t seen this issue come up before.<br></p><p>&gt; <br>&gt;      + func comparePositionInDecodeOrderWithPosition(of cursor: AVSampleCursor) -&gt; ComparisonResult<br>&gt; <br>&gt; I would suggest comparePositionInDecodeOrder(withPositionOf cursor: AVSampleCursor). Tricky because there are two prepositions.<br></p><p>Yeah. Our current heuristics produce:<br></p><p>	func comparePositionInDecodeOrder(positionOf cursor: AVSampleCursor) -&gt; ComparisonResult<br></p><p>&gt; <br>&gt;       func componentsPassingTest(testHandler: (AVAudioUnitComponent, UnsafeMutablePointer&lt;ObjCBool&gt;) -&gt; Bool) -&gt; [AVAudioUnitComponent]<br>&gt;  -    func componentsMatching(desc: AudioComponentDescription) -&gt; [AVAudioUnitComponent]<br>&gt;  +   func components(matching desc: AudioComponentDescription) -&gt; [AVAudioUnitComponent]<br>&gt; <br>&gt; Should &quot;passingTest&quot; become the first label?<br></p><p>Yes, thanks!<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/commit/ba288337414c998fa358312e22c9b2660dd334e4<br></p><p>&gt;      -  class func exportPresetsCompatibleWith(asset: AVAsset) -&gt; [String]<br>&gt;      +  class func exportPresetsCompatible(withAsset asset: AVAsset) -&gt; [String]<br>&gt; <br>&gt; This is not an improvement. I&#39;d suggest exportPresets(compatibleWith asset: AVAsset), but that doesn&#39;t really fit under the current rules. Maybe a special case for [noun][adjective][preposition]?<br></p><p>I did it in a different way, here:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/commit/fd70e0e4fa026843ab6570d1b2d46a4cbfd13974<br></p><p>&gt; <br>&gt;     -  func compatibleTrackFor(compositionTrack: AVCompositionTrack) -&gt; AVAssetTrack?<br>&gt;     +  func compatibleTrack(forCompositionTrack compositionTrack: AVCompositionTrack) -&gt; AVAssetTrack?<br>&gt; <br>&gt; Does this indicate that some other suffix-matching rules are no longer being applied? I&#39;d have expected compatibleTrack(for compositionTrack: AVCompositionTrack). I also see other examples like renewCredentials(forAccount account: ACAccount, …).<br></p><p>There was a ban on leaving “vacuous” argument labels like “for” or “with”, but it doesn’t make sense now. Addressed in<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164&gt;<br></p><p>&gt; <br>&gt;       func createSampleBufferFor(request: AVSampleBufferRequest) -&gt; CMSampleBuffer<br>&gt; <br>&gt; Why wasn&#39;t this changed?<br></p><p>Similar issue to the rule above. It’s fixed now to <br></p><p>	func createSampleBuffer(for request: AVSampleBufferRequest) -&gt; CMSampleBuffer<br></p><p>&gt; <br>&gt;       -  class func typeOf(property property: String!) -&gt; ABPropertyType<br>&gt;       +  class func type(ofProperty property: String!) -&gt; ABPropertyType<br>&gt; <br>&gt; I don&#39;t really like either of these. Maybe we need special rules for &quot;of” ?<br></p><p>Handled in the subsequent discussion ;)<br></p><p>&gt; <br>&gt; If anyone else is worried about special cases, I just looked this up: there&#39;s a clang __attribute__((swift_name(&quot;x&quot;))), or NS_SWIFT_NAME(x), which can be used to expose Obj-C methods to Swift with particular custom names.<br></p><p>Yes, generalizing the swift_name attribute to allow arbitrary renaming is one of specified steps to implementing SE-0005, so we can deal with special cases and bad translations.<br></p><p>Thanks!<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/bd7229c2/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February  9, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;m having trouble with this example in 3(a):<br>```<br>x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>```<br></p><p>Based on the preceding discussion, I understand that the above is<br>preferred by the working group over the following:<br></p><p>```<br>x.loadValuesFor(keys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>```<br></p><p>Going by the guidelines, though, it seems like the first option is<br>also now preferred by the working group over the unlabeled version<br>below (which admittedly is only an option because &#39;keys&#39; is not<br>duplicating type information):<br></p><p>```<br>x.loadValuesForKeys([&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>```<br></p><p>Is it really the case that the first option is preferred over the<br>third? It does look as though it is, based on this in the diff:<br>```<br>- func respondWith(data: Data)<br>+ func respond(withData data: Data)<br>```<br></p><p>Whichever one is preferred, could the guidelines be clarified in that<br>respect? Also, what of the guideline not to repeat type information?<br>For example, why isn&#39;t the method above `func respond(with data:<br>Data)`?<br></p><p><br>On Tue, Feb 9, 2016 at 1:18 PM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi everybody,<br>&gt;<br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt;<br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt;<br>&gt;   https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;<br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt;<br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;    describing the primary semantics at the call site.<br>&gt;<br>&gt; B. The first argument gets a label when and only when:<br>&gt;<br>&gt;    1. It does not form part of a grammatical phrase describing the<br>&gt;       primary semantics.  For example,<br>&gt;       ```<br>&gt;       x.dismiss(animated: y)<br>&gt;       ```<br>&gt;       [more examples needed]<br>&gt;       Note that parameters with defaults never describe the primary<br>&gt;       semantics. so are always labeled.<br>&gt;       ```<br>&gt;       func invert(options options: SomeOptionSet = []) // yes<br>&gt;       func invert(_ options: SomeOptionSet = [])       // no<br>&gt;       ```<br>&gt;<br>&gt;    2. The method is a factory method; such calls should mirror<br>&gt;       initializers, with no preposition.  For example,<br>&gt;       ```<br>&gt;       let x = UIColor(red: r, green: g, blue: b)<br>&gt;       let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;       ```<br>&gt;<br>&gt;    3. It is part of a prepositional phrase<br>&gt;<br>&gt;      a. The label normally starts with the preposition.<br>&gt;         For example,<br>&gt;         ```<br>&gt;         x.move(from: a, to: b)<br>&gt;         x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;         ```<br>&gt;      b. ...unless the preposition would break a very tight association<br>&gt;         between parameters:<br>&gt;         ```<br>&gt;         x.moveTo(x: a, y: b)<br>&gt;         ```<br>&gt;         [encourage grouping parameters into higher-level concepts,<br>&gt;         e.g. Point, in these cases]<br>&gt;<br>&gt;<br>&gt;<br>&gt; Feedback most welcome, of course.<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>February  9, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 9, 2016, at 11:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt; <br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br></p><p>I haven’t read through every bullet item in this email, but I definitely agree with what you’ve done as far as having the preposition inside the parenthesis, as it is in the git diff.  This seems clearly better than putting the left-paren between the preposition and its object, which unnaturally breaks them apart.<br></p><p>-Matt<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>February 10, 2016 at 12:00:00am</p></header><div class="content"><p>How will the new API Design Guidelines be applied to the Swift Core Libraries?<br></p><p>&lt;https://swift.org/core-libraries/&gt;<br></p><p>If they have to copy APIs from the heuristics-based importer, they&#39;re missing the opportunity to *manually* choose the best method names and argument labels.<br></p><p>It would also be difficult to improve the heuristics in later versions, because of binary compatibility with the Swift Core Libraries.<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February  9, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Feb 9, 2016, at 4:20 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How will the new API Design Guidelines be applied to the Swift Core Libraries?<br>&gt; <br>&gt; &lt;https://swift.org/core-libraries/&gt;<br>&gt; <br>&gt; If they have to copy APIs from the heuristics-based importer, they&#39;re missing the opportunity to *manually* choose the best method names and argument labels.<br></p><p>The core libraries need to match what the heuristics-based importer produces, or we won’t have source portability. If manual intervention is necessary, we have mechanisms to override the names produced by the automatic translation.<br></p><p>&gt; <br>&gt; It would also be difficult to improve the heuristics in later versions, because of binary compatibility with the Swift Core Libraries.<br></p><p><br>Correct.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>February 10, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 10 Feb 2016, at 07:40, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; The core libraries need to match what the heuristics-based importer produces, or we won’t have source portability. If manual intervention is necessary, we have mechanisms to override the names produced by the automatic translation.<br></p><p>If the Swift Core Libraries were the &quot;source of truth&quot; for Foundation APIs, they could be annotated with @objc attributes, to override your heuristics in the Clang importer.<br></p><p>// Swift Core Libraries:<br>@objc(encodeWithCoder:)<br>func encode(into coder: Coder)<br></p><p>// Darwin platforms:<br>// Implicit NS_SWIFT_NAME(encode(into:))<br>- (void)encodeWithCoder:(NSCoder *)aCoder;<br></p><p>You&#39;d have stable Foundation APIs which could be fine-tuned in Swift, but the @objc attributes would clutter the source code.<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 10, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 1:43 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 10 Feb 2016, at 07:40, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The core libraries need to match what the heuristics-based importer produces, or we won’t have source portability. If manual intervention is necessary, we have mechanisms to override the names produced by the automatic translation.<br>&gt; <br>&gt; If the Swift Core Libraries were the &quot;source of truth&quot; for Foundation APIs, they could be annotated with @objc attributes, to override your heuristics in the Clang importer.<br>&gt; <br>&gt; // Swift Core Libraries:<br>&gt; @objc(encodeWithCoder:)<br>&gt; func encode(into coder: Coder)<br>&gt; <br>&gt; // Darwin platforms:<br>&gt; // Implicit NS_SWIFT_NAME(encode(into:))<br>&gt; - (void)encodeWithCoder:(NSCoder *)aCoder;<br>&gt; <br>&gt; You&#39;d have stable Foundation APIs which could be fine-tuned in Swift, but the @objc attributes would clutter the source code.<br></p><p>Yes, we could do this through some technical means, and it might make it easier to keep the APIs in sync.<br></p><p>	- Doug<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  9, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt;     a. The label normally starts with the preposition. <br>&gt;        For example, <br>&gt;        ```<br>&gt;        x.move(from: a, to: b)<br>&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;        ```<br></p><p>Would this mean we&#39;re returning to `stride(to:by:)` and `stride(through:by:)`? If so, I for one welcome our new argument label overlords.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  9, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my moss-covered three-handled family gradunza<br></p><p>On Feb 9, 2016, at 5:39 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br></p><p>&gt;&gt;    a. The label normally starts with the preposition. <br>&gt;&gt;       For example, <br>&gt;&gt;       ```<br>&gt;&gt;       x.move(from: a, to: b)<br>&gt;&gt;       x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;       ```<br>&gt; <br>&gt; Would this mean we&#39;re returning to `stride(to:by:)` and `stride(through:by:)`? If so, I for one welcome our new argument label overlords.<br></p><p>Yup!<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>February  9, 2016 at 07:00:00pm</p></header><div class="content"><p>+1<br></p><p>New versions are much prettier. I like.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/9bed927f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 10, 2016 at 09:00:00pm</p></header><div class="content"><p>Appart from the kind of details that Jacob mentioned, this is perfect for me. Nothing else to add. :) Great work!!<br></p><p>&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt; <br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt; <br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt; <br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;   describing the primary semantics at the call site.<br>&gt; <br>&gt; B. The first argument gets a label when and only when:<br>&gt; <br>&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;      primary semantics.  For example,<br>&gt;      ```<br>&gt;      x.dismiss(animated: y)<br>&gt;      ```<br>&gt;      [more examples needed]<br>&gt;      Note that parameters with defaults never describe the primary<br>&gt;      semantics. so are always labeled.<br>&gt;      ```<br>&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;      ```<br>&gt; <br>&gt;   2. The method is a factory method; such calls should mirror<br>&gt;      initializers, with no preposition.  For example,<br>&gt;      ```<br>&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;      ```<br>&gt; <br>&gt;   3. It is part of a prepositional phrase<br>&gt; <br>&gt;     a. The label normally starts with the preposition. <br>&gt;        For example, <br>&gt;        ```<br>&gt;        x.move(from: a, to: b)<br>&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;        ```<br>&gt;     b. ...unless the preposition would break a very tight association<br>&gt;        between parameters:<br>&gt;        ```<br>&gt;        x.moveTo(x: a, y: b)<br>&gt;        ```<br>&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;        e.g. Point, in these cases]<br>&gt; <br>&gt; <br>&gt; <br>&gt; Feedback most welcome, of course.<br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 10, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, Feb 9, 2016 at 2:18 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; Hi everybody,<br>&gt;<br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt;<br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;<br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt;<br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;    describing the primary semantics at the call site.<br>&gt;<br></p><p>I assume that A is intended to cover:<br></p><p>a.addObserver(b) // yes<br>a.add(observer: b) // no<br></p><p>I believe I can read this behavior into A by inferring &quot;a grammatical<br>phrase including [the base name and] the first argument&quot; but I want to make<br>sure this is the intent.<br></p><p><br>&gt;<br>&gt; B. The first argument gets a label when and only when:<br>&gt;<br>&gt;    1. It does not form part of a grammatical phrase describing the<br>&gt;       primary semantics.  For example,<br>&gt;       ```<br>&gt;       x.dismiss(animated: y)<br>&gt;       ```<br>&gt;       [more examples needed]<br>&gt;       Note that parameters with defaults never describe the primary<br>&gt;       semantics. so are always labeled.<br>&gt;       ```<br>&gt;       func invert(options options: SomeOptionSet = []) // yes<br>&gt;       func invert(_ options: SomeOptionSet = [])       // no<br>&gt;       ```<br>&gt;<br>&gt;    2. The method is a factory method; such calls should mirror<br>&gt;       initializers, with no preposition.  For example,<br>&gt;       ```<br>&gt;       let x = UIColor(red: r, green: g, blue: b)<br>&gt;       let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;       ```<br>&gt;<br></p><p>If rule B.2 didn&#39;t exist<br></p><p>let y = monitor.makeColor(red: r, green: g, blue: b)<br></p><p>would still have the first argument labeled by B.1 wouldn&#39;t it? (Though<br>without this rule, the guidelines wouldn&#39;t be clear on whether or not to<br>include prepositions in the argument labels.)<br></p><p><br>&gt;<br>&gt;    3. It is part of a prepositional phrase<br>&gt;<br>&gt;      a. The label normally starts with the preposition.<br>&gt;         For example,<br>&gt;         ```<br>&gt;         x.move(from: a, to: b)<br>&gt;         x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;         ```<br>&gt;      b. ...unless the preposition would break a very tight association<br>&gt;         between parameters:<br>&gt;         ```<br>&gt;         x.moveTo(x: a, y: b)<br>&gt;         ```<br>&gt;         [encourage grouping parameters into higher-level concepts,<br>&gt;         e.g. Point, in these cases]<br>&gt;<br>&gt;<br>This seems clear and straightforward to apply. The only place where<br>this isn&#39;t totally clear is when there are multiple prepositions (as<br>highlighted in Jacob&#39;s response), but I think B.3 provides the right level<br>of guidance... much more detail will start being too many guidelines and<br>special cases.<br></p><p><br>&gt; Feedback most welcome, of course.<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/392aeda7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 10, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Feb 10 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Tue, Feb 9, 2016 at 2:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; Hi everybody,<br>&gt;&gt;<br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt;&gt;<br>&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt; placement:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;&gt;<br>&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt; working with for first argument labels:<br>&gt;&gt;<br>&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;    describing the primary semantics at the call site.<br>&gt;&gt;<br>&gt;<br>&gt; I assume that A is intended to cover:<br>&gt;<br>&gt; a.addObserver(b) // yes<br>&gt; a.add(observer: b) // no<br></p><p>I don&#39;t know what you mean by &quot;cover.&quot; It isn&#39;t intended to assign the<br>&quot;yes/no&quot; decision to those; they both form (the same) grammatical phrase<br>at the call site.  The choice between those two is governed by B, below.<br></p><p>&gt; I believe I can read this behavior into A by inferring &quot;a grammatical<br>&gt; phrase including [the base name and] the first argument&quot; but I want to make<br>&gt; sure this is the intent.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt;<br>&gt;&gt;    1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;       primary semantics.  For example,<br>&gt;&gt;       ```<br>&gt;&gt;       x.dismiss(animated: y)<br>&gt;&gt;       ```<br>&gt;&gt;       [more examples needed]<br>&gt;&gt;       Note that parameters with defaults never describe the primary<br>&gt;&gt;       semantics. so are always labeled.<br>&gt;&gt;       ```<br>&gt;&gt;       func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;       func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;       ```<br>&gt;&gt;<br>&gt;&gt;    2. The method is a factory method; such calls should mirror<br>&gt;&gt;       initializers, with no preposition.  For example,<br>&gt;&gt;       ```<br>&gt;&gt;       let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;       let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;       ```<br>&gt;&gt;<br>&gt;<br>&gt; If rule B.2 didn&#39;t exist<br>&gt;<br>&gt; let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;<br>&gt; would still have the first argument labeled by B.1 wouldn&#39;t it? <br></p><p>Yes, but you could have done this grammatically, as <br></p><p>     let y = monitor.makeColorHavingRed(r, green: g, blue: b)<br></p><p>That&#39;s what B2 is designed to prevent.<br></p><p>&gt; (Though without this rule, the guidelines wouldn&#39;t be clear on whether<br>&gt; or not to include prepositions in the argument labels.)<br>&gt;<br>&gt;&gt;<br>&gt;&gt;    3. It is part of a prepositional phrase<br>&gt;&gt;<br>&gt;&gt;      a. The label normally starts with the preposition.<br>&gt;&gt;         For example,<br>&gt;&gt;         ```<br>&gt;&gt;         x.move(from: a, to: b)<br>&gt;&gt;         x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;         ```<br>&gt;&gt;      b. ...unless the preposition would break a very tight association<br>&gt;&gt;         between parameters:<br>&gt;&gt;         ```<br>&gt;&gt;         x.moveTo(x: a, y: b)<br>&gt;&gt;         ```<br>&gt;&gt;         [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;         e.g. Point, in these cases]<br>&gt;&gt;<br>&gt;&gt;<br>&gt; This seems clear and straightforward to apply. The only place where<br>&gt; this isn&#39;t totally clear is when there are multiple prepositions (as<br>&gt; highlighted in Jacob&#39;s response), <br></p><p>Multiple prepositions before the first argument?<br></p><p>&gt; but I think B.3 provides the right level of guidance... much more<br>&gt; detail will start being too many guidelines and special cases.<br></p><p>Thanks!<br>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 10, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Feb 10, 2016, at 18:17, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Wed Feb 10 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, Feb 9, 2016 at 2:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt;&gt; placement:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt;&gt; working with for first argument labels:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt; <br>&gt;&gt; I assume that A is intended to cover:<br>&gt;&gt; <br>&gt;&gt; a.addObserver(b) // yes<br>&gt;&gt; a.add(observer: b) // no<br>&gt; <br>&gt; I don&#39;t know what you mean by &quot;cover.&quot; It isn&#39;t intended to assign the<br>&gt; &quot;yes/no&quot; decision to those; they both form (the same) grammatical phrase<br>&gt; at the call site.  The choice between those two is governed by B, below.<br></p><p>By cover I meant assign the &quot;yes/no&quot; decision. So because the first argument is part of the primary semantics, it doesn&#39;t get an argument label (per B.1) and the word observer needs to be in the base name so as not to change the semantic meaning.<br></p><p>&gt; <br>&gt;&gt; I believe I can read this behavior into A by inferring &quot;a grammatical<br>&gt;&gt; phrase including [the base name and] the first argument&quot; but I want to make<br>&gt;&gt; sure this is the intent.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      [more examples needed]<br>&gt;&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      ```<br>&gt;&gt; <br>&gt;&gt; If rule B.2 didn&#39;t exist<br>&gt;&gt; <br>&gt;&gt; let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt; <br>&gt;&gt; would still have the first argument labeled by B.1 wouldn&#39;t it?<br>&gt; <br>&gt; Yes, but you could have done this grammatically, as <br>&gt; <br>&gt;     let y = monitor.makeColorHavingRed(r, green: g, blue: b)<br>&gt; <br>&gt; That&#39;s what B2 is designed to prevent.<br>&gt; <br>&gt;&gt; (Though without this rule, the guidelines wouldn&#39;t be clear on whether<br>&gt;&gt; or not to include prepositions in the argument labels.)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a. The label normally starts with the preposition.<br>&gt;&gt;&gt;        For example,<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;&gt;        between parameters:<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt; This seems clear and straightforward to apply. The only place where<br>&gt;&gt; this isn&#39;t totally clear is when there are multiple prepositions (as<br>&gt;&gt; highlighted in Jacob&#39;s response),<br>&gt; <br>&gt; Multiple prepositions before the first argument?<br></p><p>Yes, before and including the first argument label. For example (from Jacob&#39;s response):<br></p><p>comparePositionInDecodeOrderWithPosition(of cursor: AVSampleCursor) -&gt; ComparisonResult<br></p><p>Jacob suggests spelling it:<br></p><p>comparePositionInDecodeOrder(withPositionOf cursor: AVSampleCursor) -&gt; ComparisonResult<br></p><p>I agree that Jacob&#39;s spelling is better, but not enough better to justify additional guidelines about prepositions.<br></p><p>&gt; <br>&gt;&gt; but I think B.3 provides the right level of guidance... much more<br>&gt;&gt; detail will start being too many guidelines and special cases.<br>&gt; <br>&gt; Thanks!<br>&gt; -- <br>&gt; -Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>February 10, 2016 at 06:00:00pm</p></header><div class="content"><p>On Wed, Feb 10, 2016 at 6:05 PM, Matthew Judge via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; Multiple prepositions before the first argument?<br>&gt;<br>&gt; Yes, before and including the first argument label. For example (from<br>&gt; Jacob&#39;s response):<br>&gt;<br>&gt; comparePositionInDecodeOrderWithPosition(of cursor: AVSampleCursor) -&gt;<br>&gt; ComparisonResult<br>&gt;<br>&gt; Jacob suggests spelling it:<br>&gt;<br>&gt; comparePositionInDecodeOrder(withPositionOf cursor: AVSampleCursor) -&gt;<br>&gt; ComparisonResult<br>&gt;<br>&gt; I agree that Jacob&#39;s spelling is better, but not enough better to justify<br>&gt; additional guidelines about prepositions.<br>&gt;<br>&gt;<br>I don&#39;t know enough about linguistics to express this properly, but I<br>suspect there&#39;s something to be said about the &quot;verb phrase&quot; being the part<br>that comes before the paren. To me,<br>&quot;comparePositionInDecodeOrderWithPosition(of:)&quot; is confusing because there<br>is a noun &quot;Position&quot; immediately preceding the parenthesis, which might<br>indicate that the argument should be a position, but in reality the most<br>meaningful part of the method name is the verb, &quot;compare&quot;.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160210/fd80f6a5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, Feb 10, 2016 at 9:05 PM, Matthew Judge &lt;matthew.judge at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; &gt; On Feb 10, 2016, at 18:17, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; on Wed Feb 10 2016, Matthew Judge &lt;matthew.judge-AT-gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Tue, Feb 9, 2016 at 2:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Hi everybody,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Having looked at some examples, the API guidelines working group<br>&gt; members<br>&gt; &gt;&gt;&gt; that were present this morning agreed we really want prepositions<br>&gt; inside<br>&gt; &gt;&gt;&gt; the parentheses of method calls.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; &gt;&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt; &gt;&gt;&gt; placement:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; &gt;&gt;&gt; working with for first argument labels:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt; &gt;&gt;&gt;   describing the primary semantics at the call site.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I assume that A is intended to cover:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; a.addObserver(b) // yes<br>&gt; &gt;&gt; a.add(observer: b) // no<br>&gt; &gt;<br>&gt; &gt; I don&#39;t know what you mean by &quot;cover.&quot; It isn&#39;t intended to assign the<br>&gt; &gt; &quot;yes/no&quot; decision to those; they both form (the same) grammatical phrase<br>&gt; &gt; at the call site.  The choice between those two is governed by B, below.<br>&gt;<br>&gt; By cover I meant assign the &quot;yes/no&quot; decision. So because the first<br>&gt; argument is part of the primary semantics, it doesn&#39;t get an argument label<br>&gt; (per B.1) and the word observer needs to be in the base name so as not to<br>&gt; change the semantic meaning.<br>&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; I believe I can read this behavior into A by inferring &quot;a grammatical<br>&gt; &gt;&gt; phrase including [the base name and] the first argument&quot; but I want to<br>&gt; make<br>&gt; &gt;&gt; sure this is the intent.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; B. The first argument gets a label when and only when:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt; &gt;&gt;&gt;      primary semantics.  For example,<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;&gt;      x.dismiss(animated: y)<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;&gt;      [more examples needed]<br>&gt; &gt;&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt; &gt;&gt;&gt;      semantics. so are always labeled.<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt; &gt;&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt; &gt;&gt;&gt;      initializers, with no preposition.  For example,<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt; &gt;&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt; &gt;&gt;&gt;      ```<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If rule B.2 didn&#39;t exist<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; would still have the first argument labeled by B.1 wouldn&#39;t it?<br>&gt; &gt;<br>&gt; &gt; Yes, but you could have done this grammatically, as<br>&gt; &gt;<br>&gt; &gt;     let y = monitor.makeColorHavingRed(r, green: g, blue: b)<br>&gt; &gt;<br>&gt; &gt; That&#39;s what B2 is designed to prevent.<br>&gt; &gt;<br>&gt; &gt;&gt; (Though without this rule, the guidelines wouldn&#39;t be clear on whether<br>&gt; &gt;&gt; or not to include prepositions in the argument labels.)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;   3. It is part of a prepositional phrase<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     a. The label normally starts with the preposition.<br>&gt; &gt;&gt;&gt;        For example,<br>&gt; &gt;&gt;&gt;        ```<br>&gt; &gt;&gt;&gt;        x.move(from: a, to: b)<br>&gt; &gt;&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt; &gt;&gt;&gt;        ```<br>&gt; &gt;&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt; &gt;&gt;&gt;        between parameters:<br>&gt; &gt;&gt;&gt;        ```<br>&gt; &gt;&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt; &gt;&gt;&gt;        ```<br>&gt; &gt;&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt; &gt;&gt;&gt;        e.g. Point, in these cases]<br>&gt; &gt;&gt; This seems clear and straightforward to apply. The only place where<br>&gt; &gt;&gt; this isn&#39;t totally clear is when there are multiple prepositions (as<br>&gt; &gt;&gt; highlighted in Jacob&#39;s response),<br>&gt; &gt;<br>&gt; &gt; Multiple prepositions before the first argument?<br>&gt;<br>&gt; Yes, before and including the first argument label. For example (from<br>&gt; Jacob&#39;s response):<br>&gt;<br>&gt; comparePositionInDecodeOrderWithPosition(of cursor: AVSampleCursor) -&gt;<br>&gt; ComparisonResult<br>&gt;<br>&gt; Jacob suggests spelling it:<br>&gt;<br>&gt; comparePositionInDecodeOrder(withPositionOf cursor: AVSampleCursor) -&gt;<br>&gt; ComparisonResult<br>&gt;<br>&gt; I agree that Jacob&#39;s spelling is better, but not enough better to justify<br>&gt; additional guidelines about prepositions.<br>&gt;<br></p><p>To clarify/be precise, the guidelines as written are clear on how to treat<br>this: put the prepositional phrase completed by the first argument in the<br>argument label (unless B.3.b applies).<br></p><p>Where the ambiguity arises  is in deciding whether the first<br>argument completes the prepositional phrase &quot;of&quot; or &quot;withPositionOf&quot; (or<br>&quot;inDecodeOrderWithPositionOf&quot;).<br></p><p><br>&gt;<br>&gt; &gt;<br>&gt; &gt;&gt; but I think B.3 provides the right level of guidance... much more<br>&gt; &gt;&gt; detail will start being too many guidelines and special cases.<br>&gt; &gt;<br>&gt; &gt; Thanks!<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/02ae7707/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 11, 2016 at 12:00:00am</p></header><div class="content"><p>FWIW, I think these new guidelines strike a very nice balance between all of the competing concerns. The result of applying them to some of my own code could best be described as “different but not unpleasant” ;-)<br></p><p>In looking over the diffs, one nice result I didn’t expect is that moving the prepositional phrases into the first argument label seems to increase the speed with which I absorb the general intent of a function -- the “at a glance” understanding -- by moving a “detail” (important as it might be) into the parameter list. (The split prepositional phrases had the opposite effect for me.)<br></p><p>—CK<br></p><p>&gt; On Feb 9, 2016, at 11:18 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt; <br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt; <br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt; <br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;   describing the primary semantics at the call site.<br>&gt; <br>&gt; B. The first argument gets a label when and only when:<br>&gt; <br>&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;      primary semantics.  For example,<br>&gt;      ```<br>&gt;      x.dismiss(animated: y)<br>&gt;      ```<br>&gt;      [more examples needed]<br>&gt;      Note that parameters with defaults never describe the primary<br>&gt;      semantics. so are always labeled.<br>&gt;      ```<br>&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;      ```<br>&gt; <br>&gt;   2. The method is a factory method; such calls should mirror<br>&gt;      initializers, with no preposition.  For example,<br>&gt;      ```<br>&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;      ```<br>&gt; <br>&gt;   3. It is part of a prepositional phrase<br>&gt; <br>&gt;     a. The label normally starts with the preposition. <br>&gt;        For example, <br>&gt;        ```<br>&gt;        x.move(from: a, to: b)<br>&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;        ```<br>&gt;     b. ...unless the preposition would break a very tight association<br>&gt;        between parameters:<br>&gt;        ```<br>&gt;        x.moveTo(x: a, y: b)<br>&gt;        ```<br>&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;        e.g. Point, in these cases]<br>&gt; <br>&gt; <br>&gt; <br>&gt; Feedback most welcome, of course.<br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br></p><p>I find that… surprising.<br></p><p>Between these two (sorry to repeat the same example again):<br></p><p>func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br></p><p>#1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br></p><p>As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br></p><p>Another reason I don’t like this, say we have:<br></p><p>	a.tracks(withMediaType: b, composer: c)<br></p><p>This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br></p><p>	a.tracksWith(mediaType: b, composer: c)<br></p><p>Didn’t have that problem.<br></p><p>I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br></p><p>	a.tracks(withMediaType: b, andComposer: c)<br></p><p>To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br></p><p>	a.tracksWith(mediaType: b, composer: c)<br></p><p>Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br></p><p>So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br></p><p>Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br></p><p><br>— Radek<br></p><p>&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt; <br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt; <br>&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt; <br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt; <br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;   describing the primary semantics at the call site.<br>&gt; <br>&gt; B. The first argument gets a label when and only when:<br>&gt; <br>&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;      primary semantics.  For example,<br>&gt;      ```<br>&gt;      x.dismiss(animated: y)<br>&gt;      ```<br>&gt;      [more examples needed]<br>&gt;      Note that parameters with defaults never describe the primary<br>&gt;      semantics. so are always labeled.<br>&gt;      ```<br>&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;      ```<br>&gt; <br>&gt;   2. The method is a factory method; such calls should mirror<br>&gt;      initializers, with no preposition.  For example,<br>&gt;      ```<br>&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;      ```<br>&gt; <br>&gt;   3. It is part of a prepositional phrase<br>&gt; <br>&gt;     a. The label normally starts with the preposition. <br>&gt;        For example, <br>&gt;        ```<br>&gt;        x.move(from: a, to: b)<br>&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;        ```<br>&gt;     b. ...unless the preposition would break a very tight association<br>&gt;        between parameters:<br>&gt;        ```<br>&gt;        x.moveTo(x: a, y: b)<br>&gt;        ```<br>&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;        e.g. Point, in these cases]<br>&gt; <br>&gt; <br>&gt; <br>&gt; Feedback most welcome, of course.<br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/791783e1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>Wouldn&#39;t rule 3b &quot;unless the preposition would break a very tight association between parameters&quot; apply, resulting in<br></p><p>a.tracksWith(mediaType: b, composer: c)<br></p><p>This would not be applicable to the unary variant, though...<br></p><p>-Thorsten <br></p><p>&gt; Am 11.02.2016 um 11:33 schrieb Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; Hi everybody,<br>&gt;&gt; <br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt; <br>&gt; I find that… surprising.<br>&gt; <br>&gt; Between these two (sorry to repeat the same example again):<br>&gt; <br>&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; <br>&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt; <br>&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt; <br>&gt; Another reason I don’t like this, say we have:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt; <br>&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Didn’t have that problem.<br>&gt; <br>&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt; <br>&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt; <br>&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt; <br>&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt; <br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi everybody,<br>&gt;&gt; <br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt;&gt; <br>&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt; placement:<br>&gt;&gt; <br>&gt;&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split<br>&gt;&gt; <br>&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt; working with for first argument labels:<br>&gt;&gt; <br>&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt; <br>&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt; <br>&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;      ```<br>&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;      ```<br>&gt;&gt;      [more examples needed]<br>&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;      ```<br>&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;      ```<br>&gt;&gt; <br>&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;      ```<br>&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;      ```<br>&gt;&gt; <br>&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt; <br>&gt;&gt;     a. The label normally starts with the preposition. <br>&gt;&gt;        For example, <br>&gt;&gt;        ```<br>&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;        ```<br>&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;        between parameters:<br>&gt;&gt;        ```<br>&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;        ```<br>&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Feedback most welcome, of course.<br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/dd4866ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Wouldn&#39;t rule 3b &quot;unless the preposition would break a very tight association between parameters&quot; apply, resulting in<br>&gt; <br>&gt; a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; This would not be applicable to the unary variant, though…<br></p><p>Then we’re inconsistent between<br></p><p>a.tracksWith(mediaType: b, composer: c)<br></p><p>and<br></p><p>a.tracks(withMediaType: b)<br></p><p>which doesn’t seem like a good thing.<br></p><p>— Radek<br></p><p>&gt; On 11 Feb 2016, at 11:40, Thorsten Seitz &lt;tseitz42 at icloud.com&gt; wrote:<br>&gt; <br>&gt; Wouldn&#39;t rule 3b &quot;unless the preposition would break a very tight association between parameters&quot; apply, resulting in<br>&gt; <br>&gt; a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; This would not be applicable to the unary variant, though...<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt; Am 11.02.2016 um 11:33 schrieb Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt; <br>&gt;&gt; I find that… surprising.<br>&gt;&gt; <br>&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt; <br>&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; <br>&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt; <br>&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt;&gt; <br>&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Didn’t have that problem.<br>&gt;&gt; <br>&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt; <br>&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt; <br>&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt;&gt; <br>&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt;&gt; placement:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt;&gt; working with for first argument labels:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      [more examples needed]<br>&gt;&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;&gt;      ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     a. The label normally starts with the preposition. <br>&gt;&gt;&gt;        For example, <br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;&gt;        between parameters:<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;&gt;        ```<br>&gt;&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feedback most welcome, of course.<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/c5e25c4a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 11, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hi everybody,<br>&gt;&gt; <br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt; <br>&gt; I find that… surprising.<br>&gt; <br>&gt; Between these two (sorry to repeat the same example again):<br>&gt; <br>&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br></p><p>I think this one particular function is possibly the worst case in the entire API. Neither “track” nor “trackWith” is a particularly good function name. But as I mentioned in a previous post, I think, for many of the Foundation functions, moving the prepositional phrase into the argument label actual aids clarity slightly. I was surprised that I ended up liking it, but I do.<br></p><p>&gt; <br>&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt; <br>&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt; <br>&gt; Another reason I don’t like this, say we have:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt; <br>&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t.<br></p><p>I sympathize with this. My attitude about it, though, is that we would normally only say “with” before the first item in a list, and dropping the “and” from before the final item is a fairly minor offense against the English language. I personally don’t think clarity is really harmed. It might help to add specific guidance that using “and” in these cases is discouraged.<br></p><p>—CK<br></p><p>&gt; The previous version:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Didn’t have that problem.<br>&gt; <br>&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt; <br>&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt; <br>&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt; <br>&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt; <br>&gt; <br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 09 Feb 2016, at 20:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Hi everybody,<br>&gt;&gt; <br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt;&gt; <br>&gt;&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt;&gt; heuristics but overall we feel very good about the preposition<br>&gt;&gt; placement:<br>&gt;&gt; <br>&gt;&gt;  https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split&gt;<br>&gt;&gt; <br>&gt;&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt;&gt; working with for first argument labels:<br>&gt;&gt; <br>&gt;&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;&gt;   describing the primary semantics at the call site.<br>&gt;&gt; <br>&gt;&gt; B. The first argument gets a label when and only when:<br>&gt;&gt; <br>&gt;&gt;   1. It does not form part of a grammatical phrase describing the<br>&gt;&gt;      primary semantics.  For example,<br>&gt;&gt;      ```<br>&gt;&gt;      x.dismiss(animated: y)<br>&gt;&gt;      ```<br>&gt;&gt;      [more examples needed]<br>&gt;&gt;      Note that parameters with defaults never describe the primary<br>&gt;&gt;      semantics. so are always labeled.<br>&gt;&gt;      ```<br>&gt;&gt;      func invert(options options: SomeOptionSet = []) // yes<br>&gt;&gt;      func invert(_ options: SomeOptionSet = [])       // no<br>&gt;&gt;      ```<br>&gt;&gt; <br>&gt;&gt;   2. The method is a factory method; such calls should mirror<br>&gt;&gt;      initializers, with no preposition.  For example,<br>&gt;&gt;      ```<br>&gt;&gt;      let x = UIColor(red: r, green: g, blue: b)<br>&gt;&gt;      let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;&gt;      ```<br>&gt;&gt; <br>&gt;&gt;   3. It is part of a prepositional phrase<br>&gt;&gt; <br>&gt;&gt;     a. The label normally starts with the preposition. <br>&gt;&gt;        For example, <br>&gt;&gt;        ```<br>&gt;&gt;        x.move(from: a, to: b)<br>&gt;&gt;        x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;&gt;        ```<br>&gt;&gt;     b. ...unless the preposition would break a very tight association<br>&gt;&gt;        between parameters:<br>&gt;&gt;        ```<br>&gt;&gt;        x.moveTo(x: a, y: b)<br>&gt;&gt;        ```<br>&gt;&gt;        [encourage grouping parameters into higher-level concepts,<br>&gt;&gt;        e.g. Point, in these cases]<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Feedback most welcome, of course.<br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/2e1612d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 11, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt; <br>&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; <br>&gt; I think this one particular function is possibly the worst case in the entire API. Neither “track” nor “trackWith” is a particularly good function name. But as I mentioned in a previous post, I think, for many of the Foundation functions, moving the prepositional phrase into the argument label actual aids clarity slightly. I was surprised that I ended up liking it, but I do.<br></p><p>Looking at the fourth function in the diff and saying &quot;I think this is probably the worst API in the frameworks&quot; is a bit like looking at Jupiter and saying &quot;I think this is probably the biggest planet in the universe&quot;. With such a small sample out of such a large set, it&#39;s far more likely that APIs with the defects seen here are *common*.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 1:51 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; <br>&gt;&gt; I think this one particular function is possibly the worst case in the entire API. Neither “track” nor “trackWith” is a particularly good function name. But as I mentioned in a previous post, I think, for many of the Foundation functions, moving the prepositional phrase into the argument label actual aids clarity slightly. I was surprised that I ended up liking it, but I do.<br>&gt; <br>&gt; Looking at the fourth function in the diff and saying &quot;I think this is probably the worst API in the frameworks&quot; is a bit like looking at Jupiter and saying &quot;I think this is probably the biggest planet in the universe&quot;. With such a small sample out of such a large set, it&#39;s far more likely that APIs with the defects seen here are *common*.<br></p><p>I did in fact scan through large portions of the the Foundation universe before coming to that conclusion. :-) One problem with both “track” and “trackWith” is that track can be either a noun or a verb in either case. We’ve been using this function as an exemplar right from the start, but it probably isn’t a great one.<br></p><p>Those who feel there are a lot of problematic function names after the latest guideline changes should certainly collate a list.<br></p><p>—CK<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 11 Feb 2016, at 23:18, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 1:51 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think this one particular function is possibly the worst case in the entire API. Neither “track” nor “trackWith” is a particularly good function name. But as I mentioned in a previous post, I think, for many of the Foundation functions, moving the prepositional phrase into the argument label actual aids clarity slightly. I was surprised that I ended up liking it, but I do.<br>&gt;&gt; <br>&gt;&gt; Looking at the fourth function in the diff and saying &quot;I think this is probably the worst API in the frameworks&quot; is a bit like looking at Jupiter and saying &quot;I think this is probably the biggest planet in the universe&quot;. With such a small sample out of such a large set, it&#39;s far more likely that APIs with the defects seen here are *common*.<br>&gt; <br>&gt; I did in fact scan through large portions of the the Foundation universe before coming to that conclusion. :-) One problem with both “track” and “trackWith” is that track can be either a noun or a verb in either case. We’ve been using this function as an exemplar right from the start, but it probably isn’t a great one.<br>&gt; <br>&gt; Those who feel there are a lot of problematic function names after the latest guideline changes should certainly collate a list.<br>&gt; <br>&gt; —CK<br></p><p><br>Ha, true, being both a noun and a verb doesn’t help. Still, it’s not that uncommon — this might be a particularly tricky API, and I tend to agree — but mostly it’s an issue of how initializer/getter-like are named. There’s _a lot_ of method names that are just nouns — which is a large part of the “prepositions being useful” problem.<br></p><p>— Radek<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 2:33 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>[snip]<br>&gt; mostly it’s an issue of how initializer/getter-like are named. There’s _a lot_ of method names that are just nouns — which is a large part of the “prepositions being useful” problem.<br></p><p>I personally don’t have a problem with get… and set… method names, but I doubt that would be popular with the majority.<br></p><p>—CK<br></p><p>&gt; <br>&gt; — Radek<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 12, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On 12 Feb 2016, at 00:13, Charles Kissinger &lt;crk at akkyra.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 2:33 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; [snip]<br>&gt;&gt; mostly it’s an issue of how initializer/getter-like are named. There’s _a lot_ of method names that are just nouns — which is a large part of the “prepositions being useful” problem.<br>&gt; <br>&gt; I personally don’t have a problem with get… and set… method names, but I doubt that would be popular with the majority.<br></p><p>`get` is usually in the wild as a getter of a property, i.e. taking no parameters. That’s not a problem — you can just skip “get” and there’s generally no confusion. Or just make it a property if possible. The cases I was describing were mostly factories/initializer-like (so I’d suggest “makeFoo” for new APIs), or finder-like (“findTrack”)<br></p><p>— Radek<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Hi everybody,<br>&gt;&gt; <br>&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt; the parentheses of method calls.<br>&gt; <br>&gt; I find that… surprising.<br>&gt; <br>&gt; Between these two (sorry to repeat the same example again):<br>&gt; <br>&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt; <br>&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt; <br>&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt; <br>&gt; Another reason I don’t like this, say we have:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt; <br>&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Didn’t have that problem.<br>&gt; <br>&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt; <br>&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt; <br>&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt; <br>&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt; <br>&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt; <br>&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt; <br>&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br></p><p>A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br></p><p>  (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>  (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>  (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br></p><p>… and we spent a while looking at the diff of Cocoa, here:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/90d7cd65/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt; <br>&gt;&gt; I find that… surprising.<br>&gt;&gt; <br>&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt; <br>&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt; <br>&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt; <br>&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt;&gt; <br>&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Didn’t have that problem.<br>&gt;&gt; <br>&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt; <br>&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt; <br>&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt; <br>&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt; <br>&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt; <br>&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt;&gt; <br>&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt; <br>&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt; <br>&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt; <br>&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6&gt;<br>&gt; <br>&gt; 	- Doug<br></p><p>Thank you.<br></p><p>I’d love to see a response from the team as for my concerns in the post above — I wonder if the arguments were not compelling because I’ve missed something, or simply that the rationale _for_ prepositions inside the parens seemed stronger.<br></p><p>&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br></p><p>A fair point — I guess I just don’t find it as important. Either way, it’s not an English sentence, only English-like.<br></p><p>&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br></p><p><br>Any examples? How was that different from having a preposition just before the paren?<br></p><p>* * *<br></p><p>I’ve given the diff a look again, and I can now see how some methods look really nice after the change, and only some make me slightly uncomfortable.<br></p><p>func value(at index: Int) -&gt; AnyObject!<br>func read(from url: URL, options: ….)<br>class func strokeLine(from point1: Point, to point2: Point)<br>func appendWithOval(in rect: Rect)<br>func sendAction(on mask: Int) -&gt; Int<br>func rows(in rect: Rect) -&gt; NSRange<br>func translateOrigin(to translation: Point)<br></p><p>I actually like those a lot! There’s no need to repeat parameter name/type information in argument label, because it’s going to be obvious in context on call site. But having a preposition, just alone by itself, actually is a nice thing in explaining the first argument and the method semantics.<br></p><p>What I’m not so sure about is when the preposition is glued to a noun. And I guess it’s largely because the noun seems to repeat type information that’s not needed for clarity at call site:<br></p><p>	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>	func cellFrame(forTextContainer textContainer: NSTextContainer, proposedLineFragment lineFrag: Rect, glyphPosition position: Point, characterIndex charIndex: Int) -&gt; Rect<br></p><p>Why are here the nouns not trimmed like in the examples above?<br></p><p>I think:<br></p><p>	accessibilityFrame(for: someRange)<br>	fractionOfDistanceThroughGlyph(for: somePoint)<br>	borderColor(for: edge)<br>	value(for: someTextBlockDimension)<br>	cellFrame(for: someTextContainer, …)<br></p><p>Would also work. No?<br></p><p>In other cases, I’m bothered by the preposition glued to an argument label, because the preposition seems unnecessary:<br></p><p>	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br>	func performClickOnCell(atColumn column: Int, row: Int)<br></p><p>I guess this is mostly a problem with “with”s. The last example is more arguable — what bothers me there more is the inconsistent treatment of argument labels (first label starts with a preposition that conveys semantics for both parameters, and the second label is just a parameter name).<br></p><p>Best,<br>— Radek<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/cba1eb55/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 2:29 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I find that… surprising.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br></p><p>*Personally*, I don’t find the “with” to be compelling in either case. Presumably, it is implying that this is a “find” rather than a “create” operation, but I don’t consider “with” a good way to communicate that… the optional result type and lack of a verb like “add” or “insert” implies “find” stronger than “with”, IMO.<br></p><p>&gt;&gt;&gt; <br>&gt;&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Didn’t have that problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br></p><p>When we were looking through the results, it seemed like cases where the preposition distributed to multiple arguments were fairly rare… rare enough that it didn’t seem worth complicating the rules or giving up the gains we got elsewhere from moving the prepositions inside.<br></p><p>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt; <br>&gt;&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt;&gt; <br>&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt; <br>&gt;&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6&gt;<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt; <br>&gt; Thank you.<br>&gt; <br>&gt; I’d love to see a response from the team as for my concerns in the post above — I wonder if the arguments were not compelling because I’ve missed something, or simply that the rationale _for_ prepositions inside the parens seemed stronger.<br>&gt; <br>&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt; <br>&gt; A fair point — I guess I just don’t find it as important. Either way, it’s not an English sentence, only English-like.<br>&gt; <br>&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt; <br>&gt; <br>&gt; Any examples? How was that different from having a preposition just before the paren?<br></p><p>Here’s a fun set of examples from NSGradient:<br></p><p> -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br> -  func drawIn(rect: Rect, angle: CGFloat)<br> -  func drawIn(path: NSBezierPath, angle: CGFloat)<br> +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br> +  func draw(in rect: Rect, angle: CGFloat)<br> +  func draw(in path: NSBezierPath, angle: CGFloat)<br>    func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br> -  func drawIn(rect: Rect, relativeCenterPosition: Point)<br> -  func drawIn(path: NSBezierPath, relativeCenterPosition: Point)<br> +  func draw(in rect: Rect, relativeCenterPosition: Point)<br> +  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br></p><p><br>&gt; <br>&gt; * * *<br>&gt; <br>&gt; I’ve given the diff a look again, and I can now see how some methods look really nice after the change, and only some make me slightly uncomfortable.<br>&gt; <br>&gt; func value(at index: Int) -&gt; AnyObject!<br>&gt; func read(from url: URL, options: ….)<br>&gt; class func strokeLine(from point1: Point, to point2: Point)<br>&gt; func appendWithOval(in rect: Rect)<br>&gt; func sendAction(on mask: Int) -&gt; Int<br>&gt; func rows(in rect: Rect) -&gt; NSRange<br>&gt; func translateOrigin(to translation: Point)<br>&gt; <br>&gt; I actually like those a lot! There’s no need to repeat parameter name/type information in argument label, because it’s going to be obvious in context on call site. But having a preposition, just alone by itself, actually is a nice thing in explaining the first argument and the method semantics.<br>&gt; <br>&gt; What I’m not so sure about is when the preposition is glued to a noun. And I guess it’s largely because the noun seems to repeat type information that’s not needed for clarity at call site:<br>&gt; <br>&gt; 	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>&gt; 	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>&gt; 	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>&gt; 	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>&gt; 	func cellFrame(forTextContainer textContainer: NSTextContainer, proposedLineFragment lineFrag: Rect, glyphPosition position: Point, characterIndex charIndex: Int) -&gt; Rect<br>&gt; <br>&gt; Why are here the nouns not trimmed like in the examples above?<br></p><p>I had a ban on creating “vacuous” argument labels from long ago. It didn’t kick in much before, but I removed it in the follow-up commit to what you’re looking at:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164<br></p><p>Essentially, all of those examples above end up with the argument label “for”.<br></p><p>&gt; <br>&gt; I think:<br>&gt; <br>&gt; 	accessibilityFrame(for: someRange)<br>&gt; 	fractionOfDistanceThroughGlyph(for: somePoint)<br>&gt; 	borderColor(for: edge)<br>&gt; 	value(for: someTextBlockDimension)<br>&gt; 	cellFrame(for: someTextContainer, …)<br>&gt; <br>&gt; Would also work. No?<br></p><p>Yep, the next commit ;)<br></p><p>&gt; <br>&gt; In other cases, I’m bothered by the preposition glued to an argument label, because the preposition seems unnecessary:<br>&gt; <br>&gt; 	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br></p><p>Here, I feel like we need *a* label because we aren’t copying the first argument… we’re copying “self” and using the first argument. The second commit I referenced above would make this just “with”; I, personally, would prefer “coder” or something meaningful like “into”.<br></p><p>&gt; 	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>&gt; 	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>&gt; 	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br></p><p>The “with”s don’t seem to add anything here.<br></p><p>&gt; 	func performClickOnCell(atColumn column: Int, row: Int)<br>&gt; <br>&gt; I guess this is mostly a problem with “with”s. The last example is more arguable — what bothers me there more is the inconsistent treatment of argument labels (first label starts with a preposition that conveys semantics for both parameters, and the second label is just a parameter name).<br></p><p>Here, the “at” distributes, but it’s also not needed for clarity. We’d be find with either<br></p><p>	func performClickOnCellAt(column: Int, row: Int)<br></p><p>or <br></p><p>	func performClickOnCell(column: Int, row: Int)<br></p><p><br>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/43f1f69e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 18:19, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 2:29 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I find that… surprising.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt; <br>&gt; *Personally*, I don’t find the “with” to be compelling in either case. Presumably, it is implying that this is a “find” rather than a “create” operation, but I don’t consider “with” a good way to communicate that… the optional result type and lack of a verb like “add” or “insert” implies “find” stronger than “with”, IMO.<br>&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Didn’t have that problem.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt; <br>&gt; When we were looking through the results, it seemed like cases where the preposition distributed to multiple arguments were fairly rare… rare enough that it didn’t seem worth complicating the rules or giving up the gains we got elsewhere from moving the prepositions inside.<br>&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; Thank you.<br>&gt;&gt; <br>&gt;&gt; I’d love to see a response from the team as for my concerns in the post above — I wonder if the arguments were not compelling because I’ve missed something, or simply that the rationale _for_ prepositions inside the parens seemed stronger.<br>&gt;&gt; <br>&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt; <br>&gt;&gt; A fair point — I guess I just don’t find it as important. Either way, it’s not an English sentence, only English-like.<br>&gt;&gt; <br>&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Any examples? How was that different from having a preposition just before the paren?<br>&gt; <br>&gt; Here’s a fun set of examples from NSGradient:<br>&gt; <br>&gt;  -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;  -  func drawIn(rect: Rect, angle: CGFloat)<br>&gt;  -  func drawIn(path: NSBezierPath, angle: CGFloat)<br>&gt;  +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;  +  func draw(in rect: Rect, angle: CGFloat)<br>&gt;  +  func draw(in path: NSBezierPath, angle: CGFloat)<br>&gt;     func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br></p><p>Why isn&#39;t this:<br>func draw(fromCenter startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br></p><p><br>&gt;  -  func drawIn(rect: Rect, relativeCenterPosition: Point)<br>&gt;  -  func drawIn(path: NSBezierPath, relativeCenterPosition: Point)<br>&gt;  +  func draw(in rect: Rect, relativeCenterPosition: Point)<br>&gt;  +  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; * * *<br>&gt;&gt; <br>&gt;&gt; I’ve given the diff a look again, and I can now see how some methods look really nice after the change, and only some make me slightly uncomfortable.<br>&gt;&gt; <br>&gt;&gt; func value(at index: Int) -&gt; AnyObject!<br>&gt;&gt; func read(from url: URL, options: ….)<br>&gt;&gt; class func strokeLine(from point1: Point, to point2: Point)<br>&gt;&gt; func appendWithOval(in rect: Rect)<br>&gt;&gt; func sendAction(on mask: Int) -&gt; Int<br>&gt;&gt; func rows(in rect: Rect) -&gt; NSRange<br>&gt;&gt; func translateOrigin(to translation: Point)<br>&gt;&gt; <br>&gt;&gt; I actually like those a lot! There’s no need to repeat parameter name/type information in argument label, because it’s going to be obvious in context on call site. But having a preposition, just alone by itself, actually is a nice thing in explaining the first argument and the method semantics.<br>&gt;&gt; <br>&gt;&gt; What I’m not so sure about is when the preposition is glued to a noun. And I guess it’s largely because the noun seems to repeat type information that’s not needed for clarity at call site:<br>&gt;&gt; <br>&gt;&gt; 	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>&gt;&gt; 	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>&gt;&gt; 	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>&gt;&gt; 	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>&gt;&gt; 	func cellFrame(forTextContainer textContainer: NSTextContainer, proposedLineFragment lineFrag: Rect, glyphPosition position: Point, characterIndex charIndex: Int) -&gt; Rect<br>&gt;&gt; <br>&gt;&gt; Why are here the nouns not trimmed like in the examples above?<br>&gt; <br>&gt; I had a ban on creating “vacuous” argument labels from long ago. It didn’t kick in much before, but I removed it in the follow-up commit to what you’re looking at:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164<br>&gt; <br>&gt; Essentially, all of those examples above end up with the argument label “for”.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I think:<br>&gt;&gt; <br>&gt;&gt; 	accessibilityFrame(for: someRange)<br>&gt;&gt; 	fractionOfDistanceThroughGlyph(for: somePoint)<br>&gt;&gt; 	borderColor(for: edge)<br>&gt;&gt; 	value(for: someTextBlockDimension)<br>&gt;&gt; 	cellFrame(for: someTextContainer, …)<br>&gt;&gt; <br>&gt;&gt; Would also work. No?<br>&gt; <br>&gt; Yep, the next commit ;)<br>&gt; <br>&gt;&gt; <br>&gt;&gt; In other cases, I’m bothered by the preposition glued to an argument label, because the preposition seems unnecessary:<br>&gt;&gt; <br>&gt;&gt; 	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>&gt; <br>&gt; Here, I feel like we need *a* label because we aren’t copying the first argument… we’re copying “self” and using the first argument. The second commit I referenced above would make this just “with”; I, personally, would prefer “coder” or something meaningful like “into”.<br>&gt; <br>&gt;&gt; 	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>&gt;&gt; 	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>&gt;&gt; 	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br>&gt; <br>&gt; The “with”s don’t seem to add anything here.<br>&gt; <br>&gt;&gt; 	func performClickOnCell(atColumn column: Int, row: Int)<br>&gt;&gt; <br>&gt;&gt; I guess this is mostly a problem with “with”s. The last example is more arguable — what bothers me there more is the inconsistent treatment of argument labels (first label starts with a preposition that conveys semantics for both parameters, and the second label is just a parameter name).<br>&gt; <br>&gt; Here, the “at” distributes, but it’s also not needed for clarity. We’d be find with either<br>&gt; <br>&gt; 	func performClickOnCellAt(column: Int, row: Int)<br>&gt; <br>&gt; or <br>&gt; <br>&gt; 	func performClickOnCell(column: Int, row: Int)<br>&gt; <br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/d891a91e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>February 11, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 11, 2016, at 5:50 PM, Matthew Judge &lt;matthew.judge at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Feb 11, 2016, at 18:19, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here’s a fun set of examples from NSGradient:<br>&gt;&gt; <br>&gt;&gt;  -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;  -  func drawIn(rect: Rect, angle: CGFloat)<br>&gt;&gt;  -  func drawIn(path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;  +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;  +  func draw(in rect: Rect, angle: CGFloat)<br>&gt;&gt;  +  func draw(in path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;     func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br>&gt; <br>&gt; Why isn&#39;t this:<br>&gt; func draw(fromCenter startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br></p><p><br>Huh, I’m not sure why it’s showing up as drawFromCenter in that paste. If I go to the source at:<br></p><p>	https://github.com/apple/swift-3-api-guidelines-review/blob/swift-3/Platforms/OSX/AppKit/NSGradient.swift<br></p><p>there’s a big “draw” family that pops out:<br></p><p>  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>  func draw(in rect: Rect, angle: CGFloat)<br>  func draw(in path: NSBezierPath, angle: CGFloat)<br>  func draw(fromCenter startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br>  func draw(in rect: Rect, relativeCenterPosition: Point)<br>  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/d5244b3d/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On 12 Feb 2016, at 00:19, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 11, 2016, at 2:29 PM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I find that… surprising.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt; <br>&gt; *Personally*, I don’t find the “with” to be compelling in either case. Presumably, it is implying that this is a “find” rather than a “create” operation, but I don’t consider “with” a good way to communicate that… the optional result type and lack of a verb like “add” or “insert” implies “find” stronger than “with”, IMO.<br></p><p>I agree, though I thought it was better than nothing.<br></p><p>&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Didn’t have that problem.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt; <br>&gt; When we were looking through the results, it seemed like cases where the preposition distributed to multiple arguments were fairly rare… rare enough that it didn’t seem worth complicating the rules or giving up the gains we got elsewhere from moving the prepositions inside.<br>&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; Thank you.<br>&gt;&gt; <br>&gt;&gt; I’d love to see a response from the team as for my concerns in the post above — I wonder if the arguments were not compelling because I’ve missed something, or simply that the rationale _for_ prepositions inside the parens seemed stronger.<br>&gt;&gt; <br>&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt; <br>&gt;&gt; A fair point — I guess I just don’t find it as important. Either way, it’s not an English sentence, only English-like.<br>&gt;&gt; <br>&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Any examples? How was that different from having a preposition just before the paren?<br>&gt; <br>&gt; Here’s a fun set of examples from NSGradient:<br>&gt; <br>&gt;  -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;  -  func drawIn(rect: Rect, angle: CGFloat)<br>&gt;  -  func drawIn(path: NSBezierPath, angle: CGFloat)<br>&gt;  +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;  +  func draw(in rect: Rect, angle: CGFloat)<br>&gt;  +  func draw(in path: NSBezierPath, angle: CGFloat)<br>&gt;     func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br>&gt;  -  func drawIn(rect: Rect, relativeCenterPosition: Point)<br>&gt;  -  func drawIn(path: NSBezierPath, relativeCenterPosition: Point)<br>&gt;  +  func draw(in rect: Rect, relativeCenterPosition: Point)<br>&gt;  +  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br></p><p>Ah, neat. Probably uncommon overall, but I can see the advantage here, yeah.<br></p><p>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; * * *<br>&gt;&gt; <br>&gt;&gt; I’ve given the diff a look again, and I can now see how some methods look really nice after the change, and only some make me slightly uncomfortable.<br>&gt;&gt; <br>&gt;&gt; func value(at index: Int) -&gt; AnyObject!<br>&gt;&gt; func read(from url: URL, options: ….)<br>&gt;&gt; class func strokeLine(from point1: Point, to point2: Point)<br>&gt;&gt; func appendWithOval(in rect: Rect)<br>&gt;&gt; func sendAction(on mask: Int) -&gt; Int<br>&gt;&gt; func rows(in rect: Rect) -&gt; NSRange<br>&gt;&gt; func translateOrigin(to translation: Point)<br>&gt;&gt; <br>&gt;&gt; I actually like those a lot! There’s no need to repeat parameter name/type information in argument label, because it’s going to be obvious in context on call site. But having a preposition, just alone by itself, actually is a nice thing in explaining the first argument and the method semantics.<br>&gt;&gt; <br>&gt;&gt; What I’m not so sure about is when the preposition is glued to a noun. And I guess it’s largely because the noun seems to repeat type information that’s not needed for clarity at call site:<br>&gt;&gt; <br>&gt;&gt; 	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>&gt;&gt; 	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>&gt;&gt; 	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>&gt;&gt; 	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>&gt;&gt; 	func cellFrame(forTextContainer textContainer: NSTextContainer, proposedLineFragment lineFrag: Rect, glyphPosition position: Point, characterIndex charIndex: Int) -&gt; Rect<br>&gt;&gt; <br>&gt;&gt; Why are here the nouns not trimmed like in the examples above?<br>&gt; <br>&gt; I had a ban on creating “vacuous” argument labels from long ago. It didn’t kick in much before, but I removed it in the follow-up commit to what you’re looking at:<br>&gt; <br>&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164&gt;<br>&gt; <br>&gt; Essentially, all of those examples above end up with the argument label “for”.<br></p><p>Ah, nice! That actually helps a lot, and seeing this and other refinements I’m more and more on board with the “prepositions inside parens” idea :)<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; I think:<br>&gt;&gt; <br>&gt;&gt; 	accessibilityFrame(for: someRange)<br>&gt;&gt; 	fractionOfDistanceThroughGlyph(for: somePoint)<br>&gt;&gt; 	borderColor(for: edge)<br>&gt;&gt; 	value(for: someTextBlockDimension)<br>&gt;&gt; 	cellFrame(for: someTextContainer, …)<br>&gt;&gt; <br>&gt;&gt; Would also work. No?<br>&gt; <br>&gt; Yep, the next commit ;)<br>&gt; <br>&gt;&gt; <br>&gt;&gt; In other cases, I’m bothered by the preposition glued to an argument label, because the preposition seems unnecessary:<br>&gt;&gt; <br>&gt;&gt; 	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>&gt; <br>&gt; Here, I feel like we need *a* label because we aren’t copying the first argument… we’re copying “self” and using the first argument. The second commit I referenced above would make this just “with”; I, personally, would prefer “coder” or something meaningful like “into”.<br>&gt; <br>&gt;&gt; 	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>&gt;&gt; 	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>&gt;&gt; 	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br>&gt; <br>&gt; The “with”s don’t seem to add anything here.<br>&gt; <br>&gt;&gt; 	func performClickOnCell(atColumn column: Int, row: Int)<br>&gt;&gt; <br>&gt;&gt; I guess this is mostly a problem with “with”s. The last example is more arguable — what bothers me there more is the inconsistent treatment of argument labels (first label starts with a preposition that conveys semantics for both parameters, and the second label is just a parameter name).<br>&gt; <br>&gt; Here, the “at” distributes, but it’s also not needed for clarity. We’d be find with either<br>&gt; <br>&gt; 	func performClickOnCellAt(column: Int, row: Int)<br>&gt; <br>&gt; or <br>&gt; <br>&gt; 	func performClickOnCell(column: Int, row: Int)<br></p><p>Yep, both seem good to me.<br></p><p>— Radek<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/2e44aa38/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>A few random finds/thoughts:<br></p><p>-  func magnifyToFit(rect: Rect)<br>+  func magnify(toFit rect: Rect)<br></p><p>Intentional? I guess it could be argued either way, but “magnify-to-fit” seems like one phrase.<br></p><p>* * *<br></p><p>Are those guidelines and automatic translations open for further changes and refinement after Swift 3 is released? It will be a *big* change and messing with it further could be painful, but I fear that there’s stuff we might be missing and insights we’ll only have after we start using all this in practice. It would be a shame to freeze it forever if that happens…<br></p><p>* * *<br></p><p>(NSArray)<br>+  func description(withLocale locale: AnyObject?) -&gt; String<br>+  func description(withLocale locale: AnyObject?, indent level: Int) -&gt; String<br></p><p>Another case where `with` doesn’t add anything IMHO and in fact makes things slightly confusing. The description isn’t somehow made *with* the locale, it’s just a variant of the `description` property that takes a locale as an setting.<br></p><p>* * *<br></p><p>-  optional func scrollViewShouldScrollTo(top scrollView: UIScrollView) -&gt; Bool<br>+  optional func scrollViewShouldScroll(toTop scrollView: UIScrollView) -&gt; Bool<br>   @available(iOS 2.0, *)<br>-  optional func scrollViewDidScrollTo(top scrollView: UIScrollView)<br>+  optional func scrollViewDidScroll(toTop scrollView: UIScrollView)<br></p><p>Similar case as “magnify to fit”. the scroll view has nothing to do with “toTop”. It should be:<br></p><p>scrollViewDidScrollToTop(_: UIScrollView)<br></p><p>* * *<br></p><p>I said that in the previous post, but I’ll say it again: looking at the full diff with the refinements applied since the first draft in this thread, I’m really coming around to this proposal. There are still some cases that make me a bit uncomfortable, but it passes the test of “as good as possible, but with fewest results I can’t live with”. So that’s +1 from me ;-)<br></p><p>* * *<br></p><p>PS. If someone wants to see the full diff between the pre-prepositions-inside-parens draft and the latest draft:<br></p><p>curl https://github.com/apple/swift-3-api-guidelines-review/compare/eeca3ac...swift-3.diff | mate<br></p><p>(or your favorite editor of choice. GH doesn’t show the *full* highlighted diff, and unhighlighted diff is hard to read.)<br></p><p>— Radek<br></p><p>&gt; On 13 Feb 2016, at 11:23, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 12 Feb 2016, at 00:19, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 2:29 PM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I find that… surprising.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As far as I understand it, the whole reason to keep “with” etc in many APIs was to make cases like this one clearer. Because “track” as a name doesn’t tell you much. Someone said that having the method name end with “With” creates a sense of suspense, and to me that was precisely what was a good thing about it. It’s not just “track”, it’s a “track with” — ooh, here come the criteria for the track! Having removed “with” from the name itself, we lose, IMHO, the clarity this word was supposed to bring in initializer/getter/finder-like methods. And we still keep the word later inside the parens, but to my eyes it no longer helps clarity, just exists as a vacuous, needless word.<br>&gt;&gt; <br>&gt;&gt; *Personally*, I don’t find the “with” to be compelling in either case. Presumably, it is implying that this is a “find” rather than a “create” operation, but I don’t consider “with” a good way to communicate that… the optional result type and lack of a verb like “add” or “insert” implies “find” stronger than “with”, IMO.<br>&gt; <br>&gt; I agree, though I thought it was better than nothing.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This no longer looks symmetrical across the parameters. First parameter has label “with”, second doesn’t. The previous version:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Didn’t have that problem.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I fear that people will take that as a signal that they should make the whole method, including parameter labels, sound like an English sentence and will start applying needless words like “and”:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To avoid this weird-looking construct where the first parameter has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Doesn’t have this problem, because while the method name part ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So -1 from me on this. Moving prepositions inside parens look like a step back from the Part DEUX Proposal.<br>&gt;&gt; <br>&gt;&gt; When we were looking through the results, it seemed like cases where the preposition distributed to multiple arguments were fairly rare… rare enough that it didn’t seem worth complicating the rules or giving up the gains we got elsewhere from moving the prepositions inside.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt;&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d love to see a response from the team as for my concerns in the post above — I wonder if the arguments were not compelling because I’ve missed something, or simply that the rationale _for_ prepositions inside the parens seemed stronger.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A fair point — I guess I just don’t find it as important. Either way, it’s not an English sentence, only English-like.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any examples? How was that different from having a preposition just before the paren?<br>&gt;&gt; <br>&gt;&gt; Here’s a fun set of examples from NSGradient:<br>&gt;&gt; <br>&gt;&gt;  -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;  -  func drawIn(rect: Rect, angle: CGFloat)<br>&gt;&gt;  -  func drawIn(path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;  +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;  +  func draw(in rect: Rect, angle: CGFloat)<br>&gt;&gt;  +  func draw(in path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;     func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br>&gt;&gt;  -  func drawIn(rect: Rect, relativeCenterPosition: Point)<br>&gt;&gt;  -  func drawIn(path: NSBezierPath, relativeCenterPosition: Point)<br>&gt;&gt;  +  func draw(in rect: Rect, relativeCenterPosition: Point)<br>&gt;&gt;  +  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br>&gt; <br>&gt; Ah, neat. Probably uncommon overall, but I can see the advantage here, yeah.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * * *<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve given the diff a look again, and I can now see how some methods look really nice after the change, and only some make me slightly uncomfortable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func value(at index: Int) -&gt; AnyObject!<br>&gt;&gt;&gt; func read(from url: URL, options: ….)<br>&gt;&gt;&gt; class func strokeLine(from point1: Point, to point2: Point)<br>&gt;&gt;&gt; func appendWithOval(in rect: Rect)<br>&gt;&gt;&gt; func sendAction(on mask: Int) -&gt; Int<br>&gt;&gt;&gt; func rows(in rect: Rect) -&gt; NSRange<br>&gt;&gt;&gt; func translateOrigin(to translation: Point)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I actually like those a lot! There’s no need to repeat parameter name/type information in argument label, because it’s going to be obvious in context on call site. But having a preposition, just alone by itself, actually is a nice thing in explaining the first argument and the method semantics.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What I’m not so sure about is when the preposition is glued to a noun. And I guess it’s largely because the noun seems to repeat type information that’s not needed for clarity at call site:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>&gt;&gt;&gt; 	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>&gt;&gt;&gt; 	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>&gt;&gt;&gt; 	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>&gt;&gt;&gt; 	func cellFrame(forTextContainer textContainer: NSTextContainer, proposedLineFragment lineFrag: Rect, glyphPosition position: Point, characterIndex charIndex: Int) -&gt; Rect<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why are here the nouns not trimmed like in the examples above?<br>&gt;&gt; <br>&gt;&gt; I had a ban on creating “vacuous” argument labels from long ago. It didn’t kick in much before, but I removed it in the follow-up commit to what you’re looking at:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164&gt;<br>&gt;&gt; <br>&gt;&gt; Essentially, all of those examples above end up with the argument label “for”.<br>&gt; <br>&gt; Ah, nice! That actually helps a lot, and seeing this and other refinements I’m more and more on board with the “prepositions inside parens” idea :)<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	accessibilityFrame(for: someRange)<br>&gt;&gt;&gt; 	fractionOfDistanceThroughGlyph(for: somePoint)<br>&gt;&gt;&gt; 	borderColor(for: edge)<br>&gt;&gt;&gt; 	value(for: someTextBlockDimension)<br>&gt;&gt;&gt; 	cellFrame(for: someTextContainer, …)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would also work. No?<br>&gt;&gt; <br>&gt;&gt; Yep, the next commit ;)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In other cases, I’m bothered by the preposition glued to an argument label, because the preposition seems unnecessary:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>&gt;&gt; <br>&gt;&gt; Here, I feel like we need *a* label because we aren’t copying the first argument… we’re copying “self” and using the first argument. The second commit I referenced above would make this just “with”; I, personally, would prefer “coder” or something meaningful like “into”.<br>&gt;&gt; <br>&gt;&gt;&gt; 	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>&gt;&gt;&gt; 	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>&gt;&gt;&gt; 	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br>&gt;&gt; <br>&gt;&gt; The “with”s don’t seem to add anything here.<br>&gt;&gt; <br>&gt;&gt;&gt; 	func performClickOnCell(atColumn column: Int, row: Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I guess this is mostly a problem with “with”s. The last example is more arguable — what bothers me there more is the inconsistent treatment of argument labels (first label starts with a preposition that conveys semantics for both parameters, and the second label is just a parameter name).<br>&gt;&gt; <br>&gt;&gt; Here, the “at” distributes, but it’s also not needed for clarity. We’d be find with either<br>&gt;&gt; <br>&gt;&gt; 	func performClickOnCellAt(column: Int, row: Int)<br>&gt;&gt; <br>&gt;&gt; or <br>&gt;&gt; <br>&gt;&gt; 	func performClickOnCell(column: Int, row: Int)<br>&gt; <br>&gt; Yep, both seem good to me.<br>&gt; <br>&gt; — Radek<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/052063c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February 13, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 13 Feb 2016, at 10:51, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -  func magnifyToFit(rect: Rect)<br>&gt; +  func magnify(toFit rect: Rect)<br>&gt; <br>&gt; Intentional? I guess it could be argued either way, but “magnify-to-fit” seems like one phrase.<br></p><p>I prefer the change; to me “magnify” is the operation, the rectangle just happens to be what controls the result. It makes sense IMO that there could be other magnify operations with different requirements.<br></p><p>&gt; (NSArray)<br>&gt; +  func description(withLocale locale: AnyObject?) -&gt; String<br>&gt; +  func description(withLocale locale: AnyObject?, indent level: Int) -&gt; String<br>&gt; <br>&gt; Another case where `with` doesn’t add anything IMHO and in fact makes things slightly confusing. The description isn’t somehow made *with* the locale, it’s just a variant of the `description` property that takes a locale as an setting.<br></p><p>I suppose in this case withLocale might be clearer as forLocale or withinLocale or something along those lines?<br></p><p>&gt; -  optional func scrollViewShouldScrollTo(top scrollView: UIScrollView) -&gt; Bool<br>&gt; +  optional func scrollViewShouldScroll(toTop scrollView: UIScrollView) -&gt; Bool<br>&gt;    @available(iOS 2.0, *)<br>&gt; -  optional func scrollViewDidScrollTo(top scrollView: UIScrollView)<br>&gt; +  optional func scrollViewDidScroll(toTop scrollView: UIScrollView)<br>&gt; <br>&gt; Similar case as “magnify to fit”. the scroll view has nothing to do with “toTop”. It should be:<br></p><p>I think in this case it’s less clear than magnify, as it’s a bit of a weird pattern to begin with. It depends really on whether you feel that scrollViewShouldScroll is a discrete event that could potentially have different parameters (e.g- toBottom etc.) in which case it’s a good distinction to have. Not nearly as clear to me as magnify though, it’s not a style of callback that I like at all =)<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 13 Feb 2016, at 17:44, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 13 Feb 2016, at 10:51, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -  func magnifyToFit(rect: Rect)<br>&gt;&gt; +  func magnify(toFit rect: Rect)<br>&gt;&gt; <br>&gt;&gt; Intentional? I guess it could be argued either way, but “magnify-to-fit” seems like one phrase.<br>&gt; <br>&gt; I prefer the change; to me “magnify” is the operation, the rectangle just happens to be what controls the result. It makes sense IMO that there could be other magnify operations with different requirements.<br>&gt; <br>&gt;&gt; (NSArray)<br>&gt;&gt; +  func description(withLocale locale: AnyObject?) -&gt; String<br>&gt;&gt; +  func description(withLocale locale: AnyObject?, indent level: Int) -&gt; String<br>&gt;&gt; <br>&gt;&gt; Another case where `with` doesn’t add anything IMHO and in fact makes things slightly confusing. The description isn’t somehow made *with* the locale, it’s just a variant of the `description` property that takes a locale as an setting.<br>&gt; <br>&gt; I suppose in this case withLocale might be clearer as forLocale or withinLocale or something along those lines?<br></p><p>I’d be cool with just ‘locale’, but `forLocale` definitely works far better than `withLocale`.<br></p><p>&gt; <br>&gt;&gt; -  optional func scrollViewShouldScrollTo(top scrollView: UIScrollView) -&gt; Bool<br>&gt;&gt; +  optional func scrollViewShouldScroll(toTop scrollView: UIScrollView) -&gt; Bool<br>&gt;&gt;   @available(iOS 2.0, *)<br>&gt;&gt; -  optional func scrollViewDidScrollTo(top scrollView: UIScrollView)<br>&gt;&gt; +  optional func scrollViewDidScroll(toTop scrollView: UIScrollView)<br>&gt;&gt; <br>&gt;&gt; Similar case as “magnify to fit”. the scroll view has nothing to do with “toTop”. It should be:<br>&gt; <br>&gt; I think in this case it’s less clear than magnify, as it’s a bit of a weird pattern to begin with. It depends really on whether you feel that scrollViewShouldScroll is a discrete event that could potentially have different parameters (e.g- toBottom etc.) in which case it’s a good distinction to have. Not nearly as clear to me as magnify though, it’s not a style of callback that I like at all =)<br></p><p>Yeah I&#39;m not a huge fan of the standard ObjC delegate style either, but I’m not debating that. But `toTop` as a argument label for the UIScrollView makes no sense.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 13, 2016 at 10:00:00am</p></header><div class="content"><p>on Sat Feb 13 2016, Haravikk &lt;swift-evolution-AT-haravikk.me&gt; wrote:<br></p><p>&gt;&gt; On 13 Feb 2016, at 10:51, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -  func magnifyToFit(rect: Rect)<br>&gt;&gt; +  func magnify(toFit rect: Rect)<br>&gt;&gt; <br>&gt;&gt; Intentional? I guess it could be argued either way, but “magnify-to-fit” seems like one phrase.<br>&gt;<br>&gt; I prefer the change; to me “magnify” is the operation, the rectangle<br>&gt; just happens to be what controls the result. It makes sense IMO that<br>&gt; there could be other magnify operations with different requirements.<br>&gt;<br>&gt;&gt; (NSArray)<br>&gt;&gt; +  func description(withLocale locale: AnyObject?) -&gt; String<br>&gt;&gt; +  func description(withLocale locale: AnyObject?, indent level: Int) -&gt; String<br>&gt;&gt; <br>&gt;&gt; Another case where `with` doesn’t add anything IMHO and in fact<br>&gt;&gt; makes things slightly confusing. The description isn’t somehow made<br>&gt;&gt; *with* the locale, it’s just a variant of the `description` property<br>&gt;&gt; that takes a locale as an setting.<br>&gt;<br>&gt; I suppose in this case withLocale might be clearer as forLocale or<br>&gt; withinLocale or something along those lines?<br></p><p>Yes, &quot;for&quot; would be better than &quot;with.&quot;  Whether it&#39;s enough-better than<br>no label at all is unclear to me.<br></p><p>&gt;&gt; -  optional func scrollViewShouldScrollTo(top scrollView: UIScrollView) -&gt; Bool<br>&gt;&gt; +  optional func scrollViewShouldScroll(toTop scrollView: UIScrollView) -&gt; Bool<br>&gt;&gt;    @available(iOS 2.0, *)<br>&gt;&gt; -  optional func scrollViewDidScrollTo(top scrollView: UIScrollView)<br>&gt;&gt; +  optional func scrollViewDidScroll(toTop scrollView: UIScrollView)<br>&gt;&gt; <br>&gt;&gt; Similar case as “magnify to fit”. the scroll view has nothing to do with “toTop”. It should be:<br>&gt;<br>&gt; I think in this case it’s less clear than magnify, as it’s a bit of a<br>&gt; weird pattern to begin with. It depends really on whether you feel<br>&gt; that scrollViewShouldScroll is a discrete event that could potentially<br>&gt; have different parameters (e.g- toBottom etc.) in which case it’s a<br>&gt; good distinction to have. Not nearly as clear to me as magnify though,<br>&gt; it’s not a style of callback that I like at all =)<br></p><p>Yeah, delegates are weird.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 13, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; Yeah, delegates are weird.<br></p><p>Did you ever see this suggestion of mine in the delegate method thread? &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5777&gt; It seems like you&#39;d already concluded that there was no good solution and moved on to other topics, so I&#39;m not sure if you did.<br></p><p>(If you *did* see it and dismissed it, sorry to bother you!)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>on Sat Feb 13 2016, Brent Royal-Gordon &lt;brent-AT-architechies.com&gt; wrote:<br></p><p>&gt;&gt; Yeah, delegates are weird.<br>&gt;<br>&gt; Did you ever see this suggestion of mine in the delegate method<br>&gt; thread?<br>&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/5777&gt; It<br>&gt; seems like you&#39;d already concluded that there was no good solution and<br>&gt; moved on to other topics, so I&#39;m not sure if you did.<br></p><p>I saw it.  I don&#39;t think it&#39;s a foregone conclusion that there&#39;s no good<br>solution to delegate methods, but I do think the problem is a big hairy<br>one that deserves its own proposal.  Having a whole separate set of<br>guidelines to cover delegates would be unfortunate so I hope the<br>eventual solution is something we can do entirely in the importer and<br>brings these APIs into line with the rest of the frameworks.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; I saw it.  I don&#39;t think it&#39;s a foregone conclusion that there&#39;s no good<br>&gt; solution to delegate methods, but I do think the problem is a big hairy<br>&gt; one that deserves its own proposal.  Having a whole separate set of<br>&gt; guidelines to cover delegates would be unfortunate so I hope the<br>&gt; eventual solution is something we can do entirely in the importer and<br>&gt; brings these APIs into line with the rest of the frameworks.<br></p><p>Okay, if the plan is to punt on delegates and think about them later, I think we can just decide not to fuss over them right now.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br>I reviewed the changes and I feel positive about them in general.  For whatever it’s worth, I like them.  <br>There were some changes in Core Data for example where the with preposition is used in other parameters in addition to the first one.  I thought only the first parameter label was to use the with preposition. For example, I think I would remove the forObjectWith and the withContext labels and keep objectID and context as the labels:<br>+  func newValue(forRelationship relationship: NSRelationshipDescription, forObjectWith objectID: NSManagedObjectID, withContext context: NSManagedObjectContext?) throws -&gt; AnyObject<br>Thanks<br>Ricardo Parada<br></p><p><br>&gt; Hi everybody,<br>&gt; <br>&gt; Having looked at some examples, the API guidelines working group members<br>&gt; that were present this morning agreed we really want prepositions inside<br>&gt; the parentheses of method calls.<br>&gt; <br>&gt; Here are some results for the importer; we&#39;re still tuning some of the<br>&gt; heuristics but overall we feel very good about the preposition<br>&gt; placement:<br>&gt;   <br>&gt;   https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/da7e512cf75688e6da148dd2a8b27ae9efcb8821?diff=split&gt;<br>&gt; <br>&gt; Note that this is not final wording, but here are the guidelines we&#39;re<br>&gt; working with for first argument labels:<br>&gt; <br>&gt; A. Try to form a grammatical phrase including the first argument and<br>&gt;    describing the primary semantics at the call site.<br>&gt; <br>&gt; B. The first argument gets a label when and only when:<br>&gt; <br>&gt;    1. It does not form part of a grammatical phrase describing the<br>&gt;       primary semantics.  For example,<br>&gt;       ```<br>&gt;       x.dismiss(animated: y)<br>&gt;       ```<br>&gt;       [more examples needed]<br>&gt;       Note that parameters with defaults never describe the primary<br>&gt;       semantics. so are always labeled.<br>&gt;       ```<br>&gt;       func invert(options options: SomeOptionSet = []) // yes<br>&gt;       func invert(_ options: SomeOptionSet = [])       // no<br>&gt;       ```<br>&gt; <br>&gt;    2. The method is a factory method; such calls should mirror<br>&gt;       initializers, with no preposition.  For example,<br>&gt;       ```<br>&gt;       let x = UIColor(red: r, green: g, blue: b)<br>&gt;       let y = monitor.makeColor(red: r, green: g, blue: b)<br>&gt;       ```<br>&gt; <br>&gt;    3. It is part of a prepositional phrase<br>&gt; <br>&gt;      a. The label normally starts with the preposition. <br>&gt;         For example, <br>&gt;         ```<br>&gt;         x.move(from: a, to: b)<br>&gt;         x.loadValues(forKeys: [&quot;fox&quot;, &quot;box&quot;, &quot;lox&quot;])<br>&gt;         ```<br>&gt;      b. ...unless the preposition would break a very tight association<br>&gt;         between parameters:<br>&gt;         ```<br>&gt;         x.moveTo(x: a, y: b)<br>&gt;         ```<br>&gt;         [encourage grouping parameters into higher-level concepts,<br>&gt;         e.g. Point, in these cases]<br>&gt;       <br>&gt; <br>&gt; <br>&gt; Feedback most welcome, of course.<br>&gt; -- <br>&gt; -Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/c1952f76/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Guidelines, First Argument Labels]: Prepositions inside the parens</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 13, 2016 at 10:00:00am</p></header><div class="content"><p>on Sat Feb 13 2016, Radosław Pietruszewski &lt;radexpl-AT-gmail.com&gt; wrote:<br></p><p>&gt; A few random finds/thoughts:<br>&gt;<br>&gt; -  func magnifyToFit(rect: Rect)<br>&gt; +  func magnify(toFit rect: Rect)<br>&gt;<br>&gt; Intentional? I guess it could be argued either way, but “magnify-to-fit” seems like one phrase.<br></p><p>It&#39;s all heuristic-based; there are very few one-off APIs that have<br>“intentional” results.  We expect to have quite a few things that “could<br>be argued either way,” but in this case I prefer the result we got, FWIW.<br></p><p>&gt; * * *<br>&gt;<br>&gt; Are those guidelines and automatic translations open for further<br>&gt; changes and refinement after Swift 3 is released? It will be a *big*<br>&gt; change and messing with it further could be painful, but I fear that<br>&gt; there’s stuff we might be missing and insights we’ll only have after<br>&gt; we start using all this in practice. It would be a shame to freeze it<br>&gt; forever if that happens…<br></p><p>Yes, we expect some flux after this lands.<br></p><p>&gt; * * *<br>&gt;<br>&gt; (NSArray)<br>&gt; +  func description(withLocale locale: AnyObject?) -&gt; String<br>&gt; +  func description(withLocale locale: AnyObject?, indent level: Int) -&gt; String<br>&gt;<br>&gt; Another case where `with` doesn’t add anything IMHO and in fact makes<br>&gt; things slightly confusing. The description isn’t somehow made *with*<br>&gt; the locale, it’s just a variant of the `description` property that<br>&gt; takes a locale as an setting.<br></p><p>Yes, the current plan is that we&#39;ll audit these and “manually” remove<br>the vacuous “with”s.<br></p><p>&gt; * * *<br>&gt;<br>&gt; -  optional func scrollViewShouldScrollTo(top scrollView: UIScrollView) -&gt; Bool<br>&gt; +  optional func scrollViewShouldScroll(toTop scrollView: UIScrollView) -&gt; Bool<br>&gt;    @available(iOS 2.0, *)<br>&gt; -  optional func scrollViewDidScrollTo(top scrollView: UIScrollView)<br>&gt; +  optional func scrollViewDidScroll(toTop scrollView: UIScrollView)<br>&gt;<br>&gt; Similar case as “magnify to fit”. the scroll view has nothing to do with “toTop”. It should be:<br>&gt;<br>&gt; scrollViewDidScrollToTop(_: UIScrollView)<br></p><p>Yup. NS_SWIFT_NAME, I guess.<br></p><p>&gt; * * *<br>&gt;<br>&gt; I said that in the previous post, but I’ll say it again: looking at<br>&gt; the full diff with the refinements applied since the first draft in<br>&gt; this thread, I’m really coming around to this proposal. There are<br>&gt; still some cases that make me a bit uncomfortable, but it passes the<br>&gt; test of “as good as possible, but with fewest results I can’t live<br>&gt; with”. So that’s +1 from me ;-)<br>&gt;<br>&gt; * * *<br>&gt;<br>&gt; PS. If someone wants to see the full diff between the<br>&gt; pre-prepositions-inside-parens draft and the latest draft:<br>&gt;<br>&gt; curl https://github.com/apple/swift-3-api-guidelines-review/compare/eeca3ac...swift-3.diff | mate<br>&gt;<br>&gt; (or your favorite editor of choice. GH doesn’t show the *full*<br>&gt; highlighted diff, and unhighlighted diff is hard to read.)<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 13 Feb 2016, at 11:23, Radosław Pietruszewski &lt;radexpl at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 12 Feb 2016, at 00:19, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:29 PM, Radosław Pietruszewski<br>&gt;&gt;&gt;&gt; &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 11 Feb 2016, at 20:34, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Feb 11, 2016, at 2:33 AM, Radosław Pietruszewski via<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hi everybody,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Having looked at some examples, the API guidelines working group members<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; that were present this morning agreed we really want prepositions inside<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; the parentheses of method calls.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I find that… surprising.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Between these two (sorry to repeat the same example again):<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; func trackWith(trackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt;&gt; func track(withTrackID trackID: CMPersistentTrackID) -&gt; AVAssetTrack?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; #1 seems nicer and clearer to me. Having “with” as the first<br>&gt;&gt;&gt;&gt;&gt;&gt; word glued to a parameter label looks bizarre to my eyes:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As far as I understand it, the whole reason to keep “with” etc<br>&gt;&gt;&gt;&gt;&gt;&gt; in many APIs was to make cases like this one clearer. Because<br>&gt;&gt;&gt;&gt;&gt;&gt; “track” as a name doesn’t tell you much. Someone said that<br>&gt;&gt;&gt;&gt;&gt;&gt; having the method name end with “With” creates a sense of<br>&gt;&gt;&gt;&gt;&gt;&gt; suspense, and to me that was precisely what was a good thing<br>&gt;&gt;&gt;&gt;&gt;&gt; about it. It’s not just “track”, it’s a “track with” — ooh, here<br>&gt;&gt;&gt;&gt;&gt;&gt; come the criteria for the track! Having removed “with” from the<br>&gt;&gt;&gt;&gt;&gt;&gt; name itself, we lose, IMHO, the clarity this word was supposed<br>&gt;&gt;&gt;&gt;&gt;&gt; to bring in initializer/getter/finder-like methods. And we still<br>&gt;&gt;&gt;&gt;&gt;&gt; keep the word later inside the parens, but to my eyes it no<br>&gt;&gt;&gt;&gt;&gt;&gt; longer helps clarity, just exists as a vacuous, needless word.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; *Personally*, I don’t find the “with” to be compelling in either<br>&gt;&gt;&gt; case. Presumably, it is implying that this is a “find” rather than<br>&gt;&gt;&gt; a “create” operation, but I don’t consider “with” a good way to<br>&gt;&gt;&gt; communicate that… the optional result type and lack of a verb like<br>&gt;&gt;&gt; “add” or “insert” implies “find” stronger than “with”, IMO.<br>&gt;&gt; <br>&gt;&gt; I agree, though I thought it was better than nothing.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Another reason I don’t like this, say we have:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This no longer looks symmetrical across the parameters. First<br>&gt;&gt;&gt;&gt;&gt;&gt; parameter has label “with”, second doesn’t. The previous<br>&gt;&gt;&gt;&gt;&gt;&gt; version:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Didn’t have that problem.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I fear that people will take that as a signal that they should<br>&gt;&gt;&gt;&gt;&gt;&gt; make the whole method, including parameter labels, sound like an<br>&gt;&gt;&gt;&gt;&gt;&gt; English sentence and will start applying needless words like<br>&gt;&gt;&gt;&gt;&gt;&gt; “and”:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	a.tracks(withMediaType: b, andComposer: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To avoid this weird-looking construct where the first parameter<br>&gt;&gt;&gt;&gt;&gt;&gt; has a starting preposition, and other parameters don’t. Again:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Doesn’t have this problem, because while the method name part<br>&gt;&gt;&gt;&gt;&gt;&gt; ends with “With”, the parameters are consistently just nouns.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; So -1 from me on this. Moving prepositions inside parens look<br>&gt;&gt;&gt;&gt;&gt;&gt; like a step back from the Part DEUX Proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When we were looking through the results, it seemed like cases<br>&gt;&gt;&gt; where the preposition distributed to multiple arguments were fairly<br>&gt;&gt;&gt; rare… rare enough that it didn’t seem worth complicating the rules<br>&gt;&gt;&gt; or giving up the gains we got elsewhere from moving the<br>&gt;&gt;&gt; prepositions inside.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Would you mind elaborating on the working group&#39;s rationale for moving prepositions inside parens?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A couple of reasons that I, personally, found motivating (some of which came up on this list before):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt;&gt;&gt;   (2) It seemed to separate “what the method does” (base name) from “how it does it” (argument label) more effectively.<br>&gt;&gt;&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where we had the same basic operation (described by the base name) and the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; … and we spent a while looking at the diff of Cocoa, here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6 &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/b22b62bb98e5d44b2528b237d18efe96bf2940d6&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d love to see a response from the team as for my concerns in the<br>&gt;&gt;&gt;&gt; post above — I wonder if the arguments were not compelling because<br>&gt;&gt;&gt;&gt; I’ve missed something, or simply that the rationale _for_<br>&gt;&gt;&gt;&gt; prepositions inside the parens seemed stronger.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   (1) A prepositional phrase is a grammatical entity, and we<br>&gt;&gt;&gt;&gt;&gt; probably shouldn’t split a grammatical phrase across ‘(‘.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A fair point — I guess I just don’t find it as important. Either<br>&gt;&gt;&gt;&gt; way, it’s not an English sentence, only English-like.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;   (3) Related to (2), it pulled out more method families, where<br>&gt;&gt;&gt;&gt;&gt; we had the same basic operation (described by the base name) and<br>&gt;&gt;&gt;&gt;&gt; the argument labels differentiated how we got to that result.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any examples? How was that different from having a preposition just before the paren?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here’s a fun set of examples from NSGradient:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  -  func drawFrom(startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;&gt;  -  func drawIn(rect: Rect, angle: CGFloat)<br>&gt;&gt;&gt;  -  func drawIn(path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;&gt;  +  func draw(from startingPoint: Point, to endingPoint: Point, options: NSGradientDrawingOptions)<br>&gt;&gt;&gt;  +  func draw(in rect: Rect, angle: CGFloat)<br>&gt;&gt;&gt;  +  func draw(in path: NSBezierPath, angle: CGFloat)<br>&gt;&gt;&gt;     func drawFromCenter(startCenter: Point, radius startRadius: CGFloat, toCenter endCenter: Point, radius endRadius: CGFloat, options: NSGradientDrawingOptions)<br>&gt;&gt;&gt;  -  func drawIn(rect: Rect, relativeCenterPosition: Point)<br>&gt;&gt;&gt;  -  func drawIn(path: NSBezierPath, relativeCenterPosition: Point)<br>&gt;&gt;&gt;  +  func draw(in rect: Rect, relativeCenterPosition: Point)<br>&gt;&gt;&gt;  +  func draw(in path: NSBezierPath, relativeCenterPosition: Point)<br>&gt;&gt; <br>&gt;&gt; Ah, neat. Probably uncommon overall, but I can see the advantage here, yeah.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * * *<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve given the diff a look again, and I can now see how some<br>&gt;&gt;&gt;&gt; methods look really nice after the change, and only some make me<br>&gt;&gt;&gt;&gt; slightly uncomfortable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func value(at index: Int) -&gt; AnyObject!<br>&gt;&gt;&gt;&gt; func read(from url: URL, options: ….)<br>&gt;&gt;&gt;&gt; class func strokeLine(from point1: Point, to point2: Point)<br>&gt;&gt;&gt;&gt; func appendWithOval(in rect: Rect)<br>&gt;&gt;&gt;&gt; func sendAction(on mask: Int) -&gt; Int<br>&gt;&gt;&gt;&gt; func rows(in rect: Rect) -&gt; NSRange<br>&gt;&gt;&gt;&gt; func translateOrigin(to translation: Point)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I actually like those a lot! There’s no need to repeat parameter<br>&gt;&gt;&gt;&gt; name/type information in argument label, because it’s going to be<br>&gt;&gt;&gt;&gt; obvious in context on call site. But having a preposition, just<br>&gt;&gt;&gt;&gt; alone by itself, actually is a nice thing in explaining the first<br>&gt;&gt;&gt;&gt; argument and the method semantics.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What I’m not so sure about is when the preposition is glued to a<br>&gt;&gt;&gt;&gt; noun. And I guess it’s largely because the noun seems to repeat<br>&gt;&gt;&gt;&gt; type information that’s not needed for clarity at call site:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func accessibilityFrame(forRange range: NSRange) -&gt; Rect<br>&gt;&gt;&gt;&gt; 	func fractionOfDistanceThroughGlyph(forPoint aPoint: Point) -&gt; CGFloat<br>&gt;&gt;&gt;&gt; 	func borderColor(forEdge edge: RectEdge) -&gt; NSColor?<br>&gt;&gt;&gt;&gt; 	func value(forDimension dimension: NSTextBlockDimension) -&gt; CGFloat<br>&gt;&gt;&gt;&gt; 	func cellFrame(forTextContainer textContainer:<br>&gt;&gt;&gt;&gt; NSTextContainer, proposedLineFragment lineFrag: Rect,<br>&gt;&gt;&gt;&gt; glyphPosition position: Point, characterIndex charIndex: Int) -&gt;<br>&gt;&gt;&gt;&gt; Rect<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why are here the nouns not trimmed like in the examples above?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I had a ban on creating “vacuous” argument labels from long ago. It<br>&gt;&gt;&gt; didn’t kick in much before, but I removed it in the follow-up<br>&gt;&gt;&gt; commit to what you’re looking at:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-3-api-guidelines-review/commit/aaec8d0fe9cf82cd6f4088721cf8968a6ac69164&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Essentially, all of those examples above end up with the argument label “for”.<br>&gt;&gt; <br>&gt;&gt; Ah, nice! That actually helps a lot, and seeing this and other<br>&gt;&gt; refinements I’m more and more on board with the “prepositions inside<br>&gt;&gt; parens” idea :)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	accessibilityFrame(for: someRange)<br>&gt;&gt;&gt;&gt; 	fractionOfDistanceThroughGlyph(for: somePoint)<br>&gt;&gt;&gt;&gt; 	borderColor(for: edge)<br>&gt;&gt;&gt;&gt; 	value(for: someTextBlockDimension)<br>&gt;&gt;&gt;&gt; 	cellFrame(for: someTextContainer, …)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would also work. No?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yep, the next commit ;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In other cases, I’m bothered by the preposition glued to an<br>&gt;&gt;&gt;&gt; argument label, because the preposition seems unnecessary:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func copy(withZone zone: Zone = nil) -&gt; AnyObject<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here, I feel like we need *a* label because we aren’t copying the<br>&gt;&gt;&gt; first argument… we’re copying “self” and using the first<br>&gt;&gt;&gt; argument. The second commit I referenced above would make this just<br>&gt;&gt;&gt; “with”; I, personally, would prefer “coder” or something meaningful<br>&gt;&gt;&gt; like “into”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	optional func shouldPerformSegue(withIdentifier identifier: String, sender: AnyObject?) -&gt; Bool<br>&gt;&gt;&gt;&gt; 	func statusItem(withLength length: CGFloat) -&gt; NSStatusItem<br>&gt;&gt;&gt;&gt; 	func instantiateController(withIdentifier identifier: String) -&gt; AnyObject<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The “with”s don’t seem to add anything here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func performClickOnCell(atColumn column: Int, row: Int)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I guess this is mostly a problem with “with”s. The last example is<br>&gt;&gt;&gt;&gt; more arguable — what bothers me there more is the inconsistent<br>&gt;&gt;&gt;&gt; treatment of argument labels (first label starts with a<br>&gt;&gt;&gt;&gt; preposition that conveys semantics for both parameters, and the<br>&gt;&gt;&gt;&gt; second label is just a parameter name).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Here, the “at” distributes, but it’s also not needed for clarity. We’d be find with either<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func performClickOnCellAt(column: Int, row: Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func performClickOnCell(column: Int, row: Int)<br>&gt;&gt; <br>&gt;&gt; Yep, both seem good to me.<br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
