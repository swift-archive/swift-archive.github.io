<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Extending a generic type where T == Void</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>August  9, 2016 at 12:00:00pm</p></header><div class="content"><p>on Tue Aug 09 2016, Benedict Cohen &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt; I have an enum that represents the states of a task:<br>&gt;<br>&gt; enum TaskState&lt;InType, OutType&gt;{<br>&gt; case preparing<br>&gt; case ready(InType)<br>&gt; case executing(InType, TaskIdentifier)<br>&gt; case success(InType, OutType)<br>&gt; case failure(InType, Error)<br>&gt;<br>&gt; mutating func transition(toReady: InType) {...}<br>&gt;<br>&gt; }<br>&gt;<br>&gt; //Usage<br>&gt; var locationSearchTaskState: TaskState&lt;String, [Location]&gt; = .preparing<br>&gt; //...<br>&gt; locationSearchTaskState.transition(toReady: text)<br>&gt;<br>&gt; This works as desired for most cases. Not all tasks, however, have an input:<br>&gt;<br>&gt; var topLocationsTaskState&lt;Void, [Location]&gt; = .ready( () )<br>&gt;<br>&gt; In this case we have to pass the empty tuple as the value which is ugly. I&#39;d like to add some sugar to make this nicer. Something along the lines of:<br>&gt;<br>&gt; extension TaskState where InType: Void {...}<br>&gt;<br>&gt; Of course this doesn&#39;t work because Void is not a protocol (nor can it<br>&gt; conform to a protocol because it&#39;s just a tuple). So my question: How<br>&gt; can I extend a generic type when the generic parameter is Void? Are<br>&gt; there alternative ways to model this problem?<br></p><p>There&#39;s a horrible hack you can use:<br></p><p>protocol TaskStateProtocol {<br>  associatedtype InType<br>  mutating func transition(toReady: InType)<br>}<br>extension TaskState : TaskStateProtocol {}<br></p><p>extension TaskStateProtocol where InType == Void {<br>  // ... &lt;==== put your stuff here<br>}<br></p><p><br>HTH,<br>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
