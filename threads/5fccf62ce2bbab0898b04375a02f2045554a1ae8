<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>-Doug<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160902/5fcc1ae8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>September  2, 2016 at 03:00:00pm</p></header><div class="content"><p>üëçüåâ<br></p><p>Sent from my iPhone<br></p><p>&gt; On Sep 2, 2016, at 3:50 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/127af3f8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00464d59365595ecaebd19b44de312fa?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Gwynne Raskind</string> &lt;gwynne at darkrainfall.org&gt;<p>September  2, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 17:50, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt; 	‚Ä¢ What is your evaluation of the proposal?<br></p><p>It seems like this would improve the utility of bridging collection types (and plist types in general), and I like that it does something more sensible than before with the disparate bridging behavior of Optional&lt;&gt;. But I do have a couple of questions:<br></p><p>Will specifying a nullable type parameter to collections now become legal in Objective-C? E.g.:<br>- (void)takeOptionalCollection:(NSArray&lt;id _Nullable&gt; * _Nullable)collection; // Bridge to [Any?]?<br></p><p>If not, is there any way to annotate ‚ÄúI want to be able to use (or not use) NSNull in this collection‚Äù? If there is, does doing so affect any behaviors on the Objective-C side? If there isn‚Äôt, wouldn‚Äôt it make more sense to treat passing an optional to Any as requiring forced unwrapping (including the implied runtime crash behavior), as is the case with other uses of optionals now? I can‚Äôt think offhand of any use case where I would want an object, even in pure Swift, where I didn‚Äôt know whether it was an optional or not, outside of debugging.<br></p><p>Depending on the answers to these questions, I‚Äôm tentatively in favor of this proposal.<br></p><p>&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Honestly, I don‚Äôt feel like it is, but my opinion may not be all that valid, since I‚Äôve spent a great deal more time in pure Swift (and interop with pure C) than in interop with Objective-C.<br></p><p>&gt; 	‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, *IF* the semantics of Optional remain consistent, which I‚Äôm not yet entirely clear on.<br></p><p>&gt; 	‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven‚Äôt worked with ObjC bridges in other languages.<br></p><p>&gt; 	‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading. I was not part of any previous discussion on this topic.<br></p><p><br>-- Gwynne Raskind<br>More magic than a mere signature can contain<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160902/1164a639/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September  6, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 4:58 PM, Gwynne Raskind via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Sep 2, 2016, at 17:50, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>&gt;&gt; 	‚Ä¢ What is your evaluation of the proposal?<br>&gt; <br>&gt; It seems like this would improve the utility of bridging collection types (and plist types in general), and I like that it does something more sensible than before with the disparate bridging behavior of Optional&lt;&gt;. But I do have a couple of questions:<br>&gt; <br>&gt; Will specifying a nullable type parameter to collections now become legal in Objective-C? E.g.:<br>&gt; - (void)takeOptionalCollection:(NSArray&lt;id _Nullable&gt; * _Nullable)collection; // Bridge to [Any?]?<br>&gt; <br>&gt; If not, is there any way to annotate ‚ÄúI want to be able to use (or not use) NSNull in this collection‚Äù? If there is, does doing so affect any behaviors on the Objective-C side? If there isn‚Äôt, wouldn‚Äôt it make more sense to treat passing an optional to Any as requiring forced unwrapping (including the implied runtime crash behavior), as is the case with other uses of optionals now? I can‚Äôt think offhand of any use case where I would want an object, even in pure Swift, where I didn‚Äôt know whether it was an optional or not, outside of debugging.<br>&gt; <br>&gt; Depending on the answers to these questions, I‚Äôm tentatively in favor of this proposal.<br></p><p>Changing Objective-C is outside of my power. I don&#39;t think that giving `_Nullable` a very different meaning is a good idea, though. A feature that feels more in the spirit of Objective-C would be support for class sum types, so you could say that you had an NSArray&lt;NSString* | NSNull*&gt;. (Similarly, you could have a `typedef (NSString*|NSArray*|NSDictionary*|NSNumber*|NSNull*) NSPropertyList;` to obviate the need for `id` for representing property list types.)<br></p><p>-Joe<br></p><p>&gt; <br>&gt;&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Honestly, I don‚Äôt feel like it is, but my opinion may not be all that valid, since I‚Äôve spent a great deal more time in pure Swift (and interop with pure C) than in interop with Objective-C.<br>&gt; <br>&gt;&gt; 	‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes, *IF* the semantics of Optional remain consistent, which I‚Äôm not yet entirely clear on.<br>&gt; <br>&gt;&gt; 	‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; I haven‚Äôt worked with ObjC bridges in other languages.<br>&gt; <br>&gt;&gt; 	‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading. I was not part of any previous discussion on this topic.<br>&gt; <br>&gt; <br>&gt; -- Gwynne Raskind<br>&gt; More magic than a mere signature can contain<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>September  2, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 5:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	‚Ä¢ What is your evaluation of the proposal?<br>Strong -1 as is.<br></p><p>&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>Not only do I not believe the problem is significant, but I believe that the proposal *introduces* a new problem which *is* significant, which is the accidental passage of optional arrays to Objective-C. With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing. For many other cases, particularly when nil is encountered in an array only rarely, this is likely to cause strange and hard-to-debug problems at runtime when NSNull pops up where code wasn‚Äôt expecting it (which I would expect to be most Objective-C code), and it might not be detected until after the product ships. In this way, this proposal creates a problem very similar to the problem that Swift was trying to solve with optionals in the first place.<br></p><p>Gwynne brings up the interesting idea of being able to declare Objective-C array parameters as NSArray&lt;id _Nullable&gt;. If this were allowed, and the proposed bridging behavior were *only* invoked for an array so declared, I might soften on this proposal, but as is, I feel that it would be a very large mistake.<br></p><p>&gt; 	‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br></p><p>A major feature of Swift was the concept of optionals, intended to prevent bugs caused by nil pointers showing up where they were not expected. This proposal flies directly in the face of that, and threatens to make it much easier to create bugs caused by NSNull objects showing up where they are not expected. In this way, I feel that it is an almost 180¬∞ contradiction of the feel and direction of Swift.<br></p><p>&gt; 	‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The only Objective-C bridges I have used in other languages have been in AppleScript and JXA, neither of which I would expect Swift to use as a model.<br></p><p>&gt; 	‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the original discussion, read the proposal, read the comments so far.<br></p><p>Charles<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>September  3, 2016 at 11:00:00am</p></header><div class="content"><p>I don&#39;t feel confident enough about the Swift‚ÄìObj-C interop to cast my own vote but I&#39;d like to question this sentiment:<br></p><p>&gt; On 03 Sep 2016, at 03:17, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing.<br></p><p>How is this different with NSNull though? If the callee expects an array of NSNumbers for example and uses them (for anything more specific than NSObject), the first NSNull instance will throw an NSInvalidArgumentException basically crashing the program as well:<br></p><p>$ cat example.m<br>@import Foundation;<br></p><p>int main() {<br>    id number = NSNull.null;<br>    NSLog(@&quot;%ld&quot;, [number integerValue]);<br>}<br></p><p>$ clang -fmodules example.m -o example &amp;&amp; ./example<br>2016-09-03 10:47:21.822 example[31488:151700] -[NSNull integerValue]: unrecognized selector sent to instance 0x7fff78561780<br>(snip...)<br>libc++abi.dylib: terminating with uncaught exception of type NSException<br>Abort trap: 6<br></p><p>OTOH, if the only thing the Obj-C code planned to do was immediately convert the NSArray into JSON, then a previously crashing example would now start producing a JSON array with mixed numbers and nulls. But is that kind of code likely in practice?<br></p><p>It would be different though if NSNull just swallowed any messages it receives like `nil` does. There are 3rd party examples &lt;https://github.com/jspahrsummers/libextobjc/blob/master/extobjc/EXTNil.h&gt; of that behaviour, and that would be detrimental to code quality in the case of Swift interop.<br></p><p>‚Äî Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/d81af58e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>September  3, 2016 at 04:00:00pm</p></header><div class="content"><p>The issue is that when the method doesn&#39;t immediately use the values of the array (e.g. stores it for later, or even worse passes them on to another object), the crash appears much later in the program with a message that NSNull doesn&#39;t respond to some selector - and that&#39;s often hard to debug.<br></p><p>On the other hand, I agree that it&#39;s better to use NSNull than how it currently works since this is a valid Swift 3 code:<br></p><p>let arr: [String?] = [&quot;Hello&quot;, nil]<br>NSArray(array: arr)<br></p><p>that will not crash and will produce a valid NSArray. As Douglas Gregor mentioned earlier:<br></p><p>&gt; [‚Ä¶] because any Swift type can be placed in an Any, and anything can be bridged to Objective-C. Nearly all of the concerns in this thread are about this aspect of the already-accepted-and-implemented SE-0116: that an optional can get passed through to an Objective-C ‚Äòid‚Äô without being explicitly unwrapped. That behavior exists, and the type of the object seen in Objective-C is an opaque Swift wrapper type. <br></p><p>Playground will show the NSArray as two NSObjects (which are in fact _SwiftValue), which means that the ObjC will crash as well, but with even a more obscure message:<br></p><p>Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.<br></p><p>So, choosing between two evils, I personally vote +1 for adding the NSNull bridging...<br></p><p><br></p><p>&gt; On Sep 3, 2016, at 10:01 AM, Pyry Jahkola via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t feel confident enough about the Swift‚ÄìObj-C interop to cast my own vote but I&#39;d like to question this sentiment:<br>&gt; <br>&gt;&gt; On 03 Sep 2016, at 03:17, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing.<br>&gt; <br>&gt; How is this different with NSNull though? If the callee expects an array of NSNumbers for example and uses them (for anything more specific than NSObject), the first NSNull instance will throw an NSInvalidArgumentException basically crashing the program as well:<br>&gt; <br>&gt; $ cat example.m<br>&gt; @import Foundation;<br>&gt; <br>&gt; int main() {<br>&gt;     id number = NSNull.null;<br>&gt;     NSLog(@&quot;%ld&quot;, [number integerValue]);<br>&gt; }<br>&gt; <br>&gt; $ clang -fmodules example.m -o example &amp;&amp; ./example<br>&gt; 2016-09-03 10:47:21.822 example[31488:151700] -[NSNull integerValue]: unrecognized selector sent to instance 0x7fff78561780<br>&gt; (snip...)<br>&gt; libc++abi.dylib: terminating with uncaught exception of type NSException<br>&gt; Abort trap: 6<br>&gt; <br>&gt; OTOH, if the only thing the Obj-C code planned to do was immediately convert the NSArray into JSON, then a previously crashing example would now start producing a JSON array with mixed numbers and nulls. But is that kind of code likely in practice?<br>&gt; <br>&gt; It would be different though if NSNull just swallowed any messages it receives like `nil` does. There are 3rd party examples &lt;https://github.com/jspahrsummers/libextobjc/blob/master/extobjc/EXTNil.h&gt; of that behaviour, and that would be detrimental to code quality in the case of Swift interop.<br>&gt; <br>&gt; ‚Äî Pyry<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/fd8f1275/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>September  3, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Sep 3, 2016, at 3:01 AM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; <br>&gt;&gt; On 03 Sep 2016, at 03:17, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing.<br>&gt; <br>&gt; How is this different with NSNull though? If the callee expects an array of NSNumbers for example and uses them (for anything more specific than NSObject), the first NSNull instance will throw an NSInvalidArgumentException basically crashing the program as well:<br></p><p>The difference is that with the existing behavior, any call to *any* object in the array will throw an exception, whether the original was an NSNull or not. This will alert you right away to the fact that you accidentally sent an optional array to an Objective-C API. With this proposal, if the objects in the array are usually non-nil, you might never realize that you accidentally made the array optional, and you won‚Äôt find out until some weird edge case results in a nil getting stuck in there and then *surprise!* your users are reporting random crashes in your app that are really hard to track down!<br></p><p>Optional arrays are pretty easy to make by accident. I know that I‚Äôve done it far more than I‚Äôve used anything that required an NSNull. The thing is, if you‚Äôve made one, you usually find out about it pretty quickly because you get compiler errors when passing it to other Swift APIs, and, in the worst case, instant and obvious runtime errors when passing it to Objective-C APIs. With the proposal, accidental optional arrays will suddenly become silent and deadly in Objective-C.<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/bcad1664/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September  6, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Sep 2, 2016, at 5:17 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Sep 2, 2016, at 5:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	‚Ä¢ What is your evaluation of the proposal?<br>&gt; Strong -1 as is.<br>&gt; <br>&gt;&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Not only do I not believe the problem is significant, but I believe that the proposal *introduces* a new problem which *is* significant, which is the accidental passage of optional arrays to Objective-C. With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing. For many other cases, particularly when nil is encountered in an array only rarely, this is likely to cause strange and hard-to-debug problems at runtime when NSNull pops up where code wasn‚Äôt expecting it (which I would expect to be most Objective-C code), and it might not be detected until after the product ships. In this way, this proposal creates a problem very similar to the problem that Swift was trying to solve with optionals in the first place.<br></p><p>This is a fundamental problem with `Any` in Swift and `id` in Objective-C. There&#39;s no way to statically prevent misuse of such APIs. We can, and IMO should, provide warnings when Optionals are used in unconstrained contexts without either being unwrapped or explicitly annotated somehow. That doesn&#39;t conflict with this proposal, though.<br></p><p>-Joe<br></p><p>&gt; Gwynne brings up the interesting idea of being able to declare Objective-C array parameters as NSArray&lt;id _Nullable&gt;. If this were allowed, and the proposed bridging behavior were *only* invoked for an array so declared, I might soften on this proposal, but as is, I feel that it would be a very large mistake.<br>&gt; <br>&gt;&gt; 	‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; A major feature of Swift was the concept of optionals, intended to prevent bugs caused by nil pointers showing up where they were not expected. This proposal flies directly in the face of that, and threatens to make it much easier to create bugs caused by NSNull objects showing up where they are not expected. In this way, I feel that it is an almost 180¬∞ contradiction of the feel and direction of Swift.<br>&gt; <br>&gt;&gt; 	‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; The only Objective-C bridges I have used in other languages have been in AppleScript and JXA, neither of which I would expect Swift to use as a model.<br>&gt; <br>&gt;&gt; 	‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Read the original discussion, read the proposal, read the comments so far.<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  6, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Sep 6, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Sep 2, 2016, at 5:17 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 2, 2016, at 5:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	‚Ä¢ What is your evaluation of the proposal?<br>&gt;&gt; Strong -1 as is.<br>&gt;&gt; <br>&gt;&gt;&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Not only do I not believe the problem is significant, but I believe that the proposal *introduces* a new problem which *is* significant, which is the accidental passage of optional arrays to Objective-C. With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing. For many other cases, particularly when nil is encountered in an array only rarely, this is likely to cause strange and hard-to-debug problems at runtime when NSNull pops up where code wasn‚Äôt expecting it (which I would expect to be most Objective-C code), and it might not be detected until after the product ships. In this way, this proposal creates a problem very similar to the problem that Swift was trying to solve with optionals in the first place.<br>&gt; <br>&gt; This is a fundamental problem with `Any` in Swift and `id` in Objective-C. There&#39;s no way to statically prevent misuse of such APIs. We can, and IMO should, provide warnings when Optionals are used in unconstrained contexts without either being unwrapped or explicitly annotated somehow. That doesn&#39;t conflict with this proposal, though.<br></p><p>I *think* Charles is saying something slightly different here, and it‚Äôs a viewpoint I hadn‚Äôt considered before.<br></p><p>We agree that there should be some kind of diagnostic when putting an optional into an Any, because it‚Äôs probably not what the user intended. And we know it can happen in ways we cannot diagnose statically, so the diagnostic won‚Äôt be perfect. I think Charles is saying that, when this happens, we don‚Äôt *want* our Objective-C code to be able to query the value in that optional: in other words, it‚Äôs effectively a programmer error to treat such objects as anything more than completely-opaque objects that get passed around any perhaps dealt with properly in Swift code itself.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September  6, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Sep 6, 2016, at 5:11 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Sep 6, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sep 2, 2016, at 5:17 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sep 2, 2016, at 5:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	‚Ä¢ What is your evaluation of the proposal?<br>&gt;&gt;&gt; Strong -1 as is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Not only do I not believe the problem is significant, but I believe that the proposal *introduces* a new problem which *is* significant, which is the accidental passage of optional arrays to Objective-C. With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing. For many other cases, particularly when nil is encountered in an array only rarely, this is likely to cause strange and hard-to-debug problems at runtime when NSNull pops up where code wasn‚Äôt expecting it (which I would expect to be most Objective-C code), and it might not be detected until after the product ships. In this way, this proposal creates a problem very similar to the problem that Swift was trying to solve with optionals in the first place.<br>&gt;&gt; <br>&gt;&gt; This is a fundamental problem with `Any` in Swift and `id` in Objective-C. There&#39;s no way to statically prevent misuse of such APIs. We can, and IMO should, provide warnings when Optionals are used in unconstrained contexts without either being unwrapped or explicitly annotated somehow. That doesn&#39;t conflict with this proposal, though.<br>&gt; <br>&gt; I *think* Charles is saying something slightly different here, and it‚Äôs a viewpoint I hadn‚Äôt considered before.<br>&gt; <br>&gt; We agree that there should be some kind of diagnostic when putting an optional into an Any, because it‚Äôs probably not what the user intended. And we know it can happen in ways we cannot diagnose statically, so the diagnostic won‚Äôt be perfect. I think Charles is saying that, when this happens, we don‚Äôt *want* our Objective-C code to be able to query the value in that optional: in other words, it‚Äôs effectively a programmer error to treat such objects as anything more than completely-opaque objects that get passed around any perhaps dealt with properly in Swift code itself.<br></p><p>I&#39;m not sure I agree with this sentiment. It feels contrary to what you get when you put an Optional in an Any in Swift, since we consider Optional to dynamically be a supertype of its payload:<br></p><p>	let x1: Int? = 1<br>	let x2: Any = x1<br>	print(x2 as! Int) // prints 1<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September  6, 2016 at 05:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Sep 6, 2016, at 5:21 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Sep 6, 2016, at 5:11 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sep 6, 2016, at 4:50 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sep 2, 2016, at 5:17 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Sep 2, 2016, at 5:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    ‚Ä¢ What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; Strong -1 as is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    ‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; Not only do I not believe the problem is significant, but I believe that the proposal *introduces* a new problem which *is* significant, which is the accidental passage of optional arrays to Objective-C. With the existing behavior, such mistakes are immediately obvious as Objective-C receives an opaque object that it cannot use (and probably soon crashes), so they are unlikely to make it past QA testing. For many other cases, particularly when nil is encountered in an array only rarely, this is likely to cause strange and hard-to-debug problems at runtime when NSNull pops up where code wasn‚Äôt expecting it (which I would expect to be most Objective-C code), and it might not be detected until after the product ships. In this way, this proposal creates a problem very similar to the problem that Swift was trying to solve with optionals in the first place.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is a fundamental problem with `Any` in Swift and `id` in Objective-C. There&#39;s no way to statically prevent misuse of such APIs. We can, and IMO should, provide warnings when Optionals are used in unconstrained contexts without either being unwrapped or explicitly annotated somehow. That doesn&#39;t conflict with this proposal, though.<br>&gt;&gt; <br>&gt;&gt; I *think* Charles is saying something slightly different here, and it‚Äôs a viewpoint I hadn‚Äôt considered before.<br>&gt;&gt; <br>&gt;&gt; We agree that there should be some kind of diagnostic when putting an optional into an Any, because it‚Äôs probably not what the user intended. And we know it can happen in ways we cannot diagnose statically, so the diagnostic won‚Äôt be perfect. I think Charles is saying that, when this happens, we don‚Äôt *want* our Objective-C code to be able to query the value in that optional: in other words, it‚Äôs effectively a programmer error to treat such objects as anything more than completely-opaque objects that get passed around any perhaps dealt with properly in Swift code itself.<br>&gt; <br>&gt; I&#39;m not sure I agree with this sentiment. It feels contrary to what you get when you put an Optional in an Any in Swift, since we consider Optional to dynamically be a supertype of its payload:<br>&gt; <br>&gt;    let x1: Int? = 1<br>&gt;    let x2: Any = x1<br>&gt;    print(x2 as! Int) // prints 1<br></p><p>I wasn&#39;t expressing an opinion per se; just trying to clear up a perceived misunderstanding. <br></p><p>  - Doug, pretending to be a neutral review manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/2228974b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>September  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Sep 6, 2016, at 7:11 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; I *think* Charles is saying something slightly different here, and it‚Äôs a viewpoint I hadn‚Äôt considered before.<br>&gt; <br>&gt; We agree that there should be some kind of diagnostic when putting an optional into an Any, because it‚Äôs probably not what the user intended. And we know it can happen in ways we cannot diagnose statically, so the diagnostic won‚Äôt be perfect. I think Charles is saying that, when this happens, we don‚Äôt *want* our Objective-C code to be able to query the value in that optional: in other words, it‚Äôs effectively a programmer error to treat such objects as anything more than completely-opaque objects that get passed around any perhaps dealt with properly in Swift code itself.<br></p><p>I‚Äôd say my position has three planks on it, and the above is pretty much the first plank: 1) the idea of an array of optionals is a concept that doesn‚Äôt really exist in Objective-C, and I do think that passing one to Obj-C ought to be considered a programmer error.<br></p><p>The other two planks would be:<br></p><p>2) Bridging arrays of optionals in this manner could mask the aforementioned programmer error, resulting in unexpected, hard-to-reproduce crashes when an NSNull is accessed as if it were something else, and:<br></p><p>3) Objective-C APIs that accept NSNull objects are fairly rare, so the proposed bridging doesn‚Äôt really solve a significant problem (and in the cases where it does, using a map to replace nils with NSNulls is not difficult to write).<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160906/370ca4c8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>September  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/<br>&gt; proposals/0140-bridge-optional-to-nsnull.md<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; I tend to agree with other commenters that NSNull does not seem like an<br>obviously-correct (or -unsurprising) solution to this problem. Rather than<br>getting &quot;unexpectedly found nil&quot; errors like in Swift, this would start<br>causing more obtuse errors about missing methods on NSNull.<br></p><p>Users could simply be forced to write `?? NSNull()` if they really want to<br>use NSNull.<br></p><p>I do think that a warning/error for Optional&lt;T&gt;-to-Any conversion should be<br>added; something like:<br></p><p>    - (void)test:(id _Nonnull)arg;<br>    let x: Int? = 3<br>    test(x)  // passing optional type &#39;Int?&#39; to &#39;Any&#39; parameter uses an<br>opaque wrapper; use &#39;as Any&#39; to silence this warning<br></p><p>Although, I&#39;m not sure that would be a complete solution, because you could<br>still get around it with generic algorithms. This example is contrived, but:<br></p><p>    extension Array {<br>        func asAnys() -&gt; [Any] {<br>            return map { $0 as Any }    // no warning here; $0&#39;s type is<br>Element, not known whether optional or non-optional<br>        }<br>    }<br></p><p>It might be nice for this warning to occur *only* when passing values to<br>Obj-C methods. Swift code written using Any would handle them correctly.<br>However, I&#39;m not sure that&#39;s possible, given that the Obj-C importer<br>recently started using Any instead of AnyObject on purpose to make Obj-C<br>code more like Swift code in that way.<br></p><p><br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; Definitely; the current behavior is surprising and dangerous.<br></p><p><br></p><p>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Not really; it seems like a Cocoa-ism leaking into the purity/safety of<br>Swift, more so than most bridging behavior, although perhaps I&#39;m only<br>saying this because NSNull is much less commonly used than the most other<br>bridged types.<br></p><p><br></p><p>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; N/A<br></p><p><br></p><p>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; A quick reading of the proposal, plus some experimentation in a sample<br>project and discussion with others in Slack about an occurrence of the<br>motivating problem.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/246da7fa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>September  7, 2016 at 09:00:00am</p></header><div class="content"><p>I‚Äô‚Äôve been migrating a project to Swift 3 and a the piece of code below did not require any modification but had wildly different results:<br></p><p>let myView = viewController.view<br>superview.addConstraints([<br>    NSLayoutConstraint(<br>        item: myView, attribute: .left,<br>        relatedBy: .equal,<br>        toItem: superview, attribute: .left,<br>        multiplier: 1, constant: 0)<br>])<br></p><p>UIViewController‚Äôs view property is typed as UIView! so myView‚Äôs type is inferred to UIView? in Swift 3 (previous inferred as UIView! in Swift 2). This will crash in Swift 3 (not in Swift 2), because I think that myView‚Äôs optional value is not bridged to the wrapped value in Objective-C when passed to NSLayoutConstraint. Can somebody confirm that this proposal fixes this issue?<br></p><p>Regards,<br>David.<br></p><p><br>&gt; On 03 Sep 2016, at 00:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/6de7ee7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>September  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Sep 7, 2016, at 12:52 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I‚Äô‚Äôve been migrating a project to Swift 3 and a the piece of code below did not require any modification but had wildly different results:<br>&gt; <br>&gt; let myView = viewController.view<br>&gt; superview.addConstraints([<br>&gt;     NSLayoutConstraint(<br>&gt;         item: myView, attribute: .left,<br>&gt;         relatedBy: .equal,<br>&gt;         toItem: superview, attribute: .left,<br>&gt;         multiplier: 1, constant: 0)<br>&gt; ])<br>&gt; <br>&gt; UIViewController‚Äôs view property is typed as UIView! so myView‚Äôs type is inferred to UIView? in Swift 3 (previous inferred as UIView! in Swift 2). This will crash in Swift 3 (not in Swift 2), because I think that myView‚Äôs optional value is not bridged to the wrapped value in Objective-C when passed to NSLayoutConstraint. Can somebody confirm that this proposal fixes this issue?<br></p><p>The correct behavior would end up falling out with this proposal, yeah, though it would still arguably be more correct for us to force-unwrap IUOs before sticking them in a non-optional Any, instead of putting the wrapped Optional into the Any.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>September  7, 2016 at 03:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>I support this proposal. I work on a framework, and I was actually able to track down a user-reported crash to the lack of this sort of bridging. An engineer overlooked that an `Optional` value passed into an `Any` parameter, would be forwarded to the Objective-C API as an opaque object. Since we had not tested that particular type, we were unable to detect this issue. Adding this sort of bridging behavior (explicitly in the implementation of our function) is how we were able to fix this issue since the Objective-C API did accept `NSNull`.<br></p><p>Others on the mailing list have brought up concerns that this sort of bridging will defer the detection of API misuse in the case of `NSArray`. I think that, while that is a fair concern, it ignores other cases where this sort of bridging will actually fix crashes that would otherwise occur. Further, I think these concerns forget that fact that `Any` is only used for dynamic APIs. If you&#39;d like a strongly typed `NSArray`, you would use Objective-C lightweight generics. I would actually argue that dynamically bridging `NSNull` to `nil` is most consistent with the current behavior of Swift.<br></p><p>For example, the following cast succeeds since `Int?` is [kinda sorta] a subtype of `Int`.<br>```<br>Optional&lt;Int&gt;.Some(3) as Any as! Int<br>```<br>Thus, in Swift you can treat an `Optional&lt;T&gt;` stored inside an `Any` as if it were simply a `T`. In Objective-C though, this is not the case since there&#39;s no equivalent to this sort of dynamic `as!` cast. As such, it would be reasonable to bridge `Optional&lt;T&gt;` to `T | NSNull` such that we can similarly treat `T?` as if it were an `T` in Objective-C. Given that `Any` is used in dynamic APIs that can be passed *any* type, I don&#39;t think it is worrisome that this will convert to `NSNull`. If the API is designed to only accept certain types, this should be annotated with generics.<br></p><p>* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so. I definitely don&#39;t think this issue is as important as fixing numeric bridging, but this seems like a logical improvement to the current bridging behavior.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Definitely. In my understanding, Objective-C interop is a major feature of Swift. The Swift team has done a fantastic job improving this since the first release of Swift, and this seems like a logical, incremental step in the same direction.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;m not familiar with other languages with such comprehensive bridging features as Swift. Objective-C is built atop C, and thus has multiple concepts of null (NSNull and NULL), but it has never made sense to bridge between these because Objective-C is a superset of C, not an unrelated language that interops with C (and in this case, these separate types were necessary, something that has been avoided in Swift).<br></p><p>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve spent a significant number of hours dealings with issues causes by the lack of bridging, both with `Int8` and friends and here. The lack of bridging of `NSNull` and `nil` is definitely less expected than the lack of numeric bridging, but still problematic for those building Swift wrappers for a dynamic API on top of an Objective-C APIs.<br></p><p>&gt; On Sep 2, 2016, at 3:50 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; -Doug<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160907/0339df3a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>September  9, 2016 at 02:00:00pm</p></header><div class="content"><p>‚Ä¢ What is your evaluation of the proposal?<br></p><p>In favor, as we already ran into crashes after migrating our project to Swift 3.<br>I&#39;m not completely convinced though that the compiler should ignore nullabiliy markup on id. Also id has a long tradition in the ObjC community to be used instead of NSObject * which does not suffer from the problem.<br></p><p>‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Very much, the compiler should do everything it can to avoid runtime crashes due to programmer errors.<br></p><p>‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, more intelligent and useful bridging makes sense. NSNull can be problematic too, but having an Optional.some value definitely should work on the other side of the bridge too.<br></p><p>‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>-<br></p><p>‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I even filed a Swift bug (SR-2601) before I found this proposal explaining that nullability on id is ignored since SE-0116.<br></p><p>- Fabian<br></p><p><br>On 03.09.2016, at 00:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p><br>Hello Swift community,<br></p><p>The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br></p><p>Reply text<br></p><p>Other replies<br>&lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>  *   What is your evaluation of the proposal?<br>  *   Is the problem being addressed significant enough to warrant a change to Swift?<br>  *   Does this proposal fit well with the feel and direction of Swift?<br>  *   If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>  *   How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Doug<br></p><p>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160909/91dc83b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fc174169a3054f2e9bcb366884b02b?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Fabian Ehrentraud</string> &lt;Fabian.Ehrentraud at willhaben.at&gt;<p>September 10, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;d make the warning an error by default<br></p><p>Am 09.09.2016 um 16:09 schrieb Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt;:<br></p><p>‚Ä¢ What is your evaluation of the proposal?<br></p><p>In favor, as we already ran into crashes after migrating our project to Swift 3.<br>I&#39;m not completely convinced though that the compiler should ignore nullabiliy markup on id. Also id has a long tradition in the ObjC community to be used instead of NSObject * which does not suffer from the problem.<br></p><p>‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Very much, the compiler should do everything it can to avoid runtime crashes due to programmer errors.<br></p><p>‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, more intelligent and useful bridging makes sense. NSNull can be problematic too, but having an Optional.some value definitely should work on the other side of the bridge too.<br></p><p>‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>-<br></p><p>‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I even filed a Swift bug (SR-2601) before I found this proposal explaining that nullability on id is ignored since SE-0116.<br></p><p>- Fabian<br></p><p><br>On 03.09.2016, at 00:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br></p><p><br>Hello Swift community,<br></p><p>The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br></p><p>Reply text<br></p><p>Other replies<br>&lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>  *   What is your evaluation of the proposal?<br>  *   Is the problem being addressed significant enough to warrant a change to Swift?<br>  *   Does this proposal fit well with the feel and direction of Swift?<br>  *   If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>  *   How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Doug<br></p><p>Review Manager<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org&lt;mailto:swift-evolution at swift.org&gt;<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160910/f6fc4f5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0140: Bridge Optional As Its Payload Or NSNull</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>September 14, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Sep 10, 2016, at 1:20 AM, Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d make the warning an error by default<br></p><p>Swift 3.0 has already shipped without this warning, so making it an error by default would break source compatibility.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; Am 09.09.2016 um 16:09 schrieb Fabian Ehrentraud via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; ‚Ä¢ What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; In favor, as we already ran into crashes after migrating our project to Swift 3.<br>&gt;&gt; I&#39;m not completely convinced though that the compiler should ignore nullabiliy markup on id. Also id has a long tradition in the ObjC community to be used instead of NSObject * which does not suffer from the problem.<br>&gt;&gt; <br>&gt;&gt; ‚Ä¢ Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Very much, the compiler should do everything it can to avoid runtime crashes due to programmer errors.<br>&gt;&gt; <br>&gt;&gt; ‚Ä¢ Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes, more intelligent and useful bridging makes sense. NSNull can be problematic too, but having an Optional.some value definitely should work on the other side of the bridge too.<br>&gt;&gt; <br>&gt;&gt; ‚Ä¢ If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; -<br>&gt;&gt; <br>&gt;&gt; ‚Ä¢ How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; I even filed a Swift bug (SR-2601) before I found this proposal explaining that nullability on id is ignored since SE-0116.<br>&gt;&gt; <br>&gt;&gt; - Fabian<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 03.09.2016, at 00:50, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0140 &quot;Bridge Optional As Its Payload Or NSNull&quot; begins now and runs through September 8, 2016. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal link:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;<br>&gt;&gt;&gt; Reply text<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other replies<br>&gt;&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160914/a7bbc4ef/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
