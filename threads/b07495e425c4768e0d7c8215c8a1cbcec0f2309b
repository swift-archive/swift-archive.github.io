<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>NSCoding-like Persistence</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>March 24, 2016 at 06:00:00pm</p></header><div class="content"><p>What is the current plan for persisting things like enums and structs in Swift?<br></p><p><br>After the POP talk at WWDC, I excitedly rewrote many of my frameworks to use protocols and structs/enums instead of NSObject subclasses.  For the most part, this has been fantastic… most things are much more powerful/flexible using protocols and value types.  The one problem I keep running into, however, is how to persist things in the same way you can with NSCoding.  NSCoding requires NSObject as a base class.<br></p><p>I spent the last couple of weekends playing with ideas for a persistence framework and I was able to get about 90% of the way there.  I was able to encode types like [(Int,Float)] by supplying closures to the encoding function.  For example:  func encodeArray&lt;T&gt;(array:[T], forKey:String, mapping:(T)-&gt;Encoding).  There is a simpler version without the closure for arrays where T adheres to my “Encodable” protocol:  func encodeArray&lt;T:Encodable&gt;(array:[T], forKey:String).  I also have legacy support for objects which adhere to NSCoding.<br></p><p>Instead of going straight to data like NSCoding, I encode to an intermediate format (A struct with an internal enum).  Then you have another protocol which can turn that format into data, json, plist, etc…<br></p><p>90% working, but I ran into a few problems.  First, I have to use this horrible thing to get the type system to cooperate in some cases:<br></p><p>func horribleAutocastHack&lt;T&gt;(x:Any, fail:(()throws-&gt; T)? = nil)throws -&gt; T{<br>    if let cast = x as? T{<br>        return cast<br>    }<br>    if let fail = fail{<br>        return try fail()<br>    }<br>    fatalError(&quot;Autocast failed&quot;)<br>}<br></p><p><br>Second, I had to use static methods instead of init in my protocol, since init fails on classes where I don’t have access to the code (e.g. NSData).  It wants me to mark it both required and final, which I can’t do.<br></p><p>Third, I have no idea how to persist closures. It may just be flat out impossible.  The big effect it has had is that anywhere where I had to build a thunk to store a collection of heterogeneous objects (adhering to a protocol with self requirements) it can no longer be persisted.  This is actually the biggest issue, and I haven’t even been able to hack around it.<br></p><p>Finally, I am pushing the generics system pretty hard.  My first version was randomly crashing the compiler so I had to pull back on that front (e.g. having encodeArray instead of just encode which infers the arrayness).  All of the various discussions around factory methods are also relevant.<br></p><p>I was able to get the rest working though.  <br></p><p>Is there an official plan which I am duplicating effort on?  I would be happy to share my code (after a couple more iterations) if that would be helpful/inspiring.  I would also be happy to just work on other things and wait for the official solution if there is one coming…  I may have to wait for more powerful generics in any case.<br></p><p>I feel like this is one of those things that is impacting a lot of real world codebases, and delaying adoption of POP, value types, etc...<br></p><p>Thanks,<br>Jon<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/b074309b/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
