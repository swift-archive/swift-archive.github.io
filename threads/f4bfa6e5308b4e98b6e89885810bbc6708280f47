<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2679e7a28cb46e207a562ad4e7fc45fc?s=50"></div><header><strong>[Pitch] Reference storage for enum associated values</strong> from <string>James F</string> &lt;conductator at ntlworld.com&gt;<p>May  3, 2016 at 10:00:00pm</p></header><div class="content"><p>I would like to see something like this; it would not only eliminate extra code, but could potentially be more efficient.<br></p><p>What syntax do you propose? If enum values were always labelled, I would expect something like SonOf(weak parent: Parent), but there would probably be resistance to allowing SonOf(weak Parent), since weak would look like a type modifier. Maybe SonOf(weak _: Parent) would work?<br></p><p>I just hope this isn&#39;t another feature that will get put on hold just because we can&#39;t decide on the syntax…<br></p><p><br></p><p>Just some rambling:<br></p><p>I remember that ‘partial function’ proposal, which would allow the case keyword inside closures to act as a switch on its input.<br></p><p>If a feature like that, but using ‘case’ in the sense of enumerations, were extended to classes and structs…<br></p><p>struct ParentFamily {<br>    weak var parent: Parent?<br></p><p>    case Son {<br>        var intProperty: Int<br>        init(_ int: Int) {self.intProperty = int}<br>    }<br>    case Daughter {<br>        var stringProperty: String = &quot;&quot;<br>    }<br>    case SignificantOtherOf {}<br>}<br></p><p>We wouldn&#39;t even need ‘enum’ anymore, since we&#39;d have a similar kind of thing that could be both value-type and reference-type, with all-case stored properties, too. Almost like an abstract class (or struct) hierarchy, except the limited extensibility means the values can be safely, exhaustively switched over. Class and struct could become simple value-type and reference-type implementation modifiers.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;CC184164-0A5F-48C5-9E8C-252DCB8DAFC0 at glimpse.io&gt; <br></p><p><br>The following code currently has a retain cycle and memory leak:<br></p><p>enum ParentChild {<br>    case SonOf(Parent)<br>    case DaughterOf(Parent)<br>}<br></p><p>class Parent {<br>    lazy var son: Child = Child(parentChild: .SonOf(self))<br>    lazy var daughter: Child = Child(parentChild: .DaughterOf(self))<br>    deinit { print(&quot;deinit Parent&quot;) }<br>}<br></p><p>class Child {<br>    var parentChild: ParentChild<br>    init(parentChild: ParentChild) {<br>        self.parentChild = parentChild<br>    }<br>    deinit { print(&quot;deinit Child&quot;) }<br>}<br></p><p><br>do {<br>    let parent = Parent()<br>    parent.son<br>    parent.daughter<br>}<br></p><p><br>Child.parentChild cannot be declared unowned because ParentChild is a value type. I propose adding the ability to declare the reference storage class for an enum&#39;s associated value, like so:<br></p><p>enum ParentChild {<br>    case SonOf(unowned Parent)<br>    case DaughterOf(unowned Parent)<br>}<br></p><p>The only current alternative is to have some intermediate reference type that itself holds the reference, akin to the old &quot;Box&quot; type that we used to use to work around enum limitations. E.g., this is our current cumbersome work-around:<br></p><p>/// An unowned reference to a value, which is useful for maintaining parent-child relations through value types like enums<br>public struct UnownedRef&lt;T: AnyObject&gt; {<br>    public unowned let value: T<br>    public init(_ value: T) { self.value = value }<br>}<br></p><p>enum ParentChild {<br>    case SonOf(UnownedRef&lt;Parent&gt;)<br>    case DaughterOf(UnownedRef&lt;Parent&gt;)<br>}<br></p><p><br>class Parent {<br>    lazy var son: Child = Child(parentChild: .SonOf(UnownedRef(self)))<br>    lazy var daughter: Child = Child(parentChild: .DaughterOf(UnownedRef(self)))<br>    deinit { print(&quot;deinit Foo&quot;) }<br>}<br></p><p>class Child {<br>    var parentChild: ParentChild<br>    init(parentChild: ParentChild) {<br>        self.parentChild = parentChild<br>    }<br></p><p>    deinit { print(&quot;deinit Child&quot;) }<br>}<br></p><p>The storage type of an enum would, of course, be limited to reference types, and when the storage class is weak, it would require that the stored type be Optional, just like when declaring a weak variable.<br></p><p>What do people think?<br></p><p>-Marc<br></p><p><br></p><p><br>------------- End Message ------------- <br></p><p><br></p><p>From James F<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
