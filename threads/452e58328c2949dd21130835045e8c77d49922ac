<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>Generic type metadata pattern not found?</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>June 11, 2016 at 08:00:00pm</p></header><div class="content"><p>Swift Users:<br>	In preparation for an upcoming iOS app project I’m trying out some new project layout strategies. One of which is putting my network layer and custom UI elements in frameworks separate from my main app. I’ve done this with frameworks in my project, and then used CocoaPods to install the dependencies for these frameworks (just the Networking framework at the moment). However, I’m getting the following build error when the app tries to link:<br></p><p>Undefined symbols for architecture x86_64:<br>  &quot;generic type metadata pattern for Alamofire.Response&quot;, referenced from:<br>      type metadata accessor for Alamofire.Response&lt;Networking.HTTPBinResponse, Networking.APIError&gt; in ViewController.o<br>ld: symbol(s) not found for architecture x86_64<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br></p><p>This occurs despite the Response type being visible to autocomplete in Xcode and there being no compilation errors at build time. Is there anything I can do to fix this or is this some sort of Xcode / Swift linker bug or limitation? It seems like my options are to link Alamofire directly against by app target or wrap the Response type in something of my own in my Networking framework. I’d prefer not to have to import Alamofire directly, as part of hiding all of the network stuff in a single framework was to limit those sorts of dependencies.<br></p><p><br></p><p>Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160611/452e22ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Generic type metadata pattern not found?</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>June 11, 2016 at 10:00:00pm</p></header><div class="content"><p>Are you installing the internal frameworks themselves via CocoaPods? That was my next step on a previous Swift project and I never got around to it, but it also predates CocoaPods 1.0’s release. My idea was to use the Podfile like so:<br></p><p><br>pod “InternalFramework”, :path=&gt;’.&#39;<br></p><p>This gets the dependencies installed properly using the .podspec file in the local directory, and doesn’t force you to split the framework into a separate repo.<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br></p><p>Check out Developing for Apple Watch, Second Edition &lt;https://pragprog.com/titles/jkwatch2/developing-for-apple-watch-second-edition&gt;, now in print!<br></p><p>&gt; On Jun 11, 2016, at 8:24 PM, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift Users:<br>&gt; 	In preparation for an upcoming iOS app project I’m trying out some new project layout strategies. One of which is putting my network layer and custom UI elements in frameworks separate from my main app. I’ve done this with frameworks in my project, and then used CocoaPods to install the dependencies for these frameworks (just the Networking framework at the moment). However, I’m getting the following build error when the app tries to link:<br>&gt; <br>&gt; Undefined symbols for architecture x86_64:<br>&gt;   &quot;generic type metadata pattern for Alamofire.Response&quot;, referenced from:<br>&gt;       type metadata accessor for Alamofire.Response&lt;Networking.HTTPBinResponse, Networking.APIError&gt; in ViewController.o<br>&gt; ld: symbol(s) not found for architecture x86_64<br>&gt; clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>&gt; <br>&gt; This occurs despite the Response type being visible to autocomplete in Xcode and there being no compilation errors at build time. Is there anything I can do to fix this or is this some sort of Xcode / Swift linker bug or limitation? It seems like my options are to link Alamofire directly against by app target or wrap the Response type in something of my own in my Networking framework. I’d prefer not to have to import Alamofire directly, as part of hiding all of the network stuff in a single framework was to limit those sorts of dependencies.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160611/adb5af2f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Generic type metadata pattern not found?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 13, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 11, 2016, at 5:24 PM, Jon Shier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift Users:<br>&gt; 	In preparation for an upcoming iOS app project I’m trying out some new project layout strategies. One of which is putting my network layer and custom UI elements in frameworks separate from my main app. I’ve done this with frameworks in my project, and then used CocoaPods to install the dependencies for these frameworks (just the Networking framework at the moment). However, I’m getting the following build error when the app tries to link:<br>&gt; <br>&gt; Undefined symbols for architecture x86_64:<br>&gt;   &quot;generic type metadata pattern for Alamofire.Response&quot;, referenced from:<br>&gt;       type metadata accessor for Alamofire.Response&lt;Networking.HTTPBinResponse, Networking.APIError&gt; in ViewController.o<br>&gt; ld: symbol(s) not found for architecture x86_64<br>&gt; clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>&gt; <br>&gt; This occurs despite the Response type being visible to autocomplete in Xcode and there being no compilation errors at build time. Is there anything I can do to fix this or is this some sort of Xcode / Swift linker bug or limitation? It seems like my options are to link Alamofire directly against by app target or wrap the Response type in something of my own in my Networking framework. I’d prefer not to have to import Alamofire directly, as part of hiding all of the network stuff in a single framework was to limit those sorts of dependencies.<br></p><p>This looks vaguely like an instance of some known bugs we have handling nested types. Do you have whole-module optimization enabled? Switching that on or off may move the problem around. Unnesting the type in the Alamofire source should work around the problem too.<br></p><p>-Joe<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
