<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>May 28, 2016 at 04:00:00pm</p></header><div class="content"><p>Hey everyone,<br></p><p>I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br></p><p>I’ve pasted it below, and I’d love some feedback! Thanks!<br></p><p>— Harlan Haskins<br></p><p><br></p><p>#warning<br></p><p>Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>Author: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;<br>Status: Awaiting review &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#rationale&gt;<br>Review manager: TBD<br> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#introduction&gt;Introduction<br></p><p>It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds &lt;https://bendodson.com/weblog/2014/10/02/showing-todo-as-warning-in-swift-xcode-project/&gt; to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br></p><p> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#motivation&gt;Motivation<br></p><p>A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br></p><p> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#proposed-solution&gt;Proposed solution<br></p><p>Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br></p><p>func configPath() -&gt; String {<br>  #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>  return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>}<br> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#detailed-design&gt;Detailed design<br></p><p>This will add two new productions to the Swift grammar:<br></p><p>compiler-control-statement → warning-directive<br>warning-directive → #warning( static-string-literal )<br>Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br></p><p>If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br></p><p>#if false<br>#warning(“This won’t exist”)<br>#endif<br> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#impact-on-existing-code&gt;Impact on existing code<br></p><p>This change is purely additive; no migration will be required.<br></p><p> &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#alternatives-considered&gt;Alternatives considered<br></p><p>We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/1124bca9/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1412 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/1124bca9/attachment.p7s&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/44b9c3e92a40313850fdbc2cb0abdef7?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Jon Shier</string> &lt;jon at jonshier.com&gt;<p>May 28, 2016 at 11:00:00pm</p></header><div class="content"><p>I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics. If you wish to add another, user definable diagnostic type, like official compiler support for a #todo or #fixme flag, then go ahead. But adding #warning because the IDE (read Xcode) doesn’t automatically pick up FIXMEs or TODOs isn’t a compelling enough reason. In addition, enabling developers to add their own warnings which can then just be ignored just encourages the very bad habit of ignoring warnings in general. Perhaps this could be something for libIDE, rather than the core language?<br></p><p><br></p><p>Jon Shier<br></p><p>&gt; On May 28, 2016, at 7:58 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey everyone,<br>&gt; <br>&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br>&gt; <br>&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt; <br>&gt; — Harlan Haskins<br>&gt; <br>&gt; <br>&gt; <br>&gt; #warning<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;<br>&gt; Status: Awaiting review &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#rationale&gt;<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#introduction&gt;Introduction<br>&gt; <br>&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds &lt;https://bendodson.com/weblog/2014/10/02/showing-todo-as-warning-in-swift-xcode-project/&gt; to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#motivation&gt;Motivation<br>&gt; <br>&gt; A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br>&gt; <br>&gt; func configPath() -&gt; String {<br>&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt; }<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#detailed-design&gt;Detailed design<br>&gt; <br>&gt; This will add two new productions to the Swift grammar:<br>&gt; <br>&gt; compiler-control-statement → warning-directive<br>&gt; warning-directive → #warning( static-string-literal )<br>&gt; Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br>&gt; <br>&gt; If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br>&gt; <br>&gt; #if false<br>&gt; #warning(“This won’t exist”)<br>&gt; #endif<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; This change is purely additive; no migration will be required.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/f40c7265/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>May 28, 2016 at 09:00:00pm</p></header><div class="content"><p>I can see where you&#39;re coming from, but I don&#39;t necessarily see this as &quot;warnings which can then be ignored.&quot; In my vision, this enables developers to increase visibility of known issues, instead of letting them sit. Developers who would normally use this feature to add their own warnings are likely not the developers who will then turn around and ignore warnings.<br></p><p>- Harlan<br></p><p>&gt; On May 28, 2016, at 8:26 PM, Jon Shier &lt;jon at jonshier.com&gt; wrote:<br>&gt; <br>&gt; 	I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics. If you wish to add another, user definable diagnostic type, like official compiler support for a #todo or #fixme flag, then go ahead. But adding #warning because the IDE (read Xcode) doesn’t automatically pick up FIXMEs or TODOs isn’t a compelling enough reason. In addition, enabling developers to add their own warnings which can then just be ignored just encourages the very bad habit of ignoring warnings in general. Perhaps this could be something for libIDE, rather than the core language?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon Shier<br>&gt; <br>&gt;&gt; On May 28, 2016, at 7:58 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey everyone,<br>&gt;&gt; <br>&gt;&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br>&gt;&gt; <br>&gt;&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt;&gt; <br>&gt;&gt; — Harlan Haskins<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; #warning<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Author: Harlan Haskins<br>&gt;&gt; Status: Awaiting review<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br>&gt;&gt; <br>&gt;&gt; func configPath() -&gt; String {<br>&gt;&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>&gt;&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt;&gt; }<br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; This will add two new productions to the Swift grammar:<br>&gt;&gt; <br>&gt;&gt; compiler-control-statement → warning-directive<br>&gt;&gt; warning-directive → #warning( static-string-literal )<br>&gt;&gt; Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br>&gt;&gt; <br>&gt;&gt; If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br>&gt;&gt; <br>&gt;&gt; #if false<br>&gt;&gt; #warning(“This won’t exist”)<br>&gt;&gt; #endif<br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; This change is purely additive; no migration will be required.<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/129017c9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May 28, 2016 at 09:00:00pm</p></header><div class="content"><p>#warning isn&#39;t exclusively used for FIXMEs.  Languages that include these kinds of features do things like flag old modules or unsupported OSes and older Swift versions by combining it with #if - a feature Swift implements far richer conditionals for than other languages I might add.  The kinds of developers that are reaching for these features, in addition to TODOs, are the ones that aren&#39;t letting their own warnings sit and get stale.<br></p><p>~Robert Widmann<br></p><p>2016/05/28 20:26、Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; 	I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics. If you wish to add another, user definable diagnostic type, like official compiler support for a #todo or #fixme flag, then go ahead. But adding #warning because the IDE (read Xcode) doesn’t automatically pick up FIXMEs or TODOs isn’t a compelling enough reason. In addition, enabling developers to add their own warnings which can then just be ignored just encourages the very bad habit of ignoring warnings in general. Perhaps this could be something for libIDE, rather than the core language?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Jon Shier<br>&gt; <br>&gt;&gt; On May 28, 2016, at 7:58 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey everyone,<br>&gt;&gt; <br>&gt;&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br>&gt;&gt; <br>&gt;&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt;&gt; <br>&gt;&gt; ― Harlan Haskins<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; #warning<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Author: Harlan Haskins<br>&gt;&gt; Status: Awaiting review<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br>&gt;&gt; <br>&gt;&gt; func configPath() -&gt; String {<br>&gt;&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>&gt;&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt;&gt; }<br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; This will add two new productions to the Swift grammar:<br>&gt;&gt; <br>&gt;&gt; compiler-control-statement → warning-directive<br>&gt;&gt; warning-directive → #warning( static-string-literal )<br>&gt;&gt; Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br>&gt;&gt; <br>&gt;&gt; If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br>&gt;&gt; <br>&gt;&gt; #if false<br>&gt;&gt; #warning(“This won’t exist”)<br>&gt;&gt; #endif<br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; This change is purely additive; no migration will be required.<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/09557d78/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 29, 2016 at 09:00:00am</p></header><div class="content"><p>+1 - this is a useful feature in C-like languages. I&#39;d prefer adding #error as well - you can have a file that depends on the OS features and may want to have a branch of the #if statements ending in <br></p><p>#if os(OSX)<br>	/// ...<br>#if os(Linux)<br>	/// ...<br>#else<br>	#error(&quot;This OS isn&#39;t supported yet.&quot;).<br>#endif<br></p><p>&gt; On May 29, 2016, at 6:36 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; #warning isn&#39;t exclusively used for FIXMEs.  Languages that include these kinds of features do things like flag old modules or unsupported OSes and older Swift versions by combining it with #if - a feature Swift implements far richer conditionals for than other languages I might add.  The kinds of developers that are reaching for these features, in addition to TODOs, are the ones that aren&#39;t letting their own warnings sit and get stale.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/05/28 20:26、Jon Shier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt; <br>&gt;&gt; 	I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics. If you wish to add another, user definable diagnostic type, like official compiler support for a #todo or #fixme flag, then go ahead. But adding #warning because the IDE (read Xcode) doesn’t automatically pick up FIXMEs or TODOs isn’t a compelling enough reason. In addition, enabling developers to add their own warnings which can then just be ignored just encourages the very bad habit of ignoring warnings in general. Perhaps this could be something for libIDE, rather than the core language?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Jon Shier<br>&gt;&gt; <br>&gt;&gt;&gt; On May 28, 2016, at 7:58 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey everyone,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; — Harlan Haskins<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #warning<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt;&gt;&gt; Author: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;<br>&gt;&gt;&gt; Status: Awaiting review &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#rationale&gt;<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds &lt;https://bendodson.com/weblog/2014/10/02/showing-todo-as-warning-in-swift-xcode-project/&gt; to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func configPath() -&gt; String {<br>&gt;&gt;&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>&gt;&gt;&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#detailed-design&gt;Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This will add two new productions to the Swift grammar:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; compiler-control-statement → warning-directive<br>&gt;&gt;&gt; warning-directive → #warning( static-string-literal )<br>&gt;&gt;&gt; Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if false<br>&gt;&gt;&gt; #warning(“This won’t exist”)<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This change is purely additive; no migration will be required.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160529/be8b9bd1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 28, 2016, at 8:26 PM, Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics.<br></p><p>+1.  The IDE should just pick up &quot;// FIXME: “ comments and summarize them as issues.  Xcode already shows them in its jump bar.<br></p><p>That said, I can see a use for #error, as Charlie shows downthread:<br></p><p>#if os(OSX)<br>	/// ...<br>#if os(Linux)<br>	/// ...<br>#else<br>	#error(&quot;This OS isn&#39;t supported yet.&quot;).<br>#endif<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 29, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 29, 2016, at 1:44 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 28, 2016, at 8:26 PM, Jon Shier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 	I appreciate the sentiment, but I think we should reserve warnings for actual compiler diagnostics.<br>&gt; <br>&gt; +1.  The IDE should just pick up &quot;// FIXME: “ comments and summarize them as issues.  Xcode already shows them in its jump bar.<br>&gt; <br>&gt; That said, I can see a use for #error, as Charlie shows downthread:<br>&gt; <br>&gt; #if os(OSX)<br>&gt; 	/// ...<br>&gt; #if os(Linux)<br>&gt; 	/// ...<br>&gt; #else<br>&gt; 	#error(&quot;This OS isn&#39;t supported yet.&quot;).<br>&gt; #endif<br>&gt; <br>&gt; -Chris<br></p><p>One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>just because they&#39;re kind of what we&#39;re used to already. A possible use case for warning:<br></p><p>#if canImport(Cocoa)<br>    #warning(&quot;Your UI will look bad. This code works under OS X but this library is intended for iOS-like environments&quot;)<br>#elseif !canImport(UIKit)<br>    #error(&quot;Unsupported target GUI&quot;)<br>#endif<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160529/d8f89322/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 29, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 29, 2016, at 12:58 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>&gt; just because they&#39;re kind of what we&#39;re used to already. <br></p><p>Right: it isn’t a bad thing at all, but it is certainly the case that people often request adding features to Swift that they see in other languages.  Our task is to look at whether the problem is real and significant enough to solve, and if the proposal solves it in the best possible way consistent with the rest of Swift.<br></p><p>An similar example is &quot;#pragma mark”.  Instead of introducing language support for it, we codified a comment marker (since it is semantically identical to a comment).  Xcode picks it up and does the right thing, and I think it has worked out well.<br></p><p>As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code.  Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br></p><p>This difference in policy is what makes me question where #warning makes sense for Swift.  OTOH, errors in Swift are used in exactly the same way as in C compilers, which is why bringing #error forward makes sense to me.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>May 29, 2016 at 06:00:00pm</p></header><div class="content"><p>+1 to #warning or optionally(?) emitting something like TODO: more visibly!<br></p><p>In past ObjC projects, I have used #warning to confirm the right macros were enabled.<br></p><p>I often (1) work around differences between the iOS simulator and device with TARGET_IPHONE_SIMULATOR (+similar) and (2) change API endpoints among sandbox, production, etc… (which may not relate to whether the open project is debug/release)<br>For instance, I have code like:<br>#if TARGET_IPHONE_SIMULATOR || API_DEBUG<br>[Declarations]<br>#warning DEBUG API: Do not release<br>#else<br>[Different declarations]<br>#endif<br></p><p>I check that release builds do not emit a “warning Do not release” before submitting/deploying.<br></p><p><br>I think it would be great if (1) lines/branches of Swift source with #warning or something like INDICATE: are highlighted and (2) FIXMEs, TODOs, warnings, etc… are emitted and put into the Issues Navigator of Xcode.<br></p><p>In the past, both of the above (line highlighting and the ease of checking the Issues Navigator for “warning: Do not release” in Xcode) were conducive to my sanity:<br>Issue highlighting from the last build seems more reliable than syntax highlighting. Xcode syntax highlighting colors (1) sometimes goes down (I’ve encountered SourceKit crashes pretty often) or (2) is wrong (perhaps macros weren’t detected correctly).<br>Also, while (3) using schemes and (4) seeing the -Doptions in the build command are useful, they are less visible by themselves.<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On May 29, 2016, at 4:20 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As to #warning, Swift’s use of warnings are significant different than the use in C. In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br>&gt; <br>&gt; This difference in policy is what makes me question where #warning makes sense for Swift.  OTOH, errors in Swift are used in exactly the same way as in C compilers, which is why bringing #error forward makes sense to me.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 29, 2016 at 07:00:00pm</p></header><div class="content"><p>Tools like SonarQube can raise a &quot;warning&quot; for comments started with &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be presented as warnings instead of using #warning? And this could be an optional setting as commented would not influence compilation.<br></p><p><br></p><p>-----Original Message-----<br>From: &quot;Will Stanton via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Sent: ‎29/‎05/‎2016 07:09 PM<br>To: &quot;Harlan Haskins&quot; &lt;harlan at harlanhaskins.com&gt;<br>Cc: &quot;swift-evolution&quot; &lt;swift-evolution at swift.org&gt;<br>Subject: Re: [swift-evolution] [Pitch] #warning<br></p><p>+1 to #warning or optionally(?) emitting something like TODO: more visibly!<br></p><p>In past ObjC projects, I have used #warning to confirm the right macros were enabled.<br></p><p>I often (1) work around differences between the iOS simulator and device with TARGET_IPHONE_SIMULATOR (+similar) and (2) change API endpoints among sandbox, production, etc… (which may not relate to whether the open project is debug/release)<br>For instance, I have code like:<br>#if TARGET_IPHONE_SIMULATOR || API_DEBUG<br>[Declarations]<br>#warning DEBUG API: Do not release<br>#else<br>[Different declarations]<br>#endif<br></p><p>I check that release builds do not emit a “warning Do not release” before submitting/deploying.<br></p><p><br>I think it would be great if (1) lines/branches of Swift source with #warning or something like INDICATE: are highlighted and (2) FIXMEs, TODOs, warnings, etc… are emitted and put into the Issues Navigator of Xcode.<br></p><p>In the past, both of the above (line highlighting and the ease of checking the Issues Navigator for “warning: Do not release” in Xcode) were conducive to my sanity:<br>Issue highlighting from the last build seems more reliable than syntax highlighting. Xcode syntax highlighting colors (1) sometimes goes down (I’ve encountered SourceKit crashes pretty often) or (2) is wrong (perhaps macros weren’t detected correctly).<br>Also, while (3) using schemes and (4) seeing the -Doptions in the build command are useful, they are less visible by themselves.<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On May 29, 2016, at 4:20 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As to #warning, Swift’s use of warnings are significant different than the use in C. In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br>&gt; <br>&gt; This difference in policy is what makes me question where #warning makes sense for Swift.  OTOH, errors in Swift are used in exactly the same way as in C compilers, which is why bringing #error forward makes sense to me.<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160529/a01e10b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>May 30, 2016 at 03:00:00pm</p></header><div class="content"><p>On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt; &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt; presented as warnings instead of using #warning? And this could be an<br>&gt; optional setting as commented would not influence compilation.<br>&gt;<br></p><p>It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>the language so that source kit, the swift compiler, and things like Xcode<br>would have a well defined thing to look for and extract information from.<br></p><p>I support this proposal and hope it can cover these typical use cases.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160530/e5234a1d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 30, 2016 at 06:00:00pm</p></header><div class="content"><p>I also think that we need standardized feature for todo/fixme in language, <br>so when you got one&#39;s code you can have all needed warnings the creator <br>wants to produce.<br>I.e. probably not some directive, but some kind of.. special comment? So <br>XCode/any 3rd party tools/IDE will know about this standardized format and <br>produce/show user-created &#39;warnings&#39; instead of compiler(as core team <br>against such warnings in compiler)<br></p><p>On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;<br>&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;     &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;     presented as warnings instead of using #warning? And this could be an<br>&gt;     optional setting as commented would not influence compilation.<br>&gt;<br>&gt;<br>&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt; would have a well defined thing to look for and extract information from.<br>&gt;<br>&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May 30, 2016 at 07:00:00pm</p></header><div class="content"><p>Something similar to #error seems to be already implemented ;)<br></p><p>#if os(iOS)<br>    import Error_sorryThisDoesntWorkOnIOSyet<br>#endif<br></p><p>I know it&#39;s a hack, but it works :) And the good thing is, there is no way to prevent these kind of hacks.. (but IMHO, #error would look nicer)<br></p><p>-Michael<br></p><p>&gt; Am 30.05.2016 um 17:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I also think that we need standardized feature for todo/fixme in language, so when you got one&#39;s code you can have all needed warnings the creator wants to produce.<br>&gt; I.e. probably not some directive, but some kind of.. special comment? So XCode/any 3rd party tools/IDE will know about this standardized format and produce/show user-created &#39;warnings&#39; instead of compiler(as core team against such warnings in compiler)<br>&gt; <br>&gt; On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;&gt;    &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;&gt;    presented as warnings instead of using #warning? And this could be an<br>&gt;&gt;    optional setting as commented would not influence compilation.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt;&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt;&gt; would have a well defined thing to look for and extract information from.<br>&gt;&gt; <br>&gt;&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;&gt; <br>&gt;&gt; -Shawn<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Hmm... and like `#warning` :<br></p><p>let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use <br>xxxx&quot; // some comments that you need to show<br></p><p>and we have a warning(unused value)! from compiler! with<br></p><p>WARNING at line 8, col 7: initialization of immutable value <br>&#39;TODO_WeNeedToMakeItFaster&#39; was never used; consider replacing with <br>assignment to &#39;_&#39; or removing it<br>   let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, <br>use xxxx&quot; // some comments that you need to show<br>   ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~<br></p><p>PROFIT :)<br></p><p>So.. don&#39;t we need normal solution ?<br></p><p>On 30.05.2016 20:33, Michael Peternell wrote:<br>&gt; Something similar to #error seems to be already implemented ;)<br>&gt;<br>&gt; #if os(iOS)<br>&gt;     import Error_sorryThisDoesntWorkOnIOSyet<br>&gt; #endif<br>&gt;<br>&gt; I know it&#39;s a hack, but it works :) And the good thing is, there is no way to prevent these kind of hacks.. (but IMHO, #error would look nicer)<br>&gt;<br>&gt; -Michael<br>&gt;<br>&gt;&gt; Am 30.05.2016 um 17:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; I also think that we need standardized feature for todo/fixme in language, so when you got one&#39;s code you can have all needed warnings the creator wants to produce.<br>&gt;&gt; I.e. probably not some directive, but some kind of.. special comment? So XCode/any 3rd party tools/IDE will know about this standardized format and produce/show user-created &#39;warnings&#39; instead of compiler(as core team against such warnings in compiler)<br>&gt;&gt;<br>&gt;&gt; On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;    Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;&gt;&gt;    &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;&gt;&gt;    presented as warnings instead of using #warning? And this could be an<br>&gt;&gt;&gt;    optional setting as commented would not influence compilation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt;&gt;&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt;&gt;&gt; would have a well defined thing to look for and extract information from.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b74cd4039f0c53145a186868ab569c0?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Josh Parmenter</string> &lt;jparmenter at vectorform.com&gt;<p>May 30, 2016 at 05:00:00pm</p></header><div class="content"><p>I think we do, because this solution is not really warning about what we need to warn about. Using an artifact of another warning is something that isn&#39;t really solving a problem (if we decide that having proper warning tags is a problem that needs to be solved).<br>The warning semantics for let someName and let _ may change later, then you are left with warnings that disappear and are never attended to.<br>Best<br>Josh<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 30, 2016, at 10:49, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hmm... and like `#warning` :<br>&gt; <br>&gt; let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt; <br>&gt; and we have a warning(unused value)! from compiler! with<br>&gt; <br>&gt; WARNING at line 8, col 7: initialization of immutable value &#39;TODO_WeNeedToMakeItFaster&#39; was never used; consider replacing with assignment to &#39;_&#39; or removing it<br>&gt;  let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt;  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~<br>&gt; <br>&gt; PROFIT :)<br>&gt; <br>&gt; So.. don&#39;t we need normal solution ?<br>&gt; <br>&gt;&gt; On 30.05.2016 20:33, Michael Peternell wrote:<br>&gt;&gt; Something similar to #error seems to be already implemented ;)<br>&gt;&gt; <br>&gt;&gt; #if os(iOS)<br>&gt;&gt;    import Error_sorryThisDoesntWorkOnIOSyet<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; I know it&#39;s a hack, but it works :) And the good thing is, there is no way to prevent these kind of hacks.. (but IMHO, #error would look nicer)<br>&gt;&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; Am 30.05.2016 um 17:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also think that we need standardized feature for todo/fixme in language, so when you got one&#39;s code you can have all needed warnings the creator wants to produce.<br>&gt;&gt;&gt; I.e. probably not some directive, but some kind of.. special comment? So XCode/any 3rd party tools/IDE will know about this standardized format and produce/show user-created &#39;warnings&#39; instead of compiler(as core team against such warnings in compiler)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;&gt;&gt;&gt;   &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;&gt;&gt;&gt;   presented as warnings instead of using #warning? And this could be an<br>&gt;&gt;&gt;&gt;   optional setting as commented would not influence compilation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt;&gt;&gt;&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt;&gt;&gt;&gt; would have a well defined thing to look for and extract information from.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 30, 2016 at 09:00:00pm</p></header><div class="content"><p>1. I don&#39;t think we&#39;ll lose &#39;unused value&#39; warning in future, probably <br>another warning could be found for this &#39;feature&#39; that definitely will not <br>be dropped.<br>2. The point was that currently we can &#39;emulate&#39; user-defined warnings *if <br>we really wants*. I believe we need special #warning or #userwarning or <br>whatever to emit such warning messages - when we want to be notified until <br>we fix this in release code or for other reason.<br></p><p>On 30.05.2016 20:58, Josh Parmenter wrote:<br>&gt; I think we do, because this solution is not really warning about what we need to warn about. Using an artifact of another warning is something that isn&#39;t really solving a problem (if we decide that having proper warning tags is a problem that needs to be solved).<br>&gt; The warning semantics for let someName and let _ may change later, then you are left with warnings that disappear and are never attended to.<br>&gt; Best<br>&gt; Josh<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On May 30, 2016, at 10:49, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hmm... and like `#warning` :<br>&gt;&gt;<br>&gt;&gt; let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt;&gt;<br>&gt;&gt; and we have a warning(unused value)! from compiler! with<br>&gt;&gt;<br>&gt;&gt; WARNING at line 8, col 7: initialization of immutable value &#39;TODO_WeNeedToMakeItFaster&#39; was never used; consider replacing with assignment to &#39;_&#39; or removing it<br>&gt;&gt;  let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt;&gt;  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~<br>&gt;&gt;<br>&gt;&gt; PROFIT :)<br>&gt;&gt;<br>&gt;&gt; So.. don&#39;t we need normal solution ?<br>&gt;&gt;<br>&gt;&gt;&gt; On 30.05.2016 20:33, Michael Peternell wrote:<br>&gt;&gt;&gt; Something similar to #error seems to be already implemented ;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; #if os(iOS)<br>&gt;&gt;&gt;    import Error_sorryThisDoesntWorkOnIOSyet<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I know it&#39;s a hack, but it works :) And the good thing is, there is no way to prevent these kind of hacks.. (but IMHO, #error would look nicer)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Am 30.05.2016 um 17:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I also think that we need standardized feature for todo/fixme in language, so when you got one&#39;s code you can have all needed warnings the creator wants to produce.<br>&gt;&gt;&gt;&gt; I.e. probably not some directive, but some kind of.. special comment? So XCode/any 3rd party tools/IDE will know about this standardized format and produce/show user-created &#39;warnings&#39; instead of compiler(as core team against such warnings in compiler)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;   Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;&gt;&gt;&gt;&gt;   &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;&gt;&gt;&gt;&gt;   presented as warnings instead of using #warning? And this could be an<br>&gt;&gt;&gt;&gt;&gt;   optional setting as commented would not influence compilation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt;&gt;&gt;&gt;&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt;&gt;&gt;&gt;&gt; would have a well defined thing to look for and extract information from.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 30, 2016 at 11:00:00pm</p></header><div class="content"><p>Btw, FWIW, regarding the state that some warning semantics can change later..<br></p><p>@warn_unused_result<br>func TODO()-&gt;Bool {return true}<br></p><p>Then in code:<br></p><p>TODO(/*Make it faster*/) // any comment you want<br></p><p>Will have:<br></p><p>WARNING at line 12, col 3: result of call to &#39;TODO()&#39; is unused<br>   TODO(/*Make it faster*/) // any comment you want<br></p><p>we have a user-defined warning + no initialization of any const + almost no <br>overhead even for release code.<br></p><p>On 30.05.2016 20:58, Josh Parmenter wrote:<br>&gt; I think we do, because this solution is not really warning about what we need to warn about. Using an artifact of another warning is something that isn&#39;t really solving a problem (if we decide that having proper warning tags is a problem that needs to be solved).<br>&gt; The warning semantics for let someName and let _ may change later, then you are left with warnings that disappear and are never attended to.<br>&gt; Best<br>&gt; Josh<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On May 30, 2016, at 10:49, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hmm... and like `#warning` :<br>&gt;&gt;<br>&gt;&gt; let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt;&gt;<br>&gt;&gt; and we have a warning(unused value)! from compiler! with<br>&gt;&gt;<br>&gt;&gt; WARNING at line 8, col 7: initialization of immutable value &#39;TODO_WeNeedToMakeItFaster&#39; was never used; consider replacing with assignment to &#39;_&#39; or removing it<br>&gt;&gt;  let TODO_WeNeedToMakeItFaster  = &quot;Current implementation is too slow, use xxxx&quot; // some comments that you need to show<br>&gt;&gt;  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~<br>&gt;&gt;<br>&gt;&gt; PROFIT :)<br>&gt;&gt;<br>&gt;&gt; So.. don&#39;t we need normal solution ?<br>&gt;&gt;<br>&gt;&gt;&gt; On 30.05.2016 20:33, Michael Peternell wrote:<br>&gt;&gt;&gt; Something similar to #error seems to be already implemented ;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; #if os(iOS)<br>&gt;&gt;&gt;    import Error_sorryThisDoesntWorkOnIOSyet<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I know it&#39;s a hack, but it works :) And the good thing is, there is no way to prevent these kind of hacks.. (but IMHO, #error would look nicer)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Am 30.05.2016 um 17:49 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I also think that we need standardized feature for todo/fixme in language, so when you got one&#39;s code you can have all needed warnings the creator wants to produce.<br>&gt;&gt;&gt;&gt; I.e. probably not some directive, but some kind of.. special comment? So XCode/any 3rd party tools/IDE will know about this standardized format and produce/show user-created &#39;warnings&#39; instead of compiler(as core team against such warnings in compiler)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On 30.05.2016 18:28, Shawn Erickson via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Sun, May 29, 2016 at 3:49 PM Leonardo Pessoa via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;   Tools like SonarQube can raise a &quot;warning&quot; for comments started with<br>&gt;&gt;&gt;&gt;&gt;   &quot;TODO:&quot; or &quot;FIXME:&quot;. Wouldn&#39;t it be more interesting if those could be<br>&gt;&gt;&gt;&gt;&gt;   presented as warnings instead of using #warning? And this could be an<br>&gt;&gt;&gt;&gt;&gt;   optional setting as commented would not influence compilation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It seems wise to me to have the concept of todo, fixme, etc. formalized in<br>&gt;&gt;&gt;&gt;&gt; the language so that source kit, the swift compiler, and things like Xcode<br>&gt;&gt;&gt;&gt;&gt; would have a well defined thing to look for and extract information from.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I support this proposal and hope it can cover these typical use cases.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; -Shawn<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>May 29, 2016 at 10:00:00pm</p></header><div class="content"><p>FWIW, I&#39;m also in favor of adding #error to the language. It would be good to express invariants that the compiler can&#39;t know about, like mutually exclusive build config options that affect code downstream.<br></p><p>I&#39;m definitely seeing how #warning might conflict with the goals of Swift&#39;s warnings.<br></p><p>If there&#39;s interest, I would be willing to transform this into a #error proposal.<br></p><p>- Harlan<br></p><p>On May 29, 2016, at 1:20 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On May 29, 2016, at 12:58 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>&gt;&gt; just because they&#39;re kind of what we&#39;re used to already.<br>&gt; <br>&gt; Right: it isn’t a bad thing at all, but it is certainly the case that people often request adding features to Swift that they see in other languages.  Our task is to look at whether the problem is real and significant enough to solve, and if the proposal solves it in the best possible way consistent with the rest of Swift.<br>&gt; <br>&gt; An similar example is &quot;#pragma mark”.  Instead of introducing language support for it, we codified a comment marker (since it is semantically identical to a comment).  Xcode picks it up and does the right thing, and I think it has worked out well.<br>&gt; <br>&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code.  Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br>&gt; <br>&gt; This difference in policy is what makes me question where #warning makes sense for Swift.  OTOH, errors in Swift are used in exactly the same way as in C compilers, which is why bringing #error forward makes sense to me.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 30, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. <br></p><p>The example I&#39;ve mentioned with #error, doesn&#39;t necessarily lead to an error, but can just issue a #warning(&quot;Untested OS, proceed carefully.&quot;) - it IMHO doesn&#39;t necessarily be fatal.<br></p><p>My issue with this being handled by Xcode (and generally with any feature discussed here that someone suggests it should be handled by Xcode) is that Xcode is the least customizable IDE I&#39;ve ever seen and from what I&#39;ve talked to some Xcode developers via bugreport.apple.com, they are not very keen on adding any customization features. But sadly I haven&#39;t found a better IDE.<br></p><p>Yes, I admit, I have abused #warning in the past (ObjC/C) to make sure I don&#39;t forget to implement something before shipping the product (usually during refactoring, so that I don&#39;t forget to come back and finish refactoring something). And with Swift, I have made TODO comments and of course, I&#39;ve forgotten about a few places. It makes you search for TODO or FIXME all the time. The jump bar is way too hidden and not visible, a developer can&#39;t be expected to open each file and go through the jump bar for each file...<br></p><p>So a solution for this would be for Xcode to provide an option to issue warnings for TODOs and FIXMEs - and we&#39;re back to warnings.<br></p><p>Charlie<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0411520c60ef1131670f84bb42dc8949?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Swift)</string> &lt;swift-callionica at callionica.com (Callionica&gt;<p>May 30, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;ve used custom warnings and errors in other languages and find them both<br>useful.<br></p><p>Forgive my ignorance, but does Swift have warning levels, warning IDs and<br>pragmas/build settings to disable specific warnings? If so, it would be<br>good to specify exactly how this feature interact with those.<br></p><p>For example, when viewing compiler messages produced by #warning/#error I<br>would expect there to be an indication (separate from the message produced)<br>that tells me what warning or error this is (in other words, an ID). The ID<br>is useful not just for humans reading or writing tools to parse build logs,<br>but also for connecting to external documentation describing the<br>warning/error in more detail, and for selectively disabling particular<br>warnings. If Swift has IDs for warnings and errors (surely?) then this<br>feature should too.<br></p><p>-- Callionica<br>​<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160530/30c0945e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 30, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 29, 2016, at 10:36 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt;&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. <br>&gt; <br>&gt; The example I&#39;ve mentioned with #error, doesn&#39;t necessarily lead to an error, but can just issue a #warning(&quot;Untested OS, proceed carefully.&quot;) - it IMHO doesn&#39;t necessarily be fatal.<br></p><p>This doesn’t make sense to me.  If the code is untested, then it should definitely be audited and check if it is enabled.  A #error is the perfect approach for this case.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a9841be165fb834d08296761b4a32e3?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Christopher Kornher</string> &lt;ckornher at me.com&gt;<p>May 30, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 30, 2016, at 2:35 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 29, 2016, at 10:36 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. <br>&gt;&gt; <br>&gt;&gt; The example I&#39;ve mentioned with #error, doesn&#39;t necessarily lead to an error, but can just issue a #warning(&quot;Untested OS, proceed carefully.&quot;) - it IMHO doesn&#39;t necessarily be fatal.<br>&gt; <br>&gt; This doesn’t make sense to me.  If the code is untested, then it should definitely be audited and check if it is enabled.  A #error is the perfect approach for this case.<br></p><p>I have used warnings in other languages when “bringing-up” large code bases. Using a #warning facility is helpful at these times. Counting the messages provides a metric for unresolved questions. I don’t fully understand Chris’s objection to a warning compiler directive, so I cannot comment on that. A ‘Mark’ - like comment format would be almost as good.<br></p><p>There is a problem with ‘magic’ comment formats, though. Recently I have had issues with mistyping “// MARK”. IIRC, “// mark” is not recognized. Compiler directives do not have this problem. In Objective-C “#pragma marl&quot; is a compiler error. In swift, “// MARL” is silently treated as a plain comment.<br></p><p><br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 31, 2016 at 06:00:00pm</p></header><div class="content"><p>The way I see it and would use it:<br></p><p>Directives:<br></p><p>#error - fatal error, the binary shouldn&#39;t compile - e.g. unknown OS host and the code depends on underlying OS features.<br></p><p>#warning - it is a big deal, but allow the binary to compile for testing. E.g. you know some feature isn&#39;t implemented yet and you want a warning so that you don&#39;t forget to implement it before releasing it to the public. Or as someone has mentioned (I have used #warning like this as well), have a warning for internal builds so that you don&#39;t accidently upload an internal build to AppStore (happened to me more than once).<br></p><p>Comments:<br></p><p>TODO - something that would enhance or improve the app, but the current behavior is sufficient for release. E.g. &quot;TODO - refactor this code&quot;, &quot;TODO - think of a better name for this function&quot; - it&#39;s not fatal, crucial to the app, but is &quot;nice to have&quot;.<br></p><p>FIXME - place in code that is known to underperform or fail in certain situations, but these situations are rather rare and aren&#39;t critical. E.g. &quot;FIXME - when there are 20 000 rows in this table view, it is slow&quot;, &quot;FIXME - when run from a read-only volume, this behaves weirdly&quot;.<br></p><p>One may argue that the comment-based markings can be handled by the IDE, but IMO transferring language features onto IDE is wrong. These comments do not appear anywhere within the log when the code is compiled.<br></p><p>Comments are IMO &quot;silent/soft&quot; warnings that are good to go through when you have nothing else to do and look for a way to fix minor issues within the app. But when you get those mixed with larger issues such as &quot;missing feature, do not release without it!&quot;, you can get a long list and not notice the important ones on that list. Not to mention you need to currently search for these manually each time.<br></p><p>Charlie<br></p><p><br>&gt; On May 30, 2016, at 10:57 PM, Christopher Kornher via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 30, 2016, at 2:35 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 29, 2016, at 10:36 PM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The example I&#39;ve mentioned with #error, doesn&#39;t necessarily lead to an error, but can just issue a #warning(&quot;Untested OS, proceed carefully.&quot;) - it IMHO doesn&#39;t necessarily be fatal.<br>&gt;&gt; <br>&gt;&gt; This doesn’t make sense to me.  If the code is untested, then it should definitely be audited and check if it is enabled.  A #error is the perfect approach for this case.<br>&gt; <br>&gt; I have used warnings in other languages when “bringing-up” large code bases. Using a #warning facility is helpful at these times. Counting the messages provides a metric for unresolved questions. I don’t fully understand Chris’s objection to a warning compiler directive, so I cannot comment on that. A ‘Mark’ - like comment format would be almost as good.<br>&gt; <br>&gt; There is a problem with ‘magic’ comment formats, though. Recently I have had issues with mistyping “// MARK”. IIRC, “// mark” is not recognized. Compiler directives do not have this problem. In Objective-C “#pragma marl&quot; is a compiler error. In swift, “// MARL” is silently treated as a plain comment.<br>&gt; <br>&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/328ddd3c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>Thank you Charlie, just exactly what I think regarding all these <br>#errors/#warnings/comments etc<br></p><p>On 31.05.2016 19:53, Charlie Monroe via swift-evolution wrote:<br>&gt; The way I see it and would use it:<br>&gt;<br>&gt; Directives:<br>&gt;<br>&gt; *#error* - fatal error, the binary shouldn&#39;t compile - e.g. unknown OS host<br>&gt; and the code depends on underlying OS features.<br>&gt;<br>&gt; *#warning* - it is a big deal, but allow the binary to compile for testing.<br>&gt; E.g. you know some feature isn&#39;t implemented yet and you want a warning so<br>&gt; that you don&#39;t forget to implement it before releasing it to the public. Or<br>&gt; as someone has mentioned (I have used #warning like this as well), have a<br>&gt; warning for internal builds so that you don&#39;t accidently upload an internal<br>&gt; build to AppStore (happened to me more than once).<br>&gt;<br>&gt; Comments:<br>&gt;<br>&gt; *TODO* - something that would enhance or improve the app, but the current<br>&gt; behavior is sufficient for release. E.g. &quot;TODO - refactor this code&quot;, &quot;TODO<br>&gt; - think of a better name for this function&quot; - it&#39;s not fatal, crucial to<br>&gt; the app, but is &quot;nice to have&quot;.<br>&gt;<br>&gt; *FIXME* - place in code that is known to underperform or fail in certain<br>&gt; situations, but these situations are rather rare and aren&#39;t critical. E.g.<br>&gt; &quot;FIXME - when there are 20 000 rows in this table view, it is slow&quot;, &quot;FIXME<br>&gt; - when run from a read-only volume, this behaves weirdly&quot;.<br>&gt;<br>&gt; One may argue that the comment-based markings can be handled by the IDE,<br>&gt; but IMO transferring language features onto IDE is wrong. These comments do<br>&gt; not appear anywhere within the log when the code is compiled.<br>&gt;<br>&gt; Comments are IMO &quot;silent/soft&quot; warnings that are good to go through when<br>&gt; you have nothing else to do and look for a way to fix minor issues within<br>&gt; the app. But when you get those mixed with larger issues such as &quot;missing<br>&gt; feature, do not release without it!&quot;, you can get a long list and not<br>&gt; notice the important ones on that list. Not to mention you need to<br>&gt; currently search for these manually each time.<br>&gt;<br>&gt; Charlie<br>&gt;<br>&gt;<br>&gt;&gt; On May 30, 2016, at 10:57 PM, Christopher Kornher via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On May 30, 2016, at 2:35 PM, Chris Lattner via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 29, 2016, at 10:36 PM, Charlie Monroe &lt;charlie at charliemonroe.net<br>&gt;&gt;&gt;&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As to #warning, Swift’s use of warnings are significant different than<br>&gt;&gt;&gt;&gt;&gt; the use in C.  In C compilers, many of the warnings produced *should*<br>&gt;&gt;&gt;&gt;&gt; be errors, but can’t be because that effects language conformance and<br>&gt;&gt;&gt;&gt;&gt; could break a large body of code.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The example I&#39;ve mentioned with #error, doesn&#39;t necessarily lead to an<br>&gt;&gt;&gt;&gt; error, but can just issue a #warning(&quot;Untested OS, proceed carefully.&quot;)<br>&gt;&gt;&gt;&gt; - it IMHO doesn&#39;t necessarily be fatal.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This doesn’t make sense to me.  If the code is untested, then it should<br>&gt;&gt;&gt; definitely be audited and check if it is enabled.  A #error is the<br>&gt;&gt;&gt; perfect approach for this case.<br>&gt;&gt;<br>&gt;&gt; I have used warnings in other languages when “bringing-up” large code<br>&gt;&gt; bases. Using a #warning facility is helpful at these times. Counting the<br>&gt;&gt; messages provides a metric for unresolved questions. I don’t fully<br>&gt;&gt; understand Chris’s objection to a warning compiler directive, so I cannot<br>&gt;&gt; comment on that. A ‘Mark’ - like comment format would be almost as good.<br>&gt;&gt;<br>&gt;&gt; There is a problem with ‘magic’ comment formats, though. Recently I have<br>&gt;&gt; had issues with mistyping “// MARK”. IIRC, “// mark” is not recognized.<br>&gt;&gt; Compiler directives do not have this problem. In Objective-C “#pragma<br>&gt;&gt; marl&quot; is a compiler error. In swift, “// MARL” is silently treated as a<br>&gt;&gt; plain comment.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; -Chris<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 31 May 2016, at 18:53, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The way I see it and would use it:<br>&gt; <br>&gt; Directives:<br>&gt; <br>&gt; #error - fatal error, the binary shouldn&#39;t compile - e.g. unknown OS host and the code depends on underlying OS features.<br>&gt; <br>&gt; #warning - it is a big deal, but allow the binary to compile for testing. E.g. you know some feature isn&#39;t implemented yet and you want a warning so that you don&#39;t forget to implement it before releasing it to the public. Or as someone has mentioned (I have used #warning like this as well), have a warning for internal builds so that you don&#39;t accidently upload an internal build to AppStore (happened to me more than once).<br>&gt; <br>&gt; Comments:<br>&gt; <br>&gt; TODO - something that would enhance or improve the app, but the current behavior is sufficient for release. E.g. &quot;TODO - refactor this code&quot;, &quot;TODO - think of a better name for this function&quot; - it&#39;s not fatal, crucial to the app, but is &quot;nice to have&quot;.<br>&gt; <br>&gt; FIXME - place in code that is known to underperform or fail in certain situations, but these situations are rather rare and aren&#39;t critical. E.g. &quot;FIXME - when there are 20 000 rows in this table view, it is slow&quot;, &quot;FIXME - when run from a read-only volume, this behaves weirdly&quot;.<br>&gt; <br>&gt; One may argue that the comment-based markings can be handled by the IDE, but IMO transferring language features onto IDE is wrong. These comments do not appear anywhere within the log when the code is compiled.<br></p><p><br>Something that is inside a comment is not a language feature by definition. <br></p><p>Upthread, somebody posted a link to this script<br></p><p>TAGS=&quot;TODO:|FIXME:&quot;<br>echo &quot;searching ${SRCROOT} for ${TAGS}&quot;<br>find &quot;${SRCROOT}&quot; \( -name &quot;*.swift&quot; \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching &quot;($TAGS).*\$&quot; | perl -p -e &quot;s/($TAGS)/ warning: \$1/“<br></p><p>which works like a charm with Xcode as a run script build phase and can easily be adapted to any build system where running a shell script is possible.<br></p><p>It’s also easily extensible. If we add compiler support for certain patterns of comments, then many other patterns that projects might like to use are unavailable e.g. I’ve seen // XXX: Fix me!<br></p><p>So I would be against the compiler parsing comments for TODOs and FIXMEs.<br></p><p>However, I do recognise that frequently such things do not necessarily merit flagging as a warning but would benefit from some compiler support, so why not introduce an extra level of compiler output message that is lower than a warning. Don’t know what I would call it, I’d probably take a leaf out of the syslog book.<br></p><p>e.g.<br></p><p>#error This source code is not supported on your platform<br></p><p>#warning I haven’t validated that this force unwrapped variable really is not nil<br></p><p>#info This is where we’ll call frobnicate once the phalange grommet feature is added.<br></p><p>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  1, 2016 at 04:00:00pm</p></header><div class="content"><p>On Jun 1, 2016, at 3:56 AM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; One may argue that the comment-based markings can be handled by the IDE, but IMO transferring language features onto IDE is wrong. These comments do not appear anywhere within the log when the code is compiled.<br>&gt; <br>&gt; <br>&gt; Something that is inside a comment is not a language feature by definition. <br></p><p>You realize that both Clang and Swift parses structured doc comments?  Comments are an important part of the language, just like any other syntax.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 31, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br></p><p>That sounds an awful lot like the way Xcode&#39;s templates use warnings:<br></p><p>	func tableView(_ tableView: UITableView, numerOfRowsInSection section: Int) -&gt; Int {<br>		#warning &quot;Implement something useful here.&quot;<br>		return 0<br>	}<br></p><p>(Incidentally, I prefer `#warning` to `#warning(_:)` here, because I think of the parentheses forms as expressions.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 29, 2016, at 13:20, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On May 29, 2016, at 12:58 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>&gt;&gt; just because they&#39;re kind of what we&#39;re used to already. <br>&gt; <br>&gt; Right: it isn’t a bad thing at all, but it is certainly the case that people often request adding features to Swift that they see in other languages.  Our task is to look at whether the problem is real and significant enough to solve, and if the proposal solves it in the best possible way consistent with the rest of Swift.<br>&gt; <br>&gt; An similar example is &quot;#pragma mark”.  Instead of introducing language support for it, we codified a comment marker (since it is semantically identical to a comment).  Xcode picks it up and does the right thing, and I think it has worked out well.<br>&gt; <br>&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code.  Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br></p><p>This sounds exactly like what I’d use #warning for. “I’m in the middle of a big refactoring, and I haven’t gotten to this part yet; let me put a warning in so I can test the other part but won’t forget to come back to it.” It might also make sense for doing a series of commits on a branch when you need to fix something before merging back to trunk.<br></p><p>I think it is important for such diagnostics to show up in compilation, not just in IDEs, especially with people using the Swift Package Manager. We could have the compiler parse every comment looking for TODOs and FIXMEs by default, and emit those as warnings, but I’d want to find out if that creates a noticeable difference in parsing time. (It also seems odd that comments would be controlled by #if, but maybe that’s silly.)<br></p><p>+1 to the proposal from me, though I agree with Brent that the parentheses don’t feel right. This is closer to #if and #setline than #available and #selector.<br></p><p>Jordan<br></p><p>P.S. #error is also interesting, but more for “things that should never happen” (like the else branch of a platform check), which makes it a bit less important. #info/#message can be useful but I’d like to see a concrete case before designing it.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/4ae2f831/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecb50a99bf3b4cc0249312945dce7115?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Ben Langmuir</string> &lt;blangmuir at apple.com&gt;<p>June  1, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 1, 2016, at 10:54 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 29, 2016, at 13:20, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 29, 2016, at 12:58 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>&gt;&gt;&gt; just because they&#39;re kind of what we&#39;re used to already. <br>&gt;&gt; <br>&gt;&gt; Right: it isn’t a bad thing at all, but it is certainly the case that people often request adding features to Swift that they see in other languages.  Our task is to look at whether the problem is real and significant enough to solve, and if the proposal solves it in the best possible way consistent with the rest of Swift.<br>&gt;&gt; <br>&gt;&gt; An similar example is &quot;#pragma mark”.  Instead of introducing language support for it, we codified a comment marker (since it is semantically identical to a comment).  Xcode picks it up and does the right thing, and I think it has worked out well.<br>&gt;&gt; <br>&gt;&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code.  Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br>&gt; <br>&gt; This sounds exactly like what I’d use #warning for. “I’m in the middle of a big refactoring, and I haven’t gotten to this part yet; let me put a warning in so I can test the other part but won’t forget to come back to it.” It might also make sense for doing a series of commits on a branch when you need to fix something before merging back to trunk.<br></p><p>+1 to the proposal, and Jordan has captured my feelings very well here so I won’t repeat him.<br></p><p>&gt; <br>&gt; I think it is important for such diagnostics to show up in compilation, not just in IDEs, especially with people using the Swift Package Manager. We could have the compiler parse every comment looking for TODOs and FIXMEs by default, and emit those as warnings, but I’d want to find out if that creates a noticeable difference in parsing time. (It also seems odd that comments would be controlled by #if, but maybe that’s silly.)<br>&gt; <br>&gt; +1 to the proposal from me, though I agree with Brent that the parentheses don’t feel right. This is closer to #if and #setline than #available and #selector.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; P.S. #error is also interesting, but more for “things that should never happen” (like the else branch of a platform check), which makes it a bit less important. #info/#message can be useful but I’d like to see a concrete case before designing it.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160601/83c416da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>June  2, 2016 at 05:00:00pm</p></header><div class="content"><p>Based on the feedback from this list, I’ve submitted a revised proposal as PR #353.<br></p><p>https://github.com/apple/swift-evolution/pull/353<br></p><p>Thanks,<br>Harlan<br></p><p>&gt; On Jun 1, 2016, at 9:25 PM, Ben Langmuir via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jun 1, 2016, at 10:54 AM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 29, 2016, at 13:20, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 29, 2016, at 12:58 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; One could make a weak argument that #warning/#error/#message make a nice family of flexible alerts<br>&gt;&gt;&gt;&gt; just because they&#39;re kind of what we&#39;re used to already. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right: it isn’t a bad thing at all, but it is certainly the case that people often request adding features to Swift that they see in other languages.  Our task is to look at whether the problem is real and significant enough to solve, and if the proposal solves it in the best possible way consistent with the rest of Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; An similar example is &quot;#pragma mark”.  Instead of introducing language support for it, we codified a comment marker (since it is semantically identical to a comment).  Xcode picks it up and does the right thing, and I think it has worked out well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As to #warning, Swift’s use of warnings are significant different than the use in C.  In C compilers, many of the warnings produced *should* be errors, but can’t be because that effects language conformance and could break a large body of code.  Swift doesn’t have this problem, so it treats warnings as “things that should be addressed before you commit your patch, but shouldn’t block a build if (e.g.) you’re in the middle of a big refactoring”.  For example, an unused variables is a warning in Swift.<br>&gt;&gt; <br>&gt;&gt; This sounds exactly like what I’d use #warning for. “I’m in the middle of a big refactoring, and I haven’t gotten to this part yet; let me put a warning in so I can test the other part but won’t forget to come back to it.” It might also make sense for doing a series of commits on a branch when you need to fix something before merging back to trunk.<br>&gt; <br>&gt; +1 to the proposal, and Jordan has captured my feelings very well here so I won’t repeat him.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; I think it is important for such diagnostics to show up in compilation, not just in IDEs, especially with people using the Swift Package Manager. We could have the compiler parse every comment looking for TODOs and FIXMEs by default, and emit those as warnings, but I’d want to find out if that creates a noticeable difference in parsing time. (It also seems odd that comments would be controlled by #if, but maybe that’s silly.)<br>&gt;&gt; <br>&gt;&gt; +1 to the proposal from me, though I agree with Brent that the parentheses don’t feel right. This is closer to #if and #setline than #available and #selector.<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt;&gt; <br>&gt;&gt; P.S. #error is also interesting, but more for “things that should never happen” (like the else branch of a platform check), which makes it a bit less important. #info/#message can be useful but I’d like to see a concrete case before designing it.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160602/e6544cfd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d972db2b6ee8b77746ce7122663eb4f8?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Robert Widmann</string> &lt;rwidmann at apple.com&gt;<p>May 28, 2016 at 05:00:00pm</p></header><div class="content"><p>+1.  This is definitely a useful feature to have and helps advance a clear and common pattern among programmers in general.<br></p><p>&gt; On May 28, 2016, at 4:58 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; Hey everyone,<br>&gt; <br>&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as it stands, and it’s pretty nice to work with.<br>&gt; <br>&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt; <br>&gt; — Harlan Haskins<br>&gt; <br>&gt; <br>&gt; <br>&gt; #warning<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;<br>&gt; Status: Awaiting review &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#rationale&gt;<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#introduction&gt;Introduction<br>&gt; <br>&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source code, but there currently isn&#39;t a supported facility to make these visible. People have implemented special workarounds &lt;https://bendodson.com/weblog/2014/10/02/showing-todo-as-warning-in-swift-xcode-project/&gt; to coax Xcode into emitting TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#motivation&gt;Motivation<br>&gt; <br>&gt; A #warning is for something you intend to fix before submitting your code or for writing future tasks that you or your teammates intend to complete later. Because this is such a common programming pattern, Swift should have a similar facility.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic with the contents, pointing to the start of the message.<br>&gt; <br>&gt; func configPath() -&gt; String {<br>&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load this more safely}}<br>&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt; }<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#detailed-design&gt;Detailed design<br>&gt; <br>&gt; This will add two new productions to the Swift grammar:<br>&gt; <br>&gt; compiler-control-statement → warning-directive<br>&gt; warning-directive → #warning( static-string-literal )<br>&gt; Upon parsing this statement, the Swift compiler will immediately emit a warning and discard the statement.<br>&gt; <br>&gt; If a #warning exists inside a branch of a #if statement that is not taken, then no warning is emitted.<br>&gt; <br>&gt; #if false<br>&gt; #warning(“This won’t exist”)<br>&gt; #endif<br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; This change is purely additive; no migration will be required.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/bfe2d56d7655c5bfdb1855eaf00addb4#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; We could do some kind of comment-parsing based approach to surface TODOs and FIXMEs, but #warning serves as a general-purpose facility for reporting at compile time. Plus, not all TODO or FIXME comments should surface as warnings in the source.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p><br></p><p>~Robert Widmann<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160528/9442425e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 31, 2016 at 01:00:00pm</p></header><div class="content"><p>In your alternatives considered, you mention &quot;not all TODO or FIXME<br>comments should surface&quot; but I think the opposite: if I want these<br>types of comments to be seen as warnings by the compiler I cannot<br>choose which will surface and which not. It would be the same as<br>saying &quot;hey, but I don&#39;t want all #warnings to surface or I may have a<br>lot in my list&quot; too. Most programming languages work with these &quot;tags&quot;<br>(should we call them that?) in comments and offer to show you where<br>these are when you want to see them. Perhaps that&#39;s what you&#39;re saying<br>not all of them should surface but if you meant other things that<br>should be tagged like this and not surface, you should consider using<br>a different tag that will not surface.<br></p><p>Furthermore, I believe these tags are merely informational and should<br>not be the reason for using #warnings. Perhaps a comment analysis<br>pointing out where in your project you have tagged comments should<br>suffice. That would also solve the issue of misspelling the tag as<br>FIXME and FIXEM would both show in. And if you don&#39;t want to care<br>about FIXME tags at a certain time you could tell the IDE to skip them<br>and FIXEM will surface making you realise you misspelled it.<br></p><p>L<br></p><p>On 28 May 2016 at 21:55, Robert Widmann via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; +1.  This is definitely a useful feature to have and helps advance a clear<br>&gt; and common pattern among programmers in general.<br>&gt;<br>&gt; On May 28, 2016, at 4:58 PM, Harlan Haskins via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hey everyone,<br>&gt;<br>&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as<br>&gt; it stands, and it’s pretty nice to work with.<br>&gt;<br>&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt;<br>&gt; — Harlan Haskins<br>&gt;<br>&gt;<br>&gt;<br>&gt; #warning<br>&gt;<br>&gt; Proposal: SE-NNNN<br>&gt; Author: Harlan Haskins<br>&gt; Status: Awaiting review<br>&gt; Review manager: TBD<br>&gt;<br>&gt; Introduction<br>&gt;<br>&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source<br>&gt; code, but there currently isn&#39;t a supported facility to make these visible.<br>&gt; People have implemented special workarounds to coax Xcode into emitting<br>&gt; TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide<br>&gt; arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt;<br>&gt; Motivation<br>&gt;<br>&gt; A #warning is for something you intend to fix before submitting your code or<br>&gt; for writing future tasks that you or your teammates intend to complete<br>&gt; later. Because this is such a common programming pattern, Swift should have<br>&gt; a similar facility.<br>&gt;<br>&gt; Proposed solution<br>&gt;<br>&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic<br>&gt; with the contents, pointing to the start of the message.<br>&gt;<br>&gt; func configPath() -&gt; String {<br>&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load<br>&gt; this more safely}}<br>&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt; }<br>&gt;<br>&gt; Detailed design<br>&gt;<br>&gt; This will add two new productions to the Swift grammar:<br>&gt;<br>&gt; compiler-control-statement → warning-directive<br>&gt; warning-directive → #warning( static-string-literal )<br>&gt;<br>&gt; Upon parsing this statement, the Swift compiler will immediately emit a<br>&gt; warning and discard the statement.<br>&gt;<br>&gt; If a #warning exists inside a branch of a #if statement that is not taken,<br>&gt; then no warning is emitted.<br>&gt;<br>&gt; #if false<br>&gt; #warning(“This won’t exist”)<br>&gt; #endif<br>&gt;<br>&gt; Impact on existing code<br>&gt;<br>&gt; This change is purely additive; no migration will be required.<br>&gt;<br>&gt; Alternatives considered<br>&gt;<br>&gt; We could do some kind of comment-parsing based approach to surface TODOs and<br>&gt; FIXMEs, but #warning serves as a general-purpose facility for reporting at<br>&gt; compile time. Plus, not all TODO or FIXME comments should surface as<br>&gt; warnings in the source.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a06dd7924588141b9c907543798c2524?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Gwendal Roué</string> &lt;gwendal.roue at gmail.com&gt;<p>May 31, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Le 31 mai 2016 à 18:31, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; In your alternatives considered, you mention &quot;not all TODO or FIXME<br>&gt; comments should surface&quot; but I think the opposite<br></p><p>Well, use #warning TODO, then. The proposal works well with several coding habits, including yours. This is good.<br></p><p>Gwendal Roué<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 31, 2016 at 02:00:00pm</p></header><div class="content"><p>That&#39;s not what I meant. It&#39;s actually the opposite of what I meant. I<br>don&#39;t know if it&#39;s the right thing to do to use #warnings as comments<br>for things do-to or fix.<br></p><p>On 31 May 2016 at 13:42, Gwendal Roué &lt;gwendal.roue at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; Le 31 mai 2016 à 18:31, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;<br>&gt;&gt; In your alternatives considered, you mention &quot;not all TODO or FIXME<br>&gt;&gt; comments should surface&quot; but I think the opposite<br>&gt;<br>&gt; Well, use #warning TODO, then. The proposal works well with several coding habits, including yours. This is good.<br>&gt;<br>&gt; Gwendal Roué<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] #warning</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May 31, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Furthermore, I believe these tags are merely informational and should<br> &gt; not be the reason for using #warnings. Perhaps a comment analysis<br> &gt; pointing out where in your project you have tagged comments should<br> &gt; suffice. That would also solve the issue of misspelling the tag as<br> &gt; FIXME and FIXEM would both show in. And if you don&#39;t want to care<br> &gt; about FIXME tags at a certain time you could tell the IDE to skip them<br> &gt; and FIXEM will surface making you realise you misspelled it.<br></p><p>There is some feature of #warning that could not be covered by tagged <br>comments: #warning could be between `#if` .. `#endif` and so could be <br>raised depends on condition. Comment is just a comment, I think no tool <br>will detect if such comment is in #if..#endif or not. You&#39;ll see all tagged <br>comments.<br>I.e. it seems like #warning and tagged comments two separate features.<br></p><p>Again, if I *believe* I really need to raise a user-defined warning in some <br>situation, I&#39;ll use something like this:<br></p><p>@warn_unused_result<br>func TODO()-&gt;Bool {return true}<br></p><p>and then in code:<br>TODO(/*My user-defined warning*/)<br>but I don&#39;t think this is the best solution, so I like #warning<br></p><p>On 31.05.2016 19:31, Leonardo Pessoa via swift-evolution wrote:<br>&gt; In your alternatives considered, you mention &quot;not all TODO or FIXME<br>&gt; comments should surface&quot; but I think the opposite: if I want these<br>&gt; types of comments to be seen as warnings by the compiler I cannot<br>&gt; choose which will surface and which not. It would be the same as<br>&gt; saying &quot;hey, but I don&#39;t want all #warnings to surface or I may have a<br>&gt; lot in my list&quot; too. Most programming languages work with these &quot;tags&quot;<br>&gt; (should we call them that?) in comments and offer to show you where<br>&gt; these are when you want to see them. Perhaps that&#39;s what you&#39;re saying<br>&gt; not all of them should surface but if you meant other things that<br>&gt; should be tagged like this and not surface, you should consider using<br>&gt; a different tag that will not surface.<br>&gt;<br>&gt; Furthermore, I believe these tags are merely informational and should<br>&gt; not be the reason for using #warnings. Perhaps a comment analysis<br>&gt; pointing out where in your project you have tagged comments should<br>&gt; suffice. That would also solve the issue of misspelling the tag as<br>&gt; FIXME and FIXEM would both show in. And if you don&#39;t want to care<br>&gt; about FIXME tags at a certain time you could tell the IDE to skip them<br>&gt; and FIXEM will surface making you realise you misspelled it.<br>&gt;<br>&gt; L<br>&gt;<br>&gt; On 28 May 2016 at 21:55, Robert Widmann via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; +1.  This is definitely a useful feature to have and helps advance a clear<br>&gt;&gt; and common pattern among programmers in general.<br>&gt;&gt;<br>&gt;&gt; On May 28, 2016, at 4:58 PM, Harlan Haskins via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hey everyone,<br>&gt;&gt;<br>&gt;&gt; I’m working on a draft for #warning in Swift. I’ve implemented the draft as<br>&gt;&gt; it stands, and it’s pretty nice to work with.<br>&gt;&gt;<br>&gt;&gt; I’ve pasted it below, and I’d love some feedback! Thanks!<br>&gt;&gt;<br>&gt;&gt; — Harlan Haskins<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; #warning<br>&gt;&gt;<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Author: Harlan Haskins<br>&gt;&gt; Status: Awaiting review<br>&gt;&gt; Review manager: TBD<br>&gt;&gt;<br>&gt;&gt; Introduction<br>&gt;&gt;<br>&gt;&gt; It&#39;s really common for developers to add TODO/FIXME comments in their source<br>&gt;&gt; code, but there currently isn&#39;t a supported facility to make these visible.<br>&gt;&gt; People have implemented special workarounds to coax Xcode into emitting<br>&gt;&gt; TODOs and FIXMEs as warnings, but there isn&#39;t an accessible way to provide<br>&gt;&gt; arbitrary warnings, and does not work in a non-Xcode environment.<br>&gt;&gt;<br>&gt;&gt; Motivation<br>&gt;&gt;<br>&gt;&gt; A #warning is for something you intend to fix before submitting your code or<br>&gt;&gt; for writing future tasks that you or your teammates intend to complete<br>&gt;&gt; later. Because this is such a common programming pattern, Swift should have<br>&gt;&gt; a similar facility.<br>&gt;&gt;<br>&gt;&gt; Proposed solution<br>&gt;&gt;<br>&gt;&gt; Add #warning(_:) as a new compiler directive that emits a warning diagnostic<br>&gt;&gt; with the contents, pointing to the start of the message.<br>&gt;&gt;<br>&gt;&gt; func configPath() -&gt; String {<br>&gt;&gt;   #warning(&quot;TODO: load this more safely&quot;) // expected-warning {{TODO: load<br>&gt;&gt; this more safely}}<br>&gt;&gt;   return Bundle.main().path(forResource: &quot;Config&quot;, ofType: &quot;plist&quot;)!<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Detailed design<br>&gt;&gt;<br>&gt;&gt; This will add two new productions to the Swift grammar:<br>&gt;&gt;<br>&gt;&gt; compiler-control-statement → warning-directive<br>&gt;&gt; warning-directive → #warning( static-string-literal )<br>&gt;&gt;<br>&gt;&gt; Upon parsing this statement, the Swift compiler will immediately emit a<br>&gt;&gt; warning and discard the statement.<br>&gt;&gt;<br>&gt;&gt; If a #warning exists inside a branch of a #if statement that is not taken,<br>&gt;&gt; then no warning is emitted.<br>&gt;&gt;<br>&gt;&gt; #if false<br>&gt;&gt; #warning(“This won’t exist”)<br>&gt;&gt; #endif<br>&gt;&gt;<br>&gt;&gt; Impact on existing code<br>&gt;&gt;<br>&gt;&gt; This change is purely additive; no migration will be required.<br>&gt;&gt;<br>&gt;&gt; Alternatives considered<br>&gt;&gt;<br>&gt;&gt; We could do some kind of comment-parsing based approach to surface TODOs and<br>&gt;&gt; FIXMEs, but #warning serves as a general-purpose facility for reporting at<br>&gt;&gt; compile time. Plus, not all TODO or FIXME comments should surface as<br>&gt;&gt; warnings in the source.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ~Robert Widmann<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
