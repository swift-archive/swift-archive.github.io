<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Ambiguous parsing of `return`</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>June  6, 2016 at 10:00:00am</p></header><div class="content"><p>Someone on another forum (not directly related to Swift) just mentioned running into a confusing situation where they had added an early `return` to a method for testing purposes, in order to disable the code following it:<br></p><p>func myFunc() {<br>        // some code<br>        return<br>        cache.removeAll()<br>        // more code that is now skipped.<br>}<br></p><p>Unexpectedly, the line following the `return` still got executed, so &quot;I couldn&#39;t figure out why my cache kept getting zapped.”<br></p><p>Turns out the Swift parser is interpreting this as `return cache.removeAll()`, which works because that expression returns void, which matches the function’s return type.<br></p><p>This seems like a case where the parser is playing by the rules, but the result is not what a human would expect. It would be better for a `return` on a line by itself to be parsed as a complete statement, without continuing to the next line. Is this already a known issue?<br></p><p>—Jens<br></p><p>PS: I’m sure someone will point out that adding an early return like this is sub-optimal, and the compiler could warn that the code following is unreachable. Which is true, and I use comments to disable code in situations like this. But I’m sure this developer’s not the only one who adds `return` instead.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/8bfa00cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>Ambiguous parsing of `return`</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>June  6, 2016 at 11:00:00am</p></header><div class="content"><p>Sub-optimal or not, I’d call that unexpected behavior.<br></p><p>Does it make more sense to ensure return doesn’t take an argument in a function returning void?<br></p><p><br></p><p><br>&gt; On Jun 6, 2016, at 10:00 , Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Someone on another forum (not directly related to Swift) just mentioned running into a confusing situation where they had added an early `return` to a method for testing purposes, in order to disable the code following it:<br>&gt; <br>&gt; func myFunc() {<br>&gt;         // some code<br>&gt;         return<br>&gt;         cache.removeAll()<br>&gt;         // more code that is now skipped.<br>&gt; }<br>&gt; <br>&gt; Unexpectedly, the line following the `return` still got executed, so &quot;I couldn&#39;t figure out why my cache kept getting zapped.”<br>&gt; <br>&gt; Turns out the Swift parser is interpreting this as `return cache.removeAll()`, which works because that expression returns void, which matches the function’s return type.<br>&gt; <br>&gt; This seems like a case where the parser is playing by the rules, but the result is not what a human would expect. It would be better for a `return` on a line by itself to be parsed as a complete statement, without continuing to the next line. Is this already a known issue?<br>&gt; <br>&gt; —Jens<br>&gt; <br>&gt; PS: I’m sure someone will point out that adding an early return like this is sub-optimal, and the compiler could warn that the code following is unreachable. Which is true, and I use comments to disable code in situations like this. But I’m sure this developer’s not the only one who adds `return` instead.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/cd3f634a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Ambiguous parsing of `return`</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  6, 2016 at 11:00:00am</p></header><div class="content"><p>Did you try an example? Swift warns about this for this very reason:<br>```<br>$ cat x.swift <br>func f0() {}<br></p><p>func f1() {<br>  return<br>  f0()<br>}<br></p><p>$ swiftc -c x.swift <br>x.swift:5:3: warning: expression following &#39;return&#39; is treated as an argument of the &#39;return&#39;<br>  f0()<br>  ^<br>```<br></p><p> - Daniel<br></p><p>&gt; On Jun 6, 2016, at 10:00 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Someone on another forum (not directly related to Swift) just mentioned running into a confusing situation where they had added an early `return` to a method for testing purposes, in order to disable the code following it:<br>&gt; <br>&gt; func myFunc() {<br>&gt;         // some code<br>&gt;         return<br>&gt;         cache.removeAll()<br>&gt;         // more code that is now skipped.<br>&gt; }<br>&gt; <br>&gt; Unexpectedly, the line following the `return` still got executed, so &quot;I couldn&#39;t figure out why my cache kept getting zapped.”<br>&gt; <br>&gt; Turns out the Swift parser is interpreting this as `return cache.removeAll()`, which works because that expression returns void, which matches the function’s return type.<br>&gt; <br>&gt; This seems like a case where the parser is playing by the rules, but the result is not what a human would expect. It would be better for a `return` on a line by itself to be parsed as a complete statement, without continuing to the next line. Is this already a known issue?<br>&gt; <br>&gt; —Jens<br>&gt; <br>&gt; PS: I’m sure someone will point out that adding an early return like this is sub-optimal, and the compiler could warn that the code following is unreachable. Which is true, and I use comments to disable code in situations like this. But I’m sure this developer’s not the only one who adds `return` instead.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/9578a763/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Ambiguous parsing of `return`</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>June  6, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 6, 2016, at 11:46 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt; Did you try an example? Swift warns about this for this very reason:<br></p><p>I don’t get that warning with the latest Xcode 7.3.1 (Swift 2.3 IIRC.) Perhaps you’re using Swift 3? Outside of this community I don’t think many people are using Swift 3 yet.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/442f5861/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Ambiguous parsing of `return`</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June  7, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 6, 2016, at 11:50 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 6, 2016, at 11:46 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Did you try an example? Swift warns about this for this very reason:<br>&gt; <br>&gt; I don’t get that warning with the latest Xcode 7.3.1 (Swift 2.3 IIRC.) Perhaps you’re using Swift 3? Outside of this community I don’t think many people are using Swift 3 yet.<br></p><p>Yes, this is a new warning produced by Swift 3, specifically introduced to address this issue.<br></p><p><br>file.swift:3:5: warning: expression following &#39;return&#39; is treated as an argument of the &#39;return&#39;<br>    f0()<br>    ^<br>file.swift:3:5: note: indent the expression to silence this warning<br>    f0()<br>    ^<br>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160607/99dbc3d5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
