<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 31, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs Accordingly&quot; begins now and runs through April 5, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160331/a0d18593/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 31, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br></p><p>A possible mistake in the proposal:<br></p><p>&gt; Users needing the old behavior can always use the new replace method, described below. <br></p><p><br>Then later:<br></p><p>&gt; A new update(with: newMember) API was added, to provide the previous unconditional insertion semantics of the insert API.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>April  1, 2016 at 01:00:00pm</p></header><div class="content"><p>My apologies if this was previously discussed. Was there ever a reason<br>given for not using operators for set combiners? That is, | &amp; - ^ for<br>union, intersection, subtracting, and symmetricDifference, and |= &amp;= -= ^=<br>for the mutating versions.<br></p><p>On Fri, Apr 1, 2016 at 12:14 AM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs<br>&gt; Accordingly&quot; begins now and runs through April 5, 2016. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/8a399992/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  1, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; My apologies if this was previously discussed. Was there ever a reason given for not using operators for set combiners? That is, | &amp; - ^ for union, intersection, subtracting, and symmetricDifference, and |= &amp;= -= ^= for the mutating versions.<br></p><p>With a few exceptions (like `+` for concatenation), Swift doesn&#39;t overload operators to give them different meanings, even if they&#39;re kinda similar if you squint enough.<br></p><p>* * *<br></p><p>My review follows:<br></p><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md<br></p><p><br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I&#39;m in favor of the updated guidelines and new names; they are straightforward and understandable. I&#39;m not entirely happy with `subtract` being different from the others, but contorting it to match seems unwise, particularly when we&#39;re trying to demonstrate the API guidelines.<br></p><p>I have some issues with the new `insert(_:)` return value:<br></p><p>* I&#39;m not sure what the purpose is of returning the new value if a value is inserted. Couldn&#39;t we return an `Element?` containing the old value if there is one, or `nil` if there&#39;s a new value?<br></p><p>* If an `insert` might collide with several elements, shouldn&#39;t we return a set of all the colliding elements, instead of `nil`? (This would do away with the exception for `OptionSetType.insert`.)<br></p><p>* Whatever `insert` does, shouldn&#39;t `update(with:)` do the same thing? Particularly with regards to updating multiple elements?<br></p><p>* How far does this &quot;don&#39;t throw away information that&#39;s hard to recalculate&quot; principle go? Should the mutating operations like `formUnion` return some indication of the affected elements? Should the *nonmutating* ones?<br></p><p>* If we&#39;re going to officially support equal-but-distinct elements in the SetAlgebra API, shouldn&#39;t we have an equivalent to NSSet&#39;s `member(_:)` method?<br></p><p>We can try to work out these and other issues in this thread, but unless there are straightforward answers, I think the better move might be to sever the return value change and discuss it separately. It brings up a lot of subtle questions across the entire API.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. These APIs need to be renamed.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. It solves an important issue with the guidelines.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>This API is superior to NSSet/NSMutableSet and Ruby&#39;s Set, which are the two set APIs I&#39;m most familiar with.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>On the naming issue, I participated heavily in the Threads of Infinite Bikeshedding.<br></p><p>On the return value issue, something slightly more than a quick reading.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>April  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>I am strongly opposed to the changes to the names of functions implementing set operations, as it is going to introduce a lot of confusion. While I&#39;m a fairly rigid about consistency, I do think that there are acceptable exceptions to any set of rules/guidelines. This represents one of those cases. For example, changing union() to formUnion() for the sake of aligning compliance to API name guidelines simply doesn&#39;t make sense to me.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>No.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>No.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>There are plenty of other languages that have API naming guidelines, such as C#, Ruby, and Python. However, they all demonstrate enough lenience to accommodate cases such as this. For example, http://ruby-doc.org/stdlib-2.3.0/libdoc/set/rdoc/Set.html.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>In-depth.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/d31f06ed/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; For example, changing union() to formUnion() for the sake of aligning compliance to API name guidelines simply doesn&#39;t make sense to me.<br></p><p>Given the need for separate names for the functional and imperative forms of this operation, what sorts of names would be better? Pseudo-verbs like `unioning`? An `InPlace` suffix?<br></p><p>(Everyone else, please don&#39;t take this as an invitation to start the bikeshedding again. I&#39;m trying to understand what *this reviewer* prefers.)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>April  4, 2016 at 10:00:00am</p></header><div class="content"><p>Personally, I don&#39;t like any of the options. However, I mentioned this during the review of the API naming guidelines. Using the English language to construct function names that distinguish between functional and imperative forms of the operation places constraints on API designers that produce undesirable results. The operations on an algebraic set is merely one example. My preference is a symbol appended to the function name (e.g., the exclamation point in Ruby). However, it was pointed out at the time that introducing this syntax was out-of-scope for Swift 3. What does this mean? We&#39;ll revisit this later and have to endure the rigor of another API renaming exercise?<br></p><p>Without rehashing the utility of a symbol to distinguish between functional and imperative, what is my preference?<br></p><p>Pseudo-verbs? I don&#39;t know if this is any better.<br></p><p>A suffix, such as &quot;InPlace&quot;, has some appeal for two reasons:<br></p><p>1) It is descriptive and doesn&#39;t obfuscate the meaning of the operation.<br></p><p>2) If at sometime later the community sees a practical need to introduce syntax to distinguish between functional and imperative forms of an operation, removing such a suffix and replacing it with the symbol will mitigate confusion of another renaming transition.<br></p><p>Cheers,<br>-Patrick<br></p><p>&gt; On Apr 2, 2016, at 5:15 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; For example, changing union() to formUnion() for the sake of aligning compliance to API name guidelines simply doesn&#39;t make sense to me.<br>&gt; <br>&gt; Given the need for separate names for the functional and imperative forms of this operation, what sorts of names would be better? Pseudo-verbs like `unioning`? An `InPlace` suffix?<br>&gt; <br>&gt; (Everyone else, please don&#39;t take this as an invitation to start the bikeshedding again. I&#39;m trying to understand what *this reviewer* prefers.)<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>April  3, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between `union` and `formUnion`: both sounds functional-style, and actually the second one perhaps a bit more to my ears. There&#39;s basically two dictionary definitions of &quot;form&quot;:<br></p><p>1. &quot;bring together parts or combine to create (something)&quot; which to me implies a new value is created, and<br>2. &quot;make or fashion into a certain shape or form&quot; which would imply that the material you start with is transformed, which is apparently the intended meaning and also the reverse meaning from the above.<br></p><p>I mean, doesn&#39;t this make sense as an API?<br></p><p>	let donut = baker.formDonut(dough) // non-mutating<br></p><p>Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the operation is naturally described by a noun. That would seem less ambiguous to me:<br></p><p>	a.becomeUnion(b)<br>	a.becomeIntersection(b)<br>	a.becomeSuccessor(b)<br></p><p>It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br></p><p>And there&#39;s no way the term lends itself to non-mutating cases without things becoming nonsensical:<br></p><p>	let donut = baker.becomeDonut(dough) // non-mutating?<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I&#39;m still not entirely convinced any of this is better than the `InPlace` suffix we had before. `InPlace` might be ugly visually and grammatically, but seems to be the clearest at expressing the intent.<br></p><p><br>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>There is no question that using a verb instead of the `InPlace` suffix makes things fits better with the other API guidelines.<br></p><p><br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the guideline and API diffs, thought about a few alternative wording, looked in my dictionary.<br></p><p><br>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April  3, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt; definitions of &quot;form&quot;:<br>&gt;<br>&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt; implies a new value is created, and<br>&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt; the material you start with is transformed, which is apparently the<br>&gt; intended meaning and also the reverse meaning from the above.<br>&gt;<br>&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;<br>&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;<br>&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt; to me:<br>&gt;<br>&gt;         a.becomeUnion(b)<br>&gt;         a.becomeIntersection(b)<br>&gt;         a.becomeSuccessor(b)<br>&gt;<br>&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;<br>&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt; things becoming nonsensical:<br>&gt;<br>&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;<br></p><p>I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a<br>native English speaker). As you note &quot;form&quot; can imply the creation of<br>something from parts (more like assembling a new thing) as well as the<br>creation of something out of a material say a of block clay (more like<br>molding something out of an existing thing). It doesn&#39;t seem clear cut to<br>me to imply in place mutation.<br></p><p>Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>type of issue is generally true with any short word made up of the same set<br>of letters (made worse since &quot;from&quot; is more common in programming then<br>&quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>letters we see and then uses context to help get the correct one and/or<br>additional visual parsing to understand the exact ordering of letters (more<br>energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I<br>keep going in the direction of thinking it returns something made from the<br>two (or more) items involved (not really sure why &quot;from&quot; goes that<br>direction in my head, it could also go the in place direction).<br></p><p>I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>mistake)... I think your suggestion of &quot;become&quot; has merit.<br></p><p>y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>intersection with x&quot;<br></p><p>In the &quot;forming&quot; situations it – to me – is ambiguous on if that is in<br>place or not. To me it implies more of giving something new back.<br></p><p>I am -1 on &quot;form&quot; aspect of this proposal. ...of course things are<br>learnable as long as things are fairly consistent and not to far out of the<br>norm for typical language use. Personally I don&#39;t see &quot;form&quot; as that<br>typical in English.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/76ff6966/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April  3, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sun, Apr 3, 2016 at 1:27 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt;&gt; definitions of &quot;form&quot;:<br>&gt;&gt;<br>&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt;&gt; implies a new value is created, and<br>&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt;&gt; the material you start with is transformed, which is apparently the<br>&gt;&gt; intended meaning and also the reverse meaning from the above.<br>&gt;&gt;<br>&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt;<br>&gt;&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt;<br>&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt;&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt;&gt; to me:<br>&gt;&gt;<br>&gt;&gt;         a.becomeUnion(b)<br>&gt;&gt;         a.becomeIntersection(b)<br>&gt;&gt;         a.becomeSuccessor(b)<br>&gt;&gt;<br>&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt;<br>&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt;&gt; things becoming nonsensical:<br>&gt;&gt;<br>&gt;&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;&gt;<br>&gt;<br>&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a<br>&gt; native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt; something from parts (more like assembling a new thing) as well as the<br>&gt; creation of something out of a material say a of block clay (more like<br>&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut to<br>&gt; me to imply in place mutation.<br>&gt;<br>&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt; type of issue is generally true with any short word made up of the same set<br>&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>&gt; letters we see and then uses context to help get the correct one and/or<br>&gt; additional visual parsing to understand the exact ordering of letters (more<br>&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I<br>&gt; keep going in the direction of thinking it returns something made from the<br>&gt; two (or more) items involved (not really sure why &quot;from&quot; goes that<br>&gt; direction in my head, it could also go the in place direction).<br>&gt;<br>&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt;<br>&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt; intersection with x&quot;<br>&gt;<br></p><p>After stepping away for a bit and looking at it from the POV of the API of<br>Set and not in the context of &quot;y&quot; I could read things in the abstract as...<br></p><p>&quot;becomeUnion(with other:Self)&quot; --&gt; &quot;I become a union with other&quot;<br>&quot;formUnion(with other:Self)&quot; --&gt; &quot;I form a union with other&quot;<br></p><p>No clear winner to me however when used in code &quot;become&quot; still feels more<br>strongly mutating then &quot;form&quot;: y.formUnion(with:x) or y.becomeUnion(with:x)<br></p><p>All in all the API would have mutating in front of it (at least for<br>structs) and it wouldn&#39;t have a return type. It would become clear fairly<br>quickly as a result (hence learned).<br></p><p>Just still not that happy with &quot;form&quot; but with use my mind would likely<br>quickly adapt.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/6b4df203/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 3, 2016, at 1:56 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Sun, Apr 3, 2016 at 1:27 PM Shawn Erickson &lt;shawnce at gmail.com &lt;mailto:shawnce at gmail.com&gt;&gt; wrote:<br>&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between `union` and `formUnion`: both sounds functional-style, and actually the second one perhaps a bit more to my ears. There&#39;s basically two dictionary definitions of &quot;form&quot;:<br>&gt; <br>&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me implies a new value is created, and<br>&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that the material you start with is transformed, which is apparently the intended meaning and also the reverse meaning from the above.<br>&gt; <br>&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt; <br>&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt; <br>&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the operation is naturally described by a noun. That would seem less ambiguous to me:<br>&gt; <br>&gt;         a.becomeUnion(b)<br>&gt;         a.becomeIntersection(b)<br>&gt;         a.becomeSuccessor(b)<br>&gt; <br>&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt; <br>&gt; And there&#39;s no way the term lends itself to non-mutating cases without things becoming nonsensical:<br>&gt; <br>&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt; <br>&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a native English speaker). As you note &quot;form&quot; can imply the creation of something from parts (more like assembling a new thing) as well as the creation of something out of a material say a of block clay (more like molding something out of an existing thing). It doesn&#39;t seem clear cut to me to imply in place mutation.<br>&gt; <br>&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This type of issue is generally true with any short word made up of the same set of letters (made worse since &quot;from&quot; is more common in programming then &quot;form&quot;). The mind quickly narrows in on a set of possible words given the letters we see and then uses context to help get the correct one and/or additional visual parsing to understand the exact ordering of letters (more energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I keep going in the direction of thinking it returns something made from the two (or more) items involved (not really sure why &quot;from&quot; goes that direction in my head, it could also go the in place direction).<br>&gt; <br>&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt; <br>&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an intersection with x&quot;<br>&gt; <br>&gt; After stepping away for a bit and looking at it from the POV of the API of Set and not in the context of &quot;y&quot; I could read things in the abstract as...<br>&gt; <br>&gt; &quot;becomeUnion(with other:Self)&quot; --&gt; &quot;I become a union with other&quot;<br>&gt; &quot;formUnion(with other:Self)&quot; --&gt; &quot;I form a union with other&quot;<br>&gt; <br>&gt; No clear winner to me however when used in code &quot;become&quot; still feels more strongly mutating then &quot;form&quot;: y.formUnion(with:x) or y.becomeUnion(with:x)<br>&gt; <br>&gt; All in all the API would have mutating in front of it (at least for structs) and it wouldn&#39;t have a return type. It would become clear fairly quickly as a result (hence learned).<br>&gt; <br>&gt; Just still not that happy with &quot;form&quot; but with use my mind would likely quickly adapt.<br></p><p>I think the best English verb for this construction is “emplace”:<br></p><p>	http://www.dictionary.com/browse/emplace<br></p><p>It means “to put in position”, and is always used with an object (the noun). It’s basically free from incorrect connotations because it’s obscure enough that most English speakers won’t know it, and is easily searchable for English- and non-English speakers alike.<br></p><p>	- Doug<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/6f0272c5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  4, 2016 at 11:00:00am</p></header><div class="content"><p>Hmm, &quot;emplace&quot; looks like more or less a synonym for &quot;install.&quot; I<br>don&#39;t think it suggests that the object is being put in place of the<br>subject. The latest example in the Oxford English Dictionary, from<br>2010, is:<br>&quot;Insurgents would hastily emplace victim-activated IEDs...after<br>Pathfinder came through.&quot;<br>Here, the IEDs are not taking the place of the insurgents.<br></p><p><br>On Mon, Apr 4, 2016 at 11:14 AM, Douglas Gregor via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Apr 3, 2016, at 1:56 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Sun, Apr 3, 2016 at 1:27 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt;&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt;&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt;&gt;&gt; definitions of &quot;form&quot;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt;&gt;&gt; implies a new value is created, and<br>&gt;&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt;&gt;&gt; the material you start with is transformed, which is apparently the intended<br>&gt;&gt;&gt; meaning and also the reverse meaning from the above.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt;&gt;&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt;&gt;&gt; to me:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         a.becomeUnion(b)<br>&gt;&gt;&gt;         a.becomeIntersection(b)<br>&gt;&gt;&gt;         a.becomeSuccessor(b)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt;&gt;&gt; things becoming nonsensical:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a<br>&gt;&gt; native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt;&gt; something from parts (more like assembling a new thing) as well as the<br>&gt;&gt; creation of something out of a material say a of block clay (more like<br>&gt;&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut to me<br>&gt;&gt; to imply in place mutation.<br>&gt;&gt;<br>&gt;&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt;&gt; type of issue is generally true with any short word made up of the same set<br>&gt;&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt;&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>&gt;&gt; letters we see and then uses context to help get the correct one and/or<br>&gt;&gt; additional visual parsing to understand the exact ordering of letters (more<br>&gt;&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I keep<br>&gt;&gt; going in the direction of thinking it returns something made from the two<br>&gt;&gt; (or more) items involved (not really sure why &quot;from&quot; goes that direction in<br>&gt;&gt; my head, it could also go the in place direction).<br>&gt;&gt;<br>&gt;&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt;&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt;&gt;<br>&gt;&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt;&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt;&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt;&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt;&gt; intersection with x&quot;<br>&gt;<br>&gt;<br>&gt; After stepping away for a bit and looking at it from the POV of the API of<br>&gt; Set and not in the context of &quot;y&quot; I could read things in the abstract as...<br>&gt;<br>&gt; &quot;becomeUnion(with other:Self)&quot; --&gt; &quot;I become a union with other&quot;<br>&gt; &quot;formUnion(with other:Self)&quot; --&gt; &quot;I form a union with other&quot;<br>&gt;<br>&gt; No clear winner to me however when used in code &quot;become&quot; still feels more<br>&gt; strongly mutating then &quot;form&quot;: y.formUnion(with:x) or y.becomeUnion(with:x)<br>&gt;<br>&gt; All in all the API would have mutating in front of it (at least for structs)<br>&gt; and it wouldn&#39;t have a return type. It would become clear fairly quickly as<br>&gt; a result (hence learned).<br>&gt;<br>&gt; Just still not that happy with &quot;form&quot; but with use my mind would likely<br>&gt; quickly adapt.<br>&gt;<br>&gt;<br>&gt; I think the best English verb for this construction is “emplace”:<br>&gt;<br>&gt; http://www.dictionary.com/browse/emplace<br>&gt;<br>&gt; It means “to put in position”, and is always used with an object (the noun).<br>&gt; It’s basically free from incorrect connotations because it’s obscure enough<br>&gt; that most English speakers won’t know it, and is easily searchable for<br>&gt; English- and non-English speakers alike.<br>&gt;<br>&gt; - Doug<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 4, 2016, at 9:20 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hmm, &quot;emplace&quot; looks like more or less a synonym for &quot;install.&quot; I<br>&gt; don&#39;t think it suggests that the object is being put in place of the<br>&gt; subject.<br></p><p>It’s roughly a synonym. “emplaceUnion” is &quot;putting the union into position&quot;. There is no other position than “self”.<br></p><p>&gt; The latest example in the Oxford English Dictionary, from<br>&gt; 2010, is:<br>&gt; &quot;Insurgents would hastily emplace victim-activated IEDs...after<br>&gt; Pathfinder came through.&quot;<br>&gt; Here, the IEDs are not taking the place of the insurgents.<br></p><p>I was going to comment about your choice of a terrorism-related example sentence, but the online OED *only* uses war-related examples for this verb.<br></p><p>	- Doug<br></p><p>&gt; <br>&gt; On Mon, Apr 4, 2016 at 11:14 AM, Douglas Gregor via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Apr 3, 2016, at 1:56 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sun, Apr 3, 2016 at 1:27 PM Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt;&gt;&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt;&gt;&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt;&gt;&gt;&gt; definitions of &quot;form&quot;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt;&gt;&gt;&gt; implies a new value is created, and<br>&gt;&gt;&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt;&gt;&gt;&gt; the material you start with is transformed, which is apparently the intended<br>&gt;&gt;&gt;&gt; meaning and also the reverse meaning from the above.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;        let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt;&gt;&gt;&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt;&gt;&gt;&gt; to me:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;        a.becomeUnion(b)<br>&gt;&gt;&gt;&gt;        a.becomeIntersection(b)<br>&gt;&gt;&gt;&gt;        a.becomeSuccessor(b)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt;&gt;&gt;&gt; things becoming nonsensical:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;        let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a<br>&gt;&gt;&gt; native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt;&gt;&gt; something from parts (more like assembling a new thing) as well as the<br>&gt;&gt;&gt; creation of something out of a material say a of block clay (more like<br>&gt;&gt;&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut to me<br>&gt;&gt;&gt; to imply in place mutation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt;&gt;&gt; type of issue is generally true with any short word made up of the same set<br>&gt;&gt;&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt;&gt;&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>&gt;&gt;&gt; letters we see and then uses context to help get the correct one and/or<br>&gt;&gt;&gt; additional visual parsing to understand the exact ordering of letters (more<br>&gt;&gt;&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I keep<br>&gt;&gt;&gt; going in the direction of thinking it returns something made from the two<br>&gt;&gt;&gt; (or more) items involved (not really sure why &quot;from&quot; goes that direction in<br>&gt;&gt;&gt; my head, it could also go the in place direction).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt;&gt;&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt;&gt;&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt;&gt;&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt;&gt;&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt;&gt;&gt; intersection with x&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; After stepping away for a bit and looking at it from the POV of the API of<br>&gt;&gt; Set and not in the context of &quot;y&quot; I could read things in the abstract as...<br>&gt;&gt; <br>&gt;&gt; &quot;becomeUnion(with other:Self)&quot; --&gt; &quot;I become a union with other&quot;<br>&gt;&gt; &quot;formUnion(with other:Self)&quot; --&gt; &quot;I form a union with other&quot;<br>&gt;&gt; <br>&gt;&gt; No clear winner to me however when used in code &quot;become&quot; still feels more<br>&gt;&gt; strongly mutating then &quot;form&quot;: y.formUnion(with:x) or y.becomeUnion(with:x)<br>&gt;&gt; <br>&gt;&gt; All in all the API would have mutating in front of it (at least for structs)<br>&gt;&gt; and it wouldn&#39;t have a return type. It would become clear fairly quickly as<br>&gt;&gt; a result (hence learned).<br>&gt;&gt; <br>&gt;&gt; Just still not that happy with &quot;form&quot; but with use my mind would likely<br>&gt;&gt; quickly adapt.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I think the best English verb for this construction is “emplace”:<br>&gt;&gt; <br>&gt;&gt; http://www.dictionary.com/browse/emplace<br>&gt;&gt; <br>&gt;&gt; It means “to put in position”, and is always used with an object (the noun).<br>&gt;&gt; It’s basically free from incorrect connotations because it’s obscure enough<br>&gt;&gt; that most English speakers won’t know it, and is easily searchable for<br>&gt;&gt; English- and non-English speakers alike.<br>&gt;&gt; <br>&gt;&gt; - Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Indeed, OED points out that modern usage is &quot;chiefly military.&quot; Probably an<br>argument against its usage here.<br>On Mon, Apr 4, 2016 at 12:09 PM Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Apr 4, 2016, at 9:20 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hmm, &quot;emplace&quot; looks like more or less a synonym for &quot;install.&quot; I<br>&gt; &gt; don&#39;t think it suggests that the object is being put in place of the<br>&gt; &gt; subject.<br>&gt;<br>&gt; It’s roughly a synonym. “emplaceUnion” is &quot;putting the union into<br>&gt; position&quot;. There is no other position than “self”.<br>&gt;<br>&gt; &gt; The latest example in the Oxford English Dictionary, from<br>&gt; &gt; 2010, is:<br>&gt; &gt; &quot;Insurgents would hastily emplace victim-activated IEDs...after<br>&gt; &gt; Pathfinder came through.&quot;<br>&gt; &gt; Here, the IEDs are not taking the place of the insurgents.<br>&gt;<br>&gt; I was going to comment about your choice of a terrorism-related example<br>&gt; sentence, but the online OED *only* uses war-related examples for this verb.<br>&gt;<br>&gt;         - Doug<br>&gt;<br>&gt; &gt;<br>&gt; &gt; On Mon, Apr 4, 2016 at 11:14 AM, Douglas Gregor via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Apr 3, 2016, at 1:56 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Sun, Apr 3, 2016 at 1:27 PM Shawn Erickson &lt;shawnce at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution<br>&gt; &gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt; &gt;&gt;&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually<br>&gt; the<br>&gt; &gt;&gt;&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two<br>&gt; dictionary<br>&gt; &gt;&gt;&gt;&gt; definitions of &quot;form&quot;:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt; &gt;&gt;&gt;&gt; implies a new value is created, and<br>&gt; &gt;&gt;&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply<br>&gt; that<br>&gt; &gt;&gt;&gt;&gt; the material you start with is transformed, which is apparently the<br>&gt; intended<br>&gt; &gt;&gt;&gt;&gt; meaning and also the reverse meaning from the above.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;        let donut = baker.formDonut(dough) // non-mutating<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt; &gt;&gt;&gt;&gt; operation is naturally described by a noun. That would seem less<br>&gt; ambiguous<br>&gt; &gt;&gt;&gt;&gt; to me:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;        a.becomeUnion(b)<br>&gt; &gt;&gt;&gt;&gt;        a.becomeIntersection(b)<br>&gt; &gt;&gt;&gt;&gt;        a.becomeSuccessor(b)<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a<br>&gt; noun.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt; &gt;&gt;&gt;&gt; things becoming nonsensical:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;        let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I<br>&gt; am a<br>&gt; &gt;&gt;&gt; native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt; &gt;&gt;&gt; something from parts (more like assembling a new thing) as well as the<br>&gt; &gt;&gt;&gt; creation of something out of a material say a of block clay (more like<br>&gt; &gt;&gt;&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut<br>&gt; to me<br>&gt; &gt;&gt;&gt; to imply in place mutation.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt; &gt;&gt;&gt; type of issue is generally true with any short word made up of the<br>&gt; same set<br>&gt; &gt;&gt;&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt; &gt;&gt;&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given<br>&gt; the<br>&gt; &gt;&gt;&gt; letters we see and then uses context to help get the correct one and/or<br>&gt; &gt;&gt;&gt; additional visual parsing to understand the exact ordering of letters<br>&gt; (more<br>&gt; &gt;&gt;&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot;<br>&gt; I keep<br>&gt; &gt;&gt;&gt; going in the direction of thinking it returns something made from the<br>&gt; two<br>&gt; &gt;&gt;&gt; (or more) items involved (not really sure why &quot;from&quot; goes that<br>&gt; direction in<br>&gt; &gt;&gt;&gt; my head, it could also go the in place direction).<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt; &gt;&gt;&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt; &gt;&gt;&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of<br>&gt; x&quot;<br>&gt; &gt;&gt;&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection<br>&gt; with x&quot;<br>&gt; &gt;&gt;&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt; &gt;&gt;&gt; intersection with x&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; After stepping away for a bit and looking at it from the POV of the API<br>&gt; of<br>&gt; &gt;&gt; Set and not in the context of &quot;y&quot; I could read things in the abstract<br>&gt; as...<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &quot;becomeUnion(with other:Self)&quot; --&gt; &quot;I become a union with other&quot;<br>&gt; &gt;&gt; &quot;formUnion(with other:Self)&quot; --&gt; &quot;I form a union with other&quot;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; No clear winner to me however when used in code &quot;become&quot; still feels<br>&gt; more<br>&gt; &gt;&gt; strongly mutating then &quot;form&quot;: y.formUnion(with:x) or<br>&gt; y.becomeUnion(with:x)<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; All in all the API would have mutating in front of it (at least for<br>&gt; structs)<br>&gt; &gt;&gt; and it wouldn&#39;t have a return type. It would become clear fairly<br>&gt; quickly as<br>&gt; &gt;&gt; a result (hence learned).<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Just still not that happy with &quot;form&quot; but with use my mind would likely<br>&gt; &gt;&gt; quickly adapt.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I think the best English verb for this construction is “emplace”:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; http://www.dictionary.com/browse/emplace<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; It means “to put in position”, and is always used with an object (the<br>&gt; noun).<br>&gt; &gt;&gt; It’s basically free from incorrect connotations because it’s obscure<br>&gt; enough<br>&gt; &gt;&gt; that most English speakers won’t know it, and is easily searchable for<br>&gt; &gt;&gt; English- and non-English speakers alike.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; - Doug<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/62796afb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April  4, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Indeed, OED points out that modern usage is &quot;chiefly military.&quot; Probably an argument against its usage here.<br></p><p>It seems to me that what you&#39;re sort of saying is &quot;replaceWith&quot;, but that&#39;s kind of a mouthful. A quick thesaurus check suggests that the only decent single-world alternative would be &quot;substitute&quot;, but that sounds like a regex operation. I think this is a dead end.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>April  4, 2016 at 04:00:00pm</p></header><div class="content"><p>This has been a very long and complex thread, but have some of these not-technically-mathy word pairs that have nice verb forms been considered:<br></p><p>union -&gt; combine / combining<br>intersection -&gt; intersect / intersecting<br>symmetricDifference -&gt; split / splitting<br></p><p>Example:<br></p><p>var allowedUsers = Set&lt;User&gt;()<br>allowedUsers.combine(standardUsers)<br>allowedUsers.combine(superUsers)<br></p><p>var users = allUsers<br>users.intersect(allowedUsers)<br></p><p>let users = allUsers.intersecting(allowedUsers)<br></p><p>l8r<br>Sean<br></p><p><br></p><p>&gt; On Apr 4, 2016, at 3:22 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Indeed, OED points out that modern usage is &quot;chiefly military.&quot; Probably an argument against its usage here.<br>&gt; <br>&gt; It seems to me that what you&#39;re sort of saying is &quot;replaceWith&quot;, but that&#39;s kind of a mouthful. A quick thesaurus check suggests that the only decent single-world alternative would be &quot;substitute&quot;, but that sounds like a regex operation. I think this is a dead end.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  4, 2016 at 07:00:00am</p></header><div class="content"><p>I think Michel and Shawn did raise some good points here.<br></p><p>-Thorsten <br></p><p>&gt; Am 03.04.2016 um 22:27 schrieb Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between `union` and `formUnion`: both sounds functional-style, and actually the second one perhaps a bit more to my ears. There&#39;s basically two dictionary definitions of &quot;form&quot;:<br>&gt;&gt; <br>&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me implies a new value is created, and<br>&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that the material you start with is transformed, which is apparently the intended meaning and also the reverse meaning from the above.<br>&gt;&gt; <br>&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt; <br>&gt;&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt; <br>&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the operation is naturally described by a noun. That would seem less ambiguous to me:<br>&gt;&gt; <br>&gt;&gt;         a.becomeUnion(b)<br>&gt;&gt;         a.becomeIntersection(b)<br>&gt;&gt;         a.becomeSuccessor(b)<br>&gt;&gt; <br>&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt; <br>&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without things becoming nonsensical:<br>&gt;&gt; <br>&gt;&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt; <br>&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a native English speaker). As you note &quot;form&quot; can imply the creation of something from parts (more like assembling a new thing) as well as the creation of something out of a material say a of block clay (more like molding something out of an existing thing). It doesn&#39;t seem clear cut to me to imply in place mutation.<br>&gt; <br>&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This type of issue is generally true with any short word made up of the same set of letters (made worse since &quot;from&quot; is more common in programming then &quot;form&quot;). The mind quickly narrows in on a set of possible words given the letters we see and then uses context to help get the correct one and/or additional visual parsing to understand the exact ordering of letters (more energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I keep going in the direction of thinking it returns something made from the two (or more) items involved (not really sure why &quot;from&quot; goes that direction in my head, it could also go the in place direction).<br>&gt; <br>&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt; <br>&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an intersection with x&quot;<br>&gt; <br>&gt; In the &quot;forming&quot; situations it – to me – is ambiguous on if that is in place or not. To me it implies more of giving something new back.<br>&gt; <br>&gt; I am -1 on &quot;form&quot; aspect of this proposal. ...of course things are learnable as long as things are fairly consistent and not to far out of the norm for typical language use. Personally I don&#39;t see &quot;form&quot; as that typical in English.<br>&gt; <br>&gt; -Shawn<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/d2a939b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  4, 2016 at 04:00:00pm</p></header><div class="content"><p>Looking at other languages:<br></p><p><br>   1. A Java like API would be:<br>      - mutating func remove(T) -&gt; Void<br>      - mutating func remove&lt;S: SequenceType ...&gt;(all: S) -&gt; Void<br>      - func removed(T) -&gt; Self<br>      - func removed&lt;S...&gt;(all: S) -&gt; Self<br>      - Similarly for retain and add<br>      2. In Scala they primarily use operators, so a Scala like API would<br>   be:<br>      - func -=(inout Self, T) -&gt; Void<br>      - func -=&lt;S: SequenceType ...&gt;(inout Self, S) -&gt; Void<br>      - func -(T) -&gt; Self<br>      - func -&lt;S...&gt;(all: S) -&gt; Self<br>      - Similarly for &amp; and +<br></p><p><br>Either of these naming patterns seems better than those proposed :(.<br></p><p>  -- Howard.<br></p><p>On 4 April 2016 at 15:49, Thorsten Seitz via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think Michel and Shawn did raise some good points here.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; Am 03.04.2016 um 22:27 schrieb Shawn Erickson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt;&gt; definitions of &quot;form&quot;:<br>&gt;&gt;<br>&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt;&gt; implies a new value is created, and<br>&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt;&gt; the material you start with is transformed, which is apparently the<br>&gt;&gt; intended meaning and also the reverse meaning from the above.<br>&gt;&gt;<br>&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt;<br>&gt;&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt;<br>&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt;&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt;&gt; to me:<br>&gt;&gt;<br>&gt;&gt;         a.becomeUnion(b)<br>&gt;&gt;         a.becomeIntersection(b)<br>&gt;&gt;         a.becomeSuccessor(b)<br>&gt;&gt;<br>&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt;<br>&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt;&gt; things becoming nonsensical:<br>&gt;&gt;<br>&gt;&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;&gt;<br>&gt;<br>&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am a<br>&gt; native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt; something from parts (more like assembling a new thing) as well as the<br>&gt; creation of something out of a material say a of block clay (more like<br>&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut to<br>&gt; me to imply in place mutation.<br>&gt;<br>&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt; type of issue is generally true with any short word made up of the same set<br>&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>&gt; letters we see and then uses context to help get the correct one and/or<br>&gt; additional visual parsing to understand the exact ordering of letters (more<br>&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I<br>&gt; keep going in the direction of thinking it returns something made from the<br>&gt; two (or more) items involved (not really sure why &quot;from&quot; goes that<br>&gt; direction in my head, it could also go the in place direction).<br>&gt;<br>&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt;<br>&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with x&quot;<br>&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt; intersection with x&quot;<br>&gt;<br>&gt; In the &quot;forming&quot; situations it – to me – is ambiguous on if that is in<br>&gt; place or not. To me it implies more of giving something new back.<br>&gt;<br>&gt; I am -1 on &quot;form&quot; aspect of this proposal. ...of course things are<br>&gt; learnable as long as things are fairly consistent and not to far out of the<br>&gt; norm for typical language use. Personally I don&#39;t see &quot;form&quot; as that<br>&gt; typical in English.<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/ece659fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  4, 2016 at 07:00:00am</p></header><div class="content"><p>My read on the API guidelines is that the mutating/non-mutating distinction<br>is made by verbs vs. nouns. The verb itself doesn&#39;t have to &quot;suggest&quot; or<br>&quot;feel&quot; mutating, it just has to be clearly a verb. Thus, IMO, `form` is as<br>good a verb as any, although if we&#39;re going to return to bikeshedding I<br>would suggest that `do` is even shorter.<br></p><p>On Mon, Apr 4, 2016 at 1:20 AM Howard Lovatt via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Looking at other languages:<br>&gt;<br>&gt;<br>&gt;    1. A Java like API would be:<br>&gt;       - mutating func remove(T) -&gt; Void<br>&gt;       - mutating func remove&lt;S: SequenceType ...&gt;(all: S) -&gt; Void<br>&gt;       - func removed(T) -&gt; Self<br>&gt;       - func removed&lt;S...&gt;(all: S) -&gt; Self<br>&gt;       - Similarly for retain and add<br>&gt;       2. In Scala they primarily use operators, so a Scala like API would<br>&gt;    be:<br>&gt;       - func -=(inout Self, T) -&gt; Void<br>&gt;       - func -=&lt;S: SequenceType ...&gt;(inout Self, S) -&gt; Void<br>&gt;       - func -(T) -&gt; Self<br>&gt;       - func -&lt;S...&gt;(all: S) -&gt; Self<br>&gt;       - Similarly for &amp; and +<br>&gt;<br>&gt;<br>&gt; Either of these naming patterns seems better than those proposed :(.<br>&gt;<br>&gt;   -- Howard.<br>&gt;<br>&gt; On 4 April 2016 at 15:49, Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think Michel and Shawn did raise some good points here.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt;&gt; Am 03.04.2016 um 22:27 schrieb Shawn Erickson via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt;:<br>&gt;&gt;<br>&gt;&gt; On Sun, Apr 3, 2016 at 6:41 AM Michel Fortin via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t like &quot;form&quot; as a prefix. To me there is no difference between<br>&gt;&gt;&gt; `union` and `formUnion`: both sounds functional-style, and actually the<br>&gt;&gt;&gt; second one perhaps a bit more to my ears. There&#39;s basically two dictionary<br>&gt;&gt;&gt; definitions of &quot;form&quot;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. &quot;bring together parts or combine to create (something)&quot; which to me<br>&gt;&gt;&gt; implies a new value is created, and<br>&gt;&gt;&gt; 2. &quot;make or fashion into a certain shape or form&quot; which would imply that<br>&gt;&gt;&gt; the material you start with is transformed, which is apparently the<br>&gt;&gt;&gt; intended meaning and also the reverse meaning from the above.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I mean, doesn&#39;t this make sense as an API?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         let donut = baker.formDonut(dough) // non-mutating<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Perhaps instead of &quot;form&quot; we could use &quot;become&quot; as a prefix when the<br>&gt;&gt;&gt; operation is naturally described by a noun. That would seem less ambiguous<br>&gt;&gt;&gt; to me:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         a.becomeUnion(b)<br>&gt;&gt;&gt;         a.becomeIntersection(b)<br>&gt;&gt;&gt;         a.becomeSuccessor(b)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s a bit passive, but I find it fits well when the operation is a noun.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And there&#39;s no way the term lends itself to non-mutating cases without<br>&gt;&gt;&gt; things becoming nonsensical:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         let donut = baker.becomeDonut(dough) // non-mutating?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I also am having difficulty coming to terms with the use of &quot;form&quot; (I am<br>&gt;&gt; a native English speaker). As you note &quot;form&quot; can imply the creation of<br>&gt;&gt; something from parts (more like assembling a new thing) as well as the<br>&gt;&gt; creation of something out of a material say a of block clay (more like<br>&gt;&gt; molding something out of an existing thing). It doesn&#39;t seem clear cut to<br>&gt;&gt; me to imply in place mutation.<br>&gt;&gt;<br>&gt;&gt; Additionally my eyes / brain keep seeing &quot;from&quot; instead of &quot;form&quot;. This<br>&gt;&gt; type of issue is generally true with any short word made up of the same set<br>&gt;&gt; of letters (made worse since &quot;from&quot; is more common in programming then<br>&gt;&gt; &quot;form&quot;). The mind quickly narrows in on a set of possible words given the<br>&gt;&gt; letters we see and then uses context to help get the correct one and/or<br>&gt;&gt; additional visual parsing to understand the exact ordering of letters (more<br>&gt;&gt; energy expended). Anyway since I keep seeing &quot;from&quot; instead of &quot;form&quot; I<br>&gt;&gt; keep going in the direction of thinking it returns something made from the<br>&gt;&gt; two (or more) items involved (not really sure why &quot;from&quot; goes that<br>&gt;&gt; direction in my head, it could also go the in place direction).<br>&gt;&gt;<br>&gt;&gt; I would prefer something other then &quot;form&quot; (note I just typed &quot;from&quot; by<br>&gt;&gt; mistake)... I think your suggestion of &quot;become&quot; has merit.<br>&gt;&gt;<br>&gt;&gt; y.becomeUnion(x) --reads to me as--&gt; &quot;y become union with x&quot;<br>&gt;&gt; y.formUnion(x) --read to me as--&gt; &quot;y from oops... y forming a union of x&quot;<br>&gt;&gt; y.becomeIntersection(x) --reads to me as--&gt; &quot;y become intersection with<br>&gt;&gt; x&quot;<br>&gt;&gt; y.formIntersection(x) --read to me as--&gt; &quot;y from oops... y forming an<br>&gt;&gt; intersection with x&quot;<br>&gt;&gt;<br>&gt;&gt; In the &quot;forming&quot; situations it – to me – is ambiguous on if that is in<br>&gt;&gt; place or not. To me it implies more of giving something new back.<br>&gt;&gt;<br>&gt;&gt; I am -1 on &quot;form&quot; aspect of this proposal. ...of course things are<br>&gt;&gt; learnable as long as things are fairly consistent and not to far out of the<br>&gt;&gt; norm for typical language use. Personally I don&#39;t see &quot;form&quot; as that<br>&gt;&gt; typical in English.<br>&gt;&gt;<br>&gt;&gt; -Shawn<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/43ab0e50/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/063adc064d3d040fcbfba0265019aecd?s=50"></div><header><strong>[Review] SE-0059: Update API Naming Guidelines and Rewrite Set APIs Accordingly</strong> from <string>James Hillhouse</string> &lt;jdhillhouse4 at icloud.com&gt;<p>April  4, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Doug,<br></p><p>&gt; What is your evaluation of the proposal?<br>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. Swift needs strong Set API’s that play nicey-nicey with the API Guidelines and this proposal is a firm effort in that direction.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes. This proposal takes nouns that have no commonly used verb form and forms them into verbs, e.g. ‘union’ into ‘formUnion’. It may not look especially pretty to some, but is effective.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>While not languages, the proposal provides SetAlgebra API that is at least as understandable as Mathematica and much more so than Matlab. <br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I’ve been following this discussion since it’s inception back in…what, early February? I have read the API’s and diff’s. Many times.<br></p><p>&gt; On Apr 1, 2016, at 12:14 AM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0059 &quot;Update API Naming Guidelines and Rewrite Set APIs Accordingly&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0059-updated-set-apis.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/76985388/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
