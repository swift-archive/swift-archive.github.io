<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/768487e5a7371f5824d4d33ee63428d1?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>adelzhang at qq.com</string> &lt;adelzhang at qq.com&gt;<p>August 19, 2016 at 12:00:00am</p></header><div class="content"><p>Any other situation when implicit type casting works?  It would be better if there is a reference or link.<br>---Original---<br>From: &quot;Jens Alfke&quot;&lt;jens at mooseyard.com&gt;<br>Date: 2016/8/19 00:27:33<br>To: &quot;adelzhang&quot;&lt;adelzhang at qq.com&gt;;<br>Cc: &quot;swift-users&quot;&lt;swift-users at swift.org&gt;;<br>Subject: Re: [swift-users] Implicitly type conversion ?<br></p><p><br></p><p>On Aug 18, 2016, at 12:18 PM, adelzhang via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>Why swift don&#39;t warn the type mismatch? I am woking on Xcode Version 7.3.1.<br></p><p><br></p><p>It’s an implicit type-cast. Any type `X` can always be implicitly converted to type `X?` (i.e. `Optional&lt;X&gt;`).<br></p><p><br>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160819/b5ac18fe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 18, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Aug 18, 2016, at 12:54 PM, Adel Zhang &lt;adelzhang at qq.com&gt; wrote:<br>&gt; <br>&gt; Any other situation when implicit type casting works?  It would be better if there is a reference or link.<br></p><p>From the Swift Programming Language book, the section “Optional Type”:<br></p><p>The type Optional&lt;Wrapped&gt; is an enumeration with two cases, none and some(Wrapped), which are used to represent values that may or may not be present. Any type can be explicitly declared to be (or implicitly converted to) an optional type. If you don’t provide an initial value when you declare an optional variable or property, its value automatically defaults to nil.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160818/66f225d6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Implicitly type conversion ?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August 19, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Aug 18, 2016, at 9:54 AM, Adel Zhang via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Any other situation when implicit type casting works?<br></p><p>I don&#39;t know if there&#39;s a comprehensive list anywhere. Here are the ones I can think of:<br></p><p>1. A subtype can be used where a supertype is expected; for instance, you can pass an `Int` to a parameter typed `Any` without a cast. The same is true of superclasses: `NSString` can be used where `NSObject` is expected. Obvious, but worth mentioning.<br></p><p>2. Swift 3&#39;s `AnyHashable` isn&#39;t *really* a supertype of `Hashable` types, but it&#39;s sort of treated as one.<br></p><p>3. The built-in `Array`, `Dictionary`, `Set`, and `Optional` types can be implicitly converted to the same data structure, but with supertypes of its generic parameters. For instance, an `Array&lt;Int&gt;` can be passed to a parameter of type `Array&lt;Any&gt;`. This is not a general feature of generics—it&#39;s special-cased for these types.<br></p><p>4. As you noticed, a type can be implicitly made more `Optional`; that is, `Int` converts to `Optional&lt;Int&gt;`, `Optional&lt;Optional&lt;Int&gt;&gt;`, and so on.<br></p><p>5. In Swift 2, importing Foundation activates many implicit conversions between Foundation and Standard Library types, including conversions to AnyObject. Many (perhaps all?) are gone in Swift 3. (However, Foundation still has plenty of magical `as` casts.)<br></p><p>Hope this helps,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
