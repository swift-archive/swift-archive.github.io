<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 22, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>Hello Swift Community,<br></p><p>The review of SE-0077: &quot;Improved operator declarations&quot; ran from May 17...23. On June 22, 2016, the core team decided to return the first version of this proposal for revision. The core design proposed is a clear win over the Swift 2 design, but the core team feels that revisions are necessary for usability and consistency with the rest of the language:<br></p><p>- The proposed associativity(left) and precedence(&lt;) syntax for precedence group attributes doesn’t have a precedent elsewhere in Swift. Furthermore, it isn’t clear which relationship &lt; and &gt; correspond to in the precedence syntax. The core team feels that it’s more in the character of Swift to use colon-separated “key-value” syntax, with associativity, strongerThan, and weakerThan keyword labels:<br></p><p>precedencegroup Foo {<br>  associativity: left<br>  strongerThan: Bar<br>  weakerThan: Bas<br>}<br></p><p>-If “stronger” and “weaker” relationships are both allowed, that would enable different code to express precedence relationships in different, potentially confusing ways. To promote consistency and clarity, the core team recommends the following restriction: Relationships between precedence groups defined within the same module must be expressed exclusively in terms of strongerThan. weakerThan can only be used to extend the precedence graph relative to another module’s groups, subject to the transitivity constraints already described in the proposal. This enforces a consistent style internally within modules defining operators.<br></p><p>- The proposal states that precedence groups live in a separate namespace from other declarations; however, this is unprecedented in Swift, and leads to significant implementation challenges. The core team recommends that precedence groups exist in the same namespace as all Swift declarations. It would be an error to reference a precedence group in value contexts.<br></p><p>- Placing precedence groups in the standard namespace makes the question of naming conventions for precedencegroup declarations important. The core team feels that this is an important issue for the proposal to address. As a starting point, we recommend CamelCase with a -Precedence suffix, e.g. AdditivePrecedence. This is unfortunately redundant in the context of a precedencegroup declaration; however, precedencegroups should be rare in practice, and it adds clarity at the point of use in operator declarations in addition to avoiding naming collisions. The standard library team also requests time to review the proposed names of the standard precedence groups<br></p><p>- This proposal quietly drops the assignment modifier that exists on operators today. This modifier had one important function–an operator marked assignment gets folded into an optional chain, allowing foo?.bar += 2 to work as foo?(.bar += 2) instead of failing to type-check as (foo?.bar) += 2. In practice, all Swift operators currently marked assignment are at the equivalent of the Assignment precedence level, so the core team recommends making this optional chaining interaction a special feature of the Assignment precedence group.<br></p><p>- This proposal also accidentally includes declarations of &amp;&amp;= and ||= operators, which do not exist in Swift today and should not be added as part of this proposal.<br></p><p>Thanks Anton Zhilin for the proposal, and thanks to everyone who participated in the review! I will be taking over from Chris as review manager for the next round of revision.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160622/e8ab58f2/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 8:24 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of SE-0077: &quot;Improved operator declarations&quot; ran from May 17...23. On June 22, 2016, the core team decided to return the first version of this proposal for revision. The core design proposed is a clear win over the Swift 2 design, but the core team feels that revisions are necessary for usability and consistency with the rest of the language:<br></p><p>One clarification: we still consider this to be in scope for Swift 3.  Anton, we would appreciate it if you could revise the proposal, but if not, let us know.<br></p><p>Thanks!<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/04fbaede/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[swift-evolution-announce] [Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June 23, 2016 at 12:00:00pm</p></header><div class="content"><p>Good news for me! I will surely submit a pull request today.<br></p><p>- Anton<br></p><p>2016-06-23 7:56 GMT+03:00 Chris Lattner &lt;clattner at apple.com&gt;:<br></p><p>&gt;<br>&gt; On Jun 22, 2016, at 8:24 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;<br>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0077: &quot;Improved operator declarations&quot; ran from May<br>&gt; 17...23. On June 22, 2016, the core team decided to *return* the first<br>&gt; version of this proposal for revision. The core design proposed is a clear<br>&gt; win over the Swift 2 design, but the core team feels that revisions are<br>&gt; necessary for usability and consistency with the rest of the language:<br>&gt;<br>&gt;<br>&gt; One clarification: we still consider this to be in scope for Swift 3.<br>&gt; Anton, we would appreciate it if you could revise the proposal, but if not,<br>&gt; let us know.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; -Chris<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/fed1f8c8/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 23, 2016 at 04:00:00am</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 10:24 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of SE-0077: &quot;Improved operator declarations&quot; ran from May<br>&gt; 17...23. On June 22, 2016, the core team decided to *return* the first<br>&gt; version of this proposal for revision. The core design proposed is a clear<br>&gt; win over the Swift 2 design, but the core team feels that revisions are<br>&gt; necessary for usability and consistency with the rest of the language:<br>&gt;<br>&gt; - The proposed associativity(left) and precedence(&lt;) syntax for<br>&gt; precedence group attributes doesn’t have a precedent elsewhere in Swift.<br>&gt; Furthermore, it isn’t clear which relationship &lt; and &gt; correspond to in<br>&gt; the precedence syntax. The core team feels that it’s more in the character<br>&gt; of Swift to use colon-separated “key-value” syntax, with associativity,<br>&gt; strongerThan, and weakerThan keyword labels:<br>&gt;<br>&gt;<br>&gt; precedencegroup Foo {<br>&gt;<br>&gt;   associativity: left<br>&gt;<br>&gt;   strongerThan: Bar<br>&gt;<br>&gt;   weakerThan: Bas<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; -If “stronger” and “weaker” relationships are both allowed, that would<br>&gt; enable different code to express precedence relationships in different,<br>&gt; potentially confusing ways. To promote consistency and clarity, the core<br>&gt; team recommends the following restriction: Relationships between precedence<br>&gt; groups defined within the same module must be expressed exclusively in<br>&gt; terms of strongerThan. weakerThan can only be used to extend<br>&gt; the precedence graph relative to another module’s groups, subject to the<br>&gt; transitivity constraints already described in the proposal. This enforces a<br>&gt; consistent style internally within modules defining operators.<br>&gt;<br>&gt;<br>This definitely looks cleaner, but the terminology &quot;stronger&quot; and &quot;weaker&quot;<br>is pretty non-standard. Typically, precedence is said to be above or below<br>(equivalently, over or under, higher or lower) or, alternatively, before or<br>after. IMO, before and after are particularly apt terms for operators,<br>because `*` having precedence before `+` means precisely that `*` is<br>evaluated before `+`. It&#39;s kind of a mixed metaphor to associate precedence<br>with being stronger and weaker, though I suppose in life as well the<br>stronger get to go first in line if they want to...<br></p><p><br>&gt;<br>&gt; - The proposal states that precedence groups live in a separate namespace<br>&gt; from other declarations; however, this is unprecedented in Swift, and leads<br>&gt; to significant implementation challenges. The core team recommends<br>&gt; that precedence groups exist in the same namespace as all Swift<br>&gt; declarations. It would be an error to reference a precedence group in value<br>&gt; contexts.<br>&gt;<br>&gt;<br>&gt; - Placing precedence groups in the standard namespace makes the question<br>&gt; of naming conventions for precedencegroup declarations important. The core<br>&gt; team feels that this is an important issue for the proposal to address. As<br>&gt; a starting point, we recommend CamelCase with a -Precedence suffix, e.g.<br>&gt; AdditivePrecedence. This is unfortunately redundant in the context of a<br>&gt; precedencegroup declaration; however, precedencegroups should be rare in<br>&gt; practice, and it adds clarity at the point of use in operator declarations<br>&gt; in addition to avoiding naming collisions.<br>&gt;<br>&gt;<br>Conceptually, precedence groups feel to me like enum cases in a squishy<br>kind of way, only you&#39;re not defining them all in one place. I wonder if<br>that intuition has wide enough appeal that lowerCamelCase might be more<br>apt. If you stretch that analogy further, it might make sense for<br>precedence groups to live in their own namespace as though they&#39;re cases<br>for an unutterable enum.<br></p><p>```<br>// A way of thinking about namespacing precedence groups<br>// Not actually proposed to be a real thing<br>enum _PrecedenceGroup : Int {<br>  case assignment = 90, ternary = 100, disjunctive = 110 /* etc. */<br>}<br>```<br></p><p><br>&gt; The standard library team also requests time to review the proposed names<br>&gt; of the standard precedence groups<br>&gt;<br>&gt;<br>&gt; - This proposal quietly drops the assignment modifier that exists on<br>&gt; operators today. This modifier had one important function–an operator<br>&gt; marked assignment gets folded into an optional chain, allowing foo?.bar<br>&gt; += 2 to work as foo?(.bar += 2) instead of failing to type-check as (foo?.bar)<br>&gt; += 2. In practice, all Swift operators currently marked assignment are at<br>&gt; the equivalent of the Assignment precedence level, so the core team<br>&gt; recommends making this optional chaining interaction a special feature of<br>&gt; the Assignment precedence group.<br>&gt;<br>&gt;<br>&gt; - This proposal also accidentally includes declarations of &amp;&amp;= and ||= operators,<br>&gt; which do not exist in Swift today and should not be added as part of this<br>&gt; proposal.<br>&gt;<br>&gt; Thanks Anton Zhilin for the proposal, and thanks to everyone who<br>&gt; participated in the review! I will be taking over from Chris as review<br>&gt; manager for the next round of revision.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/1558898e/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Returned for revision] SE-0077: Improved operator declarations</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>June 23, 2016 at 10:00:00am</p></header><div class="content"><p>I agree that the colon-separated syntax looks cleaner. However, I agree<br>with Xiaodi about the stronger/weaker terms being less clear (if only<br>because I associate those terms with memory management in Swift, not<br>operator precedence). My personal preference would be for something like<br>&#39;appliedBefore&#39;/&#39;appliedAfter&#39;, so for example:<br></p><p>precedencegroup Multiplication<br>{<br>  appliedBefore: Addition<br>  appliedAfter: Parentheses<br>}<br></p><p>On Thu, Jun 23, 2016 at 10:24 AM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, Jun 22, 2016 at 10:24 PM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;&gt;<br>&gt;&gt; Hello Swift Community,<br>&gt;&gt;<br>&gt;&gt; The review of SE-0077: &quot;Improved operator declarations&quot; ran from May<br>&gt;&gt; 17...23. On June 22, 2016, the core team decided to *return* the first<br>&gt;&gt; version of this proposal for revision. The core design proposed is a clear<br>&gt;&gt; win over the Swift 2 design, but the core team feels that revisions are<br>&gt;&gt; necessary for usability and consistency with the rest of the language:<br>&gt;&gt;<br>&gt;&gt; - The proposed associativity(left) and precedence(&lt;) syntax for<br>&gt;&gt; precedence group attributes doesn’t have a precedent elsewhere in Swift.<br>&gt;&gt; Furthermore, it isn’t clear which relationship &lt; and &gt; correspond to in<br>&gt;&gt; the precedence syntax. The core team feels that it’s more in the character<br>&gt;&gt; of Swift to use colon-separated “key-value” syntax, with associativity,<br>&gt;&gt; strongerThan, and weakerThan keyword labels:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; precedencegroup Foo {<br>&gt;&gt;<br>&gt;&gt;   associativity: left<br>&gt;&gt;<br>&gt;&gt;   strongerThan: Bar<br>&gt;&gt;<br>&gt;&gt;   weakerThan: Bas<br>&gt;&gt;<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; -If “stronger” and “weaker” relationships are both allowed, that would<br>&gt;&gt; enable different code to express precedence relationships in different,<br>&gt;&gt; potentially confusing ways. To promote consistency and clarity, the core<br>&gt;&gt; team recommends the following restriction: Relationships between precedence<br>&gt;&gt; groups defined within the same module must be expressed exclusively in<br>&gt;&gt; terms of strongerThan. weakerThan can only be used to extend<br>&gt;&gt; the precedence graph relative to another module’s groups, subject to the<br>&gt;&gt; transitivity constraints already described in the proposal. This enforces a<br>&gt;&gt; consistent style internally within modules defining operators.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; This definitely looks cleaner, but the terminology &quot;stronger&quot; and &quot;weaker&quot;<br>&gt; is pretty non-standard. Typically, precedence is said to be above or below<br>&gt; (equivalently, over or under, higher or lower) or, alternatively, before or<br>&gt; after. IMO, before and after are particularly apt terms for operators,<br>&gt; because `*` having precedence before `+` means precisely that `*` is<br>&gt; evaluated before `+`. It&#39;s kind of a mixed metaphor to associate precedence<br>&gt; with being stronger and weaker, though I suppose in life as well the<br>&gt; stronger get to go first in line if they want to...<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt; - The proposal states that precedence groups live in a separate namespace<br>&gt;&gt; from other declarations; however, this is unprecedented in Swift, and leads<br>&gt;&gt; to significant implementation challenges. The core team recommends<br>&gt;&gt; that precedence groups exist in the same namespace as all Swift<br>&gt;&gt; declarations. It would be an error to reference a precedence group in value<br>&gt;&gt; contexts.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - Placing precedence groups in the standard namespace makes the question<br>&gt;&gt; of naming conventions for precedencegroup declarations important. The core<br>&gt;&gt; team feels that this is an important issue for the proposal to address. As<br>&gt;&gt; a starting point, we recommend CamelCase with a -Precedence suffix, e.g.<br>&gt;&gt; AdditivePrecedence. This is unfortunately redundant in the context of a<br>&gt;&gt; precedencegroup declaration; however, precedencegroups should be rare in<br>&gt;&gt; practice, and it adds clarity at the point of use in operator declarations<br>&gt;&gt; in addition to avoiding naming collisions.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Conceptually, precedence groups feel to me like enum cases in a squishy<br>&gt; kind of way, only you&#39;re not defining them all in one place. I wonder if<br>&gt; that intuition has wide enough appeal that lowerCamelCase might be more<br>&gt; apt. If you stretch that analogy further, it might make sense for<br>&gt; precedence groups to live in their own namespace as though they&#39;re cases<br>&gt; for an unutterable enum.<br>&gt;<br>&gt; ```<br>&gt; // A way of thinking about namespacing precedence groups<br>&gt; // Not actually proposed to be a real thing<br>&gt; enum _PrecedenceGroup : Int {<br>&gt;   case assignment = 90, ternary = 100, disjunctive = 110 /* etc. */<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt;<br>&gt;&gt; The standard library team also requests time to review the proposed names<br>&gt;&gt; of the standard precedence groups<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - This proposal quietly drops the assignment modifier that exists on<br>&gt;&gt; operators today. This modifier had one important function–an operator<br>&gt;&gt; marked assignment gets folded into an optional chain, allowing foo?.bar<br>&gt;&gt; += 2 to work as foo?(.bar += 2) instead of failing to type-check as (foo?.bar)<br>&gt;&gt; += 2. In practice, all Swift operators currently marked assignment are<br>&gt;&gt; at the equivalent of the Assignment precedence level, so the core team<br>&gt;&gt; recommends making this optional chaining interaction a special feature of<br>&gt;&gt; the Assignment precedence group.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - This proposal also accidentally includes declarations of &amp;&amp;= and ||= operators,<br>&gt;&gt; which do not exist in Swift today and should not be added as part of this<br>&gt;&gt; proposal.<br>&gt;&gt;<br>&gt;&gt; Thanks Anton Zhilin for the proposal, and thanks to everyone who<br>&gt;&gt; participated in the review! I will be taking over from Chris as review<br>&gt;&gt; manager for the next round of revision.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/a6ac5af1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
