<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e0bf2aabb9fc16782586e834dc6e2d7?s=50"></div><header><strong>Passing an optional first argument to sequence(first:next:)</strong> from <string>Braeden Profile</string> &lt;jhaezhyr12 at gmail.com&gt;<p>August 16, 2016 at 06:00:00pm</p></header><div class="content"><p>Okay, I’m actually confused about the current state of things.<br></p><p>Earlier, this was introduced:<br></p><p>// This function is silly,<br>// but useful functions may take a similar form<br>func foo(x: Int?) -&gt; Int? {<br>  guard let x = x else { return 0 }<br>  return x &gt; 12 ? nil : x + 1<br>}<br></p><p>let a: Int? = nil<br>for i in sequence(first: a, next: { foo($0) })<br>{<br>  // This is a pretty useless thing to do,<br>  // but there are useful things that can be done<br>  // without checking whether `i == nil`<br>  print(i)<br>}<br></p><p>…and it returns 14 lines of output.  But this doesn’t make sense.  I expected the anonymous closure for next in sequence(first: Int?, next: (Int?) -&gt; Int??) to raise (foo($0)) to (Optional(foo($0))) to avoid having the type signature end up being (Int?) -&gt; Int?.  In that case, the result of (foo($0)) would always be encapsulated in Optional.Some(), so at the 15th run, it would return (Optional.Some(nil)).  Yet it stops when foo returns nil.  Why is this?<br></p><p>And if you replace &quot;next: { foo($0) }&quot; with &quot;next: foo&quot;, then it compiles with the same result.  Replacing it with “next: { Optional(foo($0)) }” gives the result I originally expected.<br></p><p>This actually would have made more sense to me if the signature was “func sequence&lt;T&gt;(first: T?, next: (T) -&gt; T?) -&gt; UnfoldFirstSequence&lt;T&gt;”, and “let a = nil&quot; would have caused an empty sequence.  I understand that this is a situation that would change unexpectedly if this stdlib change occurred, but I sure think the changed sequence(first:next:) function makes for a more understandable result.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160816/4f2904b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Passing an optional first argument to sequence(first:next:)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 16, 2016 at 07:00:00pm</p></header><div class="content"><p>On Tue, Aug 16, 2016 at 7:34 PM, Braeden Profile via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Okay, I’m actually confused about the current state of things.<br>&gt;<br>&gt; Earlier, this was introduced:<br>&gt;<br>&gt; // This function is silly,<br>&gt; // but useful functions may take a similar form<br>&gt; func foo(x: Int?) -&gt; Int? {<br>&gt;   guard let x = x else { return 0 }<br>&gt;   return x &gt; 12 ? nil : x + 1<br>&gt; }<br>&gt;<br>&gt; let a: Int? = nil<br>&gt; for i in sequence(first: a, next: { foo($0) })<br>&gt; {<br>&gt;   // This is a pretty useless thing to do,<br>&gt;   // but there are useful things that can be done<br>&gt;   // without checking whether `i == nil`<br>&gt;   print(i)<br>&gt; }<br>&gt;<br>&gt; …and it returns 14 lines of output.  But this doesn’t make sense.  I<br>&gt; expected the anonymous closure for next in sequence(first: Int?, next:<br>&gt; (Int?) -&gt; Int??) to raise (foo($0)) to (Optional(foo($0))) to avoid having<br>&gt; the type signature end up being (Int?) -&gt; Int?.  In that case, the result<br>&gt; of (foo($0)) would always be encapsulated in Optional.Some(), so at the<br>&gt; 15th run, it would return (Optional.Some(nil)).  Yet it stops when foo<br>&gt; returns nil.  Why is this?<br>&gt;<br></p><p>Yeah, I think that&#39;s a bug :) Which means it should be fixed whether we<br>change the function signature or not.<br></p><p><br>&gt; And if you replace &quot;next: { foo($0) }&quot; with &quot;next: foo&quot;, then it compiles<br>&gt; with the same result.  Replacing it with “next: { Optional(foo($0)) }”<br>&gt; gives the result I originally expected.<br>&gt;<br>&gt; This actually would have made more sense to me if the signature was “func<br>&gt; sequence&lt;T&gt;(first: T?, next: (T) -&gt; T?) -&gt; UnfoldFirstSequence&lt;T&gt;”, and<br>&gt; “let a = nil&quot; would have caused an empty sequence.  I understand that this<br>&gt; is a situation that would change unexpectedly if this stdlib change<br>&gt; occurred, but I sure think the changed sequence(first:next:) function makes<br>&gt; for a more understandable result.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160816/a6eb2737/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Passing an optional first argument to sequence(first:next:)</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>August 16, 2016 at 08:00:00pm</p></header><div class="content"><p>On Tue, Aug 16, 2016 at 7:44 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; On Tue, Aug 16, 2016 at 7:34 PM, Braeden Profile via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Okay, I’m actually confused about the current state of things.<br>&gt;&gt;<br>&gt;&gt; Earlier, this was introduced:<br>&gt;&gt;<br>&gt;&gt; // This function is silly,<br>&gt;&gt; // but useful functions may take a similar form<br>&gt;&gt; func foo(x: Int?) -&gt; Int? {<br>&gt;&gt;   guard let x = x else { return 0 }<br>&gt;&gt;   return x &gt; 12 ? nil : x + 1<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; let a: Int? = nil<br>&gt;&gt; for i in sequence(first: a, next: { foo($0) })<br>&gt;&gt; {<br>&gt;&gt;   // This is a pretty useless thing to do,<br>&gt;&gt;   // but there are useful things that can be done<br>&gt;&gt;   // without checking whether `i == nil`<br>&gt;&gt;   print(i)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; …and it returns 14 lines of output.  But this doesn’t make sense.  I<br>&gt;&gt; expected the anonymous closure for next in sequence(first: Int?, next:<br>&gt;&gt; (Int?) -&gt; Int??) to raise (foo($0)) to (Optional(foo($0))) to avoid having<br>&gt;&gt; the type signature end up being (Int?) -&gt; Int?.  In that case, the result<br>&gt;&gt; of (foo($0)) would always be encapsulated in Optional.Some(), so at the<br>&gt;&gt; 15th run, it would return (Optional.Some(nil)).  Yet it stops when foo<br>&gt;&gt; returns nil.  Why is this?<br>&gt;&gt;<br>&gt;<br>&gt; Yeah, I think that&#39;s a bug :) Which means it should be fixed whether we<br>&gt; change the function signature or not.<br>&gt;<br></p><p>I take that back. Not a bug. `next` would have type `@escaping (Int?) -&gt;<br>Int??`.<br></p><p>When the result of `foo($0)` is `nil` (i.e. `Optional&lt;Int&gt;.none`) and<br>that&#39;s used as the return value for `next`, it gets promoted to<br>`Optional&lt;Optional&lt;Int&gt;&gt;.none`, not to `Optional&lt;Optional&lt;Int&gt;&gt;.some(nil)`.<br>It makes sense, despite looking like gibberish.<br></p><p><br>&gt;<br>&gt;&gt; And if you replace &quot;next: { foo($0) }&quot; with &quot;next: foo&quot;, then it compiles<br>&gt;&gt; with the same result.  Replacing it with “next: { Optional(foo($0)) }”<br>&gt;&gt; gives the result I originally expected.<br>&gt;&gt;<br>&gt;&gt; This actually would have made more sense to me if the signature was “func<br>&gt;&gt; sequence&lt;T&gt;(first: T?, next: (T) -&gt; T?) -&gt; UnfoldFirstSequence&lt;T&gt;”, and<br>&gt;&gt; “let a = nil&quot; would have caused an empty sequence.  I understand that this<br>&gt;&gt; is a situation that would change unexpectedly if this stdlib change<br>&gt;&gt; occurred, but I sure think the changed sequence(first:next:) function makes<br>&gt;&gt; for a more understandable result.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160816/fa864ff0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
