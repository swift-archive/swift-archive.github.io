<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Proposal] Separate protocols and interfaces</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>January  3, 2016 at 09:00:00pm</p></header><div class="content"><p>The problem with syntax of &quot;existential protocol&quot; and &quot;protocol&quot; is that<br>the first should actually be default, and easier to write.<br></p><p>We should prefer static to dynamic. It is as if &quot;structs&quot; had to be<br>declared as &quot;static class&quot;, or &quot;let&quot; variables as &quot;const var&quot;. Shorter<br>keywords should be used for enforcing good practices.<br>Additionally, 95% of standard library protocols are actually &quot;existential<br>protocols&quot;, or &quot;protocols&quot; in my notation.<br></p><p>Next, I don&#39;t know any language which has &quot;existential&quot; keyword. Moreover,<br>&quot;existential types&quot; in Haskell mean means (roughly) &quot;type that can hold<br>value of any instance of class with type erasure&quot;, and that is exactly what<br>an interface is in Swift. So, I think that if we will add &quot;existential&quot;<br>keyword, we would add it the other way: for dynamically dispatched types.<br></p><p>Some other suggestions (imagine a table):<br></p><p>statically dispatched - dynamically dispatched<br>protocol - interface<br>protocol - dynamic protocol<br>protocol - existential protocol<br>static protocol - dynamic protocol<br>trait - protocol<br>trait - interface<br></p><p>I also personally like the &quot;trait - protocol&quot; naming. Traits are used to be<br>statically dispatched things in other languages, and protocols are<br>dynamically dispatched things from Objective-C. Actually, I&#39;m satisfied<br>with any pair unless dynamic protocols get shorter names.<br></p><p>P.S. I&#39;ll correct that Self issue, thanks!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/166e4e8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal] Separate protocols and interfaces</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 3, 2016, at 10:25 AM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The problem with syntax of &quot;existential protocol&quot; and &quot;protocol&quot; is that the first should actually be default, and easier to write.<br>&gt; <br>&gt; We should prefer static to dynamic.<br></p><p>These two statements seem to be in conflict: existentials create dynamic polymorphism, while generics create static polymorphism.<br></p><p>&gt; It is as if &quot;structs&quot; had to be declared as &quot;static class&quot;, or &quot;let&quot; variables as &quot;const var&quot;. Shorter keywords should be used for enforcing good practices.<br>&gt; Additionally, 95% of standard library protocols are actually &quot;existential protocols&quot;, or &quot;protocols&quot; in my notation.<br>&gt; <br>&gt; Next, I don&#39;t know any language which has &quot;existential&quot; keyword. Moreover, &quot;existential types&quot; in Haskell mean means (roughly) &quot;type that can hold value of any instance of class with type erasure&quot;, and that is exactly what an interface is in Swift. So, I think that if we will add &quot;existential&quot; keyword, we would add it the other way: for dynamically dispatched types.<br>&gt; <br>&gt; Some other suggestions (imagine a table):<br>&gt; <br>&gt; statically dispatched - dynamically dispatched<br>&gt; protocol - interface<br>&gt; protocol - dynamic protocol<br>&gt; protocol - existential protocol<br>&gt; static protocol - dynamic protocol<br>&gt; trait - protocol<br>&gt; trait - interface<br>&gt; <br>&gt; I also personally like the &quot;trait - protocol&quot; naming. Traits are used to be statically dispatched things in other languages, and protocols are dynamically dispatched things from Objective-C. Actually, I&#39;m satisfied with any pair unless dynamic protocols get shorter names.<br>&gt; <br>&gt; P.S. I&#39;ll correct that Self issue, thanks!<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/fef475ef/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
