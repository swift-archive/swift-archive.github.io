<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 30, 2016 at 10:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/90748b0b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 30, 2016 at 07:00:00am</p></header><div class="content"><p>on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br></p><p>&gt; That&#39;s certainly an improvement, but why &quot;formIntersection&quot; instead of<br>&gt; &quot;intersect&quot; (in analogy to &quot;subtract&quot;)?<br></p><p>1. Consistency with union, which is more closely related than subtract.<br></p><p>2. &quot;Intersect&quot; actually has the wrong meaning as an imperative.  If you<br>   tell set A to intersect set B, and then ask whether A intersects B<br>   (!A.isDisjoint(with: B)), you would expect an answer of true.<br></p><p>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; Am 30. März 2016 um 00:07 schrieb &quot;T.J. Usiyan via swift-evolution&quot; &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;     I think that this is a great improvement and is consistent enough to accept. `form` will take some getting used to. <br>&gt;     TJ<br>&gt;<br>&gt;     On Thu, Mar 24, 2016 at 9:39 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;         Just an update:<br>&gt;<br>&gt;         The naming guidelines working group went back into negotiation over<br>&gt;         the shape of SetAlgebra (and thus, Set and OptionSet) for<br>&gt;         Swift 3, and reached a new consensus. We intend to bring forward a<br>&gt;         proposal for the API shown here:<br>&gt;<br>&gt;         http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html<br>&gt;<br>&gt;         and to update the guidelines to suggest using the &quot;form&quot; prefix to<br>&gt;         create a verb phrase for a mutating method when the operation is<br>&gt;         fundamentally non-mutating and described by a noun.<br>&gt;<br>&gt;         Regards,<br>&gt;<br>&gt;         --<br>&gt;         Dave<br>&gt;<br>&gt;         _______________________________________________<br>&gt;         swift-evolution mailing list<br>&gt;         swift-evolution at swift.org<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 30, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Am 30.03.2016 um 16:49 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt; <br>&gt;&gt; on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That&#39;s certainly an improvement, but why &quot;formIntersection&quot; instead of<br>&gt;&gt; &quot;intersect&quot; (in analogy to &quot;subtract&quot;)?<br>&gt; <br>&gt; 1. Consistency with union, which is more closely related than subtract.<br></p><p>I&#39;d prefer consistency with the verb rule here (using formXXX only as last resort).<br></p><p><br>&gt; 2. &quot;Intersect&quot; actually has the wrong meaning as an imperative.  If you<br>&gt;   tell set A to intersect set B, and then ask whether A intersects B<br>&gt;   (!A.isDisjoint(with: B)), you would expect an answer of true.<br></p><p>Sorry, but I do not agree. With that reasoning I would have to expect a.intersection(b) to be not empty. <br></p><p>-Thorsten<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 30, 2016 at 08:00:00am</p></header><div class="content"><p>on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br></p><p>&gt;&gt; Am 30.03.2016 um 16:49 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s certainly an improvement, but why &quot;formIntersection&quot; instead of<br>&gt;&gt;&gt; &quot;intersect&quot; (in analogy to &quot;subtract&quot;)?<br>&gt;&gt; <br>&gt;&gt; 1. Consistency with union, which is more closely related than subtract.<br>&gt;<br>&gt; I&#39;d prefer consistency with the verb rule here<br></p><p>Which rule is that?  As far as I can tell, this is consistent with all<br>the rules.<br></p><p>&gt; (using formXXX only as last resort).<br></p><p>Though I prefer not to, you can look at this as a last resort if you<br>like; the alternative you&#39;re proposing has the wrong implication, so it<br>is not a candidate.  It would be like using “remainder” as a verb for<br>integers.  Yes, it&#39;s a legitimate verb, but it means the wrong thing<br>(see retail).<br></p><p>&gt;&gt; 2. &quot;Intersect&quot; actually has the wrong meaning as an imperative.  If you<br>&gt;&gt;   tell set A to intersect set B, and then ask whether A intersects B<br>&gt;&gt;   (!A.isDisjoint(with: B)), you would expect an answer of true.<br>&gt;<br>&gt; Sorry, but I do not agree. With that reasoning I would have to expect<br>&gt; a.intersection(b) to be not empty.<br></p><p>Yes, that&#39;s exactly what I&#39;m saying.  If you tell A to intersect B,<br>presumably when the call completes, A intersects B (i.e. has a non-empty<br>intersection).  That would imply an implementation like, e.g.<br></p><p>  mutating func intersect(other: Self) {<br>    self.formUnion(other)<br>  }<br>                   <br>which is almost the opposite of the desired implication.<br>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
