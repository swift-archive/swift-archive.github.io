<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Disallow local parameter names in protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Tue Jul 19 2016, James Froggatt &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Made a draft proposal to start this discussion, and help define the<br>&gt; problem. I&#39;m not too biased either way, this isn&#39;t a particularly<br>&gt; major aspect of the language, but obviously the proposal has to<br>&gt; justify the potential change to the language. This is something due<br>&gt; for re-evaluation since Swift 3 removed the ‘first-argument<br>&gt; hide-by-default’ rule, which now makes this simplification possible.<br>&gt;<br>&gt; Hoping to get an idea of what people&#39;s opinions are on this, and the<br>&gt; subject of local parameter names leaking to the user in<br>&gt; general. Please let me know if my reasoning is flawed, anywhere.<br>&gt;<br>&gt; ## Introduction<br>&gt;<br>&gt; Swift&#39;s current treatment of local parameter names is rather<br>&gt; odd. They&#39;re hidden from the caller most of the timer, where an<br>&gt; external parameter label is specified, but otherwise (if a ‘_’ is<br>&gt; used), they actually leak out into Xcode&#39;s autocomplete. External<br>&gt; labels are intended to add clarity, so the local names seem like they<br>&gt; should be an implementation detail. Otherwise, why don&#39;t local names<br>&gt; show up for labelled parameters, too?<br>&gt;<br>&gt; The main point in the language affected by this ambiguity is in the<br>&gt; protocol definition, where local names can be specified, but are only<br>&gt; in any way useful for autocomplete when implementing the protocol,<br>&gt; making them useless to the language itself. <br></p><p>They&#39;re useful in documentation comments, which you might have realized<br>if you had included them in your examples ;-)<br></p><p>&gt; This proposal, if accepted, would simplify the language by removing<br>&gt; the ability to declare local parameter names from protocols, reducing<br>&gt; their function signatures to just the actual requirements - label and<br>&gt; type.<br></p><p>Code completion and doc comments are good enough reasons (for me) to<br>keep this capability.  I am opposed to any change here.<br></p><p>&gt; ## Motivation<br>&gt;<br>&gt; Consider the following code:<br>&gt;<br>&gt; ````swift<br>&gt; protocol ExampleProtocol {<br>&gt;<br>&gt; 	func move(from source: Int, to destination: Int)<br>&gt;<br>&gt; 	func max(_ a: Int, _ b: Int) -&gt; Int<br>&gt;<br>&gt; 	func find(_: String, in: String)<br>&gt; }<br>&gt;<br>&gt; struct ExampleStruct1: ExampleProtocol {<br>&gt;<br>&gt; 	func move(from source: Int, to destination: Int) { return }<br>&gt;<br>&gt; 	func max(_ a: Int, _ b: Int) -&gt; Int { return 0 }<br>&gt;<br>&gt; 	func find(_: String, in: String) { return }<br>&gt; }<br>&gt;<br>&gt; //still conforms, despite differences to the protocol signature<br>&gt; struct ExampleStruct2: ExampleProtocol {<br>&gt;<br>&gt; 	func move(from: Int, to: Int) { return }<br>&gt;<br>&gt; 	func max(_ first: Int, _ second: Int) -&gt; Int { return 0 }<br>&gt;<br>&gt; 	func find(_ substring: String, in string: String) { return }<br>&gt; }<br>&gt; ````<br>&gt;<br>&gt; ExampleStruct2 conforms to ExampleProtocol, yet clearly has some<br>&gt; differences to the signatures defined in the protocol. In<br>&gt; ExampleStruct2, its `move` function has no local parameter names,<br>&gt; despite their presence in the protocol definition. Its `max` function<br>&gt; has differing local names, and `find` has names which aren&#39;t present<br>&gt; in the protocol.<br>&gt;<br>&gt; In functions, it is the purpose of external parameter labels serve to<br>&gt; add clarity to the call site. The local names become variables in the<br>&gt; function&#39;s scope, and are generally invisible to the caller. While<br>&gt; these local names can be declared in the protocol, they aren&#39;t<br>&gt; enforced, and are effectively useless. A confused user may expect that<br>&gt; this will enforce the local names, or otherwise specify a requirement,<br>&gt; similar to other protocol semantics.<br>&gt;<br>&gt; ## Proposed solution<br>&gt;<br>&gt; Remove the ability to specify local parameter names from protocols.<br>&gt;<br>&gt; ## Detailed design<br>&gt;<br>&gt; Specification of local parameter names in protocols would trigger a<br>&gt; compiler error, explaining that local parameter names are not<br>&gt; enforced, with a fixit to remove the local name from the parameter<br>&gt; list.<br>&gt;<br>&gt; ## Impact on existing code<br>&gt;<br>&gt; This will break existing protocols which declare local parameter<br>&gt; names, but should be easily fixable with the migrator, or the<br>&gt; previously mentioned fixit.<br>&gt;<br>&gt; ## Alternatives considered<br>&gt;<br>&gt; Leave protocols as they are now, or enforce local parameter names where specified.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>Disallow local parameter names in protocols</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 20, 2016 at 04:00:00am</p></header><div class="content"><p>&gt; On 20 Jul 2016, at 00:30, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 19 2016, James Froggatt &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Made a draft proposal to start this discussion, and help define the<br>&gt;&gt; problem. I&#39;m not too biased either way, this isn&#39;t a particularly<br>&gt;&gt; major aspect of the language, but obviously the proposal has to<br>&gt;&gt; justify the potential change to the language. This is something due<br>&gt;&gt; for re-evaluation since Swift 3 removed the ‘first-argument<br>&gt;&gt; hide-by-default’ rule, which now makes this simplification possible.<br>&gt;&gt; <br>&gt;&gt; Hoping to get an idea of what people&#39;s opinions are on this, and the<br>&gt;&gt; subject of local parameter names leaking to the user in<br>&gt;&gt; general. Please let me know if my reasoning is flawed, anywhere.<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Swift&#39;s current treatment of local parameter names is rather<br>&gt;&gt; odd. They&#39;re hidden from the caller most of the timer, where an<br>&gt;&gt; external parameter label is specified, but otherwise (if a ‘_’ is<br>&gt;&gt; used), they actually leak out into Xcode&#39;s autocomplete. External<br>&gt;&gt; labels are intended to add clarity, so the local names seem like they<br>&gt;&gt; should be an implementation detail. Otherwise, why don&#39;t local names<br>&gt;&gt; show up for labelled parameters, too?<br>&gt;&gt; <br>&gt;&gt; The main point in the language affected by this ambiguity is in the<br>&gt;&gt; protocol definition, where local names can be specified, but are only<br>&gt;&gt; in any way useful for autocomplete when implementing the protocol,<br>&gt;&gt; making them useless to the language itself. <br>&gt; <br>&gt; They&#39;re useful in documentation comments, which you might have realized<br>&gt; if you had included them in your examples ;-)<br>&gt; <br>&gt;&gt; This proposal, if accepted, would simplify the language by removing<br>&gt;&gt; the ability to declare local parameter names from protocols, reducing<br>&gt;&gt; their function signatures to just the actual requirements - label and<br>&gt;&gt; type.<br>&gt; <br>&gt; Code completion and doc comments are good enough reasons (for me) to<br>&gt; keep this capability.  I am opposed to any change here.<br></p><p><br>Ditto. That’s what I use them for.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/c2236690/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Disallow local parameter names in protocols</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 20, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 19 Jul 2016, at 23:30, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Tue Jul 19 2016, James Froggatt &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Made a draft proposal to start this discussion, and help define the<br>&gt;&gt; problem. I&#39;m not too biased either way, this isn&#39;t a particularly<br>&gt;&gt; major aspect of the language, but obviously the proposal has to<br>&gt;&gt; justify the potential change to the language. This is something due<br>&gt;&gt; for re-evaluation since Swift 3 removed the ‘first-argument<br>&gt;&gt; hide-by-default’ rule, which now makes this simplification possible.<br>&gt;&gt; <br>&gt;&gt; Hoping to get an idea of what people&#39;s opinions are on this, and the<br>&gt;&gt; subject of local parameter names leaking to the user in<br>&gt;&gt; general. Please let me know if my reasoning is flawed, anywhere.<br>&gt;&gt; <br>&gt;&gt; ## Introduction<br>&gt;&gt; <br>&gt;&gt; Swift&#39;s current treatment of local parameter names is rather<br>&gt;&gt; odd. They&#39;re hidden from the caller most of the timer, where an<br>&gt;&gt; external parameter label is specified, but otherwise (if a ‘_’ is<br>&gt;&gt; used), they actually leak out into Xcode&#39;s autocomplete. External<br>&gt;&gt; labels are intended to add clarity, so the local names seem like they<br>&gt;&gt; should be an implementation detail. Otherwise, why don&#39;t local names<br>&gt;&gt; show up for labelled parameters, too?<br>&gt;&gt; <br>&gt;&gt; The main point in the language affected by this ambiguity is in the<br>&gt;&gt; protocol definition, where local names can be specified, but are only<br>&gt;&gt; in any way useful for autocomplete when implementing the protocol,<br>&gt;&gt; making them useless to the language itself. <br>&gt; <br>&gt; They&#39;re useful in documentation comments, which you might have realized<br>&gt; if you had included them in your examples ;-)<br>&gt; <br>&gt;&gt; This proposal, if accepted, would simplify the language by removing<br>&gt;&gt; the ability to declare local parameter names from protocols, reducing<br>&gt;&gt; their function signatures to just the actual requirements - label and<br>&gt;&gt; type.<br>&gt; <br>&gt; Code completion and doc comments are good enough reasons (for me) to<br>&gt; keep this capability.  I am opposed to any change here.<br>&gt; <br></p><p>Thank you :).<br></p><p>&gt;&gt; ## Motivation<br>&gt;&gt; <br>&gt;&gt; Consider the following code:<br>&gt;&gt; <br>&gt;&gt; ````swift<br>&gt;&gt; protocol ExampleProtocol {<br>&gt;&gt; <br>&gt;&gt;    func move(from source: Int, to destination: Int)<br>&gt;&gt; <br>&gt;&gt;    func max(_ a: Int, _ b: Int) -&gt; Int<br>&gt;&gt; <br>&gt;&gt;    func find(_: String, in: String)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct ExampleStruct1: ExampleProtocol {<br>&gt;&gt; <br>&gt;&gt;    func move(from source: Int, to destination: Int) { return }<br>&gt;&gt; <br>&gt;&gt;    func max(_ a: Int, _ b: Int) -&gt; Int { return 0 }<br>&gt;&gt; <br>&gt;&gt;    func find(_: String, in: String) { return }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //still conforms, despite differences to the protocol signature<br>&gt;&gt; struct ExampleStruct2: ExampleProtocol {<br>&gt;&gt; <br>&gt;&gt;    func move(from: Int, to: Int) { return }<br>&gt;&gt; <br>&gt;&gt;    func max(_ first: Int, _ second: Int) -&gt; Int { return 0 }<br>&gt;&gt; <br>&gt;&gt;    func find(_ substring: String, in string: String) { return }<br>&gt;&gt; }<br>&gt;&gt; ````<br>&gt;&gt; <br>&gt;&gt; ExampleStruct2 conforms to ExampleProtocol, yet clearly has some<br>&gt;&gt; differences to the signatures defined in the protocol. In<br>&gt;&gt; ExampleStruct2, its `move` function has no local parameter names,<br>&gt;&gt; despite their presence in the protocol definition. Its `max` function<br>&gt;&gt; has differing local names, and `find` has names which aren&#39;t present<br>&gt;&gt; in the protocol.<br>&gt;&gt; <br>&gt;&gt; In functions, it is the purpose of external parameter labels serve to<br>&gt;&gt; add clarity to the call site. The local names become variables in the<br>&gt;&gt; function&#39;s scope, and are generally invisible to the caller. While<br>&gt;&gt; these local names can be declared in the protocol, they aren&#39;t<br>&gt;&gt; enforced, and are effectively useless. A confused user may expect that<br>&gt;&gt; this will enforce the local names, or otherwise specify a requirement,<br>&gt;&gt; similar to other protocol semantics.<br>&gt;&gt; <br>&gt;&gt; ## Proposed solution<br>&gt;&gt; <br>&gt;&gt; Remove the ability to specify local parameter names from protocols.<br>&gt;&gt; <br>&gt;&gt; ## Detailed design<br>&gt;&gt; <br>&gt;&gt; Specification of local parameter names in protocols would trigger a<br>&gt;&gt; compiler error, explaining that local parameter names are not<br>&gt;&gt; enforced, with a fixit to remove the local name from the parameter<br>&gt;&gt; list.<br>&gt;&gt; <br>&gt;&gt; ## Impact on existing code<br>&gt;&gt; <br>&gt;&gt; This will break existing protocols which declare local parameter<br>&gt;&gt; names, but should be easily fixable with the migrator, or the<br>&gt;&gt; previously mentioned fixit.<br>&gt;&gt; <br>&gt;&gt; ## Alternatives considered<br>&gt;&gt; <br>&gt;&gt; Leave protocols as they are now, or enforce local parameter names where specified.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/cf216ddf/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
