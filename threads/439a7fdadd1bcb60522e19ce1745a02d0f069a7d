<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0070: Make Optional Requirements Objective-C only</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 25, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0070: Make Optional Requirements Objective-C only&quot; begins now and runs through May 2. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0070: Make Optional Requirements Objective-C only</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 25, 2016 at 12:00:00pm</p></header><div class="content"><p>I support the approach of making optional requirements ObjC-only. As a nitpick, it feels &quot;wrong&quot; to me to keep a decl modifier around for something that&#39;s only a compatibility feature and not natively supported. The proposal notes that a &#39;objcoptional&#39; modifier was considered and rejected, but why not a single attribute, &#39;@objcOptional&#39; or something like that?<br></p><p>-Joe<br></p><p>&gt; On Apr 25, 2016, at 10:19 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0070: Make Optional Requirements Objective-C only&quot; begins now and runs through May 2. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0070: Make Optional Requirements Objective-C only</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>April 25, 2016 at 12:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On Apr 25, 2016, at 12:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; I support the approach of making optional requirements ObjC-only. As a nitpick, it feels &quot;wrong&quot; to me to keep a decl modifier around for something that&#39;s only a compatibility feature and not natively supported. The proposal notes that a &#39;objcoptional&#39; modifier was considered and rejected, but why not a single attribute, &#39;@objcOptional&#39; or something like that?<br></p><p>It shouldn&#39;t be an attribute because it changes the type signature of references to the requirement. <br></p><p>  - Doug<br></p><p><br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Apr 25, 2016, at 10:19 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0070: Make Optional Requirements Objective-C only&quot; begins now and runs through May 2. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0070-optional-requirements.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0070: Make Optional Requirements Objective-C only</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 25, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think this proposed solution doesn&#39;t really address the problem. An @objcOptional keyword is intended to make it clear that the feature is fundamentally, intrinsically, for Objective-C compatibility. Separating the keywords doesn&#39;t do that; it still seems like an arbitrary and temporary limitation.<br></p><p>@objcOptional *does* make it clear that this is a compatibility feature. So would @objc(optional), although that would conflict with the @objc(selectorGoesHere) syntax.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think it&#39;s neutral to the direction of Swift.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Participated in the previous discussion, read this one pretty quickly.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Review] SE-0070: Make Optional Requirements Objective-C only</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>April 26, 2016 at 11:00:00am</p></header><div class="content"><p>Perhaps, with this thought in mind, we should consider making @objc into<br>something more resembling the @available syntax. Getter selector, setter<br>selector, copying, etc. could live there as well.<br></p><p>Sincerely,<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Tue, Apr 26, 2016, at 01:15 AM, Brent Royal-Gordon via<br>swift-evolution wrote:<br>&gt; &gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; I think this proposed solution doesn&#39;t really address the problem. An<br>&gt; @objcOptional keyword is intended to make it clear that the feature is<br>&gt; fundamentally, intrinsically, for Objective-C compatibility. Separating<br>&gt; the keywords doesn&#39;t do that; it still seems like an arbitrary and<br>&gt; temporary limitation.<br>&gt; <br>&gt; @objcOptional *does* make it clear that this is a compatibility feature.<br>&gt; So would @objc(optional), although that would conflict with the<br>&gt; @objc(selectorGoesHere) syntax.<br>&gt; <br>&gt; &gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt; &gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I think it&#39;s neutral to the direction of Swift.<br>&gt; <br>&gt; &gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; N/A.<br>&gt; <br>&gt; &gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Participated in the previous discussion, read this one pretty quickly.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
