<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0111: Remove type system significance of function argument labels</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July  2, 2016 at 04:00:00am</p></header><div class="content"><p>Sorry, this was meant to be in response to:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;ED481EE3-8DB0-481B-81D0-BCFD380712E1 at me.com&gt; <br></p><p>I&#39;ve made a separate topic discussing the possible consequences of this change, but I don&#39;t think the implications are really worth it. Parameter lists and tuples are fundamentally similar, and that&#39;s why we&#39;re getting all of these confusing edge cases.<br></p><p>Ultimately, this come down to two problems:<br></p><p>• Casting between functions of different labels is confusing. We&#39;ve discussed removing argument labels from function types for this reason. However, tuples have this exact same problem. We should solve this generally, for tuples and functions. A solution applicable to one is applicable to the other. If tuples were only in the languages because they were meant to model a function&#39;s arguments, I believe they still do in Swift 2.<br></p><p>Perhaps a tuple&#39;s argument labels should be in the name of it&#39;s containing variable, like we plan for function types?<br></p><p>• Parameter lists have distinct annotations, which are unsuitable for full exposure to the type system. However, I think this can be resolved through something similar to the @noescape annotation, but for tuples, to restrict them to ‘pure, nonescaping’ functional contexts (IE direct application to a function).<br></p><p>For example:<br></p><p>apply&lt;A, B&gt;(in: @params A, function: A -&gt; B) -&gt; B {<br>    return function(in)<br>}<br></p><p>//since we know the tuple cannot escape,<br>//only be passed to more functions with the exact parameter list represented by A,<br>//we can safely use it with parameter decorations in a strictly functional context:<br></p><p>apply(in: (&amp;mutable, other), function: aFunction)<br></p><p>//or more practically:<br></p><p>(&amp;mutable, other) =&gt; aFunction<br></p><p>Any return value is naturally escaping, meaning a returned tuple cannot have modifiers such as @noescape and inout, since it can&#39;t provide that guarantee. I think this addresses the problem much more directly.<br></p><p>There are inherently parallels between parameter lists and tuples, and that&#39;s why functional programming languages rely on them. Swift actually has quite a limited number of parameter list modifiers, so I think it&#39;s worth exploring alternatives to fit these into the existing, much more generalised system, before removing the parallel between parameter lists and tuples in favour of something already known to be less flexible.<br></p><p>My review is inline.<br></p><p>&gt; On 30 Jun 2016, at 19:26, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels&quot; begins now and runs through July 4. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>Strongly against, for the reasons described.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, but we should explore the alternatives.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Absolutely not, we will lose fundamental to Swift something by making this change. We&#39;ve already seen it by ‘removing’ tuple splat, and finding it to be only surface-level. This is something already deeply ingrained in the type system, and which provides a good deal of flexibility to functional code. The addition of Never in favour of @noreturn shows how powerful the type system can be, and I don&#39;t think we should walk this path half-heartedly.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I got started programming back in Objective-C, but most of my programming experience is with Swift. In the various other (admittedly older) imperative languages I&#39;ve tried, I have been disappointed by the inflexibility of things such as:<br></p><p>• Lack of tuple support, for straightforward return of &gt;1 value where a formal type is overkill.<br>• Lack of explicit optionals, or tacked-on optional support which interacts poorly with generics and existing libraries.<br>• Lack of equal support for value-types, to varying degrees.<br>• Generics aren&#39;t actually generic, often requiring overloads for value-types, due to their ‘defaulting’ behaviour.<br></p><p>The one thing these all have in common is the type system. There seems to be real progress to be made by generalizing the type system as Swift has, so far.<br></p><p>Swift&#39;s functional generics system is incredible, largely thanks to the modelling of parameter lists as a type, namely tuples. While this model has fallen behind language advances, I think it can and should be brought up to speed.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br></p><p>A lot of thought, while working with Swift and other languages.<br></p><p>Thanks for reading.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>------------- End Message ------------- <br></p><p><br></p><p>From James F<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/c4252de3/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
