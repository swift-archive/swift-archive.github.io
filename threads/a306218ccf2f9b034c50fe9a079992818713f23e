<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 13, 2016 at 04:00:00pm</p></header><div class="content"><p>on Wed Apr 13 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; on Mon Apr 11 2016, Nate Cook &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;&gt;<br>&gt;&gt;     On Apr 11, 2016, at 2:59 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     Thanks for your comments, Brent!<br>&gt;&gt;<br>&gt;&gt;     on Sun Apr 10 2016, Brent Royal-Gordon<br>&gt;&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; The shift described in this proposal is extremely valuable and makes<br>&gt;&gt; implementing collections far more intuitive, as all the collection&#39;s logic lives<br>&gt;&gt; &quot;inside&quot; the collection itself. My only hesitation is with the naming of the<br>&gt;&gt; method that Brent also called out:<br>&gt;&gt;<br>&gt;&gt; ... snip ...<br>&gt;&gt;<br>&gt;&gt;                 func index(n: IndexDistance, stepsFrom i: Index) -&gt; Index<br>&gt;&gt;<br>&gt;&gt;         Oof, I am really not a fan of this name. `steps` is sort-of a label on<br>&gt;&gt;         the `n` parameter, but it&#39;s attached to `i`. <br>&gt;&gt;<br>&gt;&gt; Oof indeed! This is a very unusual method in the standard library, since we&#39;re<br>&gt;&gt; calling on one instance to perform an action on another. My problems with the<br>&gt;&gt; naming are twofold: <br>&gt;&gt;<br>&gt;&gt; (1) Collision with the index(of:) and index(where:) APIs<br>&gt;&gt; The existing methods are used for searching a collection, possibly finding a<br>&gt;&gt; matching index, possibly not. The new ones deterministically find an new index<br>&gt;&gt; at a prescribed distance, with important and slightly complicated preconditions.<br>&gt;&gt; These differences make the use and &quot;flavor&quot; of the two sets of methods distinct<br>&gt;&gt; enough that I think they should have different names.<br>&gt;&gt;<br>&gt;&gt; (2) Arguments are reversed<br>&gt;&gt; I think the ideal API for this would be index.advanced(by: 5, in: c), but I<br>&gt;&gt; prefer keeping the index-moving implementation in the collection, not the index.<br>&gt;&gt; I would favor any naming for this method that puts the index before the<br>&gt;&gt; distance, keeping the overall shape of the advanced(by:) method. c.advance(i,<br>&gt;&gt; by: 4) would be my pick.<br>&gt;<br>&gt; Dmitri, Max, and I just talked this over and we think you&#39;re right on<br>&gt; both counts.  Having these “index” overloads appear in completion lists<br>&gt; alongside the ones that are there for use as high-level algorithms seems<br>&gt; wrong.  Also, since the method either returns a modified version of the<br>&gt; index or modifies the index in place, the index argument is “more<br>&gt; primary” and should come first.  Here&#39;s what we came up with:<br>&gt;<br>&gt;      let j = location(i, offsetBy: 5)<br>&gt;<br>&gt;      formLocation(&amp;i, offsetBy: -2)<br>&gt;<br>&gt; Feedback welcome.<br></p><p>Updated proposal:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April 14, 2016 at 06:00:00am</p></header><div class="content"><p>On Wed, Apr 13, 2016 at 4:45 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>Updated proposal:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br></p><p><br>I like the use of `location(...)` instead of `index(...)`. I strongly<br>suggest that successor and predecessor become `location(after:)` and<br>`location(before:)` (or something like that) so that the index manipulation<br>API are all similarly named.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160414/fd78c942/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>on Wed Apr 13 2016, Shawn Erickson &lt;shawnce-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Wed, Apr 13, 2016 at 4:45 PM Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Updated proposal:<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0065-collections-move-indices.md<br>&gt;<br>&gt; I like the use of `location(...)` instead of `index(...)`. I strongly suggest<br>&gt; that successor and predecessor become `location(after:)` and `location(before:)<br>&gt; ` (or something like that) so that the index manipulation API are all similarly<br>&gt; named. <br></p><p>Interesting idea.  Predecessor and successor are more specific, because<br>the predecessor of the predecessor of i is still “before” i, but that<br>may not be a strong enough reason.<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
