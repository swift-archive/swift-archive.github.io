<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 30, 2016 at 04:00:00pm</p></header><div class="content"><p>I have a generic type, and I want to add some methods that are available when the type parameter is Bool. (This is in Xcode 8 beta 6, btw.)<br></p><p>public struct foo&lt;T&gt; {<br>	...<br>}<br></p><p>extension foo where T: Bool {<br>	…<br>}<br></p><p>The above fails to compile, with &quot;type &#39;T&#39; constrained to non-protocol type ‘Bool’”. Is that an error? The book doesn’t say that type constraints have to be to protocols; in fact the example in the section “Type Constraint Syntax” shows a type constraint that requires T to be a subclass of SomeClass.*<br></p><p>OK, so I’ll find a protocol for “boolean-like” values that’s implemented by Bool. The Swift reference for `Bool` in Xcode doesn’t list anything. Swiftdoc.org &lt;http://swiftdoc.org/&gt; shows a protocol `Boolean` that looks like exactly what I want, but my compiler’s never heard of it; is this something that snuck in post-3.0? If I switch Swiftdoc.org &lt;http://swiftdoc.org/&gt; back to Swift 2.2, it shows an equivalent protocol called `BooleanType`, but if I try to use that, the compiler says &quot;&#39;BooleanType&#39; has been renamed to ‘Bool’”.<br></p><p>At this point I threw my laptop at the wall.<br>Not really, but I started to miss the stability and simplicity of C++… :-p<br></p><p>How the @$*% do I do this?<br></p><p>—Jens<br></p><p>* In fact the book never seems to talk about type constraints in generic type extensions. It covers each of the two concepts, but not how to use them together.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160830/78bb5252/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>August 31, 2016 at 06:00:00pm</p></header><div class="content"><p>`Boolean` (the protocol) was removed in Swift 3 per SE-0109 “Remove the Boolean protocol”.<br></p><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0109-remove-boolean.md&gt;<br></p><p>You can do what you want by defining your own dummy protocol and extending `Bool` (the type) to conform to that.<br></p><p>protocol JensBoolean {<br>}<br></p><p>extension Bool : JensBoolean {<br>}<br></p><p>public struct Foo&lt;T&gt; {<br>}<br></p><p>extension Foo where T : JensBoolean {<br>}<br></p><p>There’s an obvious need to make this better — search the ’net for “generics manifesto” for some context — but that didn’t catch the Swift 3 bus.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f0154768aeec561194e651b0bca02d9?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Dan Loewenherz</string> &lt;dan at lionheartsw.com&gt;<p>August 31, 2016 at 12:00:00pm</p></header><div class="content"><p>You&#39;ll need to specify a protocol where you&#39;re currently specifying &quot;Bool&quot;.<br>A generic constraint can&#39;t take a concrete type as an argument. So you<br>could do this:<br></p><p>protocol BooleanType {}<br>extension Bool: BooleanType {}<br></p><p>extension foo where T: BooleanType {<br>   ...<br>}<br></p><p>If you don&#39;t like this, you can define a protocol with an associatedtype<br>and use a protocol extension to add this functionality to foo&lt;T&gt; instead.<br>E.g.:<br></p><p>protocol bar {<br>    associatedtype X<br>}<br></p><p>extension bar where X == Bool {<br>    ...<br>}<br></p><p>public struct foo&lt;T&gt;: bar {<br>    typealias X = T<br></p><p>    ...<br>}<br></p><p>On Tue, Aug 30, 2016 at 6:15 PM, Jens Alfke via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I have a generic type, and I want to add some methods that are available<br>&gt; when the type parameter is Bool. *(This is in Xcode 8 beta 6, btw.)*<br>&gt;<br>&gt; public struct foo&lt;T&gt; {<br>&gt; ...<br>&gt; }<br>&gt;<br>&gt; extension foo where T: Bool {<br>&gt; …<br>&gt; }<br>&gt;<br>&gt; The above fails to compile, with &quot;type &#39;T&#39; constrained to non-protocol<br>&gt; type ‘Bool’”. Is that an error? The book doesn’t say that type constraints<br>&gt; have to be to protocols; in fact the example in the section “Type<br>&gt; Constraint Syntax” shows a type constraint that requires T to be a subclass<br>&gt; of SomeClass.*<br>&gt;<br>&gt; OK, so I’ll find a protocol for “boolean-like” values that’s implemented<br>&gt; by Bool. The Swift reference for `Bool` in Xcode doesn’t list anything.<br>&gt; Swiftdoc.org shows a protocol `Boolean` that looks like exactly what I<br>&gt; want, but my compiler’s never heard of it; is this something that snuck in<br>&gt; post-3.0? If I switch Swiftdoc.org back to Swift 2.2, it shows an<br>&gt; equivalent protocol called `BooleanType`, but if I try to use that, the<br>&gt; compiler says &quot;&#39;BooleanType&#39; has been renamed to ‘Bool’”.<br>&gt;<br>&gt; At this point I threw my laptop at the wall.<br>&gt; Not really, but I started to miss the stability and simplicity of C++… :-p<br>&gt;<br>&gt; How the @$*% do I do this?<br>&gt;<br>&gt; —Jens<br>&gt;<br>&gt; * In fact the book never seems to talk about type constraints in generic<br>&gt; type extensions. It covers each of the two concepts, but not how to use<br>&gt; them together.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160831/e1aafbdb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 31, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Aug 31, 2016, at 10:21 AM, Dan Loewenherz &lt;dan at lionheartsw.com&gt; wrote:<br>&gt; <br>&gt; You&#39;ll need to specify a protocol where you&#39;re currently specifying &quot;Bool&quot;. A generic constraint can&#39;t take a concrete type as an argument. <br></p><p>OK … this should be described in the book, though. (Any doc writers listening? Or is there a procedure for requesting improvements to the book?)<br></p><p>I’m also bemused that (as I said) there is a boolean protocol in Swift 2.2, and a different one in master (according to swiftdoc.org &lt;http://swiftdoc.org/&gt;), but none in Swift 3.0 (as of Xcode 8 beta 6). Is this just a glitch that snuck into the release? Or does the Swift in Xcode predate an API freeze?<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160831/79c1e694/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 31, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Aug 31, 2016, at 11:09 AM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; I’m also bemused that (as I said) there is a boolean protocol in Swift 2.2, and a different one in master (according to swiftdoc.org &lt;http://swiftdoc.org/&gt;), but none in Swift 3.0 (as of Xcode 8 beta 6). Is this just a glitch that snuck into the release? Or does the Swift in Xcode predate an API freeze?<br></p><p>To answer my own question: swiftdoc.org &lt;http://swiftdoc.org/&gt; is out of date; it hasn’t been updated since June 18 &lt;https://github.com/SwiftDocOrg/SwiftDocOrg.github.io/commits/master&gt; :( I have filed an issue &lt;https://github.com/SwiftDocOrg/swiftdoc.org/issues/27&gt;.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160831/d2afdab9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2bc666e29724cd3bdf46b6cbbe4a07bb?s=50"></div><header><strong>How to extend a generic type with a Bool constraint?</strong> from <string>Quinn &quot;The Eskimo!&quot;</string> &lt;eskimo1 at apple.com&gt;<p>September  1, 2016 at 09:00:00am</p></header><div class="content"><p>On 31 Aug 2016, at 19:09, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt; (Any doc writers listening? Or is there a procedure for requesting improvements to the book?)<br></p><p>If you file a Radar bug against the doc it will go to the right folks [1].<br></p><p>&lt;https://developer.apple.com/bug-reporting/&gt;<br></p><p>&gt; I’m also bemused …<br></p><p>This is a linear progression in time:<br></p><p>1. `BooleanType` is the name in Swift 2.<br></p><p>2. `Boolean` is the post ‘great renaming’ name in Swift 3.<br></p><p>3. Currently it is unavailable per SE-0109.<br></p><p>Share and Enjoy<br>--<br>Quinn &quot;The Eskimo!&quot;                    &lt;http://www.apple.com/developer/&gt;<br>Apple Developer Relations, Developer Technical Support, Core OS/Hardware<br></p><p>[1] Other stuff might works as well but Radar will definitely work.<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
