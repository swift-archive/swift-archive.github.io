<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e54bb6b5fab61e54c19e99eada413aa?s=50"></div><header><strong>how to ``swift build`` C library cleanly without using -Xcc -Xlinker and -Xswiftc</strong> from <string>Martin Man</string> &lt;mman at martinman.net&gt;<p>October 20, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi guys,<br></p><p>I’m wrapping three little native C libraries using SPM to a nice swifty modules. Say cmod1, cmod2, and cmod3. They all in the and are dependencies of a bigger project.<br></p><p>Since these legacy C libraries have headers in various ways incompatible with SPM I’m also providing my own custom module.modulemap inside of Sources/cmod1/include folder which exports only certain headers.<br></p><p>The module.modulemap is in pretty standard form with relative path to the header<br></p><p>module cmod1 {<br>header “cmod1/header1.h”<br>export “*”<br>link “cmod1&quot;<br>} <br></p><p>When using ``swift build`` to build the module, C sources compile fine but switc bails out when parsing modulemap because it can not find headers referenced from header1.h with an error message like this<br></p><p>&lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>#include “/projects/something/Sources/cmod1/include/cmod/header1.h&quot;<br>         ^<br>/projects/something/Sources/cmod1/include/cmod1/header1.h:18:10: error: ‘cmod1/header2.h&#39; file not found<br></p><p>Now I know that I can give swiftc correct -Xswiftc -Ipath switch and then it builds cleanly, but this means that plain ``swift build`` never succeeds…<br></p><p>Q1: Is my assumption correct that the ultimate goal of mine is to make the swift package build cleanly using just ``swift build`` without providing any commandline flags?<br>Q2: When build of a certain package cmod1 requires command line flags -Xcc -Xlinker and -Xswiftc, what’s the correct way to pass them in when such package is a dependency of bigger project and which gets git pulled and compiled as part of outer package build?<br></p><p>thanks for your time, unfortunately the sources of these packages can not be made public yet but I think I can generate a simple broken project on github if anyone wants to take a look...<br></p><p>thanks,<br>Martin<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161020/2cd2bb05/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>how to ``swift build`` C library cleanly without using -Xcc -Xlinker and -Xswiftc</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 20, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Oct 20, 2016, at 7:25 AM, Martin Man via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi guys,<br>&gt; <br>&gt; I’m wrapping three little native C libraries using SPM to a nice swifty modules. Say cmod1, cmod2, and cmod3. They all in the and are dependencies of a bigger project.<br>&gt; <br>&gt; Since these legacy C libraries have headers in various ways incompatible with SPM I’m also providing my own custom module.modulemap inside of Sources/cmod1/include folder which exports only certain headers.<br>&gt; <br>&gt; The module.modulemap is in pretty standard form with relative path to the header<br>&gt; <br>&gt; module cmod1 {<br>&gt; header “cmod1/header1.h”<br>&gt; export “*”<br>&gt; link “cmod1&quot;<br>&gt; } <br>&gt; <br>&gt; When using ``swift build`` to build the module, C sources compile fine but switc bails out when parsing modulemap because it can not find headers referenced from header1.h with an error message like this<br>&gt; <br>&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt; #include “/projects/something/Sources/cmod1/include/cmod/header1.h&quot;<br></p><p>Is this misspelled? cmod/header1.h vs cmod1/header1.h?<br></p><p>Can you show the exact include style used in the module.modulemap and in the project?<br></p><p>&gt;          ^<br>&gt; /projects/something/Sources/cmod1/include/cmod1/header1.h:18:10: error: ‘cmod1/header2.h&#39; file not found<br>&gt; <br>&gt; Now I know that I can give swiftc correct -Xswiftc -Ipath switch and then it builds cleanly, but this means that plain ``swift build`` never succeeds…<br>&gt; <br>&gt; Q1: Is my assumption correct that the ultimate goal of mine is to make the swift package build cleanly using just ``swift build`` without providing any commandline flags?<br></p><p>Yes.<br></p><p>&gt; Q2: When build of a certain package cmod1 requires command line flags -Xcc -Xlinker and -Xswiftc, what’s the correct way to pass them in when such package is a dependency of bigger project and which gets git pulled and compiled as part of outer package build?<br></p><p>We don&#39;t have a solution for this yet, eventually we want to find a way that all that data has a proper home in the manifest.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; thanks for your time, unfortunately the sources of these packages can not be made public yet but I think I can generate a simple broken project on github if anyone wants to take a look...<br>&gt; <br>&gt; thanks,<br>&gt; Martin<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161020/dd5e9f8d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e54bb6b5fab61e54c19e99eada413aa?s=50"></div><header><strong>how to ``swift build`` C library cleanly without using -Xcc -Xlinker and -Xswiftc</strong> from <string>Martin Man</string> &lt;mman at martinman.net&gt;<p>October 20, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi Dan,<br></p><p>thanks for your comments… I have prepared a simple module here: https://github.com/mman/cmod1.<br></p><p>``git clone`` and ``swift build`` it and you will see the problem I’m talking about… <br></p><p>please let me know if you need any help, I’ll prepare a more complex project showing the problem with this module being used as a dependency of another more complex module soon…<br></p><p>thanks,<br>Martin<br></p><p>&gt; On 20 Oct 2016, at 17:34, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 20, 2016, at 7:25 AM, Martin Man via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi guys,<br>&gt;&gt; <br>&gt;&gt; I’m wrapping three little native C libraries using SPM to a nice swifty modules. Say cmod1, cmod2, and cmod3. They all in the and are dependencies of a bigger project.<br>&gt;&gt; <br>&gt;&gt; Since these legacy C libraries have headers in various ways incompatible with SPM I’m also providing my own custom module.modulemap inside of Sources/cmod1/include folder which exports only certain headers.<br>&gt;&gt; <br>&gt;&gt; The module.modulemap is in pretty standard form with relative path to the header<br>&gt;&gt; <br>&gt;&gt; module cmod1 {<br>&gt;&gt; header “cmod1/header1.h”<br>&gt;&gt; export “*”<br>&gt;&gt; link “cmod1&quot;<br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; When using ``swift build`` to build the module, C sources compile fine but switc bails out when parsing modulemap because it can not find headers referenced from header1.h with an error message like this<br>&gt;&gt; <br>&gt;&gt; &lt;module-includes&gt;:1:10: note: in file included from &lt;module-includes&gt;:1:<br>&gt;&gt; #include “/projects/something/Sources/cmod1/include/cmod/header1.h&quot;<br>&gt; <br>&gt; Is this misspelled? cmod/header1.h vs cmod1/header1.h?<br>&gt; <br>&gt; Can you show the exact include style used in the module.modulemap and in the project?<br>&gt; <br>&gt;&gt;          ^<br>&gt;&gt; /projects/something/Sources/cmod1/include/cmod1/header1.h:18:10: error: ‘cmod1/header2.h&#39; file not found<br>&gt;&gt; <br>&gt;&gt; Now I know that I can give swiftc correct -Xswiftc -Ipath switch and then it builds cleanly, but this means that plain ``swift build`` never succeeds…<br>&gt;&gt; <br>&gt;&gt; Q1: Is my assumption correct that the ultimate goal of mine is to make the swift package build cleanly using just ``swift build`` without providing any commandline flags?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; Q2: When build of a certain package cmod1 requires command line flags -Xcc -Xlinker and -Xswiftc, what’s the correct way to pass them in when such package is a dependency of bigger project and which gets git pulled and compiled as part of outer package build?<br>&gt; <br>&gt; We don&#39;t have a solution for this yet, eventually we want to find a way that all that data has a proper home in the manifest.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; thanks for your time, unfortunately the sources of these packages can not be made public yet but I think I can generate a simple broken project on github if anyone wants to take a look...<br>&gt;&gt; <br>&gt;&gt; thanks,<br>&gt;&gt; Martin<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161020/03cf24e0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
