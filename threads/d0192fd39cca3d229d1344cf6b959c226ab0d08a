<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/93e695559eff898e6ae275b496fcf4e4?s=50"></div><header><strong>Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</strong> from <string>Liam Stevenson</string> &lt;liam923 at verizon.net&gt;<p>July 12, 2016 at 10:00:00am</p></header><div class="content"><p>Optional chaining is one of the great, useful features of Swift. It can be used “for querying and calling properties, methods, and subscripts on an optional that might currently be nil,” to quote Apple&#39;s &quot;The Swift Programming Language.” However, often it is necessary to call a function, subscript, or initializer conditionally based on if one or more parameters are nil. The proposed solution is to allow a question mark (?) to be placed after an optional value wished to be used as a parameter. Then, the function, initializer, or subscript will be called if and only if the parameter&#39;s value is not nil. If it has a return type, it will return an optional, which will be nil if the parameter is nil.<br></p><p>Old way (with seemingly unnecessary if statement considering the flexibility provided by optional chaining):<br>	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>	let index: Int? = 2<br></p><p>	var removedElement: String?<br>	if let index = index {<br>  		removedElement = arr.removeAtIndex(index) //sets removedElement to &quot;pears&quot;<br>	}<br>Using this proposal:<br>	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>	let index: Int? = 2<br></p><p>	var removedElement: String?<br>	removedElement = arr.removeAtIndex(index?) //sets removedElement to “pears&quot;<br>Another similar example:<br>Old way:<br>	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>	let index: Int? = nil<br></p><p>	var removedElement: String?<br>	if let index = index {<br>  		removedElement = arr.removeAtIndex(index) //never called<br>	}<br>Using this proposal:<br>	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>	let index: Int? = nil<br></p><p>	var removedElement: String?<br>	removedElement = arr.removeAtIndex(index?) //removeAtIndex is never called, and removedElement is set to nil<br></p><p>What does everyone think of this proposal? It is additive so it will not break any existing code, and in the future it will provide conciseness and clarity since the syntax is similar to the existing optional chaining syntax.<br></p><p>View the full proposal on GitHub here: https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md &lt;https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md&gt;<br></p><p>Liam<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/d019d08a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 12, 2016 at 06:00:00pm</p></header><div class="content"><p>We can already do this nicely with map and flatMap:<br></p><p>var removedElement = index.map { arr.removeAtIndex($0) }<br></p><p>&gt; On 12 Jul 2016, at 16:16, Liam Stevenson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Optional chaining is one of the great, useful features of Swift. It can be used “for querying and calling properties, methods, and subscripts on an optional that might currently be nil,” to quote Apple&#39;s &quot;The Swift Programming Language.” However, often it is necessary to call a function, subscript, or initializer conditionally based on if one or more parameters are nil. The proposed solution is to allow a question mark (?) to be placed after an optional value wished to be used as a parameter. Then, the function, initializer, or subscript will be called if and only if the parameter&#39;s value is not nil. If it has a return type, it will return an optional, which will be nil if the parameter is nil.<br>&gt; <br>&gt; Old way (with seemingly unnecessary if statement considering the flexibility provided by optional chaining):<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = 2<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	if let index = index {<br>&gt;   		removedElement = arr.removeAtIndex(index) //sets removedElement to &quot;pears&quot;<br>&gt; 	}<br>&gt; Using this proposal:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = 2<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	removedElement = arr.removeAtIndex(index?) //sets removedElement to “pears&quot;<br>&gt; Another similar example:<br>&gt; Old way:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = nil<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	if let index = index {<br>&gt;   		removedElement = arr.removeAtIndex(index) //never called<br>&gt; 	}<br>&gt; Using this proposal:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = nil<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	removedElement = arr.removeAtIndex(index?) //removeAtIndex is never called, and removedElement is set to nil<br>&gt; <br>&gt; What does everyone think of this proposal? It is additive so it will not break any existing code, and in the future it will provide conciseness and clarity since the syntax is similar to the existing optional chaining syntax.<br>&gt; <br>&gt; View the full proposal on GitHub here: https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md &lt;https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md&gt;<br>&gt; <br>&gt; Liam<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/3f1b9107/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/93e695559eff898e6ae275b496fcf4e4?s=50"></div><header><strong>Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</strong> from <string>Liam Stevenson</string> &lt;liam923 at verizon.net&gt;<p>July 12, 2016 at 01:00:00pm</p></header><div class="content"><p>I realize that it can be done in that way, and also in others, such as using if statements. The point of this proposal is for conciseness and simplicity. Also, doing it that way would become extensive if there were more than one parameters.<br></p><p>&gt; On Jul 12, 2016, at 12:14 PM, David Hart &lt;david at hartbit.com&gt; wrote:<br>&gt; <br>&gt; We can already do this nicely with map and flatMap:<br>&gt; <br>&gt; var removedElement = index.map { arr.removeAtIndex($0) }<br>&gt; <br>&gt;&gt; On 12 Jul 2016, at 16:16, Liam Stevenson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Optional chaining is one of the great, useful features of Swift. It can be used “for querying and calling properties, methods, and subscripts on an optional that might currently be nil,” to quote Apple&#39;s &quot;The Swift Programming Language.” However, often it is necessary to call a function, subscript, or initializer conditionally based on if one or more parameters are nil. The proposed solution is to allow a question mark (?) to be placed after an optional value wished to be used as a parameter. Then, the function, initializer, or subscript will be called if and only if the parameter&#39;s value is not nil. If it has a return type, it will return an optional, which will be nil if the parameter is nil.<br>&gt;&gt; <br>&gt;&gt; Old way (with seemingly unnecessary if statement considering the flexibility provided by optional chaining):<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = 2<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	if let index = index {<br>&gt;&gt;   		removedElement = arr.removeAtIndex(index) //sets removedElement to &quot;pears&quot;<br>&gt;&gt; 	}<br>&gt;&gt; Using this proposal:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = 2<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	removedElement = arr.removeAtIndex(index?) //sets removedElement to “pears&quot;<br>&gt;&gt; Another similar example:<br>&gt;&gt; Old way:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = nil<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	if let index = index {<br>&gt;&gt;   		removedElement = arr.removeAtIndex(index) //never called<br>&gt;&gt; 	}<br>&gt;&gt; Using this proposal:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = nil<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	removedElement = arr.removeAtIndex(index?) //removeAtIndex is never called, and removedElement is set to nil<br>&gt;&gt; <br>&gt;&gt; What does everyone think of this proposal? It is additive so it will not break any existing code, and in the future it will provide conciseness and clarity since the syntax is similar to the existing optional chaining syntax.<br>&gt;&gt; <br>&gt;&gt; View the full proposal on GitHub here: https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md &lt;https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md&gt;<br>&gt;&gt; <br>&gt;&gt; Liam<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/e1e57807/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July 12, 2016 at 09:00:00am</p></header><div class="content"><p>Hi, Liam. The particular issue we’ve seen when exploring this feature is that it’s unclear whether or not other arguments get evaluated:<br></p><p>print(a.foo()?, b.bar()?, c.baz()?)<br></p><p>If b.bar() turns out to be nil, does c.baz() still get evaluated?<br></p><p>(I’m pretty sure the right answer is “yes”, but it’s still something that should be addressed explicitly.)<br></p><p>The added complexity and the existence of Optional.map led us not to pursue this direction in the past.<br></p><p>Jordan<br></p><p><br>&gt; On Jul 12, 2016, at 07:16, Liam Stevenson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Optional chaining is one of the great, useful features of Swift. It can be used “for querying and calling properties, methods, and subscripts on an optional that might currently be nil,” to quote Apple&#39;s &quot;The Swift Programming Language.” However, often it is necessary to call a function, subscript, or initializer conditionally based on if one or more parameters are nil. The proposed solution is to allow a question mark (?) to be placed after an optional value wished to be used as a parameter. Then, the function, initializer, or subscript will be called if and only if the parameter&#39;s value is not nil. If it has a return type, it will return an optional, which will be nil if the parameter is nil.<br>&gt; <br>&gt; Old way (with seemingly unnecessary if statement considering the flexibility provided by optional chaining):<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = 2<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	if let index = index {<br>&gt;   		removedElement = arr.removeAtIndex(index) //sets removedElement to &quot;pears&quot;<br>&gt; 	}<br>&gt; Using this proposal:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = 2<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	removedElement = arr.removeAtIndex(index?) //sets removedElement to “pears&quot;<br>&gt; Another similar example:<br>&gt; Old way:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = nil<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	if let index = index {<br>&gt;   		removedElement = arr.removeAtIndex(index) //never called<br>&gt; 	}<br>&gt; Using this proposal:<br>&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt; 	let index: Int? = nil<br>&gt; <br>&gt; 	var removedElement: String?<br>&gt; 	removedElement = arr.removeAtIndex(index?) //removeAtIndex is never called, and removedElement is set to nil<br>&gt; <br>&gt; What does everyone think of this proposal? It is additive so it will not break any existing code, and in the future it will provide conciseness and clarity since the syntax is similar to the existing optional chaining syntax.<br>&gt; <br>&gt; View the full proposal on GitHub here: https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md &lt;https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md&gt;<br>&gt; <br>&gt; Liam<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/ea7139b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Proposal: Extend Optional Chaining to Function, Initializer, and Subscript Parameters</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 12, 2016 at 08:00:00pm</p></header><div class="content"><p>I did not mind sending messages to nil being essentially a NoOp so calling map on an optional and have the function only execute if the value included inside the optional is not nil is kind of reminding of that ;). Although it is a lot wordier and not really in line with how we force people to deal with nil in then general case --&gt; you better unwrap or use optional chaining.<br></p><p>It feels almost like this use of map is something that should come in one of those web adverts &quot;See the 10 things Apple does not want you to do with Optionals, but made these coders £40,000&quot; ;).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 12 Jul 2016, at 17:37, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, Liam. The particular issue we’ve seen when exploring this feature is that it’s unclear whether or not other arguments get evaluated:<br>&gt; <br>&gt; print(a.foo()?, b.bar()?, c.baz()?)<br>&gt; <br>&gt; If b.bar() turns out to be nil, does c.baz() still get evaluated?<br>&gt; <br>&gt; (I’m pretty sure the right answer is “yes”, but it’s still something that should be addressed explicitly.)<br>&gt; <br>&gt; The added complexity and the existence of Optional.map led us not to pursue this direction in the past.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 12, 2016, at 07:16, Liam Stevenson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Optional chaining is one of the great, useful features of Swift. It can be used “for querying and calling properties, methods, and subscripts on an optional that might currently be nil,” to quote Apple&#39;s &quot;The Swift Programming Language.” However, often it is necessary to call a function, subscript, or initializer conditionally based on if one or more parameters are nil. The proposed solution is to allow a question mark (?) to be placed after an optional value wished to be used as a parameter. Then, the function, initializer, or subscript will be called if and only if the parameter&#39;s value is not nil. If it has a return type, it will return an optional, which will be nil if the parameter is nil.<br>&gt;&gt; <br>&gt;&gt; Old way (with seemingly unnecessary if statement considering the flexibility provided by optional chaining):<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = 2<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	if let index = index {<br>&gt;&gt;   		removedElement = arr.removeAtIndex(index) //sets removedElement to &quot;pears&quot;<br>&gt;&gt; 	}<br>&gt;&gt; Using this proposal:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = 2<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	removedElement = arr.removeAtIndex(index?) //sets removedElement to “pears&quot;<br>&gt;&gt; Another similar example:<br>&gt;&gt; Old way:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = nil<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	if let index = index {<br>&gt;&gt;   		removedElement = arr.removeAtIndex(index) //never called<br>&gt;&gt; 	}<br>&gt;&gt; Using this proposal:<br>&gt;&gt; 	var arr = [&quot;apples&quot;, &quot;oranges&quot;, &quot;pears&quot;, &quot;bananas&quot;]<br>&gt;&gt; 	let index: Int? = nil<br>&gt;&gt; <br>&gt;&gt; 	var removedElement: String?<br>&gt;&gt; 	removedElement = arr.removeAtIndex(index?) //removeAtIndex is never called, and removedElement is set to nil<br>&gt;&gt; <br>&gt;&gt; What does everyone think of this proposal? It is additive so it will not break any existing code, and in the future it will provide conciseness and clarity since the syntax is similar to the existing optional chaining syntax.<br>&gt;&gt; <br>&gt;&gt; View the full proposal on GitHub here: https://github.com/liam923/swift-evolution/blob/master/proposals/NNNN-extend-optional-chaining-to-function-initializer-and-subscript-parameters.md<br>&gt;&gt; <br>&gt;&gt; Liam<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160712/d598e0c5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
