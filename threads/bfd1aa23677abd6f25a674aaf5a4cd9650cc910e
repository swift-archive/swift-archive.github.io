<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fc538d0a1ad5c1dad7eeb33b55b582c5?s=50"></div><header><strong>[Proposal] Allow static protocol extension methods to be called directly on the protocol</strong> from <string>Rasmus Kjeldsen</string> &lt;rasmus.kjeldsen at gmail.com&gt;<p>February 27, 2016 at 11:00:00am</p></header><div class="content"><p>I propose to allow static protocol extension methods to be used directly on the protocol.<br>This would enable the Factory-pattern to be elegantly implemented as in the example below:<br></p><p>protocol P {}<br></p><p>class A : P {}<br>class B : P {}<br></p><p>extension P {<br>	static func factory(type: Bool) -&gt; P { return type ? A() : B()}<br>}<br></p><p>let a = P.factory(false) // &lt;- Not possible in Swift 2, factory() can only be used on either A or B<br></p><p>Regards<br></p><p>Rasmus Friis Kjeldsen<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/bfd1910e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[Proposal] Allow static protocol extension methods to be called directly on the protocol</strong> from <string>Rudolf Adamkoviƒç</string> &lt;salutis at me.com&gt;<p>February 27, 2016 at 09:00:00pm</p></header><div class="content"><p>+1<br></p><p>I&#39;d love to see this in the language. <br></p><p>Hope somebody from the core team will comment on why this is not allowed.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 27 Feb 2016, at 11:31, Rasmus Kjeldsen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I propose to allow static protocol extension methods to be used directly on the protocol.<br>&gt; This would enable the Factory-pattern to be elegantly implemented as in the example below:<br>&gt; <br>&gt; protocol P {}<br>&gt; <br>&gt; class A : P {}<br>&gt; class B : P {}<br>&gt; <br>&gt; extension P {<br>&gt; 	static func factory(type: Bool) -&gt; P { return type ? A() : B()}<br>&gt; }<br>&gt; <br>&gt; let a = P.factory(false) // &lt;- Not possible in Swift 2, factory() can only be used on either A or B<br>&gt; <br>&gt; Regards<br>&gt; <br>&gt; Rasmus Friis Kjeldsen<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160227/d35c1aaa/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
