<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  6, 2016 at 12:00:00pm</p></header><div class="content"><p>We can already use a where clause in a for loop like this:<br></p><p>for element in array where someCondition(element) {<br>    // …<br>}<br></p><p>which basically acts like<br></p><p>for element in array {<br>    guard someCondition(element) else { continue }<br>    // …<br>}<br></p><p>Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br></p><p>for element in array while someCondition(element) {<br>    // …<br>}<br></p><p>which would be syntactic sugar for<br></p><p>for element in array {<br>    guard someCondition(element) else { break }<br>    …<br>}<br></p><p>I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>June  6, 2016 at 12:00:00pm</p></header><div class="content"><p>I hadn&#39;t thought about `while` in this regard but wouldn&#39;t `until` make<br>more sense? `while`, to me, actually reads like it should do what `where`<br>does. In any case, whether it is `while` or `where`, this seems like a<br>reasonable feature in my opinion.<br></p><p>TJ<br></p><p>On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We can already use a where clause in a for loop like this:<br>&gt;<br>&gt; for element in array where someCondition(element) {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; which basically acts like<br>&gt;<br>&gt; for element in array {<br>&gt;     guard someCondition(element) else { continue }<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; Sometimes you want to break out of the loop when the condition isn’t met<br>&gt; instead. I propose a while clause:<br>&gt;<br>&gt; for element in array while someCondition(element) {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; which would be syntactic sugar for<br>&gt;<br>&gt; for element in array {<br>&gt;     guard someCondition(element) else { break }<br>&gt;     …<br>&gt; }<br>&gt;<br>&gt; I can see this particularly being useful if we have a sorted array and we<br>&gt; already know that once the condition isn’t met, it won’t be met either for<br>&gt; subsequent elements. Another use case could be an infinite sequence that we<br>&gt; want to cut off somewhere (which is simply not possible using a where<br>&gt; clause).<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160606/e977bbf8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>June  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I brought up this suggestion in December:<br>http://thread.gmane.org/gmane.comp.lang.swift.evolution/1759<br></p><p>Jacob<br></p><p>On Mon, Jun 6, 2016 at 3:15 AM, Tim Vermeulen via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We can already use a where clause in a for loop like this:<br>&gt;<br>&gt; for element in array where someCondition(element) {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; which basically acts like<br>&gt;<br>&gt; for element in array {<br>&gt;     guard someCondition(element) else { continue }<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; Sometimes you want to break out of the loop when the condition isn’t met<br>&gt; instead. I propose a while clause:<br>&gt;<br>&gt; for element in array while someCondition(element) {<br>&gt;     // …<br>&gt; }<br>&gt;<br>&gt; which would be syntactic sugar for<br>&gt;<br>&gt; for element in array {<br>&gt;     guard someCondition(element) else { break }<br>&gt;     …<br>&gt; }<br>&gt;<br>&gt; I can see this particularly being useful if we have a sorted array and we<br>&gt; already know that once the condition isn’t met, it won’t be met either for<br>&gt; subsequent elements. Another use case could be an infinite sequence that we<br>&gt; want to cut off somewhere (which is simply not possible using a where<br>&gt; clause).<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160606/8f2b678a/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June  7, 2016 at 11:00:00am</p></header><div class="content"><p>I’m a +1 for this idea. Like Thorsten I was initially a little concerned that while and where may look too similar, but actually I find them visually distinct enough, and actually in my code I’m probably more likely to use while than where on for loops, although both are useful.<br></p><p>&gt; On 6 Jun 2016, at 11:15, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; We can already use a where clause in a for loop like this:<br>&gt; <br>&gt; for element in array where someCondition(element) {<br>&gt;    // …<br>&gt; }<br>&gt; <br>&gt; which basically acts like<br>&gt; <br>&gt; for element in array {<br>&gt;    guard someCondition(element) else { continue }<br>&gt;    // …<br>&gt; }<br>&gt; <br>&gt; Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br>&gt; <br>&gt; for element in array while someCondition(element) {<br>&gt;    // …<br>&gt; }<br>&gt; <br>&gt; which would be syntactic sugar for<br>&gt; <br>&gt; for element in array {<br>&gt;    guard someCondition(element) else { break }<br>&gt;    …<br>&gt; }<br>&gt; <br>&gt; I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 05:00:00pm</p></header><div class="content"><p>You&#39;re describing a while loop:<br>`while let element = sequence.next() where condition {...}`<br></p><p>Which as we&#39;ve discussed can already be re-written with a for loop (which,<br>yes, can be lazy):<br>`for element in sequence.lazy.filter({ condition }) {...}`<br></p><p>And it can be explicitly spelled out inside the loop, a definite<br>readability gain for the same reason guard always requires an explicit else<br>block.<br></p><p>What do you gain with a new keyword?<br></p><p>On Tue, Jun 7, 2016 at 05:02 Haravikk via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I’m a +1 for this idea. Like Thorsten I was initially a little concerned<br>&gt; that while and where may look too similar, but actually I find them<br>&gt; visually distinct enough, and actually in my code I’m probably more likely<br>&gt; to use while than where on for loops, although both are useful.<br>&gt;<br>&gt; &gt; On 6 Jun 2016, at 11:15, Tim Vermeulen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; We can already use a where clause in a for loop like this:<br>&gt; &gt;<br>&gt; &gt; for element in array where someCondition(element) {<br>&gt; &gt;    // …<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; which basically acts like<br>&gt; &gt;<br>&gt; &gt; for element in array {<br>&gt; &gt;    guard someCondition(element) else { continue }<br>&gt; &gt;    // …<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Sometimes you want to break out of the loop when the condition isn’t met<br>&gt; instead. I propose a while clause:<br>&gt; &gt;<br>&gt; &gt; for element in array while someCondition(element) {<br>&gt; &gt;    // …<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; which would be syntactic sugar for<br>&gt; &gt;<br>&gt; &gt; for element in array {<br>&gt; &gt;    guard someCondition(element) else { break }<br>&gt; &gt;    …<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; I can see this particularly being useful if we have a sorted array and<br>&gt; we already know that once the condition isn’t met, it won’t be met either<br>&gt; for subsequent elements. Another use case could be an infinite sequence<br>&gt; that we want to cut off somewhere (which is simply not possible using a<br>&gt; where clause).<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/69c248af/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
