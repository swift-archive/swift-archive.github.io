<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58f35424e978e5dd5dd8ee2200867f3b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Dzianis Fedarenka</string> &lt;f.dz.v.gh at gmail.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>Hi! I’m unable to build on OS X 10.11 <br></p><p>Using make:<br></p><p>../private/voucher_activity_private.h:493:10: fatal error: &#39;os/lock_private.h&#39;<br>      file not found<br>#include &lt;os/lock_private.h&gt;<br>         ^<br></p><p>Using Xcode:<br></p><p>/Users/dzianis/Documents/my_code/libs/swift-corelibs-libdispatch/private/voucher_activity_private.h:493:10: &#39;os/lock_private.h&#39; file not found<br></p><p>PS On ubuntu 14.04 project is also generally unbuildable (despite title of commit:33b735c5330b5a97d029bccfff9a7d78ef1f214 ;)). <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/a8c18132/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch build issue</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>December 11, 2015 at 10:00:00am</p></header><div class="content"><p>swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 03:17:47 AM:<br></p><p>&gt; From: f-dz-f via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt;<br>&gt; To: swift-corelibs-dev at swift.org<br>&gt; Date: 12/11/2015 03:18 AM<br>&gt; Subject: [swift-corelibs-dev]  libdispatch build issue<br>&gt; Sent by: swift-corelibs-dev-bounces at swift.org<br></p><p>&gt; PS On ubuntu 14.04 project is also generally unbuildable (despite<br>&gt; title of commit:33b735c5330b5a97d029bccfff9a7d78ef1f214 ;)).<br></p><p>Hi,<br></p><p>	Right now the Linux build is assuming you&#39;ve installed some pre-req<br>packages.  In particular,<br></p><p>sudo apt-get install libblocksruntime-dev libkqueue-dev<br>libpthread-workqueue-dev<br></p><p>	I&#39;ve been building on 15.10;  haven&#39;t tried 14.04 recently.  Maybe<br>try install the pre-reqs on 14.04 and see what happens?<br></p><p>	I&#39;ll put together a quick check sheet with build pre-reqs and<br>instructions and submit a pull request to include it.<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/f2feebcf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58f35424e978e5dd5dd8ee2200867f3b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Dzianis Fedarenka</string> &lt;f.dz.v.gh at gmail.com&gt;<p>December 11, 2015 at 07:00:00pm</p></header><div class="content"><p>Actually, I’ve built library on 14.04 but it required some hack’s like adding dummy #define and calling libtool with different arguments after make failed with errors.<br></p><p>First try:<br></p><p>user$ sudo apt-get install libblocksruntime-dev libkqueue-dev libpthread-workqueue-dev<br>Reading package lists...<br>Building dependency tree...<br>Reading state information...<br>libblocksruntime-dev is already the newest version.<br>libkqueue-dev is already the newest version.<br>libpthread-workqueue-dev is already the newest version.<br>0 upgraded, 0 newly installed, 0 to remove and 4 not upgraded.<br></p><p>user$ git clone https://github.com/apple/swift-corelibs-libdispatch &amp;&amp; cd swift-corelibs-libdispatch<br>user$ sh autogen.sh<br>user$ ./configure --with-blocks-runtime<br>user$ make<br>queue.c:216:22: error: use of undeclared identifier &#39;WORKQ_BG_PRIOQUEUE&#39;<br>                .dgq_wq_priority = WORKQ_BG_PRIOQUEUE,<br>                                   ^<br>queue.c:227:22: error: use of undeclared identifier &#39;WORKQ_BG_PRIOQUEUE&#39;<br>                .dgq_wq_priority = WORKQ_BG_PRIOQUEUE,<br>                                   ^<br>queue.c:926:18: error: invalid application of &#39;sizeof&#39; to an incomplete type &#39;struct dispatch_root_queue_context_s []&#39;<br>        dispatch_assert(countof(_dispatch_root_queue_contexts) ==<br>        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br></p><p>queue.c:926:18: error: invalid application of &#39;sizeof&#39; to an incomplete type &#39;struct dispatch_root_queue_context_s []&#39;<br>        dispatch_assert(countof(_dispatch_root_queue_contexts) ==<br>                        ^<br>queue.c:926:18: error: invalid application of &#39;sizeof&#39; to an incomplete type &#39;struct dispatch_root_queue_context_s []&#39;<br>        dispatch_assert(countof(_dispatch_root_queue_contexts) ==<br>        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>queue.c:926:18: error: invalid application of &#39;sizeof&#39; to an incomplete type &#39;struct dispatch_root_queue_context_s []&#39;<br>        dispatch_assert(countof(_dispatch_root_queue_contexts) ==<br>                        ^<br>5 warnings and 6 errors generated.<br></p><p><br>Second try (with manually defined WORKQ_BG_PRIOQUEUE macro ;)):<br>user$ make<br>/bin/bash ../libtool  --tag=CXX   --mode=link clang++  -g -O2 -avoid-version    -o libdispatch.la -rpath /usr/local/lib allocator.lo apply.lo benchmark.lo data.lo introspection.lo init.lo io.lo object.lo once.lo queue.lo semaphore.lo source.lo time.lo transform.lo voucher.lo shims/linux_stubs.lo     -lpthread  -Lyes -lBlocksRuntime<br>../libtool: line 6000: cd: yes: No such file or directory<br>libtool: link: cannot determine absolute directory name of `yes&#39;<br>make[2]: *** [libdispatch.la] Error 1<br>make[2]: Leaving directory `/home/user/code/libs/tmp/swift-corelibs-libdispatch/src&#39;<br>make[1]: *** [all] Error 2<br>make[1]: Leaving directory `/home/user/code/libs/tmp/swift-corelibs-libdispatch/src&#39;<br>make: *** [all-recursive] Error 1<br></p><p>Third try (after running libtool without -Lyes option):<br>user$ make<br>bsdtests.c:28:10: fatal error: &#39;crt_externs.h&#39; file not found<br>#include &lt;crt_externs.h&gt;<br>         ^<br>1 error generated.<br></p><p><br>Few… At least libdispatch was built ;)<br></p><p>&gt; 11 дек. 2015 г., в 18:02, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; написал(а):<br>&gt; <br>&gt; swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 03:17:47 AM:<br>&gt; <br>&gt; &gt; From: f-dz-f via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt;<br>&gt; &gt; To: swift-corelibs-dev at swift.org<br>&gt; &gt; Date: 12/11/2015 03:18 AM<br>&gt; &gt; Subject: [swift-corelibs-dev]  libdispatch build issue<br>&gt; &gt; Sent by: swift-corelibs-dev-bounces at swift.org<br>&gt; <br>&gt; &gt; PS On ubuntu 14.04 project is also generally unbuildable (despite <br>&gt; &gt; title of commit:33b735c5330b5a97d029bccfff9a7d78ef1f214 ;)). <br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; Right now the Linux build is assuming you&#39;ve installed some pre-req packages.  In particular,<br>&gt; <br>&gt; sudo apt-get install libblocksruntime-dev libkqueue-dev libpthread-workqueue-dev<br>&gt; <br>&gt; I&#39;ve been building on 15.10;  haven&#39;t tried 14.04 recently.  Maybe try install the pre-reqs on 14.04 and see what happens?<br>&gt; <br>&gt; I&#39;ll put together a quick check sheet with build pre-reqs and instructions and submit a pull request to include it.<br>&gt; <br>&gt; --dave<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/6c41807a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 11, 2015 at 07:00:00am</p></header><div class="content"><p>Hi,<br></p><p>&gt; On Dec 11, 2015, at 12:17 AM, f-dz-f via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi! I’m unable to build on OS X 10.11 <br>&gt; <br>&gt; Using make:<br>&gt; <br>&gt; ../private/voucher_activity_private.h:493:10: fatal error: &#39;os/lock_private.h&#39;<br>&gt;       file not found<br>&gt; #include &lt;os/lock_private.h&gt;<br>&gt;          ^<br>&gt; <br>&gt; Using Xcode:<br>&gt; <br>&gt; /Users/dzianis/Documents/my_code/libs/swift-corelibs-libdispatch/private/voucher_activity_private.h:493:10: &#39;os/lock_private.h&#39; file not found<br></p><p>Yes, this is known and we’re working on resolving that issue.<br></p><p>&gt; PS On ubuntu 14.04 project is also generally unbuildable (despite title of commit:33b735c5330b5a97d029bccfff9a7d78ef1f214 ;)).<br></p><p>The linux port is in progress, and even if it built, right now, it wouldn’t be functional.<br></p><p>-Pierre<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/cb04db01/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/58f35424e978e5dd5dd8ee2200867f3b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Dzianis Fedarenka</string> &lt;f.dz.v.gh at gmail.com&gt;<p>December 11, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; 11 дек. 2015 г., в 18:36, Pierre Habouzit &lt;phabouzit at apple.com&gt; написал(а):<br>&gt; <br>&gt; The linux port is in progress, and even if it built, right now, it wouldn’t be functional.<br>&gt; <br>&gt; -Pierre<br></p><p><br>Yes. I completely understand that there linux port is not functional. So I want to contribute to it. But it&#39;s practically impossible since there is no usable build system :(.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/7056659b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 11, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 8:19 AM, Dzianis Fedarenka via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; 11 дек. 2015 г., в 18:36, Pierre Habouzit &lt;phabouzit at apple.com &lt;mailto:phabouzit at apple.com&gt;&gt; написал(а):<br>&gt;&gt; <br>&gt;&gt; The linux port is in progress, and even if it built, right now, it wouldn’t be functional.<br>&gt;&gt; <br>&gt;&gt; -Pierre<br>&gt; <br>&gt; <br>&gt; Yes. I completely understand that there linux port is not functional. So I want to contribute to it. But it&#39;s practically impossible since there is no usable build system :(.<br></p><p>That’s the point, porting starts with making it build ;)<br></p><p><br>-Pierre<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/dfe1be0f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch build issue</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 11:19:15 AM:<br>&gt;<br>&gt; The linux port is in progress, and even if it built, right now, it<br>&gt; wouldn’t be functional.<br>&gt;<br>&gt; -Pierre<br>&gt;<br>&gt; Yes. I completely understand that there linux port is not<br>&gt; functional. So I want to contribute to it. But it&#39;s practically<br>&gt; impossible since there is no usable build system :(.<br></p><p>It&#39;s limping along.  We&#39;ve managed to run a few programs successfully.<br></p><p>I think the next step is actually to get the test suite to compile &amp; build<br>so we can see what functionally isn&#39;t working yet.<br></p><p>Pierre and Daniel, we could use some guidance on how to approach this.  The<br>tests have quite a few unguarded includes of mach header files, uses of<br>mach types, and includes of Foundation.  How would you like this porting to<br>proceed?  Hubertus has already done some initial poking at it, but getting<br>direction on the intended outcome would be very helpful.<br></p><p>thanks,<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/cc55ba41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>December 11, 2015 at 09:00:00am</p></header><div class="content"><p>This is only tangentially related: but I was attempting to build dispatch as well to start work on CFRunLoop and a few other dispatch bound features in Foundation on linux. I was seeing similar failures as Dzianis Fedarenka. Is there a branch/fork that I can grab to test this stuff out w/ bringing stuff up in Foundation?<br></p><p>My question is that of design and status of where things are at; CFRunLoop requires a method to interoperate with the main dispatch queue via _dispatch_get_main_queue_port_4CF and _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact upon the same event source type as dispatch to ensure the main queue behaves correctly - so what type of event source should we be using? A socket? A producer/consumer notification via pthread conditions?<br></p><p>&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 11:19:15 AM:<br>&gt; &gt; <br>&gt; &gt; The linux port is in progress, and even if it built, right now, it <br>&gt; &gt; wouldn’t be functional.<br>&gt; &gt; <br>&gt; &gt; -Pierre<br>&gt; &gt; <br>&gt; &gt; Yes. I completely understand that there linux port is not <br>&gt; &gt; functional. So I want to contribute to it. But it&#39;s practically <br>&gt; &gt; impossible since there is no usable build system :(.<br>&gt; <br>&gt; It&#39;s limping along.  We&#39;ve managed to run a few programs successfully. <br>&gt; <br>&gt; I think the next step is actually to get the test suite to compile &amp; build so we can see what functionally isn&#39;t working yet.<br>&gt; <br>&gt; Pierre and Daniel, we could use some guidance on how to approach this.  The tests have quite a few unguarded includes of mach header files, uses of mach types, and includes of Foundation.  How would you like this porting to proceed?  Hubertus has already done some initial poking at it, but getting direction on the intended outcome would be very helpful.<br>&gt; <br>&gt; thanks,<br>&gt; <br>&gt; --dave<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/11fdd3ad/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch build issue</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>December 11, 2015 at 12:00:00pm</p></header><div class="content"><p>phausler at apple.com wrote on 12/11/2015 12:02:30 PM:<br>&gt; This is only tangentially related: but I was attempting to build<br>&gt; dispatch as well to start work on CFRunLoop and a few other dispatch<br>&gt; bound features in Foundation on linux. I was seeing similar failures<br>&gt; as Dzianis Fedarenka. Is there a branch/fork that I can grab to test<br>&gt; this stuff out w/ bringing stuff up in Foundation?<br></p><p>If you grab the master branch it should build libdispatch.so on ubuntu<br>15.04.<br></p><p>I&#39;ve put a quick cheat sheet in a pull request:<br>https://github.com/apple/swift-corelibs-libdispatch/pull/11<br></p><p>There&#39;s a patch from Hubertus to get timers at least partially working that<br>you may want too:<br>https://github.com/apple/swift-corelibs-libdispatch/pull/8<br></p><p><br>&gt; My question is that of design and status of where things are at;<br>&gt; CFRunLoop requires a method to interoperate with the main dispatch<br>&gt; queue via _dispatch_get_main_queue_port_4CF and<br>&gt; _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact<br>&gt; upon the same event source type as dispatch to ensure the main queue<br>&gt; behaves correctly - so what type of event source should we be using?<br>&gt; A socket? A producer/consumer notification via pthread conditions?<br></p><p>Sorry, I don&#39;t understand the code well enough yet to answer this<br>one :(   I&#39;m sure Pierre or Daniel can.<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/697d795b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/562c2299436b75df013fb428ddf90ce6?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;pierre at habouzit.net&gt;<p>December 11, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 9:02 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; This is only tangentially related: but I was attempting to build dispatch as well to start work on CFRunLoop and a few other dispatch bound features in Foundation on linux. I was seeing similar failures as Dzianis Fedarenka. Is there a branch/fork that I can grab to test this stuff out w/ bringing stuff up in Foundation?<br>&gt; <br>&gt; My question is that of design and status of where things are at; CFRunLoop requires a method to interoperate with the main dispatch queue via _dispatch_get_main_queue_port_4CF and _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact upon the same event source type as dispatch to ensure the main queue behaves correctly - so what type of event source should we be using? A socket? A producer/consumer notification via pthread conditions?<br></p><p>The linux equivalent to what we’re doing for the runloop is to use an eventfd() to replace sending messages to its port.<br></p><p><br>&gt;&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; swift-corelibs-dev-bounces at swift.org &lt;mailto:swift-corelibs-dev-bounces at swift.org&gt; wrote on 12/11/2015 11:19:15 AM:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The linux port is in progress, and even if it built, right now, it <br>&gt;&gt; &gt; wouldn’t be functional.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; -Pierre<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Yes. I completely understand that there linux port is not <br>&gt;&gt; &gt; functional. So I want to contribute to it. But it&#39;s practically <br>&gt;&gt; &gt; impossible since there is no usable build system :(.<br>&gt;&gt; <br>&gt;&gt; It&#39;s limping along.  We&#39;ve managed to run a few programs successfully. <br>&gt;&gt; <br>&gt;&gt; I think the next step is actually to get the test suite to compile &amp; build so we can see what functionally isn&#39;t working yet.<br>&gt;&gt; <br>&gt;&gt; Pierre and Daniel, we could use some guidance on how to approach this.  The tests have quite a few unguarded includes of mach header files, uses of mach types, and includes of Foundation.  How would you like this porting to proceed?  Hubertus has already done some initial poking at it, but getting direction on the intended outcome would be very helpful.<br>&gt;&gt; <br>&gt;&gt; thanks,<br>&gt;&gt; <br>&gt;&gt; --dave<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/24f38d5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 9:57 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 11, 2015, at 9:02 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is only tangentially related: but I was attempting to build dispatch as well to start work on CFRunLoop and a few other dispatch bound features in Foundation on linux. I was seeing similar failures as Dzianis Fedarenka. Is there a branch/fork that I can grab to test this stuff out w/ bringing stuff up in Foundation?<br>&gt;&gt; <br>&gt;&gt; My question is that of design and status of where things are at; CFRunLoop requires a method to interoperate with the main dispatch queue via _dispatch_get_main_queue_port_4CF and _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact upon the same event source type as dispatch to ensure the main queue behaves correctly - so what type of event source should we be using? A socket? A producer/consumer notification via pthread conditions?<br>&gt; <br>&gt; The linux equivalent to what we’re doing for the runloop is to use an eventfd() to replace sending messages to its port.<br></p><p>Though the runloop code should be disabled on linux right now, as it’s highly dependent on mach ports, and we should discuss whether having a dispatch queue attached to the runloop makes sense for the non mach version, and if it does, should it have exactly the same queue_runloop implementation as today. I think not, and the simplest way to port the implementation is to have a different implementation for linux completely and not rely on the weird 4CF hooks that we have on OS X.<br></p><p>-Pierre<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/c51ea10f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 11:25 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 11, 2015, at 9:57 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Dec 11, 2015, at 9:02 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is only tangentially related: but I was attempting to build dispatch as well to start work on CFRunLoop and a few other dispatch bound features in Foundation on linux. I was seeing similar failures as Dzianis Fedarenka. Is there a branch/fork that I can grab to test this stuff out w/ bringing stuff up in Foundation?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My question is that of design and status of where things are at; CFRunLoop requires a method to interoperate with the main dispatch queue via _dispatch_get_main_queue_port_4CF and _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact upon the same event source type as dispatch to ensure the main queue behaves correctly - so what type of event source should we be using? A socket? A producer/consumer notification via pthread conditions?<br>&gt;&gt; <br>&gt;&gt; The linux equivalent to what we’re doing for the runloop is to use an eventfd() to replace sending messages to its port.<br>&gt; <br>&gt; Though the runloop code should be disabled on linux right now, as it’s highly dependent on mach ports, and we should discuss whether having a dispatch queue attached to the runloop makes sense for the non mach version, and if it does, should it have exactly the same queue_runloop implementation as today. I think not, and the simplest way to port the implementation is to have a different implementation for linux completely and not rely on the weird 4CF hooks that we have on OS X.<br>&gt; <br>&gt; -Pierre<br></p><p>We already have a Windows implementation in there that uses HANDLE, so we are not completely dependent on mach ports.<br></p><p>I think it’s critical for portability that we maintain the concept of dispatch_main and CFRunLoop main thread integration. The exact mechanism is something we can design, but we have a fairly proven pattern here that would be straightforward to port.<br></p><p>- Tony<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/2834afb7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>I was talking about the *dispatch* run loop code. I&#39;m not sure it&#39;s needed. The main queue is a different story. <br></p><p>-Pierre on his iPhone<br></p><p>&gt; On 11 déc. 2015, at 11:28, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Dec 11, 2015, at 11:25 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 11, 2015, at 9:57 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 11, 2015, at 9:02 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is only tangentially related: but I was attempting to build dispatch as well to start work on CFRunLoop and a few other dispatch bound features in Foundation on linux. I was seeing similar failures as Dzianis Fedarenka. Is there a branch/fork that I can grab to test this stuff out w/ bringing stuff up in Foundation?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My question is that of design and status of where things are at; CFRunLoop requires a method to interoperate with the main dispatch queue via _dispatch_get_main_queue_port_4CF and _dispatch_main_queue_callback_4CF. CFRunLoop will need to transact upon the same event source type as dispatch to ensure the main queue behaves correctly - so what type of event source should we be using? A socket? A producer/consumer notification via pthread conditions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The linux equivalent to what we’re doing for the runloop is to use an eventfd() to replace sending messages to its port.<br>&gt;&gt; <br>&gt;&gt; Though the runloop code should be disabled on linux right now, as it’s highly dependent on mach ports, and we should discuss whether having a dispatch queue attached to the runloop makes sense for the non mach version, and if it does, should it have exactly the same queue_runloop implementation as today. I think not, and the simplest way to port the implementation is to have a different implementation for linux completely and not rely on the weird 4CF hooks that we have on OS X.<br>&gt;&gt; <br>&gt;&gt; -Pierre<br>&gt; <br>&gt; We already have a Windows implementation in there that uses HANDLE, so we are not completely dependent on mach ports.<br>&gt; <br>&gt; I think it’s critical for portability that we maintain the concept of dispatch_main and CFRunLoop main thread integration. The exact mechanism is something we can design, but we have a fairly proven pattern here that would be straightforward to port.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/87a72733/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 11, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 11:19:15 AM:<br>&gt; &gt; <br>&gt; &gt; The linux port is in progress, and even if it built, right now, it <br>&gt; &gt; wouldn’t be functional.<br>&gt; &gt; <br>&gt; &gt; -Pierre<br>&gt; &gt; <br>&gt; &gt; Yes. I completely understand that there linux port is not <br>&gt; &gt; functional. So I want to contribute to it. But it&#39;s practically <br>&gt; &gt; impossible since there is no usable build system :(.<br>&gt; <br>&gt; It&#39;s limping along.  We&#39;ve managed to run a few programs successfully. <br>&gt; <br>&gt; I think the next step is actually to get the test suite to compile &amp; build so we can see what functionally isn&#39;t working yet.<br>&gt; <br>&gt; Pierre and Daniel, we could use some guidance on how to approach this.  The tests have quite a few unguarded includes of mach header files, uses of mach types, and includes of Foundation.  How would you like this porting to proceed?  Hubertus has already done some initial poking at it, but getting direction on the intended outcome would be very helpful.<br>&gt; <br></p><p>We do have an internal test-suite that we can’t share because it rely on internal Apple infrastructure. I haven’t closed the loop with Daniel completely on this but our position I think is that these should be made portable even if that means dropping anything mach related stuff by hiding it behind a #if __APPLE__ or similar.<br></p><p>-Pierre<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/4a63b9a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>libdispatch build issue</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>December 11, 2015 at 06:00:00pm</p></header><div class="content"><p>Thanks Pierre.<br></p><p>We made a little progress on getting tests to compile this afternoon:<br>https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/fixtests<br></p><p>Absolutely not ready for a pull request, but mentioning it in case anyone<br>else was starting on the same task and wanted to collaborate.<br></p><p>--dave<br></p><p><br></p><p>From:	Pierre Habouzit &lt;phabouzit at apple.com&gt;<br>To:	David P Grove/Watson/IBM at IBMUS<br>Cc:	Dzianis Fedarenka &lt;f.dz.v.gh at gmail.com&gt;,<br>            swift-corelibs-dev at swift.org<br>Date:	12/11/2015 12:59 PM<br>Subject:	Re: [swift-corelibs-dev] libdispatch build issue<br>Sent by:	phabouzit at apple.com<br></p><p><br></p><p><br>      On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;<br>      swift-corelibs-dev at swift.org&gt; wrote:<br></p><p><br></p><p>      swift-corelibs-dev-bounces at swift.org wrote on 12/11/2015 11:19:15 AM:<br>      &gt;<br>      &gt; The linux port is in progress, and even if it built, right now, it<br>      &gt; wouldn’t be functional.<br>      &gt;<br>      &gt; -Pierre<br>      &gt;<br>      &gt; Yes. I completely understand that there linux port is not<br>      &gt; functional. So I want to contribute to it. But it&#39;s practically<br>      &gt; impossible since there is no usable build system :(.<br></p><p>      It&#39;s limping along.  We&#39;ve managed to run a few programs<br>      successfully.<br></p><p>      I think the next step is actually to get the test suite to compile &amp;<br>      build so we can see what functionally isn&#39;t working yet.<br></p><p>      Pierre and Daniel, we could use some guidance on how to approach<br>      this.  The tests have quite a few unguarded includes of mach header<br>      files, uses of mach types, and includes of Foundation.  How would you<br>      like this porting to proceed?  Hubertus has already done some initial<br>      poking at it, but getting direction on the intended outcome would be<br>      very helpful.<br></p><p><br></p><p>We do have an internal test-suite that we can’t share because it rely on<br>internal Apple infrastructure. I haven’t closed the loop with Daniel<br>completely on this but our position I think is that these should be made<br>portable even if that means dropping anything mach related stuff by hiding<br>it behind a #if __APPLE__ or similar.<br></p><p>-Pierre<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/83c93a85/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: graycol.gif<br>Type: image/gif<br>Size: 105 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151211/83c93a85/attachment.gif&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 14, 2015 at 09:00:00am</p></header><div class="content"><p>Cool, I’ll have a look later this week or when it gets more ready ;)<br></p><p>btw, we got a pull request that seem good to me (https://github.com/apple/swift-corelibs-libdispatch/pull/13 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/13&gt;) but I don’t have the linux setup to check it’s good, would you mind review it, I’ve not seen anything wrong with it from the dispatch or from what I remember from autotools best practices from my debian developer past.<br></p><p>-Pierre<br></p><p>&gt; On Dec 11, 2015, at 3:03 PM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks Pierre.<br>&gt; <br>&gt; We made a little progress on getting tests to compile this afternoon: https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/fixtests &lt;https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/fixtests&gt;<br>&gt; <br>&gt; Absolutely not ready for a pull request, but mentioning it in case anyone else was starting on the same task and wanted to collaborate. <br>&gt; <br>&gt; --dave<br>&gt; <br>&gt; &lt;graycol.gif&gt;Pierre Habouzit ---12/11/2015 12:59:51 PM---&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; w<br>&gt; <br>&gt; From: Pierre Habouzit &lt;phabouzit at apple.com&gt;<br>&gt; To: David P Grove/Watson/IBM at IBMUS<br>&gt; Cc: Dzianis Fedarenka &lt;f.dz.v.gh at gmail.com&gt;, swift-corelibs-dev at swift.org<br>&gt; Date: 12/11/2015 12:59 PM<br>&gt; Subject: Re: [swift-corelibs-dev] libdispatch build issue<br>&gt; Sent by: phabouzit at apple.com<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; swift-corelibs-dev-bounces at swift.org &lt;mailto:swift-corelibs-dev-bounces at swift.org&gt; wrote on 12/11/2015 11:19:15 AM:<br>&gt; &gt; <br>&gt; &gt; The linux port is in progress, and even if it built, right now, it <br>&gt; &gt; wouldn’t be functional.<br>&gt; &gt; <br>&gt; &gt; -Pierre<br>&gt; &gt; <br>&gt; &gt; Yes. I completely understand that there linux port is not <br>&gt; &gt; functional. So I want to contribute to it. But it&#39;s practically <br>&gt; &gt; impossible since there is no usable build system :(.<br>&gt; <br>&gt; It&#39;s limping along.  We&#39;ve managed to run a few programs successfully. <br>&gt; <br>&gt; I think the next step is actually to get the test suite to compile &amp; build so we can see what functionally isn&#39;t working yet.<br>&gt; <br>&gt; Pierre and Daniel, we could use some guidance on how to approach this.  The tests have quite a few unguarded includes of mach header files, uses of mach types, and includes of Foundation.  How would you like this porting to proceed?  Hubertus has already done some initial poking at it, but getting direction on the intended outcome would be very helpful.<br>&gt; <br>&gt; <br>&gt; We do have an internal test-suite that we can’t share because it rely on internal Apple infrastructure. I haven’t closed the loop with Daniel completely on this but our position I think is that these should be made portable even if that means dropping anything mach related stuff by hiding it behind a #if __APPLE__ or similar.<br>&gt; <br>&gt; -Pierre<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/cfee39c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0db24e79de1d6e82cf6327b091903b1b?s=50"></div><header><strong>libdispatch build issue</strong> from <string>Pierre Habouzit</string> &lt;phabouzit at apple.com&gt;<p>December 14, 2015 at 09:00:00am</p></header><div class="content"><p>-Pierre<br></p><p>&gt; On Dec 14, 2015, at 9:18 AM, Pierre Habouzit via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Cool, I’ll have a look later this week or when it gets more ready ;)<br>&gt; <br>&gt; btw, we got a pull request that seem good to me (https://github.com/apple/swift-corelibs-libdispatch/pull/13 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/13&gt;) but I don’t have the linux setup to check it’s good, would you mind review it, I’ve not seen anything wrong with it from the dispatch or from what I remember from autotools best practices from my debian developer past.<br></p><p>wow that sentence makes no sense. I meant I see nothing wrong from the dispatch *perspective*. works better with all words ;)<br></p><p>&gt; <br>&gt; -Pierre<br>&gt; <br>&gt;&gt; On Dec 11, 2015, at 3:03 PM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks Pierre.<br>&gt;&gt; <br>&gt;&gt; We made a little progress on getting tests to compile this afternoon: https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/fixtests &lt;https://github.com/dgrove-oss/swift-corelibs-libdispatch/tree/fixtests&gt;<br>&gt;&gt; <br>&gt;&gt; Absolutely not ready for a pull request, but mentioning it in case anyone else was starting on the same task and wanted to collaborate. <br>&gt;&gt; <br>&gt;&gt; --dave<br>&gt;&gt; <br>&gt;&gt; &lt;graycol.gif&gt;Pierre Habouzit ---12/11/2015 12:59:51 PM---&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; w<br>&gt;&gt; <br>&gt;&gt; From: Pierre Habouzit &lt;phabouzit at apple.com &lt;mailto:phabouzit at apple.com&gt;&gt;<br>&gt;&gt; To: David P Grove/Watson/IBM at IBMUS<br>&gt;&gt; Cc: Dzianis Fedarenka &lt;f.dz.v.gh at gmail.com &lt;mailto:f.dz.v.gh at gmail.com&gt;&gt;, swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; Date: 12/11/2015 12:59 PM<br>&gt;&gt; Subject: Re: [swift-corelibs-dev] libdispatch build issue<br>&gt;&gt; Sent by: phabouzit at apple.com &lt;mailto:phabouzit at apple.com&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 11, 2015, at 8:27 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; swift-corelibs-dev-bounces at swift.org &lt;mailto:swift-corelibs-dev-bounces at swift.org&gt; wrote on 12/11/2015 11:19:15 AM:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; The linux port is in progress, and even if it built, right now, it <br>&gt;&gt; &gt; wouldn’t be functional.<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; -Pierre<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Yes. I completely understand that there linux port is not <br>&gt;&gt; &gt; functional. So I want to contribute to it. But it&#39;s practically <br>&gt;&gt; &gt; impossible since there is no usable build system :(.<br>&gt;&gt; <br>&gt;&gt; It&#39;s limping along.  We&#39;ve managed to run a few programs successfully. <br>&gt;&gt; <br>&gt;&gt; I think the next step is actually to get the test suite to compile &amp; build so we can see what functionally isn&#39;t working yet.<br>&gt;&gt; <br>&gt;&gt; Pierre and Daniel, we could use some guidance on how to approach this.  The tests have quite a few unguarded includes of mach header files, uses of mach types, and includes of Foundation.  How would you like this porting to proceed?  Hubertus has already done some initial poking at it, but getting direction on the intended outcome would be very helpful.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We do have an internal test-suite that we can’t share because it rely on internal Apple infrastructure. I haven’t closed the loop with Daniel completely on this but our position I think is that these should be made portable even if that means dropping anything mach related stuff by hiding it behind a #if __APPLE__ or similar.<br>&gt;&gt; <br>&gt;&gt; -Pierre<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151214/807286fa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
