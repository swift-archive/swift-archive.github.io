<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dbccdb14c9594946a01d146877040c1?s=50"></div><header><strong>Building custom toolchain</strong> from <string>bhargav gurlanka</string> &lt;bhargav.grlnk at gmail.com&gt;<p>June  2, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;m trying to build a custom toolchain, but it is failing with error:<br></p><p>--- Installing swift ---<br>+ env DESTDIR=// /usr/local/bin/cmake --build<br>/Users/bhargavg/Documents/workspaces/xcode/github/apple/build/bhargavg/swift-macosx-x86_64<br>-- install<br>ninja: error: unknown target &#39;install&#39;<br>swift/utils/build-script: fatal error: command terminated with a non-zero<br>exit status 1, aborting<br></p><p><br>Script to build toolchain:<br></p><p>#!/bin/bash<br>#<br># Faster toolchain build: skips as much as possible.<br>#<br># To use this toolchain from the command line:&quot;<br>#     export TOOLCHAINS=$(whoami)<br>#<br># we build to the same prefix every time (instead of building<br># to a versioned prefix) because every time the prefix changes<br># *everything* rebuilds.<br></p><p>set -e<br>trap &quot;exit;&quot; SIGINT SIGTERM<br></p><p>SRCROOT=&quot;$HOME/Documents/workspaces/xcode/github/apple/&quot;<br></p><p>ALIAS=$(whoami)<br>TOOLCHAIN_NAME=&quot;swift-${ALIAS}.xctoolchain&quot;<br>TOOLCHAIN_PREFIX=&quot;$HOME/Library/Developer/Toolchains/${TOOLCHAIN_NAME}&quot;<br></p><p>export TOOLCHAINS=default<br></p><p>if [[ $1 == &quot;--reconfigure&quot; ]]; then<br>    RECONFIGURE=&quot;--reconfigure&quot;<br>fi<br></p><p># so if anything is put in the wrong place we will *see* it<br>cd &quot;$HOME/Desktop&quot;<br></p><p>&quot;$SRCROOT/swift/utils/build-script&quot; \<br>        --release \<br>        --llvm \<br>        --llbuild \<br>        --swiftpm \<br>        --build-subdir=&quot;${ALIAS}&quot; \<br>        --assertions \<br>        --no-swift-stdlib-assertions \<br>        --install-prefix=&quot;${TOOLCHAIN_PREFIX}/usr&quot; \<br>        --lldb \<br>        --darwin-xcrun-toolchain=mxcl \<br>        -- \<br>        --lldb-use-system-debugserver \<br>        ${RECONFIGURE} \<br>        --skip-ios \<br>        --skip-tvos \<br>        --skip-watchos \<br>        --skip-build-linux \<br>        --skip-build-freebsd \<br>        --skip-build-cygwin \<br>        --skip-build-ios \<br>        --skip-build-ios-device \<br>        --skip-build-ios-simulator \<br>        --skip-build-tvos \<br>        --skip-build-tvos-device \<br>        --skip-build-tvos-simulator \<br>        --skip-build-watchos \<br>        --skip-build-watchos-device \<br>        --skip-build-watchos-simulator \<br>        --skip-build-xctest \<br>        --skip-build-foundation \<br>        --skip-build-libdispatch \<br>        --skip-build-benchmarks \<br>        --skip-test-cmark \<br>        --skip-test-lldb \<br>        --skip-test-swift \<br>        --skip-test-llbuild \<br>        --skip-test-swiftpm \<br>        --skip-test-xctest \<br>        --skip-test-foundation \<br>        --skip-test-libdispatch \<br>        --skip-test-linux \<br>        --skip-test-freebsd \<br>        --skip-test-cygwin \<br>        --skip-test-osx \<br>        --skip-test-ios-simulator \<br>        --skip-test-ios-host \<br>        --skip-test-tvos-simulator \<br>        --skip-test-tvos-host \<br>        --skip-test-watchos-simulator \<br>        --skip-test-watchos-host \<br>        --skip-test-benchmarks \<br>        --skip-test-optimized \<br>        --stdlib-deployment-targets=macosx-x86_64 \<br>        --swift-enable-ast-verifier=0 \<br>        --build-swift-examples=0 \<br>        --build-swift-stdlib-unittest-extra=0 \<br>        --build-swift-static-stdlib=1 \<br>        --compiler-vendor=apple \<br>        --swift-install-components=&quot;compiler;clang-builtin-headers;stdlib;sdk-overlay;license;sourcekit-xpc-service&quot;<br>\<br>        --llvm-install-components=&quot;libclang;libclang-headers&quot; \<br>        --install-swift=1 \<br>        --install-llbuild=1 \<br>        --install-swiftpm=1 \<br>        --install-destdir=&quot;/&quot; \<br>        --install-lldb=1 \<br>        --toolchain-prefix=&quot;${TOOLCHAIN_PREFIX}&quot;<br></p><p><br># doing by hand as the only other way to trigger this<br># is by specifying --installable-package, which tars<br># all installed products and is super slow<br></p><p>DATE=$(date +%Y.%m.%d)<br>SWIFT_VERSION=$(&quot;${TOOLCHAIN_PREFIX}/usr/bin/swift&quot; --version | ruby<br>-e &#39;ARGF.read =~ /Swift version (\d+\.\d(\.\d+)?(-.*?)?) /; print<br>&quot;#{$1}\n&quot;&#39;)<br></p><p>if [[ &quot;$SWIFT_VERSION&quot; == &quot;3.0-dev&quot; ]]; then<br>    SWIFT_VERSION=&quot;3.0.0-dev&quot;<br>fi<br></p><p>VERSION=&quot;${SWIFT_VERSION}-${ALIAS}+${DATE}&quot;<br></p><p>cat &gt; &quot;${TOOLCHAIN_PREFIX}/Info.plist&quot; &lt;&lt;EOF<br>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;<br>&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;<br>&lt;plist version=&quot;1.0&quot;&gt;<br>&lt;dict&gt;<br>	&lt;key&gt;Aliases&lt;/key&gt;<br>	&lt;array&gt;<br>		&lt;string&gt;${ALIAS}&lt;/string&gt;<br>	&lt;/array&gt;<br>	&lt;key&gt;CompatibilityVersion&lt;/key&gt;<br>	&lt;integer&gt;2&lt;/integer&gt;<br>	&lt;key&gt;CFBundleIdentifier&lt;/key&gt;<br>	&lt;string&gt;org.swift.${SWIFT_VERSION}.${ALIAS}&lt;/string&gt;<br>	&lt;key&gt;DisplayName&lt;/key&gt;<br>	&lt;string&gt;Swift ${SWIFT_VERSION}.${ALIAS}+${DATE}&lt;/string&gt;<br>	&lt;key&gt;ReportProblemURL&lt;/key&gt;<br>	&lt;string&gt;https://bugs.swift.org/&lt;/string&gt;<br>	&lt;key&gt;Version&lt;/key&gt;<br>	&lt;string&gt;${DATE}&lt;/string&gt;<br>    &lt;key&gt;OverrideEnvironment&lt;/key&gt;<br>	&lt;dict&gt;<br>		&lt;key&gt;ENABLE_BITCODE&lt;/key&gt;<br>		&lt;false/&gt;<br>		&lt;key&gt;SWIFT_DISABLE_REQUIRED_ARCLITE&lt;/key&gt;<br>		&lt;true/&gt;<br>		&lt;key&gt;SWIFT_LINK_OBJC_RUNTIME&lt;/key&gt;<br>		&lt;true/&gt;<br>	&lt;/dict&gt;<br>&lt;/dict&gt;<br>&lt;/plist&gt;<br>EOF<br></p><p><br># again, only way to trigger this otherwise is do a lengthy<br>--installable-package step<br></p><p>cp &quot;${SRCROOT}/swift/utils/swift-stdlib-tool-substitute&quot;<br>&quot;${TOOLCHAIN_PREFIX}/usr/bin/swift-stdlib-tool&quot;<br></p><p><br></p><p>You can find the script at:<br>https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365<br></p><p>Regards,<br>Bhargav Gurlanka<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160602/ea5abb93/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Building custom toolchain</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  2, 2016 at 10:00:00am</p></header><div class="content"><p>FWIW, this:<br>  https://gist.github.com/ddunbar/598bf66952fba0e9d8aecc54995f018e<br>is the script I currently use on OS X to get a working &quot;swift-dev.xctoolchain&quot; out of a built Swift. It isn&#39;t designed to work for anyone but me, but it should be easy to adapt.<br></p><p>I always run this after every build, and then use `TOOLCHAINS=swift-dev swift build` (etc) to use the development compiler.<br></p><p>My &quot;toolchain-based build process&quot; proposal will hopefully make this a no-op.<br></p><p> - Daniel<br></p><p>&gt; On Jun 2, 2016, at 3:12 AM, bhargav gurlanka via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;m trying to build a custom toolchain, but it is failing with error: <br>&gt; <br>&gt; --- Installing swift ---<br>&gt; + env DESTDIR=// /usr/local/bin/cmake --build /Users/bhargavg/Documents/workspaces/xcode/github/apple/build/bhargavg/swift-macosx-x86_64 -- install<br>&gt; ninja: error: unknown target &#39;install&#39;<br>&gt; swift/utils/build-script: fatal error: command terminated with a non-zero exit status 1, aborting<br>&gt; <br>&gt; <br>&gt; Script to build toolchain: <br>&gt; <br>&gt; #!/bin/bash<br>&gt; #<br>&gt; # Faster toolchain build: skips as much as possible.<br>&gt; #<br>&gt; # To use this toolchain from the command line:&quot;<br>&gt; #     export TOOLCHAINS=$(whoami)<br>&gt; #<br>&gt; # we build to the same prefix every time (instead of building<br>&gt; # to a versioned prefix) because every time the prefix changes<br>&gt; # *everything* rebuilds.<br>&gt; <br>&gt; set -e<br>&gt; trap &quot;exit;&quot; SIGINT SIGTERM<br>&gt; <br>&gt; SRCROOT=&quot;$HOME/Documents/workspaces/xcode/github/apple/&quot;<br>&gt; <br>&gt; ALIAS=$(whoami)<br>&gt; TOOLCHAIN_NAME=&quot;swift-${ALIAS}.xctoolchain&quot;<br>&gt; TOOLCHAIN_PREFIX=&quot;$HOME/Library/Developer/Toolchains/${TOOLCHAIN_NAME}&quot;<br>&gt; <br>&gt; export TOOLCHAINS=default<br>&gt; <br>&gt; if [[ $1 == &quot;--reconfigure&quot; ]]; then<br>&gt;     RECONFIGURE=&quot;--reconfigure&quot;<br>&gt; fi<br>&gt; <br>&gt; # so if anything is put in the wrong place we will *see* it<br>&gt; cd &quot;$HOME/Desktop&quot;<br>&gt; <br>&gt; &quot;$SRCROOT/swift/utils/build-script&quot; \<br>&gt;         --release \<br>&gt;         --llvm \<br>&gt;         --llbuild \<br>&gt;         --swiftpm \<br>&gt;         --build-subdir=&quot;${ALIAS}&quot; \<br>&gt;         --assertions \<br>&gt;         --no-swift-stdlib-assertions \<br>&gt;         --install-prefix=&quot;${TOOLCHAIN_PREFIX}/usr&quot; \<br>&gt;         --lldb \<br>&gt;         --darwin-xcrun-toolchain=mxcl \<br>&gt;         -- \<br>&gt;         --lldb-use-system-debugserver \<br>&gt;         ${RECONFIGURE} \<br>&gt;         --skip-ios \<br>&gt;         --skip-tvos \<br>&gt;         --skip-watchos \<br>&gt;         --skip-build-linux \<br>&gt;         --skip-build-freebsd \<br>&gt;         --skip-build-cygwin \<br>&gt;         --skip-build-ios \<br>&gt;         --skip-build-ios-device \<br>&gt;         --skip-build-ios-simulator \<br>&gt;         --skip-build-tvos \<br>&gt;         --skip-build-tvos-device \<br>&gt;         --skip-build-tvos-simulator \<br>&gt;         --skip-build-watchos \<br>&gt;         --skip-build-watchos-device \<br>&gt;         --skip-build-watchos-simulator \<br>&gt;         --skip-build-xctest \<br>&gt;         --skip-build-foundation \<br>&gt;         --skip-build-libdispatch \<br>&gt;         --skip-build-benchmarks \<br>&gt;         --skip-test-cmark \<br>&gt;         --skip-test-lldb \<br>&gt;         --skip-test-swift \<br>&gt;         --skip-test-llbuild \<br>&gt;         --skip-test-swiftpm \<br>&gt;         --skip-test-xctest \<br>&gt;         --skip-test-foundation \<br>&gt;         --skip-test-libdispatch \<br>&gt;         --skip-test-linux \<br>&gt;         --skip-test-freebsd \<br>&gt;         --skip-test-cygwin \<br>&gt;         --skip-test-osx \<br>&gt;         --skip-test-ios-simulator \<br>&gt;         --skip-test-ios-host \<br>&gt;         --skip-test-tvos-simulator \<br>&gt;         --skip-test-tvos-host \<br>&gt;         --skip-test-watchos-simulator \<br>&gt;         --skip-test-watchos-host \<br>&gt;         --skip-test-benchmarks \<br>&gt;         --skip-test-optimized \<br>&gt;         --stdlib-deployment-targets=macosx-x86_64 \<br>&gt;         --swift-enable-ast-verifier=0 \<br>&gt;         --build-swift-examples=0 \<br>&gt;         --build-swift-stdlib-unittest-extra=0 \<br>&gt;         --build-swift-static-stdlib=1 \<br>&gt;         --compiler-vendor=apple \<br>&gt;         --swift-install-components=&quot;compiler;clang-builtin-headers;stdlib;sdk-overlay;license;sourcekit-xpc-service&quot; \<br>&gt;         --llvm-install-components=&quot;libclang;libclang-headers&quot; \<br>&gt;         --install-swift=1 \<br>&gt;         --install-llbuild=1 \<br>&gt;         --install-swiftpm=1 \<br>&gt;         --install-destdir=&quot;/&quot; \<br>&gt;         --install-lldb=1 \<br>&gt;         --toolchain-prefix=&quot;${TOOLCHAIN_PREFIX}&quot;<br>&gt; <br>&gt; <br>&gt; # doing by hand as the only other way to trigger this<br>&gt; # is by specifying --installable-package, which tars<br>&gt; # all installed products and is super slow<br>&gt; <br>&gt; DATE=$(date +%Y.%m.%d)<br>&gt; SWIFT_VERSION=$(&quot;${TOOLCHAIN_PREFIX}/usr/bin/swift&quot; --version | ruby -e &#39;ARGF.read =~ /Swift version (\d+\.\d(\.\d+)?(-.*?)?) /; print &quot;#{$1}\n&quot;&#39;)<br>&gt; <br>&gt; if [[ &quot;$SWIFT_VERSION&quot; == &quot;3.0-dev&quot; ]]; then<br>&gt;     SWIFT_VERSION=&quot;3.0.0-dev&quot;<br>&gt; fi<br>&gt; <br>&gt; VERSION=&quot;${SWIFT_VERSION}-${ALIAS}+${DATE}&quot;<br>&gt; <br>&gt; cat &gt; &quot;${TOOLCHAIN_PREFIX}/Info.plist&quot; &lt;&lt;EOF<br>&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd &lt;http://www.apple.com/DTDs/PropertyList-1.0.dtd&gt;&quot;&gt;<br>&gt; &lt;plist version=&quot;1.0&quot;&gt;<br>&gt; &lt;dict&gt;<br>&gt; 	&lt;key&gt;Aliases&lt;/key&gt;<br>&gt; 	&lt;array&gt;<br>&gt; 		&lt;string&gt;${ALIAS}&lt;/string&gt;<br>&gt; 	&lt;/array&gt;<br>&gt; 	&lt;key&gt;CompatibilityVersion&lt;/key&gt;<br>&gt; 	&lt;integer&gt;2&lt;/integer&gt;<br>&gt; 	&lt;key&gt;CFBundleIdentifier&lt;/key&gt;<br>&gt; 	&lt;string&gt;org.swift.${SWIFT_VERSION}.${ALIAS}&lt;/string&gt;<br>&gt; 	&lt;key&gt;DisplayName&lt;/key&gt;<br>&gt; 	&lt;string&gt;Swift ${SWIFT_VERSION}.${ALIAS}+${DATE}&lt;/string&gt;<br>&gt; 	&lt;key&gt;ReportProblemURL&lt;/key&gt;<br>&gt; 	&lt;string&gt;https://bugs.swift.org/ &lt;https://bugs.swift.org/&gt;&lt;/string&gt;<br>&gt; 	&lt;key&gt;Version&lt;/key&gt;<br>&gt; 	&lt;string&gt;${DATE}&lt;/string&gt;<br>&gt;     &lt;key&gt;OverrideEnvironment&lt;/key&gt;<br>&gt; 	&lt;dict&gt;<br>&gt; 		&lt;key&gt;ENABLE_BITCODE&lt;/key&gt;<br>&gt; 		&lt;false/&gt;<br>&gt; 		&lt;key&gt;SWIFT_DISABLE_REQUIRED_ARCLITE&lt;/key&gt;<br>&gt; 		&lt;true/&gt;<br>&gt; 		&lt;key&gt;SWIFT_LINK_OBJC_RUNTIME&lt;/key&gt;<br>&gt; 		&lt;true/&gt;<br>&gt; 	&lt;/dict&gt;<br>&gt; &lt;/dict&gt;<br>&gt; &lt;/plist&gt;<br>&gt; EOF<br>&gt; <br>&gt; <br>&gt; # again, only way to trigger this otherwise is do a lengthy --installable-package step<br>&gt; <br>&gt; cp &quot;${SRCROOT}/swift/utils/swift-stdlib-tool-substitute&quot; &quot;${TOOLCHAIN_PREFIX}/usr/bin/swift-stdlib-tool&quot;<br>&gt; <br>&gt; <br>&gt; You can find the script at: https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365 &lt;https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365&gt;<br>&gt; <br>&gt; Regards,<br>&gt; Bhargav Gurlanka<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160602/f5d57eef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dbccdb14c9594946a01d146877040c1?s=50"></div><header><strong>Building custom toolchain</strong> from <string>bhargav gurlanka</string> &lt;bhargav.grlnk at gmail.com&gt;<p>June  2, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; I always run this after every build<br></p><p>If I understand you correctly, you first build swift and then run this<br>script to create the toolchain right?<br></p><p>Are you using the `build-toolchain` script to build swift? I&#39;ve tried doing<br>it sometime back and it included the testing also, which took a long time<br>to complete. Is there a way to quicken the build (by disabling tests,<br>incremental build, etc.,)?<br></p><p><br>Regards,<br>Bhargav Gurlanka<br></p><p>On 2 June 2016 at 23:06, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br></p><p>&gt; FWIW, this:<br>&gt;   https://gist.github.com/ddunbar/598bf66952fba0e9d8aecc54995f018e<br>&gt; is the script I currently use on OS X to get a working<br>&gt; &quot;swift-dev.xctoolchain&quot; out of a built Swift. It isn&#39;t designed to work for<br>&gt; anyone but me, but it should be easy to adapt.<br>&gt;<br>&gt; I always run this after every build, and then use `TOOLCHAINS=swift-dev<br>&gt; swift build` (etc) to use the development compiler.<br>&gt;<br>&gt; My &quot;toolchain-based build process&quot; proposal will hopefully make this a<br>&gt; no-op.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Jun 2, 2016, at 3:12 AM, bhargav gurlanka via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; I&#39;m trying to build a custom toolchain, but it is failing with error:<br>&gt;<br>&gt; --- Installing swift ---<br>&gt; + env DESTDIR=// /usr/local/bin/cmake --build<br>&gt; /Users/bhargavg/Documents/workspaces/xcode/github/apple/build/bhargavg/swift-macosx-x86_64<br>&gt; -- install<br>&gt; ninja: error: unknown target &#39;install&#39;<br>&gt; swift/utils/build-script: fatal error: command terminated with a non-zero<br>&gt; exit status 1, aborting<br>&gt;<br>&gt;<br>&gt; Script to build toolchain:<br>&gt;<br>&gt; #!/bin/bash<br>&gt; #<br>&gt; # Faster toolchain build: skips as much as possible.<br>&gt; #<br>&gt; # To use this toolchain from the command line:&quot;<br>&gt; #     export TOOLCHAINS=$(whoami)<br>&gt; #<br>&gt; # we build to the same prefix every time (instead of building<br>&gt; # to a versioned prefix) because every time the prefix changes<br>&gt; # *everything* rebuilds.<br>&gt;<br>&gt; set -e<br>&gt; trap &quot;exit;&quot; SIGINT SIGTERM<br>&gt;<br>&gt; SRCROOT=&quot;$HOME/Documents/workspaces/xcode/github/apple/&quot;<br>&gt;<br>&gt; ALIAS=$(whoami)<br>&gt; TOOLCHAIN_NAME=&quot;swift-${ALIAS}.xctoolchain&quot;<br>&gt; TOOLCHAIN_PREFIX=&quot;$HOME/Library/Developer/Toolchains/${TOOLCHAIN_NAME}&quot;<br>&gt;<br>&gt; export TOOLCHAINS=default<br>&gt;<br>&gt; if [[ $1 == &quot;--reconfigure&quot; ]]; then<br>&gt;     RECONFIGURE=&quot;--reconfigure&quot;<br>&gt; fi<br>&gt;<br>&gt; # so if anything is put in the wrong place we will *see* it<br>&gt; cd &quot;$HOME/Desktop&quot;<br>&gt;<br>&gt; &quot;$SRCROOT/swift/utils/build-script&quot; \<br>&gt;         --release \<br>&gt;         --llvm \<br>&gt;         --llbuild \<br>&gt;         --swiftpm \<br>&gt;         --build-subdir=&quot;${ALIAS}&quot; \<br>&gt;         --assertions \<br>&gt;         --no-swift-stdlib-assertions \<br>&gt;         --install-prefix=&quot;${TOOLCHAIN_PREFIX}/usr&quot; \<br>&gt;         --lldb \<br>&gt;         --darwin-xcrun-toolchain=mxcl \<br>&gt;         -- \<br>&gt;         --lldb-use-system-debugserver \<br>&gt;         ${RECONFIGURE} \<br>&gt;         --skip-ios \<br>&gt;         --skip-tvos \<br>&gt;         --skip-watchos \<br>&gt;         --skip-build-linux \<br>&gt;         --skip-build-freebsd \<br>&gt;         --skip-build-cygwin \<br>&gt;         --skip-build-ios \<br>&gt;         --skip-build-ios-device \<br>&gt;         --skip-build-ios-simulator \<br>&gt;         --skip-build-tvos \<br>&gt;         --skip-build-tvos-device \<br>&gt;         --skip-build-tvos-simulator \<br>&gt;         --skip-build-watchos \<br>&gt;         --skip-build-watchos-device \<br>&gt;         --skip-build-watchos-simulator \<br>&gt;         --skip-build-xctest \<br>&gt;         --skip-build-foundation \<br>&gt;         --skip-build-libdispatch \<br>&gt;         --skip-build-benchmarks \<br>&gt;         --skip-test-cmark \<br>&gt;         --skip-test-lldb \<br>&gt;         --skip-test-swift \<br>&gt;         --skip-test-llbuild \<br>&gt;         --skip-test-swiftpm \<br>&gt;         --skip-test-xctest \<br>&gt;         --skip-test-foundation \<br>&gt;         --skip-test-libdispatch \<br>&gt;         --skip-test-linux \<br>&gt;         --skip-test-freebsd \<br>&gt;         --skip-test-cygwin \<br>&gt;         --skip-test-osx \<br>&gt;         --skip-test-ios-simulator \<br>&gt;         --skip-test-ios-host \<br>&gt;         --skip-test-tvos-simulator \<br>&gt;         --skip-test-tvos-host \<br>&gt;         --skip-test-watchos-simulator \<br>&gt;         --skip-test-watchos-host \<br>&gt;         --skip-test-benchmarks \<br>&gt;         --skip-test-optimized \<br>&gt;         --stdlib-deployment-targets=macosx-x86_64 \<br>&gt;         --swift-enable-ast-verifier=0 \<br>&gt;         --build-swift-examples=0 \<br>&gt;         --build-swift-stdlib-unittest-extra=0 \<br>&gt;         --build-swift-static-stdlib=1 \<br>&gt;         --compiler-vendor=apple \<br>&gt;         --swift-install-components=&quot;compiler;clang-builtin-headers;stdlib;sdk-overlay;license;sourcekit-xpc-service&quot; \<br>&gt;         --llvm-install-components=&quot;libclang;libclang-headers&quot; \<br>&gt;         --install-swift=1 \<br>&gt;         --install-llbuild=1 \<br>&gt;         --install-swiftpm=1 \<br>&gt;         --install-destdir=&quot;/&quot; \<br>&gt;         --install-lldb=1 \<br>&gt;         --toolchain-prefix=&quot;${TOOLCHAIN_PREFIX}&quot;<br>&gt;<br>&gt;<br>&gt; # doing by hand as the only other way to trigger this<br>&gt; # is by specifying --installable-package, which tars<br>&gt; # all installed products and is super slow<br>&gt;<br>&gt; DATE=$(date +%Y.%m.%d)<br>&gt; SWIFT_VERSION=$(&quot;${TOOLCHAIN_PREFIX}/usr/bin/swift&quot; --version | ruby -e &#39;ARGF.read =~ /Swift version (\d+\.\d(\.\d+)?(-.*?)?) /; print &quot;#{$1}\n&quot;&#39;)<br>&gt;<br>&gt; if [[ &quot;$SWIFT_VERSION&quot; == &quot;3.0-dev&quot; ]]; then<br>&gt;     SWIFT_VERSION=&quot;3.0.0-dev&quot;<br>&gt; fi<br>&gt;<br>&gt; VERSION=&quot;${SWIFT_VERSION}-${ALIAS}+${DATE}&quot;<br>&gt;<br>&gt; cat &gt; &quot;${TOOLCHAIN_PREFIX}/Info.plist&quot; &lt;&lt;EOF<br>&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;<br>&gt; &lt;plist version=&quot;1.0&quot;&gt;<br>&gt; &lt;dict&gt;<br>&gt; 	&lt;key&gt;Aliases&lt;/key&gt;<br>&gt; 	&lt;array&gt;<br>&gt; 		&lt;string&gt;${ALIAS}&lt;/string&gt;<br>&gt; 	&lt;/array&gt;<br>&gt; 	&lt;key&gt;CompatibilityVersion&lt;/key&gt;<br>&gt; 	&lt;integer&gt;2&lt;/integer&gt;<br>&gt; 	&lt;key&gt;CFBundleIdentifier&lt;/key&gt;<br>&gt; 	&lt;string&gt;org.swift.${SWIFT_VERSION}.${ALIAS}&lt;/string&gt;<br>&gt; 	&lt;key&gt;DisplayName&lt;/key&gt;<br>&gt; 	&lt;string&gt;Swift ${SWIFT_VERSION}.${ALIAS}+${DATE}&lt;/string&gt;<br>&gt; 	&lt;key&gt;ReportProblemURL&lt;/key&gt;<br>&gt; 	&lt;string&gt;https://bugs.swift.org/&lt;/string&gt;<br>&gt; 	&lt;key&gt;Version&lt;/key&gt;<br>&gt; 	&lt;string&gt;${DATE}&lt;/string&gt;<br>&gt;     &lt;key&gt;OverrideEnvironment&lt;/key&gt;<br>&gt; 	&lt;dict&gt;<br>&gt; 		&lt;key&gt;ENABLE_BITCODE&lt;/key&gt;<br>&gt; 		&lt;false/&gt;<br>&gt; 		&lt;key&gt;SWIFT_DISABLE_REQUIRED_ARCLITE&lt;/key&gt;<br>&gt; 		&lt;true/&gt;<br>&gt; 		&lt;key&gt;SWIFT_LINK_OBJC_RUNTIME&lt;/key&gt;<br>&gt; 		&lt;true/&gt;<br>&gt; 	&lt;/dict&gt;<br>&gt; &lt;/dict&gt;<br>&gt; &lt;/plist&gt;<br>&gt; EOF<br>&gt;<br>&gt;<br>&gt; # again, only way to trigger this otherwise is do a lengthy --installable-package step<br>&gt;<br>&gt; cp &quot;${SRCROOT}/swift/utils/swift-stdlib-tool-substitute&quot; &quot;${TOOLCHAIN_PREFIX}/usr/bin/swift-stdlib-tool&quot;<br>&gt;<br>&gt;<br>&gt;<br>&gt; You can find the script at:<br>&gt; https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365<br>&gt;<br>&gt; Regards,<br>&gt; Bhargav Gurlanka<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160602/92468aee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Building custom toolchain</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  2, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jun 2, 2016, at 10:59 AM, bhargav gurlanka &lt;bhargav.grlnk at gmail.com&gt; wrote:<br>&gt; <br>&gt; &gt; I always run this after every build<br>&gt; <br>&gt; If I understand you correctly, you first build swift and then run this script to create the toolchain right?  <br>&gt; <br>&gt; Are you using the `build-toolchain` script to build swift? I&#39;ve tried doing it sometime back and it included the testing also, which took a long time to complete. Is there a way to quicken the build (by disabling tests, incremental build, etc.,)?<br></p><p>No, part of the reason I developed that script is because I wanted to make a toolchain out of the build-script invocation I use for incremental development, which is this:<br>  ~/public/swift-project/swift/utils/build-script -R --llbuild --swiftpm<br></p><p>That works fine for iterative development, my &quot;null&quot; builds are about 5s. I run that with &quot;--tests&quot; if I want to also run all the tests (but often for my local iterative SwiftPM development I am just running the SwiftPM tests).<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; <br>&gt; Regards,<br>&gt; Bhargav Gurlanka<br>&gt; <br>&gt; On 2 June 2016 at 23:06, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt; FWIW, this:<br>&gt;   https://gist.github.com/ddunbar/598bf66952fba0e9d8aecc54995f018e &lt;https://gist.github.com/ddunbar/598bf66952fba0e9d8aecc54995f018e&gt;<br>&gt; is the script I currently use on OS X to get a working &quot;swift-dev.xctoolchain&quot; out of a built Swift. It isn&#39;t designed to work for anyone but me, but it should be easy to adapt.<br>&gt; <br>&gt; I always run this after every build, and then use `TOOLCHAINS=swift-dev swift build` (etc) to use the development compiler.<br>&gt; <br>&gt; My &quot;toolchain-based build process&quot; proposal will hopefully make this a no-op.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; On Jun 2, 2016, at 3:12 AM, bhargav gurlanka via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I&#39;m trying to build a custom toolchain, but it is failing with error: <br>&gt;&gt; <br>&gt;&gt; --- Installing swift ---<br>&gt;&gt; + env DESTDIR=// /usr/local/bin/cmake --build /Users/bhargavg/Documents/workspaces/xcode/github/apple/build/bhargavg/swift-macosx-x86_64 -- install<br>&gt;&gt; ninja: error: unknown target &#39;install&#39;<br>&gt;&gt; swift/utils/build-script: fatal error: command terminated with a non-zero exit status 1, aborting<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Script to build toolchain: <br>&gt;&gt; <br>&gt;&gt; #!/bin/bash<br>&gt;&gt; #<br>&gt;&gt; # Faster toolchain build: skips as much as possible.<br>&gt;&gt; #<br>&gt;&gt; # To use this toolchain from the command line:&quot;<br>&gt;&gt; #     export TOOLCHAINS=$(whoami)<br>&gt;&gt; #<br>&gt;&gt; # we build to the same prefix every time (instead of building<br>&gt;&gt; # to a versioned prefix) because every time the prefix changes<br>&gt;&gt; # *everything* rebuilds.<br>&gt;&gt; <br>&gt;&gt; set -e<br>&gt;&gt; trap &quot;exit;&quot; SIGINT SIGTERM<br>&gt;&gt; <br>&gt;&gt; SRCROOT=&quot;$HOME/Documents/workspaces/xcode/github/apple/&quot;<br>&gt;&gt; <br>&gt;&gt; ALIAS=$(whoami)<br>&gt;&gt; TOOLCHAIN_NAME=&quot;swift-${ALIAS}.xctoolchain&quot;<br>&gt;&gt; TOOLCHAIN_PREFIX=&quot;$HOME/Library/Developer/Toolchains/${TOOLCHAIN_NAME}&quot;<br>&gt;&gt; <br>&gt;&gt; export TOOLCHAINS=default<br>&gt;&gt; <br>&gt;&gt; if [[ $1 == &quot;--reconfigure&quot; ]]; then<br>&gt;&gt;     RECONFIGURE=&quot;--reconfigure&quot;<br>&gt;&gt; fi<br>&gt;&gt; <br>&gt;&gt; # so if anything is put in the wrong place we will *see* it<br>&gt;&gt; cd &quot;$HOME/Desktop&quot;<br>&gt;&gt; <br>&gt;&gt; &quot;$SRCROOT/swift/utils/build-script&quot; \<br>&gt;&gt;         --release \<br>&gt;&gt;         --llvm \<br>&gt;&gt;         --llbuild \<br>&gt;&gt;         --swiftpm \<br>&gt;&gt;         --build-subdir=&quot;${ALIAS}&quot; \<br>&gt;&gt;         --assertions \<br>&gt;&gt;         --no-swift-stdlib-assertions \<br>&gt;&gt;         --install-prefix=&quot;${TOOLCHAIN_PREFIX}/usr&quot; \<br>&gt;&gt;         --lldb \<br>&gt;&gt;         --darwin-xcrun-toolchain=mxcl \<br>&gt;&gt;         -- \<br>&gt;&gt;         --lldb-use-system-debugserver \<br>&gt;&gt;         ${RECONFIGURE} \<br>&gt;&gt;         --skip-ios \<br>&gt;&gt;         --skip-tvos \<br>&gt;&gt;         --skip-watchos \<br>&gt;&gt;         --skip-build-linux \<br>&gt;&gt;         --skip-build-freebsd \<br>&gt;&gt;         --skip-build-cygwin \<br>&gt;&gt;         --skip-build-ios \<br>&gt;&gt;         --skip-build-ios-device \<br>&gt;&gt;         --skip-build-ios-simulator \<br>&gt;&gt;         --skip-build-tvos \<br>&gt;&gt;         --skip-build-tvos-device \<br>&gt;&gt;         --skip-build-tvos-simulator \<br>&gt;&gt;         --skip-build-watchos \<br>&gt;&gt;         --skip-build-watchos-device \<br>&gt;&gt;         --skip-build-watchos-simulator \<br>&gt;&gt;         --skip-build-xctest \<br>&gt;&gt;         --skip-build-foundation \<br>&gt;&gt;         --skip-build-libdispatch \<br>&gt;&gt;         --skip-build-benchmarks \<br>&gt;&gt;         --skip-test-cmark \<br>&gt;&gt;         --skip-test-lldb \<br>&gt;&gt;         --skip-test-swift \<br>&gt;&gt;         --skip-test-llbuild \<br>&gt;&gt;         --skip-test-swiftpm \<br>&gt;&gt;         --skip-test-xctest \<br>&gt;&gt;         --skip-test-foundation \<br>&gt;&gt;         --skip-test-libdispatch \<br>&gt;&gt;         --skip-test-linux \<br>&gt;&gt;         --skip-test-freebsd \<br>&gt;&gt;         --skip-test-cygwin \<br>&gt;&gt;         --skip-test-osx \<br>&gt;&gt;         --skip-test-ios-simulator \<br>&gt;&gt;         --skip-test-ios-host \<br>&gt;&gt;         --skip-test-tvos-simulator \<br>&gt;&gt;         --skip-test-tvos-host \<br>&gt;&gt;         --skip-test-watchos-simulator \<br>&gt;&gt;         --skip-test-watchos-host \<br>&gt;&gt;         --skip-test-benchmarks \<br>&gt;&gt;         --skip-test-optimized \<br>&gt;&gt;         --stdlib-deployment-targets=macosx-x86_64 \<br>&gt;&gt;         --swift-enable-ast-verifier=0 \<br>&gt;&gt;         --build-swift-examples=0 \<br>&gt;&gt;         --build-swift-stdlib-unittest-extra=0 \<br>&gt;&gt;         --build-swift-static-stdlib=1 \<br>&gt;&gt;         --compiler-vendor=apple \<br>&gt;&gt;         --swift-install-components=&quot;compiler;clang-builtin-headers;stdlib;sdk-overlay;license;sourcekit-xpc-service&quot; \<br>&gt;&gt;         --llvm-install-components=&quot;libclang;libclang-headers&quot; \<br>&gt;&gt;         --install-swift=1 \<br>&gt;&gt;         --install-llbuild=1 \<br>&gt;&gt;         --install-swiftpm=1 \<br>&gt;&gt;         --install-destdir=&quot;/&quot; \<br>&gt;&gt;         --install-lldb=1 \<br>&gt;&gt;         --toolchain-prefix=&quot;${TOOLCHAIN_PREFIX}&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; # doing by hand as the only other way to trigger this<br>&gt;&gt; # is by specifying --installable-package, which tars<br>&gt;&gt; # all installed products and is super slow<br>&gt;&gt; <br>&gt;&gt; DATE=$(date +%Y.%m.%d)<br>&gt;&gt; SWIFT_VERSION=$(&quot;${TOOLCHAIN_PREFIX}/usr/bin/swift&quot; --version | ruby -e &#39;ARGF.read =~ /Swift version (\d+\.\d(\.\d+)?(-.*?)?) /; print &quot;#{$1}\n&quot;&#39;)<br>&gt;&gt; <br>&gt;&gt; if [[ &quot;$SWIFT_VERSION&quot; == &quot;3.0-dev&quot; ]]; then<br>&gt;&gt;     SWIFT_VERSION=&quot;3.0.0-dev&quot;<br>&gt;&gt; fi<br>&gt;&gt; <br>&gt;&gt; VERSION=&quot;${SWIFT_VERSION}-${ALIAS}+${DATE}&quot;<br>&gt;&gt; <br>&gt;&gt; cat &gt; &quot;${TOOLCHAIN_PREFIX}/Info.plist&quot; &lt;&lt;EOF<br>&gt;&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&gt;&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd &lt;http://www.apple.com/DTDs/PropertyList-1.0.dtd&gt;&quot;&gt;<br>&gt;&gt; &lt;plist version=&quot;1.0&quot;&gt;<br>&gt;&gt; &lt;dict&gt;<br>&gt;&gt; 	&lt;key&gt;Aliases&lt;/key&gt;<br>&gt;&gt; 	&lt;array&gt;<br>&gt;&gt; 		&lt;string&gt;${ALIAS}&lt;/string&gt;<br>&gt;&gt; 	&lt;/array&gt;<br>&gt;&gt; 	&lt;key&gt;CompatibilityVersion&lt;/key&gt;<br>&gt;&gt; 	&lt;integer&gt;2&lt;/integer&gt;<br>&gt;&gt; 	&lt;key&gt;CFBundleIdentifier&lt;/key&gt;<br>&gt;&gt; 	&lt;string&gt;org.swift.${SWIFT_VERSION}.${ALIAS}&lt;/string&gt;<br>&gt;&gt; 	&lt;key&gt;DisplayName&lt;/key&gt;<br>&gt;&gt; 	&lt;string&gt;Swift ${SWIFT_VERSION}.${ALIAS}+${DATE}&lt;/string&gt;<br>&gt;&gt; 	&lt;key&gt;ReportProblemURL&lt;/key&gt;<br>&gt;&gt; 	&lt;string&gt;https://bugs.swift.org/ &lt;https://bugs.swift.org/&gt;&lt;/string&gt;<br>&gt;&gt; 	&lt;key&gt;Version&lt;/key&gt;<br>&gt;&gt; 	&lt;string&gt;${DATE}&lt;/string&gt;<br>&gt;&gt;     &lt;key&gt;OverrideEnvironment&lt;/key&gt;<br>&gt;&gt; 	&lt;dict&gt;<br>&gt;&gt; 		&lt;key&gt;ENABLE_BITCODE&lt;/key&gt;<br>&gt;&gt; 		&lt;false/&gt;<br>&gt;&gt; 		&lt;key&gt;SWIFT_DISABLE_REQUIRED_ARCLITE&lt;/key&gt;<br>&gt;&gt; 		&lt;true/&gt;<br>&gt;&gt; 		&lt;key&gt;SWIFT_LINK_OBJC_RUNTIME&lt;/key&gt;<br>&gt;&gt; 		&lt;true/&gt;<br>&gt;&gt; 	&lt;/dict&gt;<br>&gt;&gt; &lt;/dict&gt;<br>&gt;&gt; &lt;/plist&gt;<br>&gt;&gt; EOF<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; # again, only way to trigger this otherwise is do a lengthy --installable-package step<br>&gt;&gt; <br>&gt;&gt; cp &quot;${SRCROOT}/swift/utils/swift-stdlib-tool-substitute&quot; &quot;${TOOLCHAIN_PREFIX}/usr/bin/swift-stdlib-tool&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; You can find the script at: https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365 &lt;https://gist.github.com/bhargavg/e40b2e7cfe3b34ca5decdb6531068365&gt;<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; Bhargav Gurlanka<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160602/7d87e8db/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
