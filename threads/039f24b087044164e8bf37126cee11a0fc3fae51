<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  7, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br></p><p>It sounds crazy, but it’s the nature of the while loop. A where clause in a while loop also has a different result than a where clause in a for loop.<br></p><p>&gt; filter() is and prefix(while:) will be available on all sequences. The for...in loop only traverses through sequences.<br>&gt; <br>&gt; The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br>&gt; <br>&gt; On Tue, Jun 7, 2016 at 06:20 Vladimir.S via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in `for`<br>&gt; &gt; loop would be very handy and helpful in some situations, it is a pair for<br>&gt; &gt; existed `where`, its meaning is obvious, and its existence can&#39;t depend on<br>&gt; &gt; existence of any method in collections. I&#39;d like to see a formal proposal<br>&gt; &gt; for this feature.<br>&gt; &gt; <br>&gt; &gt; On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt; &gt; &gt;I strongly disagree.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;Exchanging<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for result in results where result.value != .Warning while result.value !=<br>&gt; &gt; &gt;.Error {<br>&gt; &gt; &gt;/// ...<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for either<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt; &gt; &gt;$0.value != .Error })) {<br>&gt; &gt; &gt;/// ...<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;or<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;for result in results {<br>&gt; &gt; &gt;if result.value == .Warning { continue }<br>&gt; &gt; &gt;if result.value == .Error { break }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;/// ...<br>&gt; &gt; &gt;}<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t return<br>&gt; &gt; &gt;a lazy collection, but will recreate it, while the `where` will do<br>&gt; &gt; &gt;on-the-fly check.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;&gt;On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt; &gt; &gt;&gt;&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:swift-evolution at swift.org&gt;&gt;wrote:<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;Personally, given this discussion and the one about `where` in if and<br>&gt; &gt; &gt;&gt;while statements, I would not be opposed to elimination of `where` in<br>&gt; &gt; &gt;&gt;control statements altogether.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;My reasoning would be that words like filter and prefix unambiguously<br>&gt; &gt; &gt;&gt;indicate what happens to elements of a sequence for which the predicate<br>&gt; &gt; &gt;&gt;returns false, whereas words like where and while are ambiguous.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)<br>&gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;&gt;wrote:<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;I didn’t mean we should really get rid of the `where` clause, it’s<br>&gt; &gt; &gt;&gt;great. I guess the point I was trying to make is that we can use a<br>&gt; &gt; &gt;&gt;`where` clause with a `for` loop in Swift, despite the existence of<br>&gt; &gt; &gt;&gt;the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt; &gt; &gt;&gt;might be room for a `while` clause. I think it makes the code a lot<br>&gt; &gt; &gt;&gt;more readable, much like how `where` can make a `for` loop a lot more<br>&gt; &gt; &gt;&gt;readable than using `filter`.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;The burden of proof for adding new features is different from that<br>&gt; &gt; &gt;&gt;for taking away existing features.<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;If a feature doesn&#39;t yet exist, a successful proposal will show how<br>&gt; &gt; &gt;&gt;it provides additional and non-trivial utility. If a feature already<br>&gt; &gt; &gt;&gt;exists, a successful proposal to remove it will show how it is<br>&gt; &gt; &gt;&gt;harmful to the language or contrary to the direction in which it is<br>&gt; &gt; &gt;&gt;evolving.<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)<br>&gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;The functionality of the `where` clause in `for` loops also<br>&gt; &gt; &gt;&gt;already can be mimicked using `filter`. Wouldn’t we have to get ride<br>&gt; &gt; &gt;&gt;of the `where` clause by that logic?<br>&gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;The functionality being asked for here is already accepted for<br>&gt; &gt; &gt;&gt;inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt; &gt; &gt;&gt;(SE-0045):<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt; &gt; &gt;&gt;potential point of confusion.)<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt; &gt; &gt;&gt;condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt; &gt; &gt;&gt;evaluation of the loop stops. I get that this is technically true for<br>&gt; &gt; &gt;&gt;the `while` construct but I suggest that the only reason that it<br>&gt; &gt; &gt;&gt;works there is that &#39;stopping the first time that the condition isn&#39;t<br>&gt; &gt; &gt;&gt;met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt; &gt; &gt;&gt;each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt; &gt; &gt;&gt;Seitz&lt;tseitz42 at icloud.com(mailto:tseitz42 at icloud.com)<br>&gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt; &gt; &gt;&gt;that `where` makes sure a condition is met, while `until` makes sure<br>&gt; &gt; &gt;&gt;the condition isn’t met. I think `while` makes more sense because it<br>&gt; &gt; &gt;&gt;corresponds to `break` in the same way that `where` corresponds to<br>&gt; &gt; &gt;&gt;`continue`.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt; &gt; &gt;&gt;`where` look quite similar at a glance.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;-Thorsten<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt; &gt; &gt;&gt;`where` does.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt; &gt; &gt;&gt;condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt; &gt; &gt;&gt;`until` make more sense? `while`, to me, actually reads like it<br>&gt; &gt; &gt;&gt;should do what `where` does. In any case, whether it is `while` or<br>&gt; &gt; &gt;&gt;`where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt; &gt; &gt;&gt;condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt; &gt; &gt;&gt;sorted array and we already know that once the condition isn’t met,<br>&gt; &gt; &gt;&gt;it won’t be met either for subsequent elements. Another use case<br>&gt; &gt; &gt;&gt;could be an infinite sequence that we want to cut off somewhere<br>&gt; &gt; &gt;&gt;(which is simply not possible using a where clause).<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; &gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; The meaning of the proposed while is not at all a pair for where, since where clauses in while loops would do the same thing as while clauses in for loops. That&#39;s crazy.<br>&gt; <br>&gt; It sounds crazy, but it’s the nature of the while loop. A where clause in a while loop also has a different result than a where clause in a for loop.<br></p><p>The where_clause appears in the for in statement <br></p><p>for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause? code_block<br></p><p>It&#39;s syntactic sugar because the expression can be already be limited through functional chaining of some sort or another. At the same time, it&#39;s nice and pleasant to have `where` and I&#39;m not itching to throw it out. The same courtesy could be easily extend to `when` (because I don&#39;t really want to use the `while` keyword here, but I could easily be convinced otherwise because I don&#39;t have a strong stance either way):<br></p><p>for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause | when_clause)? code_block<br>when_clause : &#39;when&#39; expression<br></p><p>and again it could be nice and pleasant to have, although not necessary. The question comes down to how much does the language benefit by this sugar.<br></p><p>I&#39;d say that in both cases, combining chaining and statements is marginally less good than either using standalone chaining or statements without chaining. But as I say this, I know as a fact, I fully intend to use `sequence(_:, next:).take(while:)` with for0in statements, so I&#39;m starting from a hypocritical vantage point.<br></p><p>To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br></p><p>-- E<br>p.s. Sorry, wux<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/ef5f9b92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 03:00:00pm</p></header><div class="content"><p>It may be workable if you can have only one or the other, but mixing and<br>matching them as proposed above would be a world of hurt:<br></p><p>```<br>for foo in bar where condition1 while condition2 { ... }<br>```<br></p><p>If condition1 and condition2 both evaluate to true, then whether you<br>continue or break would depend on the relative order of where and while;<br>for generality, you would want to allow both `for...in...where...while` and<br>`for...in...while...where`, and likely `for...in...while...where...while`,<br>etc. There is nothing in the meaning of those words that would suggest that<br>`while...where` behaves differently from `where...while`, etc. This is why<br>words like &quot;break&quot; and &quot;continue&quot; are IMO far superior.<br></p><p><br>On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; The meaning of the proposed while is not at all a pair for where, since<br>&gt; where clauses in while loops would do the same thing as while clauses in<br>&gt; for loops. That&#39;s crazy.<br>&gt;<br>&gt;<br>&gt; It sounds crazy, but it’s the nature of the while loop. A where clause in<br>&gt; a while loop also has a different result than a where clause in a for loop.<br>&gt;<br>&gt;<br>&gt; The where_clause appears in the for in statement<br>&gt;<br>&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause?<br>&gt; code_block<br>&gt;<br>&gt; It&#39;s syntactic sugar because the expression can be already be limited<br>&gt; through functional chaining of some sort or another. At the same time, it&#39;s<br>&gt; nice and pleasant to have `where` and I&#39;m not itching to throw it out. The<br>&gt; same courtesy could be easily extend to `when` (because I don&#39;t really want<br>&gt; to use the `while` keyword here, but I could easily be convinced otherwise<br>&gt; because I don&#39;t have a strong stance either way):<br>&gt;<br>&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause |<br>&gt; when_clause)? code_block<br>&gt; when_clause : &#39;when&#39; expression<br>&gt;<br>&gt; and again it could be nice and pleasant to have, although not necessary.<br>&gt; The question comes down to how much does the language benefit by this sugar.<br>&gt;<br>&gt; I&#39;d say that in both cases, combining chaining and statements is<br>&gt; marginally *less good* than either using standalone chaining or<br>&gt; statements without chaining. But as I say this, I know as a fact, I fully<br>&gt; intend to use `sequence(_:, next:).take(while:)` with for0in statements, so<br>&gt; I&#39;m starting from a hypocritical vantage point.<br>&gt;<br>&gt; To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt;<br>&gt; -- E<br>&gt; p.s. Sorry, wux<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/d9d596e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 03:00:00pm</p></header><div class="content"><p>On Tue, Jun 7, 2016 at 3:24 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; It may be workable if you can have only one or the other, but mixing and<br>&gt; matching them as proposed above would be a world of hurt:<br>&gt;<br>&gt; ```<br>&gt; for foo in bar where condition1 while condition2 { ... }<br>&gt; ```<br>&gt;<br>&gt; If condition1 and condition2 both evaluate to true,<br>&gt;<br></p><p>s/true/false/<br></p><p><br>&gt; then whether you continue or break would depend on the relative order of<br>&gt; where and while; for generality, you would want to allow both<br>&gt; `for...in...where...while` and `for...in...while...where`, and likely<br>&gt; `for...in...while...where...while`, etc. There is nothing in the meaning of<br>&gt; those words that would suggest that `while...where` behaves differently<br>&gt; from `where...while`, etc. This is why words like &quot;break&quot; and &quot;continue&quot;<br>&gt; are IMO far superior.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Jun 7, 2016 at 2:34 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 7, 2016, at 1:16 PM, Tim Vermeulen via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; The meaning of the proposed while is not at all a pair for where, since<br>&gt;&gt; where clauses in while loops would do the same thing as while clauses in<br>&gt;&gt; for loops. That&#39;s crazy.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It sounds crazy, but it’s the nature of the while loop. A where clause in<br>&gt;&gt; a while loop also has a different result than a where clause in a for loop.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The where_clause appears in the for in statement<br>&gt;&gt;<br>&gt;&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression where_clause?<br>&gt;&gt; code_block<br>&gt;&gt;<br>&gt;&gt; It&#39;s syntactic sugar because the expression can be already be limited<br>&gt;&gt; through functional chaining of some sort or another. At the same time, it&#39;s<br>&gt;&gt; nice and pleasant to have `where` and I&#39;m not itching to throw it out. The<br>&gt;&gt; same courtesy could be easily extend to `when` (because I don&#39;t really want<br>&gt;&gt; to use the `while` keyword here, but I could easily be convinced otherwise<br>&gt;&gt; because I don&#39;t have a strong stance either way):<br>&gt;&gt;<br>&gt;&gt; for_in_statement : &#39;for&#39; &#39;case&#39;? pattern &#39;in&#39; expression (where_clause |<br>&gt;&gt; when_clause)? code_block<br>&gt;&gt; when_clause : &#39;when&#39; expression<br>&gt;&gt;<br>&gt;&gt; and again it could be nice and pleasant to have, although not necessary.<br>&gt;&gt; The question comes down to how much does the language benefit by this sugar.<br>&gt;&gt;<br>&gt;&gt; I&#39;d say that in both cases, combining chaining and statements is<br>&gt;&gt; marginally *less good* than either using standalone chaining or<br>&gt;&gt; statements without chaining. But as I say this, I know as a fact, I fully<br>&gt;&gt; intend to use `sequence(_:, next:).take(while:)` with for0in statements, so<br>&gt;&gt; I&#39;m starting from a hypocritical vantage point.<br>&gt;&gt;<br>&gt;&gt; To summarize, I&#39;m more +0.01 than I am -0.01 on this.<br>&gt;&gt;<br>&gt;&gt; -- E<br>&gt;&gt; p.s. Sorry, wux<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/7d45771b/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 02:00:00pm</p></header><div class="content"><p>On Tue, Jun 7, 2016 at 2:16 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; &gt; The meaning of the proposed while is not at all a pair for where, since<br>&gt; where clauses in while loops would do the same thing as while clauses in<br>&gt; for loops. That&#39;s crazy.<br>&gt;<br>&gt; It sounds crazy, but it’s the nature of the while loop. A where clause in<br>&gt; a while loop also has a different result than a where clause in a for loop.<br>&gt;<br></p><p>I know. And SE-0099 proposed to eliminate it, and I am very supportive of<br>that. For all of the reasons outlined in that conversation (including the<br>different behaviors in while and for loops), I arrive at the conclusion<br>that `where` is unsuitable for use in all condition statements and would<br>support its complete elimination from the language.<br></p><p><br>&gt;<br>&gt; &gt; filter() is and prefix(while:) will be available on all sequences. The<br>&gt; for...in loop only traverses through sequences.<br>&gt; &gt;<br>&gt; &gt; The meaning of the proposed while is not at all a pair for where, since<br>&gt; where clauses in while loops would do the same thing as while clauses in<br>&gt; for loops. That&#39;s crazy.<br>&gt; &gt;<br>&gt; &gt; On Tue, Jun 7, 2016 at 06:20 Vladimir.S via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in<br>&gt; `for`<br>&gt; &gt; &gt; loop would be very handy and helpful in some situations, it is a pair<br>&gt; for<br>&gt; &gt; &gt; existed `where`, its meaning is obvious, and its existence can&#39;t<br>&gt; depend on<br>&gt; &gt; &gt; existence of any method in collections. I&#39;d like to see a formal<br>&gt; proposal<br>&gt; &gt; &gt; for this feature.<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt; &gt; &gt; &gt;I strongly disagree.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;Exchanging<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for result in results where result.value != .Warning while<br>&gt; result.value !=<br>&gt; &gt; &gt; &gt;.Error {<br>&gt; &gt; &gt; &gt;/// ...<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for either<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt; &gt; &gt; &gt;$0.value != .Error })) {<br>&gt; &gt; &gt; &gt;/// ...<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;or<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;for result in results {<br>&gt; &gt; &gt; &gt;if result.value == .Warning { continue }<br>&gt; &gt; &gt; &gt;if result.value == .Error { break }<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;/// ...<br>&gt; &gt; &gt; &gt;}<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t<br>&gt; return<br>&gt; &gt; &gt; &gt;a lazy collection, but will recreate it, while the `where` will do<br>&gt; &gt; &gt; &gt;on-the-fly check.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;&gt;On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:<br>&gt; swift-evolution at swift.org&gt;&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;Personally, given this discussion and the one about `where` in if and<br>&gt; &gt; &gt; &gt;&gt;while statements, I would not be opposed to elimination of `where` in<br>&gt; &gt; &gt; &gt;&gt;control statements altogether.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;My reasoning would be that words like filter and prefix unambiguously<br>&gt; &gt; &gt; &gt;&gt;indicate what happens to elements of a sequence for which the<br>&gt; predicate<br>&gt; &gt; &gt; &gt;&gt;returns false, whereas words like where and while are ambiguous.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen&lt;tvermeulen at me.com(mailto:<br>&gt; tvermeulen at me.com)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;I didn’t mean we should really get rid of the `where` clause, it’s<br>&gt; &gt; &gt; &gt;&gt;great. I guess the point I was trying to make is that we can use a<br>&gt; &gt; &gt; &gt;&gt;`where` clause with a `for` loop in Swift, despite the existence of<br>&gt; &gt; &gt; &gt;&gt;the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt; &gt; &gt; &gt;&gt;might be room for a `while` clause. I think it makes the code a lot<br>&gt; &gt; &gt; &gt;&gt;more readable, much like how `where` can make a `for` loop a lot more<br>&gt; &gt; &gt; &gt;&gt;readable than using `filter`.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;The burden of proof for adding new features is different from that<br>&gt; &gt; &gt; &gt;&gt;for taking away existing features.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;If a feature doesn&#39;t yet exist, a successful proposal will show how<br>&gt; &gt; &gt; &gt;&gt;it provides additional and non-trivial utility. If a feature already<br>&gt; &gt; &gt; &gt;&gt;exists, a successful proposal to remove it will show how it is<br>&gt; &gt; &gt; &gt;&gt;harmful to the language or contrary to the direction in which it is<br>&gt; &gt; &gt; &gt;&gt;evolving.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com<br>&gt; (mailto:tvermeulen at me.com)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;The functionality of the `where` clause in `for` loops also<br>&gt; &gt; &gt; &gt;&gt;already can be mimicked using `filter`. Wouldn’t we have to get ride<br>&gt; &gt; &gt; &gt;&gt;of the `where` clause by that logic?<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;The functionality being asked for here is already accepted for<br>&gt; &gt; &gt; &gt;&gt;inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt; &gt; &gt; &gt;&gt;(SE-0045):<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;`for element in array.prefix(while: { someCondition($0) }) { ...<br>&gt; }`<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt; &gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:<br>&gt; swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt; &gt; &gt; &gt;&gt;potential point of confusion.)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt; &gt; &gt; &gt;&gt;condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt; &gt; &gt; &gt;&gt;evaluation of the loop stops. I get that this is technically true for<br>&gt; &gt; &gt; &gt;&gt;the `while` construct but I suggest that the only reason that it<br>&gt; &gt; &gt; &gt;&gt;works there is that &#39;stopping the first time that the condition isn&#39;t<br>&gt; &gt; &gt; &gt;&gt;met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt; &gt; &gt; &gt;&gt;each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt; &gt; &gt; &gt;&gt;Seitz&lt;tseitz42 at icloud.com(mailto:tseitz42 at icloud.com)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt; &gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:<br>&gt; swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt; &gt; &gt; &gt;&gt;that `where` makes sure a condition is met, while `until` makes sure<br>&gt; &gt; &gt; &gt;&gt;the condition isn’t met. I think `while` makes more sense because it<br>&gt; &gt; &gt; &gt;&gt;corresponds to `break` in the same way that `where` corresponds to<br>&gt; &gt; &gt; &gt;&gt;`continue`.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt; &gt; &gt; &gt;&gt;`where` look quite similar at a glance.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;-Thorsten<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt; &gt; &gt; &gt;&gt;`where` does.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt; &gt; &gt; &gt;&gt;condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt; &gt; &gt; &gt;&gt;`until` make more sense? `while`, to me, actually reads like it<br>&gt; &gt; &gt; &gt;&gt;should do what `where` does. In any case, whether it is `while` or<br>&gt; &gt; &gt; &gt;&gt;`where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt; &gt; &gt; &gt;&gt;swift-evolution&lt;swift-evolution at swift.org(mailto:<br>&gt; swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt; &gt; &gt; &gt;&gt;condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt; &gt; &gt; &gt;&gt;sorted array and we already know that once the condition isn’t met,<br>&gt; &gt; &gt; &gt;&gt;it won’t be met either for subsequent elements. Another use case<br>&gt; &gt; &gt; &gt;&gt;could be an infinite sequence that we want to cut off somewhere<br>&gt; &gt; &gt; &gt;&gt;(which is simply not possible using a where clause).<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt; &gt; &gt; &gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:<br>&gt; swift-evolution at swift.org&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&lt;mailto:<br>&gt; swift-evolution at swift.org&gt;<br>&gt; &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; &gt; &gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/7184a120/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
