<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>February  7, 2016 at 09:00:00am</p></header><div class="content"><p>The problem with nested functions is that they can make the function containing them very long and hard to read.<br></p><p>So the idea is to separate the body of a nested function from where it is declared.<br></p><p>For example:<br></p><p>func f() {<br>  var x:Int<br>  func g(y:String) {<br>    print(“x=\(x), y=\(y)&quot;)<br>  }  <br>  ...<br>}<br></p><p>could be refactored as:<br></p><p>func f() {<br>  var x:Int<br>  func g(y:String) // function body elsewhere to avoid clutter in f<br>  ...<br>}<br></p><p>func f().g(y:String) {<br>    print(“x=\(x), y=\(y)&quot;)<br>}<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February  7, 2016 at 09:00:00pm</p></header><div class="content"><p>Is there a language that implements it this way?  <br></p><p>I actually don’t much like it, most of my functions are fairly small and I actually like it the way it is.<br></p><p>If you are using an IDE or editor it is easy to collapse the function if it is not what you want to focus on.  <br></p><p><br>&gt; On 2016-02-07, at 21:32:19, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt; <br>&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt;  }  <br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; could be refactored as:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; func f().g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt; }  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>February  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 9:57 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; Is there a language that implements it this way?  <br>&gt; <br>&gt; I actually don’t much like it, most of my functions are fairly small and I actually like it the way it is.<br>&gt; <br>&gt; If you are using an IDE or editor it is easy to collapse the function if it is not what you want to focus on.  <br>&gt; <br></p><p>Another problem with nested functions is that the indentation keeps increasing thus leaving less room for the code. This proposal also avoids that problem.<br></p><p>&gt; <br>&gt;&gt; On 2016-02-07, at 21:32:19, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt;&gt; <br>&gt;&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt; func f() {<br>&gt;&gt; var x:Int<br>&gt;&gt; func g(y:String) {<br>&gt;&gt;   print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt; }  <br>&gt;&gt; ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; could be refactored as:<br>&gt;&gt; <br>&gt;&gt; func f() {<br>&gt;&gt; var x:Int<br>&gt;&gt; func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;&gt; ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func f().g(y:String) {<br>&gt;&gt;   print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt; }  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February  7, 2016 at 10:00:00pm</p></header><div class="content"><p>If indentation is a big problem …. either you have a very small monitor, or you may have too much conditional code :p<br></p><p>If your functions are concise and you don’t create big spaghetti conditional code - I would not think indentation would be a great problem.<br></p><p>Usually I create functions inside functions for duplicate code within that function — and even without that de-duplication a function should not be too large, so once you reduplicate the code should be …. pretty short.<br></p><p><br>&gt; On 2016-02-07, at 21:59:43, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 7, 2016, at 9:57 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is there a language that implements it this way?  <br>&gt;&gt; <br>&gt;&gt; I actually don’t much like it, most of my functions are fairly small and I actually like it the way it is.<br>&gt;&gt; <br>&gt;&gt; If you are using an IDE or editor it is easy to collapse the function if it is not what you want to focus on.  <br>&gt;&gt; <br>&gt; <br>&gt; Another problem with nested functions is that the indentation keeps increasing thus leaving less room for the code. This proposal also avoids that problem.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2016-02-07, at 21:32:19, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt; func g(y:String) {<br>&gt;&gt;&gt;  print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt; }  <br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; could be refactored as:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt; func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func f().g(y:String) {<br>&gt;&gt;&gt;  print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt; }  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>February  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 10:04 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; If indentation is a big problem …. either you have a very small monitor, or you may have too much conditional code :p<br>&gt; <br>&gt; If your functions are concise and you don’t create big spaghetti conditional code - I would not think indentation would be a great problem.<br></p><p>Nested functions allow you to reduce the length of parameter lists. And so you may end up with a very long function containing many nested functions while trying to reduce parameter list size.<br></p><p>&gt; <br>&gt; Usually I create functions inside functions for duplicate code within that function — and even without that de-duplication a function should not be too large, so once you reduplicate the code should be …. pretty short.<br>&gt; <br>&gt; <br>&gt;&gt; On 2016-02-07, at 21:59:43, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 7, 2016, at 9:57 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a language that implements it this way?  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I actually don’t much like it, most of my functions are fairly small and I actually like it the way it is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you are using an IDE or editor it is easy to collapse the function if it is not what you want to focus on.  <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Another problem with nested functions is that the indentation keeps increasing thus leaving less room for the code. This proposal also avoids that problem.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 2016-02-07, at 21:32:19, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt;&gt; func g(y:String) {<br>&gt;&gt;&gt;&gt; print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt;&gt; }  <br>&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; could be refactored as:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt;&gt; func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func f().g(y:String) {<br>&gt;&gt;&gt;&gt; print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt;&gt; }  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February  8, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Le 7 févr. 2016 à 16:06, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 7, 2016, at 10:04 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If indentation is a big problem …. either you have a very small monitor, or you may have too much conditional code :p<br>&gt;&gt; <br>&gt;&gt; If your functions are concise and you don’t create big spaghetti conditional code - I would not think indentation would be a great problem.<br>&gt; <br>&gt; Nested functions allow you to reduce the length of parameter lists. And so you may end up with a very long function containing many nested functions while trying to reduce parameter list size.<br>&gt; <br></p><p>An other way to reduce parameter list and nested function is to define a class (or struct) that declare the parameters as ivar, and the netted function that have to be split as methods.<br></p><p>&gt;&gt; <br>&gt;&gt; Usually I create functions inside functions for duplicate code within that function — and even without that de-duplication a function should not be too large, so once you reduplicate the code should be …. pretty short.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2016-02-07, at 21:59:43, Amir Michail &lt;amichail at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Feb 7, 2016, at 9:57 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there a language that implements it this way?  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I actually don’t much like it, most of my functions are fairly small and I actually like it the way it is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you are using an IDE or editor it is easy to collapse the function if it is not what you want to focus on.  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Another problem with nested functions is that the indentation keeps increasing thus leaving less room for the code. This proposal also avoids that problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 2016-02-07, at 21:32:19, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt;&gt;&gt; func g(y:String) {<br>&gt;&gt;&gt;&gt;&gt; print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt;&gt;&gt; }  <br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; could be refactored as:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func f() {<br>&gt;&gt;&gt;&gt;&gt; var x:Int<br>&gt;&gt;&gt;&gt;&gt; func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func f().g(y:String) {<br>&gt;&gt;&gt;&gt;&gt; print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt;&gt;&gt;&gt; }  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  7, 2016 at 06:00:00pm</p></header><div class="content"><p>IMHO, that seems like more of an editor issue than a language issue.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 7, 2016, at 06:59, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Another problem with nested functions is that the indentation keeps increasing thus leaving less room for the code. This proposal also avoids that problem.<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9ae1f2ed10d2ef77cce06bbb5a2dcf7e?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Alex Hoppen</string> &lt;alex at ateamer.de&gt;<p>February  7, 2016 at 04:00:00pm</p></header><div class="content"><p>I don’t think this fits well in the current design of Swift. It reminds me a lot of (Obj-)C-style headers, which Swift abandoned. <br></p><p>- Alex<br></p><p><br>&gt; On 07 Feb 2016, at 15:32, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt; <br>&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt;  }  <br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; could be refactored as:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; func f().g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt; }  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9b667f2c07faf9d4f65628effe475382?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Amir Michail</string> &lt;amichail at gmail.com&gt;<p>February  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 7, 2016, at 10:00 AM, Alex Hoppen &lt;alex at ateamer.de&gt; wrote:<br>&gt; <br>&gt; I don’t think this fits well in the current design of Swift. It reminds me a lot of (Obj-)C-style headers, which Swift abandoned. <br>&gt; <br></p><p>The nested function bodies would need to occur in the same file.<br></p><p>&gt; - Alex<br>&gt; <br>&gt; <br>&gt;&gt; On 07 Feb 2016, at 15:32, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt;&gt; <br>&gt;&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt; func f() {<br>&gt;&gt; var x:Int<br>&gt;&gt; func g(y:String) {<br>&gt;&gt;   print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt; }  <br>&gt;&gt; ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; could be refactored as:<br>&gt;&gt; <br>&gt;&gt; func f() {<br>&gt;&gt; var x:Int<br>&gt;&gt; func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;&gt; ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func f().g(y:String) {<br>&gt;&gt;   print(“x=\(x), y=\(y)&quot;)<br>&gt;&gt; }  <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Proposal: optionally define nested functions elsewhere</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>February  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; Le 7 févr. 2016 à 09:32, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; The problem with nested functions is that they can make the function containing them very long and hard to read.<br>&gt; <br>&gt; So the idea is to separate the body of a nested function from where it is declared.<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt;  }  <br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; could be refactored as:<br>&gt; <br>&gt; func f() {<br>&gt;  var x:Int<br>&gt;  func g(y:String) // function body elsewhere to avoid clutter in f<br>&gt;  ...<br>&gt; }<br>&gt; <br>&gt; func f().g(y:String) {<br>&gt;    print(“x=\(x), y=\(y)&quot;)<br>&gt; }  <br></p><p>I see two issues with this.<br></p><p>People might mistakenly think from the definition that they could call directly:<br>f().g(&quot;blah&quot;)<br>which they cannot, as g() can only be called within f(); g() is a private function of f() and used variables defined within f().<br></p><p>When changing the code, like renaming variable x, it make it a little harder to find all instance of x to properly asses the impact of the change. A function variable change need to be analyzed as a file scoped change.<br></p><p>Dany<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
