<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>July  4, 2016 at 11:00:00pm</p></header><div class="content"><p>Hi everyone!<br></p><p>I’m converting some code to Swift 3 and got this issue?<br></p><p><br></p><p><br></p><p>Does anybody know what’s going on?<br></p><p>Here’s the code, before and after conversion:<br></p><p><br>// Swift 2.2<br>extension Int {<br></p><p>    // Repeat a block of code from `self` up to a limit<br>    func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt; Void) {<br></p><p>        for _ in self.stride(to: upper, by: step) {<br>            closure()<br>        }<br>    }<br>}<br></p><p>// Swift 3<br>extension Int {<br></p><p>    // Repeat a block of code from `self` up to a limit<br>    func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br></p><p>        for _ in stride(from: self, to: upper, by: step) {<br>            closure()<br>        }<br>    }<br>}<br></p><p><br>// Usage<br>1.up(to: 10, by: 2) {<br>    print(&quot;Hi!&quot;)<br>}<br></p><p><br>Best,<br></p><p>— A<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160704/a5308ba6/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2016-07-04 at 11.30.45 PM.png<br>Type: image/png<br>Size: 54973 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160704/a5308ba6/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  5, 2016 at 01:00:00pm</p></header><div class="content"><p>In Swift 3,<br></p><p>func stride&lt;T : Strideable &lt;apple-reference-documentation://hsYF4ATMnE&gt;&gt;(<br>from start: T, to end: T, by stride: T.Stride) -&gt; StrideTo<br>&lt;apple-reference-documentation://hs9b7RwjpY&gt;&lt;T&gt;<br></p><p>Int does not conform to Strideable.<br></p><p>Adopted By<br></p><p>CGFloat<br>Decimal<br>Double<br>Float<br>Float80<br>String.UTF16View.Index<br>UnsafeMutablePointer<br>UnsafePointer<br></p><p>​In Swift 2.2,<br></p><p>@warn_unused_result func stride(to *end*: Self, by *stride*: Self.Stride)<br>-&gt; StrideTo<br>&lt;file:///Users/zhaoxin/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.OSX.docset/Contents/Resources/Documents/documentation/Swift/Reference/Swift_StrideTo_Structure/index.html#//apple_ref/swift/struct/s:Vs8StrideTo&gt;<br>&lt;Self&gt;<br></p><p>It uses Self, which means the type of the variable, instead of T.<br></p><p>Zhaoxin<br></p><p>On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone!<br>&gt;<br>&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; Does anybody know what’s going on?<br>&gt;<br>&gt; Here’s the code, before and after conversion:<br>&gt;<br>&gt;<br>&gt; // Swift 2.2<br>&gt; extension Int {<br>&gt;<br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt; Void)<br>&gt; {<br>&gt;<br>&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; // Swift 3<br>&gt; extension Int {<br>&gt;<br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt;<br>&gt; Void) {<br>&gt;<br>&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; // Usage<br>&gt; 1.up(to: 10, by: 2) {<br>&gt;     print(&quot;Hi!&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Best,<br>&gt;<br>&gt; — A<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/0ec7bce3/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2016-07-04 at 11.30.45 PM.png<br>Type: image/png<br>Size: 54973 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/0ec7bce3/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Int conforms to Strideable byway of Integer &lt;- SignedInteger &lt;- Int (not<br>exactly sure how it will be once the integer proposal is implemented but it<br>will still be strideable).<br></p><p>-Shawn<br>On Mon, Jul 4, 2016 at 10:38 PM Zhao Xin via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; In Swift 3,<br>&gt;<br>&gt; func stride&lt;T : Strideable&gt;(from start: T, to end: T, by stride:<br>&gt; T.Stride) -&gt; StrideTo&lt;T&gt;<br>&gt;<br>&gt; Int does not conform to Strideable.<br>&gt;<br>&gt; Adopted By<br>&gt;<br>&gt; CGFloat<br>&gt; Decimal<br>&gt; Double<br>&gt; Float<br>&gt; Float80<br>&gt; String.UTF16View.Index<br>&gt; UnsafeMutablePointer<br>&gt; UnsafePointer<br>&gt;<br>&gt; ​In Swift 2.2,<br>&gt;<br>&gt; @warn_unused_result func stride(to *end*: Self, by *stride*: Self.Stride)<br>&gt; -&gt; StrideTo&lt;Self&gt;<br>&gt;<br>&gt; It uses Self, which means the type of the variable, instead of T.<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi everyone!<br>&gt;&gt;<br>&gt;&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Does anybody know what’s going on?<br>&gt;&gt;<br>&gt;&gt; Here’s the code, before and after conversion:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; // Swift 2.2<br>&gt;&gt; extension Int {<br>&gt;&gt;<br>&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt;<br>&gt;&gt; Void) {<br>&gt;&gt;<br>&gt;&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt;&gt;             closure()<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // Swift 3<br>&gt;&gt; extension Int {<br>&gt;&gt;<br>&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt;<br>&gt;&gt; Void) {<br>&gt;&gt;<br>&gt;&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt;&gt;             closure()<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; // Usage<br>&gt;&gt; 1.up(to: 10, by: 2) {<br>&gt;&gt;     print(&quot;Hi!&quot;)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt;<br>&gt;&gt; — A<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/b5fdd79b/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2016-07-04 at 11.30.45 PM.png<br>Type: image/png<br>Size: 54973 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/b5fdd79b/attachment.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>July  6, 2016 at 12:00:00am</p></header><div class="content"><p>You are right. Int conforms to Strideable.<br></p><p>Now it seams like a bug. As in a playground. below are code works and<br>doesn&#39;t work<br></p><p>extension Int {<br></p><p>    func test() {<br></p><p>        let temp = stride(from:1, to:10, by:2) // error<br></p><p>    }<br></p><p>}<br></p><p><br>extension Float {<br></p><p>    func test() {<br></p><p>        let temp = stride(from:1, to:10, by:2) // error<br></p><p>    }<br></p><p>}<br></p><p><br>extension String {<br></p><p>    func test() {<br></p><p>        let temp = stride(from:1, to:10, by:2) // works<br></p><p>    }<br></p><p>}<br></p><p><br>class A {<br></p><p><br></p><p>}<br></p><p><br>extension A {<br></p><p>    func test() {<br></p><p>        let temp = stride(from:1, to:10, by:2) // works<br></p><p>    }<br></p><p>}<br></p><p><br>struct B {<br></p><p><br></p><p>}<br></p><p><br>extension B {<br></p><p>    func test() {<br></p><p>        let temp = stride(from:1, to:10, by:2) // works<br></p><p>    }<br></p><p>}<br></p><p><br>func test() {<br></p><p>    let temp = stride(from:1, to:10, by:2) //works<br></p><p>}<br></p><p><br>let temp = stride(from:1, to:10, by:2) // works<br></p><p><br>​It is nothing bug a bug?​<br></p><p><br>​Zhaoxin​<br></p><p><br></p><p>On Tue, Jul 5, 2016 at 10:16 PM, Shawn Erickson &lt;shawnce at gmail.com&gt; wrote:<br></p><p>&gt; Int conforms to Strideable byway of Integer &lt;- SignedInteger &lt;- Int (not<br>&gt; exactly sure how it will be once the integer proposal is implemented but it<br>&gt; will still be strideable).<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt; On Mon, Jul 4, 2016 at 10:38 PM Zhao Xin via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; In Swift 3,<br>&gt;&gt;<br>&gt;&gt; func stride&lt;T : Strideable&gt;(from start: T, to end: T, by stride:<br>&gt;&gt; T.Stride) -&gt; StrideTo&lt;T&gt;<br>&gt;&gt;<br>&gt;&gt; Int does not conform to Strideable.<br>&gt;&gt;<br>&gt;&gt; Adopted By<br>&gt;&gt;<br>&gt;&gt; CGFloat<br>&gt;&gt; Decimal<br>&gt;&gt; Double<br>&gt;&gt; Float<br>&gt;&gt; Float80<br>&gt;&gt; String.UTF16View.Index<br>&gt;&gt; UnsafeMutablePointer<br>&gt;&gt; UnsafePointer<br>&gt;&gt;<br>&gt;&gt; ​In Swift 2.2,<br>&gt;&gt;<br>&gt;&gt; @warn_unused_result func stride(to *end*: Self, by *stride*: Self.Stride)<br>&gt;&gt; -&gt; StrideTo&lt;Self&gt;<br>&gt;&gt;<br>&gt;&gt; It uses Self, which means the type of the variable, instead of T.<br>&gt;&gt;<br>&gt;&gt; Zhaoxin<br>&gt;&gt;<br>&gt;&gt; On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Hi everyone!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Does anybody know what’s going on?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Here’s the code, before and after conversion:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Swift 2.2<br>&gt;&gt;&gt; extension Int {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;&gt;&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt;<br>&gt;&gt;&gt; Void) {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt;&gt;&gt;             closure()<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Swift 3<br>&gt;&gt;&gt; extension Int {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;&gt;&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt;<br>&gt;&gt;&gt; Void) {<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt;&gt;&gt;             closure()<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Usage<br>&gt;&gt;&gt; 1.up(to: 10, by: 2) {<br>&gt;&gt;&gt;     print(&quot;Hi!&quot;)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; — A<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160706/4c85ef9a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f3e3f9871fd088e42df4509aa724367?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Adriano Ferreira</string> &lt;adriano.ferreira at me.com&gt;<p>July  5, 2016 at 12:00:00pm</p></header><div class="content"><p>Any suggestions on how to work around it or to fix it?<br></p><p><br></p><p>Thanks in advance!<br></p><p>— A<br></p><p>&gt; On Jul 5, 2016, at 12:00 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; You are right. Int conforms to Strideable.<br>&gt; <br>&gt; Now it seams like a bug. As in a playground. below are code works and doesn&#39;t work<br>&gt; <br>&gt; extension Int {<br>&gt;     func test() {<br>&gt;         let temp = stride(from:1, to:10, by:2) // error<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; extension Float {<br>&gt;     func test() {<br>&gt;         let temp = stride(from:1, to:10, by:2) // error<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; extension String {<br>&gt;     func test() {<br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; class A {<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; extension A {<br>&gt;     func test() {<br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; struct B {<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; extension B {<br>&gt;     func test() {<br>&gt;         let temp = stride(from:1, to:10, by:2) // works<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; func test() {<br>&gt;     let temp = stride(from:1, to:10, by:2) //works<br>&gt; }<br>&gt; <br>&gt; let temp = stride(from:1, to:10, by:2) // works<br>&gt; <br>&gt; ​It is nothing bug a bug?​<br>&gt; <br>&gt; ​Zhaoxin​<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Jul 5, 2016 at 10:16 PM, Shawn Erickson &lt;shawnce at gmail.com &lt;mailto:shawnce at gmail.com&gt;&gt; wrote:<br>&gt; Int conforms to Strideable byway of Integer &lt;- SignedInteger &lt;- Int (not exactly sure how it will be once the integer proposal is implemented but it will still be strideable).<br>&gt; <br>&gt; -Shawn<br>&gt; <br>&gt; On Mon, Jul 4, 2016 at 10:38 PM Zhao Xin via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; In Swift 3, <br>&gt; <br>&gt; func stride&lt;T : Strideable &lt;&gt;&gt;(from start: T, to end: T, by stride: T.Stride) -&gt; StrideTo &lt;&gt;&lt;T&gt;<br>&gt; <br>&gt; Int does not conform to Strideable. <br>&gt; <br>&gt; Adopted By<br>&gt; <br>&gt; CGFloat<br>&gt; Decimal<br>&gt; Double<br>&gt; Float<br>&gt; Float80<br>&gt; String.UTF16View.Index<br>&gt; UnsafeMutablePointer<br>&gt; UnsafePointer<br>&gt; <br>&gt; ​In Swift 2.2,<br>&gt; <br>&gt; @warn_unused_result func stride(to end: Self, by stride: Self.Stride) -&gt; StrideTo &lt;&gt;&lt;Self&gt;<br>&gt; <br>&gt; It uses Self, which means the type of the variable, instead of T.<br>&gt; <br>&gt; Zhaoxin<br>&gt; <br>&gt; On Tue, Jul 5, 2016 at 11:41 AM, Adriano Ferreira via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone!<br>&gt; <br>&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Does anybody know what’s going on?<br>&gt; <br>&gt; Here’s the code, before and after conversion:<br>&gt; <br>&gt; <br>&gt; // Swift 2.2<br>&gt; extension Int {<br>&gt; <br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt; Void) {<br>&gt; <br>&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; // Swift 3<br>&gt; extension Int {<br>&gt; <br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>&gt; <br>&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; // Usage<br>&gt; 1.up(to: 10, by: 2) {<br>&gt;     print(&quot;Hi!&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; — A<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/ae4f273e/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2016-07-04 at 11.30.45 PM.png<br>Type: image/png<br>Size: 54973 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160705/ae4f273e/attachment-0001.png&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Cannot invoke &#39;stride&#39; with an argument list of type &#39;(from: Int, to: Int, by: Int)&#39;</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July  5, 2016 at 01:00:00pm</p></header><div class="content"><p>This is a known bug. The definition of &#39;stride&#39; inside &#39;Int&#39; for migration from Swift 2 causes the compiler to fail to find the global function. https://bugs.swift.org/browse/SR-1798<br></p><p>-Joe<br></p><p>&gt; On Jul 4, 2016, at 8:41 PM, Adriano Ferreira via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I’m converting some code to Swift 3 and got this issue?<br>&gt; <br>&gt; <br>&gt; &lt;Screen Shot 2016-07-04 at 11.30.45 PM.png&gt;<br>&gt; <br>&gt; <br>&gt; Does anybody know what’s going on?<br>&gt; <br>&gt; Here’s the code, before and after conversion:<br>&gt; <br>&gt; <br>&gt; // Swift 2.2<br>&gt; extension Int {<br>&gt; <br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, @noescape closure: () -&gt; Void) {<br>&gt; <br>&gt;         for _ in self.stride(to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; // Swift 3<br>&gt; extension Int {<br>&gt; <br>&gt;     // Repeat a block of code from `self` up to a limit<br>&gt;     func up(to upper: Int, by step: Int = 1, _ closure: @noescape () -&gt; Void) {<br>&gt; <br>&gt;         for _ in stride(from: self, to: upper, by: step) {<br>&gt;             closure()<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; // Usage<br>&gt; 1.up(to: 10, by: 2) {<br>&gt;     print(&quot;Hi!&quot;)<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; — A<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
