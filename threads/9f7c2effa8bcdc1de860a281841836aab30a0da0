<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  1, 2016 at 04:00:00pm</p></header><div class="content"><p>on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;d like to add my voice to the many that are in favor of this proposal.<br>&gt;<br>&gt; I agree with the general spirit of the guidelines and I think they<br>&gt; cover the most important points. They can always be expanded in the<br>&gt; future if experience deems it necessary but I&#39;d rather have people<br>&gt; actually read and use the document than be put off by length and<br>&gt; complexity.<br>&gt;<br>&gt; Various minor points<br>&gt;<br>&gt; * Will these guidelines become part of &quot;The Swift Programming<br>&gt; Language&quot;? Personally I would support that.<br></p><p>Interesting idea.  I think we may need the ability to update them on a<br>different schedule form the book.  Perhaps the book should point at<br>them, though(?)<br></p><p>&gt; * I&#39;m in favor of lowerCaseEnumCases<br>&gt;<br>&gt; * var htmlElement = HTMLElement<br>&gt;<br>&gt; * I don&#39;t think stripping the &quot;Type&quot; suffix from protocols is a clear<br>&gt; win, mostly a change of tradeoffs (which have already been discussed<br>&gt; extensively).<br>&gt; Ultimately I would be fine with either approach.<br>&gt;<br>&gt; * One small idea I&#39;d like to throw out there is whether the guidelines<br>&gt; should contain a small note that one might look to the standard<br>&gt; library for inspiration as well. It will have many examples for<br>&gt; following the guidelines as presented and might offer some helpful<br>&gt; precedent in cases where one is still unsure. In a way this is<br>&gt; probably obvious but it might not hurt to mention?<br></p><p>Well, maybe.  If you mention all the things that wouldn&#39;t hurt to<br>mention... it ends up hurting :-) Trying to “omit needless words,”<br>here. :-)<br></p><p>&gt; * On the guidelines page the bullet point &quot;When the first argument is<br>&gt; defaulted, it should have a distinct argument label.&quot; is wrapped in a<br>&gt; link (without a target). This is probably unintentional.<br></p><p>Actually, there&#39;s no link!  This looks like a .css error, thanks.  I&#39;ve<br>alerted the CSS-master.<br></p><p>&gt; And a bit of rambling regarding the property vs method discussion:<br>&gt; The current situation seems to be that there are a lot of conflicting<br>&gt; &quot;rules&quot; (most with exceptions attached) that need to be weighed<br>&gt; against each other, with the decision coming down to &quot;collective gut<br>&gt; feeling&quot;. <br></p><p>Unfortunately, I agree with that assessment.<br></p><p>&gt; It don&#39;t see a way to formalize them without breaking at least some<br>&gt; existing conventions and probably some heated discussions ;-). I also<br>&gt; wonder if that would actually produce better APIs on the whole or<br>&gt; simply produce clear rules for the sake of having clear rules with<br>&gt; APIs suffering in some cases...<br></p><p>Aside from the issues I&#39;ve mentioned before of non-uniformity and wasted<br>cycles bikeshedding trivial choices, there&#39;s another problem with not<br>saying anything in this *particular* case...<br></p><p>Despite the Cocoa guidelines never explicitly stating that anything<br>*must* be a property, there is apparently an unwritten but very strong<br>rule among Cocoa developers that &quot;unless the guidelines say it can&#39;t be<br>a property, it must be a property.&quot;  People coming from that perspective<br>have looked at individual methods (in the standard library for example)<br>and insisted with great conviction that they ought to be properties.<br>However, if you ask them to look at the whole body of APIs, they come to<br>different conclusions (e.g. that APIs producing transformed<br>representations of collections, such as &quot;x.reverse(),&quot; ought to be<br>methods, not properties).  If nothing else, to preserve *my* sanity, I<br>need a guideline I can refer to.  ;-) Even if it has some fuzzy edges,<br>that&#39;s better than nothing.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/78dda0d326b6c8eff7c2679f55346a7f?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Alex Migicovsky</string> &lt;migi at apple.com&gt;<p>February  1, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Feb 1, 2016, at 4:26 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;d like to add my voice to the many that are in favor of this proposal.<br>&gt;&gt; <br>&gt;&gt; I agree with the general spirit of the guidelines and I think they<br>&gt;&gt; cover the most important points. They can always be expanded in the<br>&gt;&gt; future if experience deems it necessary but I&#39;d rather have people<br>&gt;&gt; actually read and use the document than be put off by length and<br>&gt;&gt; complexity.<br>&gt;&gt; <br>&gt;&gt; Various minor points<br>&gt;&gt; <br>&gt;&gt; * Will these guidelines become part of &quot;The Swift Programming<br>&gt;&gt; Language&quot;? Personally I would support that.<br>&gt; <br>&gt; Interesting idea.  I think we may need the ability to update them on a<br>&gt; different schedule form the book.  Perhaps the book should point at<br>&gt; them, though(?)<br>&gt; <br>&gt;&gt; * I&#39;m in favor of lowerCaseEnumCases<br>&gt;&gt; <br>&gt;&gt; * var htmlElement = HTMLElement<br>&gt;&gt; <br>&gt;&gt; * I don&#39;t think stripping the &quot;Type&quot; suffix from protocols is a clear<br>&gt;&gt; win, mostly a change of tradeoffs (which have already been discussed<br>&gt;&gt; extensively).<br>&gt;&gt; Ultimately I would be fine with either approach.<br>&gt;&gt; <br>&gt;&gt; * One small idea I&#39;d like to throw out there is whether the guidelines<br>&gt;&gt; should contain a small note that one might look to the standard<br>&gt;&gt; library for inspiration as well. It will have many examples for<br>&gt;&gt; following the guidelines as presented and might offer some helpful<br>&gt;&gt; precedent in cases where one is still unsure. In a way this is<br>&gt;&gt; probably obvious but it might not hurt to mention?<br>&gt; <br>&gt; Well, maybe.  If you mention all the things that wouldn&#39;t hurt to<br>&gt; mention... it ends up hurting :-) Trying to “omit needless words,”<br>&gt; here. :-)<br>&gt; <br>&gt;&gt; * On the guidelines page the bullet point &quot;When the first argument is<br>&gt;&gt; defaulted, it should have a distinct argument label.&quot; is wrapped in a<br>&gt;&gt; link (without a target). This is probably unintentional.<br>&gt; <br>&gt; Actually, there&#39;s no link!  This looks like a .css error, thanks.  I&#39;ve<br>&gt; alerted the CSS-master.<br>&gt; <br>&gt;&gt; And a bit of rambling regarding the property vs method discussion:<br>&gt;&gt; The current situation seems to be that there are a lot of conflicting<br>&gt;&gt; &quot;rules&quot; (most with exceptions attached) that need to be weighed<br>&gt;&gt; against each other, with the decision coming down to &quot;collective gut<br>&gt;&gt; feeling&quot;. <br>&gt; <br>&gt; Unfortunately, I agree with that assessment.<br>&gt; <br>&gt;&gt; It don&#39;t see a way to formalize them without breaking at least some<br>&gt;&gt; existing conventions and probably some heated discussions ;-). I also<br>&gt;&gt; wonder if that would actually produce better APIs on the whole or<br>&gt;&gt; simply produce clear rules for the sake of having clear rules with<br>&gt;&gt; APIs suffering in some cases...<br>&gt; <br>&gt; Aside from the issues I&#39;ve mentioned before of non-uniformity and wasted<br>&gt; cycles bikeshedding trivial choices, there&#39;s another problem with not<br>&gt; saying anything in this *particular* case...<br>&gt; <br>&gt; Despite the Cocoa guidelines never explicitly stating that anything<br>&gt; *must* be a property, there is apparently an unwritten but very strong<br>&gt; rule among Cocoa developers that &quot;unless the guidelines say it can&#39;t be<br>&gt; a property, it must be a property.&quot;  People coming from that perspective<br>&gt; have looked at individual methods (in the standard library for example)<br>&gt; and insisted with great conviction that they ought to be properties.<br>&gt; However, if you ask them to look at the whole body of APIs, they come to<br>&gt; different conclusions (e.g. that APIs producing transformed<br>&gt; representations of collections, such as &quot;x.reverse(),&quot; ought to be<br>&gt; methods, not properties).  If nothing else, to preserve *my* sanity, I<br>&gt; need a guideline I can refer to.  ;-) Even if it has some fuzzy edges,<br>&gt; that&#39;s better than nothing.<br></p><p><br>Just wanted to clarify the rule a bit. The strong rule in Cocoa APIs is that if a zero-arg method is idempotent it should be a property. In my opinion this has proven to be a rule that provides enough value at call sites, but is also a straightforward guideline to follow. I can see the perspective of APIs like `reversed` being a method and not a property, but then it really does muddy the waters for coming up with a simple to follow but useful rule. Tradeoffs… :-)<br></p><p>- Alex<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/076e9c9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  2, 2016 at 08:00:00am</p></header><div class="content"><p>on Mon Feb 01 2016, Alex Migicovsky &lt;migi-AT-apple.com&gt; wrote:<br></p><p>&gt;&gt; On Feb 1, 2016, at 4:26 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org<br>&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to add my voice to the many that are in favor of this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with the general spirit of the guidelines and I think they<br>&gt;&gt;&gt; cover the most important points. They can always be expanded in the<br>&gt;&gt;&gt; future if experience deems it necessary but I&#39;d rather have people<br>&gt;&gt;&gt; actually read and use the document than be put off by length and<br>&gt;&gt;&gt; complexity.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Various minor points<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Will these guidelines become part of &quot;The Swift Programming<br>&gt;&gt;&gt; Language&quot;? Personally I would support that.<br>&gt;&gt; <br>&gt;&gt; Interesting idea.  I think we may need the ability to update them on a<br>&gt;&gt; different schedule form the book.  Perhaps the book should point at<br>&gt;&gt; them, though(?)<br>&gt;&gt; <br>&gt;&gt;&gt; * I&#39;m in favor of lowerCaseEnumCases<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * var htmlElement = HTMLElement<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * I don&#39;t think stripping the &quot;Type&quot; suffix from protocols is a clear<br>&gt;&gt;&gt; win, mostly a change of tradeoffs (which have already been discussed<br>&gt;&gt;&gt; extensively).<br>&gt;&gt;&gt; Ultimately I would be fine with either approach.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * One small idea I&#39;d like to throw out there is whether the guidelines<br>&gt;&gt;&gt; should contain a small note that one might look to the standard<br>&gt;&gt;&gt; library for inspiration as well. It will have many examples for<br>&gt;&gt;&gt; following the guidelines as presented and might offer some helpful<br>&gt;&gt;&gt; precedent in cases where one is still unsure. In a way this is<br>&gt;&gt;&gt; probably obvious but it might not hurt to mention?<br>&gt;&gt; <br>&gt;&gt; Well, maybe.  If you mention all the things that wouldn&#39;t hurt to<br>&gt;&gt; mention... it ends up hurting :-) Trying to “omit needless words,”<br>&gt;&gt; here. :-)<br>&gt;&gt; <br>&gt;&gt;&gt; * On the guidelines page the bullet point &quot;When the first argument is<br>&gt;&gt;&gt; defaulted, it should have a distinct argument label.&quot; is wrapped in a<br>&gt;&gt;&gt; link (without a target). This is probably unintentional.<br>&gt;&gt; <br>&gt;&gt; Actually, there&#39;s no link!  This looks like a .css error, thanks.  I&#39;ve<br>&gt;&gt; alerted the CSS-master.<br>&gt;&gt; <br>&gt;&gt;&gt; And a bit of rambling regarding the property vs method discussion:<br>&gt;&gt;&gt; The current situation seems to be that there are a lot of conflicting<br>&gt;&gt;&gt; &quot;rules&quot; (most with exceptions attached) that need to be weighed<br>&gt;&gt;&gt; against each other, with the decision coming down to &quot;collective gut<br>&gt;&gt;&gt; feeling&quot;. <br>&gt;&gt; <br>&gt;&gt; Unfortunately, I agree with that assessment.<br>&gt;&gt; <br>&gt;&gt;&gt; It don&#39;t see a way to formalize them without breaking at least some<br>&gt;&gt;&gt; existing conventions and probably some heated discussions ;-). I also<br>&gt;&gt;&gt; wonder if that would actually produce better APIs on the whole or<br>&gt;&gt;&gt; simply produce clear rules for the sake of having clear rules with<br>&gt;&gt;&gt; APIs suffering in some cases...<br>&gt;&gt; <br>&gt;&gt; Aside from the issues I&#39;ve mentioned before of non-uniformity and wasted<br>&gt;&gt; cycles bikeshedding trivial choices, there&#39;s another problem with not<br>&gt;&gt; saying anything in this *particular* case...<br>&gt;&gt; <br>&gt;&gt; Despite the Cocoa guidelines never explicitly stating that anything<br>&gt;&gt; *must* be a property, there is apparently an unwritten but very strong<br>&gt;&gt; rule among Cocoa developers that &quot;unless the guidelines say it can&#39;t be<br>&gt;&gt; a property, it must be a property.&quot;  People coming from that perspective<br>&gt;&gt; have looked at individual methods (in the standard library for example)<br>&gt;&gt; and insisted with great conviction that they ought to be properties.<br>&gt;&gt; However, if you ask them to look at the whole body of APIs, they come to<br>&gt;&gt; different conclusions (e.g. that APIs producing transformed<br>&gt;&gt; representations of collections, such as &quot;x.reverse(),&quot; ought to be<br>&gt;&gt; methods, not properties).  If nothing else, to preserve *my* sanity, I<br>&gt;&gt; need a guideline I can refer to.  ;-) Even if it has some fuzzy edges,<br>&gt;&gt; that&#39;s better than nothing.<br>&gt;<br>&gt; Just wanted to clarify the rule a bit. The strong rule in Cocoa APIs<br>&gt; is that if a zero-arg method is idempotent it should be a property. <br></p><p>...unless it falls into one of the other categories (such as “copy” and<br>autorelease methods, methods which initiate an action and return a<br>result, etc.) that makes it ineligible to be a property.<br></p><p>&gt; In my opinion this has proven to be a rule that provides enough value<br>&gt; at call sites, but is also a straightforward guideline to follow. I<br>&gt; can see the perspective of APIs like `reversed` being a method and not<br>&gt; a property, but then it really does muddy the waters for coming up<br>&gt; with a simple to follow but useful rule. Tradeoffs… :-)<br>&gt;<br>&gt; - Alex<br></p><p>-- <br>-Dave<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b660eecceda60138f137d353b8289925?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Janosch Hildebrand</string> &lt;jnosh at jnosh.com&gt;<p>February  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 02 Feb 2016, at 01:26, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Mon Feb 01 2016, Janosch Hildebrand &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I&#39;d like to add my voice to the many that are in favor of this proposal.<br>&gt;&gt; <br>&gt;&gt; I agree with the general spirit of the guidelines and I think they<br>&gt;&gt; cover the most important points. They can always be expanded in the<br>&gt;&gt; future if experience deems it necessary but I&#39;d rather have people<br>&gt;&gt; actually read and use the document than be put off by length and<br>&gt;&gt; complexity.<br>&gt;&gt; <br>&gt;&gt; Various minor points<br>&gt;&gt; <br>&gt;&gt; * Will these guidelines become part of &quot;The Swift Programming<br>&gt;&gt; Language&quot;? Personally I would support that.<br>&gt; <br>&gt; Interesting idea.  I think we may need the ability to update them on a<br>&gt; different schedule form the book.  Perhaps the book should point at<br>&gt; them, though(?)<br></p><p>That would also be great. Although I still think including it in the book would<br>be more effective. Not everyone is going to follow a link and split their attention<br>between two documents...<br>Would it be possible to include the guidelines and preface them with a note that<br>the most up-to date version can always be found on the web with the link there?<br></p><p>&gt;&gt; * I&#39;m in favor of lowerCaseEnumCases<br>&gt;&gt; <br>&gt;&gt; * var htmlElement = HTMLElement<br>&gt;&gt; <br>&gt;&gt; * I don&#39;t think stripping the &quot;Type&quot; suffix from protocols is a clear<br>&gt;&gt; win, mostly a change of tradeoffs (which have already been discussed<br>&gt;&gt; extensively).<br>&gt;&gt; Ultimately I would be fine with either approach.<br>&gt;&gt; <br>&gt;&gt; * One small idea I&#39;d like to throw out there is whether the guidelines<br>&gt;&gt; should contain a small note that one might look to the standard<br>&gt;&gt; library for inspiration as well. It will have many examples for<br>&gt;&gt; following the guidelines as presented and might offer some helpful<br>&gt;&gt; precedent in cases where one is still unsure. In a way this is<br>&gt;&gt; probably obvious but it might not hurt to mention?<br>&gt; <br>&gt; Well, maybe.  If you mention all the things that wouldn&#39;t hurt to<br>&gt; mention... it ends up hurting :-) Trying to “omit needless words,”<br>&gt; here. :-)<br></p><p>Fair enough :-)<br></p><p>&gt;&gt; * On the guidelines page the bullet point &quot;When the first argument is<br>&gt;&gt; defaulted, it should have a distinct argument label.&quot; is wrapped in a<br>&gt;&gt; link (without a target). This is probably unintentional.<br>&gt; <br>&gt; Actually, there&#39;s no link!  This looks like a .css error, thanks.  I&#39;ve<br>&gt; alerted the CSS-master.<br>&gt; <br>&gt;&gt; And a bit of rambling regarding the property vs method discussion:<br>&gt;&gt; The current situation seems to be that there are a lot of conflicting<br>&gt;&gt; &quot;rules&quot; (most with exceptions attached) that need to be weighed<br>&gt;&gt; against each other, with the decision coming down to &quot;collective gut<br>&gt;&gt; feeling&quot;. <br>&gt; <br>&gt; Unfortunately, I agree with that assessment.<br>&gt; <br>&gt;&gt; It don&#39;t see a way to formalize them without breaking at least some<br>&gt;&gt; existing conventions and probably some heated discussions ;-). I also<br>&gt;&gt; wonder if that would actually produce better APIs on the whole or<br>&gt;&gt; simply produce clear rules for the sake of having clear rules with<br>&gt;&gt; APIs suffering in some cases...<br>&gt; <br>&gt; Aside from the issues I&#39;ve mentioned before of non-uniformity and wasted<br>&gt; cycles bikeshedding trivial choices, there&#39;s another problem with not<br>&gt; saying anything in this *particular* case...<br>&gt; <br>&gt; Despite the Cocoa guidelines never explicitly stating that anything<br>&gt; *must* be a property, there is apparently an unwritten but very strong<br>&gt; rule among Cocoa developers that &quot;unless the guidelines say it can&#39;t be<br>&gt; a property, it must be a property.&quot;  People coming from that perspective<br>&gt; have looked at individual methods (in the standard library for example)<br>&gt; and insisted with great conviction that they ought to be properties.<br>&gt; However, if you ask them to look at the whole body of APIs, they come to<br>&gt; different conclusions (e.g. that APIs producing transformed<br>&gt; representations of collections, such as &quot;x.reverse(),&quot; ought to be<br>&gt; methods, not properties).  If nothing else, to preserve *my* sanity, I<br>&gt; need a guideline I can refer to.  ;-) Even if it has some fuzzy edges,<br>&gt; that&#39;s better than nothing.<br></p><p>I certainly agree that that should be the goal (to have basic guidelines that is,<br>although preserving your sanity is a close second ;-))<br></p><p>What is the plan in this area; will this be a future discussion/proposal to amend<br>the guidelines?<br></p><p>I was wondering whether it might make sense to have a separate thread collect<br>&quot;rules&quot; and guidelines in this area from the community to see what&#39;s out there<br>in the hope of eventually paring them down to some useful essentials...<br></p><p>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>- Janosch<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160202/9fe52b4c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
