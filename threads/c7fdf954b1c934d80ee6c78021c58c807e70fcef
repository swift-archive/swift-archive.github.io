<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 23, 2016 at 12:00:00pm</p></header><div class="content"><p>on Fri Jan 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 22, 2016, at 5:26 PM, Michael Wells via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Sat, Jan 23, 2016 at 12:00 AM, David Owens II via<br>&gt;<br>&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Compensate For Weak Type Information as needed to clarify a parameter’s role.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Especially when a parameter type is NSObject, Any, AnyObject, or a<br>&gt;&gt;&gt;&gt; fundamental type such Int or String, type information and context<br>&gt;&gt;&gt;&gt; at the point of use may not fully convey intent. In this example,<br>&gt;&gt;&gt;&gt; the declaration may be clear, but the use site is vague:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func add(observer: NSObject, for keyPath: String)<br>&gt;&gt;&gt;&gt; grid.add(self, for: graphics) // vague<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To restore clarity, precede each weakly-typed parameter with a noun describing its role:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func addObserver(_ observer: NSObject, forKeyPath path: String)<br>&gt;&gt;&gt;&gt; grid.addObserver(self, forKeyPath: graphics) // clear<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Where this rule feels clumsy to me is in code such as<br>&gt;&gt; <br>&gt;&gt; func loginWithUsername(username: String, password: String) -&gt; Bool<br>&gt;&gt; <br>&gt;&gt; vs.<br>&gt;&gt; <br>&gt;&gt; func login(username: String, password: String) -&gt; Bool<br>&gt;&gt; <br>&gt;&gt; But maybe it just takes some time to get used to the style.<br>&gt;<br>&gt; Consider an exception rule:<br>&gt;<br>&gt; Prefer external names for the first parameter when the natural<br>&gt; semantic relationship between the parameters is stronger than their<br>&gt; relation to the operation. So<br>&gt;<br>&gt; login(username: String, password:String)<br>&gt; moveTo(x: Double, y: Double)<br></p><p>used as<br></p><p>    login(&quot;dave&quot;, password: secret)<br>    moveTo(width, y: height)<br>?<br></p><p>I can&#39;t imagine you meant the latter one.<br></p><p>&gt; but <br>&gt;<br>&gt; addLineToPoint(p1: CGPoint, withThickness: CGFloat)<br></p><p>   addLineToPoint(origin, withThickness: CGFloat)<br></p><p>?<br></p><p>I don&#39;t see what salient information the word &quot;Point&quot; is adding here.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 1:21 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jan 22 2016, Erica Sadun &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 5:26 PM, Michael Wells via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Jan 23, 2016 at 12:00 AM, David Owens II via<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Compensate For Weak Type Information as needed to clarify a parameter’s role.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Especially when a parameter type is NSObject, Any, AnyObject, or a<br>&gt;&gt;&gt;&gt;&gt; fundamental type such Int or String, type information and context<br>&gt;&gt;&gt;&gt;&gt; at the point of use may not fully convey intent. In this example,<br>&gt;&gt;&gt;&gt;&gt; the declaration may be clear, but the use site is vague:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func add(observer: NSObject, for keyPath: String)<br>&gt;&gt;&gt;&gt;&gt; grid.add(self, for: graphics) // vague<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To restore clarity, precede each weakly-typed parameter with a noun describing its role:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func addObserver(_ observer: NSObject, forKeyPath path: String)<br>&gt;&gt;&gt;&gt;&gt; grid.addObserver(self, forKeyPath: graphics) // clear<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Where this rule feels clumsy to me is in code such as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func loginWithUsername(username: String, password: String) -&gt; Bool<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; vs.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func login(username: String, password: String) -&gt; Bool<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But maybe it just takes some time to get used to the style.<br>&gt;&gt; <br>&gt;&gt; Consider an exception rule:<br>&gt;&gt; <br>&gt;&gt; Prefer external names for the first parameter when the natural<br>&gt;&gt; semantic relationship between the parameters is stronger than their<br>&gt;&gt; relation to the operation. So<br>&gt;&gt; <br>&gt;&gt; login(username: String, password:String)<br>&gt;&gt; moveTo(x: Double, y: Double)<br>&gt; <br>&gt; used as<br>&gt; <br>&gt;    login(&quot;dave&quot;, password: secret)<br>&gt;    moveTo(width, y: height)<br>&gt; ?<br>&gt; <br>&gt; I can&#39;t imagine you meant the latter one.<br>&gt; <br>&gt;&gt; but <br>&gt;&gt; <br>&gt;&gt; addLineToPoint(p1: CGPoint, withThickness: CGFloat)<br>&gt; <br>&gt;   addLineToPoint(origin, withThickness: CGFloat)<br>&gt; <br>&gt; ?<br>&gt; <br>&gt; I don&#39;t see what salient information the word &quot;Point&quot; is adding here.<br>&gt; <br></p><p>Dave,<br></p><p>I typoed on the second and I was insufficiently clear on my point. Trying again:<br></p><p>Prefer external names for the first parameter when the natural<br>semantic relationship between the parameters is stronger than their<br>relation to the operation. <br></p><p>For example, the following calls use labels for the first parameter:<br></p><p>login(userName: &quot;blah&quot;, password: &quot;...&quot;)<br>moveTo(x: 50.0, y: 30.0)<br></p><p>This example is contrary to Swift&#39;s normal naming scheme which integrates the<br>first argument into the function or method name, for example:<br></p><p>loginWithUserName(&quot;blah&quot;, password: &quot;...&quot;)<br>moveToX(50.0, y: 30.0)<br></p><p>The coupling between x and y, username and password, (and yes it is a judgement call) <br>should be considered as a reason to employ an external label.<br></p><p>I had included the following as a counter example:<br></p><p>addLineToPoint(p1, withWidth: 25.0)<br></p><p>In this call, the point and width have no natural or compelling relationship and there&#39;s no reason to<br>create an external label for the first argument. This example follows the standard<br>Swift call approach.<br></p><p>Differentiate related calls whose implementations are distinguished by their<br>parameters, as you would with initializers, using first parameter labels.<br></p><p>Instead of loginWithUserName(&quot;blah&quot;, password: &quot;...&quot;) and loginWithCredential(myCredential),<br>prefer:<br></p><p>login(userName: &quot;blah&quot;, password: &quot;...&quot;)<br>login(credential: myCredential)<br></p><p>And to reply to another point raised in-thread:<br></p><p>When working with standard library calls, retain APIs even if they are<br>not sufficiently clear from a Swift design perspective rather than wrapping-the-cat<br>to provide a Swift interface that doesn&#39;t really exist. (As the call is just a redirection.)<br></p><p>For example, prefer<br></p><p>let x = pow(2.0, 5.0)<br></p><p>to<br></p><p>let x = raise(2.0, toPower: 5.0)<br></p><p>In this example, the two arguments for pow are not specified as this call is sourced<br>externally and follows the naming convention for math.h.<br></p><p>-- Erica<br></p><p><br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160123/c5b5c21d/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
