<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 27, 2016 at 12:00:00am</p></header><div class="content"><p>on Tue Jan 26 2016, Dave &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 25, 2016, at 07:40, Radosław Pietruszewski via<br>&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; == Removed Type from protocol names ==<br>&gt;&gt; <br>&gt;&gt; Perhaps I’ve missed some discussion about this and I don’t see the<br>&gt;&gt; context, but I’m not sure this is a positive change.<br>&gt;&gt; <br>&gt;&gt; I fear this might be confusing in practice, at least in some<br>&gt;&gt; contexts. For example, there&#39;s nothing signifying that &quot;Boolean&quot; or<br>&gt;&gt; &quot;Integer&quot; are protocols and not actual types. Same with “Sequence”,<br>&gt;&gt; “OptionSet”, etc. Perhaps it doesn&#39;t matter because everyone will<br>&gt;&gt; naturally go for `Bool`, `Int`, and `Array` anyway. But I can<br>&gt;&gt; imagine a lot of confusion if someone tried that anyway, or perhaps<br>&gt;&gt; saw that in the autocompletion, or the standard library browser<br>&gt;&gt; (with no intention of using the protocol).<br>&gt;&gt; <br>&gt;&gt; I’m all for removing unnecessary noise and verbosity, but I think I<br>&gt;&gt; would err on explicitness side here. It seemed like the -able/-Type<br>&gt;&gt; convention did a good job disambiguating types you can actually<br>&gt;&gt; instantiate from protocols, with very little “verbosity cost”.<br>&gt;<br>&gt; Same here… I like -Type for protocols that can only be used a generic<br>&gt; constraint, and -able/-ible for protocols that can be “concrete”<br>&gt; types.<br></p><p>But that&#39;s not how they&#39;re used.  I&#39;d have to rename Equatable and<br>Comparable to follow that convention.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 27, 2016 at 01:00:00am</p></header><div class="content"><p>Huh… Yeah, you’re right. I guess I saw “CollectionType” and “CustomStringConvertible” or something and made a connection that wasn’t there.<br>Well, FWIW, that convention (plus the occasional “HasNoun”, and -ableType for constraining the element of custom collections) tends to work well for me.<br></p><p>What’s been the deciding factor between -Type and -able so far?<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jan 27, 2016, at 00:49, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jan 26 2016, Dave &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 25, 2016, at 07:40, Radosław Pietruszewski via<br>&gt;&gt;&gt; swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; == Removed Type from protocol names ==<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Perhaps I’ve missed some discussion about this and I don’t see the<br>&gt;&gt;&gt; context, but I’m not sure this is a positive change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I fear this might be confusing in practice, at least in some<br>&gt;&gt;&gt; contexts. For example, there&#39;s nothing signifying that &quot;Boolean&quot; or<br>&gt;&gt;&gt; &quot;Integer&quot; are protocols and not actual types. Same with “Sequence”,<br>&gt;&gt;&gt; “OptionSet”, etc. Perhaps it doesn&#39;t matter because everyone will<br>&gt;&gt;&gt; naturally go for `Bool`, `Int`, and `Array` anyway. But I can<br>&gt;&gt;&gt; imagine a lot of confusion if someone tried that anyway, or perhaps<br>&gt;&gt;&gt; saw that in the autocompletion, or the standard library browser<br>&gt;&gt;&gt; (with no intention of using the protocol).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m all for removing unnecessary noise and verbosity, but I think I<br>&gt;&gt;&gt; would err on explicitness side here. It seemed like the -able/-Type<br>&gt;&gt;&gt; convention did a good job disambiguating types you can actually<br>&gt;&gt;&gt; instantiate from protocols, with very little “verbosity cost”.<br>&gt;&gt; <br>&gt;&gt; Same here… I like -Type for protocols that can only be used a generic<br>&gt;&gt; constraint, and -able/-ible for protocols that can be “concrete”<br>&gt;&gt; types.<br>&gt; <br>&gt; But that&#39;s not how they&#39;re used.  I&#39;d have to rename Equatable and<br>&gt; Comparable to follow that convention.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
