<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 16, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue Feb 16 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Not that I like it, but<br>&gt; insertNonIntersectingRemoveIntersectingContentsOf(_:) would be the<br>&gt; stylistically consistent way to convey the right sense.<br></p><p>Did you see Ricardo Parada&#39;s suggestions?  I thought some of those were<br>better.<br></p><p>&gt; On Tue, Feb 16, 2016 at 10:22 AM Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Mon Feb 15 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; I think you&#39;ve ended up with the right approach, and I understand the<br>&gt;&gt; need to move on, but...<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;     /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt; &gt;&gt;     /// EXISTING: exclusiveOr<br>&gt;&gt; &gt;&gt;     @warn_unused_result<br>&gt;&gt; &gt;&gt;     func invertingIntersection(other: Self) -&gt; Self<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;     /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt; &gt;&gt;     /// EXISTING: exclusiveOrInPlace<br>&gt;&gt; &gt;&gt;     mutating func invertIntersection(other: Self)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m not quite happy with these. I don&#39;t like that the mutating form of<br>&gt;&gt; &gt; `intersection` is `intersect`, but the mutating form of<br>&gt;&gt; &gt; `invertingIntersection` is `invertIntersection`—it seems like both<br>&gt;&gt; &gt; methods should change the &quot;intersection&quot; part.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Have you considered going the opposite direction and combining the verb<br>&gt;&gt; &quot;intersect&quot; with the adjective &quot;inverse&quot;?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt; &gt;     /// EXISTING: exclusiveOr<br>&gt;&gt; &gt;     @warn_unused_result<br>&gt;&gt; &gt;     func inverseIntersection(other: Self) -&gt; Self<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;     /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt; &gt;     /// EXISTING: exclusiveOrInPlace<br>&gt;&gt; &gt;     mutating func inverseIntersect(other: Self)<br>&gt;&gt; &gt;     // or perhaps even `inverselyIntersect` so it&#39;s an adverb<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I wouldn&#39;t be surprised if you did, because I could see you trying to<br>&gt;&gt; &gt; dodge the adverb problem, but I thought it was worth asking.<br>&gt;&gt;<br>&gt;&gt; These names all have the wrong sense, including the ones that were<br>&gt;&gt; decided upon.  “Inverting the intersection” doesn&#39;t imply that elements<br>&gt;&gt; not in the intersection will be merged, which is what happens in a<br>&gt;&gt; symmetric difference.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 17, 2016 at 02:00:00am</p></header><div class="content"><p>Richard’s suggestions is amount the better ones:<br></p><p>Of the symdiff ones I think I would lean towards:<br></p><p>let symmetricDifference = 	a.unionMinusIntersection(b)	// (a ∪ b) \ (a ∩ b) == a △ b<br></p><p>It is descriptive enough for those not familiar with the name “symmetricDifference”. <br></p><p>The fact that he keeps mutable names completely separate is a plus.<br></p><p><br></p><p>&gt; On 2016-02-17, at 2:16:24, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Feb 16 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Not that I like it, but<br>&gt;&gt; insertNonIntersectingRemoveIntersectingContentsOf(_:) would be the<br>&gt;&gt; stylistically consistent way to convey the right sense.<br>&gt; <br>&gt; Did you see Ricardo Parada&#39;s suggestions?  I thought some of those were<br>&gt; better.<br>&gt; <br>&gt;&gt; On Tue, Feb 16, 2016 at 10:22 AM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon Feb 15 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think you&#39;ve ended up with the right approach, and I understand the<br>&gt;&gt;&gt; need to move on, but...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt;&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt;&gt;&gt;&gt;&gt;    func invertingIntersection(other: Self) -&gt; Self<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt;&gt;&gt;&gt;&gt;    mutating func invertIntersection(other: Self)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m not quite happy with these. I don&#39;t like that the mutating form of<br>&gt;&gt;&gt;&gt; `intersection` is `intersect`, but the mutating form of<br>&gt;&gt;&gt;&gt; `invertingIntersection` is `invertIntersection`—it seems like both<br>&gt;&gt;&gt;&gt; methods should change the &quot;intersection&quot; part.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Have you considered going the opposite direction and combining the verb<br>&gt;&gt;&gt; &quot;intersect&quot; with the adjective &quot;inverse&quot;?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt;&gt;&gt;&gt;    func inverseIntersection(other: Self) -&gt; Self<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt;&gt;&gt;&gt;    mutating func inverseIntersect(other: Self)<br>&gt;&gt;&gt;&gt;    // or perhaps even `inverselyIntersect` so it&#39;s an adverb<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I wouldn&#39;t be surprised if you did, because I could see you trying to<br>&gt;&gt;&gt;&gt; dodge the adverb problem, but I thought it was worth asking.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These names all have the wrong sense, including the ones that were<br>&gt;&gt;&gt; decided upon.  “Inverting the intersection” doesn&#39;t imply that elements<br>&gt;&gt;&gt; not in the intersection will be merged, which is what happens in a<br>&gt;&gt;&gt; symmetric difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/bd5fee87/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 16, 2016 at 11:00:00am</p></header><div class="content"><p>on Tue Feb 16 2016, Craig Cruden &lt;ccruden-AT-novafore.com&gt; wrote:<br></p><p>&gt; Richard’s suggestions is amount the better ones:<br>&gt;<br>&gt; Of the symdiff ones I think I would lean towards:<br>&gt;<br>&gt; let symmetricDifference = 	a.unionMinusIntersection(b)	// (a ∪ b) \ (a ∩ b) == a △ b<br></p><p>Yeah, you&#39;re right; those were great ideas.<br></p><p>&gt; It is descriptive enough for those not familiar with the name “symmetricDifference”. <br>&gt;<br>&gt; The fact that he keeps mutable names completely separate is a plus.<br>&gt;<br>&gt;&gt; On 2016-02-17, at 2:16:24, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Feb 16 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Not that I like it, but<br>&gt;&gt;&gt; insertNonIntersectingRemoveIntersectingContentsOf(_:) would be the<br>&gt;&gt;&gt; stylistically consistent way to convey the right sense.<br>&gt;&gt; <br>&gt;&gt; Did you see Ricardo Parada&#39;s suggestions?  I thought some of those were<br>&gt;&gt; better.<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Feb 16, 2016 at 10:22 AM Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Mon Feb 15 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think you&#39;ve ended up with the right approach, and I understand the<br>&gt;&gt;&gt;&gt; need to move on, but...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt;&gt;&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt;&gt;&gt;&gt;&gt;&gt;    func invertingIntersection(other: Self) -&gt; Self<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt;&gt;&gt;&gt;&gt;&gt;    mutating func invertIntersection(other: Self)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m not quite happy with these. I don&#39;t like that the mutating form of<br>&gt;&gt;&gt;&gt;&gt; `intersection` is `intersect`, but the mutating form of<br>&gt;&gt;&gt;&gt;&gt; `invertingIntersection` is `invertIntersection`—it seems like both<br>&gt;&gt;&gt;&gt;&gt; methods should change the &quot;intersection&quot; part.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Have you considered going the opposite direction and combining the verb<br>&gt;&gt;&gt;&gt; &quot;intersect&quot; with the adjective &quot;inverse&quot;?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in `other`,<br>&gt;&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt;&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt;&gt;&gt;&gt;&gt;    func inverseIntersection(other: Self) -&gt; Self<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained in<br>&gt;&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt;&gt;&gt;&gt;&gt;    mutating func inverseIntersect(other: Self)<br>&gt;&gt;&gt;&gt;&gt;    // or perhaps even `inverselyIntersect` so it&#39;s an adverb<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I wouldn&#39;t be surprised if you did, because I could see you trying to<br>&gt;&gt;&gt;&gt;&gt; dodge the adverb problem, but I thought it was worth asking.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; These names all have the wrong sense, including the ones that were<br>&gt;&gt;&gt;&gt; decided upon.  “Inverting the intersection” doesn&#39;t imply that elements<br>&gt;&gt;&gt;&gt; not in the intersection will be merged, which is what happens in a<br>&gt;&gt;&gt;&gt; symmetric difference.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 16, 2016 at 08:00:00pm</p></header><div class="content"><p>Yes, definitely. I missed that one but it is pretty great.<br></p><p>On Tue, Feb 16, 2016 at 1:33 PM Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Tue Feb 16 2016, Craig Cruden &lt;ccruden-AT-novafore.com&gt; wrote:<br>&gt;<br>&gt; &gt; Richard’s suggestions is amount the better ones:<br>&gt; &gt;<br>&gt; &gt; Of the symdiff ones I think I would lean towards:<br>&gt; &gt;<br>&gt; &gt; let symmetricDifference =     a.unionMinusIntersection(b)     // (a ∪ b)<br>&gt; \ (a ∩ b) == a △ b<br>&gt;<br>&gt; Yeah, you&#39;re right; those were great ideas.<br>&gt;<br>&gt; &gt; It is descriptive enough for those not familiar with the name<br>&gt; “symmetricDifference”.<br>&gt; &gt;<br>&gt; &gt; The fact that he keeps mutable names completely separate is a plus.<br>&gt; &gt;<br>&gt; &gt;&gt; On 2016-02-17, at 2:16:24, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Tue Feb 16 2016, Xiaodi Wu &lt;swift-evolution at swift.org &lt;mailto:<br>&gt; swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Not that I like it, but<br>&gt; &gt;&gt;&gt; insertNonIntersectingRemoveIntersectingContentsOf(_:) would be the<br>&gt; &gt;&gt;&gt; stylistically consistent way to convey the right sense.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Did you see Ricardo Parada&#39;s suggestions?  I thought some of those were<br>&gt; &gt;&gt; better.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Tue, Feb 16, 2016 at 10:22 AM Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; on Mon Feb 15 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I think you&#39;ve ended up with the right approach, and I understand the<br>&gt; &gt;&gt;&gt;&gt; need to move on, but...<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in<br>&gt; `other`,<br>&gt; &gt;&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    func invertingIntersection(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained<br>&gt; in<br>&gt; &gt;&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;    mutating func invertIntersection(other: Self)<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I&#39;m not quite happy with these. I don&#39;t like that the mutating form<br>&gt; of<br>&gt; &gt;&gt;&gt;&gt;&gt; `intersection` is `intersect`, but the mutating form of<br>&gt; &gt;&gt;&gt;&gt;&gt; `invertingIntersection` is `invertIntersection`—it seems like both<br>&gt; &gt;&gt;&gt;&gt;&gt; methods should change the &quot;intersection&quot; part.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Have you considered going the opposite direction and combining the<br>&gt; verb<br>&gt; &gt;&gt;&gt;&gt; &quot;intersect&quot; with the adjective &quot;inverse&quot;?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;    /// Returns the set of elements contained in `self` or in `other`,<br>&gt; &gt;&gt;&gt;&gt; but not in both `self` and `other`.<br>&gt; &gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOr<br>&gt; &gt;&gt;&gt;&gt;&gt;    @warn_unused_result<br>&gt; &gt;&gt;&gt;&gt;&gt;    func inverseIntersection(other: Self) -&gt; Self<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;    /// Replaces `self` with a set containing all elements contained<br>&gt; in<br>&gt; &gt;&gt;&gt;&gt; either `self` or `other`, but not both.<br>&gt; &gt;&gt;&gt;&gt;&gt;    /// EXISTING: exclusiveOrInPlace<br>&gt; &gt;&gt;&gt;&gt;&gt;    mutating func inverseIntersect(other: Self)<br>&gt; &gt;&gt;&gt;&gt;&gt;    // or perhaps even `inverselyIntersect` so it&#39;s an adverb<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I wouldn&#39;t be surprised if you did, because I could see you trying to<br>&gt; &gt;&gt;&gt;&gt;&gt; dodge the adverb problem, but I thought it was worth asking.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; These names all have the wrong sense, including the ones that were<br>&gt; &gt;&gt;&gt;&gt; decided upon.  “Inverting the intersection” doesn&#39;t imply that<br>&gt; elements<br>&gt; &gt;&gt;&gt;&gt; not in the intersection will be merged, which is what happens in a<br>&gt; &gt;&gt;&gt;&gt; symmetric difference.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; -Dave<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/aa5c9cf9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
