<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 12:00:00pm</p></header><div class="content"><p>I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br></p><p>extension ViewController {<br>    override func viewDidLoad() {<br>    }<br>    <br>    override func viewWillAppear(animated: Bool) {<br>    }<br>    <br>    override func viewDidDisappear(animated: Bool) {<br>    }<br>}<br></p><p>You can document this somewhat by adding a MARK comment:<br></p><p>// MARK: Lifecylce<br>extension ViewController {<br>    override func viewDidLoad() {<br>    }<br>    <br>    override func viewWillAppear(animated: Bool) {<br>    }<br>    <br>    override func viewDidDisappear(animated: Bool) {<br>    }<br>}<br></p><p>What if we made this more self-documenting by elevating this to a language feature?<br></p><p>extension ViewController named Lifecycle {<br>    override func viewDidLoad() {<br>    }<br>    <br>    override func viewWillAppear(animated: Bool) {<br>    }<br>    <br>    override func viewDidDisappear(animated: Bool) {<br>    }<br>}<br></p><p>Other ways:<br>extension named Lifecycle ViewController { }<br>extension named “View Lifecycle&quot; ViewController { }<br>extension ViewController named “Multi word description” { }<br></p><p><br>For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br></p><p>Any thoughts?<br></p><p>Thanks,<br>Brandon<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/c5be0ee6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>May 16, 2016 at 07:00:00pm</p></header><div class="content"><p>Why not just use a (documentation) comment?<br></p><p>/// The Lifecycle extension:<br>extension ViewController {<br>...<br></p><p>-Michael<br></p><p>&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt; <br>&gt; extension ViewController {<br>&gt;     override func viewDidLoad() {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewWillAppear(animated: Bool) {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewDidDisappear(animated: Bool) {<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; You can document this somewhat by adding a MARK comment:<br>&gt; <br>&gt; // MARK: Lifecylce<br>&gt; extension ViewController {<br>&gt;     override func viewDidLoad() {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewWillAppear(animated: Bool) {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewDidDisappear(animated: Bool) {<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt; <br>&gt; extension ViewController named Lifecycle {<br>&gt;     override func viewDidLoad() {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewWillAppear(animated: Bool) {<br>&gt;     }<br>&gt;     <br>&gt;     override func viewDidDisappear(animated: Bool) {<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Other ways:<br>&gt; extension named Lifecycle ViewController { }<br>&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt; extension ViewController named “Multi word description” { }<br>&gt; <br>&gt; <br>&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt; <br>&gt; Any thoughts?<br>&gt; <br>&gt; Thanks,<br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Because to me this seems too indirect and not explicit enough.<br></p><p>I think doing it explicitly:<br>• Makes your intent much clearer<br>• Forces you to think about not throwing everything into one big extension (i.e. somewhat more binding than a comment that can easily be looked over)<br>• Shows that it’s a first class feature of the language, encouraging everyone to use it. Makes it easier to see in tutorials and code samples as it reads more natural than // MARK:<br>• Does not feel hacky with a comment (and comments are easy to forget to update, making them possibly outdated)<br>• Looks better than having to use comments (imo)<br></p><p>It is reminiscent of named categories in Objective-C where I found the names to be quite self documenting and clearer.<br></p><p>To me it just feels like a natural extension…onto extensions.<br></p><p>In the end, there is nothing with wrong using comments, but it feels a little more archaic to me. <br></p><p>For a little contrived example:<br></p><p>In the swift guide, there is an example like this:<br></p><p>extension Double {<br>    var km: Double { return self * 1_000.0 }<br>    var m: Double { return self }<br>    var cm: Double { return self / 100.0 }<br>    var mm: Double { return self / 1_000.0 }<br>    var ft: Double { return self / 3.28084 }<br>}<br></p><p>• It is clear what the intent is here: to provide methods to convert a double into other units<br>• Why not make this intent explicit? Otherwise it is too easy to add unrelated methods:<br></p><p>extension Double {<br>    var km: Double { return self * 1_000.0 }<br>    var m: Double { return self }<br>    var cm: Double { return self / 100.0 }<br>    var mm: Double { return self / 1_000.0 }<br>    var ft: Double { return self / 3.28084 }<br></p><p>	    var squared: Double { return self * self } //This computed property is unlike the others, introducing some bloat to this extension<br>}<br></p><p><br></p><p>Something like this is more “explicit”<br></p><p> named Unit Conversion extension Double {<br>    var km: Double { return self * 1_000.0 }<br>    var m: Double { return self }<br>    var cm: Double { return self / 100.0 }<br>    var mm: Double { return self / 1_000.0 }<br>    var ft: Double { return self / 3.28084 }<br></p><p>	  //var squared: Double { return self * self } It is not clear that this method does not fit with the others and should be moved<br>}<br></p><p>There is somewhat of a contract here where everything in this extension is a kind of conversion. Anyone could still add whatever they want to this extension because this is really just a form of documentation and it has no idea whether what you are adding fits with the name, but I find it to be a little more binding and requires the programmer to ask themselves if their addition fits with the rest of the extension.<br></p><p>The obvious question again is: Why not just use a comment to document it? My answer to this is: I don’t think most use comments to signify their intent of the extension. They either do not know it exists or do not find it worthwhile. I think making it explicit to the language gives people incentive to use it. It would be included in more code samples because it is a natural part of the extension and not “just another comment” to skim by, meaning more people would know it exists and use it more.<br></p><p>Also, no // MARK: Bar syntax needs to be remembered. MARK: is also less pretty and harder to type<br></p><p>More formatting options:<br></p><p>named Unit Conversion <br>extension Double {<br>}<br></p><p>extension Double, named Unit Conversion { //avoids requiring “ &quot;<br>} <br></p><p>At the end of the day, how many developers know and remember to use // MARK:? I think this feature with code completion would promote much wider adoption.<br></p><p>Brandon<br></p><p>&gt; On May 16, 2016, at 1:33 PM, Michael Peternell &lt;michael.peternell at gmx.at&gt; wrote:<br>&gt; <br>&gt; Why not just use a (documentation) comment?<br>&gt; <br>&gt; /// The Lifecycle extension:<br>&gt; extension ViewController {<br>&gt; ...<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt; <br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt; <br>&gt;&gt; // MARK: Lifecylce<br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt; <br>&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Other ways:<br>&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/7ad94b60/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 16, 2016 at 01:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 16, 2016, at 12:33 PM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why not just use a (documentation) comment?<br>&gt; <br>&gt; /// The Lifecycle extension:<br>&gt; extension ViewController {<br></p><p>There have been discussions about possibly allowing extensions to have stored properties in the future.  If that comes to pass it may well be useful for extensions to have a name that can be used to refer to the extension during initialization.  I discussed possible syntax for that in my draft proposal for partial initializers (which I tabled for Swift 3, but may revive in the future).<br></p><p><br>&gt; ...<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt; <br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt; <br>&gt;&gt; // MARK: Lifecylce<br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt; <br>&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Other ways:<br>&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Do you have a link to your proposal?<br></p><p>Thanks,<br>Brandon<br></p><p>&gt; On May 16, 2016, at 2:58 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On May 16, 2016, at 12:33 PM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt; <br>&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt; extension ViewController {<br>&gt; <br>&gt; There have been discussions about possibly allowing extensions to have stored properties in the future.  If that comes to pass it may well be useful for extensions to have a name that can be used to refer to the extension during initialization.  I discussed possible syntax for that in my draft proposal for partial initializers (which I tabled for Swift 3, but may revive in the future).<br>&gt; <br>&gt; <br>&gt;&gt; ...<br>&gt;&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/cb5da88b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 16, 2016, at 1:59 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Do you have a link to your proposal?<br></p><p>The part relevant to this thread is in the section “Interactions with other features”<br></p><p>https://github.com/anandabits/swift-evolution/blob/partial-initializers/proposals/NNNN-partial-initializers.md<br></p><p>&gt; <br>&gt; Thanks,<br>&gt; Brandon<br>&gt; <br>&gt;&gt; On May 16, 2016, at 2:58 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 12:33 PM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt; <br>&gt;&gt; There have been discussions about possibly allowing extensions to have stored properties in the future.  If that comes to pass it may well be useful for extensions to have a name that can be used to refer to the extension during initialization.  I discussed possible syntax for that in my draft proposal for partial initializers (which I tabled for Swift 3, but may revive in the future).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/1b612853/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 16, 2016 at 01:00:00pm</p></header><div class="content"><p>Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br></p><p>/// - Keyword: Lifecycle extension<br></p><p>-- Erica<br></p><p><br>&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why not just use a (documentation) comment?<br>&gt; <br>&gt; /// The Lifecycle extension:<br>&gt; extension ViewController {<br>&gt; ...<br>&gt; <br>&gt; -Michael<br>&gt; <br>&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt; <br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt; <br>&gt;&gt; // MARK: Lifecylce<br>&gt;&gt; extension ViewController {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt; <br>&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;    override func viewDidLoad() {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewWillAppear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; <br>&gt;&gt;    override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Other ways:<br>&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt; <br>&gt;&gt; Any thoughts?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 03:00:00pm</p></header><div class="content"><p>I have never seen anyone use this. Why? Because it is relatively unknown and not very “pretty” in my opinion. In the ideal world, everyone would have perfectly formatted and up to date comment, but I am not convinced this is usually the case.<br></p><p>It’s good for IDE documenting, but:<br>• Online tutorials do NOT use this in code samples, keeping it from being widely known (and because it looks ugly next to their sample and makes it look more verbose)<br>• It really does not look nice with the language. It seems like IDE magic<br>• What about people writing in a text editor or not in Xcode? If they do not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br></p><p>And a quick read of Matthew’s proposal tells me that it may be beneficial to be able to refer to the name of an extension in the future. I am still reading through his proposal but that’s what I took from it with a quick look.<br></p><p><br>Brandon<br></p><p>&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br>&gt; <br>&gt; /// - Keyword: Lifecycle extension<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; <br>&gt;&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt; <br>&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt; extension ViewController {<br>&gt;&gt; ...<br>&gt;&gt; <br>&gt;&gt; -Michael<br>&gt;&gt; <br>&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;   override func viewDidLoad() {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May 16, 2016 at 01:00:00pm</p></header><div class="content"><p>Most of the Swift docs markup tech is both very new and still evolving. I&#39;m trying to evangelize the technology, and there are now five markup items that actually tie into the code completion engine:<br></p><p>Three new doc comment fields, namely - keyword:, - recommended: and - recommendedover:, allow Swift users to cooperate with code completion engine to deliver more effective code completion results. The - keyword: field specifies concepts that are not fully manifested in declaration names. - recommended: indicates other declarations are preferred to the one decorated; to the contrary, - recommendedover: indicates the decorated declaration is preferred to those declarations whose names are specified.<br></p><p>-- E<br></p><p><br>&gt; On May 16, 2016, at 1:14 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; I have never seen anyone use this. Why? Because it is relatively unknown and not very “pretty” in my opinion. In the ideal world, everyone would have perfectly formatted and up to date comment, but I am not convinced this is usually the case.<br>&gt; <br>&gt; It’s good for IDE documenting, but:<br>&gt; • Online tutorials do NOT use this in code samples, keeping it from being widely known (and because it looks ugly next to their sample and makes it look more verbose)<br>&gt; • It really does not look nice with the language. It seems like IDE magic<br>&gt; • What about people writing in a text editor or not in Xcode? If they do not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br>&gt; <br>&gt; And a quick read of Matthew’s proposal tells me that it may be beneficial to be able to refer to the name of an extension in the future. I am still reading through his proposal but that’s what I took from it with a quick look.<br>&gt; <br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt;&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br>&gt;&gt; <br>&gt;&gt; /// - Keyword: Lifecycle extension<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/3a40b7c8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 03:00:00pm</p></header><div class="content"><p>I think requiring them to be in comments is what’s going to prevent their adoption.<br></p><p>My fundamental stance is that these awesome features that are required in comments will be overlooked by people because:<br>• You have to remember the specific syntax <br>• There is no code completion which means you have to know the *exact* syntax and spelling<br></p><p>At the end of the day, Swift is a new language, and because of this, is there a new and better way to convey information than just sticking everything in a comment?<br></p><p>With autocomplete we could get something like this:<br></p><p>extension Type, named Name {<br>}<br></p><p>This would make it much easier for people to adopt than requiring them to remember a comment syntax.<br></p><p>However, if there is no interest, I will not proceed with a proposal.<br></p><p>Just my .02<br>Brandon<br></p><p>Where autocomplete would let you tab between naming the Type and Name<br></p><p>&gt; On May 16, 2016, at 3:24 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Most of the Swift docs markup tech is both very new and still evolving. I&#39;m trying to evangelize the technology, and there are now five markup items that actually tie into the code completion engine:<br>&gt; <br>&gt; Three new doc comment fields, namely - keyword:, - recommended: and - recommendedover:, allow Swift users to cooperate with code completion engine to deliver more effective code completion results. The - keyword: field specifies concepts that are not fully manifested in declaration names. - recommended: indicates other declarations are preferred to the one decorated; to the contrary, - recommendedover: indicates the decorated declaration is preferred to those declarations whose names are specified.<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt; <br>&gt;&gt; On May 16, 2016, at 1:14 PM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I have never seen anyone use this. Why? Because it is relatively unknown and not very “pretty” in my opinion. In the ideal world, everyone would have perfectly formatted and up to date comment, but I am not convinced this is usually the case.<br>&gt;&gt; <br>&gt;&gt; It’s good for IDE documenting, but:<br>&gt;&gt; • Online tutorials do NOT use this in code samples, keeping it from being widely known (and because it looks ugly next to their sample and makes it look more verbose)<br>&gt;&gt; • It really does not look nice with the language. It seems like IDE magic<br>&gt;&gt; • What about people writing in a text editor or not in Xcode? If they do not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br>&gt;&gt; <br>&gt;&gt; And a quick read of Matthew’s proposal tells me that it may be beneficial to be able to refer to the name of an extension in the future. I am still reading through his proposal but that’s what I took from it with a quick look.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// - Keyword: Lifecycle extension<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/1970fa06/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 16, 2016 at 04:00:00pm</p></header><div class="content"><p>I have wanted this feature and floated it a while back. I hope we can get<br>some traction this time but I doubt it will happen soon since additive<br>features are tabled for a time.<br></p><p>On Mon, May 16, 2016 at 3:47 PM, Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think requiring them to be in comments is what’s going to prevent their<br>&gt; adoption.<br>&gt;<br>&gt; My fundamental stance is that these awesome features that are required in<br>&gt; comments will be overlooked by people because:<br>&gt; • You have to remember the specific syntax<br>&gt; • There is no code completion which means you have to know the *exact*<br>&gt; syntax and spelling<br>&gt;<br>&gt; At the end of the day, Swift is a new language, and because of this, is<br>&gt; there a new and better way to convey information than just sticking<br>&gt; everything in a comment?<br>&gt;<br>&gt; With autocomplete we could get something like this:<br>&gt;<br>&gt; extension *Type,* named *Name* {<br>&gt; }<br>&gt;<br>&gt; This would make it much easier for people to adopt than requiring them to<br>&gt; remember a comment syntax.<br>&gt;<br>&gt; However, if there is no interest, I will not proceed with a proposal.<br>&gt;<br>&gt; Just my .02<br>&gt; Brandon<br>&gt;<br>&gt; Where autocomplete would let you tab between naming the Type and Name<br>&gt;<br>&gt; On May 16, 2016, at 3:24 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; Most of the Swift docs markup tech is both very new and still evolving.<br>&gt; I&#39;m trying to evangelize the technology, and there are now five markup<br>&gt; items that actually tie into the code completion engine:<br>&gt;<br>&gt;<br>&gt;    -<br>&gt;<br>&gt;    Three new doc comment fields, namely - keyword:, - recommended: and -<br>&gt;    recommendedover:, allow Swift users to cooperate with code completion<br>&gt;    engine to deliver more effective code completion results. The -<br>&gt;    keyword: field specifies concepts that are not fully manifested in<br>&gt;    declaration names. - recommended: indicates other declarations are<br>&gt;    preferred to the one decorated; to the contrary, - recommendedover: indicates<br>&gt;    the decorated declaration is preferred to those declarations whose names<br>&gt;    are specified.<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt;<br>&gt; On May 16, 2016, at 1:14 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;<br>&gt; I have never seen anyone use this. Why? Because it is relatively unknown<br>&gt; and not very “pretty” in my opinion. In the ideal world, everyone would<br>&gt; have perfectly formatted and up to date comment, but I am not convinced<br>&gt; this is usually the case.<br>&gt;<br>&gt; It’s good for IDE documenting, but:<br>&gt; • Online tutorials do NOT use this in code samples, keeping it from being<br>&gt; widely known (and because it looks ugly next to their sample and makes it<br>&gt; look more verbose)<br>&gt; • It really does not look nice with the language. It seems like IDE magic<br>&gt; • What about people writing in a text editor or not in Xcode? If they do<br>&gt; not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br>&gt;<br>&gt; And a quick read of Matthew’s proposal tells me that it may be beneficial<br>&gt; to be able to refer to the name of an extension in the future. I am still<br>&gt; reading through his proposal but that’s what I took from it with a quick<br>&gt; look.<br>&gt;<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;<br>&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can<br>&gt; relate one extension to the other.<br>&gt;<br>&gt; /// - Keyword: Lifecycle extension<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt;<br>&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Why not just use a (documentation) comment?<br>&gt;<br>&gt; /// The Lifecycle extension:<br>&gt; extension ViewController {<br>&gt; ...<br>&gt;<br>&gt; -Michael<br>&gt;<br>&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt; I like to separate methods into their own logical extensions so similar<br>&gt; methods are grouped together. I do this mostly with Cocoa Touch where I<br>&gt; like all view life cycle methods to be in the same extension:<br>&gt;<br>&gt; extension ViewController {<br>&gt;  override func viewDidLoad() {<br>&gt;  }<br>&gt;<br>&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;  }<br>&gt;<br>&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;  }<br>&gt; }<br>&gt;<br>&gt; You can document this somewhat by adding a MARK comment:<br>&gt;<br>&gt; // MARK: Lifecylce<br>&gt; extension ViewController {<br>&gt;  override func viewDidLoad() {<br>&gt;  }<br>&gt;<br>&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;  }<br>&gt;<br>&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;  }<br>&gt; }<br>&gt;<br>&gt; What if we made this more self-documenting by elevating this to a language<br>&gt; feature?<br>&gt;<br>&gt; extension ViewController named Lifecycle {<br>&gt;  override func viewDidLoad() {<br>&gt;  }<br>&gt;<br>&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;  }<br>&gt;<br>&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;  }<br>&gt; }<br>&gt;<br>&gt; Other ways:<br>&gt; extension named Lifecycle ViewController { }<br>&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt; extension ViewController named “Multi word description” { }<br>&gt;<br>&gt;<br>&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the<br>&gt; extension name dynamically or statically in actual code). I think it plays<br>&gt; much more naturally with Swift than requiring this to be in the comments<br>&gt; and would work across all IDEs and make it easier for people to find a<br>&gt; specific extension as well as making their code more self documenting.<br>&gt;<br>&gt; Any thoughts?<br>&gt;<br>&gt; Thanks,<br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/30d1ad0a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 04:00:00pm</p></header><div class="content"><p>Here is an attempt to express myself better :)<br></p><p>Objective-C to Swift category to extension conversion loss of descriptive name<br></p><p>Objective-C category:<br>@interface NSAttributedString (NSAttributedStringDocumentFormats)<br>// Methods initializing the receiver contents with an external document data.  options specify document attributes for interpreting the document contents.  NSDocumentTypeDocumentAttribute, NSCharacterEncodingDocumentAttribute, and NSDefaultAttributesDocumentAttribute are supported options key.  When they are not specified, these methods will examine the data and do their best to detect the appropriate attributes.  If dict is non-NULL, it will return a dictionary with various document-wide attributes accessible via NS...DocumentAttribute keys.<br>- (nullable instancetype)initWithURL:(NSURL *)url options:(NSDictionary&lt;NSString *, id&gt; *)options documentAttributes:(NSDictionary&lt;NSString *, id&gt; * __nullable * __nullable)dict error:(NSError **)error NS_AVAILABLE(10_11, 9_0);<br></p><p>...<br>@end<br></p><p>Translated Swift extension:<br>extension NSAttributedString {<br>    // Methods initializing the receiver contents with an external document data.  options specify document attributes for interpreting the document contents.  NSDocumentTypeDocumentAttribute, NSCharacterEncodingDocumentAttribute, and NSDefaultAttributesDocumentAttribute are supported options key.  When they are not specified, these methods will examine the data and do their best to detect the appropriate attributes.  If dict is non-NULL, it will return a dictionary with various document-wide attributes accessible via NS...DocumentAttribute keys.<br>    @available(iOS 9.0, *)<br>    public init(URL url: NSURL, options: [String : AnyObject], documentAttributes dict: AutoreleasingUnsafeMutablePointer&lt;NSDictionary?&gt;) throws<br>...<br>}<br></p><p><br>The self-documenting name of the category is lost when imported in Swift. Some categories have no outward comment describing it because they seem to rely on the category name. For example, this one *does* have a comment describing it that is imported into swift:<br></p><p><br>Objective-C<br>/************************ Attribute fixing ************************/<br></p><p>@interface NSMutableAttributedString (NSAttributedStringAttributeFixing)<br></p><p>@end<br></p><p><br>Swift:<br>/************************ Attribute fixing ************************/<br>extension NSMutableAttributedString {<br></p><p>}<br></p><p>Again, the comment is not enforced by the compiler and is a style choice. Names on categories are enforced (except for a class’s private () category)<br></p><p>One moonshot: Are extension’s an implementation detail?<br></p><p>Here is the generated interface for a simple View Controller<br></p><p>internal class ViewController : UIViewController {<br></p><p>    override internal func viewDidLoad()<br></p><p>    override internal func didReceiveMemoryWarning()<br>}<br></p><p>extension ViewController {<br></p><p>    internal func test()<br>}<br></p><p>Theoretically, if we had named extensions:<br></p><p>extension ViewController named Test {<br>	 internal func test() {<br></p><p>    }<br>}<br></p><p>could be translated to:<br></p><p>internal class ViewController : UIViewController {<br></p><p>    override internal func viewDidLoad()<br></p><p>    override internal func didReceiveMemoryWarning()<br></p><p>Test:<br>    internal func test()<br></p><p>}<br></p><p>I am not sure if this behavior would be truly desired, but it would allow the methods to remained group under a comment or a header of some sort.<br></p><p>//Phew<br>Brandon<br></p><p>&gt; On May 16, 2016, at 4:25 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; I have wanted this feature and floated it a while back. I hope we can get some traction this time but I doubt it will happen soon since additive features are tabled for a time.<br>&gt; <br>&gt; On Mon, May 16, 2016 at 3:47 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think requiring them to be in comments is what’s going to prevent their adoption.<br>&gt; <br>&gt; My fundamental stance is that these awesome features that are required in comments will be overlooked by people because:<br>&gt; • You have to remember the specific syntax <br>&gt; • There is no code completion which means you have to know the *exact* syntax and spelling<br>&gt; <br>&gt; At the end of the day, Swift is a new language, and because of this, is there a new and better way to convey information than just sticking everything in a comment?<br>&gt; <br>&gt; With autocomplete we could get something like this:<br>&gt; <br>&gt; extension Type, named Name {<br>&gt; }<br>&gt; <br>&gt; This would make it much easier for people to adopt than requiring them to remember a comment syntax.<br>&gt; <br>&gt; However, if there is no interest, I will not proceed with a proposal.<br>&gt; <br>&gt; Just my .02<br>&gt; Brandon<br>&gt; <br>&gt; Where autocomplete would let you tab between naming the Type and Name<br>&gt; <br>&gt;&gt; On May 16, 2016, at 3:24 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Most of the Swift docs markup tech is both very new and still evolving. I&#39;m trying to evangelize the technology, and there are now five markup items that actually tie into the code completion engine:<br>&gt;&gt; <br>&gt;&gt; Three new doc comment fields, namely - keyword:, - recommended: and - recommendedover:, allow Swift users to cooperate with code completion engine to deliver more effective code completion results. The - keyword: field specifies concepts that are not fully manifested in declaration names. - recommended: indicates other declarations are preferred to the one decorated; to the contrary, - recommendedover: indicates the decorated declaration is preferred to those declarations whose names are specified.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 1:14 PM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have never seen anyone use this. Why? Because it is relatively unknown and not very “pretty” in my opinion. In the ideal world, everyone would have perfectly formatted and up to date comment, but I am not convinced this is usually the case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s good for IDE documenting, but:<br>&gt;&gt;&gt; • Online tutorials do NOT use this in code samples, keeping it from being widely known (and because it looks ugly next to their sample and makes it look more verbose)<br>&gt;&gt;&gt; • It really does not look nice with the language. It seems like IDE magic<br>&gt;&gt;&gt; • What about people writing in a text editor or not in Xcode? If they do not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And a quick read of Matthew’s proposal tells me that it may be beneficial to be able to refer to the name of an extension in the future. I am still reading through his proposal but that’s what I took from it with a quick look.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /// - Keyword: Lifecycle extension<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt;&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt;&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/90637a52/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Idea: Named extensions</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 16, 2016 at 04:00:00pm</p></header><div class="content"><p>Ya I didn’t see that email until after I wrote it up. If it does gain traction, I wouldn’t mind writing a proposal and tabling it for now. <br></p><p>Would just like to see some discussion on it, but I don’t want to detract from the current goals!<br></p><p>Brandon<br></p><p>&gt; On May 16, 2016, at 4:25 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; I have wanted this feature and floated it a while back. I hope we can get some traction this time but I doubt it will happen soon since additive features are tabled for a time.<br>&gt; <br>&gt; On Mon, May 16, 2016 at 3:47 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I think requiring them to be in comments is what’s going to prevent their adoption.<br>&gt; <br>&gt; My fundamental stance is that these awesome features that are required in comments will be overlooked by people because:<br>&gt; • You have to remember the specific syntax <br>&gt; • There is no code completion which means you have to know the *exact* syntax and spelling<br>&gt; <br>&gt; At the end of the day, Swift is a new language, and because of this, is there a new and better way to convey information than just sticking everything in a comment?<br>&gt; <br>&gt; With autocomplete we could get something like this:<br>&gt; <br>&gt; extension Type, named Name {<br>&gt; }<br>&gt; <br>&gt; This would make it much easier for people to adopt than requiring them to remember a comment syntax.<br>&gt; <br>&gt; However, if there is no interest, I will not proceed with a proposal.<br>&gt; <br>&gt; Just my .02<br>&gt; Brandon<br>&gt; <br>&gt; Where autocomplete would let you tab between naming the Type and Name<br>&gt; <br>&gt;&gt; On May 16, 2016, at 3:24 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Most of the Swift docs markup tech is both very new and still evolving. I&#39;m trying to evangelize the technology, and there are now five markup items that actually tie into the code completion engine:<br>&gt;&gt; <br>&gt;&gt; Three new doc comment fields, namely - keyword:, - recommended: and - recommendedover:, allow Swift users to cooperate with code completion engine to deliver more effective code completion results. The - keyword: field specifies concepts that are not fully manifested in declaration names. - recommended: indicates other declarations are preferred to the one decorated; to the contrary, - recommendedover: indicates the decorated declaration is preferred to those declarations whose names are specified.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 16, 2016, at 1:14 PM, Brandon Knope &lt;bknope at me.com &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have never seen anyone use this. Why? Because it is relatively unknown and not very “pretty” in my opinion. In the ideal world, everyone would have perfectly formatted and up to date comment, but I am not convinced this is usually the case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s good for IDE documenting, but:<br>&gt;&gt;&gt; • Online tutorials do NOT use this in code samples, keeping it from being widely known (and because it looks ugly next to their sample and makes it look more verbose)<br>&gt;&gt;&gt; • It really does not look nice with the language. It seems like IDE magic<br>&gt;&gt;&gt; • What about people writing in a text editor or not in Xcode? If they do not get a benefit out of // MARK: or /// - Keyword: why would they use it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And a quick read of Matthew’s proposal tells me that it may be beneficial to be able to refer to the name of an extension in the future. I am still reading through his proposal but that’s what I took from it with a quick look.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 16, 2016, at 3:08 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Or better yet, the &#39;Keyword&quot; token offers searchable content that can relate one extension to the other.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /// - Keyword: Lifecycle extension<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- Erica<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 16, 2016, at 11:33 AM, Michael Peternell via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Why not just use a (documentation) comment?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; /// The Lifecycle extension:<br>&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Michael<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Am 16.05.2016 um 18:26 schrieb Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I like to separate methods into their own logical extensions so similar methods are grouped together. I do this mostly with Cocoa Touch where I like all view life cycle methods to be in the same extension:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You can document this somewhat by adding a MARK comment:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // MARK: Lifecylce<br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What if we made this more self-documenting by elevating this to a language feature?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController named Lifecycle {<br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidLoad() {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewWillAppear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  override func viewDidDisappear(animated: Bool) {<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Other ways:<br>&gt;&gt;&gt;&gt;&gt;&gt; extension named Lifecycle ViewController { }<br>&gt;&gt;&gt;&gt;&gt;&gt; extension named “View Lifecycle&quot; ViewController { }<br>&gt;&gt;&gt;&gt;&gt;&gt; extension ViewController named “Multi word description” { }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For now, this is purely a documenting feature (i.e. Can’t refer to the extension name dynamically or statically in actual code). I think it plays much more naturally with Swift than requiring this to be in the comments and would work across all IDEs and make it easier for people to find a specific extension as well as making their code more self documenting.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Any thoughts?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160516/96bed321/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
