<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>June  4, 2016 at 12:00:00am</p></header><div class="content"><p>John McCall wrote:<br></p><p>&gt; I think that&#39;s a very promising way of thinking about literals.  Writing<br>&gt; a literal creates a notional value whose type is the informal, infinite-<br>&gt; precise type of all integer/FP/collection/etc. literals, which (1) can be<br>&gt; implicitly converted to any type that implements the appropriate protocol<br>&gt; and (2) in fact *must* be converted to some such type (possibly the<br>&gt; default type for that literal) in order for the code to be executable.<br></p><p>Could you allow IntegerLiteralConvertible.IntegerLiteralType associatedtype<br>to override the default Swift.IntegerLiteralType typealias iff there&#39;s more<br>than one unlabelled init(_:) to choose from? Then you can call the &quot;correct&quot;<br>init(_:) instead of calling init(integerLiteral:) as a &quot;special case&quot;.<br></p><p>[stdlib/public/core/CompilerProtocols.swift]<br></p><p>    /// Conforming types can be initialized with integer literals.<br>    public protocol IntegerLiteralConvertible {<br>        associatedtype IntegerLiteralType : _BuiltinIntegerLiteralConvertible<br>        /// Create an instance initialized to `value`.<br>        init(integerLiteral value: IntegerLiteralType)<br>    }<br></p><p>[stdlib/public/core/Policy.swift]<br></p><p>    /// The default type for an otherwise-unconstrained integer literal.<br>    public typealias IntegerLiteralType = Int<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jun 3, 2016, at 5:31 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; John McCall wrote:<br>&gt; <br>&gt;&gt; I think that&#39;s a very promising way of thinking about literals.  Writing<br>&gt;&gt; a literal creates a notional value whose type is the informal, infinite-<br>&gt;&gt; precise type of all integer/FP/collection/etc. literals, which (1) can be<br>&gt;&gt; implicitly converted to any type that implements the appropriate protocol<br>&gt;&gt; and (2) in fact *must* be converted to some such type (possibly the<br>&gt;&gt; default type for that literal) in order for the code to be executable.<br>&gt; <br>&gt; Could you allow IntegerLiteralConvertible.IntegerLiteralType associatedtype<br>&gt; to override the default Swift.IntegerLiteralType typealias iff there&#39;s more<br>&gt; than one unlabelled init(_:) to choose from? Then you can call the &quot;correct&quot;<br>&gt; init(_:) instead of calling init(integerLiteral:) as a &quot;special case&quot;.<br></p><p>This is essentially already how it works.  The literal protocols are not invoked via<br>overload resolution; Swift always invokes the initializer that satisfies the protocol<br>requirement.<br></p><p>That is, you can provide ten different init(integerLiteral: T) initializers, but that will<br>just prevent the compiler from inferring the associated type, so you&#39;ll have to<br>declare it.  Once you do, that associated type will determine the initializer that<br>satisfies the requirement, and that&#39;ll always be the initializer chosen.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>June  4, 2016 at 04:00:00am</p></header><div class="content"><p>I think your original proposal is good, but just in case:<br></p><p>[Currently]<br></p><p>    // Literal `7` is converted to `Swift.IntegerLiteralType` typealias.<br>    UInt16(7) calls UInt16.init(_ value: Int)<br></p><p>[Suggested]<br></p><p>    // Literal `7` is converted to `UInt16.IntegerLiteralType` associatedtype.<br>    UInt16(7) calls UInt16.init(_ value: UInt16)<br></p><p>Have &quot;user-defined literals&quot; already been rejected for Swift?<br>&lt;https://en.wikipedia.org/wiki/C%2B%2B11#User-defined_literals&gt;<br>&lt;https://en.wikipedia.org/wiki/C%2B%2B14#Standard_user-defined_literals&gt;<br></p><p>-- Ben<br></p><p>&gt; On 4 Jun 2016, at 02:20, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 3, 2016, at 5:31 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; John McCall wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; I think that&#39;s a very promising way of thinking about literals.  Writing<br>&gt;&gt;&gt; a literal creates a notional value whose type is the informal, infinite-<br>&gt;&gt;&gt; precise type of all integer/FP/collection/etc. literals, which (1) can be<br>&gt;&gt;&gt; implicitly converted to any type that implements the appropriate protocol<br>&gt;&gt;&gt; and (2) in fact *must* be converted to some such type (possibly the<br>&gt;&gt;&gt; default type for that literal) in order for the code to be executable.<br>&gt;&gt; <br>&gt;&gt; Could you allow IntegerLiteralConvertible.IntegerLiteralType associatedtype<br>&gt;&gt; to override the default Swift.IntegerLiteralType typealias iff there&#39;s more<br>&gt;&gt; than one unlabelled init(_:) to choose from? Then you can call the &quot;correct&quot;<br>&gt;&gt; init(_:) instead of calling init(integerLiteral:) as a &quot;special case&quot;.<br>&gt; <br>&gt; This is essentially already how it works.  The literal protocols are not invoked via<br>&gt; overload resolution; Swift always invokes the initializer that satisfies the protocol<br>&gt; requirement.<br>&gt; <br>&gt; That is, you can provide ten different init(integerLiteral: T) initializers, but that will<br>&gt; just prevent the compiler from inferring the associated type, so you&#39;ll have to<br>&gt; declare it.  Once you do, that associated type will determine the initializer that<br>&gt; satisfies the requirement, and that&#39;ll always be the initializer chosen.<br>&gt; <br>&gt; John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Proposal: &#39;T(literal)&#39; should construct T using the appropriate literal protocol if possible</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June  3, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jun 3, 2016, at 8:11 PM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; I think your original proposal is good, but just in case:<br>&gt; <br>&gt; [Currently]<br>&gt; <br>&gt;    // Literal `7` is converted to `Swift.IntegerLiteralType` typealias.<br>&gt;    UInt16(7) calls UInt16.init(_ value: Int)<br>&gt; <br>&gt; [Suggested]<br>&gt; <br>&gt;    // Literal `7` is converted to `UInt16.IntegerLiteralType` associatedtype.<br>&gt;    UInt16(7) calls UInt16.init(_ value: UInt16)<br>&gt; <br>&gt; Have &quot;user-defined literals&quot; already been rejected for Swift?<br>&gt; &lt;https://en.wikipedia.org/wiki/C%2B%2B11#User-defined_literals&gt;<br>&gt; &lt;https://en.wikipedia.org/wiki/C%2B%2B14#Standard_user-defined_literals&gt;<br></p><p>I don&#39;t know that we&#39;ve ruled out using literal suffixes, but it&#39;s not really relevant.<br>We already have a syntax for coercing a literal to a specific type; the problem is<br>that people are writing UInt8(7) anyway, and it&#39;s completely reasonable for them<br>to expect that to work.  So even if we added user-defined literal suffixes as a<br>feature, we&#39;d still have this problem.<br></p><p>I can imagine Swift adding literal suffixes, but only to enable a units library, not<br>to provide yet another way to specify type widths.<br></p><p>John.<br></p><p><br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt;&gt; On 4 Jun 2016, at 02:20, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 3, 2016, at 5:31 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; John McCall wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that&#39;s a very promising way of thinking about literals.  Writing<br>&gt;&gt;&gt;&gt; a literal creates a notional value whose type is the informal, infinite-<br>&gt;&gt;&gt;&gt; precise type of all integer/FP/collection/etc. literals, which (1) can be<br>&gt;&gt;&gt;&gt; implicitly converted to any type that implements the appropriate protocol<br>&gt;&gt;&gt;&gt; and (2) in fact *must* be converted to some such type (possibly the<br>&gt;&gt;&gt;&gt; default type for that literal) in order for the code to be executable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Could you allow IntegerLiteralConvertible.IntegerLiteralType associatedtype<br>&gt;&gt;&gt; to override the default Swift.IntegerLiteralType typealias iff there&#39;s more<br>&gt;&gt;&gt; than one unlabelled init(_:) to choose from? Then you can call the &quot;correct&quot;<br>&gt;&gt;&gt; init(_:) instead of calling init(integerLiteral:) as a &quot;special case&quot;.<br>&gt;&gt; <br>&gt;&gt; This is essentially already how it works.  The literal protocols are not invoked via<br>&gt;&gt; overload resolution; Swift always invokes the initializer that satisfies the protocol<br>&gt;&gt; requirement.<br>&gt;&gt; <br>&gt;&gt; That is, you can provide ten different init(integerLiteral: T) initializers, but that will<br>&gt;&gt; just prevent the compiler from inferring the associated type, so you&#39;ll have to<br>&gt;&gt; declare it.  Once you do, that associated type will determine the initializer that<br>&gt;&gt; satisfies the requirement, and that&#39;ll always be the initializer chosen.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
