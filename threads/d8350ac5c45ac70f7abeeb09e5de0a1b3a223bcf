<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 26, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks for your review, Jacob—<br></p><p>on Sat Jan 23 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt;<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; I would really appreciate seeing what *all* of the Foundation/Cocoa/Cocoa<br>&gt; Touch APIs would look like when imported using this scheme. If we&#39;re going<br>&gt; to bikeshed API translation, we should bikeshed all of it to avoid<br>&gt; inconsistency. (It may be that some issues aren&#39;t resolvable with the<br>&gt; simple rules proposed, and instead we should improve the API overlays.)<br>&gt;<br>&gt; Some specific concerns:<br>&gt;<br>&gt;      func *reversing()* -&gt; UIBezierPath<br>&gt;<br>&gt; I believe this would be better named *reversed()*.<br></p><p>It certainly would.  I wonder if it&#39;s possible for us to tune the<br>heuristics accordingly, and how many other places that might fix.  My<br>research tells me this is a one-off problem that probably should be<br>handled “on a per-API basis via annotation within the Objective-C<br>headers”<br>(c.f. https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md#proposed-solution)<br></p><p>  $ git grep -nHE -e &#39;func [a-z]*ing\&gt;\(\)&#39; | grep -v &#39;string()&#39;<br>  ../../Platforms/OSX/DiscRecording.swift:678:  func encoding() -&gt; UInt<br>  ../../Platforms/OSX/Quartz.swift:1822:  func mirroring() -&gt; Bool<br>  ../../Platforms/OSX/SceneKit.swift:4762:  class func spring() -&gt; SCNPhysicsField<br>  ../../Platforms/OSX/WebKit.swift:340:  func padding() -&gt; String!<br>  ../../Platforms/iOS/SceneKit.swift:4474:  class func spring() -&gt; SCNPhysicsField<br>  ../../Platforms/iOS/UIKit.swift:2237:  func reversing() -&gt; UIBezierPath<br>  ../../Platforms/tvOS/SceneKit.swift:4474:  class func spring() -&gt; SCNPhysicsField<br>  ../../Platforms/tvOS/UIKit.swift:1723:  func reversing() -&gt; UIBezierPath<br>  ../../Platforms/watchOS/UIKit.swift:424:  func reversing() -&gt; UIBezierPath<br></p><p>Except for reversing, these are all fine AFAICT.<br></p><p>&gt;     var *dateComponentUndefined*: Int { get }<br>&gt;<br>&gt; It seems pretty weird to have a global/top-level constant that starts with<br>&gt; a lowercase letter, <br></p><p>I get that.  Starting with lowercase is in conformance with the<br>guidelines as written, FWIW.<br></p><p>&gt; and whose first 2 subwords are describing its type.<br></p><p>That&#39;s compensating for weak type information.<br></p><p>&gt;     class func *darkGray*() -&gt; UIColor<br>&gt;<br>&gt; I would rather see this imported as `class var *DarkGray*: UIColor { get }`.<br></p><p>Why should we capitalize some vars and not others?<br></p><p>&gt; Otherwise, I&#39;m okay with the proposed changes. I really like the &quot;Add<br>&gt; Default Arguments&quot; section. :-)<br>&gt;<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>&gt; Yes. The (current) majority of Swift users are writing software for Apple<br>&gt; platforms, so they interact constantly with Obj-C APIs such as these.<br>&gt;<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; Fairly in-depth.<br>&gt;<br>&gt; Jacob<br>&gt;<br>&gt; On Fri, Jan 22, 2016 at 1:02 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of SE-0005&quot;Better Translation of Objective-C APIs Into Swift&quot;<br>&gt;&gt; begins now and runs through January 31, 2016. The proposal is available<br>&gt;&gt; here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt;&gt; top of the message:<br>&gt;&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md<br>&gt;&gt;<br>&gt;&gt; Reply text<br>&gt;&gt;<br>&gt;&gt; Other replies<br>&gt;&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt;&gt; goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt;    - What is your evaluation of the proposal?<br>&gt;&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;&gt;    change to Swift?<br>&gt;&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;    - If you have used other languages or libraries with a similar<br>&gt;&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;&gt;    reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Doug Gregor<br>&gt;&gt;<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 26, 2016 at 02:00:00pm</p></header><div class="content"><p>On Tue, Jan 26, 2016 at 1:57 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>  $ git grep -nHE -e &#39;func [a-z]*ing\&gt;\(\)&#39; | grep -v &#39;string()&#39;<br>&gt;   ../../Platforms/OSX/DiscRecording.swift:678:  func encoding() -&gt; UInt<br>&gt;   ../../Platforms/OSX/Quartz.swift:1822:  func mirroring() -&gt; Bool<br>&gt;   ../../Platforms/OSX/SceneKit.swift:4762:  class func spring() -&gt;<br>&gt; SCNPhysicsField<br>&gt;   ../../Platforms/OSX/WebKit.swift:340:  func padding() -&gt; String!<br>&gt;   ../../Platforms/iOS/SceneKit.swift:4474:  class func spring() -&gt;<br>&gt; SCNPhysicsField<br>&gt;   ../../Platforms/iOS/UIKit.swift:2237:  func reversing() -&gt; UIBezierPath<br>&gt;   ../../Platforms/tvOS/SceneKit.swift:4474:  class func spring() -&gt;<br>&gt; SCNPhysicsField<br>&gt;   ../../Platforms/tvOS/UIKit.swift:1723:  func reversing() -&gt; UIBezierPath<br>&gt;   ../../Platforms/watchOS/UIKit.swift:424:  func reversing() -&gt;<br>&gt; UIBezierPath<br>&gt; Except for reversing, these are all fine AFAICT.<br></p><p><br>Here are some others from the swift-3 branch; I&#39;m not sure where these<br>currently fall under the guidelines:<br></p><p>CIImage<br>  func byCompositingOverImage(dest: CIImage) -&gt; CIImage<br>  func byCroppingTo(rect: CGRect) -&gt; CIImage<br>  func byClampingToExtent() -&gt; CIImage<br></p><p>(NS)IndexPath<br>  func removingLastIndex() -&gt; IndexPath<br></p><p>SKTexture<br>  func generatingNormalMap() -&gt; Self<br>  func generatingNormalMapWithSmoothness(smoothness: CGFloat, contrast:<br>CGFloat) -&gt; Self<br></p><p><br>&gt;     class func *darkGray*() -&gt; UIColor<br>&gt; &gt;<br>&gt; &gt; I would rather see this imported as `class var *DarkGray*: UIColor { get<br>&gt; }`.<br>&gt;<br>&gt; Why should we capitalize some vars and not others?<br>&gt;<br></p><p>I was hoping that colors, and other such types with class methods returning<br>particular instances, would be treated like enum cases.<br></p><p>enum UIColor {<br>    case DarkGray<br>    case Black<br>    case Clear<br>    ...<br>}<br></p><p>enum CAMediaTimingFunction {  // more of a job for an overlay, since these<br>are created with init(name: String)<br>    case Linear<br>    case EaseInEaseOut<br>    ...<br>}<br></p><p>In the meantime, of course, I saw there was some discussion of having enum<br>cases begin with lowercase letters as well. I could get used to that. (I&#39;d<br>just like these to be consistent.)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160126/dbc987ec/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>January 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jan 26, 2016, at 2:53 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Here are some others from the swift-3 branch; I&#39;m not sure where these currently fall under the guidelines:<br>&gt; <br>&gt; CIImage<br>&gt;   func byCompositingOverImage(dest: CIImage) -&gt; CIImage<br>&gt;   func byCroppingTo(rect: CGRect) -&gt; CIImage<br>&gt;   func byClampingToExtent() -&gt; CIImage<br></p><p>I’m not wild about using “by” in these names.  I’d rather this were :<br></p><p>CIImage<br>  func compositedOverImage(dest: CIImage) -&gt; CIImage<br>  func croppedTo(rect: CGRect) -&gt; CIImage<br>  func clampedToExtent() -&gt; CIImage<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0005 Better Translation of Objective-C APIs Into Swift</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 30, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 7:32 PM, John Randolph via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 26, 2016, at 2:53 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here are some others from the swift-3 branch; I&#39;m not sure where these currently fall under the guidelines:<br>&gt;&gt; <br>&gt;&gt; CIImage<br>&gt;&gt;  func byCompositingOverImage(dest: CIImage) -&gt; CIImage<br>&gt;&gt;  func byCroppingTo(rect: CGRect) -&gt; CIImage<br>&gt;&gt;  func byClampingToExtent() -&gt; CIImage<br>&gt; <br>&gt; I’m not wild about using “by” in these names.  I’d rather this were :<br>&gt; <br>&gt; CIImage<br>&gt;  func compositedOverImage(dest: CIImage) -&gt; CIImage<br>&gt;  func croppedTo(rect: CGRect) -&gt; CIImage<br>&gt;  func clampedToExtent() -&gt; CIImage<br></p><p>That’s a good point; the implementation is failing to remove the “by” in these cases. I’ll take a look.<br></p><p>	- Doug<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
