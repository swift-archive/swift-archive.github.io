<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b75569a6d70d16ef886a720fc0dc94cd?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Ilija Tovilo</string> &lt;ilija.tovilo at me.com&gt;<p>January  2, 2016 at 12:00:00am</p></header><div class="content"><p>Happy new year everyone! <br></p><p>I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.<br>So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).<br></p><p>The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. <br>The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.<br></p><p>I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.<br>Is there a way to add linker flags / compile flags to your Package.swift file?<br></p><p>It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.<br></p><p>Thanks for the help!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160102/f4706df0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>January  4, 2016 at 10:00:00am</p></header><div class="content"><p>You can&#39;t do this via the package manager, but you can include &quot;link&quot; declarations in the module map itself which specify additional linker arguments to plumb through when that module is used. See:<br>  http://clang.llvm.org/docs/Modules.html#link-declaration<br></p><p>Here is a concrete example, which is how Swift knows to automatically link libpthread and libdl when Glibc is used:<br>  https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in<br></p><p> - Daniel<br></p><p>&gt; On Jan 1, 2016, at 4:48 PM, Ilija Tovilo via swift-users &lt;swift-users at swift.org&gt; wrote: <br>&gt; <br>&gt; Happy new year everyone! <br>&gt; <br>&gt; I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.<br>&gt; So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).<br>&gt; <br>&gt; The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. <br>&gt; The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.<br>&gt; <br>&gt; I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.<br>&gt; Is there a way to add linker flags / compile flags to your Package.swift file?<br>&gt; <br>&gt; It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.<br>&gt; <br>&gt; Thanks for the help!<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160104/68114f8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;ve also been having trouble getting a Swift interface to LLVM&#39;s C API. The basic gist is here:<br></p><p>https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 &lt;https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3&gt;<br></p><p>I&#39;ve:<br></p><p>- Installed LLVM via homebrew, so it lives in &quot;/usr/local/opt/llvm&quot; (I&#39;ve also built LLVM myself and have the same ).<br>- Passed &quot;-I&quot; and &quot;-L&quot; to send includes/lib paths to the &quot;-Xcc&quot; and &quot;-Xlinker&quot; flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?<br>- Added many more LLVM headers/links to the module map and continued to have the same issue.<br></p><p>The linker&#39;s still having trouble. I&#39;m probably missing something very basic.<br></p><p>Stephen<br></p><p>&gt; On Jan 4, 2016, at 1:08 PM, Daniel Dunbar via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; You can&#39;t do this via the package manager, but you can include &quot;link&quot; declarations in the module map itself which specify additional linker arguments to plumb through when that module is used. See:<br>&gt;   http://clang.llvm.org/docs/Modules.html#link-declaration &lt;http://clang.llvm.org/docs/Modules.html#link-declaration&gt;<br>&gt; <br>&gt; Here is a concrete example, which is how Swift knows to automatically link libpthread and libdl when Glibc is used:<br>&gt;   https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in &lt;https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in&gt;<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; On Jan 1, 2016, at 4:48 PM, Ilija Tovilo via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote: <br>&gt;&gt; <br>&gt;&gt; Happy new year everyone! <br>&gt;&gt; <br>&gt;&gt; I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.<br>&gt;&gt; So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).<br>&gt;&gt; <br>&gt;&gt; The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. <br>&gt;&gt; The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.<br>&gt;&gt; <br>&gt;&gt; I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.<br>&gt;&gt; Is there a way to add linker flags / compile flags to your Package.swift file?<br>&gt;&gt; <br>&gt;&gt; It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.<br>&gt;&gt; <br>&gt;&gt; Thanks for the help!<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160222/4c9ab706/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>Possibly LLVMGetGlobalContext is not a real symbol?<br></p><p>If it is a #define then it will not always get mapped by swiftc to the same symbol in Swift.<br></p><p>&gt; Hi all,<br>&gt; <br>&gt; I&#39;ve also been having trouble getting a Swift interface to LLVM&#39;s C API. The basic gist is here:<br>&gt; <br>&gt; https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 &lt;https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3&gt;<br>&gt; <br>&gt; I&#39;ve:<br>&gt; <br>&gt; - Installed LLVM via homebrew, so it lives in &quot;/usr/local/opt/llvm&quot; (I&#39;ve also built LLVM myself and have the same ).<br>&gt; - Passed &quot;-I&quot; and &quot;-L&quot; to send includes/lib paths to the &quot;-Xcc&quot; and &quot;-Xlinker&quot; flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?<br>&gt; - Added many more LLVM headers/links to the module map and continued to have the same issue.<br>&gt; <br>&gt; The linker&#39;s still having trouble. I&#39;m probably missing something very basic.<br>&gt; <br>&gt; Stephen<br>&gt; <br>&gt;&gt; On Jan 4, 2016, at 1:08 PM, Daniel Dunbar via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You can&#39;t do this via the package manager, but you can include &quot;link&quot; declarations in the module map itself which specify additional linker arguments to plumb through when that module is used. See:<br>&gt;&gt;   http://clang.llvm.org/docs/Modules.html#link-declaration &lt;http://clang.llvm.org/docs/Modules.html#link-declaration&gt;<br>&gt;&gt; <br>&gt;&gt; Here is a concrete example, which is how Swift knows to automatically link libpthread and libdl when Glibc is used:<br>&gt;&gt;   https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in &lt;https://github.com/apple/swift/blob/master/stdlib/public/Glibc/module.map.in&gt;<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 1, 2016, at 4:48 PM, Ilija Tovilo via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote: <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Happy new year everyone! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m writing a wrapper around the LLVM-C API for Swift and thought it’d be fun to use the Swift Package Manager.<br>&gt;&gt;&gt; So I created a repository for the module.modulemap that includes the relevant .h files (as instructed in Documentation/SystemModules.md in the GitHub repository).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The package itself compiles fine and building the project that includes it works too, except that it doesn’t link. <br>&gt;&gt;&gt; The problem is that you have to pass some LLVM linker flags and I have no idea how to do that with the Swift Package Manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve searched the tutorials, documentation and the source code but couldn’t find a solution.<br>&gt;&gt;&gt; Is there a way to add linker flags / compile flags to your Package.swift file?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It would be helpful to pass those flags manually, at least until the package manager is mature enough to handle those things on its own.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for the help!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160222/7905b751/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 1:06 PM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt; <br>&gt; Possibly LLVMGetGlobalContext is not a real symbol?<br>&gt; <br>&gt; If it is a #define then it will not always get mapped by swiftc to the same symbol in Swift.<br></p><p>Hm, it definitely appears to be there:<br></p><p>  ~ $ nm -g /usr/local/opt/llvm/lib/libLLVMCore.a | grep LLVMGetGlobalContext<br>  0000000000000081 T _LLVMGetGlobalContext<br></p><p>And the matching header definition:<br></p><p>  ~ $ grep LLVMGetGlobalContext /usr/local/opt/llvm/include/llvm-c/Core.h<br>  LLVMContextRef LLVMGetGlobalContext(void);<br></p><p>Stephen<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160222/fa96dcea/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>February 23, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 7:44 AM, Stephen Celis via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;ve also been having trouble getting a Swift interface to LLVM&#39;s C API. The basic gist is here:<br>&gt; <br>&gt; https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3 &lt;https://gist.github.com/stephencelis/5de13eeb9743e7a3aed3&gt;<br>&gt; <br>&gt; I&#39;ve:<br>&gt; <br>&gt; - Installed LLVM via homebrew, so it lives in &quot;/usr/local/opt/llvm&quot; (I&#39;ve also built LLVM myself and have the same ).<br>&gt; - Passed &quot;-I&quot; and &quot;-L&quot; to send includes/lib paths to the &quot;-Xcc&quot; and &quot;-Xlinker&quot; flags. (Can a module map or package be configured directly with these paths? Or do all dependent projects need to use these flags, as well?<br>&gt; - Added many more LLVM headers/links to the module map and continued to have the same issue.<br>&gt; <br>&gt; The linker&#39;s still having trouble. I&#39;m probably missing something very basic.<br></p><p>Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don&#39;t see anything like `-Xlinker -lLLVMCore`. <br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160223/e48ef22b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d68c97e8e2f1653b54c24493caf236ae?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Stephen Celis</string> &lt;stephen.celis at gmail.com&gt;<p>February 23, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Feb 23, 2016, at 6:43 PM, Greg Parker &lt;gparker at apple.com&gt; wrote:<br>&gt; <br>&gt; Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don&#39;t see anything like `-Xlinker -lLLVMCore`. <br></p><p>Huh. I was under the impression that the module map &quot;link&quot; declaration was applied. Is that not the case? Should it be? Should I file a bug?<br></p><p>I seem to be making headway, though this means my Swift target becomes even more problematic for dependent projects to use (with a rapidly growing Makefile).<br></p><p>&gt; Use `nm -m` to get a readable description of symbol attributes like visibility. In this case &quot;T&quot; is an exported symbol in the __TEXT segment so visibility should not be a problem. If the symbol were not exported then it would be labeled &quot;t&quot;.<br></p><p><br>Ah, much nicer. Thanks for the tip!<br></p><p>Stephen<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>Swift Package Manager: Linker Flags</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>February 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt;&gt; Did you forget to actually link to libLLVMCore? I see your -L flags in that build log, but I don&#39;t see anything like `-Xlinker -lLLVMCore`. <br>&gt; <br>&gt; Huh. I was under the impression that the module map &quot;link&quot; declaration was applied. Is that not the case? Should it be? Should I file a bug?<br></p><p>Provided that the module map file specifies link “LLVMCore” then yes, you should not need to do this. If you do, then it’s a bug.<br></p><p>Try running `swift build -vv` to get full instantiation information.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
