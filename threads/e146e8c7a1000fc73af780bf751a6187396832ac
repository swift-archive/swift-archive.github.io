<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 28, 2016 at 10:00:00am</p></header><div class="content"><p>Hi everyone,<br></p><p>We’re getting close to the finish line for Swift 3, but we still have some work to do in swift-corelibs, especially swift-corelibs-foundation. I want to lay out what our goals and plans are for the next few weeks.<br></p><p>As Swift 3 has been wrapping up, an immense number of important syntax and language changes have landed which have rendered many of our source-compatibility efforts for swift-corelibs-foundation obsolete. The most important is id-as-Any (https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md&gt;). As this affects how all Objective-C API is imported, and a lot of Foundation’s API comes from Objective-C, many of our APIs have changed (for the better). There have also been constant refinements and improvements to many of the Foundation value types, and their effect on Foundation API.<br></p><p>Therefore, we are extending the deadline for swift-corelibs-foundation API changes for another 3 weeks (Aug 18), so that we can land three critical tasks:<br></p><p>1. Integrate swift-corelibs-dispatch into Foundation.<br>2. Land the URLSession implementation (https://github.com/apple/swift-corelibs-foundation/pull/426 &lt;https://github.com/apple/swift-corelibs-foundation/pull/426&gt;)<br>3. Update our API to match the final APIs shipped in Swift 3 for Darwin<br></p><p>At this time we are going to focus on just these goals. Additional implementations will have to wait until the next release (which we will start planning soon, along with the rest of the Swift 4 efforts).<br></p><p>I want to thank everyone for their hard work on the core libraries so far. We’ve accomplished an amazing amount in such a short time! Now, if we can wrap up these three things, we will be in great shape for our first official release.<br></p><p>- Tony<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160728/e14632ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>July 28, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br></p><p>Are there any lingering items in swift-corelibs-dispatch that are still pending full implementations on either Darwin or Linux?<br></p><p>Dan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Dan,<br></p><p>I believe Matt is working on getting the remaining overlay changes into Linux as we speak.<br></p><p>- Tony<br></p><p>&gt; On Jul 28, 2016, at 10:48 AM, Dan Stenmark &lt;daniel.j.stenmark at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt; <br>&gt; Are there any lingering items in swift-corelibs-dispatch that are still pending full implementations on either Darwin or Linux?<br>&gt; <br>&gt; Dan<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>July 28, 2016 at 01:00:00pm</p></header><div class="content"><p>Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;<br>&gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br></p><p>Hi Tony,<br></p><p>	Hopefully this is on the task list already, but if it isn&#39;t we should<br>add it before it gets to be too late to change the compiler...<br></p><p>	When compiling a Swift program on Linux that imports Dispatch (or<br>Foundation once the integration is done), the user has to give the extra<br>compilation flags -Xcc -fblocks to enable block support.<br></p><p>	We really need to land a change somewhere so that either (1) blocks<br>support is always on for Linux or (2) importing Dispatch or Foundation<br>automatically turns on blocks support.<br></p><p>	I have some time today and tomorrow that I could use to work on this<br>if no one is handling it already, but I&#39;m not sure how best to tackle the<br>problem.  Suggestions?<br></p><p>--dave<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160728/69fd7e76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Dave,<br></p><p>I don’t believe anyone is looking into this. If you want to do that, I think now would be the time!<br></p><p>- Tony<br></p><p>&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt; &gt; <br>&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add it before it gets to be too late to change the compiler...<br>&gt; <br>&gt; When compiling a Swift program on Linux that imports Dispatch (or Foundation once the integration is done), the user has to give the extra compilation flags -Xcc -fblocks to enable block support.<br>&gt; <br>&gt; We really need to land a change somewhere so that either (1) blocks support is always on for Linux or (2) importing Dispatch or Foundation automatically turns on blocks support.<br>&gt; <br>&gt; I have some time today and tomorrow that I could use to work on this if no one is handling it already, but I&#39;m not sure how best to tackle the problem.  Suggestions?<br>&gt; <br>&gt; --dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160728/6c54b1d2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/901d914d4288b1c11599f55e0a452e8c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Matt Wright</string> &lt;mww at apple.com&gt;<p>July 28, 2016 at 02:00:00pm</p></header><div class="content"><p>The overlay changes were merged to corelibs libdispatch this morning. <br></p><p>Sent from my iPhone.<br></p><p>&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Dave,<br>&gt; <br>&gt; I don’t believe anyone is looking into this. If you want to do that, I think now would be the time!<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;&gt; &gt; <br>&gt;&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;&gt; <br>&gt;&gt; Hi Tony,<br>&gt;&gt; <br>&gt;&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add it before it gets to be too late to change the compiler...<br>&gt;&gt; <br>&gt;&gt; When compiling a Swift program on Linux that imports Dispatch (or Foundation once the integration is done), the user has to give the extra compilation flags -Xcc -fblocks to enable block support.<br>&gt;&gt; <br>&gt;&gt; We really need to land a change somewhere so that either (1) blocks support is always on for Linux or (2) importing Dispatch or Foundation automatically turns on blocks support.<br>&gt;&gt; <br>&gt;&gt; I have some time today and tomorrow that I could use to work on this if no one is handling it already, but I&#39;m not sure how best to tackle the problem.  Suggestions?<br>&gt;&gt; <br>&gt;&gt; --dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160728/827abe7c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d747702642bd0492d9040387336153a0?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Gonzalo Larralde</string> &lt;gonzalolarralde at gmail.com&gt;<p>July 29, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>Wanted to know if there&#39;s any plan to find a solution for Auto Bridging<br>between corelibs-foundation &lt;&gt; Swift types in the same manner as it is done<br>for Obj-C.<br></p><p>There has been some discussions about this in the following PRs:<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/310<br>https://github.com/apple/swift-corelibs-foundation/pull/303<br>https://github.com/apple/swift/pull/1994<br></p><p>The inclusion of this feature will allow more non-UIKit related packages to<br>be used with almost  no changes.<br></p><p>For what I understand the main blocker here is getting this to pass through<br>Swift review (probably a more generic version of it, like _BridgeableType<br>instead of _ObjectiveCBridgeable would help?), but wanted to understand<br>first if this is a priority for the foundation team, and there is something<br>that can be done to push for this feature.<br></p><p>Thanks!<br></p><p><br>--<br>Slds,<br></p><p>Gonzalo.<br></p><p>On Thu, Jul 28, 2016 at 6:22 PM, Matt Wright via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>&gt; The overlay changes were merged to corelibs libdispatch this morning.<br>&gt;<br>&gt; Sent from my iPhone.<br>&gt;<br>&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Dave,<br>&gt;<br>&gt; I don’t believe anyone is looking into this. If you want to do that, I<br>&gt; think now would be the time!<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt; &gt;<br>&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;<br>&gt; Hi Tony,<br>&gt;<br>&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add<br>&gt; it before it gets to be too late to change the compiler...<br>&gt;<br>&gt; When compiling a Swift program on Linux that imports Dispatch (or<br>&gt; Foundation once the integration is done), the user has to give the extra<br>&gt; compilation flags -Xcc -fblocks to enable block support.<br>&gt;<br>&gt; We really need to land a change somewhere so that either (1) blocks<br>&gt; support is always on for Linux or (2) importing Dispatch or Foundation<br>&gt; automatically turns on blocks support.<br>&gt;<br>&gt; I have some time today and tomorrow that I could use to work on this if no<br>&gt; one is handling it already, but I&#39;m not sure how best to tackle the<br>&gt; problem.  Suggestions?<br>&gt;<br>&gt; --dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160729/65866d9c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 29, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Gonzalo,<br></p><p>While not a complete solution for the issues around bridging, the work on id-as-Any that I mentioned below was meant to help address these platform differences.<br></p><p>For example, let’s say you had a Foundation API that looked like this in ObjC:<br></p><p>- (void)foo:(id)x;<br></p><p>and imported like this into Swift:<br></p><p>func foo(_ x : AnyObject)<br></p><p>On Linux, attempting to call this:<br></p><p>bar.foo(“hello”)<br></p><p>would result in an error, because String is not an object type. On Darwin, String was implicitly bridged to NSString here for you.<br></p><p>Now (hopefully — I’m still working on verifying this), the above is imported like this:<br></p><p>func foo(_ x : Any)<br></p><p>which means that on Linux, this should actually work:<br></p><p>bar.foo(“hello”)<br></p><p>because String is indeed an Any. No need to do something like “hello”.bridge().<br></p><p>AnyHashable also helps. because we should be able to express API which takes untyped dictionaries with AnyHashable keys instead of NSObject keys.<br></p><p>Most of this stuff has only landed in the last week or two, so if you can give it a try and let us know how well it works out, that would be great.<br></p><p>- Tony<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md<br></p><p><br>&gt; On Jul 29, 2016, at 11:06 AM, Gonzalo Larralde &lt;gonzalolarralde at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hi everyone,<br>&gt; <br>&gt; Wanted to know if there&#39;s any plan to find a solution for Auto Bridging between corelibs-foundation &lt;&gt; Swift types in the same manner as it is done for Obj-C.<br>&gt; <br>&gt; There has been some discussions about this in the following PRs:<br>&gt; <br>&gt; https://github.com/apple/swift-corelibs-foundation/pull/310 &lt;https://github.com/apple/swift-corelibs-foundation/pull/310&gt;<br>&gt; https://github.com/apple/swift-corelibs-foundation/pull/303 &lt;https://github.com/apple/swift-corelibs-foundation/pull/303&gt;<br>&gt; https://github.com/apple/swift/pull/1994 &lt;https://github.com/apple/swift/pull/1994&gt;<br>&gt; <br>&gt; The inclusion of this feature will allow more non-UIKit related packages to be used with almost  no changes. <br>&gt; <br>&gt; For what I understand the main blocker here is getting this to pass through Swift review (probably a more generic version of it, like _BridgeableType instead of _ObjectiveCBridgeable would help?), but wanted to understand first if this is a priority for the foundation team, and there is something that can be done to push for this feature.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Slds,<br>&gt; <br>&gt; Gonzalo.<br>&gt; <br>&gt; On Thu, Jul 28, 2016 at 6:22 PM, Matt Wright via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; The overlay changes were merged to corelibs libdispatch this morning. <br>&gt; <br>&gt; Sent from my iPhone.<br>&gt; <br>&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; Hi Dave,<br>&gt;&gt; <br>&gt;&gt; I don’t believe anyone is looking into this. If you want to do that, I think now would be the time!<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Tony,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add it before it gets to be too late to change the compiler...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; When compiling a Swift program on Linux that imports Dispatch (or Foundation once the integration is done), the user has to give the extra compilation flags -Xcc -fblocks to enable block support.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We really need to land a change somewhere so that either (1) blocks support is always on for Linux or (2) importing Dispatch or Foundation automatically turns on blocks support.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have some time today and tomorrow that I could use to work on this if no one is handling it already, but I&#39;m not sure how best to tackle the problem.  Suggestions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160729/f0ed5fe0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>July 29, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks for the heads up, Tony!<br></p><p>(+cc corelibs-xctest release manager Mike Ferris)<br>Just to confirm, we are not resolving https://bugs.swift.org/browse/SR-710,<br>&quot;Generate XCTestCaseProvider entries on Linux&quot;, in time for the Swift 3<br>release. Is this correct?<br></p><p>- Brian Gesiak<br></p><p><br>On Fri, Jul 29, 2016 at 2:29 PM, Tony Parker via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi Gonzalo,<br>&gt;<br>&gt; While not a complete solution for the issues around bridging, the work on<br>&gt; id-as-Any that I mentioned below was meant to help address these platform<br>&gt; differences.<br>&gt;<br>&gt; For example, let’s say you had a Foundation API that looked like this in<br>&gt; ObjC:<br>&gt;<br>&gt; - (void)foo:(id)x;<br>&gt;<br>&gt; and imported like this into Swift:<br>&gt;<br>&gt; func foo(_ x : AnyObject)<br>&gt;<br>&gt; On Linux, attempting to call this:<br>&gt;<br>&gt; bar.foo(“hello”)<br>&gt;<br>&gt; would result in an error, because String is not an object type. On Darwin,<br>&gt; String was implicitly bridged to NSString here for you.<br>&gt;<br>&gt; Now (hopefully — I’m still working on verifying this), the above is<br>&gt; imported like this:<br>&gt;<br>&gt; func foo(_ x : Any)<br>&gt;<br>&gt; which means that on Linux, this should actually work:<br>&gt;<br>&gt; bar.foo(“hello”)<br>&gt;<br>&gt; because String is indeed an Any. No need to do something like<br>&gt; “hello”.bridge().<br>&gt;<br>&gt; AnyHashable also helps. because we should be able to express API which<br>&gt; takes untyped dictionaries with AnyHashable keys instead of NSObject keys.<br>&gt;<br>&gt; Most of this stuff has only landed in the last week or two, so if you can<br>&gt; give it a try and let us know how well it works out, that would be great.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md<br>&gt;<br>&gt;<br>&gt; On Jul 29, 2016, at 11:06 AM, Gonzalo Larralde &lt;gonzalolarralde at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Hi everyone,<br>&gt;<br>&gt; Wanted to know if there&#39;s any plan to find a solution for Auto Bridging<br>&gt; between corelibs-foundation &lt;&gt; Swift types in the same manner as it is done<br>&gt; for Obj-C.<br>&gt;<br>&gt; There has been some discussions about this in the following PRs:<br>&gt;<br>&gt; https://github.com/apple/swift-corelibs-foundation/pull/310<br>&gt; https://github.com/apple/swift-corelibs-foundation/pull/303<br>&gt; https://github.com/apple/swift/pull/1994<br>&gt;<br>&gt; The inclusion of this feature will allow more non-UIKit related packages<br>&gt; to be used with almost  no changes.<br>&gt;<br>&gt; For what I understand the main blocker here is getting this to pass<br>&gt; through Swift review (probably a more generic version of it, like<br>&gt; _BridgeableType instead of _ObjectiveCBridgeable would help?), but wanted<br>&gt; to understand first if this is a priority for the foundation team, and<br>&gt; there is something that can be done to push for this feature.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Slds,<br>&gt;<br>&gt; Gonzalo.<br>&gt;<br>&gt; On Thu, Jul 28, 2016 at 6:22 PM, Matt Wright via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; The overlay changes were merged to corelibs libdispatch this morning.<br>&gt;&gt;<br>&gt;&gt; Sent from my iPhone.<br>&gt;&gt;<br>&gt;&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;<br>&gt;&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi Dave,<br>&gt;&gt;<br>&gt;&gt; I don’t believe anyone is looking into this. If you want to do that, I<br>&gt;&gt; think now would be the time!<br>&gt;&gt;<br>&gt;&gt; - Tony<br>&gt;&gt;<br>&gt;&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;<br>&gt;&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;&gt;<br>&gt;&gt; Hi Tony,<br>&gt;&gt;<br>&gt;&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add<br>&gt;&gt; it before it gets to be too late to change the compiler...<br>&gt;&gt;<br>&gt;&gt; When compiling a Swift program on Linux that imports Dispatch (or<br>&gt;&gt; Foundation once the integration is done), the user has to give the extra<br>&gt;&gt; compilation flags -Xcc -fblocks to enable block support.<br>&gt;&gt;<br>&gt;&gt; We really need to land a change somewhere so that either (1) blocks<br>&gt;&gt; support is always on for Linux or (2) importing Dispatch or Foundation<br>&gt;&gt; automatically turns on blocks support.<br>&gt;&gt;<br>&gt;&gt; I have some time today and tomorrow that I could use to work on this if<br>&gt;&gt; no one is handling it already, but I&#39;m not sure how best to tackle the<br>&gt;&gt; problem.  Suggestions?<br>&gt;&gt;<br>&gt;&gt; --dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160729/cb8fcb32/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July 29, 2016 at 12:00:00pm</p></header><div class="content"><p>Hm, I’ll have to defer to Mike on the status of this one.<br></p><p>If it’s not in place now, we should probably schedule it for a future release.<br></p><p>- Tony<br></p><p>&gt; On Jul 29, 2016, at 11:43 AM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; Thanks for the heads up, Tony!<br>&gt; <br>&gt; (+cc corelibs-xctest release manager Mike Ferris)<br>&gt; Just to confirm, we are not resolving https://bugs.swift.org/browse/SR-710 &lt;https://bugs.swift.org/browse/SR-710&gt;, &quot;Generate XCTestCaseProvider entries on Linux&quot;, in time for the Swift 3 release. Is this correct?<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Fri, Jul 29, 2016 at 2:29 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi Gonzalo,<br>&gt; <br>&gt; While not a complete solution for the issues around bridging, the work on id-as-Any that I mentioned below was meant to help address these platform differences.<br>&gt; <br>&gt; For example, let’s say you had a Foundation API that looked like this in ObjC:<br>&gt; <br>&gt; - (void)foo:(id)x;<br>&gt; <br>&gt; and imported like this into Swift:<br>&gt; <br>&gt; func foo(_ x : AnyObject)<br>&gt; <br>&gt; On Linux, attempting to call this:<br>&gt; <br>&gt; bar.foo(“hello”)<br>&gt; <br>&gt; would result in an error, because String is not an object type. On Darwin, String was implicitly bridged to NSString here for you.<br>&gt; <br>&gt; Now (hopefully — I’m still working on verifying this), the above is imported like this:<br>&gt; <br>&gt; func foo(_ x : Any)<br>&gt; <br>&gt; which means that on Linux, this should actually work:<br>&gt; <br>&gt; bar.foo(“hello”)<br>&gt; <br>&gt; because String is indeed an Any. No need to do something like “hello”.bridge().<br>&gt; <br>&gt; AnyHashable also helps. because we should be able to express API which takes untyped dictionaries with AnyHashable keys instead of NSObject keys.<br>&gt; <br>&gt; Most of this stuff has only landed in the last week or two, so if you can give it a try and let us know how well it works out, that would be great.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md&gt;<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 11:06 AM, Gonzalo Larralde &lt;gonzalolarralde at gmail.com &lt;mailto:gonzalolarralde at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone,<br>&gt;&gt; <br>&gt;&gt; Wanted to know if there&#39;s any plan to find a solution for Auto Bridging between corelibs-foundation &lt;&gt; Swift types in the same manner as it is done for Obj-C.<br>&gt;&gt; <br>&gt;&gt; There has been some discussions about this in the following PRs:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/pull/310 &lt;https://github.com/apple/swift-corelibs-foundation/pull/310&gt;<br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/pull/303 &lt;https://github.com/apple/swift-corelibs-foundation/pull/303&gt;<br>&gt;&gt; https://github.com/apple/swift/pull/1994 &lt;https://github.com/apple/swift/pull/1994&gt;<br>&gt;&gt; <br>&gt;&gt; The inclusion of this feature will allow more non-UIKit related packages to be used with almost  no changes. <br>&gt;&gt; <br>&gt;&gt; For what I understand the main blocker here is getting this to pass through Swift review (probably a more generic version of it, like _BridgeableType instead of _ObjectiveCBridgeable would help?), but wanted to understand first if this is a priority for the foundation team, and there is something that can be done to push for this feature.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Slds,<br>&gt;&gt; <br>&gt;&gt; Gonzalo.<br>&gt;&gt; <br>&gt;&gt; On Thu, Jul 28, 2016 at 6:22 PM, Matt Wright via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; The overlay changes were merged to corelibs libdispatch this morning. <br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone.<br>&gt;&gt; <br>&gt;&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Hi Dave,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t believe anyone is looking into this. If you want to do that, I think now would be the time!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;&gt;&gt;&gt; &gt; <br>&gt;&gt;&gt;&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi Tony,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add it before it gets to be too late to change the compiler...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When compiling a Swift program on Linux that imports Dispatch (or Foundation once the integration is done), the user has to give the extra compilation flags -Xcc -fblocks to enable block support.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We really need to land a change somewhere so that either (1) blocks support is always on for Linux or (2) importing Dispatch or Foundation automatically turns on blocks support.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I have some time today and tomorrow that I could use to work on this if no one is handling it already, but I&#39;m not sure how best to tackle the problem.  Suggestions?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160729/bd94c720/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>July 30, 2016 at 02:00:00pm</p></header><div class="content"><p>I think a future release is prudent, for the following reasons:<br></p><p>1. swift-corelibs-xctest requires users to list each of their tests in an<br>`allTests` static property. However, this isn&#39;t source-incompatible with<br>Darwin XCTest. A developer could include the list on Darwin, and their<br>tests would still compile and run just fine.<br>2. We decided back in May that [this feature should be implemented by using<br>SourceKit](<br>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160502/001940.html).<br>Although while SourceKit can technically now be compiled for Linux, it has<br>a dependency upon libdispatch. To build it, we need to refactor the build<br>system to (1) first build the Swift compiler and stdlib, (2) then build<br>libdispatch, (3) finally build SourceKit. I&#39;m not certain that can be done<br>by August 18th (although I&#39;d love to hear from anyone who disagrees!).<br>3. Even if we were able to complete step (2), we&#39;d still have to integrate<br>that feature into swift-corelibs-xctest and SwiftPM, which will no doubt<br>take some additional time.<br></p><p>Still, I&#39;m looking forward to this being shipped this in Swift 3.x!<br></p><p>- Brian Gesiak<br></p><p><br>On Fri, Jul 29, 2016 at 3:41 PM, Tony Parker &lt;anthony.parker at apple.com&gt;<br>wrote:<br></p><p>&gt; Hm, I’ll have to defer to Mike on the status of this one.<br>&gt;<br>&gt; If it’s not in place now, we should probably schedule it for a future<br>&gt; release.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; On Jul 29, 2016, at 11:43 AM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt;<br>&gt; Thanks for the heads up, Tony!<br>&gt;<br>&gt; (+cc corelibs-xctest release manager Mike Ferris)<br>&gt; Just to confirm, we are not resolving https://bugs.swift.org/browse/SR-710,<br>&gt; &quot;Generate XCTestCaseProvider entries on Linux&quot;, in time for the Swift 3<br>&gt; release. Is this correct?<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt;<br>&gt; On Fri, Jul 29, 2016 at 2:29 PM, Tony Parker via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi Gonzalo,<br>&gt;&gt;<br>&gt;&gt; While not a complete solution for the issues around bridging, the work on<br>&gt;&gt; id-as-Any that I mentioned below was meant to help address these platform<br>&gt;&gt; differences.<br>&gt;&gt;<br>&gt;&gt; For example, let’s say you had a Foundation API that looked like this in<br>&gt;&gt; ObjC:<br>&gt;&gt;<br>&gt;&gt; - (void)foo:(id)x;<br>&gt;&gt;<br>&gt;&gt; and imported like this into Swift:<br>&gt;&gt;<br>&gt;&gt; func foo(_ x : AnyObject)<br>&gt;&gt;<br>&gt;&gt; On Linux, attempting to call this:<br>&gt;&gt;<br>&gt;&gt; bar.foo(“hello”)<br>&gt;&gt;<br>&gt;&gt; would result in an error, because String is not an object type. On<br>&gt;&gt; Darwin, String was implicitly bridged to NSString here for you.<br>&gt;&gt;<br>&gt;&gt; Now (hopefully — I’m still working on verifying this), the above is<br>&gt;&gt; imported like this:<br>&gt;&gt;<br>&gt;&gt; func foo(_ x : Any)<br>&gt;&gt;<br>&gt;&gt; which means that on Linux, this should actually work:<br>&gt;&gt;<br>&gt;&gt; bar.foo(“hello”)<br>&gt;&gt;<br>&gt;&gt; because String is indeed an Any. No need to do something like<br>&gt;&gt; “hello”.bridge().<br>&gt;&gt;<br>&gt;&gt; AnyHashable also helps. because we should be able to express API which<br>&gt;&gt; takes untyped dictionaries with AnyHashable keys instead of NSObject keys.<br>&gt;&gt;<br>&gt;&gt; Most of this stuff has only landed in the last week or two, so if you can<br>&gt;&gt; give it a try and let us know how well it works out, that would be great.<br>&gt;&gt;<br>&gt;&gt; - Tony<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0131-anyhashable.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 29, 2016, at 11:06 AM, Gonzalo Larralde &lt;gonzalolarralde at gmail.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; Wanted to know if there&#39;s any plan to find a solution for Auto Bridging<br>&gt;&gt; between corelibs-foundation &lt;&gt; Swift types in the same manner as it is done<br>&gt;&gt; for Obj-C.<br>&gt;&gt;<br>&gt;&gt; There has been some discussions about this in the following PRs:<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/pull/310<br>&gt;&gt; https://github.com/apple/swift-corelibs-foundation/pull/303<br>&gt;&gt; https://github.com/apple/swift/pull/1994<br>&gt;&gt;<br>&gt;&gt; The inclusion of this feature will allow more non-UIKit related packages<br>&gt;&gt; to be used with almost  no changes.<br>&gt;&gt;<br>&gt;&gt; For what I understand the main blocker here is getting this to pass<br>&gt;&gt; through Swift review (probably a more generic version of it, like<br>&gt;&gt; _BridgeableType instead of _ObjectiveCBridgeable would help?), but wanted<br>&gt;&gt; to understand first if this is a priority for the foundation team, and<br>&gt;&gt; there is something that can be done to push for this feature.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Slds,<br>&gt;&gt;<br>&gt;&gt; Gonzalo.<br>&gt;&gt;<br>&gt;&gt; On Thu, Jul 28, 2016 at 6:22 PM, Matt Wright via swift-corelibs-dev &lt;<br>&gt;&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; The overlay changes were merged to corelibs libdispatch this morning.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sent from my iPhone.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 28, 2016, at 2:03 PM, Tony Parker via swift-corelibs-dev &lt;<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hi Dave,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don’t believe anyone is looking into this. If you want to do that, I<br>&gt;&gt;&gt; think now would be the time!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Tony<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 28, 2016, at 10:50 AM, David P Grove via swift-corelibs-dev &lt;<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hi Tony,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hopefully this is on the task list already, but if it isn&#39;t we should<br>&gt;&gt;&gt; add it before it gets to be too late to change the compiler...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When compiling a Swift program on Linux that imports Dispatch (or<br>&gt;&gt;&gt; Foundation once the integration is done), the user has to give the extra<br>&gt;&gt;&gt; compilation flags -Xcc -fblocks to enable block support.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We really need to land a change somewhere so that either (1) blocks<br>&gt;&gt;&gt; support is always on for Linux or (2) importing Dispatch or Foundation<br>&gt;&gt;&gt; automatically turns on blocks support.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I have some time today and tomorrow that I could use to work on this if<br>&gt;&gt;&gt; no one is handling it already, but I&#39;m not sure how best to tackle the<br>&gt;&gt;&gt; problem.  Suggestions?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160730/72272d7f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d00f5acbaa7d24e0900e5045462e008?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Chris Bailey</string> &lt;BAILEYC at uk.ibm.com&gt;<p>August  1, 2016 at 11:00:00am</p></header><div class="content"><p>I had a quick conversation with Daniel Dunbar on this. Adding -Xcc <br>-fblocks as a default option to Swift PM (on Linux). The wrinkle is the <br>availability of the blocks runtime - it would either need to become a <br>pre-req for Swift, or needs one to be built into the package.<br></p><p>Chris<br></p><p><br></p><p><br>From:   David P Grove via swift-corelibs-dev <br>&lt;swift-corelibs-dev at swift.org&gt;<br>To:     Swift corelibs dev &lt;swift-corelibs-dev at swift.org&gt;<br>Date:   28/07/2016 18:50<br>Subject:        Re: [swift-corelibs-dev] Wrapping up Swift 3 for <br>swift-corelibs<br>Sent by:        swift-corelibs-dev-bounces at swift.org<br></p><p><br></p><p>Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt; <br>&gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br></p><p>Hi Tony,<br></p><p>Hopefully this is on the task list already, but if it isn&#39;t we should add <br>it before it gets to be too late to change the compiler...<br></p><p>When compiling a Swift program on Linux that imports Dispatch (or <br>Foundation once the integration is done), the user has to give the extra <br>compilation flags -Xcc -fblocks to enable block support.<br></p><p>We really need to land a change somewhere so that either (1) blocks <br>support is always on for Linux or (2) importing Dispatch or Foundation <br>automatically turns on blocks support.<br></p><p>I have some time today and tomorrow that I could use to work on this if no <br>one is handling it already, but I&#39;m not sure how best to tackle the <br>problem.  Suggestions?<br></p><p>--dave<br>_______________________________________________<br>swift-corelibs-dev mailing list<br>swift-corelibs-dev at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160801/530bdf6b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>August  3, 2016 at 11:00:00am</p></header><div class="content"><p>Can someone file a bug to track how we are going to resolve this issue, and outline our options? I want to make sure we have enough eyes on it to make sure we get what we need for Swift 3.<br></p><p> - Daniel<br></p><p>&gt; On Aug 1, 2016, at 3:08 AM, Chris Bailey &lt;BAILEYC at uk.ibm.com&gt; wrote:<br>&gt; <br>&gt; I had a quick conversation with Daniel Dunbar on this. Adding -Xcc -fblocks as a default option to Swift PM (on Linux). The wrinkle is the availability of the blocks runtime - it would either need to become a pre-req for Swift, or needs one to be built into the package. <br>&gt; <br>&gt; Chris<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; From:        David P Grove via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; <br>&gt; To:        Swift corelibs dev &lt;swift-corelibs-dev at swift.org&gt; <br>&gt; Date:        28/07/2016 18:50 <br>&gt; Subject:        Re: [swift-corelibs-dev] Wrapping up Swift 3 for swift-corelibs <br>&gt; Sent by:        swift-corelibs-dev-bounces at swift.org <br>&gt; <br>&gt; <br>&gt; <br>&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt; &gt; <br>&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt; <br>&gt; Hi Tony,<br>&gt; <br>&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add it before it gets to be too late to change the compiler...<br>&gt; <br>&gt; When compiling a Swift program on Linux that imports Dispatch (or Foundation once the integration is done), the user has to give the extra compilation flags -Xcc -fblocks to enable block support.<br>&gt; <br>&gt; We really need to land a change somewhere so that either (1) blocks support is always on for Linux or (2) importing Dispatch or Foundation automatically turns on blocks support.<br>&gt; <br>&gt; I have some time today and tomorrow that I could use to work on this if no one is handling it already, but I&#39;m not sure how best to tackle the problem.  Suggestions?<br>&gt; <br>&gt; --dave<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160803/40c99b34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>August  3, 2016 at 06:00:00pm</p></header><div class="content"><p>Speaking of JIRA tasks, I remembered this morning that the versions of<br>swift-corelibs-foundation and swift-corelibs-xctest expose public API that<br>does not exist in their Apple counterparts. This is because of a bug in the<br>linker that prevents us from marking attributes as private:<br></p><p>- https://bugs.swift.org/browse/SR-1129<br>- https://bugs.swift.org/browse/SR-1901<br></p><p>It would be great if we could fix this problem prior to the Swift 3<br>release, but if not, we need to be aware that some people may end up using<br>or relying upon these &quot;unintentionally public&quot; API.<br></p><p>- Brian Gesiak<br></p><p><br>On Wed, Aug 3, 2016 at 2:10 PM, Daniel Dunbar via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>&gt; Can someone file a bug to track how we are going to resolve this issue,<br>&gt; and outline our options? I want to make sure we have enough eyes on it to<br>&gt; make sure we get what we need for Swift 3.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Aug 1, 2016, at 3:08 AM, Chris Bailey &lt;BAILEYC at uk.ibm.com&gt; wrote:<br>&gt;<br>&gt; I had a quick conversation with Daniel Dunbar on this. Adding -Xcc<br>&gt; -fblocks as a default option to Swift PM (on Linux). The wrinkle is the<br>&gt; availability of the blocks runtime - it would either need to become a<br>&gt; pre-req for Swift, or needs one to be built into the package.<br>&gt;<br>&gt; Chris<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; From:        David P Grove via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt;<br>&gt; To:        Swift corelibs dev &lt;swift-corelibs-dev at swift.org&gt;<br>&gt; Date:        28/07/2016 18:50<br>&gt; Subject:        Re: [swift-corelibs-dev] Wrapping up Swift 3 for<br>&gt; swift-corelibs<br>&gt; Sent by:        swift-corelibs-dev-bounces at swift.org<br>&gt; ------------------------------<br>&gt;<br>&gt;<br>&gt;<br>&gt; Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>&gt; &gt;<br>&gt; &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br>&gt;<br>&gt; Hi Tony,<br>&gt;<br>&gt; Hopefully this is on the task list already, but if it isn&#39;t we should add<br>&gt; it before it gets to be too late to change the compiler...<br>&gt;<br>&gt; When compiling a Swift program on Linux that imports Dispatch (or<br>&gt; Foundation once the integration is done), the user has to give the extra<br>&gt; compilation flags -Xcc -fblocks to enable block support.<br>&gt;<br>&gt; We really need to land a change somewhere so that either (1) blocks<br>&gt; support is always on for Linux or (2) importing Dispatch or Foundation<br>&gt; automatically turns on blocks support.<br>&gt;<br>&gt; I have some time today and tomorrow that I could use to work on this if no<br>&gt; one is handling it already, but I&#39;m not sure how best to tackle the<br>&gt; problem.  Suggestions?<br>&gt;<br>&gt; --dave<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160803/5695a1dc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ddf7419fbdd69635522af227c08327c?s=50"></div><header><strong>Wrapping up Swift 3 for swift-corelibs</strong> from <string>David P Grove</string> &lt;groved at us.ibm.com&gt;<p>August  9, 2016 at 02:00:00pm</p></header><div class="content"><p>Bug filed:  https://bugs.swift.org/browse/SR-2309<br></p><p>I&#39;ve prototyped potential solution #2 this morning (embedding yet another<br>copy of the blocks runtime into libdispatch).    I need to do a little<br>cleanup of the build plumbing, but it is workable.<br></p><p>I have time to work on it this week once there is a consensus on the<br>approach.<br></p><p>--dave<br></p><p><br></p><p><br>From:	Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>To:	Chris Bailey &lt;BAILEYC at uk.ibm.com&gt;<br>Cc:	David P Grove/Watson/IBM at IBMUS, &quot;swift-corelibs-dev at swift.org&quot;<br>            &lt;swift-corelibs-dev at swift.org&gt;<br>Date:	08/03/2016 02:10 PM<br>Subject:	Re: [swift-corelibs-dev] Wrapping up Swift 3 for swift-corelibs<br>Sent by:	daniel_dunbar at apple.com<br></p><p><br></p><p>Can someone file a bug to track how we are going to resolve this issue, and<br>outline our options? I want to make sure we have enough eyes on it to make<br>sure we get what we need for Swift 3.<br></p><p> - Daniel<br></p><p>      On Aug 1, 2016, at 3:08 AM, Chris Bailey &lt;BAILEYC at uk.ibm.com&gt; wrote:<br></p><p>      I had a quick conversation with Daniel Dunbar on this. Adding -Xcc<br>      -fblocks as a default option to Swift PM (on Linux). The wrinkle is<br>      the availability of the blocks runtime - it would either need to<br>      become a pre-req for Swift, or needs one to be built into the<br>      package.<br></p><p>      Chris<br></p><p><br></p><p><br>      From:        David P Grove via swift-corelibs-dev &lt;<br>      swift-corelibs-dev at swift.org&gt;<br>      To:        Swift corelibs dev &lt;swift-corelibs-dev at swift.org&gt;<br>      Date:        28/07/2016 18:50<br>      Subject:        Re: [swift-corelibs-dev] Wrapping up Swift 3 for<br>      swift-corelibs<br>      Sent by:        swift-corelibs-dev-bounces at swift.org<br></p><p><br></p><p>      Tony Parker wrote on 07/28/2016 01:41:55 PM:<br>      &gt;<br>      &gt; 1. Integrate swift-corelibs-dispatch into Foundation.<br></p><p>      Hi Tony,<br></p><p>      Hopefully this is on the task list already, but if it isn&#39;t we should<br>      add it before it gets to be too late to change the compiler...<br></p><p>      When compiling a Swift program on Linux that imports Dispatch (or<br>      Foundation once the integration is done), the user has to give the<br>      extra compilation flags -Xcc -fblocks to enable block support.<br></p><p>      We really need to land a change somewhere so that either (1) blocks<br>      support is always on for Linux or (2) importing Dispatch or<br>      Foundation automatically turns on blocks support.<br></p><p>      I have some time today and tomorrow that I could use to work on this<br>      if no one is handling it already, but I&#39;m not sure how best to tackle<br>      the problem.  Suggestions?<br></p><p>      --dave<br>      _______________________________________________<br>      swift-corelibs-dev mailing list<br>      swift-corelibs-dev at swift.org<br>      https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160809/408f604c/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: graycol.gif<br>Type: image/gif<br>Size: 105 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160809/408f604c/attachment.gif&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
