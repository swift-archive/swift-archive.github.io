<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Type metadata and identity</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 23, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi, all (but especially the perf team). ChrisW and I are working on importing Objective-C generics as Swift generics &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006790.html&gt;, getting at least the bare minimum working. One interesting thing here is that Objective-C generics are type-erased, meaning that there isn&#39;t a different Class for, e.g. NSLayoutAnchor&lt;NSLayoutXAxisAnchor *&gt; and NSLayoutAnchor&lt;NSLayoutYAxisAnchor *&gt;. That means that the type metadata pointers for those two types will be identical.<br></p><p>Can anyone think of problems this will cause? Do we rely on different types having different metadata for anything other than downcasting? (See the proposal for a discussion of downcasting.)<br></p><p>Thanks,<br>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160223/2349da36/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Type metadata and identity</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>February 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 23, 2016, at 1:51 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi, all (but especially the perf team). ChrisW and I are working on importing Objective-C generics as Swift generics &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006790.html&gt;, getting at least the bare minimum working. One interesting thing here is that Objective-C generics are type-erased, meaning that there isn&#39;t a different Class for, e.g. NSLayoutAnchor&lt;NSLayoutXAxisAnchor *&gt; and NSLayoutAnchor&lt;NSLayoutYAxisAnchor *&gt;. That means that the type metadata pointers for those two types will be identical.<br>&gt; <br>&gt; Can anyone think of problems this will cause? Do we rely on different types having different metadata for anything other than downcasting? (See the proposal for a discussion of downcasting.)<br></p><p>The optimizer might try to materialize a pointer metatype pointer from an AST type and emit direct comparisons with the ‘isa’ pointer. I don’t see why that would be a problem though, since the types are runtime equivalent anyway.<br></p><p>Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160223/560d6e12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Type metadata and identity</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 23, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Feb 23, 2016, at 16:54 , Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 23, 2016, at 1:51 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi, all (but especially the perf team). ChrisW and I are working on importing Objective-C generics as Swift generics &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006790.html&gt;, getting at least the bare minimum working. One interesting thing here is that Objective-C generics are type-erased, meaning that there isn&#39;t a different Class for, e.g. NSLayoutAnchor&lt;NSLayoutXAxisAnchor *&gt; and NSLayoutAnchor&lt;NSLayoutYAxisAnchor *&gt;. That means that the type metadata pointers for those two types will be identical.<br>&gt;&gt; <br>&gt;&gt; Can anyone think of problems this will cause? Do we rely on different types having different metadata for anything other than downcasting? (See the proposal for a discussion of downcasting.)<br>&gt; <br>&gt; The optimizer might try to materialize a pointer metatype pointer from an AST type and emit direct comparisons with the ‘isa’ pointer. I don’t see why that would be a problem though, since the types are runtime equivalent anyway.<br></p><p>Right. I can imagine missed opportunities for CSE or even devirtualization, but would not expect miscompiles or changes in formally observable behavior between -O and -Onone.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160223/3fdab412/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Type metadata and identity</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>February 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Feb 23, 2016, at 4:55 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 23, 2016, at 16:54 , Andrew Trick &lt;atrick at apple.com &lt;mailto:atrick at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 23, 2016, at 1:51 PM, Jordan Rose via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi, all (but especially the perf team). ChrisW and I are working on importing Objective-C generics as Swift generics &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006790.html&gt;, getting at least the bare minimum working. One interesting thing here is that Objective-C generics are type-erased, meaning that there isn&#39;t a different Class for, e.g. NSLayoutAnchor&lt;NSLayoutXAxisAnchor *&gt; and NSLayoutAnchor&lt;NSLayoutYAxisAnchor *&gt;. That means that the type metadata pointers for those two types will be identical.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can anyone think of problems this will cause? Do we rely on different types having different metadata for anything other than downcasting? (See the proposal for a discussion of downcasting.)<br>&gt;&gt; <br>&gt;&gt; The optimizer might try to materialize a pointer metatype pointer from an AST type and emit direct comparisons with the ‘isa’ pointer. I don’t see why that would be a problem though, since the types are runtime equivalent anyway.<br>&gt; <br>&gt; Right. I can imagine missed opportunities for CSE or even devirtualization, but would not expect miscompiles or changes in formally observable behavior between -O and -Onone<br></p><p>If we do materialize the metatype, I think we could actually optimize NSLayoutAnchor&lt;NSLayoutXAxisAnchor *&gt; as if it were NSLayoutAnchor&lt;NSLayoutYAxisAnchor *&gt;. I think would only matter if we had swift extensions of one type that didn’t extend the other, right? …<br></p><p>extension NSLayoutAnchor where T : ProtocolThatNSLayoutXAxisAnchorConformsTo {<br>  // some additional overrides<br>}<br></p><p>Is that sort of type extension possible? I think we’re saved by this: <br>error: members of constrained extensions cannot be declared @objc<br></p><p>If this does turn out to be an issue, then maybe we can change the type system’s API so that the optimizer can’t ask for a metatype for an imported generic.<br></p><p>Andy <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160223/3a32c873/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
