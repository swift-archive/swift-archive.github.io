<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>February 18, 2016 at 03:00:00pm</p></header><div class="content"><p>Hello, Swift Community.<br></p><p>The review of the proposal &quot;Import Objective-C Constants as Swift Types&quot; begins now and runs through February 23rd, or this coming Tuesday.<br></p><p>The proposal is available here:<br></p><p>  https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>  https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager (me). When replying, please try to consistently top-post, keeping the proposal link at the top of the message, like so:<br></p><p>  Proposal link:<br>    https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br></p><p>  This proposal is perfect.  I can no longer imagine programming in Swift without this proposal in place.<br></p><p>  Alice wrote on 3 Ventôse:<br>  &gt; This proposal is completely in keeping with revolutionary principles.<br></p><p>Uniformity here makes my life easier, so thank you in advance.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	• What is your evaluation of the proposal?<br>	• Is the problem being addressed significant enough to warrant a change to Swift?<br>	• Does this proposal fit well with the feel and direction of Swift?<br>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available here:<br></p><p>  https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>Thanks!<br></p><p>John McCall<br>Review Manager<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160218/1075a919/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt;   Proposal link:<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br></p><p>I think it&#39;s an excellent idea. It not only improves the Swift bridging immensely, it actually improves the Objective-C APIs by making them more descriptive in a fairly natural way. It&#39;s easy for me to imagine a future version of clang warning about implicit conversions between `swift_wrapper` typedefs, which would improve even pure Objective-C code.<br></p><p>Actually, if I have one objection to this proposal, it&#39;s that the clang guys should probably take a look at it and see if they want to do something to `typedef` that helps both languages. I&#39;d be willing to lose the `enum` feature, for instance, if this were instead an `__attribute__((newtype))` which affected both Swift and C family languages.<br></p><p>I also like that this is *not* some magic that happens in the API notes, but something that goes directly into the headers which you can use yourself.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. The type weaknesses of stringly typed Objective-C APIs affect Swift API names; to use an example mentioned in the proposal, the guidelines suggest the &quot;Identifier&quot; should be dropped when `-quantityTypeForIdentifier:` is bridged to Swift, but this isn&#39;t possible when the parameter is an untyped `String`.<br></p><p>Having said that, this isn&#39;t *as* high a priority as some of the other things planned for Swift 3. If we find we need to defer something, this proposal is a good candidate.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Absolutely. Anything that strengthens the typing of bridged APIs improves their Swiftiness, and a lot of Swift code interoperates with Objective-C.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve never used automatic bridging which added type information like this, but I have been known to use type trickery to add type information which is not technically required in both Objective-C and Swift. (For instance, I previously wrote something like `NSLayoutAnchor` which used unnecessary protocols to keep you from accidentally mixing X and Y axis constraints.) Creating synthetic types purely to avoid mistakes is often very helpful.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading. I did follow the original thread, though not all that closely.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/446db4307ac0d39e08cd818906ad7af8?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Curt Clifton</string> &lt;curt at curtclifton.net&gt;<p>February 18, 2016 at 08:00:00pm</p></header><div class="content"><p>Proposal link:<br>    https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br></p><p>	• What is your evaluation of the proposal?<br></p><p>+1<br></p><p>This proposal is an improvement for both Objective-C and Swift/ObjC interop.<br></p><p>	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. The existing stringly-typed constants are a significant pain point, both from a readability standpoint and as a source of errors.<br></p><p>	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Très Swifty.<br></p><p>	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve used the typedef trick extensively in Objective-C, particularly when refactoring stringly-typed code to strong types.<br></p><p>	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I skimmed a bit of the original discussion. I read the proposal in detail.<br></p><p>Cheers,<br></p><p>Curt<br>-----------------------------------------------------------------------------<br>Curt Clifton, PhD<br>Software Engineer<br>The Omni Group<br>www.curtclifton.net<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>February 19, 2016 at 09:00:00am</p></header><div class="content"><p>Proposal link:<br>    https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br></p><p><br>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1 because it’s just awesome.<br></p><p><br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so. I never liked these APIs that use strings for something that really should be a separate type, but I understand why they exist and I also wrote code like that myself. Having an API in Objective-C that takes string values is practical because NSStrings are often easier to deal with than primitives, e.g. putting them into containers like NSArray or NSDictionary. Swift doesn’t have those limitations, so it’s a good idea to use a separate, compiler-enforceable type.<br>Not to mention the benefit of having a self-documenting API.<br></p><p><br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so. Compiler-enforceable types, short but expressive names for constants and self-documenting APIs feel like Swift to me.<br>This also opens up the possibility to write an extension for the type in question, giving those enums or structs all kinds of convenience functionality. I tend to do this a lot in my Swift enums and structs.<br></p><p><br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No, I can’t think of a similar construct that I came across.<br></p><p><br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Just a quick reading the proposal and a good night’s sleep to think about it.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd033b3ed46d65c7d7394eab52d53e6b?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Evan Maloney</string> &lt;emaloney at gilt.com&gt;<p>February 19, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>+1<br></p><p>This is an elegant solution to representing Objective-C APIs meaningfully in Swift.<br></p><p>With this feature, Swift source code looks more beautiful.<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Compiler-enforced type-safety is one of Swift&#39;s core benefits. Bugs that otherwise wouldn&#39;t be discovered until runtime are instead be caught up-front during the build. This will save lots of developers countless hours of debugging frustration!<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, for the reasons above.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A careful reading. No further study was required; I am already intimately familiar with this pain-point in Objective-C.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>February 19, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; • What is your evaluation of the proposal?<br>&gt;<br></p><p> +1, it is a sensible approach to improve the interop of Objective-C code<br>and Swift. It also improves a general weakness/wart in<br>Cocoa/Foundation/etc. with the use of NSString (etc.) constants that are<br>not always obvious in their use domain. It not only improves Swift &quot;import&quot;<br>of ObjC API but also adds some clarity to the ObjC API itself when used<br>directly.<br></p><p>• Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br></p><p>I believe so, yes.<br></p><p><br>&gt; • Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes it fits well.<br></p><p><br>&gt; • If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt;<br></p><p>N/A<br></p><p><br>&gt; • How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br></p><p>A careful reading of the proposal and quick spot review of various<br>Cocoa/etc. headers to understand the problem domain more fully.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160219/c416e636/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e9b374b9587bd8da1a1a027c8716ac0d?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Rod Brown</string> &lt;rodney.brown6 at icloud.com&gt;<p>February 20, 2016 at 06:00:00pm</p></header><div class="content"><p>• What is your evaluation of the proposal?<br>+1. Love it. This is a sticking point when programming in Swift with Obj-C APIs and this technique to import them is clear and very sensible.<br></p><p>• Is the problem being addressed significant enough to warrant a change to Swift?<br>In the use of Obj-C APIs, yes. While this isn’t really core Swift, the area of the bridge that is related definitely would benefit from this.<br></p><p>• Does this proposal fit well with the feel and direction of Swift?<br>Absolutely. This will make Obj-C APIs feel a lot cleaner and simpler in Swift.<br></p><p>• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I’ve never had much experience with bridging between languages, but from everything I’ve seen so far, this makes sense to implement.<br></p><p>• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Read the proposal, and have kept up to day with the discussion on Swift evolution,<br></p><p>Rod<br></p><p><br>&gt; On 19 Feb 2016, at 10:41 AM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello, Swift Community.<br>&gt; <br>&gt; The review of the proposal &quot;Import Objective-C Constants as Swift Types&quot; begins now and runs through February 23rd, or this coming Tuesday.<br>&gt; <br>&gt; The proposal is available here:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager (me). When replying, please try to consistently top-post, keeping the proposal link at the top of the message, like so:<br>&gt; <br>&gt;   Proposal link:<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br>&gt; <br>&gt;   This proposal is perfect.  I can no longer imagine programming in Swift without this proposal in place.<br>&gt; <br>&gt;   Alice wrote on 3 Ventôse:<br>&gt;   &gt; This proposal is completely in keeping with revolutionary principles.<br>&gt; <br>&gt; Uniformity here makes my life easier, so thank you in advance.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available here:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; John McCall<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160220/cb2bd29f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d92e9730c561c120200f34e7e50ed46?s=50"></div><header><strong>Review: Import Objective-C Constants as Swift Types</strong> from <string>Jeff Kelley</string> &lt;slaunchaman at gmail.com&gt;<p>March  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi John,<br></p><p>	What’s the status of this review?<br></p><p><br>Jeff Kelley<br></p><p>SlaunchaMan at gmail.com | @SlaunchaMan &lt;https://twitter.com/SlaunchaMan&gt; | jeffkelley.org &lt;http://jeffkelley.org/&gt;<br>&gt; On Feb 18, 2016, at 6:41 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello, Swift Community.<br>&gt; <br>&gt; The review of the proposal &quot;Import Objective-C Constants as Swift Types&quot; begins now and runs through February 23rd, or this coming Tuesday.<br>&gt; <br>&gt; The proposal is available here:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;   https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager (me). When replying, please try to consistently top-post, keeping the proposal link at the top of the message, like so:<br>&gt; <br>&gt;   Proposal link:<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md&gt;<br>&gt; <br>&gt;   This proposal is perfect.  I can no longer imagine programming in Swift without this proposal in place.<br>&gt; <br>&gt;   Alice wrote on 3 Ventôse:<br>&gt;   &gt; This proposal is completely in keeping with revolutionary principles.<br>&gt; <br>&gt; Uniformity here makes my life easier, so thank you in advance.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	• What is your evaluation of the proposal?<br>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available here:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; John McCall<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160307/c03b5da8/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
