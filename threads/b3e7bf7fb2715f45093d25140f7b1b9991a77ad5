<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Trying to work out how default parameters work</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 02:00:00am</p></header><div class="content"><p>My first question is simply this: is this the best place for the sort of question I’m about to ask? Is there an IRC channel or Slack or something where people who are working with Swift’s compiler internals are hanging out? Are people on Twitter (hi, Joe Groff!) going to mind if I pester them with random weird questions about compiler guts? <br></p><p>With the idea in mind that the most important thing I want to find out is “where do I ask things like this?”, here goes.<br></p><p>*****<br></p><p>Based on this post &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151130/000518.html&gt;, I’m trying to make memberwise initializers give default values to parameters which have are initialized in their declaration. This is basically just a quick prototype to (a) learn about how the Swift compiler works, and (b) try to figure out what the implementation issues are going to be like. (For instance, I’ve already noticed that if two properties are declared in the same tuple, it may be difficult to grab their default values.)<br></p><p>My initial approach—which I’m well aware is probably all wrong—is to grab the Expr from the property’s pattern binding and then attach it to the parameter tuple as a default argument. I didn’t see any obvious way to clone an Expr, so I’m basically just using the same instance and hoping for the best.<br></p><p>--- a/lib/Sema/CodeSynthesis.cpp<br>+++ b/lib/Sema/CodeSynthesis.cpp<br>@@ -1952,13 +1952,27 @@ ConstructorDecl *swift::createImplicitConstructor(TypeChecker &amp;tc,<br>      auto *arg = new (context) ParamDecl(/*IsLet*/true, Loc, var-&gt;getName(),<br>                                          Loc, var-&gt;getName(), varType, decl);<br>      arg-&gt;setImplicit();<br>+      <br>+      auto initKind = DefaultArgumentKind::None;<br>+      ExprHandle * initExpr = nullptr;<br>+      <br>+      // Is this property&#39;s default simple enough to copy?<br>+      auto *varPatternBinding = var-&gt;getParentPatternBinding();<br>+      if (varPatternBinding &amp;&amp; varPatternBinding-&gt;getNumPatternEntries() == 1) {<br>+        auto * init = varPatternBinding-&gt;getInit(0);<br>+        if(init) {<br>+          initExpr = ExprHandle::get(context, init);<br>+          initKind = DefaultArgumentKind::Normal;<br>+        }<br>+      }<br>+      <br>      argNames.push_back(var-&gt;getName());<br>      Pattern *pattern = new (context) NamedPattern(arg);<br>      pattern-&gt;setImplicit();<br>      TypeLoc tyLoc = TypeLoc::withoutLoc(varType);<br>      pattern = new (context) TypedPattern(pattern, tyLoc);<br>      patternElts.push_back(TuplePatternElt(var-&gt;getName(), SourceLoc(),<br>-                                            pattern, false));<br>+                                            pattern, false, SourceLoc(), initExpr, initKind));<br>    }<br>  }<br></p><p>This sort of works in that -dump-ast and -print-ast look right, but when I let the rest of the compiler run, I get a crash half a dozen calls down from SILGenModule::emitDefaultArgGenerator(). Apparently initExpr’s type is null, causing an earth-shattering kaboom.<br></p><p>My working theory is that, because createImplicitConstructor() is called during type checking, some part of the type check, or some earlier pass in the compiler, is not being performed which would normally infer the types of the default values. But I’m really flying blind here, so it could very well be that I’m abusing the AST in some horrible way or missing some step I should obviously be performing. (I did notice, for instance, that the doc comment on ExprHandle is vaguely gesturing at the idea that an expression might be connected to the same AST in two different places.)<br></p><p>So what I’d like to know is:<br></p><p>1) Again, what’s the best venue for these sorts of “I’ve just stumbled into a maze of twisty little passages&quot; questions?<br>2) Is there any documentation on the AST design in general, or the implementation of TuplePattern and default values in particular, that can help me figure out this part of the code?<br>3) Does anyone recognize what might be happening here?<br></p><p>Thanks,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Trying to work out how default parameters work</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  8, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 2:43 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; My first question is simply this: is this the best place for the sort of question I’m about to ask? Is there an IRC channel or Slack or something where people who are working with Swift’s compiler internals are hanging out? Are people on Twitter (hi, Joe Groff!) going to mind if I pester them with random weird questions about compiler guts? <br></p><p>This is definitely the best place to ask implementation questions. 140 characters isn&#39;t great for deep dives on compiler internals.<br></p><p>-Joe<br></p><p>&gt; With the idea in mind that the most important thing I want to find out is “where do I ask things like this?”, here goes.<br>&gt; <br>&gt; *****<br>&gt; <br>&gt; Based on this post &lt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151130/000518.html&gt;, I’m trying to make memberwise initializers give default values to parameters which have are initialized in their declaration. This is basically just a quick prototype to (a) learn about how the Swift compiler works, and (b) try to figure out what the implementation issues are going to be like. (For instance, I’ve already noticed that if two properties are declared in the same tuple, it may be difficult to grab their default values.)<br>&gt; <br>&gt; My initial approach—which I’m well aware is probably all wrong—is to grab the Expr from the property’s pattern binding and then attach it to the parameter tuple as a default argument. I didn’t see any obvious way to clone an Expr, so I’m basically just using the same instance and hoping for the best.<br>&gt; <br>&gt; --- a/lib/Sema/CodeSynthesis.cpp<br>&gt; +++ b/lib/Sema/CodeSynthesis.cpp<br>&gt; @@ -1952,13 +1952,27 @@ ConstructorDecl *swift::createImplicitConstructor(TypeChecker &amp;tc,<br>&gt;      auto *arg = new (context) ParamDecl(/*IsLet*/true, Loc, var-&gt;getName(),<br>&gt;                                          Loc, var-&gt;getName(), varType, decl);<br>&gt;      arg-&gt;setImplicit();<br>&gt; +      <br>&gt; +      auto initKind = DefaultArgumentKind::None;<br>&gt; +      ExprHandle * initExpr = nullptr;<br>&gt; +      <br>&gt; +      // Is this property&#39;s default simple enough to copy?<br>&gt; +      auto *varPatternBinding = var-&gt;getParentPatternBinding();<br>&gt; +      if (varPatternBinding &amp;&amp; varPatternBinding-&gt;getNumPatternEntries() == 1) {<br>&gt; +        auto * init = varPatternBinding-&gt;getInit(0);<br>&gt; +        if(init) {<br>&gt; +          initExpr = ExprHandle::get(context, init);<br>&gt; +          initKind = DefaultArgumentKind::Normal;<br>&gt; +        }<br>&gt; +      }<br>&gt; +      <br>&gt;      argNames.push_back(var-&gt;getName());<br>&gt;      Pattern *pattern = new (context) NamedPattern(arg);<br>&gt;      pattern-&gt;setImplicit();<br>&gt;      TypeLoc tyLoc = TypeLoc::withoutLoc(varType);<br>&gt;      pattern = new (context) TypedPattern(pattern, tyLoc);<br>&gt;      patternElts.push_back(TuplePatternElt(var-&gt;getName(), SourceLoc(),<br>&gt; -                                            pattern, false));<br>&gt; +                                            pattern, false, SourceLoc(), initExpr, initKind));<br>&gt;    }<br>&gt;  }<br>&gt; <br>&gt; This sort of works in that -dump-ast and -print-ast look right, but when I let the rest of the compiler run, I get a crash half a dozen calls down from SILGenModule::emitDefaultArgGenerator(). Apparently initExpr’s type is null, causing an earth-shattering kaboom.<br>&gt; <br>&gt; My working theory is that, because createImplicitConstructor() is called during type checking, some part of the type check, or some earlier pass in the compiler, is not being performed which would normally infer the types of the default values. But I’m really flying blind here, so it could very well be that I’m abusing the AST in some horrible way or missing some step I should obviously be performing. (I did notice, for instance, that the doc comment on ExprHandle is vaguely gesturing at the idea that an expression might be connected to the same AST in two different places.)<br>&gt; <br>&gt; So what I’d like to know is:<br>&gt; <br>&gt; 1) Again, what’s the best venue for these sorts of “I’ve just stumbled into a maze of twisty little passages&quot; questions?<br>&gt; 2) Is there any documentation on the AST design in general, or the implementation of TuplePattern and default values in particular, that can help me figure out this part of the code?<br>&gt; 3) Does anyone recognize what might be happening here?<br>&gt; <br>&gt; Thanks,<br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
