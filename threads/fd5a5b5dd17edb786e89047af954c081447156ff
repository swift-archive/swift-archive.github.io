<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Jul 22 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Jul 22, 2016 at 8:45 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;swift-evolution at swift.org &lt;mailto:<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt;&gt; But<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt; &gt;&gt; name.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt;&gt; real<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; benefit.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt; &gt;&gt; consider<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt; &gt;&gt; most users<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt;&gt; impression<br>&gt;&gt; &gt;&gt; as I did.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt; &gt;&gt; bikesheding<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; &gt;&gt; &gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt; collapse<br>&gt;&gt; &gt;&gt; &gt;&gt; it with ===.<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt; &gt;&gt; will be derived from<br>&gt;&gt; &gt;&gt; &gt; &lt;=&gt;,<br>&gt;&gt; &gt;&gt; &gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt; &gt;&gt; &gt; customization.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   /// Two references are identical if they refer to the same<br>&gt;&gt; &gt;&gt;   /// instance.<br>&gt;&gt; &gt;&gt;   ///<br>&gt;&gt; &gt;&gt;   /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt; &gt;&gt;   ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt; &gt;&gt;   func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt; &gt;&gt;     ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   /// Supports testing that two values of `Self` are identical<br>&gt;&gt; &gt;&gt;   ///<br>&gt;&gt; &gt;&gt;   /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt; &gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;   /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;   /// guarantee.<br>&gt;&gt; &gt;&gt;   ///<br>&gt;&gt; &gt;&gt;   /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt; &gt;&gt;   ///   instances.<br>&gt;&gt; &gt;&gt;   /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt; &gt;&gt;   ///   forwards to `===`.<br>&gt;&gt; &gt;&gt;   /// - Note: Types that require domain-specific `==`<br>&gt;&gt; &gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;   ///   point) should define a more-specific overload of `==`,<br>&gt;&gt; &gt;&gt;   ///   which will be used in contexts where the static type is<br>&gt;&gt; &gt;&gt;   ///   known to the compiler.<br>&gt;&gt; &gt;&gt;   /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt; &gt;&gt;   ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt; &gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;   ///   `==`.<br>&gt;&gt; &gt;&gt;   protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt; &gt;&gt;     func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   /// Default definition of `==` for Identifiable types.<br>&gt;&gt; &gt;&gt;   func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt; &gt;&gt;     return lhs === rhs<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   /// Conforming types have a default total ordering.<br>&gt;&gt; &gt;&gt;   ///<br>&gt;&gt; &gt;&gt;   /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt; &gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;   /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;   /// guarantee.<br>&gt;&gt; &gt;&gt;   ///<br>&gt;&gt; &gt;&gt;   /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt; &gt;&gt;   ///   instances.<br>&gt;&gt; &gt;&gt;   /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt; &gt;&gt;   ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt; &gt;&gt;   ///   iff `a === b`.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but<br>&gt;&gt; &gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign<br>&gt;&gt; &gt; of zero (so +0 = −0)&quot;.<br>&gt;&gt;<br>&gt;&gt; By “comparisons” they mean the traditional comparison operators, not all<br>&gt;&gt; possible comparisons you might want to do.<br>&gt;&gt;<br>&gt;<br>&gt; I don&#39;t believe so, but I could be corrected by Steve. <br></p><p>They can&#39;t legislate the comparisons that you can possibly make. For<br>example, code is allowed to compare bit representations.  That<br>comparison would of course distinguish &#39;+0&#39; from &#39;-0&#39;, since floats have<br>to store a sign bit!<br></p><p>&gt; They list 26 comparison relations and don&#39;t go into what they call `=`<br>&gt; until later, so I take than as an example.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; That single equal sign in their text corresponds to == in the world<br>&gt;&gt; being proposed, so that&#39;s fine.<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;   /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt; &gt;&gt;   ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt; &gt;&gt;   /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt; &gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;   ///   point) should define more-specific overloads of those<br>&gt;&gt; &gt;&gt;   ///   operators, which will be used in contexts where the<br>&gt;&gt; &gt;&gt;   ///   static type is known to the compiler.<br>&gt;&gt; &gt;&gt;   /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt; &gt;&gt;   ///   comparison operators to compare conforming instances;<br>&gt;&gt; &gt;&gt;   ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt; &gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;   ///   the other operators.<br>&gt;&gt; &gt;&gt;   protocol Comparable : Identifiable {<br>&gt;&gt; &gt;&gt;     func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;   /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt; &gt;&gt;   extension Comparable {<br>&gt;&gt; &gt;&gt;     static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;       return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt; &gt;&gt;     }<br>&gt;&gt; &gt;&gt;     static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;       return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt; &gt;&gt;     }<br>&gt;&gt; &gt;&gt;     static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;       return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt; &gt;&gt;     }<br>&gt;&gt; &gt;&gt;     static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;       return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt; &gt;&gt;     }<br>&gt;&gt; &gt;&gt;   }<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt; &gt;&gt; “opportunities” to define<br>&gt;&gt; &gt;&gt; &gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt; &gt;&gt; Otherwise we should make<br>&gt;&gt; &gt;&gt; &gt; areSame === again™!<br>&gt;&gt; &gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==`<br>&gt;&gt; is<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different<br>&gt;&gt; things.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context<br>&gt;&gt; (independent<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the<br>&gt;&gt; gist.<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; &gt;&gt; Dave<br>&gt;&gt; &gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Dave<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:09 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; On Fri, Jul 22, 2016 at 8:45 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; &gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user<br>&gt; to<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt; &gt;&gt; But<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a<br>&gt; better<br>&gt; &gt;&gt; &gt;&gt; name.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt; &gt;&gt; real<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; benefit.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we<br>&gt; don’t<br>&gt; &gt;&gt; &gt;&gt; consider<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear<br>&gt; is<br>&gt; &gt;&gt; &gt;&gt; most users<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt; &gt;&gt; impression<br>&gt; &gt;&gt; &gt;&gt; as I did.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt; &gt;&gt; &gt;&gt; bikesheding<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt; &gt;&gt; collapse<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; it with ===.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; To spell this out (because I had to think about it for a second):<br>&gt; ===<br>&gt; &gt;&gt; &gt;&gt; will be derived from<br>&gt; &gt;&gt; &gt;&gt; &gt; &lt;=&gt;,<br>&gt; &gt;&gt; &gt;&gt; &gt; but also becomes default implementation for ==, which remains open<br>&gt; for<br>&gt; &gt;&gt; &gt;&gt; &gt; customization.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; I was imagining roughly this (untested):<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   /// Two references are identical if they refer to the same<br>&gt; &gt;&gt; &gt;&gt;   /// instance.<br>&gt; &gt;&gt; &gt;&gt;   ///<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: Classes with a more-refined notion of “identical”<br>&gt; &gt;&gt; &gt;&gt;   ///   should conform to `Identifiable` and implement `===`.<br>&gt; &gt;&gt; &gt;&gt;   func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;     ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt; &gt;&gt; &gt;&gt;   }<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   /// Supports testing that two values of `Self` are identical<br>&gt; &gt;&gt; &gt;&gt;   ///<br>&gt; &gt;&gt; &gt;&gt;   /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt; &gt;&gt; &gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt; &gt;&gt;   /// type can document that specific observable characteristics<br>&gt; &gt;&gt; &gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt; &gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt; &gt;&gt;   /// guarantee.<br>&gt; &gt;&gt; &gt;&gt;   ///<br>&gt; &gt;&gt; &gt;&gt;   /// - Requires: `===` induces an equivalence relation over<br>&gt; &gt;&gt; &gt;&gt;   ///   instances.<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: conforming types will gain an `==` operator that<br>&gt; &gt;&gt; &gt;&gt;   ///   forwards to `===`.<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: Types that require domain-specific `==`<br>&gt; &gt;&gt; &gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt; &gt;&gt;   ///   point) should define a more-specific overload of `==`,<br>&gt; &gt;&gt; &gt;&gt;   ///   which will be used in contexts where the static type is<br>&gt; &gt;&gt; &gt;&gt;   ///   known to the compiler.<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: Generic code should usually use `==` to compare<br>&gt; &gt;&gt; &gt;&gt;   ///   conforming instances; that will always dispatch to `===`<br>&gt; &gt;&gt; &gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt; &gt;&gt;   ///   `==`.<br>&gt; &gt;&gt; &gt;&gt;   protocol Identifiable { // née Equatable name is negotiable<br>&gt; &gt;&gt; &gt;&gt;     func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt; &gt;&gt; &gt;&gt;   }<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   /// Default definition of `==` for Identifiable types.<br>&gt; &gt;&gt; &gt;&gt;   func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;     return lhs === rhs<br>&gt; &gt;&gt; &gt;&gt;   }<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   /// Conforming types have a default total ordering.<br>&gt; &gt;&gt; &gt;&gt;   ///<br>&gt; &gt;&gt; &gt;&gt;   /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt; &gt;&gt; &gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt; &gt;&gt;   /// type can document that specific observable characteristics<br>&gt; &gt;&gt; &gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt; &gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt; &gt;&gt;   /// guarantee.<br>&gt; &gt;&gt; &gt;&gt;   ///<br>&gt; &gt;&gt; &gt;&gt;   /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt; &gt;&gt; &gt;&gt;   ///   instances.<br>&gt; &gt;&gt; &gt;&gt;   /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt; &gt;&gt; &gt;&gt;   ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt; &gt;&gt; &gt;&gt;   ///   iff `a === b`.<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; *but<br>&gt; &gt;&gt; &gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the<br>&gt; sign<br>&gt; &gt;&gt; &gt; of zero (so +0 = −0)&quot;.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; By “comparisons” they mean the traditional comparison operators, not all<br>&gt; &gt;&gt; possible comparisons you might want to do.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I don&#39;t believe so, but I could be corrected by Steve.<br>&gt;<br>&gt; They can&#39;t legislate the comparisons that you can possibly make. For<br>&gt; example, code is allowed to compare bit representations.  That<br>&gt; comparison would of course distinguish &#39;+0&#39; from &#39;-0&#39;, since floats have<br>&gt; to store a sign bit!<br></p><p><br>Sorry, that&#39;s not what I meant--actually, I&#39;m not terribly sure what I<br>meant to say there. Please ignore.<br></p><p><br>&gt; &gt; They list 26 comparison relations and don&#39;t go into what they call `=`<br>&gt; &gt; until later, so I take than as an example.<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; That single equal sign in their text corresponds to == in the world<br>&gt; &gt;&gt; being proposed, so that&#39;s fine.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt; &gt;&gt; &gt;&gt;   ///   operators defined in terms of `&lt;=&gt;`.<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt; &gt;&gt; &gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt; &gt;&gt;   ///   point) should define more-specific overloads of those<br>&gt; &gt;&gt; &gt;&gt;   ///   operators, which will be used in contexts where the<br>&gt; &gt;&gt; &gt;&gt;   ///   static type is known to the compiler.<br>&gt; &gt;&gt; &gt;&gt;   /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt; &gt;&gt; &gt;&gt;   ///   comparison operators to compare conforming instances;<br>&gt; &gt;&gt; &gt;&gt;   ///   the result will always be supplied by `&lt;=&gt;`<br>&gt; &gt;&gt; &gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt; &gt;&gt;   ///   the other operators.<br>&gt; &gt;&gt; &gt;&gt;   protocol Comparable : Identifiable {<br>&gt; &gt;&gt; &gt;&gt;     func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt; &gt;&gt; &gt;&gt;   }<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt;   /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt; &gt;&gt; &gt;&gt;   extension Comparable {<br>&gt; &gt;&gt; &gt;&gt;     static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;       return (lhs &lt;=&gt; rhs) == .ascending<br>&gt; &gt;&gt; &gt;&gt;     }<br>&gt; &gt;&gt; &gt;&gt;     static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;       return (rhs &lt;=&gt; lhs) != .ascending<br>&gt; &gt;&gt; &gt;&gt;     }<br>&gt; &gt;&gt; &gt;&gt;     static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;       return (lhs &lt;=&gt; rhs) == .descending<br>&gt; &gt;&gt; &gt;&gt;     }<br>&gt; &gt;&gt; &gt;&gt;     static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt; &gt;&gt;       return (rhs &lt;=&gt; lhs) != .descending<br>&gt; &gt;&gt; &gt;&gt;     }<br>&gt; &gt;&gt; &gt;&gt;   }<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; I like this idea. If we keep === as a separate thing, now users<br>&gt; have 3<br>&gt; &gt;&gt; &gt;&gt; “opportunities” to define<br>&gt; &gt;&gt; &gt;&gt; &gt; equality. The must be few, if any, use cases for this.<br>&gt; &gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt; Would love to see if anyone on the list can give us an example.<br>&gt; &gt;&gt; &gt;&gt; Otherwise we should make<br>&gt; &gt;&gt; &gt;&gt; &gt; areSame === again™!<br>&gt; &gt;&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via<br>&gt; swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt; &gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static<br>&gt; `==`<br>&gt; &gt;&gt; is<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==`<br>&gt; in<br>&gt; &gt;&gt; the<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different<br>&gt; &gt;&gt; things.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context<br>&gt; &gt;&gt; (independent<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in<br>&gt; the<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a<br>&gt; gist.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps -<br>&gt; though<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the<br>&gt; &gt;&gt; gist.<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:<br>&gt; &gt;&gt; swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; Dave<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt; &gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;&gt; --<br>&gt; &gt;&gt; &gt;&gt; Dave<br>&gt; &gt;&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; --<br>&gt; &gt;&gt; Dave<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/55dad518/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
