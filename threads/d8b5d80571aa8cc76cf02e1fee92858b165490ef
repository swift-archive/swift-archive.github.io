<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>June 21, 2016 at 07:00:00pm</p></header><div class="content"><p>&lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;<br></p><p>Alternative names:<br></p><p>func infiniteLoop() -&gt; _ { // Use an underscore instead?<br>    while true {}<br>}<br></p><p>func infiniteLoop() -&gt; Unreachable {<br>    while true {}<br>}<br></p><p>func infiniteLoop() -&gt; Unreachable&lt;Void&gt; {<br>    while true {}<br>}<br></p><p>Issues:<br></p><p>* Clang and Swift 2.2 allow non-returning functions to have a non-void return type.<br></p><p>* [LibraryEvolution.rst] @noreturn is a versioned attribute, so how will this proposal affect that design?<br></p><p>&lt;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&gt;<br></p><p>-- Ben<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; * [LibraryEvolution.rst] @noreturn is a versioned attribute, so how will this proposal affect that design?<br></p><p>If library evolution permitted you to change a return type into one of its subtypes (for instance, to change an NSObject return into an NSResponder return), and if Never were a subtype-of-all-types bottom type, then you would always be able to change any return type to Never. There may be ABI reasons that this couldn&#39;t be supported—for instance, a Boolean existential has a different representation than a concrete Bool struct—but I believe it would be semantically sound.<br></p><p>(Of course, if you had to write `Any&lt;Boolean&gt;` instead of `Boolean`, the fact that you couldn&#39;t replace it with `Bool` would be a little more straightforward to understand...)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 23, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 11:01, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * [LibraryEvolution.rst] @noreturn is a versioned attribute, so how will this proposal affect that design?<br>&gt; <br>&gt; &lt;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst &lt;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&gt;&gt;<br></p><p>Thanks for bringing this up. I think we&#39;d just lose the ability to add noreturn-like behavior retroactively, which seems like not such a big loss.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/57e8a513/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>I have to say, this might be the most swifty of the swift proposals. <br></p><p>There&#39;s something about it that&#39;s elegant and beautiful, so big +1 from me. <br></p><p>I do think Never makes more sense, but I understand the clarity that NoReturn brings. <br></p><p>For a feature that most probably won&#39;t even use, maybe we could get away with it being Never...<br></p><p>Brandon <br></p><p>&gt; On Jun 21, 2016, at 1:03 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 21, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. I am for introducting a bottom type, but when it will be of more use and can be more universally designed. To me it feels like a hot-fix for something that isn&#39;t broken rather than a step forward for the language itself.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Not yet. Introducing a bottom type is a good idea, but I feel that Swift isn&#39;t there yet to design it well and universally.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Scala has Nothing and it&#39;s a true bottom type. In regards to this proposal, Scala&#39;s solution is superior.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read of the proposal + discussion.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e910871dda004717de19e83626308b5a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Tony Allevato</string> &lt;allevato at google.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>On Tue, Jun 21, 2016 at 10:04 AM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty<br>&gt; NoReturn type&quot; begins now and runs through June 27. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>+1. Encoding this behavior in the return type of a function is far more<br>natural than having an attribute that exists outside the type system. I<br>also don&#39;t think that it unduly restricts us from expanding its use into a<br>&quot;true&quot; bottom type in the future.<br></p><p>I prefer the name &quot;Never&quot; because it reads cleanly (func foo(...) -&gt; Never<br>== &quot;function foo takes ... as arguments and returns never&quot;), and it works<br>well in some of the possible future scenarios described in the proposal.<br></p><p>While &quot;Never&quot; feels slightly less suitable as a true bottom type name,<br>other alternatives like &quot;None&quot; or &quot;Nothing&quot; feel too close to existing<br>Swift concepts, like the &quot;none&quot; case in Optional. You can still argue that<br>&quot;Never&quot; works here though, in the sense that you will &quot;Never&quot; have a value<br>of that type.<br></p><p><br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br></p><p>Yes. The benefits both in user case and in simplifying the language<br>implementation are strong.<br></p><p><br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br></p><p>Yes, this moves Swift in the direction of consistency that other proposals<br>have done.<br></p><p><br></p><p>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br></p><p>        * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>Read the proposal and participated in some of the earlier discussions.<br></p><p><br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/eb769c3a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>June 22, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; Am 21.06.2016 um 19:03 schrieb Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br>I like the common assumption that when a function returns a type T, it means that the function returns a value of type T. A function that does *not* return, does not return a value of type T, for any T. Specifically, it doesn&#39;t return a value that is included in the empty set. NoReturn looks like a hack to me, whereas @noreturn tells me unambiguously that the compiler understands the meaning of the word too. And I see no value in having a first class type name for the bottom type.<br>I usually like mathematics, and I like Haskell too, but this doesn&#39;t seem to fit well with any of these. @noreturn should stay separate from any return values. In most cases, a @noreturn function returns Void, but I see no value in enforcing this.<br>I would prefer to keep the status quo and reject the proposal completely.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, there was no problem.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don&#39;t think so.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal, participated in earlier discussion and I think I understand where it is coming from. It is mathematically consistent, but so is the current @noreturn implementation as well. The current implementation is also more intuitive IMHO.<br></p><p>-Michael<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f9e638540251a5a2a70ae516ad544281?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Frederick Kellison-Linn</string> &lt;fred.kl at me.com&gt;<p>June 21, 2016 at 10:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>-1. I don&#39;t believe that the &#39;-&gt; NoReturn&#39; adequately expresses the behavior of a function.  I view the construction &#39;T -&gt; U&#39; as a contract which states &#39;give me a T and I&#39;ll give you a U&#39;. This stops making sense when U is NoReturn: &#39;give me a T and I&#39;ll give you a NoReturn (note: I won&#39;t actually give you a NoReturn)&#39;! This construction also moves the behavioral information about the function to the end of the signature, where it is more easily missed.<br></p><p> * Is the problem being addressed significant enough to warrant a change to Swift?<br>I don&#39;t believe so. The main argument against @noreturn seems to be about complexity in the compiler, and an empty/bottom NoReturn type introduces complexity of its own with regards to subtyping, and special-casing the compiler to handle functions which return a particular type.<br></p><p> * Does this proposal fit well with the feel and direction of Swift?<br>Again, not IMO. Semantic modifications to function behavior in Swift are already well encompassed by attributes. These are a well established part of the language; if @noreturn were one of few attributes that were not wanted in the language, that would be a different matter, but attributes aren&#39;t going anywhere. Furthermore, I think that swift has mostly shied away from overly clever solutions in favor of clarity. I realize the desire in increasing the power of Swift&#39;s type system, but extending it to include properties which are arguably outside of the type system altogether doesn&#39;t seem like the right direction to go in.<br></p><p> * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>-<br></p><p> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>I read through the proposal and then the initial discussion on swift-evolution. Overall, I think that the @noreturn attribute better expresses that the behavior of the function is exceptional. NoReturn feels a bit too much like a clever hack to represent a type-that-is-not-a-type.<br></p><p>Freddy<br></p><p>On Jun 21, 2016, at 10:04 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>Hello Swift community,<br></p><p>The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br></p><p> https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>       https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>   * What is your evaluation of the proposal?<br>   * Is the problem being addressed significant enough to warrant a change to Swift?<br>     * Does this proposal fit well with the feel and direction of Swift?<br>     * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>       https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p>_______________________________________________<br>swift-evolution-announce mailing list<br>swift-evolution-announce at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/e0b36a8f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6729e3608691552bd1c61373d0e5b08?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Kevin Nattinger</string> &lt;swift at nattinger.net&gt;<p>June 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 10:03 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1. <br>noreturn is logically and fundamentally an attribute of a function, not a return (pseudo-)type, and it should continue to be expressed that way. <br>If the idea of `@noreturn foo() -&gt; Int` being valid really bothers you so much, just forbid functions declared noreturn from having a specified return type (maybe even an explicit `()`/`Void`).<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No.<br>There is no problem being solved. noreturn as an attribute is clear, precedented, and easily searchable. Furthermore, I feel the proposal doesn’t even fix most of the “issues” it brings up in the motivation section— `-&gt; NoReturn throws` is no more clear than `@noreturn throws`, and `compose(exit, getExitCode)` is no more clear declared `-&gt; NoReturn` than `@noreturn`.  And it introduces ambiguity of its own. If someone defines their own empty enum, does `func foo() -&gt; MyEmptyEnum` get the same treatment as NoReturn? If not, why is it special cased? If so, <br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No.<br>We want swift to be intuitive. IMO, `@noreturn` is way more intuitive than saying you’ll return something that you can’t actually follow through with. And  everywhere else such a contradiction would be a compiler error. <br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>It unnecessarily breaks from tradition. The C family uses noreturn attributes. I haven’t seen anyone bring up language where noreturn is achieved in this manner.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the email chain, thoroughly read the proposal.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 22, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. This makes total sense. But I would recommend naming it “Never” for the same arguments as in the proposal.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, it simplifies the language by replacing a rarely used attribute by an elegant solution from the type system. I also love how Never could be used with typed throws.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yep: simplification and elegance.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>No.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A good read.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>July  1, 2016 at 04:00:00pm</p></header><div class="content"><p>+1 from me as well for the same reasons including a strong preference for naming it &quot;Never&quot; to allow using it in other places than just as return type. This would make it easy to turn it into a real bottom type in the future.<br></p><p>-Thorsten <br></p><p>&gt; Am 22.06.2016 um 01:12 schrieb David Hart via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt; <br>&gt; +1. This makes total sense. But I would recommend naming it “Never” for the same arguments as in the proposal.<br>&gt; <br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, it simplifies the language by replacing a rarely used attribute by an elegant solution from the type system. I also love how Never could be used with typed throws.<br>&gt; <br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yep: simplification and elegance.<br>&gt; <br>&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; No.<br>&gt; <br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A good read.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I like the idea, but not the name. I would prefer a more general name like `Never`.<br></p><p>If `NoReturn` becomes a universal bottom type, it&#39;s going to need a more universal name than `NoReturn` It&#39;s very narrow and specialized, so it&#39;s not appropriate for bottom types in other contexts; just think of the `NoReturn?` variable created by optional chaining, or the `[NoReturn]` array created by `map`. As soon as you take even the tiniest step away from a return value, the name doesn&#39;t really make sense anymore.<br></p><p>Therefore, I strongly suspect we&#39;ll have to change this name again in the future as `NoReturn` becomes a more powerful bottom type. I&#39;m not really looking forward to changing `@noreturn` to `-&gt; NoReturn` in Swift 3 and then changing it again to `-&gt; Never` in Swift 4, so I think we should just do it here and now.<br></p><p>I also don&#39;t like the way `NoReturn` reads. It *is* understandable, but it bluntly disobeys type naming conventions by describing not the value being returned, but the member returning it. There are many sensible names we might have given `Void` if not for C—`Nothing`, `None`, `Empty`—but I don&#39;t think anybody would advocate for `EmptyReturn`. It just isn&#39;t an appropriate type name.<br></p><p>An attribute is an adjective describing a member, and `@noreturn` (or rather, `@nonreturning`) is a perfectly fine adjective to attach to a function, so the name works fine there. But a type is a *noun* describing a *value*, and `NoReturn` is not. You are trying to cram a square peg into a round hole.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Something should be done about `@noreturn`, and this basic approach is the most elegant one available.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>The approach, but not the name. As I pointed out previously, it does not match naming conventions or even the general semantic meaning of a return type.<br></p><p>(Incidentally, another reason I like the idea of eventually having a subtype-of-all-types `Never` is that I think we should treat `UnsafePointer&lt;Never&gt;` as our &quot;pointer of uncertain type&quot; type. That is, `void *` should be imported to Swift as `UnsafePointer&lt;Never&gt;`. That would inherently prevent you from using the `pointee` property, and if you thought of `sizeof(Never)` as being infinite—a plausible interpretation since `Never` *could* be a subtype of a type of any size—it would also imply that pointer arithmetic or allocation of `Never` buffers would always overflow unless you were handling zero `Never`s.)<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used other languages with equivalents to `@noreturn`, and I think the bottom return value approach will be an improvement on that.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading of the final proposal, but I&#39;ve participated in much of the discussion about this feature.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>June 22, 2016 at 01:00:00am</p></header><div class="content"><p>Curious on the possibility of something like the following to denote a no<br>return function?<br></p><p>func foo() -&gt; !<br></p><p>...or mostly joking...<br></p><p>func foo() -&gt;💥 (for thing like fatalError)<br>func foo() -&gt; 🔃(for things like dispatch main)<br></p><p>Anyway I am generally -0.5 on this change without understanding if this<br>could be a bottom type and how that could work in the bigger picture.<br></p><p><br>-Shawn<br></p><p>On Tue, Jun 21, 2016 at 10:04 AM Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty<br>&gt; NoReturn type&quot; begins now and runs through June 27. The proposal is<br>&gt; available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a4eb96a2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>June 22, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 02:15, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Curious on the possibility of something like the following to denote a no return function?<br>&gt; <br>&gt; func foo() -&gt; !<br></p><p>See &quot;Diverging functions&quot; in &quot;The Rust Programming Language&quot;:<br></p><p>&lt;https://doc.rust-lang.org/book/functions.html#diverging-functions&gt;<br></p><p>I suggested using an underscore, but a named type could work better with optional chaining:<br></p><p>&lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19715/focus=20000&gt;<br></p><p>-- Ben<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>+1, I feel it will be very &#39;Swifty&#39; to replace magical @noreturn attribute <br>to clear special type(which then, later, probably could be used as bottom <br>type).  But I prefer &quot;Never&quot; as such type&#39;s name. IMO it&#39;s very easy to <br>teach anyone that &quot;Never&quot; can&#39;t have instance of its type so `-&gt; Never` <br>means the func will not return and it reads clearly &quot;returns never&quot;, so I <br>believe it will not confuse one after first teching of meaning of Never type.<br></p><p>On 21.06.2016 20:03, Chris Lattner via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 12:41 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, I feel it will be very &#39;Swifty&#39; to replace magical @noreturn attribute to clear special type(which then, later, probably could be used as bottom type).<br></p><p>That&#39;s the problem of this proposal IMHO. It feels like a quick-fix for the attribute, but is something that is likely to be changed once a real bottom type is introduced. I&#39;d suggest waiting until the language is ready to introduce a real bottom type that can be used more universally (generics, ...).<br></p><p>&gt;  But I prefer &quot;Never&quot; as such type&#39;s name. IMO it&#39;s very easy to teach anyone that &quot;Never&quot; can&#39;t have instance of its type so `-&gt; Never` means the func will not return and it reads clearly &quot;returns never&quot;, so I believe it will not confuse one after first teching of meaning of Never type.<br>&gt; <br>&gt; On 21.06.2016 20:03, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 22, 2016 at 02:00:00pm</p></header><div class="content"><p>On 22.06.2016 14:15, Charlie Monroe wrote:<br>&gt;<br>&gt;&gt; On Jun 22, 2016, at 12:41 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; +1, I feel it will be very &#39;Swifty&#39; to replace magical @noreturn<br>&gt;&gt; attribute to clear special type(which then, later, probably could be<br>&gt;&gt; used as bottom type).<br>&gt;<br>&gt; That&#39;s the problem of this proposal IMHO. It feels like a quick-fix for<br>&gt; the attribute, but is something that is likely to be changed once a real<br>&gt; bottom type is introduced. I&#39;d suggest waiting until the language is<br>&gt; ready to introduce a real bottom type that can be used more universally<br>&gt; (generics, ...).<br></p><p>As I understand the situation: proposal is for changing @noreturn to <br>Never(actually NoReturn, which I don&#39;t like) for Swift 3.0 to make code <br>breaking changes *now*. Then, after 3.0, we can *extend* meaning of <br>Never(if we decided) without breaking changes for @noreturn.<br></p><p>Do you want to say that &#39;Never&#39; can&#39;t be then used as bottom type if we&#39;ll <br>introduce it now just as special return type instead of @noreturn?<br></p><p>&gt;<br>&gt;&gt; But I prefer &quot;Never&quot; as such type&#39;s name. IMO it&#39;s very easy to teach<br>&gt;&gt; anyone that &quot;Never&quot; can&#39;t have instance of its type so `-&gt; Never`<br>&gt;&gt; means the func will not return and it reads clearly &quot;returns never&quot;,<br>&gt;&gt; so I believe it will not confuse one after first teching of meaning of<br>&gt;&gt; Never type.<br>&gt;&gt;<br>&gt;&gt; On 21.06.2016 20:03, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an<br>&gt;&gt;&gt; empty NoReturn type&quot; begins now and runs through June 27. The<br>&gt;&gt;&gt; proposal is available here:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>Reviews are an important part of the Swift evolution process. All reviews <br>should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt; review through constructive criticism and contribute to the<br>&gt;&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; * What is your evaluation of the proposal? * Is the problem being<br>&gt;&gt;&gt; addressed significant enough to warrant a change to Swift? * Does<br>&gt;&gt;&gt; this proposal fit well with the feel and direction of Swift? * If<br>&gt;&gt;&gt; you have used other languages or libraries with a similar feature,<br>&gt;&gt;&gt; how do you feel that this proposal compares to those? * How much<br>&gt;&gt;&gt; effort did you put into your review? A glance, a quick reading, or<br>&gt;&gt;&gt; an in-depth study?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; -Chris Lattner Review Manager<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________ swift-evolution<br>&gt;&gt;&gt; mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________ swift-evolution<br>&gt;&gt; mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 1:42 PM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; On 22.06.2016 14:15, Charlie Monroe wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 12:41 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1, I feel it will be very &#39;Swifty&#39; to replace magical @noreturn<br>&gt;&gt;&gt; attribute to clear special type(which then, later, probably could be<br>&gt;&gt;&gt; used as bottom type).<br>&gt;&gt; <br>&gt;&gt; That&#39;s the problem of this proposal IMHO. It feels like a quick-fix for<br>&gt;&gt; the attribute, but is something that is likely to be changed once a real<br>&gt;&gt; bottom type is introduced. I&#39;d suggest waiting until the language is<br>&gt;&gt; ready to introduce a real bottom type that can be used more universally<br>&gt;&gt; (generics, ...).<br>&gt; <br>&gt; As I understand the situation: proposal is for changing @noreturn to Never(actually NoReturn, which I don&#39;t like) for Swift 3.0 to make code breaking changes *now*. Then, after 3.0, we can *extend* meaning of Never(if we decided) without breaking changes for @noreturn.<br>&gt; <br>&gt; Do you want to say that &#39;Never&#39; can&#39;t be then used as bottom type if we&#39;ll introduce it now just as special return type instead of @noreturn?<br></p><p>I can live with Never. But the proposed NoReturn is a single-case solution and would eventually require a code-breaking change anyway were the bottom type implemented under a different name.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; But I prefer &quot;Never&quot; as such type&#39;s name. IMO it&#39;s very easy to teach<br>&gt;&gt;&gt; anyone that &quot;Never&quot; can&#39;t have instance of its type so `-&gt; Never`<br>&gt;&gt;&gt; means the func will not return and it reads clearly &quot;returns never&quot;,<br>&gt;&gt;&gt; so I believe it will not confuse one after first teching of meaning of<br>&gt;&gt;&gt; Never type.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 21.06.2016 20:03, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an<br>&gt;&gt;&gt;&gt; empty NoReturn type&quot; begins now and runs through June 27. The<br>&gt;&gt;&gt;&gt; proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt;&gt;&gt; review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under<br>&gt;&gt;&gt;&gt; review through constructive criticism and contribute to the<br>&gt;&gt;&gt;&gt; direction of Swift. When writing your review, here are some<br>&gt;&gt;&gt;&gt; questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * What is your evaluation of the proposal? * Is the problem being<br>&gt;&gt;&gt;&gt; addressed significant enough to warrant a change to Swift? * Does<br>&gt;&gt;&gt;&gt; this proposal fit well with the feel and direction of Swift? * If<br>&gt;&gt;&gt;&gt; you have used other languages or libraries with a similar feature,<br>&gt;&gt;&gt;&gt; how do you feel that this proposal compares to those? * How much<br>&gt;&gt;&gt;&gt; effort did you put into your review? A glance, a quick reading, or<br>&gt;&gt;&gt;&gt; an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________ swift-evolution<br>&gt;&gt;&gt;&gt; mailing list swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________ swift-evolution<br>&gt;&gt;&gt; mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>June 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 14:47, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I can live with Never. But the proposed NoReturn is a single-case solution and would eventually require a code-breaking change anyway were the bottom type implemented under a different name.<br></p><p>Excuse me, but it seems to me you might be missing one important point about the proposal: there&#39;s going to be no “the” bottom type — any enum with no cases would act as one if the proposal is accepted. The standard library would just happen name one to stand as the preferred default.<br></p><p>In other words (unless I&#39;m mistaken), no compiler magic proposed about a specific (`NoReturn` or `Never`) empty enum. All the proposed “magic” would be about uninhabited types &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md#language-design&gt; (link to specific section in the proposal) as return types.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/445a4346/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2febf4a3af60fab000109b053177f883?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Antoine Cœur</string> &lt;adigitalknight at gmail.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;<br>-1, we are introducing confusion between WHAT is returned and IF it returns<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;<br>the assumption that the attribute was superfluous was wrong, for clarity<br>reasons. So there is no significant problem addressed<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>This proposal feels like someone wants to remove &#39;@&#39; from attributes: this<br>causes confusion. I may have defined a class with name NoReturn for a<br>different use.<br></p><p>        * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>A quick reading.<br></p><p>Antoine<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/1bb6f06a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I don’t have a firm opinion supporting or opposing this proposal.  I support the general direction but also share some of the concerns that have been raised.  <br></p><p>In particular, I believe this change is positive if the core team has an underlying vision for how bottom types will fit into Swift in the long term and this proposal is well aligned with that vision.  Specific issues to consider are whether Swift will have a single bottom type, support multiple bottom types, typealias different names to a single bottom type, etc.  I do find the `Exit`, `Abort` and `InfiniteLoop` examples interesting and would like to see the advantages and disadvantages of that direction explored a bit further.<br></p><p>It is also worthwhile to consider the bottom-related discussion that took place in the generalized existentials thread where it has been noted that types such as `Any&lt;UIView, UIImage&gt;` can be viewed as a bottom type, in which case we could allow formation of such a type (there was an interesting example of a set intersection function in that thread).  <br></p><p>However, I don’t think we should make this change if the future of bottom types in Swift is still uncertain.  As noted in the proposal, `@noreturn` functions are not that common and migration is trivial.  IMO the impact is small enough that a breaking change in this area the future should be acceptable.  That would be much better than making a change now and later discovering it doesn’t align with how we would like bottom types to fit into Swift more generally (possibly resulting in another breaking change anyway).<br></p><p>The proposal alludes to the idea that Swift may consider *any* uninhabited type to be a bottom type.  If that is indeed the generally intended direction this proposal aligns well.  In that case I would support the proposal but would still like to see a bit more bike shedding around the idea of using more specific names that specify *why* the function doesn’t return as suggested in the alternatives considered.<br></p><p>One final thought is that the `/*closed*/` aspect appears like it will still be implemented with compiler magic that knows that `NoReturn` is in fact closed.  It seems worth giving consideration to making `closed` language feature  that could be used more generally allowing us to remove the comment:<br></p><p>public closed enum NoReturn {}<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think introducing a bottom type is an interesting direction that certainly fits well with Swift.  I am not certain the specific `@noreturn` use case warrants an immediate change without having a more general plan in place.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion and review threads and read the final proposal in detail.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>My feeling on this as a non-expert is that the attribute probably does the job well enough and that it is rare enough to not matter for virtually all Swift programmers. I’m less qualified to talk about the idea of a bottom type, but in reading the proposal a few times, I still can’t see what the point of that angle is from a uses-the-language-to-make-apps-rather-than-experiment-with-type-theory point of view.<br></p><p>In terms of complier implementation, I’m *entirely* unqualified, but I certainly understand the appeal to make things better/simpler/easier-to-maintain. If it helps to get rid of the attribute for this purpose, then okay, but personally I think I draw the line at declaring a single “official” NoReturn type (or Never or any other name). I don’t think that argument is compelling enough. The idea of declaring separate empty types based on circumstance is *way* more appealing to me and this was mentioned in the alternatives section. This seems like such a rare case that it would be worth it to have the extra clarity of intent from naming the return type accordingly - such as Exit or InfiniteLoop or whatever.<br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I’m not convinced, but I don’t work on the compiler. :)<br></p><p><br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think having separate empty types that clearly illustrate the intent above and beyond a single NoReturn type is a more “Swifty&quot; way to go.<br></p><p><br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>n/a<br></p><p><br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Tracked the discussion some, when possible, read the proposal a few times.<br></p><p>l8r<br>Sean<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>In terms of raw syntax, I like the idea of using an uninhabited types to indicate non-returning behavior.<br></p><p>I haven’t used a language with a ‘bottom’ type functionality, so I can’t evaluate that as an alternative.<br></p><p>I actually like the name ‘Never’ more than ‘NoReturn’, but thats mostly bike shedding. The one non-bikeshedding bit backing up the use of Never over NoReturn is that there is nothing in the language which prevents use of NoReturn in other contexts,e.g.:<br></p><p>func foo(_ n:NoReturn) {}  // Compiles but is not callable<br>var a:Optional&lt;NoReturn&gt; = nil // works, but can never be .Some(x)<br></p><p>The one catch I see here is that even documentation tools will need to understand uninhabited types in order to represent behavior to a developer, but I believe there is already a strong push away from tools built on technologies which wouldn’t have access to that information (such as using regular expressions)<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I think so - it eliminates what would need to be special rules around function declaration with @noescape, plus may allow for future subtype behaviors.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven’t used languages with bottom types before or with non-returning behavior indicated by use of certain types - I’ve only languages that annotate non-returning functions at the compiler level. However, it seems like a good way of eliminating redundant or possibly conflicting behavior as well as special rules, such as declaration of a @noreturn fatal(_ message:String)-&gt;Int, and covariance of using such a non-returning function as an argument<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading of proposal, intermittent tracking of the discussion beforehand.<br></p><p>-DW<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/3edbefc7/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>-1<br></p><p>The first “problem” given in the motivation is<br></p><p>&quot;As an orthogonal attribute of function types, its interaction must be specified with every other aspect of function types”<br></p><p>Errr, well yes, of course. Why is it a problem that orthogonal concepts are more complex to implement than non orthogonal concepts? <br></p><p>Pretending that @noreturn is just a return type is a hack coercing the type system to represent a concept that is not a type. That a function never returns is an attribute of the behaviour of the function not whatever it returns. The proposal is not answering the question “what is the best way to signify to the compiler and human reader that a function never returns” but “how do we signify to the compiler and human reader that a function never returns if we are not allowed to use the obvious self documenting solution of a function attribute?&quot;<br></p><p>Yes, it’s not only the compiler that needs to understand that a function never returns but human readers of the API too. The function attribute makes it crystal clear to humans what happens. The foo() -&gt; NoReturn works nearly as well except that, at first glance, there appears to be nothing special about it. Everything else is less clear and I would resist those proposals strongly.<br></p><p>The second “problem” given in the motivation is this:<br></p><p>&quot;Does `@noreturn throws` mean &quot;cannot return normally, but can throw&quot;, or does it mean &quot;cannot return at all?””<br></p><p>Why is this a problem? Clearly `@noreturn foo() throws` can throw an error or it wouldn’t say `throws`. There is no uncertainty here.<br></p><p>The other problem given is this &quot;Is @noreturn () -&gt; Int  allowed, and if so, does it behave differently from @noreturn () -&gt; ()?&quot;<br></p><p>Personally I would say it should be allowed and does not return. The only difference between @noreturn function that return void and ones that return something else is that the ones that return something else can be used in expressions. However, I’m struggling to think of a use case for that.  <br></p><p><br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>I don’t agree that there’s a problem.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, I think it certainly goes away from clarity.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I have used plenty of languages that have an attribute specifying noreturn behaviour but never one that expresses the concept as a type.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I’ve monitored the various threads about this.<br></p><p><br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 23, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 for all the reasons already mentioned.<br>Although, if we end up accepting this anyway, FWIW I&#39;d prefer &quot;DoesNotReturn&quot; or &quot;NeverReturns&quot; over &quot;NoReturn&quot; or &quot;Never&quot;. They both read better to me, and their imperative names help make it clearer that something is different.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jun 21, 2016, at 12:03, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type&quot; begins now and runs through June 27. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 23, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 from me on the proposal. I&#39;d prefer `Never` for the reasons given above.<br>&quot;returns Never&quot; reads unambiguously and its reusability elsewhere down the<br>road (throws Never, etc.) suggests that this might be the most optimal name.<br></p><p><br>On Thu, Jun 23, 2016 at 1:34 PM, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 for all the reasons already mentioned.<br>&gt; Although, if we end up accepting this anyway, FWIW I&#39;d prefer<br>&gt; &quot;DoesNotReturn&quot; or &quot;NeverReturns&quot; over &quot;NoReturn&quot; or &quot;Never&quot;. They both<br>&gt; read better to me, and their imperative names help make it clearer that<br>&gt; something is different.<br>&gt;<br>&gt; - Dave Sweeris<br>&gt;<br>&gt; &gt; On Jun 21, 2016, at 12:03, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of &quot;SE-0102: Remove @noreturn attribute and introduce an<br>&gt; empty NoReturn type&quot; begins now and runs through June 27. The proposal is<br>&gt; available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md<br>&gt; &gt;<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;<br>&gt; &gt; What goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;<br>&gt; &gt;    * What is your evaluation of the proposal?<br>&gt; &gt;    * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;    * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;    * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;<br>&gt; &gt; More information about the Swift evolution process is available at<br>&gt; &gt;<br>&gt; &gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;<br>&gt; &gt; Thank you,<br>&gt; &gt;<br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution-announce mailing list<br>&gt; &gt; swift-evolution-announce at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/d4e16d5c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 23, 2016 at 02:00:00pm</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md ]<br></p><p>I am already on record as being against this proposal:<br></p><p>&gt; Just because it can be modelled as a type doesn’t mean it’s the best way to represent the concept. It feels like uniformity for uniformity’s sake.<br>&gt; <br>&gt; func fatalError() -&gt; NoReturn<br>&gt; <br>&gt; @noreturn func fatalError()<br>&gt; <br>&gt; The first one probably isn&#39;t too hard to explain to a learner. The second one probably doesn’t need an explanation.<br></p><p>(http://thread.gmane.org/gmane.comp.lang.swift.evolution/19958/)<br></p><p>A few more thoughts: I don&#39;t think uninhabited types actually come up very often (though non-returning functions are also pretty rare). I&#39;m not against supporting composition for actual uninhabited types, but I don&#39;t think composition of NoReturn/Never is particularly interesting. I don&#39;t find throws&lt;Never&gt; compelling enough to add language support for it, but maybe I just can&#39;t think of a case where you want to be generic over error types.<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/b023d925/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0102: Remove @noreturn attribute and introduce an empty NoReturn type</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>June 23, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;d like to point out that while NoReturn does indicate that the function can&#39;t return, this works because a function that can&#39;t return may well declare any return type that it likes, not necessarily just NoReturn.<br></p><p>It&#39;s confusing to see `@noreturn func foo() -&gt; Int`, but it&#39;s not much better to have a `func foo() -&gt; Int` that doesn&#39;t return either.<br></p><p>I don&#39;t think that `func foo() throws -&gt; NoReturn` is much clearer either. Does foo always throw, does foo call exit, or does foo enter an endless loop?<br></p><p>It seems to me that we&#39;re only slightly moving the ambiguity, so I see no compelling reason to implement this proposal. That&#39;ll be a -1 here.<br></p><p>Félix<br></p><p>&gt; Le 23 juin 2016 à 14:15:54, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt; ]<br>&gt; <br>&gt; I am already on record as being against this proposal:<br>&gt; <br>&gt;&gt; Just because it can be modelled as a type doesn’t mean it’s the best way to represent the concept. It feels like uniformity for uniformity’s sake.<br>&gt;&gt; <br>&gt;&gt; func fatalError() -&gt; NoReturn<br>&gt;&gt; <br>&gt;&gt; @noreturn func fatalError()<br>&gt;&gt; <br>&gt;&gt; The first one probably isn&#39;t too hard to explain to a learner. The second one probably doesn’t need an explanation.<br>&gt; <br>&gt; (http://thread.gmane.org/gmane.comp.lang.swift.evolution/19958/ &lt;http://thread.gmane.org/gmane.comp.lang.swift.evolution/19958/&gt;)<br>&gt; <br>&gt; A few more thoughts: I don&#39;t think uninhabited types actually come up very often (though non-returning functions are also pretty rare). I&#39;m not against supporting composition for actual uninhabited types, but I don&#39;t think composition of NoReturn/Never is particularly interesting. I don&#39;t find throws&lt;Never&gt; compelling enough to add language support for it, but maybe I just can&#39;t think of a case where you want to be generic over error types.<br>&gt; <br>&gt; Jordan<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/44c2ab83/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
