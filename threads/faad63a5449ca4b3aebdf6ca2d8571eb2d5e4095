<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 12:00:00am</p></header><div class="content"><p>SwiftPM: Adding development package as a dependency<br></p><p>   - Proposal: SE-NNNN<br>   &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>   - Author(s): Ankit Aggarwal &lt;https://github.com/aciidb0mb3r&gt;<br>   - Status: *Awaiting review*<br>   - Review manager: TBD<br></p><p>Introduction<br></p><p>I propose to enable SwiftPM to use a package that is still under<br>development as a dependency for another package during testing and<br>development.<br>Motivation<br></p><p>During development of libraries, developers commonly want to try out their<br>module package as a dependency. This emulates the typical library use-case<br>and is currently not possible in SwiftPM without first checking in and<br>tagging that library. These extra steps, while reasonable for an<br>already-built package, are an unnecessary burden for a package that remains<br>in development.<br></p><p>Forcing the user to modify the library package inside Packages to continue<br>development or continuously reclone the package after recommiting and<br>retagging strain the process of building the library in the first place.<br>Detail Design<br></p><p>Under this proposal, the *root* package will be allowed to specify a<br>DevPackage dependency. This dependency will *not *clone the package inside<br>Packages/ or require the dependency to be under version control. This will<br>free the developer to continue iterative testing, expansion, and<br>enhancements without being tied to the current dependency system.<br></p><p>This approach limits DevPackage dependencies to local file systems. Remote<br>repositories cannot be used with this keyword.<br></p><p>The following example demonstrates what a manifest file would look like. In<br>this example, the DevPackage is specified using a local path and the<br>majorVersion is used as is for this DevPackage.<br></p><p>import PackageDescription<br>let package = Package(<br>    name: &quot;MyLibraryTester&quot;,<br>    dependencies: [<br>        .Package(url:<br>&quot;https://github.com/apple/example-package-fisheryates.git&quot;,<br>majorVersion: 1),<br>        .DevPackage(localPath: &quot;../MyAwesomeLibrary&quot;, majorVersion: 1),<br>    ]<br>)<br></p><p>Under this design:<br></p><p>   - DevPackage is limited strictly to the root package. The manifest of<br>   any dependency containing a DevPackage will fail to build.<br>   - A DevPackage is not copied inside Packages/ and does not require<br>   version control.<br>   - SwiftPM uses the DevPackage&#39;s source directory for building,<br>   permitting in-place development on the local file system.<br>   - SwiftPM disallows non-local DevPackage sources. To use a remote<br>   package, the developer must first clone a package and then specify the<br>   local path.<br>   - Version numbers are specified for DevPackage entries within the<br>   manifest file.<br>   - Should the DevPackage version not be selected after resolving the<br>   dependency graph, the build will succeed with a warning.<br></p><p>Impact on existing code<br></p><p>This proposal does not impact existing code.<br>Alternatives considered<br></p><p>I propose two possible alternatives to this problem:<br></p><p>   1. Create a executable target within the library package for development<br>   testing.<br>   2. Use XCTest to test the library.<br></p><p>Both alternate approaches permit testing a library module but they will not<br>simulate a full SwiftPM package.<br>Acknowledgements<br></p><p>Thanks to Erica Sadun &lt;https://github.com/erica&gt; for inputs.<br></p><p><br>------------------------------------------------------------------------<br></p><p>Github link:<br>https://github.com/aciidb0mb3r/swift-evolution/blob/swiftpm_dev_package/proposals/NNNN-swiftpm-development-package-as-dependency.md<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/faad4095/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>March 29, 2016 at 11:00:00am</p></header><div class="content"><p>This was more or less what I’ve been thinking, but lately I’ve been also thinking it would be great if:<br></p><p>You didn’t have to modify Package.swift to get this feature.<br></p><p>Because:<br></p><p>1) You have to remember to modify it back at some point, and if you are iterating frequently this is tedious and error-prone<br>2) We don’t want any chance that DevPackage gets into the package graph and thus the ecosystem.<br></p><p>Thoughts?<br></p><p>&gt; On Mar 29, 2016, at 11:33 AM, Ankit Agarwal via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; SwiftPM: Adding development package as a dependency<br>&gt; Proposal: SE-NNNN &lt;https://github.com/apple/swift-evolution/blob/master/proposals/NNNN-name.md&gt;<br>&gt; Author(s): Ankit Aggarwal &lt;https://github.com/aciidb0mb3r&gt;<br>&gt; Status: Awaiting review<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; I propose to enable SwiftPM to use a package that is still under development as a dependency for another package during testing and development.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; During development of libraries, developers commonly want to try out their module package as a dependency. This emulates the typical library use-case and is currently not possible in SwiftPM without first checking in and tagging that library. These extra steps, while reasonable for an already-built package, are an unnecessary burden for a package that remains in development. <br>&gt; <br>&gt; Forcing the user to modify the library package inside Packages to continue development or continuously reclone the package after recommiting and retagging strain the process of building the library in the first place.<br>&gt; <br>&gt; Detail Design<br>&gt; <br>&gt; Under this proposal, the root package will be allowed to specify a DevPackage dependency. This dependency will not clone the package inside Packages/ or require the dependency to be under version control. This will free the developer to continue iterative testing, expansion, and enhancements without being tied to the current dependency system.<br>&gt; <br>&gt; This approach limits DevPackage dependencies to local file systems. Remote repositories cannot be used with this keyword. <br>&gt; <br>&gt; The following example demonstrates what a manifest file would look like. In this example, the DevPackage is specified using a local path and the majorVersion is used as is for this DevPackage.<br>&gt; <br>&gt; import PackageDescription<br>&gt; <br>&gt; let package = Package(<br>&gt;     name: &quot;MyLibraryTester&quot;,<br>&gt;     dependencies: [<br>&gt;         .Package(url: &quot;https://github.com/apple/example-package-fisheryates.git &lt;https://github.com/apple/example-package-fisheryates.git&gt;&quot;, majorVersion: 1),<br>&gt;         .DevPackage(localPath: &quot;../MyAwesomeLibrary&quot;, majorVersion: 1),<br>&gt;     ]<br>&gt; )<br>&gt; Under this design:<br>&gt; <br>&gt; DevPackage is limited strictly to the root package. The manifest of any dependency containing a DevPackage will fail to build.<br>&gt; A DevPackage is not copied inside Packages/ and does not require version control.<br>&gt; SwiftPM uses the DevPackage&#39;s source directory for building, permitting in-place development on the local file system.<br>&gt; SwiftPM disallows non-local DevPackage sources. To use a remote package, the developer must first clone a package and then specify the local path.<br>&gt; Version numbers are specified for DevPackage entries within the manifest file. <br>&gt; Should the DevPackage version not be selected after resolving the dependency graph, the build will succeed with a warning.<br>&gt; Impact on existing code<br>&gt; <br>&gt; This proposal does not impact existing code.<br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; I propose two possible alternatives to this problem:<br>&gt; <br>&gt; Create a executable target within the library package for development testing.<br>&gt; Use XCTest to test the library.<br>&gt; Both alternate approaches permit testing a library module but they will not simulate a full SwiftPM package.<br>&gt; <br>&gt; Acknowledgements<br>&gt; <br>&gt; Thanks to Erica Sadun &lt;https://github.com/erica&gt; for inputs.<br>&gt; <br>&gt; <br>&gt; ------------------------------------------------------------------------<br>&gt; <br>&gt; Github link: https://github.com/aciidb0mb3r/swift-evolution/blob/swiftpm_dev_package/proposals/NNNN-swiftpm-development-package-as-dependency.md &lt;https://github.com/aciidb0mb3r/swift-evolution/blob/swiftpm_dev_package/proposals/NNNN-swiftpm-development-package-as-dependency.md&gt;<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Ankit<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160329/8de299f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; This was more or less what I’ve been thinking, but lately I’ve been also<br>&gt; thinking it would be great if:<br>&gt;<br>&gt; You didn’t have to modify Package.swift to get this feature.<br>&gt;<br>&gt; Because:<br>&gt;<br>&gt; 1) You have to remember to modify it back at some point, and if you are<br>&gt; iterating frequently this is tedious and error-prone<br>&gt;<br></p><p>One way I can think of to avoid Package.swift is to place DevPackages<br>inside some special folder (perhaps: DevPackages/) inside the root package<br>which sounds good if I am developing some patch to some package but it<br>might be awkward if I am starting to write a library and want to create a<br>package to try it because I&#39;ll already have created the library package<br>(though maybe minimal) but then I&#39;ll have to move the library inside<br>DevPackages/<br></p><p>This would be a bit awkward but sounds good enough to me<br></p><p><br>&gt; 2) We don’t want any chance that DevPackage gets into the package graph<br>&gt; and thus the ecosystem.<br>&gt;<br></p><p>what if one of the dependencies depend on a package inside DevPackage then<br>should the DevPackage be preferred?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/c8c31692/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>March 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; 1) You have to remember to modify it back at some point, and if you are iterating frequently this is tedious and error-prone<br>&gt; <br>&gt; One way I can think of to avoid Package.swift is to place DevPackages inside some special folder (perhaps: DevPackages/) inside the root package which sounds good if I am developing some patch to some package but it might be awkward if I am starting to write a library and want to create a package to try it because I&#39;ll already have created the library package (though maybe minimal) but then I&#39;ll have to move the library inside DevPackages/<br></p><p>Well, it seems to me part of the utility here is having a package be a local clone in an entirely different directory. So this sounds a bit tedious.<br></p><p>&gt; This would be a bit awkward but sounds good enough to me<br>&gt;  <br>&gt; 2) We don’t want any chance that DevPackage gets into the package graph and thus the ecosystem.<br>&gt; <br>&gt; what if one of the dependencies depend on a package inside DevPackage then should the DevPackage be preferred?<br></p><p>Don’t understand.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160329/d2c17540/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 01:00:00am</p></header><div class="content"><p>On Wed, Mar 30, 2016 at 1:01 AM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>&gt; 1) You have to remember to modify it back at some point, and if you are<br>&gt;&gt; iterating frequently this is tedious and error-prone<br>&gt;&gt;<br>&gt;<br>&gt; One way I can think of to avoid Package.swift is to place DevPackages<br>&gt; inside some special folder (perhaps: DevPackages/) inside the root package<br>&gt; which sounds good if I am developing some patch to some package but it<br>&gt; might be awkward if I am starting to write a library and want to create a<br>&gt; package to try it because I&#39;ll already have created the library package<br>&gt; (though maybe minimal) but then I&#39;ll have to move the library inside<br>&gt; DevPackages/<br>&gt;<br>&gt;<br>&gt; Well, it seems to me part of the utility here is having a package be a<br>&gt; local clone in an entirely different directory. So this sounds a bit<br>&gt; tedious.<br>&gt;<br>&gt;<br>Any other way you can think of to avoid Package.swift?<br></p><p><br>&gt; This would be a bit awkward but sounds good enough to me<br>&gt;<br>&gt;<br>&gt;&gt; 2) We don’t want any chance that DevPackage gets into the package graph<br>&gt;&gt; and thus the ecosystem.<br>&gt;&gt;<br>&gt;<br>&gt; what if one of the dependencies depend on a package inside DevPackage then<br>&gt; should the DevPackage be preferred?<br>&gt;<br>&gt;<br>&gt; Don’t understand.<br>&gt;<br></p><p>RootPackage<br>Dependency: APackage<br>DevPackage: BPackage<br></p><p>APackage<br>Dependency: BPackage<br></p><p>If DevPackages don&#39;t specify version in Package.swift, in case of a<br>collision should the DevPackage be always preferred?<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/6e8d3cdc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>March 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt;&gt; 1) You have to remember to modify it back at some point, and if you are iterating frequently this is tedious and error-prone<br>&gt;&gt; <br>&gt;&gt; One way I can think of to avoid Package.swift is to place DevPackages inside some special folder (perhaps: DevPackages/) inside the root package which sounds good if I am developing some patch to some package but it might be awkward if I am starting to write a library and want to create a package to try it because I&#39;ll already have created the library package (though maybe minimal) but then I&#39;ll have to move the library inside DevPackages/<br>&gt; <br>&gt; Well, it seems to me part of the utility here is having a package be a local clone in an entirely different directory. So this sounds a bit tedious.<br>&gt; <br>&gt; <br>&gt; Any other way you can think of to avoid Package.swift?<br>&gt;  <br></p><p>This seems pretty similar to standard overrides as part of the lockfile proposal to me, so we could add it on there, maybe with<br>a convenience command line.<br></p><p>&gt;&gt; This would be a bit awkward but sounds good enough to me<br>&gt;&gt;  <br>&gt;&gt; 2) We don’t want any chance that DevPackage gets into the package graph and thus the ecosystem.<br>&gt;&gt; <br>&gt;&gt; what if one of the dependencies depend on a package inside DevPackage then should the DevPackage be preferred?<br>&gt; <br>&gt; Don’t understand.<br>&gt; <br>&gt; RootPackage <br>&gt; Dependency: APackage<br>&gt; DevPackage: BPackage<br>&gt; <br>&gt; APackage<br>&gt; Dependency: BPackage<br>&gt; <br>&gt; If DevPackages don&#39;t specify version in Package.swift, in case of a collision should the DevPackage be always preferred?<br></p><p>Root package always has override precedence.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160329/32bdb718/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 01:00:00am</p></header><div class="content"><p>On Wed, Mar 30, 2016 at 1:10 AM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>&gt; 1) You have to remember to modify it back at some point, and if you are<br>&gt;&gt;&gt; iterating frequently this is tedious and error-prone<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; One way I can think of to avoid Package.swift is to place DevPackages<br>&gt;&gt; inside some special folder (perhaps: DevPackages/) inside the root package<br>&gt;&gt; which sounds good if I am developing some patch to some package but it<br>&gt;&gt; might be awkward if I am starting to write a library and want to create a<br>&gt;&gt; package to try it because I&#39;ll already have created the library package<br>&gt;&gt; (though maybe minimal) but then I&#39;ll have to move the library inside<br>&gt;&gt; DevPackages/<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Well, it seems to me part of the utility here is having a package be a<br>&gt;&gt; local clone in an entirely different directory. So this sounds a bit<br>&gt;&gt; tedious.<br>&gt;&gt;<br>&gt;&gt;<br>&gt; Any other way you can think of to avoid Package.swift?<br>&gt;<br>&gt;<br>&gt;<br>&gt; This seems pretty similar to standard overrides as part of the lockfile<br>&gt; proposal to me, so we could add it on there, maybe with<br>&gt; a convenience command line.<br>&gt;<br></p><p>Okay, does this sound good :<br></p><p>`swift build --dev-pkg=../MyLib --dev-pkg=../MyLib2`<br></p><p>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/11083bf6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 04:00:00am</p></header><div class="content"><p>Updated the proposal to commandline override here:<br>https://github.com/aciidb0mb3r/swift-evolution/blob/swiftpm_dev_package/proposals/NNNN-swiftpm-development-package-as-dependency.md<br></p><p>On Wed, Mar 30, 2016 at 1:17 AM, Ankit Agarwal &lt;ankit at ankit.im&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Wed, Mar 30, 2016 at 1:10 AM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; 1) You have to remember to modify it back at some point, and if you are<br>&gt;&gt;&gt;&gt; iterating frequently this is tedious and error-prone<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; One way I can think of to avoid Package.swift is to place DevPackages<br>&gt;&gt;&gt; inside some special folder (perhaps: DevPackages/) inside the root package<br>&gt;&gt;&gt; which sounds good if I am developing some patch to some package but it<br>&gt;&gt;&gt; might be awkward if I am starting to write a library and want to create a<br>&gt;&gt;&gt; package to try it because I&#39;ll already have created the library package<br>&gt;&gt;&gt; (though maybe minimal) but then I&#39;ll have to move the library inside<br>&gt;&gt;&gt; DevPackages/<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Well, it seems to me part of the utility here is having a package be a<br>&gt;&gt;&gt; local clone in an entirely different directory. So this sounds a bit<br>&gt;&gt;&gt; tedious.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; Any other way you can think of to avoid Package.swift?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This seems pretty similar to standard overrides as part of the lockfile<br>&gt;&gt; proposal to me, so we could add it on there, maybe with<br>&gt;&gt; a convenience command line.<br>&gt;&gt;<br>&gt;<br>&gt; Okay, does this sound good :<br>&gt;<br>&gt; `swift build --dev-pkg=../MyLib --dev-pkg=../MyLib2`<br>&gt;<br>&gt; --<br>&gt; Ankit<br>&gt;<br>&gt;<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/fd7cd972/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>April  1, 2016 at 08:00:00am</p></header><div class="content"><p>If this looks good can we move ahead for review ?<br></p><p>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160401/c5bb4814/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>April  1, 2016 at 10:00:00am</p></header><div class="content"><p>I’m wondering if the dev package should be inside Packages in some manner, perhaps as a symlink.<br></p><p>Otherwise when you looks inside Packages you don&#39;t see all your dependencies.<br></p><p>Also since this is related to the lockfile work, I’d like to wait until that is done, probably we could use very similar command line UX.<br></p><p>If you don’t mind?<br></p><p>I’ll revise the lockfile proposal today and get it moving.<br></p><p>Thanks for all your great work 👍🏻<br></p><p>&gt; If this looks good can we move ahead for review ?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>April  1, 2016 at 10:00:00pm</p></header><div class="content"><p>On Fri, Apr 1, 2016 at 10:45 PM, Max Howell &lt;max.howell at apple.com&gt; wrote:<br></p><p>&gt; I’m wondering if the dev package should be inside Packages in some manner,<br>&gt; perhaps as a symlink.<br>&gt;<br>&gt; Otherwise when you looks inside Packages you don&#39;t see all your<br>&gt; dependencies.<br>&gt;<br></p><p>Since as per current design dev packages will only be included if it is in<br>the `swift build` command I don&#39;t think its ever a concrete dependency to<br>be inside `Packages/` in any way.<br></p><p><br>&gt; Also since this is related to the lockfile work, I’d like to wait until<br>&gt; that is done, probably we could use very similar command line UX.<br>&gt;<br>&gt; If you don’t mind?<br>&gt;<br></p><p>Cool.<br></p><p>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160401/27b7ef04/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fa5f52f699e07a98fefcf30fb95354?s=50"></div><header><strong>[swift-evolution] [Draft] SwiftPM: Adding development package as a dependency</strong> from <string>James Richard</string> &lt;ketzu at me.com&gt;<p>March 29, 2016 at 05:00:00pm</p></header><div class="content"><p>It&#39;s be nice to include a bit about how these interact with generated Xcodeproj files. In Cocoapods those end up in a separate grouping, which I find to be beneficial.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 29, 2016, at 11:33 AM, Ankit Agarwal via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; SwiftPM: Adding development package as a dependency<br>&gt; Proposal: SE-NNNN<br>&gt; Author(s): Ankit Aggarwal<br>&gt; Status: Awaiting review<br>&gt; Review manager: TBD<br>&gt; Introduction<br>&gt; <br>&gt; I propose to enable SwiftPM to use a package that is still under development as a dependency for another package during testing and development.<br>&gt; <br>&gt; Motivation<br>&gt; <br>&gt; During development of libraries, developers commonly want to try out their module package as a dependency. This emulates the typical library use-case and is currently not possible in SwiftPM without first checking in and tagging that library. These extra steps, while reasonable for an already-built package, are an unnecessary burden for a package that remains in development. <br>&gt; <br>&gt; Forcing the user to modify the library package inside Packages to continue development or continuously reclone the package after recommiting and retagging strain the process of building the library in the first place.<br>&gt; <br>&gt; Detail Design<br>&gt; <br>&gt; Under this proposal, the root package will be allowed to specify a DevPackage dependency. This dependency will not clone the package inside Packages/ or require the dependency to be under version control. This will free the developer to continue iterative testing, expansion, and enhancements without being tied to the current dependency system.<br>&gt; <br>&gt; This approach limits DevPackage dependencies to local file systems. Remote repositories cannot be used with this keyword. <br>&gt; <br>&gt; The following example demonstrates what a manifest file would look like. In this example, the DevPackage is specified using a local path and the majorVersion is used as is for this DevPackage.<br>&gt; <br>&gt; import PackageDescription<br>&gt; <br>&gt; let package = Package(<br>&gt;     name: &quot;MyLibraryTester&quot;,<br>&gt;     dependencies: [<br>&gt;         .Package(url: &quot;https://github.com/apple/example-package-fisheryates.git&quot;, majorVersion: 1),<br>&gt;         .DevPackage(localPath: &quot;../MyAwesomeLibrary&quot;, majorVersion: 1),<br>&gt;     ]<br>&gt; )<br>&gt; Under this design:<br>&gt; <br>&gt; DevPackage is limited strictly to the root package. The manifest of any dependency containing a DevPackage will fail to build.<br>&gt; A DevPackage is not copied inside Packages/ and does not require version control.<br>&gt; SwiftPM uses the DevPackage&#39;s source directory for building, permitting in-place development on the local file system.<br>&gt; SwiftPM disallows non-local DevPackage sources. To use a remote package, the developer must first clone a package and then specify the local path.<br>&gt; Version numbers are specified for DevPackage entries within the manifest file. <br>&gt; Should the DevPackage version not be selected after resolving the dependency graph, the build will succeed with a warning.<br>&gt; Impact on existing code<br>&gt; <br>&gt; This proposal does not impact existing code.<br>&gt; <br>&gt; Alternatives considered<br>&gt; <br>&gt; I propose two possible alternatives to this problem:<br>&gt; <br>&gt; Create a executable target within the library package for development testing.<br>&gt; Use XCTest to test the library.<br>&gt; Both alternate approaches permit testing a library module but they will not simulate a full SwiftPM package.<br>&gt; <br>&gt; Acknowledgements<br>&gt; <br>&gt; Thanks to Erica Sadun for inputs.<br>&gt; <br>&gt; <br>&gt; ------------------------------------------------------------------------<br>&gt; <br>&gt; Github link: https://github.com/aciidb0mb3r/swift-evolution/blob/swiftpm_dev_package/proposals/NNNN-swiftpm-development-package-as-dependency.md<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Ankit<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160329/f09a06a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[swift-evolution] [Draft] SwiftPM: Adding development package as a dependency</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>March 30, 2016 at 01:00:00pm</p></header><div class="content"><p>On Wed, Mar 30, 2016 at 6:05 AM, James Richard &lt;ketzu at me.com&gt; wrote:<br></p><p>&gt; It&#39;s be nice to include a bit about how these interact with generated<br>&gt; Xcodeproj files. In Cocoapods those end up in a separate grouping, which I<br>&gt; find to be beneficial.<br>&gt;<br></p><p>It should do the same as it does for other dependencies ie create a target<br>and group it under &quot;dependencies&quot;. If you&#39;re thinking about workspaces and<br>subprojects that is not in the scope of this proposal.<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160330/c9275b6e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
