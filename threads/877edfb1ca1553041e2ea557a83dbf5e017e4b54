<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f64d9558601ff253a2faf75455059df6?s=50"></div><header><strong>Normalizing operator&#39;s types</strong> from <string>J. Charles M. N.</string> &lt;jcharles.nmbiada at me.com&gt;<p>June 15, 2016 at 07:00:00pm</p></header><div class="content"><p>Hi Swift,<br></p><p>Since the &quot;removal&quot; of curried function, I am looking for some elegant ways to work with partial functions (and reduce creation of closure and nested func for the developper).<br></p><p>And now I am asking myself if it&#39;s not better to align operator&#39;s types to the arrow style instead of using tuple argument style.<br></p><p>For example: <br>Why Int.multiplyWithOverflow&#39;s type is (Int, Int) -&gt; (Int, overflow: Bool) instead of (Int -&gt; Int) -&gt; (Int, overflow: Bool)<br></p><p>When curried function will come back (if it come back, which is a personal hope) that will avoid many refactoring.<br></p><p>I think that, write this : let f:(Int, Int) throws -&gt; Int = (+) seem a bit ugly for this purpose <br>let f:(Int -&gt; Int) -&gt; Int = (+) seem more suitable.<br>We could imagine that in the future the compile could automatically create a closure if the programmer define something like<br>let lmul: (Int) -&gt; (Int) -&gt; (Int) = (*)<br>and then, doing the habitual stuffs : let mulOfTwo = lmul(2)<br> <br>Kind regards,<br>--<br>jcnm<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/877e4b54/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Normalizing operator&#39;s types</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 15, 2016 at 03:00:00pm</p></header><div class="content"><p>Function currying wasn’t removed, just some of the confusing syntax for it. This works fine in the Xcode 8 beta:<br>infix operator &lt;&gt; {} // random operator that doesn’t do anything else<br>func &lt;&gt; &lt;T, U, V&gt; (op: (T, U) -&gt; V, rhs: U) -&gt; ((T) -&gt; V) { return { op($0, rhs) } }<br>func &lt;&gt; &lt;T, U, V&gt; (lhs: T, op: (T, U) -&gt; V) -&gt; ((U) -&gt; V) { return { op(lhs, $0) } }<br>let divby2 = (/) &lt;&gt; 2<br>print(divby2(10)) // prints &quot;5&quot;<br>let invert = 1.0 &lt;&gt; (/)<br>print(invert(10)) // prints &quot;0.1&quot;<br></p><p><br></p><p>More to the point, though, given this definition:<br>let foo: (Int) -&gt; (Int) -&gt; (Int)<br>Would the correct way to use `foo` with today’s syntax be &quot;foo(Int) -&gt; (Int, Int)”, &quot;foo(Int) -&gt; ((Int) -&gt; Int)”, or &quot;foo(Int, Int) -&gt; Int”?<br></p><p>Seems like a lot of confusion and ambiguity for something that, at least as far as I can tell, doesn’t actually provide any functionality.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jun 15, 2016, at 2:07 PM, J. Charles N. MBIADA via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift,<br>&gt; <br>&gt; Since the &quot;removal&quot; of curried function, I am looking for some elegant ways to work with partial functions (and reduce creation of closure and nested func for the developper).<br>&gt; <br>&gt; And now I am asking myself if it&#39;s not better to align operator&#39;s types to the arrow style instead of using tuple argument style.<br>&gt; <br>&gt; For example: <br>&gt; Why Int.multiplyWithOverflow&#39;s type is (Int, Int) -&gt; (Int, overflow: Bool) instead of (Int -&gt; Int) -&gt; (Int, overflow: Bool)<br>&gt; <br>&gt; When curried function will come back (if it come back, which is a personal hope) that will avoid many refactoring.<br>&gt; <br>&gt; I think that, write this : let f:(Int, Int) throws -&gt; Int = (+) seem a bit ugly for this purpose <br>&gt; let f:(Int -&gt; Int) -&gt; Int = (+) seem more suitable.<br>&gt; <br>&gt; We could imagine that in the future the compile could automatically create a closure if the programmer define something like<br>&gt; <br>&gt; let lmul: (Int) -&gt; (Int) -&gt; (Int) = (*)<br>&gt; <br>&gt; and then, doing the habitual stuffs : let mulOfTwo = lmul(2)<br>&gt; <br>&gt; <br>&gt; Kind regards,<br>&gt; --<br>&gt; jcnm<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/7f710004/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Normalizing operator&#39;s types</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 16, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 21:07, J. Charles N. MBIADA via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift,<br>&gt; <br>&gt; Since the &quot;removal&quot; of curried function, I am looking for some elegant ways to work with partial functions (and reduce creation of closure and nested func for the developper).<br>&gt; <br>&gt; And now I am asking myself if it&#39;s not better to align operator&#39;s types to the arrow style instead of using tuple argument style.<br>&gt; <br>&gt; For example: <br>&gt; Why Int.multiplyWithOverflow&#39;s type is (Int, Int) -&gt; (Int, overflow: Bool) instead of (Int -&gt; Int) -&gt; (Int, overflow: Bool)<br></p><p>That looks wrong to me. That says that Int.multiplyWithOverflow is a function that takes another function (of type (Int) -&gt; Int)  and returns a tuple.<br></p><p>What you really want is a function that takes an Int and returns another function that takes an Int and returns the tuple i.e. its signature would look like this<br></p><p>(Int) -&gt; ((Int) -&gt; (Int, Bool))<br></p><p>If we assume -&gt; is right associative we can simplify to<br></p><p>(Int) -&gt; (Int) -&gt; (Int, Bool)<br></p><p>which makes more sense but is less clear to most programmers than the current syntax.<br></p><p>&gt; <br>&gt; When curried function will come back (if it come back, which is a personal hope) that will avoid many refactoring.<br>&gt; <br>&gt; I think that, write this : let f:(Int, Int) throws -&gt; Int = (+) seem a bit ugly for this purpose <br>&gt; let f:(Int -&gt; Int) -&gt; Int = (+) seem more suitable.<br>&gt; <br>&gt; We could imagine that in the future the compile could automatically create a closure if the programmer define something like <br>&gt; <br>&gt; let lmul: (Int) -&gt; (Int) -&gt; (Int) = (*)<br>&gt; <br>&gt; and then, doing the habitual stuffs : let mulOfTwo = lmul(2)<br>&gt; <br>&gt; <br>&gt; Kind regards,<br>&gt; --<br>&gt; jcnm<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
