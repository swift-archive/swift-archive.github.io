<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6761b86fcf674411c42ea5d32bbf6e5?s=50"></div><header><strong>A URLSession crash and potential solutions</strong> from <string>Pushkar N Kulkarni</string> &lt;pushkar.nk at in.ibm.com&gt;<p>September 13, 2016 at 07:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160913/fad8c781/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>A URLSession crash and potential solutions</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>September 13, 2016 at 12:00:00pm</p></header><div class="content"><p>Hi Pushkar,<br></p><p>&gt; On Sep 13, 2016, at 12:20 PM, Pushkar N Kulkarni &lt;pushkar.nk at in.ibm.com&gt; wrote:<br>&gt; <br>&gt; Hi Tony, Philippe, other onlookers, <br>&gt; <br>&gt; Long note. Kindly bear with me. <br>&gt; <br>&gt; I&#39;ve created SR-2631 &lt;https://bugs.swift.org/browse/SR-2631&gt; to report a crash in a very basic usage of URLSession. I&#39;m providing a general synopsis of the problem below and proposing two approaches to solve it.<br>&gt; <br>&gt; The test case attached to the report creates a URLSession object locally inside a function run(), which also creates a dataTask with a completion handler, resumes the task and exits. On exiting run(), the URLSession object has no references pointing to it. It is cleaned up and we crash while trying to resume the task (the resume code and the subsequent callbacks are all asynchronous). <br>&gt; <br>&gt; This brings us to a basic flaw in the current NSURLSession implementation. Sessions and tasks are either created with delegates or callbacks, which are invoked asynchronously. Both delegates and callbacks need the URLSession objects they were registered with. Delegates need them until the last delegate method invocation returns. Completion handlers need them just until before they are invoked. The current implementation does not attempt to keep the URLSession object alive for the subsequent asynchronous code invocations. Hence the crash. <br>&gt; <br>&gt; Two questions arise when we think of a solution:<br>&gt; 1. How can we keep the live URLSession objects alive?<br>&gt; 2. What trigger can we use to clean them up?<br>&gt; <br>&gt; I try to answer (2) first. The URLSession programming guide &lt;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/NSURLSessionConcepts/NSURLSessionConcepts.html&gt; says:<br>&gt; <br>&gt; &quot;When you no longer need a session, invalidate it by calling either invalidateAndCancel (to cancel outstanding tasks) or finishTasksAndInvalidate(to allow outstanding tasks to finish before invalidating the object). *** The session object keeps a strong reference to the delegate until your app explicitly invalidates the session. If you do not invalidate the session, your app leaks memory.*** &quot;<br>&gt; <br></p><p>Interesting, this is counter to the usual pattern of delegation but I can see why itâ€™s required here. Usually we want our delegates to be zeroing weak references.<br></p><p>&gt; The URLSession references also mention that &quot;invalidateAndCancel&quot; and &quot;finishTasksAndInvalidate&quot; break references to the callback and delegate objects and make the session object unusable. *** So, it is apparent that these methods are used to trigger a clean up of the session object ***<br>&gt; <br>&gt; <br>&gt; Now coming to possible answers to (1). I can think of two ways of retaining the session object:<br>&gt; <br>&gt; 1. We intentionally maintain a retain cycle between the session and task objects (URLSession &lt;---&gt; URLSessionTask)<br>&gt; Currently the task object keeps an unowned reference to the session object. We could make it a strong reference.  And break it when invalidateAndCancel or finishTasksAndInvalidate are called. Alternatively, in the case of a completion handler, we could break the cycle just before invoking the handler. As long as we break the cycle eventually, I&#39;m not sure if it could have side effects. <br>&gt; <br></p><p>This is probably the most reasonable approach.<br></p><p>Thanks for looking into this!<br></p><p>- Tony<br></p><p>&gt; 2. We maintain all live sessions in a static array or dictionary in the URLSession class. We remove them on session invalidation or callback invocation. Doing this bookkeeping and searching may involve a cost and scalability may be a problem here.<br>&gt; <br>&gt; <br>&gt; Do you have any other approaches to consider? Can you please let me know your opinion on the ones detailed above ? <br>&gt; <br>&gt; Thank you! <br>&gt; <br>&gt; Pushkar N Kulkarni,<br>&gt; IBM Runtimes<br>&gt; <br>&gt; Simplicity is prerequisite for reliability - Edsger W. Dijkstra<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160913/ec4942c6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6761b86fcf674411c42ea5d32bbf6e5?s=50"></div><header><strong>A URLSession crash and potential solutions</strong> from <string>Pushkar N Kulkarni</string> &lt;pushkar.nk at in.ibm.com&gt;<p>September 15, 2016 at 12:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160915/936dc564/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
