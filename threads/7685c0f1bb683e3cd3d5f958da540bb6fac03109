<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/430f6b9652f306f715a616a8bba15ee7?s=50"></div><header><strong>Proposal to change subscript value type on Array and other collection types.</strong> from <string>mich at el.cx</string> &lt;mich at el.cx&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>My first post to this list so apologies if its not in the correct format <br>or irrelevant / wrong :) Its quite simple, so i&#39;m under the impression <br>that perhaps there is already a very good reason why the below behaviour <br>is on purpose, if this is the case i&#39;d love to learn why, so view it as <br>a proposal / question.<br></p><p>When accessing Array&#39;s in Swift (and potentially other types) a Int <br>(signed) is expected, as Array can&#39;t have a negative bounds in Swift (as <br>far as i&#39;m aware) would it be sensible to make these UInt? therefor <br>removing the need for tests etc and guarding around negative integers?<br></p><p>For Example:<br></p><p>      let someArray = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br>      print(someArray.count.dynamicType) // Int<br></p><p>      let someIndex = 1<br>      print(someArray[someIndex]) // b<br></p><p>      let anotherIndex : UInt = 1<br>      print(someArray[anotherIndex]) // cannot subscript a value of type <br>&#39;[String]&#39; with an index of type &#39;UInt&#39;<br></p><p>      let invalidIndex = -1<br>      print(someArray[invalidIndex]) //  Darwin: EXC_BAD_INSTRUCTION / <br>Linux REPL: Error running code: unknown error code 132.<br></p><p>      print (invalidIndex.dynamicType) // Int<br></p><p>      If Array took a UInt, the line &#39;print(someArray[invalidIndex])&#39; <br>would fail at COMPILE time rather than RUNTIME.<br></p><p><br>Looking at the Swift source there are things like<br></p><p>     _sanityCheck(count &gt;= 0)<br></p><p>Which would be unnecessary if using the type system with UInt.<br></p><p>I&#39;m aware that almost everyone bounds checks Array&#39;s before access etc, <br>however is there a reason someone can explain for not using a &#39;UInt&#39; in <br>these circumstances for &#39;Array&#39; and other collection types.<br></p><p>Thanks,<br></p><p>Michael<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5228ad4a1fad94f1a7d3d05b0c0ff6a?s=50"></div><header><strong>Proposal to change subscript value type on Array and other collection types.</strong> from <string>Donnacha Oisín Kidney</string> &lt;oisin.kidney at gmail.com&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>There’s a good discussion of this here &lt;https://devforums.apple.com/thread/263668&gt;.<br></p><p>&gt; On 17 Dec 2015, at 16:55, Michael Armstrong via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; My first post to this list so apologies if its not in the correct format or irrelevant / wrong :) Its quite simple, so i&#39;m under the impression that perhaps there is already a very good reason why the below behaviour is on purpose, if this is the case i&#39;d love to learn why, so view it as a proposal / question.<br>&gt; <br>&gt; When accessing Array&#39;s in Swift (and potentially other types) a Int (signed) is expected, as Array can&#39;t have a negative bounds in Swift (as far as i&#39;m aware) would it be sensible to make these UInt? therefor removing the need for tests etc and guarding around negative integers?<br>&gt; <br>&gt; For Example:<br>&gt; <br>&gt;     let someArray = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br>&gt;     print(someArray.count.dynamicType) // Int<br>&gt; <br>&gt;     let someIndex = 1<br>&gt;     print(someArray[someIndex]) // b<br>&gt; <br>&gt;     let anotherIndex : UInt = 1<br>&gt;     print(someArray[anotherIndex]) // cannot subscript a value of type &#39;[String]&#39; with an index of type &#39;UInt&#39;<br>&gt; <br>&gt;     let invalidIndex = -1<br>&gt;     print(someArray[invalidIndex]) //  Darwin: EXC_BAD_INSTRUCTION / Linux REPL: Error running code: unknown error code 132.<br>&gt; <br>&gt;     print (invalidIndex.dynamicType) // Int<br>&gt; <br>&gt;     If Array took a UInt, the line &#39;print(someArray[invalidIndex])&#39; would fail at COMPILE time rather than RUNTIME.<br>&gt; <br>&gt; <br>&gt; Looking at the Swift source there are things like<br>&gt; <br>&gt;    _sanityCheck(count &gt;= 0)<br>&gt; <br>&gt; Which would be unnecessary if using the type system with UInt.<br>&gt; <br>&gt; I&#39;m aware that almost everyone bounds checks Array&#39;s before access etc, however is there a reason someone can explain for not using a &#39;UInt&#39; in these circumstances for &#39;Array&#39; and other collection types.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/c9ed1037/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Proposal to change subscript value type on Array and other collection types.</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>December 17, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; would it be sensible to make these UInt?<br></p><p>It&#39;s really nice to have one Int type to rule over all integers. This means<br>that a reasonable program can be written without casting.<br></p><p>&gt; Which would be unnecessary if using the type system with UInt.<br></p><p>No, if subsript required UInt everyone would simply insert a cast, and -1<br>would still create problems as UInt.max.<br></p><p>On Thu, Dec 17, 2015 at 7:55 PM, Michael Armstrong via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi,<br>&gt;<br>&gt; My first post to this list so apologies if its not in the correct format<br>&gt; or irrelevant / wrong :) Its quite simple, so i&#39;m under the impression that<br>&gt; perhaps there is already a very good reason why the below behaviour is on<br>&gt; purpose, if this is the case i&#39;d love to learn why, so view it as a<br>&gt; proposal / question.<br>&gt;<br>&gt; When accessing Array&#39;s in Swift (and potentially other types) a Int<br>&gt; (signed) is expected, as Array can&#39;t have a negative bounds in Swift (as<br>&gt; far as i&#39;m aware) would it be sensible to make these UInt? therefor<br>&gt; removing the need for tests etc and guarding around negative integers?<br>&gt;<br>&gt; For Example:<br>&gt;<br>&gt;      let someArray = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]<br>&gt;      print(someArray.count.dynamicType) // Int<br>&gt;<br>&gt;      let someIndex = 1<br>&gt;      print(someArray[someIndex]) // b<br>&gt;<br>&gt;      let anotherIndex : UInt = 1<br>&gt;      print(someArray[anotherIndex]) // cannot subscript a value of type<br>&gt; &#39;[String]&#39; with an index of type &#39;UInt&#39;<br>&gt;<br>&gt;      let invalidIndex = -1<br>&gt;      print(someArray[invalidIndex]) //  Darwin: EXC_BAD_INSTRUCTION /<br>&gt; Linux REPL: Error running code: unknown error code 132.<br>&gt;<br>&gt;      print (invalidIndex.dynamicType) // Int<br>&gt;<br>&gt;      If Array took a UInt, the line &#39;print(someArray[invalidIndex])&#39; would<br>&gt; fail at COMPILE time rather than RUNTIME.<br>&gt;<br>&gt;<br>&gt; Looking at the Swift source there are things like<br>&gt;<br>&gt;     _sanityCheck(count &gt;= 0)<br>&gt;<br>&gt; Which would be unnecessary if using the type system with UInt.<br>&gt;<br>&gt; I&#39;m aware that almost everyone bounds checks Array&#39;s before access etc,<br>&gt; however is there a reason someone can explain for not using a &#39;UInt&#39; in<br>&gt; these circumstances for &#39;Array&#39; and other collection types.<br>&gt;<br>&gt; Thanks,<br>&gt;<br>&gt; Michael<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/d2158ca3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
