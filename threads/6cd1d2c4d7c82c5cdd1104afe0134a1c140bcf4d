<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Allow functions to participate in the compile so they can generate warnings about their usage.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 12, 2016 at 06:00:00pm</p></header><div class="content"><p>For example, the Swift standard library might want to ensure that you use &quot;preconditionFailure()&quot; instead of &quot;precondition(false)&quot; since the former doesn’t get in the way of constant/variable initialization static analysis.<br></p><p>So maybe allow functions to have a warning clause with an abstract syntax tree parameter allowing the function to examine its usage context in the source code and issue warnings correspondingly that appear during the compile.<br></p><p>Here’s some related work: https://msdn.microsoft.com/en-us/magazine/dn879356.aspx &lt;https://msdn.microsoft.com/en-us/magazine/dn879356.aspx&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/6cd1cf4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Proposal: Allow functions to participate in the compile so they can generate warnings about their usage.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Fantastic idea, it would be nice to be able to do this in such a way that<br>it didn&#39;t bloat out a function&#39;s definition. This is similar to the<br>code-by-contract discussions that have happened in the past. This may be<br>breaking into macro territory though. Perhaps it could be expressed like<br>this:<br></p><p>@callVerification func verifyNoLiterals(inNode node: ASTNode) -&gt;<br>[CallVerificationError] {<br>    ...<br>}<br></p><p>@verifyCall(noLiterals)<br>func precondition(success: Bool) {<br>    ...<br>}<br></p><p><br>On Sat, Feb 13, 2016 at 8:15 AM, Amir Michail via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; For example, the Swift standard library might want to ensure that you use<br>&gt; &quot;preconditionFailure()&quot; instead of &quot;precondition(false)&quot; since the former<br>&gt; doesn’t get in the way of constant/variable initialization static analysis.<br>&gt;<br>&gt; So maybe allow functions to have a warning clause with an abstract syntax<br>&gt; tree parameter allowing the function to examine its usage context in the<br>&gt; source code and issue warnings correspondingly that appear during the<br>&gt; compile.<br>&gt;<br>&gt; Here’s some related work:<br>&gt; https://msdn.microsoft.com/en-us/magazine/dn879356.aspx<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/266b79a3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Allow functions to participate in the compile so they can generate warnings about their usage.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>February 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 10:39 PM, Andrew Bennett &lt;cacoyi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Fantastic idea, it would be nice to be able to do this in such a way that it didn&#39;t bloat out a function&#39;s definition. This is similar to the code-by-contract discussions that have happened in the past. This may be breaking into macro territory though. Perhaps it could be expressed like this:<br></p><p>BTW, you might want to check out this related work as well:<br></p><p>http://types.cs.washington.edu/checker-framework/ &lt;http://types.cs.washington.edu/checker-framework/&gt;<br>http://types.cs.washington.edu/checker-framework/tutorial/webpages/user-input-eclipse.html &lt;http://types.cs.washington.edu/checker-framework/tutorial/webpages/user-input-eclipse.html&gt;<br>http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#writing-a-checker &lt;http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#writing-a-checker&gt;<br>&gt; <br>&gt; @callVerification func verifyNoLiterals(inNode node: ASTNode) -&gt; [CallVerificationError] {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; @verifyCall(noLiterals)<br>&gt; func precondition(success: Bool) {<br>&gt;     ...<br>&gt; }<br>&gt; <br>&gt; <br>&gt; On Sat, Feb 13, 2016 at 8:15 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; For example, the Swift standard library might want to ensure that you use &quot;preconditionFailure()&quot; instead of &quot;precondition(false)&quot; since the former doesn’t get in the way of constant/variable initialization static analysis.<br>&gt; <br>&gt; So maybe allow functions to have a warning clause with an abstract syntax tree parameter allowing the function to examine its usage context in the source code and issue warnings correspondingly that appear during the compile.<br>&gt; <br>&gt; Here’s some related work: https://msdn.microsoft.com/en-us/magazine/dn879356.aspx &lt;https://msdn.microsoft.com/en-us/magazine/dn879356.aspx&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/2cf44b0c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Proposal: Allow functions to participate in the compile so they can generate warnings about their usage.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February 15, 2016 at 09:00:00am</p></header><div class="content"><p>Thanks. I wonder if you could use a linter, if you can add some<br>documentation to a function that the linter can pick up then it&#39;s possible<br>to do this now.<br></p><p>On Monday, 15 February 2016, Amir Michail &lt;a.michail at me.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Feb 13, 2016, at 10:39 PM, Andrew Bennett &lt;cacoyi at gmail.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;cacoyi at gmail.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Fantastic idea, it would be nice to be able to do this in such a way that<br>&gt; it didn&#39;t bloat out a function&#39;s definition. This is similar to the<br>&gt; code-by-contract discussions that have happened in the past. This may be<br>&gt; breaking into macro territory though. Perhaps it could be expressed like<br>&gt; this:<br>&gt;<br>&gt;<br>&gt; BTW, you might want to check out this related work as well:<br>&gt;<br>&gt; http://types.cs.washington.edu/checker-framework/<br>&gt;<br>&gt; http://types.cs.washington.edu/checker-framework/tutorial/webpages/user-input-eclipse.html<br>&gt;<br>&gt; http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#writing-a-checker<br>&gt;<br>&gt;<br>&gt; @callVerification func verifyNoLiterals(inNode node: ASTNode) -&gt;<br>&gt; [CallVerificationError] {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt; @verifyCall(noLiterals)<br>&gt; func precondition(success: Bool) {<br>&gt;     ...<br>&gt; }<br>&gt;<br>&gt;<br>&gt; On Sat, Feb 13, 2016 at 8:15 AM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; For example, the Swift standard library might want to ensure that you use<br>&gt;&gt; &quot;preconditionFailure()&quot; instead of &quot;precondition(false)&quot; since the former<br>&gt;&gt; doesn’t get in the way of constant/variable initialization static analysis.<br>&gt;&gt;<br>&gt;&gt; So maybe allow functions to have a warning clause with an abstract syntax<br>&gt;&gt; tree parameter allowing the function to examine its usage context in the<br>&gt;&gt; source code and issue warnings correspondingly that appear during the<br>&gt;&gt; compile.<br>&gt;&gt;<br>&gt;&gt; Here’s some related work:<br>&gt;&gt; https://msdn.microsoft.com/en-us/magazine/dn879356.aspx<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/0e153714/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
