<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Feb 11 2016, Jarod Long &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 11, 2016, at 15:20, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 11, 2016, at 4:17 PM, Dave Abrahams<br>&gt;&gt;&gt; &lt;dabrahams at apple.com<br>&gt;&gt;&gt; &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For the record, I do not feel at all confident anything like this will<br>&gt;&gt;&gt; end up in swift.  This feature was proposed back in 2013, before Swift<br>&gt;&gt;&gt; was released, eventually accepted then not implemented because we were<br>&gt;&gt;&gt; out of time, then revised, then re-accepted and implemented, then ripped<br>&gt;&gt;&gt; out of the compiler because of various concerns about what it does to<br>&gt;&gt;&gt; the shape of the language (e.g. is this just a second version of<br>&gt;&gt;&gt; “mutating?”  What about classes?).  Based on history, I don&#39;t think it&#39;s<br>&gt;&gt;&gt; a sure bet, and I personally may be out of energy and time to fight for<br>&gt;&gt;&gt; it.  But we&#39;ll have to see...<br>&gt;&gt;&gt; <br>&gt;<br>&gt; Interesting -- I wasn&#39;t aware of the history of the proposal. I would<br>&gt; be very interested in revisiting it to get the consideration of the<br>&gt; larger Swift community. Is this something that would be reasonable in<br>&gt; the Swift 3 timeframe, or should this wait until we can discuss Swift<br>&gt; 4?<br></p><p>Realistically, I think that proposal cannot be considered for Swift 3.<br></p><p>&gt;&gt; Using foo and fooInPlace is obvious, understandable, and easy. As a<br>&gt;&gt; suffix, it perfectly communicates the difference between a mutating<br>&gt;&gt; and non-mutating version, and doesn&#39;t involve anything on the level<br>&gt;&gt; of gerunds, past participles, pluperfects, prozac, or anything like<br>&gt;&gt; that.<br>&gt;&gt; <br>&gt;&gt; -- E<br>&gt;<br>&gt; As for the immediate situation, I agree with this. InPlace feels<br>&gt; clunky, but it&#39;s the only naming-based solution I&#39;ve seen that clearly<br>&gt; communicates the semantics in all cases.<br>&gt;<br>&gt; Jarod <br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>February 11, 2016 at 10:00:00pm</p></header><div class="content"><p>On Thu, Feb 11, 2016 at 7:31 PM, Dave Abrahams via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; on Thu Feb 11 2016, Jarod Long &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;&gt; On Feb 11, 2016, at 15:20, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Feb 11, 2016, at 4:17 PM, Dave Abrahams<br>&gt;&gt;&gt;&gt; &lt;dabrahams at apple.com<br>&gt;&gt;&gt;&gt; &lt;mailto:dabrahams at apple.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For the record, I do not feel at all confident anything like this will<br>&gt;&gt;&gt;&gt; end up in swift.  This feature was proposed back in 2013, before Swift<br>&gt;&gt;&gt;&gt; was released, eventually accepted then not implemented because we were<br>&gt;&gt;&gt;&gt; out of time, then revised, then re-accepted and implemented, then ripped<br>&gt;&gt;&gt;&gt; out of the compiler because of various concerns about what it does to<br>&gt;&gt;&gt;&gt; the shape of the language (e.g. is this just a second version of<br>&gt;&gt;&gt;&gt; “mutating?”  What about classes?).  Based on history, I don&#39;t think it&#39;s<br>&gt;&gt;&gt;&gt; a sure bet, and I personally may be out of energy and time to fight for<br>&gt;&gt;&gt;&gt; it.  But we&#39;ll have to see...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Interesting -- I wasn&#39;t aware of the history of the proposal. I would<br>&gt;&gt; be very interested in revisiting it to get the consideration of the<br>&gt;&gt; larger Swift community. Is this something that would be reasonable in<br>&gt;&gt; the Swift 3 timeframe, or should this wait until we can discuss Swift<br>&gt;&gt; 4?<br>&gt;<br>&gt; Realistically, I think that proposal cannot be considered for Swift 3.<br></p><p>Understandable. FWIW, if one believes in autocomplete, superscript<br>equal sign is already a valid identifier head character (per<br>documentation and experimentation in a playground). So, if the gist of<br>the proposal is acceptable, one can already name a pair of functions<br>union() and union=() if the &quot;=&quot; is replaced with its superscript (and<br>for that matter, =union(), but autocomplete might not help with that<br>one). Not sure this idea will gain too much traction, but if the union<br>operator ∪ is being thrown out as a possibility, I thought I&#39;d put it<br>out there.<br></p><p>In terms of symbols easily accessible on the keyboard not reserved for<br>operators, Xcode doesn&#39;t seem to complain about a function named<br>union$(), but that is a pretty bizarre-looking function name. More<br>horrifying than unioning() though?<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
