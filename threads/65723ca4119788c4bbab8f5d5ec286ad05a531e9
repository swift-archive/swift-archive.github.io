<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>Does Swift still needs C-style for loops with conditions and incrementers? <br></p><p><br></p><p>More Swift-like construction is already available with for-in-statements and stride. <br>This would naturally starve the most common point for -- and ++ operators as well.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/657231e9/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: Screen Shot 2015-12-03 at 4.30.15 PM.png<br>Type: image/png<br>Size: 27490 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/657231e9/attachment-0001.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt; <br>&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt; <br>&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt; This would naturally starve the most common point for -- and ++ operators as well.<br></p><p>I am certainly open to considering dropping the C-style for loop.  IMO, it is a rarely used feature of Swift that doesn?t carry its weight.  Many of the reasons to remove them align with the rationale for removing -- and ++.  <br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/dd0c2f7e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>C-style For Loops</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt; <br>&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt; <br>&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt; This would naturally starve the most common point for -- and ++ operators as well.<br></p><p>My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br></p><p>	- Doug<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/8fb334e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7ba3c93f9350613c243eeb87c602935e?s=50"></div><header><strong>C-style For Loops</strong> from <string>David Smith</string> &lt;david_smith at apple.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 3, 2015, at 3:36 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt; <br>&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt; <br>&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt; <br>&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>Every time I?ve used a C-style for loop in Swift it was because I forgot that .indices existed. If it?s removed, a fixme pointing that direction might be useful.<br></p><p>	David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/7c334f1b/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6ab7ae85b84ebb323fab427b11500742?s=50"></div><header><strong>C-style For Loops</strong> from <string>Keith Smiley</string> &lt;keithbsmiley at gmail.com&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>codebase.<br></p><p>--<br>Keith Smiley<br></p><p>On 12/03, Douglas Gregor wrote:<br>&gt; <br>&gt; &gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt; &gt; <br>&gt; &gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt; &gt; <br>&gt; &gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt; &gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt; <br>&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt; <br>&gt; 	- Doug<br>&gt; <br>&gt; <br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a37f99aa1daf8c27aaa81e4f019484d?s=50"></div><header><strong>C-style For Loops</strong> from <string>Andy Matuschak</string> &lt;andy at andymatuschak.org&gt;<p>December  3, 2015 at 03:00:00pm</p></header><div class="content"><p>Just checked; ditto Khan Academy.<br></p><p>&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt; <br>&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt; codebase.<br>&gt; <br>&gt; --<br>&gt; Keith Smiley<br>&gt; <br>&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt; <br>&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt;&gt; <br>&gt;&gt; 	- Doug<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9051f1adcfc59a6afe2464fe86fd5bd6?s=50"></div><header><strong>C-style For Loops</strong> from <string>Eric Chamberlain</string> &lt;eric.chamberlain at arctouch.com&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>We?ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br></p><p>--<br>Eric Chamberlain, Lead Architect - iOS<br>ArcTouch - App Development Studio<br></p><p>Custom apps for world-class brands and the Fortune 500<br>arctouch.com/work | arctouch.com/blog<br></p><p><br></p><p>&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak &lt;andy at andymatuschak.org&gt; wrote:<br>&gt; <br>&gt; Just checked; ditto Khan Academy.<br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt;&gt; codebase.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Keith Smiley<br>&gt;&gt; <br>&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	- Doug<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/2aafa092/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>C-style For Loops</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  3, 2015 at 04:00:00pm</p></header><div class="content"><p>Every time I&#39;ve tried to use a C-style for loop, I&#39;ve ended up switching<br>to a while loop because my iteration variable ended up having the wrong<br>type (e.g. having an optional type when the value must be non-optional<br>for the body to execute). The Postmates codebase contains no instances<br>of C-style for loops in Swift.<br></p><p>-Kevin Ballard<br></p><p>On Thu, Dec 3, 2015, at 04:50 PM, Eric Chamberlain wrote:<br>&gt; We?ve developed a number of Swift apps for various clients over the<br>&gt; past year and have not needed C style for loops either.<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Eric Chamberlain, Lead Architect - iOS ArcTouch - App<br>&gt; Development Studio<br>&gt;<br>&gt; Custom apps for world-class brands and the Fortune 500<br>&gt; arctouch.com/work | arctouch.com/blog<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak<br>&gt;&gt; &lt;andy at andymatuschak.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Just checked; ditto Khan Academy.<br>&gt;&gt;<br>&gt;&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the<br>&gt;&gt;&gt; Lyft codebase.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Keith Smiley<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and<br>&gt;&gt;&gt;&gt;&gt; incrementers?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-<br>&gt;&gt;&gt;&gt;&gt; statements and stride. This would naturally starve the most common<br>&gt;&gt;&gt;&gt;&gt; point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style<br>&gt;&gt;&gt;&gt; for loops. We have richer, better-structured looping and functional<br>&gt;&gt;&gt;&gt; algorithms. That said, one bit of data I?d like to see is how often<br>&gt;&gt;&gt;&gt; C-style for loops are actually used in Swift. It?s something a<br>&gt;&gt;&gt;&gt; quick crawl through Swift sources on GitHub could establish. If the<br>&gt;&gt;&gt;&gt; feature feels anachronistic and is rarely used, it?s a good<br>&gt;&gt;&gt;&gt; candidate for removal.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151203/f2110093/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>C-style For Loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>December  3, 2015 at 11:00:00pm</p></header><div class="content"><p>I found a couple of cases of them in my codebase, but they were trivially transformed into ?proper? Swift-style for loops that look better anyway. If it were a vote, I?d vote for eliminating C-style.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Dec 3, 2015, at 6:52 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; Every time I&#39;ve tried to use a C-style for loop, I&#39;ve ended up switching to a while loop because my iteration variable ended up having the wrong type (e.g. having an optional type when the value must be non-optional for the body to execute). The Postmates codebase contains no instances of C-style for loops in Swift.<br>&gt;  <br>&gt; -Kevin Ballard<br>&gt;  <br>&gt; On Thu, Dec 3, 2015, at 04:50 PM, Eric Chamberlain wrote:<br>&gt;&gt; We?ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; --<br>&gt;&gt; Eric Chamberlain, Lead Architect - iOS<br>&gt;&gt; ArcTouch - App Development Studio<br>&gt;&gt; <br>&gt;&gt; Custom apps for world-class brands and the Fortune 500<br>&gt;&gt; arctouch.com/work | arctouch.com/blog<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak &lt;andy at andymatuschak.org&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Just checked; ditto Khan Academy.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt;&gt;&gt;&gt; codebase.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Keith Smiley<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;  <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/32d8eca60f1bbb516804a3857528b2e1?s=50"></div><header><strong>C-style For Loops</strong> from <string>ChanMaxthon</string> &lt;xcvista at me.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>How about this C code when rewritten in Swift:<br></p><p>char *blk_xor(char *dst, const char *src, size_t len)<br>{<br>  const char *sp = src;<br>  for (char *dp = dst; sp - src &lt; len; sp++, dp++)<br>    *dp ^= *sp;<br>  return dst;<br>}<br></p><p>Sent from my iPhone<br></p><p>&gt; On Dec 4, 2015, at 13:35, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; I found a couple of cases of them in my codebase, but they were trivially transformed into ?proper? Swift-style for loops that look better anyway. If it were a vote, I?d vote for eliminating C-style.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 6:52 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Every time I&#39;ve tried to use a C-style for loop, I&#39;ve ended up switching to a while loop because my iteration variable ended up having the wrong type (e.g. having an optional type when the value must be non-optional for the body to execute). The Postmates codebase contains no instances of C-style for loops in Swift.<br>&gt;&gt; <br>&gt;&gt; -Kevin Ballard<br>&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 3, 2015, at 04:50 PM, Eric Chamberlain wrote:<br>&gt;&gt;&gt; We?ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Eric Chamberlain, Lead Architect - iOS<br>&gt;&gt;&gt; ArcTouch - App Development Studio<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Custom apps for world-class brands and the Fortune 500<br>&gt;&gt;&gt; arctouch.com/work | arctouch.com/blog<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak &lt;andy at andymatuschak.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just checked; ditto Khan Academy.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt;&gt;&gt;&gt;&gt; codebase.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Keith Smiley<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>C-style For Loops</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>December  3, 2015 at 10:00:00pm</p></header><div class="content"><p>A straight translation using UnsafePointer without a C-style for loop<br>would look like<br></p><p>func blk_xor(dst: UnsafeMutablePointer&lt;CChar&gt;, src:<br>UnsafePointer&lt;CChar&gt;, len: Int) -&gt; UnsafeMutablePointer&lt;CChar&gt; {<br>    for i in 0..&lt;len {<br>        dst[i] ^= src[i]<br>    }<br>    return dst<br>}<br></p><p>-Kevin Ballard<br></p><p>On Thu, Dec 3, 2015, at 09:47 PM, ChanMaxthon wrote:<br>&gt; How about this C code when rewritten in Swift:<br>&gt; <br>&gt; char *blk_xor(char *dst, const char *src, size_t len)<br>&gt; {<br>&gt;   const char *sp = src;<br>&gt;   for (char *dp = dst; sp - src &lt; len; sp++, dp++)<br>&gt;     *dp ^= *sp;<br>&gt;   return dst;<br>&gt; }<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; &gt; On Dec 4, 2015, at 13:35, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; I found a couple of cases of them in my codebase, but they were trivially transformed into ?proper? Swift-style for loops that look better anyway. If it were a vote, I?d vote for eliminating C-style.<br>&gt; &gt; <br>&gt; &gt; l8r<br>&gt; &gt; Sean<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt;&gt; On Dec 3, 2015, at 6:52 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Every time I&#39;ve tried to use a C-style for loop, I&#39;ve ended up switching to a while loop because my iteration variable ended up having the wrong type (e.g. having an optional type when the value must be non-optional for the body to execute). The Postmates codebase contains no instances of C-style for loops in Swift.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; -Kevin Ballard<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt; On Thu, Dec 3, 2015, at 04:50 PM, Eric Chamberlain wrote:<br>&gt; &gt;&gt;&gt; We?ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Eric Chamberlain, Lead Architect - iOS<br>&gt; &gt;&gt;&gt; ArcTouch - App Development Studio<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Custom apps for world-class brands and the Fortune 500<br>&gt; &gt;&gt;&gt; arctouch.com/work | arctouch.com/blog<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak &lt;andy at andymatuschak.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Just checked; ditto Khan Academy.<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt; &gt;&gt;&gt;&gt;&gt; codebase.<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Keith Smiley<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>C-style For Loops</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>I honestly have no idea where to go next with this. Here&#39;s my starting point: https://gist.github.com/erica/cf064a34f8891fb7a4a8<br></p><p>Advice welcome.<br></p><p>-- E, inexperienced at this stuff<br></p><p><br>&gt; On Dec 3, 2015, at 11:02 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; A straight translation using UnsafePointer without a C-style for loop<br>&gt; would look like<br>&gt; <br>&gt; func blk_xor(dst: UnsafeMutablePointer&lt;CChar&gt;, src:<br>&gt; UnsafePointer&lt;CChar&gt;, len: Int) -&gt; UnsafeMutablePointer&lt;CChar&gt; {<br>&gt;    for i in 0..&lt;len {<br>&gt;        dst[i] ^= src[i]<br>&gt;    }<br>&gt;    return dst<br>&gt; }<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Thu, Dec 3, 2015, at 09:47 PM, ChanMaxthon wrote:<br>&gt;&gt; How about this C code when rewritten in Swift:<br>&gt;&gt; <br>&gt;&gt; char *blk_xor(char *dst, const char *src, size_t len)<br>&gt;&gt; {<br>&gt;&gt;  const char *sp = src;<br>&gt;&gt;  for (char *dp = dst; sp - src &lt; len; sp++, dp++)<br>&gt;&gt;    *dp ^= *sp;<br>&gt;&gt;  return dst;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 13:35, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I found a couple of cases of them in my codebase, but they were trivially transformed into ?proper? Swift-style for loops that look better anyway. If it were a vote, I?d vote for eliminating C-style.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; l8r<br>&gt;&gt;&gt; Sean<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 3, 2015, at 6:52 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Every time I&#39;ve tried to use a C-style for loop, I&#39;ve ended up switching to a while loop because my iteration variable ended up having the wrong type (e.g. having an optional type when the value must be non-optional for the body to execute). The Postmates codebase contains no instances of C-style for loops in Swift.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Kevin Ballard<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Thu, Dec 3, 2015, at 04:50 PM, Eric Chamberlain wrote:<br>&gt;&gt;&gt;&gt;&gt; We?ve developed a number of Swift apps for various clients over the past year and have not needed C style for loops either.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Eric Chamberlain, Lead Architect - iOS<br>&gt;&gt;&gt;&gt;&gt; ArcTouch - App Development Studio<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Custom apps for world-class brands and the Fortune 500<br>&gt;&gt;&gt;&gt;&gt; arctouch.com/work | arctouch.com/blog<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:46 PM, Andy Matuschak &lt;andy at andymatuschak.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Just checked; ditto Khan Academy.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:43 PM, Keith Smiley &lt;keithbsmiley at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For what it&#39;s worth we don&#39;t have a single C style for loop in the Lyft<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; codebase.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Keith Smiley<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 12/03, Douglas Gregor wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 3, 2015, at 3:32 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Does Swift still needs C-style for loops with conditions and incrementers? <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;Screen Shot 2015-12-03 at 4.30.15 PM.png&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; More Swift-like construction is already available with for-in-statements and stride. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This would naturally starve the most common point for -- and ++ operators as well.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; My intuition *completely* agrees that Swift no longer needs C-style for loops. We have richer, better-structured looping and functional algorithms. That said, one bit of data I?d like to see is how often C-style for loops are actually used in Swift. It?s something a quick crawl through Swift sources on GitHub could establish. If the feature feels anachronistic and is rarely used, it?s a good candidate for removal.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - Doug<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>C-style For Loops</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December  4, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:56 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; I honestly have no idea where to go next with this. Here&#39;s my starting point: https://gist.github.com/erica/cf064a34f8891fb7a4a8<br>&gt; <br>&gt; Advice welcome.<br>&gt; <br>&gt; -- E, inexperienced at this stuff<br></p><p>Looks like you&#39;re on the right track. Check out the Swift evolution process if you haven&#39;t already: https://swift.org/contributing/#participating-in-the-swift-evolution-process Next step would be to fork swift-evolution and make a pull request, I believe.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>C-style For Loops</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 11:07 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 4, 2015, at 10:56 AM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I honestly have no idea where to go next with this. Here&#39;s my starting point: https://gist.github.com/erica/cf064a34f8891fb7a4a8<br>&gt;&gt; <br>&gt;&gt; Advice welcome.<br>&gt;&gt; <br>&gt;&gt; -- E, inexperienced at this stuff<br>&gt; <br>&gt; Looks like you&#39;re on the right track. Check out the Swift evolution process if you haven&#39;t already: https://swift.org/contributing/#participating-in-the-swift-evolution-process Next step would be to fork swift-evolution and make a pull request, I believe.<br></p><p><br>Just to close the loop on this… the review of Erica’s proposal is now scheduled for December 7-10, 2015, and is on the review schedule here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/schedule.md<br></p><p>The evolution process we’re following is described at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>	- Doug<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2af8daf170a3ed693e577a9471ea1f10?s=50"></div><header><strong>C-style For Loops</strong> from <string>Ray Fix</string> &lt;rayfix at gmail.com&gt;<p>December  4, 2015 at 01:00:00pm</p></header><div class="content"><p>Hi Erica,<br></p><p>One argument that I don’t see being made in your proposal is that the while statement provides an equivalent, more verbose form of C-style for loops.  <br></p><p>var i = 0<br>while (i &lt; 10) {<br>  print(i)<br>  i += 1<br>}<br></p><p>I understand that one of the major goals of Swift is to be a language great to learn about computing.  Removing C-style loops doesn’t really diminished from this goal because the same thing can be taught with while.<br></p><p>Good luck,<br></p><p>Ray Fix<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151204/2d8ede2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/63a70b00feba1e66410b7799b58a897d?s=50"></div><header><strong>C-style For Loops</strong> from <string>Alex Chan</string> &lt;alex at alexwlchan.net&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi Erica,<br></p><p>I was a bit surprised that safety wasn&#39;t among the disadvantages of for<br>loops.<br></p><p>For loops make it easy to mess up the bounds of an array.  You can miss<br>items at either end, or inadvertently read beyond the end.  For example:<br></p><p>    for var i = 0; i &lt;= bar.count; i++ {<br>        print(&quot;The \(i)th element in bar is \(bar[i]).&quot;)<br>    }<br></p><p>There are similar mistakes where you can miss an element of an array at<br>either end.  I&#39;m struggling to imagine how you could make the same<br>mistakes with for-in loops.<br></p><p>Perhaps only a minor benefit, but I still think it adds to the case in<br>favour.<br></p><p>— Alex<br></p><p><br></p><p>PS If I try to run the snippet above in a Playground in Xcode 7.1.1, the<br>compiler error is fairly unhelpful:<br></p><p>&gt; Execution was interrupted, reason: EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0).<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
