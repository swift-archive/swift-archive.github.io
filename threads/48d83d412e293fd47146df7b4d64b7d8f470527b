<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>December 10, 2015 at 06:00:00pm</p></header><div class="content"><p>I encourage you to read the Swift API Design Guidelines<br>&lt;https://swift.org/documentation/api-design-guidelines.html&gt;, as there are<br>a couple of things there that discourage what you are suggesting:<br></p><p>   - &quot;*Clarity is more important than brevity*. Although Swift code can be<br>   compact, it is a *non-goal* to enable the smallest possible code with<br>   the fewest characters. Brevity in Swift code, where it occurs, is a<br>   side-effect of the strong type system and features that naturally reduce<br>   boilerplate.&quot;<br>   -<br></p><p>   *Avoid abbreviations*. Abbreviations, especially non-standard ones, are<br>   effectively terms-of-art, because understanding depends on correctly<br>   translating them into their non-abbreviated forms.<br></p><p>   The intended meaning for any abbreviation you use should be easily found<br>   by a web search.<br></p><p><br>Thanks,<br>Seth<br></p><p>On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Thank you for responding so late!<br>&gt;<br>&gt; I agree with you that &quot;subs&quot; is not very obvious for subscript. While<br>&gt; learning swift, I have a feeling that it contains so many long words as the<br>&gt; keywords, such as<br>&gt;<br>&gt; fallthrough, dynamicType, associativity, convenience, nonmutating,<br>&gt; precedence, etc..<br>&gt;<br>&gt; I understand there is a need for clarity. But I think it&#39;s also important<br>&gt; to keep a concise and simple naming style where it&#39;s possible.<br>&gt;<br>&gt; Thanks again.<br>&gt;<br>&gt; ------------------------------<br>&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot;<br>&gt; with &quot;subs&quot;<br>&gt; From: jackl at apple.com<br>&gt; Date: Thu, 10 Dec 2015 18:22:55 -0800<br>&gt; CC: swift-evolution at swift.org<br>&gt; To: feijian_sun at hotmail.com<br>&gt;<br>&gt;<br>&gt; It’s non-obvious to me that “subs” is short for subscript, whereas “init”<br>&gt; and “func” have only one obvious expansion.<br>&gt;<br>&gt; Jack<br>&gt;<br>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter<br>&gt; version, &quot;subs&quot;. The idea is to keep the concise naming style on the<br>&gt; language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt;<br>&gt; So, Instead of:<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; we could simply do:<br>&gt;<br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; Does this mean a big change on the parser side? what do you think?<br>&gt;<br>&gt; Thank you!<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/48d8527b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>Thanks for your suggestion! <br>But you&#39;re talking about the guidelines for Swift API Design while I&#39;m proposing a keyword change in the language itself. I think they are not the same subjects.<br>The language itself uses many abbreviations as its keywords. If you search for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for &#39;variable&#39;. Does it mean it violates the guidelines?<br></p><p><br>From: sethfri at gmail.com<br>Date: Thu, 10 Dec 2015 18:58:45 -0800<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>To: feijian_sun at hotmail.com; jackl at apple.com<br>CC: swift-evolution at swift.org<br></p><p>I encourage you to read the Swift API Design Guidelines, as there are a couple of things there that discourage what you are suggesting:&quot;Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.&quot;Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms.The intended meaning for any abbreviation you use should be easily found by a web search.Thanks,Seth<br>On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p>Thank you for responding so late!<br>I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>Thanks again.<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>From: jackl at apple.com<br>Date: Thu, 10 Dec 2015 18:22:55 -0800<br>CC: swift-evolution at swift.org<br>To: feijian_sun at hotmail.com<br></p><p>It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>Jack <br>On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?Thank you! _______________________________________________swift-evolution mailing listswift-evolution at swift.orghttps://lists.swift.org/mailman/listinfo/swift-evolution<br> 		 	   		  <br></p><p><br></p><p>_______________________________________________<br></p><p>swift-evolution mailing list<br></p><p>swift-evolution at swift.org<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/00d3581a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 10, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt; Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms<br></p><p>I think the language tries to follow those guidelines as well. Also, “subs” is a very non-standard abbreviation. On the other hand, “init” and “var” are standard and very well known.<br></p><p>-David<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/b72d3204/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a1faea18be9eb2d50c4edcd223f2d685?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Seth Friedman</string> &lt;sethfri at gmail.com&gt;<p>December 10, 2015 at 07:00:00pm</p></header><div class="content"><p>I disagree that API for libraries and API for the language are different<br>subjects, otherwise that would make one feel rather unnatural when compared<br>to the other.<br></p><p>As for your specific example, a quick Google search for &quot;var programming&quot;<br>or &quot;var computer science&quot; will quickly tell you what the word means. A<br>search for &quot;var&quot; by itself does not, same with &quot;func&quot;, but I don&#39;t think we<br>should be so pedantic that we insist on single word web searches.<br></p><p>Thanks,<br>Seth<br></p><p>On Thu, Dec 10, 2015 at 7:09 PM Feijian Sun &lt;feijian_sun at hotmail.com&gt; wrote:<br></p><p>&gt; Thanks for your suggestion!<br>&gt;<br>&gt; But you&#39;re talking about the guidelines for Swift API Design while I&#39;m<br>&gt; proposing a keyword change in the language itself. I think they are not the<br>&gt; same subjects.<br>&gt;<br>&gt; The language itself uses many abbreviations as its keywords. If you search<br>&gt; for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for<br>&gt; &#39;variable&#39;. Does it mean it violates the guidelines?<br>&gt;<br>&gt;<br>&gt;<br>&gt; ------------------------------<br>&gt; From: sethfri at gmail.com<br>&gt; Date: Thu, 10 Dec 2015 18:58:45 -0800<br>&gt;<br>&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot;<br>&gt; with &quot;subs&quot;<br>&gt; To: feijian_sun at hotmail.com; jackl at apple.com<br>&gt; CC: swift-evolution at swift.org<br>&gt;<br>&gt;<br>&gt; I encourage you to read the Swift API Design Guidelines<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines.html&gt;, as there<br>&gt; are a couple of things there that discourage what you are suggesting:<br>&gt;<br>&gt;    - &quot;*Clarity is more important than brevity*. Although Swift code can<br>&gt;    be compact, it is a *non-goal* to enable the smallest possible code<br>&gt;    with the fewest characters. Brevity in Swift code, where it occurs, is a<br>&gt;    side-effect of the strong type system and features that naturally reduce<br>&gt;    boilerplate.&quot;<br>&gt;    -<br>&gt;<br>&gt;    *Avoid abbreviations*. Abbreviations, especially non-standard ones,<br>&gt;    are effectively terms-of-art, because understanding depends on correctly<br>&gt;    translating them into their non-abbreviated forms.<br>&gt;<br>&gt;    The intended meaning for any abbreviation you use should be easily<br>&gt;    found by a web search.<br>&gt;<br>&gt;<br>&gt; Thanks,<br>&gt; Seth<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Thank you for responding so late!<br>&gt;<br>&gt; I agree with you that &quot;subs&quot; is not very obvious for subscript. While<br>&gt; learning swift, I have a feeling that it contains so many long words as the<br>&gt; keywords, such as<br>&gt;<br>&gt; fallthrough, dynamicType, associativity, convenience, nonmutating,<br>&gt; precedence, etc..<br>&gt;<br>&gt; I understand there is a need for clarity. But I think it&#39;s also important<br>&gt; to keep a concise and simple naming style where it&#39;s possible.<br>&gt;<br>&gt; Thanks again.<br>&gt;<br>&gt; ------------------------------<br>&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot;<br>&gt; with &quot;subs&quot;<br>&gt; From: jackl at apple.com<br>&gt; Date: Thu, 10 Dec 2015 18:22:55 -0800<br>&gt; CC: swift-evolution at swift.org<br>&gt; To: feijian_sun at hotmail.com<br>&gt;<br>&gt;<br>&gt; It’s non-obvious to me that “subs” is short for subscript, whereas “init”<br>&gt; and “func” have only one obvious expansion.<br>&gt;<br>&gt; Jack<br>&gt;<br>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello,<br>&gt;<br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter<br>&gt; version, &quot;subs&quot;. The idea is to keep the concise naming style on the<br>&gt; language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt;<br>&gt; So, Instead of:<br>&gt;<br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; we could simply do:<br>&gt;<br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt;<br>&gt; Does this mean a big change on the parser side? what do you think?<br>&gt;<br>&gt; Thank you!<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/da0bc27e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3db3c0e8e3734ef93774f05199cbe713?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Feijian Sun</string> &lt;feijian_sun at hotmail.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>Sorry, but I still think that a language itself and the API created with the language are two different things. A language can use any abbreviations as its keywords as long as they are defined clearly. But the names used for API are created by developers and should follow some common guidelines.<br>Just my own opinions. But good talk.<br>Thanks.<br></p><p>From: sethfri at gmail.com<br>Date: Thu, 10 Dec 2015 19:25:25 -0800<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>To: feijian_sun at hotmail.com<br>CC: jackl at apple.com; swift-evolution at swift.org<br></p><p>I disagree that API for libraries and API for the language are different subjects, otherwise that would make one feel rather unnatural when compared to the other.<br>As for your specific example, a quick Google search for &quot;var programming&quot; or &quot;var computer science&quot; will quickly tell you what the word means. A search for &quot;var&quot; by itself does not, same with &quot;func&quot;, but I don&#39;t think we should be so pedantic that we insist on single word web searches.<br>Thanks,Seth<br></p><p>On Thu, Dec 10, 2015 at 7:09 PM Feijian Sun &lt;feijian_sun at hotmail.com&gt; wrote:<br></p><p><br></p><p>Thanks for your suggestion! <br>But you&#39;re talking about the guidelines for Swift API Design while I&#39;m proposing a keyword change in the language itself. I think they are not the same subjects.<br>The language itself uses many abbreviations as its keywords. If you search for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for &#39;variable&#39;. Does it mean it violates the guidelines?<br></p><p><br>From: sethfri at gmail.com<br>Date: Thu, 10 Dec 2015 18:58:45 -0800<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>To: feijian_sun at hotmail.com; jackl at apple.com<br>CC: swift-evolution at swift.org<br></p><p>I encourage you to read the Swift API Design Guidelines, as there are a couple of things there that discourage what you are suggesting:&quot;Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.&quot;Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms.The intended meaning for any abbreviation you use should be easily found by a web search.Thanks,Seth<br>On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p>Thank you for responding so late!<br>I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>Thanks again.<br>Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>From: jackl at apple.com<br>Date: Thu, 10 Dec 2015 18:22:55 -0800<br>CC: swift-evolution at swift.org<br>To: feijian_sun at hotmail.com<br></p><p>It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>Jack <br>On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>Hello, I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.So, Instead of:subscript(index: Int) -&gt; Int {        ... ...}we could simply do:subs(index: Int) -&gt; Int{        ... ...}Does this mean a big change on the parser side? what do you think?Thank you! _______________________________________________swift-evolution mailing listswift-evolution at swift.orghttps://lists.swift.org/mailman/listinfo/swift-evolution<br> 		 	   		  <br></p><p><br></p><p>_______________________________________________<br></p><p>swift-evolution mailing list<br></p><p>swift-evolution at swift.org<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p> 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/b871a82b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f9e638540251a5a2a70ae516ad544281?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Frederick Kellison-Linn</string> &lt;fred.kl at me.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; The language itself uses many abbreviations as its keywords. If you search for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for &#39;variable&#39;. Does it mean it violates the guidelines?<br></p><p><br>Actually, a Google search for just ‘var’ yields results pointing to JavaScript, C#, and HTML on the first page. A search for ‘init’ immediately describes the init process on Unix systems, as well as many other programming related results. Following any of these will let you understand the meaning of ‘init’ or ‘var’ pretty quickly. OTOH, ‘subs’ gives lots of results for sandwiches, but nothing programming related.<br></p><p>As a concert example of confusion that can arise, String implements subscript(), but ‘subs’ could just as easily stand for ‘substring’ in this context.<br></p><p>FKL<br></p><p>&gt; On Dec 10, 2015, at 10:09 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks for your suggestion! <br>&gt; <br>&gt; But you&#39;re talking about the guidelines for Swift API Design while I&#39;m proposing a keyword change in the language itself. I think they are not the same subjects.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; From: sethfri at gmail.com &lt;mailto:sethfri at gmail.com&gt;<br>&gt; Date: Thu, 10 Dec 2015 18:58:45 -0800<br>&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;; jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; <br>&gt; I encourage you to read the Swift API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines.html&gt;, as there are a couple of things there that discourage what you are suggesting:<br>&gt; &quot;Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.&quot;<br>&gt; Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms.<br>&gt; The intended meaning for any abbreviation you use should be easily found by a web search.<br>&gt; Thanks,<br>&gt; Seth<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Thank you for responding so late!<br>&gt; <br>&gt; I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>&gt; <br>&gt; fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>&gt; <br>&gt; I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>&gt; <br>&gt; Thanks again.<br>&gt; <br>&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt; From: jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt; Date: Thu, 10 Dec 2015 18:22:55 -0800<br>&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;<br>&gt; <br>&gt; <br>&gt; It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>&gt; <br>&gt; Jack <br>&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; Hello, <br>&gt; <br>&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt; <br>&gt; So, Instead of:<br>&gt; <br>&gt; subscript(index: Int) -&gt; Int {<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; we could simply do:<br>&gt; <br>&gt; subs(index: Int) -&gt; Int{<br>&gt;         ... ...<br>&gt; }<br>&gt; <br>&gt; Does this mean a big change on the parser side? what do you think?<br>&gt; <br>&gt; Thank you!<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/8c62d376/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 10, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 7:41 PM, Frederick Kellison-Linn via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; The language itself uses many abbreviations as its keywords. If you search for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for &#39;variable&#39;. Does it mean it violates the guidelines?<br>&gt; <br>&gt; <br>&gt; Actually, a Google search for just ‘var’ yields results pointing to JavaScript, C#, and HTML on the first page. A search for ‘init’ immediately describes the init process on Unix systems, as well as many other programming related results. Following any of these will let you understand the meaning of ‘init’ or ‘var’ pretty quickly. OTOH, ‘subs’ gives lots of results for sandwiches, but nothing programming related.<br>&gt; <br>&gt; As a concert example of confusion that can arise, String implements subscript(), but ‘subs’ could just as easily stand for ‘substring’ in this context.<br></p><p>“var&quot;, “func&quot;, and “struct&quot; are exceptions to the general rule because they’re so prominent; even novice Swift programmers will quickly learn these three concepts.  “subscript” is probably at least three orders of magnitude less common, and many programmers will not be immediately familiar with it, so it’s far more important to be clear than succinct.<br></p><p>John.<br></p><p>&gt; <br>&gt; FKL<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 10:09 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks for your suggestion! <br>&gt;&gt; <br>&gt;&gt; But you&#39;re talking about the guidelines for Swift API Design while I&#39;m proposing a keyword change in the language itself. I think they are not the same subjects.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; From: sethfri at gmail.com &lt;mailto:sethfri at gmail.com&gt;<br>&gt;&gt; Date: Thu, 10 Dec 2015 18:58:45 -0800<br>&gt;&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt;&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;; jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt;&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; <br>&gt;&gt; I encourage you to read the Swift API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines.html&gt;, as there are a couple of things there that discourage what you are suggesting:<br>&gt;&gt; &quot;Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.&quot;<br>&gt;&gt; Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms.<br>&gt;&gt; The intended meaning for any abbreviation you use should be easily found by a web search.<br>&gt;&gt; Thanks,<br>&gt;&gt; Seth<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Thank you for responding so late!<br>&gt;&gt; <br>&gt;&gt; I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>&gt;&gt; <br>&gt;&gt; fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>&gt;&gt; <br>&gt;&gt; I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>&gt;&gt; <br>&gt;&gt; Thanks again.<br>&gt;&gt; <br>&gt;&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt;&gt; From: jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt;&gt; Date: Thu, 10 Dec 2015 18:22:55 -0800<br>&gt;&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>&gt;&gt; <br>&gt;&gt; Jack <br>&gt;&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello, <br>&gt;&gt; <br>&gt;&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt;&gt; <br>&gt;&gt; So, Instead of:<br>&gt;&gt; <br>&gt;&gt; subscript(index: Int) -&gt; Int {<br>&gt;&gt;         ... ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; we could simply do:<br>&gt;&gt; <br>&gt;&gt; subs(index: Int) -&gt; Int{<br>&gt;&gt;         ... ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Does this mean a big change on the parser side? what do you think?<br>&gt;&gt; <br>&gt;&gt; Thank you!<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/33b123eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a59b0df1d55761e4d340da93232790ea?s=50"></div><header><strong>Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;</strong> from <string>Kevin Wooten</string> &lt;kdubb at me.com&gt;<p>December 10, 2015 at 10:00:00pm</p></header><div class="content"><p>Just a comment here…	tl;dr<br></p><p>It is unfortunate that people are not able/willing to read the clear goals of the project as outlined by its leadership and follow suite. This is the third or forth such request I’ve seen in a short period that has been proposed of which the only goal was to reduce typing by a few characters; which has been shown is not a goal of Swift.<br></p><p>It seems everybody is eager to propose “something” but these type of proposals seems to be generating a bit of chatter, on a list that is very active.  As outsiders I think we really need to respect the goals and the demands a list like this puts on the leaderships time.  We don’t want to disengage them with an overwhelming list of requests that are not really viable.<br></p><p>P.S.  Yes I get the irony that I just created more “chatter” just thought somebody should point this out.  Also, I would like to verify that I have no affiliation with the project, Apple or otherwise. Jut a concerned citizen that wants to make sure our up close and personal access to the leaders of this project remains intact. <br></p><p>&gt; On Dec 10, 2015, at 9:18 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 7:41 PM, Frederick Kellison-Linn via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; The language itself uses many abbreviations as its keywords. If you search for &#39;var&#39; on web, for example, you won&#39;t easily find it stands for &#39;variable&#39;. Does it mean it violates the guidelines?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Actually, a Google search for just ‘var’ yields results pointing to JavaScript, C#, and HTML on the first page. A search for ‘init’ immediately describes the init process on Unix systems, as well as many other programming related results. Following any of these will let you understand the meaning of ‘init’ or ‘var’ pretty quickly. OTOH, ‘subs’ gives lots of results for sandwiches, but nothing programming related.<br>&gt;&gt; <br>&gt;&gt; As a concert example of confusion that can arise, String implements subscript(), but ‘subs’ could just as easily stand for ‘substring’ in this context.<br>&gt; <br>&gt; “var&quot;, “func&quot;, and “struct&quot; are exceptions to the general rule because they’re so prominent; even novice Swift programmers will quickly learn these three concepts.  “subscript” is probably at least three orders of magnitude less common, and many programmers will not be immediately familiar with it, so it’s far more important to be clear than succinct.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; FKL<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 10:09 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks for your suggestion! <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But you&#39;re talking about the guidelines for Swift API Design while I&#39;m proposing a keyword change in the language itself. I think they are not the same subjects.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; From: sethfri at gmail.com &lt;mailto:sethfri at gmail.com&gt;<br>&gt;&gt;&gt; Date: Thu, 10 Dec 2015 18:58:45 -0800<br>&gt;&gt;&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt;&gt;&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;; jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt;&gt;&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I encourage you to read the Swift API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines.html&gt;, as there are a couple of things there that discourage what you are suggesting:<br>&gt;&gt;&gt; &quot;Clarity is more important than brevity. Although Swift code can be compact, it is a non-goal to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate.&quot;<br>&gt;&gt;&gt; Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms.<br>&gt;&gt;&gt; The intended meaning for any abbreviation you use should be easily found by a web search.<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Seth<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 6:52 PM Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Thank you for responding so late!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree with you that &quot;subs&quot; is not very obvious for subscript. While learning swift, I have a feeling that it contains so many long words as the keywords, such as<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; fallthrough, dynamicType, associativity, convenience, nonmutating, precedence, etc..<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I understand there is a need for clarity. But I think it&#39;s also important to keep a concise and simple naming style where it&#39;s possible.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks again.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Subject: Re: [swift-evolution] Proposal for Replacing Keyword &quot;subscript&quot; with &quot;subs&quot;<br>&gt;&gt;&gt; From: jackl at apple.com &lt;mailto:jackl at apple.com&gt;<br>&gt;&gt;&gt; Date: Thu, 10 Dec 2015 18:22:55 -0800<br>&gt;&gt;&gt; CC: swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; To: feijian_sun at hotmail.com &lt;mailto:feijian_sun at hotmail.com&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s non-obvious to me that “subs” is short for subscript, whereas “init” and “func” have only one obvious expansion.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jack <br>&gt;&gt;&gt; On Dec 10, 2015, at 6:12 PM, Feijian Sun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello, <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I have a proposal to replace the long keyword &quot;subscript&quot; with the shorter version, &quot;subs&quot;. The idea is to keep the concise naming style on the language keywords, like &quot;init&quot; and &quot;func&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, Instead of:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; subscript(index: Int) -&gt; Int {<br>&gt;&gt;&gt;         ... ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; we could simply do:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; subs(index: Int) -&gt; Int{<br>&gt;&gt;&gt;         ... ...<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Does this mean a big change on the parser side? what do you think?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you!<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151210/3431c2fb/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
