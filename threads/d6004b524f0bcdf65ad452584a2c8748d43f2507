<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Proposal] Refining Identifier and Operator Symbology</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>October 19, 2016 at 07:00:00pm</p></header><div class="content"><p>An EXTREME -1 from me as well.  The restrictions on operators is FAR too severe.  At the very least, I need the upside-down question mark and exclamation points ¿ ¡, as well as the ≤,≥,≠ operators.  I mean, you are getting rid of the division sign ÷.  How could that ever be controversial as an operator?<br></p><p>This is the first proposal I have seen, where if it goes through, I will actually have to stop using Swift (or find a way not to upgrade)!<br></p><p>Seriously, this proposal would break the vast majority of my code.  One of the first things I wrote for Swift was a packrat parser which lets me define rulesets that look like standard PEG using swift operators.  I have now written several different projects on top of that.  I also have a private extension for ≤,≥,≠ that I use in my projects.<br></p><p>What happened to needing extra justification for breaking changes? We can add them back later, you say. This seems to be breaking things just for the fun of it then…. If you are going to need to break things later to become compatible with something, then break them later.  Don’t break my production code now to avoid a 1% chance you might have to break my production code in the future.<br></p><p>&gt; [begin quote]<br>&gt; <br>&gt; • Operators suffer from low discoverability and difficult readability. They<br>&gt; use symbols, not names. This places a cognitive cost on users with respect<br>&gt; to both recall (&quot;What is the operator that applies the behavior I need?&quot;)<br>&gt; and recognition (&quot;What does the operator in this code do?&quot;).<br>&gt; • This cost is obviously highest when symbols are not tied to conventional<br>&gt; standards like `∪` for union and `⊇` for superset. `∪` is a standard,<br>&gt; mathematical representation. It’s widely accepted and widely used. Even so,<br>&gt;  recognizing `formUnion(with:)` may work better for many coders than<br>&gt; recalling what the `∪` (or, worse, `⊇`) operator does, even when you end up<br>&gt; having to create suites of specialized selectors. As operators become more<br>&gt; self-defined or esoteric, costs rise.<br>&gt; <br>&gt; [end quote]<br>With all due respect, my day job is in the cognitive sciences (I have a master’s degree in Cognitive Psychology) and this is pure bullshit.  The entire reason we use symbols is that the opposite is true.  Yes, there is temporarily a greater burden on people who are new to a symbol, but once they learn it, it has much faster recall and recognition. That is why we use icons all over the place. It is why mathematicians use symbols.  It is why you see all those symbols on signs at the airport.<br></p><p>There are a bunch of symbols in unicode which are hard to tell apart, and those are bad for recognition, and we should deal with that, but this proposal is throwing the baby out with the bathwater, then lighting the baby on fire.  Honestly, I would propose we find a way to have Swift see certain classes of characters as identical.  Can’t decide which of the thousand + symbols should be the one true + symbol?  Have them all map to one of them.  That emoji X symbol looks like X, so map it to X.<br></p><p>This proposal is lazy and unreasonable.  I think we can all agree that there needs to be thought around confusable symbols… but most of us just aren’t using the confusable symbols.  The argument seems to be “Let’s break EVERYTHING now so we don’t have to break it later”, which is pure ridiculousness.  Don’t break anything now… and then when you are ready to deal with confusables (which, again, most people aren’t actually using) do it surgically then.  You will be breaking a strictly smaller amount of code…<br></p><p><br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161019/d6002507/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2b19ddab2d7de4523412c875c258e278?s=50"></div><header><strong>[Proposal] Refining Identifier and Operator Symbology</strong> from <string>Matt Whiteside</string> &lt;mwhiteside.dev at gmail.com&gt;<p>October 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 19, 2016, at 19:07, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&lt;snip&gt;<br>&gt; There are a bunch of symbols in unicode which are hard to tell apart, and those are bad for recognition, and we should deal with that, but this proposal is throwing the baby out with the bathwater, then lighting the baby on fire.  Honestly, I would propose we find a way to have Swift see certain classes of characters as identical.  Can’t decide which of the thousand + symbols should be the one true + symbol?  Have them all map to one of them.  That emoji X symbol looks like X, so map it to X.<br></p><p><br>Agreed.<br></p><p>I really like the option of using unicode operators in swift.  Removing them would be disappointing.  But I do see the problem that there are a lot of redundancies and sources of confusion if there are no restrictions.  Aside from the redundancies, some other cases that I find sub-optimal are: &#39;top-half of integral&#39; ⌠, and  &#39;left parenthesis upper hook’ ⎛ ;  these don’t really seem like symbols we want to allow as operators.  Perhaps *one* general rule here, is that symbols specifically meant for 2d math expressions aren&#39;t good candidates for inclusion, at least at the present.  Another difficult one, I think, are the bracket-like glyphs.  While these would be useful in certain math and physics related code, it’s not clear at the moment how these could be used in swift, until and unless some kind of ‘bracket overloading’ is made possible.<br></p><p>I’m in favor of what Johnathan Hull has suggested above.  I’m also in favor of what some others have suggested, i.e., restricting the allowed operator symbols to some uncontroversial subset, mainly from the unicode ‘math’ category of symbols, and then possibly adding more as needed.<br></p><p>-Matt<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161022/24bc1e07/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal] Refining Identifier and Operator Symbology</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October 22, 2016 at 10:00:00pm</p></header><div class="content"><p>That, I think, is where we&#39;re headed. Take a look at Jonathan Shapiro&#39;s<br>latest draft and see what you think :)<br>On Sat, Oct 22, 2016 at 17:46 Matt Whiteside via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 19, 2016, at 19:07, Jonathan Hull via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &lt;snip&gt;<br>&gt;<br>&gt; There are a bunch of symbols in unicode which are hard to tell apart, and<br>&gt; those are bad for recognition, and we should deal with that, but this<br>&gt; proposal is throwing the baby out with the bathwater, then lighting the<br>&gt; baby on fire.  Honestly, I would propose we find a way to have Swift see<br>&gt; certain classes of characters as identical.  Can’t decide which of the<br>&gt; thousand + symbols should be the one true + symbol?  Have them all map to<br>&gt; one of them.  That emoji X symbol looks like X, so map it to X.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Agreed.<br>&gt;<br>&gt; I really like the option of using unicode operators in swift.  Removing<br>&gt; them would be disappointing.  But I do see the problem that there are a lot<br>&gt; of redundancies and sources of confusion if there are no restrictions.<br>&gt; Aside from the redundancies, some other cases that I find sub-optimal are:<br>&gt; &#39;top-half of integral&#39; ⌠, and  &#39;left parenthesis upper hook’ ⎛ ;  these don’t<br>&gt; really seem like symbols we want to allow as operators.  Perhaps<br>&gt; *one* general rule here, is that symbols specifically meant for 2d math<br>&gt; expressions aren&#39;t good candidates for inclusion, at least at the present.<br>&gt; Another difficult one, I think, are the bracket-like glyphs.  While<br>&gt; these would be useful in certain math and physics related code, it’s not<br>&gt; clear at the moment how these could be used in swift, until and unless some<br>&gt; kind of ‘bracket overloading’ is made possible.<br>&gt;<br>&gt; I’m in favor of what Johnathan Hull has suggested above.  I’m also in<br>&gt; favor of what some others have suggested, i.e., restricting the allowed<br>&gt; operator symbols to some uncontroversial subset, mainly from the unicode<br>&gt; ‘math’ category of symbols, and then possibly adding more as needed.<br>&gt;<br>&gt; -Matt<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161022/3f3241a4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
