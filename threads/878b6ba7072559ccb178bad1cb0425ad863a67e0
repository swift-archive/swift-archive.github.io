<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Implementation of property behaviors</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 20, 2016 at 10:00:00am</p></header><div class="content"><p>Here are my thoughts on implementing property behaviors. I think we can use an approach that instantiates storage at compile time, in order to avoid introducing type metadata, while still using separate compilation of implementations, by treating the behavior similarly to a protocol. We should be able to get optimization benefits from inlining using our existing and planned future optimization framework.<br></p><p>When a property is declared using a behavior, we emit a vtable referencing the interesting aspects of the property declaration:<br></p><p>- A projection function from Self to the behavior&#39;s storage for the property (which can be a pointer projection, since we know the behavior storage is stored),<br>- The accessors, lowered as methods on the containing Self type;<br>- If the initializer is bound, then a function that evaluates the initializer expression. If we have the eager/deferred distinction, then an eager initializer is () -&gt; Value, and a deferred initializer is (Self) -&gt; Value.<br>- If the property&#39;s name is bound, then a reference to the global string constant (which can be handed off to StringLiteralConvertible),<br>- If the behavior can be composed, then the get/materializeForSet/set accessors that project from Self to the base property.<br></p><p>So if you had (using John&#39;s syntax proposal):<br></p><p>behavior var [foo] name: Value = /*eager*/ initialValue {<br>  var storage: [Value?!]<br>  init() { ... }<br></p><p>  accessor foo(x: Int)<br>  mutating accessor bar(y: String)<br>}<br></p><p>and you instantiated it:<br></p><p>struct X {<br>  var [foo] x = 99 {<br>    foo { ... }<br>    bar { ... }<br>  }<br>}<br></p><p>we&#39;d emit a data structure like:<br></p><p>sil_global [let] @&quot;X.x#foo vtable&quot; : $(<br>  // Project behavior storage from container, *Self -&gt; *Storage<br>  project_foo: @convention(thin) (RawPointer) -&gt; RawPointer,<br>  // Accessors<br>  foo: @convention(method) (Int, @guaranteed X) -&gt; (),<br>  bar: @convention(method) (String, @inout X) -&gt; (),<br>  // Initial value<br>  initialValue: @convention(thin) () -&gt; Int,<br>  // Name<br>  name: (RawPointer, Word)<br>) {<br>  %project_foo = function_ref @&quot;X.x#foo.project&quot;<br>  %foo = function_ref @&quot;X.x#foo.foo&quot;<br>  %bar = function_ref @&quot;X.x#foo.bar&quot;<br>  %initialValue = function_ref @&quot;X.x#foo.initialValue&quot;<br>  %name = string_literal utf8 &quot;x&quot;<br>  %tuple = tuple (%project_foo, %foo, %bar, %initialValue, %name)<br>  return %tuple<br>}<br></p><p>(If we want behaviors to be able to resiliently add accessor requirements, we&#39;ll need a more sophisticated vtable with runtime support instead of an ad-hoc global constant, more like a protocol witness table.) Effectively, we treat the behavior like a fragile protocol, albeit one that can be conformed to many times by the same set of types.<br></p><p>When emitting the behavior&#39;s members, we emit them as generic on Self and the property type. Each member implementation receives the container value &#39;self&#39; (either inout or in_guaranteed, depending on whether it&#39;s mutating) and a reference to the behavior vtable as context (again, very similar to a protocol extension method). References to the initializer get lowered to calls to the initializer function in the vtable. References to behavior storage have to be emitted as projections from &#39;self&#39;, and in mutating contexts, should formally be considered formal accesses derived from &#39;self&#39; in order to be valid &#39;inout&#39; accesses. References to the name load the raw global string from the vtable and hand it to the contextual type&#39;s init(stringLiteral:) initializer.<br></p><p>Inside the type, we instantiate the behavior&#39;s storage, and initialize it as if it had an inline initializer calling the behavior&#39;s `init`. So:<br></p><p>struct X {<br>  var [foo] x = 99 {<br>    foo { ... }<br>    bar { ... }<br>  }<br>}<br></p><p>becomes notionally:<br></p><p>struct X {<br>  var x#foo.storage: [Int?!] = foo.init(&amp;self, &amp;@&quot;X.x#foo vtable&quot;)<br>}<br></p><p>I believe we&#39;re able to promote loads from immutable globals, specialize, and inline with existing optimizations, which should allow all this to optimize away, without us having to grow new infrastructure to do AST-level serialization and instantiation, or deviating too much from SILGen&#39;s current per-declaration code generation model.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160120/878b67e0/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
