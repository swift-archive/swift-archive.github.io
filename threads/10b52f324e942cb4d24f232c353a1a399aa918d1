<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>Hello everybody.<br></p><p><br>I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>daughter/son of Objective-C). OK, she/he is different and has her/his own<br>personality like a daughter/son should be and have, but I still like to see<br>Swift and recognize some traces that I know are things that became from C.<br></p><p><br>This said, I would like to say that after the removal of `++` and `--` my<br>code becomes less readable and more prone to errors. There were two<br>characters to differentiate an addition from a subtraction, now there is<br>only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>keyboard so it is easier to make a mistake and is not as simple as the<br>previous solution when I typed two times the same key. Using Erica&#39;s way of<br>saying certain things: I do not love the removal of `++` and `--`.<br></p><p><br>I do not know how far the Swift is to the adolescence, but it is certain<br>that teenagers are rebels. There&#39;s something very good at it. In most cases<br>they are to be certain. But in some things they regret later. Now I see<br>that many of us want to replace the `??` operator to something else. I&#39;m<br>wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br></p><p><br>Are these changes really necessary for the Swift evolution? Is it the<br>better path to deny its origin and to try to fix what is not broken? I<br>would like you to think about it.<br></p><p><br>There are many other things that really need to be improved and repaired<br>and other things needed to are created. Those mentioned here in this<br>message does not seem to fit it.<br></p><p><br>Regards,<br></p><p><br>-Van<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/10b518d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>Oops: *needed to *be* created<br></p><p>On Sat, Jan 30, 2016 at 4:12 PM, Vanderlei Martinelli &lt;<br>vmartinelli at alecrim.com&gt; wrote:<br></p><p>&gt; Hello everybody.<br>&gt;<br>&gt;<br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;<br>&gt;<br>&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt; code becomes less readable and more prone to errors. There were two<br>&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;<br>&gt;<br>&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;<br>&gt;<br>&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt; would like you to think about it.<br>&gt;<br>&gt;<br>&gt; There are many other things that really need to be improved and repaired<br>&gt; and other things needed to are created. Those mentioned here in this<br>&gt; message does not seem to fit it.<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt;<br>&gt; -Van<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/a8d5315d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>January 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Vanderlei,<br></p><p>The ++/— operators weren’t removed just because they are redundant with `+= 1`.<br></p><p>++ is a bit special in that it doesn’t just modify the receiver, it also returns the modified variable. What’s more, there’s this subtle difference between `++foo` and `foo++` when you pass it further along. And that, that difference, makes such use dangerous, and prone to bugs.<br></p><p>It’s also a useful feature — if you live in the world of C. But in Swift, where explicit increments and decrements are far less common, it was deemed that the slight utility and convenience of it does not justify the cost of potential confusion and bugs that arise from that.<br></p><p>Give the actual proposal a read: https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md&gt; — it does a pretty good job at explaining the disadvantages of ++ and —. It’s not just a stylistic choice.<br></p><p>And &amp;&amp;, ||, !, are not in danger. Browse this mailing list’s history — it’s been proposed more than once and immediately rejected as a change that really isn’t justified in any way.<br></p><p>Also, let me quote Doug Gregor from the core team:<br></p><p>&gt; We certainly don’t want open-ended rehashing of past decisions, and I’d like to have the baseline rule be something very close to “the core team’s decisions are final” both to prevent such rehashing and also to emphasize the seriousness of the public review process: the public review is the point at which we need to gather widespread feedback on the direction of the language. Determining that there is a problem “after we shipped it” is a failure of the evolution process.<br>&gt; <br>&gt; The evolution process has a number of stages (idea/proposal draft/public review/core team), where each new stage brings additional scrutiny of the proposal. The hope is that this scrutiny is enough to prevent us from making poor decisions that may need to be overturned, and that the swift-evolution community is representative enough of the larger Swift community to provide that scrutiny. SE-0003 is somewhat special because it’s one of a few changes for Swift 3 that were decided prior to open-sourcing Swift: it didn’t go through the whole evolution process, so it didn’t have as many eyes on it as language changes do now.<br>&gt; <br>&gt; So, overall, I’d say that the core team’s decisions should be considered effectively final. If something gets through the entire evolution process and then we later find out it was a bad decision—e.g., due to massive negative feedback when it reaches the wider Swift community or unforeseen difficulties in implementation/rollout/etc.—the core team could bring up the idea of backing out the change. However, the evolution process *should* prevent this.<br></p><p><br>Best,<br>— Radek<br></p><p>&gt; On 30 Jan 2016, at 19:12, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everybody.<br>&gt; <br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt; <br>&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt; <br>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt; <br>&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt; <br>&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/5cefc602/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>Radek, thank you for bringing this up, but I know the reasons they have<br>been removed and I read the older messages (the `&amp;&amp;`, `||` and `!`<br>operators mention was an intended hyperbole). I am aware of the “Swift<br>evolution process&quot;.<br></p><p>And I still do not agree with the removal. You can consider code like:<br></p><p>network.activiy++<br>doSomeNetworkActiviy()<br>network.activiy--<br></p><p><br>`activity` here does not need to be a numeric variable, but other thing.<br>Does not make sense to write...<br></p><p>network.activiy += 1<br>doSomeNetworkActiviy()<br>network.activiy -= 1<br></p><p>...since I cannot add or subtract more than 1 in any case.<br></p><p>Now we can use methods like `increment` or `decrement`, but the two words,<br>when reading, are similar and not clear as `++` and `--`.<br></p><p>OK, but my initial message intent is to prevent operator like `?:`, `??`<br>and others to go away too (and maybe bring back the `++` and `--`<br>operators, who knows?).<br></p><p>Best,<br>-Van<br></p><p><br>On Sat, Jan 30, 2016 at 5:05 PM, Radosław Pietruszewski &lt;radexpl at gmail.com&gt;<br>wrote:<br></p><p>&gt; Vanderlei,<br>&gt;<br>&gt; The ++/— operators weren’t removed just because they are redundant with<br>&gt; `+= 1`.<br>&gt;<br>&gt; ++ is a bit special in that it doesn’t just modify the receiver, it also<br>&gt; returns the modified variable. What’s more, there’s this subtle difference<br>&gt; between `++foo` and `foo++` when you pass it further along. And that, that<br>&gt; difference, makes such use dangerous, and prone to bugs.<br>&gt;<br>&gt; It’s also a useful feature — if you live in the world of C. But in Swift,<br>&gt; where explicit increments and decrements are far less common, it was deemed<br>&gt; that the slight utility and convenience of it does not justify the cost of<br>&gt; potential confusion and bugs that arise from that.<br>&gt;<br>&gt; Give the actual proposal a read:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md —<br>&gt; it does a pretty good job at explaining the disadvantages of ++ and —. It’s<br>&gt; not just a stylistic choice.<br>&gt;<br>&gt; And &amp;&amp;, ||, !, are not in danger. Browse this mailing list’s history —<br>&gt; it’s been proposed more than once and immediately rejected as a change that<br>&gt; really isn’t justified in any way.<br>&gt;<br>&gt; Also, let me quote Doug Gregor from the core team:<br>&gt;<br>&gt; We certainly don’t want open-ended rehashing of past decisions, and I’d<br>&gt; like to have the baseline rule be something very close to “the core team’s<br>&gt; decisions are final” both to prevent such rehashing and also to emphasize<br>&gt; the seriousness of the public review process: the public review *is* the<br>&gt; point at which we need to gather widespread feedback on the direction of<br>&gt; the language. Determining that there is a problem “after we shipped it” is<br>&gt; a failure of the evolution process.<br>&gt;<br>&gt; The evolution process has a number of stages (idea/proposal draft/public<br>&gt; review/core team), where each new stage brings additional scrutiny of the<br>&gt; proposal. The hope is that this scrutiny is enough to prevent us from<br>&gt; making poor decisions that may need to be overturned, and that the<br>&gt; swift-evolution community is representative enough of the larger Swift<br>&gt; community to provide that scrutiny. SE-0003 is somewhat special because<br>&gt; it’s one of a few changes for Swift 3 that were decided prior to<br>&gt; open-sourcing Swift: it didn’t go through the whole evolution process, so<br>&gt; it didn’t have as many eyes on it as language changes do now.<br>&gt;<br>&gt; So, overall, I’d say that the core team’s decisions should be considered<br>&gt; effectively final. If something gets through the entire evolution process<br>&gt; and then we later find out it was a bad decision—e.g., due to massive<br>&gt; negative feedback when it reaches the wider Swift community or unforeseen<br>&gt; difficulties in implementation/rollout/etc.—the core team could bring up<br>&gt; the idea of backing out the change. However, the evolution process *should*<br>&gt; prevent this.<br>&gt;<br>&gt;<br>&gt; Best,<br>&gt; — Radek<br>&gt;<br>&gt; On 30 Jan 2016, at 19:12, Vanderlei Martinelli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello everybody.<br>&gt;<br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;<br>&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt; code becomes less readable and more prone to errors. There were two<br>&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;<br>&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;<br>&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt; would like you to think about it.<br>&gt;<br>&gt; There are many other things that really need to be improved and repaired<br>&gt; and other things needed to are created. Those mentioned here in this<br>&gt; message does not seem to fit it.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/18fc8016/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>Oops again: *activity<br></p><p>I have to learn to write in English some day... ;-)<br></p><p>On Sat, Jan 30, 2016 at 5:26 PM, Vanderlei Martinelli &lt;<br>vmartinelli at alecrim.com&gt; wrote:<br></p><p>&gt; Radek, thank you for bringing this up, but I know the reasons they have<br>&gt; been removed and I read the older messages (the `&amp;&amp;`, `||` and `!`<br>&gt; operators mention was an intended hyperbole). I am aware of the “Swift<br>&gt; evolution process&quot;.<br>&gt;<br>&gt; And I still do not agree with the removal. You can consider code like:<br>&gt;<br>&gt; network.activiy++<br>&gt; doSomeNetworkActiviy()<br>&gt; network.activiy--<br>&gt;<br>&gt;<br>&gt; `activity` here does not need to be a numeric variable, but other thing.<br>&gt; Does not make sense to write...<br>&gt;<br>&gt; network.activiy += 1<br>&gt; doSomeNetworkActiviy()<br>&gt; network.activiy -= 1<br>&gt;<br>&gt; ...since I cannot add or subtract more than 1 in any case.<br>&gt;<br>&gt; Now we can use methods like `increment` or `decrement`, but the two words,<br>&gt; when reading, are similar and not clear as `++` and `--`.<br>&gt;<br>&gt; OK, but my initial message intent is to prevent operator like `?:`, `??`<br>&gt; and others to go away too (and maybe bring back the `++` and `--`<br>&gt; operators, who knows?).<br>&gt;<br>&gt; Best,<br>&gt; -Van<br>&gt;<br>&gt;<br>&gt; On Sat, Jan 30, 2016 at 5:05 PM, Radosław Pietruszewski &lt;radexpl at gmail.com<br>&gt; &gt; wrote:<br>&gt;<br>&gt;&gt; Vanderlei,<br>&gt;&gt;<br>&gt;&gt; The ++/— operators weren’t removed just because they are redundant with<br>&gt;&gt; `+= 1`.<br>&gt;&gt;<br>&gt;&gt; ++ is a bit special in that it doesn’t just modify the receiver, it also<br>&gt;&gt; returns the modified variable. What’s more, there’s this subtle difference<br>&gt;&gt; between `++foo` and `foo++` when you pass it further along. And that, that<br>&gt;&gt; difference, makes such use dangerous, and prone to bugs.<br>&gt;&gt;<br>&gt;&gt; It’s also a useful feature — if you live in the world of C. But in Swift,<br>&gt;&gt; where explicit increments and decrements are far less common, it was deemed<br>&gt;&gt; that the slight utility and convenience of it does not justify the cost of<br>&gt;&gt; potential confusion and bugs that arise from that.<br>&gt;&gt;<br>&gt;&gt; Give the actual proposal a read:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md —<br>&gt;&gt; it does a pretty good job at explaining the disadvantages of ++ and —. It’s<br>&gt;&gt; not just a stylistic choice.<br>&gt;&gt;<br>&gt;&gt; And &amp;&amp;, ||, !, are not in danger. Browse this mailing list’s history —<br>&gt;&gt; it’s been proposed more than once and immediately rejected as a change that<br>&gt;&gt; really isn’t justified in any way.<br>&gt;&gt;<br>&gt;&gt; Also, let me quote Doug Gregor from the core team:<br>&gt;&gt;<br>&gt;&gt; We certainly don’t want open-ended rehashing of past decisions, and I’d<br>&gt;&gt; like to have the baseline rule be something very close to “the core team’s<br>&gt;&gt; decisions are final” both to prevent such rehashing and also to emphasize<br>&gt;&gt; the seriousness of the public review process: the public review *is* the<br>&gt;&gt; point at which we need to gather widespread feedback on the direction of<br>&gt;&gt; the language. Determining that there is a problem “after we shipped it” is<br>&gt;&gt; a failure of the evolution process.<br>&gt;&gt;<br>&gt;&gt; The evolution process has a number of stages (idea/proposal draft/public<br>&gt;&gt; review/core team), where each new stage brings additional scrutiny of the<br>&gt;&gt; proposal. The hope is that this scrutiny is enough to prevent us from<br>&gt;&gt; making poor decisions that may need to be overturned, and that the<br>&gt;&gt; swift-evolution community is representative enough of the larger Swift<br>&gt;&gt; community to provide that scrutiny. SE-0003 is somewhat special because<br>&gt;&gt; it’s one of a few changes for Swift 3 that were decided prior to<br>&gt;&gt; open-sourcing Swift: it didn’t go through the whole evolution process, so<br>&gt;&gt; it didn’t have as many eyes on it as language changes do now.<br>&gt;&gt;<br>&gt;&gt; So, overall, I’d say that the core team’s decisions should be considered<br>&gt;&gt; effectively final. If something gets through the entire evolution process<br>&gt;&gt; and then we later find out it was a bad decision—e.g., due to massive<br>&gt;&gt; negative feedback when it reaches the wider Swift community or unforeseen<br>&gt;&gt; difficulties in implementation/rollout/etc.—the core team could bring up<br>&gt;&gt; the idea of backing out the change. However, the evolution process *should*<br>&gt;&gt; prevent this.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt; — Radek<br>&gt;&gt;<br>&gt;&gt; On 30 Jan 2016, at 19:12, Vanderlei Martinelli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello everybody.<br>&gt;&gt;<br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt;&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt;&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt;&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;<br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt;&gt; code becomes less readable and more prone to errors. There were two<br>&gt;&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt;&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt;&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt;&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt;&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;<br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt;&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt;&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt;&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt;&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt;&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;<br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt;&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt;&gt; would like you to think about it.<br>&gt;&gt;<br>&gt;&gt; There are many other things that really need to be improved and repaired<br>&gt;&gt; and other things needed to are created. Those mentioned here in this<br>&gt;&gt; message does not seem to fit it.<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/3a3d4b34/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>January 30, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Am 30.01.2016 um 20:26 schrieb Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Radek, thank you for bringing this up, but I know the reasons they have been removed and I read the older messages (the `&amp;&amp;`, `||` and `!` operators mention was an intended hyperbole). I am aware of the “Swift evolution process&quot;.<br>&gt; <br>&gt; And I still do not agree with the removal. You can consider code like:<br>&gt; <br>&gt; network.activiy++<br>&gt; doSomeNetworkActiviy()<br>&gt; network.activiy—-<br></p><p>&gt; `activity` here does not need to be a numeric variable, but other thing. Does not make sense to write...<br>&gt; <br>&gt; network.activiy += 1<br>&gt; doSomeNetworkActiviy()<br>&gt; network.activiy -= 1<br>&gt; <br>&gt; ...since I cannot add or subtract more than 1 in any case.<br>&gt; <br>&gt; Now we can use methods like `increment` or `decrement`, but the two words, when reading, are similar and not clear as `++` and `—`.<br></p><p>For something like this I’d rather encapsulate this pattern of incrementing while an activity happens to ensure that the activity count is really decremented thereafter, i.e. something like the following (insert some better name for the method)<br></p><p>extension Network {<br></p><p>	func incrementActivityCountWhile(@noescape action: Void -&gt; Void) {<br>		self.activity += 1            // or increment()<br>		defer { self.activity -= 1 }  // or decrement()<br>		action()<br>	}<br>}<br></p><p>which can then be used like follows:<br></p><p>network.incrementActivityCountWhile {<br>	doSomeNetworkActivity()<br>}<br></p><p>The point being that incrementing and decrementing are only written once (and the method probably being unit tested) and therefore the risk of errors creeping in is close to zero.<br></p><p>&gt; OK, but my initial message intent is to prevent operator like `?:`, `??` and others to go away too (and maybe bring back the `++` and `--` operators, who knows?).<br></p><p>I agree with you there with regards to keeping these operators (and just dropping the prefix version and making the postfix version void would indeed have been a nice solution for ++ and -- but I didn’t object in the review, so that ship has sailed and I don’t think it’s a big problem; there are more important things to be done).<br></p><p>Actually I didn’t have the impression that many people wanted to drop `??`. Actually I got just the opposite impression.<br></p><p>-Thorsten<br></p><p><br></p><p><br>&gt; Best,<br>&gt; -Van<br>&gt; <br>&gt; <br>&gt; On Sat, Jan 30, 2016 at 5:05 PM, Radosław Pietruszewski &lt;radexpl at gmail.com &lt;mailto:radexpl at gmail.com&gt;&gt; wrote:<br>&gt; Vanderlei,<br>&gt; <br>&gt; The ++/— operators weren’t removed just because they are redundant with `+= 1`.<br>&gt; <br>&gt; ++ is a bit special in that it doesn’t just modify the receiver, it also returns the modified variable. What’s more, there’s this subtle difference between `++foo` and `foo++` when you pass it further along. And that, that difference, makes such use dangerous, and prone to bugs.<br>&gt; <br>&gt; It’s also a useful feature — if you live in the world of C. But in Swift, where explicit increments and decrements are far less common, it was deemed that the slight utility and convenience of it does not justify the cost of potential confusion and bugs that arise from that.<br>&gt; <br>&gt; Give the actual proposal a read: https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md&gt; — it does a pretty good job at explaining the disadvantages of ++ and —. It’s not just a stylistic choice.<br>&gt; <br>&gt; And &amp;&amp;, ||, !, are not in danger. Browse this mailing list’s history — it’s been proposed more than once and immediately rejected as a change that really isn’t justified in any way.<br>&gt; <br>&gt; Also, let me quote Doug Gregor from the core team:<br>&gt; <br>&gt;&gt; We certainly don’t want open-ended rehashing of past decisions, and I’d like to have the baseline rule be something very close to “the core team’s decisions are final” both to prevent such rehashing and also to emphasize the seriousness of the public review process: the public review is the point at which we need to gather widespread feedback on the direction of the language. Determining that there is a problem “after we shipped it” is a failure of the evolution process.<br>&gt;&gt; <br>&gt;&gt; The evolution process has a number of stages (idea/proposal draft/public review/core team), where each new stage brings additional scrutiny of the proposal. The hope is that this scrutiny is enough to prevent us from making poor decisions that may need to be overturned, and that the swift-evolution community is representative enough of the larger Swift community to provide that scrutiny. SE-0003 is somewhat special because it’s one of a few changes for Swift 3 that were decided prior to open-sourcing Swift: it didn’t go through the whole evolution process, so it didn’t have as many eyes on it as language changes do now.<br>&gt;&gt; <br>&gt;&gt; So, overall, I’d say that the core team’s decisions should be considered effectively final. If something gets through the entire evolution process and then we later find out it was a bad decision—e.g., due to massive negative feedback when it reaches the wider Swift community or unforeseen difficulties in implementation/rollout/etc.—the core team could bring up the idea of backing out the change. However, the evolution process *should* prevent this.<br>&gt; <br>&gt; <br>&gt; Best,<br>&gt; — Radek<br>&gt; <br>&gt;&gt; On 30 Jan 2016, at 19:12, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello everybody.<br>&gt;&gt; <br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt; <br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt; <br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt; <br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt;&gt; <br>&gt;&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/3b297cfb/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0ca11611f1637938f1d1db967fa4b064?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Will Stanton</string> &lt;willstanton1 at yahoo.com&gt;<p>January 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello,<br></p><p>I think Van made good points about readability, and I do not recall the retention of ‘++’ and ‘--’ being discussed much (perhaps since SE-0004 and 0007 were accepted). So in case it’s up for discussion:<br></p><p>At first, I really disliked the removal of ++ and --. In my opinion, the first three disadvantages in SE-0004 (https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md) were not that strong:<br></p><p>&gt; These operators increase the burden to learn Swift as a first programming language - or any other case where you don&#39;t already know these operators from a different language.<br>‘++’ does not seem less obvious than ‘+=’ and learning about the 2-4 extra operators doesn’t seem burdensome.<br>++ and -- are also not particularly rare (I remember being surprised that Python did not support them)<br></p><p>&gt; Their expressive advantage is minimal - x++ is not much shorter than x += 1.<br>Still, `++` is easier to type than `+= 1`<br></p><p>&gt; Swift already deviates from C in that the =, += and other assignment-like operations returns Void (for a number of reasons). These operators are inconsistent with that model.<br>I liked the alternative considered: keep ++ and -- while returning void<br></p><p><br>But I became less bothered by the proposal, since I agreed with this:<br>&gt; Swift has powerful features that eliminate many of the common reasons you&#39;d use ++i in a C-style for loop in other languages, so these are relatively infrequently used in well-written Swift code. These features include the for-in loop, ranges, enumerate, map, etc.<br></p><p><br>So, I respectfully disagree with removing the operators, but I also don’t have strong objections (as I first thought I might).<br></p><p>Regards,<br>Will Stanton<br></p><p>&gt; On Jan 30, 2016, at 1:12 PM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everybody.<br>&gt; <br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt; <br>&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt; <br>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt; <br>&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt; <br>&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Van<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 30, 2016 at 11:00:00am</p></header><div class="content"><p>Strong -1 to this proposal.<br></p><p>If your code is in dire need of ++/--, you can always define them yourself using the language affordances. (Unlike, say, defining your own C-style for loop.)<br></p><p>Other than that, ++/-- were a crufty legacy carryover from C, and their disadvantages are adequately described in the rationale portion of the proposal.<br></p><p>?? and ?: are in no imminent danger, and even if they were their removal should be debated on the merits of those specific operators.<br></p><p>Finally, if people are going to try and re-open the pre-SE-0005 proposals for retroactive discussion, maybe we should have a &#39;community comments&#39; period for each of them and just get it over with.<br></p><p>Austin<br></p><p>&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everybody.<br>&gt; <br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt; <br>&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt; <br>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt; <br>&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt; <br>&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/358ce5e7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>Strong -1 to people being so obtuse with other people discussing things in<br>a discussion group. ;-)<br></p><p>OK. I got your point. A “community comments” period may be a good<br>ideia, since &quot;community&quot; will not be used as a term to segregate those who<br>not have truly a say.<br></p><p><br>Regards,<br>-- Vanderlei Martinelli<br></p><p><br>On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; Strong -1 to this proposal.<br>&gt;<br>&gt; If your code is in dire need of ++/--, you can always define them yourself<br>&gt; using the language affordances. (Unlike, say, defining your own C-style for<br>&gt; loop.)<br>&gt;<br>&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their<br>&gt; disadvantages are adequately described in the rationale portion of the<br>&gt; proposal.<br>&gt;<br>&gt; ?? and ?: are in no imminent danger, and even if they were their removal<br>&gt; should be debated on the merits of those specific operators.<br>&gt;<br>&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals<br>&gt; for retroactive discussion, maybe we should have a &#39;community comments&#39;<br>&gt; period for each of them and just get it over with.<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hello everybody.<br>&gt;<br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;<br>&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt; code becomes less readable and more prone to errors. There were two<br>&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;<br>&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;<br>&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt; would like you to think about it.<br>&gt;<br>&gt; There are many other things that really need to be improved and repaired<br>&gt; and other things needed to are created. Those mentioned here in this<br>&gt; message does not seem to fit it.<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/961c26fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January 30, 2016 at 11:00:00am</p></header><div class="content"><p>I think a &quot;community comments&quot; period for each review is a perfectly fine idea :).<br></p><p>Doug Gregor&#39;s comments quoted below clearly state that accepted proposals are meant to be final, precisely in order to avoid unending back-and-forth counterproposals to things that people can never agree upon. However, there&#39;s a good argument that the first proposals should be re-opened up for community discussion, because they didn&#39;t go through the formal process.<br></p><p>Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the core team takes community feedback into account but is not bound by it when making decisions re. the language. In every proposal rejection or acceptance so far popularity (or lack thereof) has only been one of the stated factors.<br></p><p>Best,<br>Austin<br></p><p>&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com&gt; wrote:<br>&gt; <br>&gt; Strong -1 to people being so obtuse with other people discussing things in a discussion group. ;-)<br>&gt; <br>&gt; OK. I got your point. A “community comments” period may be a good ideia, since &quot;community&quot; will not be used as a term to segregate those who not have truly a say.<br>&gt; <br>&gt; <br>&gt; Regards,<br>&gt; -- Vanderlei Martinelli<br>&gt; <br>&gt; <br>&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt; Strong -1 to this proposal.<br>&gt; <br>&gt; If your code is in dire need of ++/--, you can always define them yourself using the language affordances. (Unlike, say, defining your own C-style for loop.)<br>&gt; <br>&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their disadvantages are adequately described in the rationale portion of the proposal.<br>&gt; <br>&gt; ?? and ?: are in no imminent danger, and even if they were their removal should be debated on the merits of those specific operators.<br>&gt; <br>&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals for retroactive discussion, maybe we should have a &#39;community comments&#39; period for each of them and just get it over with.<br>&gt; <br>&gt; Austin<br>&gt; <br>&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello everybody.<br>&gt;&gt; <br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt; <br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt; <br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt; <br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt;&gt; <br>&gt;&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; <br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/26e99aa3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for “community comments” period and a strong +1 for you now. :-)<br></p><p>On Sat, Jan 30, 2016 at 5:47 PM, Austin Zheng &lt;austinzheng at gmail.com&gt; wrote:<br></p><p>&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine<br>&gt; idea :).<br>&gt;<br>&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals<br>&gt; are meant to be final, precisely in order to avoid unending back-and-forth<br>&gt; counterproposals to things that people can never agree upon. However,<br>&gt; there&#39;s a good argument that the first proposals should be re-opened up for<br>&gt; community discussion, because they didn&#39;t go through the formal process.<br>&gt;<br>&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the<br>&gt; core team takes community feedback into account but is not bound by it when<br>&gt; making decisions re. the language. In every proposal rejection or<br>&gt; acceptance so far popularity (or lack thereof) has only been one of the<br>&gt; stated factors.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;<br>&gt; vmartinelli at alecrim.com&gt; wrote:<br>&gt;<br>&gt; Strong -1 to people being so obtuse with other people discussing things in<br>&gt; a discussion group. ;-)<br>&gt;<br>&gt; OK. I got your point. A “community comments” period may be a good<br>&gt; ideia, since &quot;community&quot; will not be used as a term to segregate those who<br>&gt; not have truly a say.<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt; -- Vanderlei Martinelli<br>&gt;<br>&gt;<br>&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt;<br>&gt;&gt; If your code is in dire need of ++/--, you can always define them<br>&gt;&gt; yourself using the language affordances. (Unlike, say, defining your own<br>&gt;&gt; C-style for loop.)<br>&gt;&gt;<br>&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their<br>&gt;&gt; disadvantages are adequately described in the rationale portion of the<br>&gt;&gt; proposal.<br>&gt;&gt;<br>&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal<br>&gt;&gt; should be debated on the merits of those specific operators.<br>&gt;&gt;<br>&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals<br>&gt;&gt; for retroactive discussion, maybe we should have a &#39;community comments&#39;<br>&gt;&gt; period for each of them and just get it over with.<br>&gt;&gt;<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello everybody.<br>&gt;&gt;<br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt;&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt;&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt;&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;<br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt;&gt; code becomes less readable and more prone to errors. There were two<br>&gt;&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt;&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt;&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt;&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt;&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;<br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt;&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt;&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt;&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt;&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt;&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;<br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt;&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt;&gt; would like you to think about it.<br>&gt;&gt;<br>&gt;&gt; There are many other things that really need to be improved and repaired<br>&gt;&gt; and other things needed to are created. Those mentioned here in this<br>&gt;&gt; message does not seem to fit it.<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/97b99ec5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>January 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Back to the main topic: strongly opposed to reconsidering ++ and --. Rationale: as stated in the proposal. <br></p><p>Also, despite what Vanderlei suggests, Swift is certainly not a language from C family, unless you limit your analysis to syntax only. Its roots are much closer to Simula and ML. Yes, Swift has some similarities with C++, but mainly because C++ mixes C with concepts from Simula and ML (and probably others). <br></p><p>— Taras<br></p><p>&gt; On 30 Jan 2016, at 20:47, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine idea :).<br>&gt; <br>&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals are meant to be final, precisely in order to avoid unending back-and-forth counterproposals to things that people can never agree upon. However, there&#39;s a good argument that the first proposals should be re-opened up for community discussion, because they didn&#39;t go through the formal process.<br>&gt; <br>&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the core team takes community feedback into account but is not bound by it when making decisions re. the language. In every proposal rejection or acceptance so far popularity (or lack thereof) has only been one of the stated factors.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt; <br>&gt;&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com &lt;mailto:vmartinelli at alecrim.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Strong -1 to people being so obtuse with other people discussing things in a discussion group. ;-)<br>&gt;&gt; <br>&gt;&gt; OK. I got your point. A “community comments” period may be a good ideia, since &quot;community&quot; will not be used as a term to segregate those who not have truly a say.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards,<br>&gt;&gt; -- Vanderlei Martinelli<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt; <br>&gt;&gt; If your code is in dire need of ++/--, you can always define them yourself using the language affordances. (Unlike, say, defining your own C-style for loop.)<br>&gt;&gt; <br>&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their disadvantages are adequately described in the rationale portion of the proposal.<br>&gt;&gt; <br>&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal should be debated on the merits of those specific operators.<br>&gt;&gt; <br>&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals for retroactive discussion, maybe we should have a &#39;community comments&#39; period for each of them and just get it over with.<br>&gt;&gt; <br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello everybody.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Van<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/fb9d267c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>January 30, 2016 at 06:00:00pm</p></header><div class="content"><p>About who are the parents: our two views are complementary, I believe. But,<br>remember you have to use C += 1 and not C++ now. ;-)<br></p><p>On Sat, Jan 30, 2016 at 5:58 PM, Taras Zakharko &lt;taras.zakharko at uzh.ch&gt;<br>wrote:<br></p><p>&gt; Back to the main topic: strongly opposed to reconsidering ++ and --.<br>&gt; Rationale: as stated in the proposal.<br>&gt;<br>&gt; Also, despite what Vanderlei suggests, Swift is certainly not a language<br>&gt; from C family, unless you limit your analysis to syntax only. Its roots are<br>&gt; much closer to Simula and ML. Yes, Swift has some similarities with C++,<br>&gt; but mainly because C++ mixes C with concepts from Simula and ML (and<br>&gt; probably others).<br>&gt;<br>&gt; — Taras<br>&gt;<br>&gt; On 30 Jan 2016, at 20:47, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine<br>&gt; idea :).<br>&gt;<br>&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals<br>&gt; are meant to be final, precisely in order to avoid unending back-and-forth<br>&gt; counterproposals to things that people can never agree upon. However,<br>&gt; there&#39;s a good argument that the first proposals should be re-opened up for<br>&gt; community discussion, because they didn&#39;t go through the formal process.<br>&gt;<br>&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the<br>&gt; core team takes community feedback into account but is not bound by it when<br>&gt; making decisions re. the language. In every proposal rejection or<br>&gt; acceptance so far popularity (or lack thereof) has only been one of the<br>&gt; stated factors.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;<br>&gt; vmartinelli at alecrim.com&gt; wrote:<br>&gt;<br>&gt; Strong -1 to people being so obtuse with other people discussing things in<br>&gt; a discussion group. ;-)<br>&gt;<br>&gt; OK. I got your point. A “community comments” period may be a good<br>&gt; ideia, since &quot;community&quot; will not be used as a term to segregate those who<br>&gt; not have truly a say.<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt; -- Vanderlei Martinelli<br>&gt;<br>&gt;<br>&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt;<br>&gt;&gt; If your code is in dire need of ++/--, you can always define them<br>&gt;&gt; yourself using the language affordances. (Unlike, say, defining your own<br>&gt;&gt; C-style for loop.)<br>&gt;&gt;<br>&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their<br>&gt;&gt; disadvantages are adequately described in the rationale portion of the<br>&gt;&gt; proposal.<br>&gt;&gt;<br>&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal<br>&gt;&gt; should be debated on the merits of those specific operators.<br>&gt;&gt;<br>&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals<br>&gt;&gt; for retroactive discussion, maybe we should have a &#39;community comments&#39;<br>&gt;&gt; period for each of them and just get it over with.<br>&gt;&gt;<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello everybody.<br>&gt;&gt;<br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt;&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt;&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt;&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;<br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt;&gt; code becomes less readable and more prone to errors. There were two<br>&gt;&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt;&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt;&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt;&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt;&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;<br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt;&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt;&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt;&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt;&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt;&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;<br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt;&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt;&gt; would like you to think about it.<br>&gt;&gt;<br>&gt;&gt; There are many other things that really need to be improved and repaired<br>&gt;&gt; and other things needed to are created. Those mentioned here in this<br>&gt;&gt; message does not seem to fit it.<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/5038dfec/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>January 31, 2016 at 03:00:00am</p></header><div class="content"><p>I would disagree that Swift is mixing C with concepts of ML….. Swift is actually for the most part resistant to adopting functional paradigm — opting only to include a few minor functional decorations.<br></p><p><br>&gt; On 2016-01-31, at 2:58:32, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Back to the main topic: strongly opposed to reconsidering ++ and --. Rationale: as stated in the proposal. <br>&gt; <br>&gt; Also, despite what Vanderlei suggests, Swift is certainly not a language from C family, unless you limit your analysis to syntax only. Its roots are much closer to Simula and ML. Yes, Swift has some similarities with C++, but mainly because C++ mixes C with concepts from Simula and ML (and probably others). <br>&gt; <br>&gt; — Taras<br>&gt; <br>&gt;&gt; On 30 Jan 2016, at 20:47, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine idea :).<br>&gt;&gt; <br>&gt;&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals are meant to be final, precisely in order to avoid unending back-and-forth counterproposals to things that people can never agree upon. However, there&#39;s a good argument that the first proposals should be re-opened up for community discussion, because they didn&#39;t go through the formal process.<br>&gt;&gt; <br>&gt;&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the core team takes community feedback into account but is not bound by it when making decisions re. the language. In every proposal rejection or acceptance so far popularity (or lack thereof) has only been one of the stated factors.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com &lt;mailto:vmartinelli at alecrim.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Strong -1 to people being so obtuse with other people discussing things in a discussion group. ;-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; OK. I got your point. A “community comments” period may be a good ideia, since &quot;community&quot; will not be used as a term to segregate those who not have truly a say.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt; -- Vanderlei Martinelli<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If your code is in dire need of ++/--, you can always define them yourself using the language affordances. (Unlike, say, defining your own C-style for loop.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their disadvantages are adequately described in the rationale portion of the proposal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal should be debated on the merits of those specific operators.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals for retroactive discussion, maybe we should have a &#39;community comments&#39; period for each of them and just get it over with.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello everybody.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Van<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/0723cf5e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>January 30, 2016 at 09:00:00pm</p></header><div class="content"><p>I was not necessarily talking about functional paradigm when I mentioned ML as influence for Swift, more about type system. Anyway, I think this discussion is best kept to a different list. <br></p><p>— Taras<br></p><p>&gt; On 30 Jan 2016, at 21:02, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt; <br>&gt; I would disagree that Swift is mixing C with concepts of ML….. Swift is actually for the most part resistant to adopting functional paradigm — opting only to include a few minor functional decorations.<br>&gt; <br>&gt; <br>&gt;&gt; On 2016-01-31, at 2:58:32, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Back to the main topic: strongly opposed to reconsidering ++ and --. Rationale: as stated in the proposal. <br>&gt;&gt; <br>&gt;&gt; Also, despite what Vanderlei suggests, Swift is certainly not a language from C family, unless you limit your analysis to syntax only. Its roots are much closer to Simula and ML. Yes, Swift has some similarities with C++, but mainly because C++ mixes C with concepts from Simula and ML (and probably others). <br>&gt;&gt; <br>&gt;&gt; — Taras<br>&gt;&gt; <br>&gt;&gt;&gt; On 30 Jan 2016, at 20:47, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine idea :).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals are meant to be final, precisely in order to avoid unending back-and-forth counterproposals to things that people can never agree upon. However, there&#39;s a good argument that the first proposals should be re-opened up for community discussion, because they didn&#39;t go through the formal process.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the core team takes community feedback into account but is not bound by it when making decisions re. the language. In every proposal rejection or acceptance so far popularity (or lack thereof) has only been one of the stated factors.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;vmartinelli at alecrim.com &lt;mailto:vmartinelli at alecrim.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Strong -1 to people being so obtuse with other people discussing things in a discussion group. ;-)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; OK. I got your point. A “community comments” period may be a good ideia, since &quot;community&quot; will not be used as a term to segregate those who not have truly a say.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt; -- Vanderlei Martinelli<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com &lt;mailto:austinzheng at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If your code is in dire need of ++/--, you can always define them yourself using the language affordances. (Unlike, say, defining your own C-style for loop.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their disadvantages are adequately described in the rationale portion of the proposal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal should be debated on the merits of those specific operators.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals for retroactive discussion, maybe we should have a &#39;community comments&#39; period for each of them and just get it over with.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello everybody.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Regards,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Van<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/932aa7f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7321934b88ca8da079d7b89926501a9c?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>David Turnbull</string> &lt;dturnbull at gmail.com&gt;<p>January 30, 2016 at 01:00:00pm</p></header><div class="content"><p>Can the ++/-- removal be done in a way that someone could add them back<br>(3.0) and suppress the warnings (2.2)?<br></p><p><br></p><p><br>On Sat, Jan 30, 2016 at 12:07 PM, Taras Zakharko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I was not necessarily talking about functional paradigm when I mentioned<br>&gt; ML as influence for Swift, more about type system. Anyway, I think this<br>&gt; discussion is best kept to a different list.<br>&gt;<br>&gt; — Taras<br>&gt;<br>&gt; On 30 Jan 2016, at 21:02, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br>&gt;<br>&gt; I would disagree that Swift is mixing C with concepts of ML….. Swift is<br>&gt; actually for the most part resistant to adopting functional paradigm —<br>&gt; opting only to include a few minor functional decorations.<br>&gt;<br>&gt;<br>&gt; On 2016-01-31, at 2:58:32, Taras Zakharko via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Back to the main topic: strongly opposed to reconsidering ++ and --.<br>&gt; Rationale: as stated in the proposal.<br>&gt;<br>&gt; Also, despite what Vanderlei suggests, Swift is certainly not a language<br>&gt; from C family, unless you limit your analysis to syntax only. Its roots are<br>&gt; much closer to Simula and ML. Yes, Swift has some similarities with C++,<br>&gt; but mainly because C++ mixes C with concepts from Simula and ML (and<br>&gt; probably others).<br>&gt;<br>&gt; — Taras<br>&gt;<br>&gt; On 30 Jan 2016, at 20:47, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I think a &quot;community comments&quot; period for each review is a perfectly fine<br>&gt; idea :).<br>&gt;<br>&gt; Doug Gregor&#39;s comments quoted below clearly state that accepted proposals<br>&gt; are meant to be final, precisely in order to avoid unending back-and-forth<br>&gt; counterproposals to things that people can never agree upon. However,<br>&gt; there&#39;s a good argument that the first proposals should be re-opened up for<br>&gt; community discussion, because they didn&#39;t go through the formal process.<br>&gt;<br>&gt; Regarding &quot;truly having a say&quot;: Swift is not designed by referendum; the<br>&gt; core team takes community feedback into account but is not bound by it when<br>&gt; making decisions re. the language. In every proposal rejection or<br>&gt; acceptance so far popularity (or lack thereof) has only been one of the<br>&gt; stated factors.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;<br>&gt; On Jan 30, 2016, at 11:41 AM, Vanderlei Martinelli &lt;<br>&gt; vmartinelli at alecrim.com&gt; wrote:<br>&gt;<br>&gt; Strong -1 to people being so obtuse with other people discussing things in<br>&gt; a discussion group. ;-)<br>&gt;<br>&gt; OK. I got your point. A “community comments” period may be a good<br>&gt; ideia, since &quot;community&quot; will not be used as a term to segregate those who<br>&gt; not have truly a say.<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt; -- Vanderlei Martinelli<br>&gt;<br>&gt;<br>&gt; On Sat, Jan 30, 2016 at 5:31 PM, Austin Zheng &lt;austinzheng at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Strong -1 to this proposal.<br>&gt;&gt;<br>&gt;&gt; If your code is in dire need of ++/--, you can always define them<br>&gt;&gt; yourself using the language affordances. (Unlike, say, defining your own<br>&gt;&gt; C-style for loop.)<br>&gt;&gt;<br>&gt;&gt; Other than that, ++/-- were a crufty legacy carryover from C, and their<br>&gt;&gt; disadvantages are adequately described in the rationale portion of the<br>&gt;&gt; proposal.<br>&gt;&gt;<br>&gt;&gt; ?? and ?: are in no imminent danger, and even if they were their removal<br>&gt;&gt; should be debated on the merits of those specific operators.<br>&gt;&gt;<br>&gt;&gt; Finally, if people are going to try and re-open the pre-SE-0005 proposals<br>&gt;&gt; for retroactive discussion, maybe we should have a &#39;community comments&#39;<br>&gt;&gt; period for each of them and just get it over with.<br>&gt;&gt;<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt; On Jan 30, 2016, at 10:12 AM, Vanderlei Martinelli via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello everybody.<br>&gt;&gt;<br>&gt;&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a<br>&gt;&gt; daughter/son of Objective-C). OK, she/he is different and has her/his own<br>&gt;&gt; personality like a daughter/son should be and have, but I still like to see<br>&gt;&gt; Swift and recognize some traces that I know are things that became from C.<br>&gt;&gt;<br>&gt;&gt; This said, I would like to say that after the removal of `++` and `--` my<br>&gt;&gt; code becomes less readable and more prone to errors. There were two<br>&gt;&gt; characters to differentiate an addition from a subtraction, now there is<br>&gt;&gt; only one (`+= 1`, `-= 1`). Also the character keys are very close in the US<br>&gt;&gt; keyboard so it is easier to make a mistake and is not as simple as the<br>&gt;&gt; previous solution when I typed two times the same key. Using Erica&#39;s way of<br>&gt;&gt; saying certain things: I do not love the removal of `++` and `--`.<br>&gt;&gt;<br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt;&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt;&gt; they are to be certain. But in some things they regret later. Now I see<br>&gt;&gt; that many of us want to replace the `??` operator to something else. I&#39;m<br>&gt;&gt; wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator<br>&gt;&gt; with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt;&gt;<br>&gt;&gt; Are these changes really necessary for the Swift evolution? Is it the<br>&gt;&gt; better path to deny its origin and to try to fix what is not broken? I<br>&gt;&gt; would like you to think about it.<br>&gt;&gt;<br>&gt;&gt; There are many other things that really need to be improved and repaired<br>&gt;&gt; and other things needed to are created. Those mentioned here in this<br>&gt;&gt; message does not seem to fit it.<br>&gt;&gt;<br>&gt;&gt; Regards,<br>&gt;&gt;<br>&gt;&gt; -Van<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/8f5f8e7f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 30, 2016 at 01:00:00pm</p></header><div class="content"><p>My understanding is that while we’re not specifically avoiding “similarity with C”, it’s not one of Swift’s design goals, either. That it’s happened in some areas is really just a side-effect of, a) Swift has to be able to interoperate with C (and Obj-C) code, and b) sometimes there’s nothing wrong with C’s syntax.<br></p><p>I’m “+0.25” towards removing ++ / —. I liked some of the clever code they enabled, but I understand (and agree with) the reasons for their removal. If you want to keep using them, though, they’re trivially easy to put back in:<br>prefix operator ++ {}<br>postfix operator ++ {}<br>prefix func ++ &lt;T: protocol&lt;IntegerArithmeticType, IntegerLiteralConvertible&gt;&gt; (inout x: T) -&gt; T {<br>    x += 1<br>    return x<br>}<br>postfix func ++ &lt;T: protocol&lt;IntegerArithmeticType, IntegerLiteralConvertible&gt;&gt; (inout x: T) -&gt; T {<br>    defer { x += 1 }<br>    return x<br>}<br></p><p>var i = 0<br>print(i++) // 0<br>print(i)   // 1<br>print(++i) // 2<br>print(i)   // 2<br></p><p>And if you really prefer C’s behavior, you could even make them silently overflow instead of crashing (just beware the infinite loops…):<br>prefix func ++ &lt;T: protocol&lt;IntegerArithmeticType, IntegerLiteralConvertible&gt;&gt; (inout x: T) -&gt; T {<br>    x = x &amp;+ 1<br>    return x<br>}<br>postfix func ++ &lt;T: protocol&lt;IntegerArithmeticType, IntegerLiteralConvertible&gt;&gt; (inout x: T) -&gt; T {<br>    defer { x = x &amp;+ 1 }<br>    return x<br>}<br>var i:UInt8 = 255<br>print(i++) // 255<br>print(i)   // 0<br></p><p>- Dave Sweeris (The Other Dave)<br></p><p>&gt; On Jan 30, 2016, at 10:12, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everybody.<br>&gt; <br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt; <br>&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt; <br>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt; <br>&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt; <br>&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/18d658b9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>January 30, 2016 at 06:00:00pm</p></header><div class="content"><p>Strong -1.<br></p><p>The readability arguments for ++ and — make no sense to me given that it is much more obvious, refactorable, and declarative to use<br></p><p>x = x.successor()<br></p><p>and<br></p><p>x = x.predecessor()<br></p><p>in their place.  ++ and -- outside of loops are a code smell, and even within loops can easily be mistaken for one another or misused.  As others have no doubt pointed out, if you want them back then define the operators yourself.  Otherwise, I can’t say I’ve mourned the loss of these things enough to consider their reintroduction.<br></p><p>~Robert Widmann<br></p><p>&gt; On Jan 30, 2016, at 1:12 PM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everybody.<br>&gt; <br>&gt; I see Swift as a member of “C family&quot; (a granddaughter/grandson of C, a daughter/son of Objective-C). OK, she/he is different and has her/his own personality like a daughter/son should be and have, but I still like to see Swift and recognize some traces that I know are things that became from C.<br>&gt; <br>&gt; This said, I would like to say that after the removal of `++` and `--` my code becomes less readable and more prone to errors. There were two characters to differentiate an addition from a subtraction, now there is only one (`+= 1`, `-= 1`). Also the character keys are very close in the US keyboard so it is easier to make a mistake and is not as simple as the previous solution when I typed two times the same key. Using Erica&#39;s way of saying certain things: I do not love the removal of `++` and `--`.<br>&gt; <br>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later. Now I see that many of us want to replace the `??` operator to something else. I&#39;m wondering the next steps...  To replace the `&amp;&amp;`, `||` and `!` operator with `and`, `or`, `not`? I’m not &quot;loving&quot; this as well.<br>&gt; <br>&gt; Are these changes really necessary for the Swift evolution? Is it the better path to deny its origin and to try to fix what is not broken? I would like you to think about it.<br>&gt; <br>&gt; There are many other things that really need to be improved and repaired and other things needed to are created. Those mentioned here in this message does not seem to fit it.<br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; -Van<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160130/6842e109/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January 31, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; I do not know how far the Swift is to the adolescence, but it is certain that teenagers are rebels. There&#39;s something very good at it. In most cases they are to be certain. But in some things they regret later.<br>Children have to learn their own lessons — and I guess re-adding &quot;++&quot; wouldn&#39;t be as complicated as a big tattoo on your neck ;-)<br></p><p>My first thought on the removal was &quot;we&#39;ll see many custom post-increment operators soon&quot;, and that may be true; but in the meantime, I came to the conclusion that I won&#39;t define those custom operators, but rather configure my system to replace &quot;++&quot; with &quot; += 1&quot;:<br>Typing the old operator is definitely faster, but I don&#39;t mind if it&#39;s turned into something else automatically (when there is no performance gain for pre-increment, I&#39;ve always preferred the post-variants).<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/0fa970c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>January 31, 2016 at 04:00:00pm</p></header><div class="content"><p>On Sun, Jan 31, 2016 at 6:19 AM, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt; they are to be certain. But in some things they regret later.<br>&gt;<br>&gt; Children have to learn their own lessons — and I guess re-adding &quot;++&quot;<br>&gt; wouldn&#39;t be as complicated as a big tattoo on your neck ;-)<br>&gt;<br>&gt; My first thought on the removal was &quot;we&#39;ll see many custom post-increment<br>&gt; operators soon&quot;, and that may be true; but in the meantime, I came to the<br>&gt; conclusion that I won&#39;t define those custom operators, but rather configure<br>&gt; my system to replace &quot;++&quot; with &quot; += 1&quot;:<br>&gt; Typing the old operator is definitely faster, but I don&#39;t mind if it&#39;s<br>&gt; turned into something else automatically (when there is no performance gain<br>&gt; for pre-increment, I&#39;ve always preferred the post-variants).<br>&gt;<br>&gt;<br>&gt;<br>FWIW, Python has no ++ and -- operators (you have to use += 1 or -= 1), and<br>nobody misses them there.  Once you introduce for-each loops, about 99% of<br>the usage sites for ++ disappear, and it quickly fades out of your muscle<br>memory.<br></p><p>It used to get re-introduced every so often by having to work with C, Java,<br>and Javascript, but now ES6, Java, Objective-C, PHP, Python, Ruby, Go,<br>Rust, and even C++ all have for-each loops or iteration blocks, so there&#39;s<br>basically no need for regular for-loops or increment operators in any<br>language but C.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160131/a0af389e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Reconsider ++ and -- operators removal and prevent other well-known operators from change</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February  1, 2016 at 08:00:00pm</p></header><div class="content"><p>Well... I continue writing code with Swift 2.2 and I&#39;m not loving the fact<br>I cannot use ++ or -- anymore (and no, I&#39;m not using the operators in<br>loops, I mean things like responding to UIPageViewController data source,<br>etc).<br></p><p>And what if we remove `+=` and `-=` as well? It&#39;s so C... What if can write<br>code with COBOL-style like this?<br></p><p><br>ADD 1 TO MY-AWESOME-VARIABLE.<br>SUBTRACT 1 FROM MY-AWESOME-VARIABLE.<br></p><p><br>And look that we are not adding a `WORKING-STORAGE SECTION` or a `PROCEDURE<br>DIVISION` here...<br></p><p>Do not take it seriously, OK? It was just a joke (a bad taste joke,<br>perhaps). ;-)<br></p><p>-Van<br></p><p><br></p><p>On Sun, Jan 31, 2016 at 10:39 PM, Jonathan Tang &lt;jonathan.d.tang at gmail.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On Sun, Jan 31, 2016 at 6:19 AM, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I do not know how far the Swift is to the adolescence, but it is certain<br>&gt;&gt; that teenagers are rebels. There&#39;s something very good at it. In most cases<br>&gt;&gt; they are to be certain. But in some things they regret later.<br>&gt;&gt;<br>&gt;&gt; Children have to learn their own lessons — and I guess re-adding &quot;++&quot;<br>&gt;&gt; wouldn&#39;t be as complicated as a big tattoo on your neck ;-)<br>&gt;&gt;<br>&gt;&gt; My first thought on the removal was &quot;we&#39;ll see many custom post-increment<br>&gt;&gt; operators soon&quot;, and that may be true; but in the meantime, I came to the<br>&gt;&gt; conclusion that I won&#39;t define those custom operators, but rather configure<br>&gt;&gt; my system to replace &quot;++&quot; with &quot; += 1&quot;:<br>&gt;&gt; Typing the old operator is definitely faster, but I don&#39;t mind if it&#39;s<br>&gt;&gt; turned into something else automatically (when there is no performance gain<br>&gt;&gt; for pre-increment, I&#39;ve always preferred the post-variants).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; FWIW, Python has no ++ and -- operators (you have to use += 1 or -= 1),<br>&gt; and nobody misses them there.  Once you introduce for-each loops, about 99%<br>&gt; of the usage sites for ++ disappear, and it quickly fades out of your<br>&gt; muscle memory.<br>&gt;<br>&gt; It used to get re-introduced every so often by having to work with C,<br>&gt; Java, and Javascript, but now ES6, Java, Objective-C, PHP, Python, Ruby,<br>&gt; Go, Rust, and even C++ all have for-each loops or iteration blocks, so<br>&gt; there&#39;s basically no need for regular for-loops or increment operators in<br>&gt; any language but C.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160201/36cbba84/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
