<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a32f0c9071fd24f75322395496dc6a32?s=50"></div><header><strong>[Idea] Custom default names for arguments of closures</strong> from <string>Eugene Gubin</string> &lt;hemet.mail at gmail.com&gt;<p>February 13, 2016 at 11:00:00pm</p></header><div class="content"><p>Right now Swift provides shorthand argument names ($0, $1 etc) by default<br>which could be overriden with more specific names. I think it would be nice<br>to define our own default names as part of type definition:<br></p><p>typealias Closure = (first one: String, second two: String) -&gt; Void<br></p><p>func executeClosure(closure: Closure) {<br>// the caller uses external parameter names, nothing changed here<br>closure(first: &quot;first&quot;, second: 2)<br>}<br></p><p>executeClosure {<br>// the callee uses custom arguments instead of $0, $1<br>// also it is possible to override these names here as usual<br>print(&quot;one \(one) two \(two)&quot;)<br>}<br></p><p>This feature is backward compatible in that way what both<br></p><p>typealias Closure = (first: String, second: String) -&gt; Void<br></p><p>and<br></p><p>typealias Closure = (String, String) -&gt; Void<br></p><p>will provide the same behavior like now.<br></p><p>Possible applications: providing default argument names more meaningfull<br>than $0, $1, DSL-like constructions.<br></p><p>Possible problem: names could overlap. Nothing new. $0, $1 could overlap<br>too. Override argument names or variable names in a scope.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/05505574/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Idea] Custom default names for arguments of closures</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 13, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Eugene,<br></p><p>I think you&#39;ll be able to accomplish this with SE-0021 (https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md&gt;), which has been accepted for Swift 2.2.<br></p><p>Cheers,<br>-Patrick<br></p><p>&gt; On Feb 13, 2016, at 3:38 PM, Eugene Gubin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; func executeClosure(closure: Closure) {<br>&gt; 	// the caller uses external parameter names, nothing changed here <br>&gt; 	closure(first: &quot;first&quot;, second: 2)<br>&gt; }<br>&gt; <br>&gt; executeClosure {<br>&gt; 	// the callee uses custom arguments instead of $0, $1<br>&gt; 	// also it is possible to override these names here as usual <br>&gt; 	print(&quot;one \(one) two \(two)&quot;)<br>&gt; }<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/b34d74d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a32f0c9071fd24f75322395496dc6a32?s=50"></div><header><strong>[Idea] Custom default names for arguments of closures</strong> from <string>Eugene Gubin</string> &lt;hemet.mail at gmail.com&gt;<p>February 14, 2016 at 10:00:00am</p></header><div class="content"><p>Thanks to all for comments!<br></p><p><br>&gt; In regular functions parameters names are written near their usage. $0 are<br>&gt; also all-known. So you don’t need to ‘guess’ parameter name.<br>&gt; But if we will introduce some closure typealias in one file, and will use<br>&gt; it in another - then we need somehow to know this parameter name.<br></p><p>I think these argument names become part of API. When one meets some new<br>API usually some time spent to get familiar with it. Same here.<br></p><p>As an alternative solution, IDE hints can include these parameter names in<br>&gt; closure autocomplete.<br></p><p>Yes it could. However in this case the feature transforms to autocomplete<br>hint. If so, I don&#39;t see any reason to change anything because it is<br>possible to write these already.<br></p><p>Actually you suggestion revealed another issue for me. These default names<br>could shadow names from outer scope. Result could be unexpected.<br></p><p>let one = &quot;outer one&quot;<br>executeClosure {<br>        // here one is closure argument not a variable from closure scope<br>print(&quot;one \(one) two \(two)&quot;)<br>}<br></p><p>However this is a common problem. There was proposal about mandatory self<br>because of it. I think compiler should warn about name shadowing.<br></p><p>I think you&#39;ll be able to accomplish this with SE-0021<br></p><p><br>I don&#39; think so. That proposal describes a way to unambiguously make<br>reference to overloaded function using its full name.<br></p><p>2016-02-14 0:16 GMT+03:00 Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt;:<br></p><p>&gt; Hi Eugene,<br>&gt;<br>&gt; I think you&#39;ll be able to accomplish this with SE-0021 (<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md),<br>&gt; which has been accepted for Swift 2.2.<br>&gt;<br>&gt; Cheers,<br>&gt; -Patrick<br>&gt;<br>&gt; On Feb 13, 2016, at 3:38 PM, Eugene Gubin via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; func executeClosure(closure: Closure) {<br>&gt; // the caller uses external parameter names, nothing changed here<br>&gt; closure(first: &quot;first&quot;, second: 2)<br>&gt; }<br>&gt;<br>&gt; executeClosure {<br>&gt; // the callee uses custom arguments instead of $0, $1<br>&gt; // also it is possible to override these names here as usual<br>&gt; print(&quot;one \(one) two \(two)&quot;)<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/a116c04f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Idea] Custom default names for arguments of closures</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February 15, 2016 at 10:00:00am</p></header><div class="content"><p>Sorry, not keen. Too much overlap with labels, therefore not worth the<br>addition.<br></p><p>  -- Howard.<br></p><p>On 14 February 2016 at 07:38, Eugene Gubin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Right now Swift provides shorthand argument names ($0, $1 etc) by default<br>&gt; which could be overriden with more specific names. I think it would be nice<br>&gt; to define our own default names as part of type definition:<br>&gt;<br>&gt; typealias Closure = (first one: String, second two: String) -&gt; Void<br>&gt;<br>&gt; func executeClosure(closure: Closure) {<br>&gt; // the caller uses external parameter names, nothing changed here<br>&gt; closure(first: &quot;first&quot;, second: 2)<br>&gt; }<br>&gt;<br>&gt; executeClosure {<br>&gt; // the callee uses custom arguments instead of $0, $1<br>&gt; // also it is possible to override these names here as usual<br>&gt; print(&quot;one \(one) two \(two)&quot;)<br>&gt; }<br>&gt;<br>&gt; This feature is backward compatible in that way what both<br>&gt;<br>&gt; typealias Closure = (first: String, second: String) -&gt; Void<br>&gt;<br>&gt; and<br>&gt;<br>&gt; typealias Closure = (String, String) -&gt; Void<br>&gt;<br>&gt; will provide the same behavior like now.<br>&gt;<br>&gt; Possible applications: providing default argument names more meaningfull<br>&gt; than $0, $1, DSL-like constructions.<br>&gt;<br>&gt; Possible problem: names could overlap. Nothing new. $0, $1 could overlap<br>&gt; too. Override argument names or variable names in a scope.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/a662d521/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3e4acc351c34224514f9d58b08389390?s=50"></div><header><strong>[Idea] Custom default names for arguments of closures</strong> from <string>Myles Schultz</string> &lt;myleslschultz at icloud.com&gt;<p>February 14, 2016 at 07:00:00pm</p></header><div class="content"><p>Agreed, -1, I actually prefer using $0, $1, etc. <br></p><p>Myles<br></p><p>Sent from my iPhone<br></p><p>&gt; On Feb 14, 2016, at 6:04 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, not keen. Too much overlap with labels, therefore not worth the addition.<br>&gt; <br>&gt;   -- Howard.<br>&gt; <br>&gt;&gt; On 14 February 2016 at 07:38, Eugene Gubin via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Right now Swift provides shorthand argument names ($0, $1 etc) by default which could be overriden with more specific names. I think it would be nice to define our own default names as part of type definition:<br>&gt;&gt; <br>&gt;&gt; typealias Closure = (first one: String, second two: String) -&gt; Void<br>&gt;&gt; <br>&gt;&gt; func executeClosure(closure: Closure) {<br>&gt;&gt; 	// the caller uses external parameter names, nothing changed here <br>&gt;&gt; 	closure(first: &quot;first&quot;, second: 2)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; executeClosure {<br>&gt;&gt; 	// the callee uses custom arguments instead of $0, $1<br>&gt;&gt; 	// also it is possible to override these names here as usual <br>&gt;&gt; 	print(&quot;one \(one) two \(two)&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This feature is backward compatible in that way what both<br>&gt;&gt; <br>&gt;&gt; typealias Closure = (first: String, second: String) -&gt; Void <br>&gt;&gt; <br>&gt;&gt; and<br>&gt;&gt; <br>&gt;&gt; typealias Closure = (String, String) -&gt; Void<br>&gt;&gt; <br>&gt;&gt; will provide the same behavior like now.<br>&gt;&gt; <br>&gt;&gt; Possible applications: providing default argument names more meaningfull than $0, $1, DSL-like constructions.<br>&gt;&gt; <br>&gt;&gt; Possible problem: names could overlap. Nothing new. $0, $1 could overlap too. Override argument names or variable names in a scope.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/64d4bcf3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
