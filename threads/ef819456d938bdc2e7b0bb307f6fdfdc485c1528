<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7759950c169ff7ec3ad7b0d858402fb2?s=50"></div><header><strong>[Pitch] Achieving a heterogeneous collection of Equatables</strong> from <string>Roopesh Chander</string> &lt;roop at roopc.net&gt;<p>December 21, 2015 at 03:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>We know that as of Swift 2.0, if a protocol uses `Self` (like<br>Equatable does), it cannot be used in a heterogeneous collection. This<br>is a pain point, and has been talked about many times (for instance,<br>in Brent Simmons&#39; Swift Diary: http://inessential.com/swiftdiary).<br></p><p>I realize that this problem is intertwined with the use of associated<br>types, but if we forget about associated types for the moment, I<br>believe we can get a heterogeneous collection of Equatable elements to<br>work.<br></p><p>## The problem<br></p><p>There&#39;s no problem in creating a heterogeneous collection when there&#39;s<br>no `Self`:<br></p><p>    struct Collection&lt;Element&gt; {<br>    }<br></p><p>    protocol LooseEquatable {<br>        func isEqualTo(other: LooseEquatable) -&gt; Bool<br>    }<br></p><p>    let c1 = Collection&lt;LooseEquatable&gt;()<br></p><p>The type characteristics of c1&#39;s elements can be deduced at compile<br>time, so this works.<br></p><p>But when `Self` is used in the protocol:<br></p><p>    protocol StrictEquatable {<br>        func isEqualTo(other: Self) -&gt; Bool<br>    }<br></p><p>    let c2 = Collection&lt;StrictEquatable&gt;()<br></p><p>The type characteristics of c2&#39;s elements (for example, what are the<br>signatures of the methods that they should have) are indeterminable at<br>compile time because `Self` isn&#39;t yet &quot;bound&quot; to a type. For this to<br>work, the `Self` in StrictEquatable might have to bind to different<br>types at runtime for different subtypes of StrictEquatable.<br></p><p>This, per my understanding, is why Swift errors out. Assuming this<br>understanding is correct, I&#39;d like to pitch a solution.<br></p><p>## The pitch<br></p><p>What I&#39;m about to suggest is closely related to Joe Groff&#39;s suggestion<br>to use an EquatesWith here:<br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002300.html<br></p><p>Let&#39;s say we introduce a new keyword called `Subtype` that can be used<br>when defining a protocol. `Subtype` binds to the closest subtype that<br>fully *implements* the protocol. (In contrast, `Self` binds to the<br>non-protocol type at the end of the protocol hierarchy.)<br></p><p>For example:<br></p><p>    // Type hierarchy: P -&gt; Q -&gt; R -&gt; S<br>    // P, Q, R are protocols; S is a struct.<br></p><p>    protocol P {<br>        func f1(t: Subtype)<br>    }<br>    protocol Q : P {<br>        func f2()<br>    }<br>    protocol R : Q {<br>    }<br>    extension R {<br>        func f1(t: R) { } // Implementing P<br>        func f2() { }     // Implementing Q<br>    }<br>    struct S : R {<br>    }<br></p><p>    let s = Collection&lt;S&gt;() // Okay: P&#39;s Subtype is bound to R<br>    let r = Collection&lt;R&gt;() // Okay: P&#39;s Subtype is bound to R<br>    let q = Collection&lt;Q&gt;() // Error: Subtype cannot be resolved<br>    let p = Collection&lt;P&gt;() // Error: Subtype cannot be resolved<br></p><p>`Self` can only bind to a non-protocol type like S, but `Subtype` can<br>bind to either a protocol or a non-protocol type, depending on where<br>the protocol gets implemented. Here, the P protocol is implemented in<br>the sub-protocol R, and so the `Subtype` in P binds to R. If `Subtype`<br>cannot be resolved, it should result in a compilation error.<br></p><p>In the standard library, if we replace all `Self`s in Equatable with<br>`Subtype`, we still maintain type safety (so `1 == 1.0` won&#39;t compile,<br>like it is now), but we will, at the same time, be able to create<br>heterogeneous collections of elements conforming to a sub-protocol of<br>Equatable, thereby fixing problems like this:<br>http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck<br></p><p>That said, while this conceptually looks good, I have no idea whether<br>it&#39;s practically viable. I&#39;d love to hear the community&#39;s and the<br>compiler team&#39;s take on this suggestion.<br></p><p>roop.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Achieving a heterogeneous collection of Equatables</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 22, 2015 at 08:00:00am</p></header><div class="content"><p>&gt; On Dec 21, 2015, at 1:45 AM, Roopesh Chander via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; We know that as of Swift 2.0, if a protocol uses `Self` (like<br>&gt; Equatable does), it cannot be used in a heterogeneous collection. This<br>&gt; is a pain point, and has been talked about many times (for instance,<br>&gt; in Brent Simmons&#39; Swift Diary: http://inessential.com/swiftdiary).<br>&gt; <br>&gt; I realize that this problem is intertwined with the use of associated<br>&gt; types, but if we forget about associated types for the moment, I<br>&gt; believe we can get a heterogeneous collection of Equatable elements to<br>&gt; work.<br>&gt; <br>&gt; ## The problem<br>&gt; <br>&gt; There&#39;s no problem in creating a heterogeneous collection when there&#39;s<br>&gt; no `Self`:<br>&gt; <br>&gt;    struct Collection&lt;Element&gt; {<br>&gt;    }<br>&gt; <br>&gt;    protocol LooseEquatable {<br>&gt;        func isEqualTo(other: LooseEquatable) -&gt; Bool<br>&gt;    }<br>&gt; <br>&gt;    let c1 = Collection&lt;LooseEquatable&gt;()<br>&gt; <br>&gt; The type characteristics of c1&#39;s elements can be deduced at compile<br>&gt; time, so this works.<br>&gt; <br>&gt; But when `Self` is used in the protocol:<br>&gt; <br>&gt;    protocol StrictEquatable {<br>&gt;        func isEqualTo(other: Self) -&gt; Bool<br>&gt;    }<br>&gt; <br>&gt;    let c2 = Collection&lt;StrictEquatable&gt;()<br>&gt; <br>&gt; The type characteristics of c2&#39;s elements (for example, what are the<br>&gt; signatures of the methods that they should have) are indeterminable at<br>&gt; compile time because `Self` isn&#39;t yet &quot;bound&quot; to a type. For this to<br>&gt; work, the `Self` in StrictEquatable might have to bind to different<br>&gt; types at runtime for different subtypes of StrictEquatable.<br>&gt; <br>&gt; This, per my understanding, is why Swift errors out. Assuming this<br>&gt; understanding is correct, I&#39;d like to pitch a solution.<br>&gt; <br>&gt; ## The pitch<br>&gt; <br>&gt; What I&#39;m about to suggest is closely related to Joe Groff&#39;s suggestion<br>&gt; to use an EquatesWith here:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002300.html<br>&gt; <br>&gt; Let&#39;s say we introduce a new keyword called `Subtype` that can be used<br>&gt; when defining a protocol. `Subtype` binds to the closest subtype that<br>&gt; fully *implements* the protocol. (In contrast, `Self` binds to the<br>&gt; non-protocol type at the end of the protocol hierarchy.)<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt;    // Type hierarchy: P -&gt; Q -&gt; R -&gt; S<br>&gt;    // P, Q, R are protocols; S is a struct.<br>&gt; <br>&gt;    protocol P {<br>&gt;        func f1(t: Subtype)<br>&gt;    }<br>&gt;    protocol Q : P {<br>&gt;        func f2()<br>&gt;    }<br>&gt;    protocol R : Q {<br>&gt;    }<br>&gt;    extension R {<br>&gt;        func f1(t: R) { } // Implementing P<br>&gt;        func f2() { }     // Implementing Q<br>&gt;    }<br>&gt;    struct S : R {<br>&gt;    }<br>&gt; <br>&gt;    let s = Collection&lt;S&gt;() // Okay: P&#39;s Subtype is bound to R<br>&gt;    let r = Collection&lt;R&gt;() // Okay: P&#39;s Subtype is bound to R<br>&gt;    let q = Collection&lt;Q&gt;() // Error: Subtype cannot be resolved<br>&gt;    let p = Collection&lt;P&gt;() // Error: Subtype cannot be resolved<br>&gt; <br>&gt; `Self` can only bind to a non-protocol type like S, but `Subtype` can<br>&gt; bind to either a protocol or a non-protocol type, depending on where<br>&gt; the protocol gets implemented. Here, the P protocol is implemented in<br>&gt; the sub-protocol R, and so the `Subtype` in P binds to R. If `Subtype`<br>&gt; cannot be resolved, it should result in a compilation error.<br>&gt; <br>&gt; In the standard library, if we replace all `Self`s in Equatable with<br>&gt; `Subtype`, we still maintain type safety (so `1 == 1.0` won&#39;t compile,<br>&gt; like it is now), but we will, at the same time, be able to create<br>&gt; heterogeneous collections of elements conforming to a sub-protocol of<br>&gt; Equatable, thereby fixing problems like this:<br>&gt; http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck<br>&gt; <br>&gt; That said, while this conceptually looks good, I have no idea whether<br>&gt; it&#39;s practically viable. I&#39;d love to hear the community&#39;s and the<br>&gt; compiler team&#39;s take on this suggestion.<br></p><p>You wouldn&#39;t really need a different protocol keyword to achieve this. You&#39;re providing a conformance for the type protocol&lt;R&gt;: P, rather than saying T: P for all T: R, as happens today. That&#39;s a property of the conformance rather than the protocol itself. What you&#39;re proposing is closer to the other approach I laid out, allowing protocol types to be extended to conform to protocols themselves:<br></p><p>extension protocol&lt;R&gt;: P { // We&#39;re extending the protocol *type* to conform, not its conformers<br>  func f1(t: R) { }<br>}<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Achieving a heterogeneous collection of Equatables</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 22, 2015 at 10:00:00am</p></header><div class="content"><p>&gt; On Dec 22, 2015, at 10:48 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 21, 2015, at 1:45 AM, Roopesh Chander via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; We know that as of Swift 2.0, if a protocol uses `Self` (like<br>&gt;&gt; Equatable does), it cannot be used in a heterogeneous collection. This<br>&gt;&gt; is a pain point, and has been talked about many times (for instance,<br>&gt;&gt; in Brent Simmons&#39; Swift Diary: http://inessential.com/swiftdiary).<br>&gt;&gt; <br>&gt;&gt; I realize that this problem is intertwined with the use of associated<br>&gt;&gt; types, but if we forget about associated types for the moment, I<br>&gt;&gt; believe we can get a heterogeneous collection of Equatable elements to<br>&gt;&gt; work.<br>&gt;&gt; <br>&gt;&gt; ## The problem<br>&gt;&gt; <br>&gt;&gt; There&#39;s no problem in creating a heterogeneous collection when there&#39;s<br>&gt;&gt; no `Self`:<br>&gt;&gt; <br>&gt;&gt;   struct Collection&lt;Element&gt; {<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   protocol LooseEquatable {<br>&gt;&gt;       func isEqualTo(other: LooseEquatable) -&gt; Bool<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   let c1 = Collection&lt;LooseEquatable&gt;()<br>&gt;&gt; <br>&gt;&gt; The type characteristics of c1&#39;s elements can be deduced at compile<br>&gt;&gt; time, so this works.<br>&gt;&gt; <br>&gt;&gt; But when `Self` is used in the protocol:<br>&gt;&gt; <br>&gt;&gt;   protocol StrictEquatable {<br>&gt;&gt;       func isEqualTo(other: Self) -&gt; Bool<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   let c2 = Collection&lt;StrictEquatable&gt;()<br>&gt;&gt; <br>&gt;&gt; The type characteristics of c2&#39;s elements (for example, what are the<br>&gt;&gt; signatures of the methods that they should have) are indeterminable at<br>&gt;&gt; compile time because `Self` isn&#39;t yet &quot;bound&quot; to a type. For this to<br>&gt;&gt; work, the `Self` in StrictEquatable might have to bind to different<br>&gt;&gt; types at runtime for different subtypes of StrictEquatable.<br>&gt;&gt; <br>&gt;&gt; This, per my understanding, is why Swift errors out. Assuming this<br>&gt;&gt; understanding is correct, I&#39;d like to pitch a solution.<br>&gt;&gt; <br>&gt;&gt; ## The pitch<br>&gt;&gt; <br>&gt;&gt; What I&#39;m about to suggest is closely related to Joe Groff&#39;s suggestion<br>&gt;&gt; to use an EquatesWith here:<br>&gt;&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002300.html<br>&gt;&gt; <br>&gt;&gt; Let&#39;s say we introduce a new keyword called `Subtype` that can be used<br>&gt;&gt; when defining a protocol. `Subtype` binds to the closest subtype that<br>&gt;&gt; fully *implements* the protocol. (In contrast, `Self` binds to the<br>&gt;&gt; non-protocol type at the end of the protocol hierarchy.)<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; <br>&gt;&gt;   // Type hierarchy: P -&gt; Q -&gt; R -&gt; S<br>&gt;&gt;   // P, Q, R are protocols; S is a struct.<br>&gt;&gt; <br>&gt;&gt;   protocol P {<br>&gt;&gt;       func f1(t: Subtype)<br>&gt;&gt;   }<br>&gt;&gt;   protocol Q : P {<br>&gt;&gt;       func f2()<br>&gt;&gt;   }<br>&gt;&gt;   protocol R : Q {<br>&gt;&gt;   }<br>&gt;&gt;   extension R {<br>&gt;&gt;       func f1(t: R) { } // Implementing P<br>&gt;&gt;       func f2() { }     // Implementing Q<br>&gt;&gt;   }<br>&gt;&gt;   struct S : R {<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   let s = Collection&lt;S&gt;() // Okay: P&#39;s Subtype is bound to R<br>&gt;&gt;   let r = Collection&lt;R&gt;() // Okay: P&#39;s Subtype is bound to R<br>&gt;&gt;   let q = Collection&lt;Q&gt;() // Error: Subtype cannot be resolved<br>&gt;&gt;   let p = Collection&lt;P&gt;() // Error: Subtype cannot be resolved<br>&gt;&gt; <br>&gt;&gt; `Self` can only bind to a non-protocol type like S, but `Subtype` can<br>&gt;&gt; bind to either a protocol or a non-protocol type, depending on where<br>&gt;&gt; the protocol gets implemented. Here, the P protocol is implemented in<br>&gt;&gt; the sub-protocol R, and so the `Subtype` in P binds to R. If `Subtype`<br>&gt;&gt; cannot be resolved, it should result in a compilation error.<br>&gt;&gt; <br>&gt;&gt; In the standard library, if we replace all `Self`s in Equatable with<br>&gt;&gt; `Subtype`, we still maintain type safety (so `1 == 1.0` won&#39;t compile,<br>&gt;&gt; like it is now), but we will, at the same time, be able to create<br>&gt;&gt; heterogeneous collections of elements conforming to a sub-protocol of<br>&gt;&gt; Equatable, thereby fixing problems like this:<br>&gt;&gt; http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck<br>&gt;&gt; <br>&gt;&gt; That said, while this conceptually looks good, I have no idea whether<br>&gt;&gt; it&#39;s practically viable. I&#39;d love to hear the community&#39;s and the<br>&gt;&gt; compiler team&#39;s take on this suggestion.<br>&gt; <br>&gt; You wouldn&#39;t really need a different protocol keyword to achieve this. You&#39;re providing a conformance for the type protocol&lt;R&gt;: P, rather than saying T: P for all T: R, as happens today. That&#39;s a property of the conformance rather than the protocol itself. What you&#39;re proposing is closer to the other approach I laid out, allowing protocol types to be extended to conform to protocols themselves:<br>&gt; <br>&gt; extension protocol&lt;R&gt;: P { // We&#39;re extending the protocol *type* to conform, not its conformers<br>&gt;  func f1(t: R) { }<br>&gt; }<br></p><p>I like it!  Extend an arbitrary existential (and it’s conforming types?) with additional conformances.  That is pretty cool!<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7759950c169ff7ec3ad7b0d858402fb2?s=50"></div><header><strong>[Pitch] Achieving a heterogeneous collection of Equatables</strong> from <string>Roopesh Chander</string> &lt;roop at roopc.net&gt;<p>December 23, 2015 at 07:00:00am</p></header><div class="content"><p>On Tue, Dec 22, 2015 at 10:18 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br></p><p>&gt; What you&#39;re proposing is closer to the other approach I laid out,<br>allowing protocol types to be<br>&gt; extended to conform to protocols themselves<br></p><p>I couldn&#39;t find the thread you&#39;ve explained this earlier, so I&#39;m going by<br>what you&#39;ve described in this thread.<br></p><p>&gt; extension protocol&lt;R&gt;: P { // We&#39;re extending the protocol *type* to<br>conform, not its conformers<br>&gt;   func f1(t: R) { }<br>&gt; }<br></p><p>But we *do* want conformers of R to also conform to P (and have func f1&#39;s<br>implementation available in them, by virtue of conforming to R). If we<br>didn&#39;t, then if we apply this solution to the Swift stdlib, and we have the<br>following type hierarchy when we use it (considering the example from<br>http://inessential.com/2015/08/05/swift_diary_9_where_im_stuck):<br></p><p>protocol Equatable (in stdlib)<br> -&gt; protocol Hashable (in stdlib)<br> -&gt; protocol Account (in app)<br>     with a protocol extension:<br>     extension protocol&lt;Account&gt; : Equatable {<br>         func isEqual(lhs: Account, rhs: Account) -&gt; Bool { return false }<br>     }<br> -&gt; class TwitterAccount (in app)<br></p><p>If I understand your solution correctly, the above setup means that the<br>Account protocol and the TwitterAccount class don&#39;t conform to Equatable -<br>only that the Account existential type conforms to Equatable. So we can&#39;t<br>do twitterUser1 == twitterUser2, and being able to do that is desirable for<br>this use case.<br></p><p>What I was proposing can be seen as a variation of your EquatesWith<br>approach, the difference being that the &quot;where EquatesWith == Drawable&quot;<br>part is automatically inferred by the compiler based on where the<br>super-protocol gets implemented in the type hierarchy. It could be<br>implemented in a class/struct, in which case `Subtype` would behave similar<br>to `Self`, or it could be implemented in a protocol, in which `Subtype`<br>would bind to the protocol (like, say, `Drawable`).<br></p><p>roop.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151223/22b5e301/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
