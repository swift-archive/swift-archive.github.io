<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Extend FloatingPoint with tau!</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 29, 2016 at 09:00:00am</p></header><div class="content"><p>Hello community,<br></p><p>Tau day &lt;http://tauday.com/&gt; was yesterday, and reminded me that we forgot to provide a `tau` next to `FloatingPoint`’s `pi` property. How about we write a proposal to brind this forward-thinking constant to a forward-thinking language?<br></p><p>Proposal: Extend `FloatingPoint` with tau<br></p><p>  /// The mathematical constant tau = 6.28318...<br>  ///<br>  /// Extensible floating-point types might provide additional APIs to obtain<br>  /// this value to caller-specified precision.<br>  static var tau: Self { get } <br></p><p>David.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160629/4dc6a440/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>Extend FloatingPoint with tau!</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>June 30, 2016 at 08:00:00am</p></header><div class="content"><p>I would argue the reverse, i.e., removing pi as a property of<br>FloatingPoint.  What is it there vs. being part of a separate mathematic<br>constants package?  I don&#39;t see Euler&#39;s number or phi (golden ratio) in the<br>proposal.<br></p><p>Joe<br></p><p><br>On Wed, Jun 29, 2016 at 2:45 AM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello community,<br>&gt;<br>&gt; Tau day &lt;http://tauday.com&gt; was yesterday, and reminded me that we forgot<br>&gt; to provide a `tau` next to `FloatingPoint`’s `pi` property. How about we<br>&gt; write a proposal to brind this forward-thinking constant to a<br>&gt; forward-thinking language?<br>&gt;<br>&gt; *Proposal: Extend `FloatingPoint` with tau*<br>&gt;<br>&gt;   /// The mathematical constant tau = 6.28318...<br>&gt;   ///<br>&gt;   /// Extensible floating-point types might provide additional APIs to<br>&gt; obtain<br>&gt;   /// this value to caller-specified precision.<br>&gt;   static var tau: Self { get }<br>&gt;<br>&gt; David.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Joseph Bell<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/815d732d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Extend FloatingPoint with tau!</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>June 30, 2016 at 11:00:00am</p></header><div class="content"><p>This was discussed as part of SE-0067.<br></p><p>The consensus was that pi deserved special treatment, as it is used in general-purpose code an order of magnitude more often than the all other constants combined.  I don’t think that anyone argued against it’s inclusion.<br></p><p>– Steve<br></p><p>&gt; On Jun 30, 2016, at 9:12 AM, Joseph Bell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would argue the reverse, i.e., removing pi as a property of FloatingPoint.  What is it there vs. being part of a separate mathematic constants package?  I don&#39;t see Euler&#39;s number or phi (golden ratio) in the proposal.<br>&gt; <br>&gt; Joe<br>&gt;  <br>&gt; <br>&gt; On Wed, Jun 29, 2016 at 2:45 AM, David Hart via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello community,<br>&gt; <br>&gt; Tau day &lt;http://tauday.com/&gt; was yesterday, and reminded me that we forgot to provide a `tau` next to `FloatingPoint`’s `pi` property. How about we write a proposal to brind this forward-thinking constant to a forward-thinking language?<br>&gt; <br>&gt; Proposal: Extend `FloatingPoint` with tau<br>&gt; <br>&gt;   /// The mathematical constant tau = 6.28318...<br>&gt;   ///<br>&gt;   /// Extensible floating-point types might provide additional APIs to obtain<br>&gt;   /// this value to caller-specified precision.<br>&gt;   static var tau: Self { get } <br>&gt; <br>&gt; David.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Joseph Bell<br>&gt; http://dev.iachieved.it/iachievedit/ &lt;http://dev.iachieved.it/iachievedit/&gt;<br>&gt; @iachievedit<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/b33e4ae4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Extend FloatingPoint with tau!</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>June 30, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 9:22 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This was discussed as part of SE-0067.<br>&gt; <br>&gt; The consensus was that pi deserved special treatment, as it is used in general-purpose code an order of magnitude more often than the all other constants combined.  I don’t think that anyone argued against it’s inclusion.<br></p><p>To me, it also makes sense to offer a common transcendental constant with the highest precision available to a particular floating point type.<br></p><p>-DW<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Extend FloatingPoint with tau!</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 30, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 9:01 AM, David Waite via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 30, 2016, at 9:22 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This was discussed as part of SE-0067.<br>&gt;&gt; <br>&gt;&gt; The consensus was that pi deserved special treatment, as it is used in general-purpose code an order of magnitude more often than the all other constants combined.  I don’t think that anyone argued against it’s inclusion.<br>&gt; <br>&gt; To me, it also makes sense to offer a common transcendental constant with the highest precision available to a particular floating point type.<br></p><p>&#39;2 * x&#39; is a precise operation (assuming it doesn&#39;t overflow the exponent), so &#39;2 * .pi&#39; will always be as accurate as &#39;.pi&#39; itself.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
