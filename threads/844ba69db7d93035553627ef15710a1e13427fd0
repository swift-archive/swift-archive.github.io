<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 26, 2016 at 01:00:00pm</p></header><div class="content"><p>on Fri May 06 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; As I said to Chris in an off-list email, unfold() was actually the<br>&gt; function that I was the most excited about in the proposal, because it<br>&gt; allows for a very elegant solution to a variety of looping needs,<br>&gt; especially now that we&#39;ve gotten rid of the C-style for loops. One<br>&gt; example of its use is something like<br>&gt;<br>&gt;   // Iterate over self.view and all its ancestor views.<br>&gt;   for view in unfold(self.view, applying: { $0.superview }) {<br>&gt;       // ...<br>&gt;   }<br>&gt;<br>&gt; In fact, just today I hit this exact issue and wished I had<br>&gt; unfold(). This same pattern works for any case where an object has a<br>&gt; property of the same type and you want to walk the entire chain, such<br>&gt; as UIViewController.presentingViewController, or<br>&gt; NSError.userInfo[NSUnderlyingErrorKey].<br>&gt;<br>&gt; It also integrates very nicely with the other sequence methods,<br>&gt; including drop(while:) and prefix(while:). For example:<br>&gt;<br>&gt;   // Iterate over someView and all its ancestors, stopping at<br>&gt; self.view<br>&gt;   for view in unfold(someView, applying: { $0.superview<br>&gt; }).prefix(while: { $0 !== self.view }) {<br>&gt;       // ...<br>&gt;   }<br>&gt;<br>&gt; Incidentally, I tried writing up an example of using the stateful<br>&gt; version to reimplement zip(), but it ended up being a good argument in<br>&gt; favor of the suggestion someone (maybe you?) had for turning the state<br>&gt; into an inout parameter.<br></p><p>Thanks for the credit, but I think it goes to Joe Groff.  He&#39;s been<br>suggesting we do the same thing for reduce().<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
