<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Localization in Swift.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  2, 2016 at 12:00:00pm</p></header><div class="content"><p>on Tue Nov 01 2016, Jens Alfke &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Nov 1, 2016, at 10:40 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; For example, if I want show the user that I have to ask him to give me permission of a folder, the<br>&gt; `url.path` has no need to translate.<br>&gt;<br>&gt; We’re getting off-topic, but paths do need to be translated, at least<br>&gt; on Mac systems. The names of many standard folders like “Applications”<br>&gt; and “Documents” are hardwired to English in the filesystem but are<br>&gt; localized in the UI. Some application names get localized too (there’s<br>&gt; a table in the app’s Info.plist that can substitute localized names.)<br>&gt;<br>&gt; Anyway, string interpolation is convenient, but I wouldn’t say it<br>&gt; should be the only way to format strings in Swift; it’s a lot less<br>&gt; flexible than the C-style “%” substitutions. For comparison, even<br>&gt; though C++’s iostreams use “&lt;&lt;“ to format strings by concatenation, I<br>&gt; still end up using “%” based formatting a lot, depending on the use<br>&gt; case.<br></p><p>I&#39;m actually working on design in this area right now.<br></p><p>%-style formatting has the following drawbacks<br></p><p>- for anyone who doesn&#39;t use them regularly they are cryptic and<br>  complex, as the printf (3) man page attests.<br></p><p>- the spelling of these placeholders must match up to the types of the<br>  arguments, in the right order, or the behavior is undefined.  Some<br>  limited support for compile-time checking of this correspondence could<br>  be implemented, but only for the cases where the format string is a<br>  literal.<br></p><p>- there&#39;s no reasonable way to extend the formatting vocabulary to cover<br>  the needs of new types: you are stuck with what&#39;s in the box.<br></p><p>In my opinion, we can and must do much better for Swift.  If there&#39;s<br>something about “%” formatting that you particularly value, I&#39;d like to<br>know about it, so I can make sure it&#39;s accomodated.<br></p><p>Thanks,<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Localization in Swift.</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>November  2, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Nov 2, 2016, at 12:50 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; In my opinion, we can and must do much better for Swift.  If there&#39;s<br>&gt; something about “%” formatting that you particularly value, I&#39;d like to<br>&gt; know about it, so I can make sure it&#39;s accomodated.<br></p><p>It offers more control over formatting, like min/max widths, number base, decimal places, etc. Yes, you can do this in the code inside the interpolated string, but IMHO it’s awkward because it requires knowing a bunch of extra methods for string conversion, truncation, etc. It’s a lot easier for me to remember and type “%x” than it is to remember and type the method that converts an int to a hex string.<br></p><p>Also (and more importantly for localization) the formatting details are part of the localizable format string, not hardwired. One example of this is formatting currency, where a US localization would use “$%.2f” but other currencies might call for more or fewer decimal places. There are other examples where one might swap format strings for other purposes like different-width layouts for monospaced/terminal output.<br></p><p>There’s also a nonstandard extension used by Cocoa/CF’s formatters, that allows the parameters to be reordered. (I haven’t used it so I don’t know the syntax offhand.) This is of course important for localization, to follow a language’s grammar.<br></p><p>I think these features could be added to interpolation. Just as a quick idea, maybe a syntax that allows formatting metacharacters to be added at the start of the interpolation, like “Please pay $\((.2) total)” where the “(.2) specifies two decimal places, or “The address is \((x) addr)”.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161102/89f70043/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Localization in Swift.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>November  2, 2016 at 03:00:00pm</p></header><div class="content"><p>on Wed Nov 02 2016, Jens Alfke &lt;jens-AT-mooseyard.com&gt; wrote:<br></p><p>&gt;&gt; On Nov 2, 2016, at 12:50 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In my opinion, we can and must do much better for Swift.  If there&#39;s<br>&gt;&gt; something about “%” formatting that you particularly value, I&#39;d like to<br>&gt;&gt; know about it, so I can make sure it&#39;s accomodated.<br>&gt;<br>&gt; It offers more control over formatting, like min/max widths, number<br>&gt; base, decimal places, etc. Yes, you can do this in the code inside the<br>&gt; interpolated string, but IMHO it’s awkward because it requires knowing<br>&gt; a bunch of extra methods for string conversion, truncation, etc. It’s<br>&gt; a lot easier for me to remember and type “%x” than it is to remember<br>&gt; and type the method that converts an int to a hex string.<br></p><p>In my view this should look like <br></p><p>  &quot;... \(x.format(radix: 16, width: 12))... &quot;<br></p><p>Where the possible arguments to format() are statically known to the<br>compiler (and code completion!) based on the type of x.<br></p><p>&gt;<br>&gt; Also (and more importantly for localization) the formatting details<br>&gt; are part of the localizable format string, not hardwired. One example<br>&gt; of this is formatting currency, where a US localization would use<br>&gt; “$%.2f” but other currencies might call for more or fewer decimal<br>&gt; places. <br></p><p>Yep, I&#39;m paying attention to that, thanks.<br></p><p>&gt; There are other examples where one might swap format strings for other<br>&gt; purposes like different-width layouts for monospaced/terminal output.<br></p><p>I think we can leverage the same mechanisms used for localization to<br>handle those.<br></p><p>&gt; There’s also a nonstandard extension used by Cocoa/CF’s formatters,<br>&gt; that allows the parameters to be reordered. (I haven’t used it so I<br>&gt; don’t know the syntax offhand.) This is of course important for<br>&gt; localization, to follow a language’s grammar.<br></p><p>Right, that&#39;s crucial.<br></p><p>&gt; I think these features could be added to interpolation. Just as a<br>&gt; quick idea, maybe a syntax that allows formatting metacharacters to be<br>&gt; added at the start of the interpolation, like “Please pay $\((.2)<br>&gt; total)” where the “(.2) specifies two decimal places, or “The address<br>&gt; is \((x) addr)”.<br></p><p>I think the “.format(...)” approach is better, but it&#39;s equally<br>important that there are sufficient outside-the-Swift-source knobs for<br>localizers to add language-specific formatting parameters.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Localization in Swift.</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>November  3, 2016 at 10:00:00am</p></header><div class="content"><p>Hello everyone. Thanks to you all for replies in this thread.<br></p><p>I am currently working on a Xcode Extension for this purpose. I would like<br>to bring it to github in this week. This will be my first Xcode extension,<br>also my first github open sourced project.<br></p><p><br>Zhaoxin<br></p><p>On Thu, Nov 3, 2016 at 6:14 AM, Dave Abrahams via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Wed Nov 02 2016, Jens Alfke &lt;jens-AT-mooseyard.com&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; On Nov 2, 2016, at 12:50 PM, Dave Abrahams via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; In my opinion, we can and must do much better for Swift.  If there&#39;s<br>&gt; &gt;&gt; something about “%” formatting that you particularly value, I&#39;d like to<br>&gt; &gt;&gt; know about it, so I can make sure it&#39;s accomodated.<br>&gt; &gt;<br>&gt; &gt; It offers more control over formatting, like min/max widths, number<br>&gt; &gt; base, decimal places, etc. Yes, you can do this in the code inside the<br>&gt; &gt; interpolated string, but IMHO it’s awkward because it requires knowing<br>&gt; &gt; a bunch of extra methods for string conversion, truncation, etc. It’s<br>&gt; &gt; a lot easier for me to remember and type “%x” than it is to remember<br>&gt; &gt; and type the method that converts an int to a hex string.<br>&gt;<br>&gt; In my view this should look like<br>&gt;<br>&gt;   &quot;... \(x.format(radix: 16, width: 12))... &quot;<br>&gt;<br>&gt; Where the possible arguments to format() are statically known to the<br>&gt; compiler (and code completion!) based on the type of x.<br>&gt;<br>&gt; &gt;<br>&gt; &gt; Also (and more importantly for localization) the formatting details<br>&gt; &gt; are part of the localizable format string, not hardwired. One example<br>&gt; &gt; of this is formatting currency, where a US localization would use<br>&gt; &gt; “$%.2f” but other currencies might call for more or fewer decimal<br>&gt; &gt; places.<br>&gt;<br>&gt; Yep, I&#39;m paying attention to that, thanks.<br>&gt;<br>&gt; &gt; There are other examples where one might swap format strings for other<br>&gt; &gt; purposes like different-width layouts for monospaced/terminal output.<br>&gt;<br>&gt; I think we can leverage the same mechanisms used for localization to<br>&gt; handle those.<br>&gt;<br>&gt; &gt; There’s also a nonstandard extension used by Cocoa/CF’s formatters,<br>&gt; &gt; that allows the parameters to be reordered. (I haven’t used it so I<br>&gt; &gt; don’t know the syntax offhand.) This is of course important for<br>&gt; &gt; localization, to follow a language’s grammar.<br>&gt;<br>&gt; Right, that&#39;s crucial.<br>&gt;<br>&gt; &gt; I think these features could be added to interpolation. Just as a<br>&gt; &gt; quick idea, maybe a syntax that allows formatting metacharacters to be<br>&gt; &gt; added at the start of the interpolation, like “Please pay $\((.2)<br>&gt; &gt; total)” where the “(.2) specifies two decimal places, or “The address<br>&gt; &gt; is \((x) addr)”.<br>&gt;<br>&gt; I think the “.format(...)” approach is better, but it&#39;s equally<br>&gt; important that there are sufficient outside-the-Swift-source knobs for<br>&gt; localizers to add language-specific formatting parameters.<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/aebb1bb5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Localization in Swift.</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>November  3, 2016 at 09:00:00pm</p></header><div class="content"><p>I just uploaded this as a Xcode extension. You can download it here<br>&lt;https://github.com/owenzhao/Localization-Helper&gt;.<br>As long as Swift is not supporting this, you can use my Xcode extension.<br></p><p>Zhaoxin<br></p><p>On Thu, Nov 3, 2016 at 10:36 AM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br></p><p>&gt; Hello everyone. Thanks to you all for replies in this thread.<br>&gt;<br>&gt; I am currently working on a Xcode Extension for this purpose. I would like<br>&gt; to bring it to github in this week. This will be my first Xcode extension,<br>&gt; also my first github open sourced project.<br>&gt;<br>&gt;<br>&gt; Zhaoxin<br>&gt;<br>&gt; On Thu, Nov 3, 2016 at 6:14 AM, Dave Abrahams via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Wed Nov 02 2016, Jens Alfke &lt;jens-AT-mooseyard.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt;&gt; On Nov 2, 2016, at 12:50 PM, Dave Abrahams via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; In my opinion, we can and must do much better for Swift.  If there&#39;s<br>&gt;&gt; &gt;&gt; something about “%” formatting that you particularly value, I&#39;d like to<br>&gt;&gt; &gt;&gt; know about it, so I can make sure it&#39;s accomodated.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; It offers more control over formatting, like min/max widths, number<br>&gt;&gt; &gt; base, decimal places, etc. Yes, you can do this in the code inside the<br>&gt;&gt; &gt; interpolated string, but IMHO it’s awkward because it requires knowing<br>&gt;&gt; &gt; a bunch of extra methods for string conversion, truncation, etc. It’s<br>&gt;&gt; &gt; a lot easier for me to remember and type “%x” than it is to remember<br>&gt;&gt; &gt; and type the method that converts an int to a hex string.<br>&gt;&gt;<br>&gt;&gt; In my view this should look like<br>&gt;&gt;<br>&gt;&gt;   &quot;... \(x.format(radix: 16, width: 12))... &quot;<br>&gt;&gt;<br>&gt;&gt; Where the possible arguments to format() are statically known to the<br>&gt;&gt; compiler (and code completion!) based on the type of x.<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Also (and more importantly for localization) the formatting details<br>&gt;&gt; &gt; are part of the localizable format string, not hardwired. One example<br>&gt;&gt; &gt; of this is formatting currency, where a US localization would use<br>&gt;&gt; &gt; “$%.2f” but other currencies might call for more or fewer decimal<br>&gt;&gt; &gt; places.<br>&gt;&gt;<br>&gt;&gt; Yep, I&#39;m paying attention to that, thanks.<br>&gt;&gt;<br>&gt;&gt; &gt; There are other examples where one might swap format strings for other<br>&gt;&gt; &gt; purposes like different-width layouts for monospaced/terminal output.<br>&gt;&gt;<br>&gt;&gt; I think we can leverage the same mechanisms used for localization to<br>&gt;&gt; handle those.<br>&gt;&gt;<br>&gt;&gt; &gt; There’s also a nonstandard extension used by Cocoa/CF’s formatters,<br>&gt;&gt; &gt; that allows the parameters to be reordered. (I haven’t used it so I<br>&gt;&gt; &gt; don’t know the syntax offhand.) This is of course important for<br>&gt;&gt; &gt; localization, to follow a language’s grammar.<br>&gt;&gt;<br>&gt;&gt; Right, that&#39;s crucial.<br>&gt;&gt;<br>&gt;&gt; &gt; I think these features could be added to interpolation. Just as a<br>&gt;&gt; &gt; quick idea, maybe a syntax that allows formatting metacharacters to be<br>&gt;&gt; &gt; added at the start of the interpolation, like “Please pay $\((.2)<br>&gt;&gt; &gt; total)” where the “(.2) specifies two decimal places, or “The address<br>&gt;&gt; &gt; is \((x) addr)”.<br>&gt;&gt;<br>&gt;&gt; I think the “.format(...)” approach is better, but it&#39;s equally<br>&gt;&gt; important that there are sufficient outside-the-Swift-source knobs for<br>&gt;&gt; localizers to add language-specific formatting parameters.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; -Dave<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161103/02f69bef/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
