<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  7, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi everyone,<br></p><p>The standard library has bitPattern initializers on pointers. But we<br>are missing initializers to create integers from pointers.<br></p><p>Someone needs to propose these APIs, walk them through<br>swift-evolution, write a patch for the library and add tests.<br></p><p>extension UInt {<br>  init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>    self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>  }<br></p><p>  init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>    self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>  }<br>}<br></p><p>extension Int {<br>  init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>    self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>  }<br></p><p>  init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>    self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>  }<br>}<br></p><p>https://bugs.swift.org/browse/SR-131<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December  8, 2015 at 07:00:00am</p></header><div class="content"><p>I&#39;m looking for a good starter project, so normally I would be interested<br>in taking this, but I&#39;m not sure I can think of a good motivation for it.<br>UnsafePointer&#39;s advanceBy and distanceTo functions take care of pointer<br>arithmetic more safely than converting to int would, and the<br>debugDescription property can get you the address for debugging purposes.<br></p><p>Considering that everything that goes through the swift-evolution process<br>needs to have a motivation, is there a use case for this that I&#39;m not<br>thinking of?<br></p><p>On Mon, Dec 7, 2015 at 4:45 PM, Dmitri Gribenko via swift-dev &lt;<br>swift-dev at swift.org&gt; wrote:<br></p><p>&gt; Hi everyone,<br>&gt;<br>&gt; The standard library has bitPattern initializers on pointers. But we<br>&gt; are missing initializers to create integers from pointers.<br>&gt;<br>&gt; Someone needs to propose these APIs, walk them through<br>&gt; swift-evolution, write a patch for the library and add tests.<br>&gt;<br>&gt; extension UInt {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt;<br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; extension Int {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt;<br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; https://bugs.swift.org/browse/SR-131<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/fe19e0ef/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>December  8, 2015 at 11:00:00am</p></header><div class="content"><p>When writing high-performance code, it is fairly common to check the alignment of pointers so that initial elements can be processed until some suitable alignment is reached to use a faster implementation, or to verify that a fast algorithm can be used.<br></p><p>&gt; On Dec 8, 2015, at 10:59 AM, Michael Buckley via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m looking for a good starter project, so normally I would be interested in taking this, but I&#39;m not sure I can think of a good motivation for it. UnsafePointer&#39;s advanceBy and distanceTo functions take care of pointer arithmetic more safely than converting to int would, and the debugDescription property can get you the address for debugging purposes.<br>&gt; <br>&gt; Considering that everything that goes through the swift-evolution process needs to have a motivation, is there a use case for this that I&#39;m not thinking of?<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 4:45 PM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone,<br>&gt; <br>&gt; The standard library has bitPattern initializers on pointers. But we<br>&gt; are missing initializers to create integers from pointers.<br>&gt; <br>&gt; Someone needs to propose these APIs, walk them through<br>&gt; swift-evolution, write a patch for the library and add tests.<br>&gt; <br>&gt; extension UInt {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; <br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; extension Int {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; <br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; https://bugs.swift.org/browse/SR-131 &lt;https://bugs.swift.org/browse/SR-131&gt;<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/bcf219e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December  8, 2015 at 09:00:00am</p></header><div class="content"><p>Checking alignment good use case, which I did not consider. Not to turn<br>this into a swift-evolution topic, but couldn&#39;t this use case be covered by<br>adding functions to UnsafePointer? I&#39;m thinking something like this.<br></p><p>func distanceToBoundary(_ boundary: Int) -&gt; Distance {<br>    return Builtin.ptrtoint_Word(self._rawValue) % boundary<br>}<br></p><p>func isAlignedToBoundary(_ boundary: Int) -&gt; Boolean {<br>    return distanceToBoundary(boundary) == 0<br>}<br></p><p>I&#39;ll admit I don&#39;t have a lot of experience working with algorithms which<br>check pointer alignment. If you need a check that requires a more<br>complicated equation, then yeah, converting UnsafePointers to Ints is<br>probably the best solution. But if possible, it&#39;s probably best to avoid<br>requiring users to convert to int and back. They not only need to write<br>less code if UnsafePointers can take care of this for them, but it also<br>prevents subtle bugs they may write. (E.g. Converting 2 UnsafePointers to<br>UInts and then subtracting them to find the distance, but subtracting the<br>larger pointer from the smaller one).<br></p><p>On Tue, Dec 8, 2015 at 8:45 AM, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br></p><p>&gt; When writing high-performance code, it is fairly common to check the<br>&gt; alignment of pointers so that initial elements can be processed until some<br>&gt; suitable alignment is reached to use a faster implementation, or to verify<br>&gt; that a fast algorithm can be used.<br>&gt;<br>&gt; On Dec 8, 2015, at 10:59 AM, Michael Buckley via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m looking for a good starter project, so normally I would be interested<br>&gt; in taking this, but I&#39;m not sure I can think of a good motivation for it.<br>&gt; UnsafePointer&#39;s advanceBy and distanceTo functions take care of pointer<br>&gt; arithmetic more safely than converting to int would, and the<br>&gt; debugDescription property can get you the address for debugging purposes.<br>&gt;<br>&gt; Considering that everything that goes through the swift-evolution process<br>&gt; needs to have a motivation, is there a use case for this that I&#39;m not<br>&gt; thinking of?<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 4:45 PM, Dmitri Gribenko via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; The standard library has bitPattern initializers on pointers. But we<br>&gt;&gt; are missing initializers to create integers from pointers.<br>&gt;&gt;<br>&gt;&gt; Someone needs to propose these APIs, walk them through<br>&gt;&gt; swift-evolution, write a patch for the library and add tests.<br>&gt;&gt;<br>&gt;&gt; extension UInt {<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; extension Int {<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; https://bugs.swift.org/browse/SR-131<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/4e780956/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 03:00:00pm</p></header><div class="content"><p>The one I can think of is &quot;sometimes a C API only lets you pass data as an Int (intptr_t) or as an UnsafeMutablePointer (void *), and you have the other kind of data&quot;. That said, it does seem to be sort of a niche use case.<br></p><p>Jordan<br></p><p>&gt; On Dec 8, 2015, at 7:59, Michael Buckley via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m looking for a good starter project, so normally I would be interested in taking this, but I&#39;m not sure I can think of a good motivation for it. UnsafePointer&#39;s advanceBy and distanceTo functions take care of pointer arithmetic more safely than converting to int would, and the debugDescription property can get you the address for debugging purposes.<br>&gt; <br>&gt; Considering that everything that goes through the swift-evolution process needs to have a motivation, is there a use case for this that I&#39;m not thinking of?<br>&gt; <br>&gt; On Mon, Dec 7, 2015 at 4:45 PM, Dmitri Gribenko via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt; Hi everyone,<br>&gt; <br>&gt; The standard library has bitPattern initializers on pointers. But we<br>&gt; are missing initializers to create integers from pointers.<br>&gt; <br>&gt; Someone needs to propose these APIs, walk them through<br>&gt; swift-evolution, write a patch for the library and add tests.<br>&gt; <br>&gt; extension UInt {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; <br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; extension Int {<br>&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; <br>&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; https://bugs.swift.org/browse/SR-131 &lt;https://bugs.swift.org/browse/SR-131&gt;<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/50bd6f79/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ac6593beac2a4da1e518e5001dbb2adc?s=50"></div><header><strong>Starter project: Initializers for converting UnsafePointers to integers</strong> from <string>Michael Buckley</string> &lt;michael at buckleyisms.com&gt;<p>December  8, 2015 at 06:00:00pm</p></header><div class="content"><p>Yeah, that makes sense. If your C API requires an intptr_t, you can&#39;t solve<br>that problem by adding more functions to UnsafePointer. I&#39;ll go ahead and<br>start a discussion over on swift-evolution. Thanks!<br></p><p>On Tue, Dec 8, 2015 at 3:07 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; The one I can think of is &quot;sometimes a C API only lets you pass data as an<br>&gt; Int (intptr_t) or as an UnsafeMutablePointer (void *), and you have the<br>&gt; other kind of data&quot;. That said, it does seem to be sort of a niche use case.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt; On Dec 8, 2015, at 7:59, Michael Buckley via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m looking for a good starter project, so normally I would be interested<br>&gt; in taking this, but I&#39;m not sure I can think of a good motivation for it.<br>&gt; UnsafePointer&#39;s advanceBy and distanceTo functions take care of pointer<br>&gt; arithmetic more safely than converting to int would, and the<br>&gt; debugDescription property can get you the address for debugging purposes.<br>&gt;<br>&gt; Considering that everything that goes through the swift-evolution process<br>&gt; needs to have a motivation, is there a use case for this that I&#39;m not<br>&gt; thinking of?<br>&gt;<br>&gt; On Mon, Dec 7, 2015 at 4:45 PM, Dmitri Gribenko via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hi everyone,<br>&gt;&gt;<br>&gt;&gt; The standard library has bitPattern initializers on pointers. But we<br>&gt;&gt; are missing initializers to create integers from pointers.<br>&gt;&gt;<br>&gt;&gt; Someone needs to propose these APIs, walk them through<br>&gt;&gt; swift-evolution, write a patch for the library and add tests.<br>&gt;&gt;<br>&gt;&gt; extension UInt {<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;&gt;     self = UInt(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; extension Int {<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafePointer&lt;T&gt;) {<br>&gt;&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   init&lt;T&gt;(bitPattern: UnsafeMutablePointer&lt;T&gt;) {<br>&gt;&gt;     self = Int(Builtin.ptrtoint_Word(bitPattern._rawValue))<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; https://bugs.swift.org/browse/SR-131<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151208/1a09e206/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
