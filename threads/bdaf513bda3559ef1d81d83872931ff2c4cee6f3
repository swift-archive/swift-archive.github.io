<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>April 15, 2016 at 01:00:00pm</p></header><div class="content"><p>I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br></p><p>So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br></p><p>I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br></p><p>Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br></p><p>Thanks!<br></p><p>-tim<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 15, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Apr 15, 2016, at 1:24 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br>&gt; <br>&gt; So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br>&gt; <br>&gt; I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br>&gt; <br>&gt; Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br></p><p>What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>April 16, 2016 at 01:00:00pm</p></header><div class="content"><p>+CC Lang Hames (Just in case)<br>&gt; On Apr 15, 2016, at 6:45 PM, Joe Groff via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Apr 15, 2016, at 1:24 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br>&gt;&gt; <br>&gt;&gt; So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br>&gt;&gt; <br>&gt;&gt; I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br>&gt;&gt; <br>&gt;&gt; Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br>&gt; <br>&gt; What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160416/a2754917/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>April 16, 2016 at 02:00:00pm</p></header><div class="content"><p>What LLVM are you using?<br></p><p>You have to use the one from my github (and the arm branch) or it won&#39;t work:<br></p><p>https://github.com/hpux735/swift-llvm/tree/arm <br></p><p>I haven&#39;t had time to upstream the changes to LLVM.<br></p><p>- Will<br></p><p>&gt; On Apr 16, 2016, at 1:49 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; +CC Lang Hames (Just in case)<br>&gt;&gt; On Apr 15, 2016, at 6:45 PM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Apr 15, 2016, at 1:24 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/ &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt;&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br>&gt;&gt; <br>&gt;&gt; What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160416/80c74936/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>April 16, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 16, 2016, at 2:23 PM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt; <br>&gt; What LLVM are you using?<br>&gt; <br>&gt; You have to use the one from my github (and the arm branch) or it won&#39;t work:<br>&gt; <br>&gt; https://github.com/hpux735/swift-llvm/tree/arm &lt;https://github.com/hpux735/swift-llvm/tree/arm&gt; <br>&gt; <br>&gt; I haven&#39;t had time to upstream the changes to LLVM.<br></p><p>I am not actually involved in this discussion beyond ensuring that Lang who works in this area is aware of it.<br></p><p>&gt; <br>&gt; - Will<br>&gt; <br>&gt;&gt; On Apr 16, 2016, at 1:49 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +CC Lang Hames (Just in case)<br>&gt;&gt;&gt; On Apr 15, 2016, at 6:45 PM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Apr 15, 2016, at 1:24 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/ &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt;&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160416/36110c2d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>April 16, 2016 at 02:00:00pm</p></header><div class="content"><p>Lang is, he was helping me write the LLVM tests, but I&#39;m stacked at the moment.<br></p><p>&gt; On Apr 16, 2016, at 2:54 PM, Michael Gottesman &lt;mgottesman at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 16, 2016, at 2:23 PM, William Dillon &lt;william at housedillon.com &lt;mailto:william at housedillon.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What LLVM are you using?<br>&gt;&gt; <br>&gt;&gt; You have to use the one from my github (and the arm branch) or it won&#39;t work:<br>&gt;&gt; <br>&gt;&gt; https://github.com/hpux735/swift-llvm/tree/arm &lt;https://github.com/hpux735/swift-llvm/tree/arm&gt; <br>&gt;&gt; <br>&gt;&gt; I haven&#39;t had time to upstream the changes to LLVM.<br>&gt; <br>&gt; I am not actually involved in this discussion beyond ensuring that Lang who works in this area is aware of it.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Will<br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 16, 2016, at 1:49 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +CC Lang Hames (Just in case)<br>&gt;&gt;&gt;&gt; On Apr 15, 2016, at 6:45 PM, Joe Groff via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Apr 15, 2016, at 1:24 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was able to get Swift running on my Raspberry Pi using a variant of the instructions at &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/ &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt;&gt; but sadly the packages I’ve found haven’t been updated for Swift 2.2 (so things like `associatedtype` don’t work nicely between Mac and Linux).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; So, I thought I’d try building from source again hoping that the previous failure was resolved. But I’m still hitting the unimplemented relocation issue in LLVM’s RuntimeDyldELF.cpp, in RuntimeDyldELF::resolveARMRelocation(), where the relocation type that is being requested is R_ARM_GOT_PREL.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I thought I read in my last go-round on this that this was a regression in LLVM, but I’m not finding a pointer to this now, so maybe I’m misremembering.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is there a trick to avoiding this issue in LLVM, or an existing patch somewhere that I can cherry-pick?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160416/89819731/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>April 17, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 16, 2016, at 2:23 PM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt; <br>&gt; What LLVM are you using?<br>&gt; <br>&gt; You have to use the one from my github (and the arm branch) or it won&#39;t work:<br>&gt; <br>&gt; https://github.com/hpux735/swift-llvm/tree/arm &lt;https://github.com/hpux735/swift-llvm/tree/arm&gt; <br>&gt; <br>&gt; I haven&#39;t had time to upstream the changes to LLVM.<br>&gt; <br>&gt; - Will<br></p><p><br>Ah, thanks! I was using &lt;https://github.com/apple/swift-llvm/tree/swift-2.2-branch &lt;https://github.com/apple/swift-llvm/tree/swift-2.2-branch&gt;&gt;, but will give your fork a try!<br></p><p>-tim<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160417/5349c220/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>April 17, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;ll join in Tim and try compiling again on the BeagleX15, it failed the other day but I forgot about using Wills LLVM<br></p><p>Joe<br></p><p>&gt; On Apr 17, 2016, at 3:46 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 16, 2016, at 2:23 PM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What LLVM are you using?<br>&gt;&gt; <br>&gt;&gt; You have to use the one from my github (and the arm branch) or it won&#39;t work:<br>&gt;&gt; <br>&gt;&gt; https://github.com/hpux735/swift-llvm/tree/arm <br>&gt;&gt; <br>&gt;&gt; I haven&#39;t had time to upstream the changes to LLVM.<br>&gt;&gt; <br>&gt;&gt; - Will<br>&gt; <br>&gt; <br>&gt; Ah, thanks! I was using &lt;https://github.com/apple/swift-llvm/tree/swift-2.2-branch&gt;, but will give your fork a try!<br>&gt; <br>&gt; -tim<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160417/ac2ace8e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06130940a44c84dfc6c5aeabfd8482f8?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Timothy Wood</string> &lt;tjw at me.com&gt;<p>April 17, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Apr 17, 2016, at 1:46 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 16, 2016, at 2:23 PM, William Dillon &lt;william at housedillon.com &lt;mailto:william at housedillon.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; What LLVM are you using?<br>&gt;&gt; <br>&gt;&gt; You have to use the one from my github (and the arm branch) or it won&#39;t work:<br>&gt;&gt; <br>&gt;&gt; https://github.com/hpux735/swift-llvm/tree/arm &lt;https://github.com/hpux735/swift-llvm/tree/arm&gt; <br>&gt;&gt; <br>&gt;&gt; I haven&#39;t had time to upstream the changes to LLVM.<br>&gt;&gt; <br>&gt;&gt; - Will<br>&gt; <br>&gt; <br>&gt; Ah, thanks! I was using &lt;https://github.com/apple/swift-llvm/tree/swift-2.2-branch &lt;https://github.com/apple/swift-llvm/tree/swift-2.2-branch&gt;&gt;, but will give your fork a try!<br>&gt; <br>&gt; -tim<br>&gt; <br></p><p>I reset my Pi 3 to a fresh install of Jessie (2016-03-18), did the clang-3.6 install from &lt;http://dev.iachieved.it/iachievedit/open-source-swift-on-raspberry-pi-2/&gt; and tried building with the above mentioned branch of llvm. This fixed the spurious build failures I was seeing, but I’m hitting a persistent build failure now:<br></p><p>[939/1818] Building CXX object tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/ClangAttrEmitter.cpp.o<br>FAILED: /usr/bin/clang++-3.6   -DCLANG_ENABLE_ARCMT -DCLANG_ENABLE_OBJC_REWRITER -DCLANG_ENABLE_STATIC_ANALYZER -DGTEST_HAS_RTTI=0 -D_DEBUG -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Itools/clang/utils/TableGen -I/home/pi/Source/Swift/llvm/tools/clang/utils/TableGen -I/home/pi/Source/Swift/llvm/tools/clang/include -Itools/clang/include -Iinclude -I/home/pi/Source/Swift/llvm/include -fno-stack-protector -fPIC -fvisibility-inlines-hidden -Wall -W -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wcovered-switch-default -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -std=c++11 -fcolor-diagnostics -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -Wno-nested-anon-types -O3    -UNDEBUG  -fno-exceptions -fno-rtti -MMD -MT tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/ClangAttrEmitter.cpp.o -MF tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/ClangAttrEmitter.cpp.o.d -o tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/ClangAttrEmitter.cpp.o -c /home/pi/Source/Swift/llvm/tools/clang/utils/TableGen/ClangAttrEmitter.cpp<br>/home/pi/Source/Swift/llvm/tools/clang/utils/TableGen/ClangAttrEmitter.cpp:1075:23: error: no viable conversion from &#39;ArrayRef&lt;std::pair&lt;Record *, SMRange&gt;&gt;&#39; to &#39;ArrayRef&lt;llvm::Record *&gt;&#39;<br>    ArrayRef&lt;Record*&gt; Bases = Search-&gt;getSuperClasses();<br>                      ^       ~~~~~~~~~~~~~~~~~~~~~~~~~<br>/home/pi/Source/Swift/llvm/include/llvm/ADT/ArrayRef.h:32:9: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from &#39;ArrayRef&lt;std::pair&lt;Record *, SMRange&gt; &gt;&#39; to &#39;const llvm::ArrayRef&lt;llvm::Record *&gt; &amp;&#39; for 1st argument<br>  class ArrayRef {<br>        ^<br>/home/pi/Source/Swift/llvm/include/llvm/ADT/ArrayRef.h:32:9: note: candidate constructor (the implicit move constructor) not viable: no known conversion from &#39;ArrayRef&lt;std::pair&lt;Record *, SMRange&gt; &gt;&#39; to &#39;llvm::ArrayRef&lt;llvm::Record *&gt; &amp;&amp;&#39; for 1st argument<br>  class ArrayRef {<br>...<br></p><p>I might try again tomorrow updating to a newer clang build, or maybe I should just wave the white flag and rewrite my tiny codebase in C++ instead of trying to use Swift here, and wait for it to be a bit more stable/supported.<br></p><p>-tim<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160417/789510bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>April 19, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Apr 17, 2016, at 11:33 PM, Timothy Wood via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I might try again tomorrow updating to a newer clang build, or maybe I should just wave the white flag and rewrite my tiny codebase in C++ instead of trying to use Swift here, and wait for it to be a bit more stable/supported.<br></p><p><br>FWIW, last night I tried taking the current swift-llvm swift-2.2.branch and cherry picking your ARM_REL32/GOT_PREL patch atop it. This got *much* further through the build, but eventually failed while building the  Swift standard library:<br></p><p>swift: /home/pi/Source/Swift/llvm/include/llvm/ADT/PointerIntPair.h:114: void llvm::PointerIntPair&lt;swift::ProtocolConformance *, 2, swift::ConformanceKind, llvm::PointerLikeTypeTraits&lt;swift::ProtocolConformance *&gt; &gt;::setPointerAndInt(PointerTy, IntType) [PointerTy = swift::ProtocolConformance *, IntBits = 2, IntType = swift::ConformanceKind, PtrTraits = llvm::PointerLikeTypeTraits&lt;swift::ProtocolConformance *&gt;]: Assertion `(PtrWord &amp; ~PointerBitMask) == 0 &amp;&amp; &quot;Pointer is not sufficiently aligned&quot;&#39; failed.<br>…<br>1.	While type-checking &#39;EnumerateSequence&#39; at /home/pi/Source/Swift/swift/stdlib/public/core/Algorithm.swift:192:8<br>ninja: build stopped: subcommand failed.<br></p><p><br>-tim<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9d9d4c769b20cd12b15f4e5b991b4ca5?s=50"></div><header><strong>R_ARM_GOT_PREL error when building Swift on Pi from source</strong> from <string>Timothy J. Wood</string> &lt;tjw at omnigroup.com&gt;<p>April 17, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Apr 15, 2016, at 6:45 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; What linker are you using? GNU ld 2.26 in particular changed the behavior of protected visibility in a way that&#39;s incompatible with our usage, and we haven&#39;t fully implemented a workaround. You might try using gold or an older binutils, if that&#39;s what you&#39;re currently using.<br></p><p>I could have sworn I was using gold, but looking at my logs it was using the standard linker. Perhaps I’m remembering an attempt from the Swift 3 sources… Anyway, my current attempts are using this invocation now (though I’m getting other failures now):<br></p><p>	utils/build-script -t -R  -j 4 -- --use-gold-linker<br></p><p>Thanks!<br></p><p>-tim<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
