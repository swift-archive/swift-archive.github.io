<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Proposal] A more liberal placement of defer</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt;And simple functions like fibonacci I would just write without using `defer` at all - it&#39;s just confusing to use `defer` and `inout` in this case IMO.<br>&gt; <br>&gt; /// Calculates the n&#39;th fibonacci number. (n&gt;= 1)<br>&gt; func fibonacci(n: Int) -&gt;Int {<br>&gt; var a = 0<br>&gt; var b = 1<br>&gt; for _ in 1...n {<br>&gt; (a,b)=(b, a+b)<br>&gt; }<br>&gt; return a<br>&gt; }<br></p><p>This is simply a function to calculate the n-th Fibonacci number, though. The original code constructed a sequence.<br></p><p>&gt; Hi,<br>&gt; <br>&gt; you may think of `defer` as a function that pushes a block onto an implicit cleanup stack that is part of every lexical closure. On each scope exit, all blocks from its cleanup stack are popped and executed.<br>&gt; <br>&gt; E.g.:<br>&gt; <br>&gt; func f(x: Int) {<br>&gt; defer { print(&quot;A&quot;); }<br>&gt; defer { print(&quot;B&quot;); }<br>&gt; if x == 3 {<br>&gt; return<br>&gt; }<br>&gt; defer { print(&quot;C&quot;); }<br>&gt; }<br>&gt; <br>&gt; So, f(2) will print &quot;CBA&quot;, but f(3) will print &quot;BA&quot; instead. Furthermore, this will change semantics and break the following code:<br>&gt; <br>&gt; func g(x: Int) {<br>&gt; defer { print(&quot;A&quot;); }<br>&gt; let b: Int<br>&gt; if x == 3 {<br>&gt; return<br>&gt; } else {<br>&gt; b = x<br>&gt; }<br>&gt; defer { print(&quot;b is \(b)&quot;) }<br>&gt; }<br>&gt; <br>&gt; In the code above, b is only defined if x is not 3. If x is 3, the last `defer` block cannot be called, and that code would no longer compile.<br>&gt; <br>&gt; So I think the current language behavior is more powerful. `defer` is usually used to do cleanup work, and it is called near the place where some resource is initialized. Putting a `defer` block to the end of a function kinda defeats its purpose. And simple functions like fibonacci I would just write without using `defer` at all - it&#39;s just confusing to use `defer` and `inout` in this case IMO.<br>&gt; <br>&gt; /// Calculates the n&#39;th fibonacci number. (n&gt;= 1)<br>&gt; func fibonacci(n: Int) -&gt;Int {<br>&gt; var a = 0<br>&gt; var b = 1<br>&gt; for _ in 1...n {<br>&gt; (a,b)=(b, a+b)<br>&gt; }<br>&gt; return a<br>&gt; }<br>&gt; <br>&gt; Regards,<br>&gt; Michael<br>&gt; <br>&gt; <br>&gt; &gt; Am 06.06.2016 um 21:50 schrieb donny wals via swift-evolution&lt;swift-evolution at swift.org&gt;:<br>&gt; &gt; <br>&gt; &gt; Hi,<br>&gt; &gt; <br>&gt; &gt; When we’re using defer we write some code that we want to execute the moment a scope exits.<br>&gt; &gt; This leads to code that could read like:<br>&gt; &gt; <br>&gt; &gt; let fibonacci = sequence(state: (0, 1)) { (pair: inout (Int, Int)) -&gt;Int in<br>&gt; &gt; defer { pair = (pair.1, pair.0 + pair.1) }<br>&gt; &gt; return pair.0<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; What I find strange about this is that we have to write the code that we want to execute after the return before the return.<br>&gt; &gt; <br>&gt; &gt; I’d like to propose a change to defer that would allow the above code to be written as:<br>&gt; &gt; <br>&gt; &gt; let fibonacci = sequence(state: (0, 1)) { (pair: inout (Int, Int)) -&gt;Int in<br>&gt; &gt; return pair.0<br>&gt; &gt; defer { pair = (pair.1, pair.0 + pair.1) }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; This would make the intent of the code more clear (return first, then mutate state). Not all cases can benefit from this change, but anytime you exit a scope using a return I think it might be more clear to define the defer after the return. The code would more closely mirror the intent of the code.<br>&gt; &gt; <br>&gt; &gt; A rule of thumb I’ve come up with for this is that whenever you’re using return to exit a scope, any defer in that same scope should be executed regardless of it’s position in that same scope. This proposal would supplement the way defer currently works.<br>&gt; &gt; <br>&gt; &gt; What do you all think?<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
