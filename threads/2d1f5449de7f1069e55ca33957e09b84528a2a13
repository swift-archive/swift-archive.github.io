<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d89e1da750afc5b531c06311b8a75d4?s=50"></div><header><strong>Draft idea about user defined annotation and processor</strong> from <string>Steve K. Chiu</string> &lt;steve.k.chiu at gmail.com&gt;<p>March 23, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>This is yet another idea had been discussed but had no real conclusion. I<br>find this could be very useful for the framework developers, here is my<br>draft proposal.<br></p><p>First I should explain why this is useful for framework developers, let&#39;s<br>take some example:<br></p><p>1. add annotation to class to generate extension for JSON parsing and<br>serialization.<br>2. add annotation to property or function to generate glue code for<br>exporting to Lua script.<br>3. add annotation to function or class to generate c/objective-c and java<br>source for bridge JNI call.<br>4. add annotation to function or class to generate objective-c++ glue for<br>bridge c++ call.<br>5. add annotation to function or class to dynamically bind shared library<br>6. add annotation to class to generate stub/skeleton call for your favorite<br>RPC framework<br>7. add annotation to class to generate stub call for your favorite database<br>framework<br>8. etc... anything that can be systematically generated<br></p><p>Some of the problem can be solved with generic function, but many are not,<br>especially swift generic is a bit limited compared to C++ template.<br></p><p>Traditionally user defined annotation are for declaration only, and<br>basically a runtime feature that paired with reflection.<br>I did not find this arrangement particularly useful, and actually have some<br>shortcoming:<br></p><p>1. you need to actually store the annotation in final binary<br>2. it would help reverse engineering/hacking<br>3. runtime reflection is slow<br></p><p>So, why not just make the annotation and processing a compile time feature?<br></p><p>Application developer (user of framework) can annotation the source, the<br>annotation processor (written by framework developer) can read the<br>annotation and generate source code for further compile (not necessary<br>limited to generate swift only)<br></p><p>Of course, there are many difficulty with this approach, you have to revise<br>the compile processing pipe-line, build/make tool need to be revised too,<br>etc... But I think it did bring a lot of value to swift, especially when<br>you need to integrate swift with external framework or service.<br></p><p>There are many things need to be done to implement this feature:<br></p><p>1. Syntax for annotation, I would suggest:<br></p><p>@[ MyAnnotation1(), MyAnnotation2(option: &quot;xxx&quot;, force: false) ]<br></p><p>It looks like old-time objective-c array, each element is an instance of<br>sub-class of Swift.Annotation, you can attach it alongside with built-in<br>annotation.<br></p><p>2. The processor should implement protocol Swift.AnnotationProcessor&lt;T:<br>Swift.Annotation&gt; , the protocol contract need to be determined later.<br></p><p>3. Need a way to forward declare function, so the annotation processor can<br>emit function implementation later.<br></p><p>4. Need a way to represent the class/method/etc code model for annotation<br>processor, much like reflection interface, but for compile time and with<br>declaration only.<br></p><p>5. And we need to divide compile pipeline into at least two phase, etc..<br></p><p>Anyway, we can always discuss the implementation later, giving all these<br>difficulties, I want to know your opinion about this arrangement and is it<br>worth the trouble? What do you think?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/2d1f2a13/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Draft idea about user defined annotation and processor</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 23, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; So, why not just make the annotation and processing a compile time feature?<br></p><p>Because what you are describing is a macro system, which would be out of scope for Swift 3. &lt;https://github.com/apple/swift-evolution#out-of-scope&gt;<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
