<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Proposal draft] Introducing `indexed()` collections</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>on Mon Oct 03 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Sep 30, 2016, at 08:53 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; on Wed Sep 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; Indices have a specific, fixed meaning in Swift, which are used to create valid collection<br>&gt;&gt; &gt; subscripts. This proposal introduces indexed() to produce a more semantically relevant sequence<br>&gt; by<br>&gt;<br>&gt;&gt; &gt; pairing a collection&#39;s indices with its members. While it is trivial to create a solution in Swift,<br>&gt;&gt; &gt; the most common developer approach shown here calculates indexes twice:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; extension Collection {<br>&gt;&gt; &gt;     /// Returns a sequence of pairs (*idx*, *x*), where *idx* represents a<br>&gt;&gt; &gt;     /// consecutive collection index, and *x* represents an element of<br>&gt;&gt; &gt;     /// the sequence.<br>&gt;&gt; &gt;     func indexed() -&gt; Zip2Sequence&lt;Self.Indices, Self&gt; {<br>&gt;&gt; &gt;         return zip(indices, self)<br>&gt;&gt; &gt;     }<br>&gt;&gt; &gt; }<br>&gt;&gt; <br>&gt;&gt; How does this calculate indices twice?<br>&gt;<br>&gt; It calculates indices twice for any collection that uses<br>&gt; IndexingIterator as its iterator. <br></p><p>Yes.  Not in general; just in that particular case.<br></p><p>&gt; And for collections that doesn&#39;t, it still does the moral equivalent,<br>&gt; because it&#39;s calculating an index offset along with whatever work the<br>&gt; Iterator does to calculate the next element.<br></p><p>Indexing is supposed to be cheap; almost free.  Lazy filtered<br>collections are an anomaly.  They&#39;re arguably not even legal<br>Collections, because advancing an index may not be O(1).  They exist<br>because they&#39;re useful, but you shouldn&#39;t pass them out without<br>understanding the consequences.<br></p><p>&gt; As an example, if my collection is `someArray.lazy.filter(…)` then<br>&gt; zip(col.indices, col) will run the filter twice over the collection.<br></p><p>Okay.<br></p><p>&gt;&gt; &gt; Incrementing an index in some collections can be unnecessarily<br>&gt;&gt; &gt; costly. <br>&gt;&gt; <br>&gt;&gt; Seems like it&#39;s only *unnecessarily* costly in badly implemented<br>&gt;&gt; collections?<br>&gt;<br>&gt; A collection doesn&#39;t have to be badly-implemented to have a<br>&gt; non-trivial cost for calculating the next element. <br>&gt; As above, someArray.lazy.filter(…) is a good example of such a<br>&gt; collection.<br></p><p>Its conformance to Collection is quite sketchy.<br></p><p>&gt;&gt; &gt; In a lazy filtered collection, an index increment is potentially<br>&gt;&gt; &gt; O(N). We feel this is better addressed introducing a new function into<br>&gt;&gt; &gt; the Standard Library to provide a more efficient design that avoids<br>&gt;&gt; &gt; the attractive nuisance of the &quot;obvious&quot; solution.<br>&gt;&gt; <br>&gt;&gt; I am generally opposed to adding this.  The usual solution developers<br>&gt;&gt; will reach for here is:<br>&gt;&gt; <br>&gt;&gt;     for i in x.indices {<br>&gt;&gt;         somethingWith(x[i])<br>&gt;&gt;     }<br>&gt;&gt; <br>&gt;&gt; zip(indices, self) is only suboptimal for lazy filtered sequences, which<br>&gt;&gt; should be used with care anyhow (see the note here:<br>&gt;&gt; http://swiftdoc.org/v3.0/type/LazyFilterCollection/).<br>&gt;<br>&gt; It&#39;s suboptimal for any collection with a non-trivial index.<br></p><p>Which should be an exceedingly rare thing.<br></p><p>&gt;&gt; If you really need a lazy sequence of pairs that&#39;s optimal with lazy<br>&gt;&gt; filtered sequences, <br>&gt;&gt; <br>&gt;&gt;     x.indices.lazy.map { ($0, x[$0]) }<br>&gt;&gt; <br>&gt;&gt; is a good solution and pretty easy to write.<br>&gt;<br>&gt; And yet people will write zip(x.indices, x) instead because it&#39;s<br>&gt; shorter and not immediately obvious that it may be suboptimal<br>&gt; depending on the collection.<br>&gt;<br>&gt; Why are you opposed to adding this? <br></p><p>Mostly because it&#39;s additional API complexity, the usefulness appears to<br>be marginal, and it&#39;s optimizing for what should be a rare corner case<br>(collections that don&#39;t conform to efficiency expectations).<br></p><p>I&#39;m not dead-set against adding it, but ATM it doesn&#39;t seem like there<br>are important use-cases that will benefit substantially from having it.<br>Convince me this is addressing a real need, and we&#39;ll talk.  In phase 2<br>:-).<br></p><p>&gt; The ability to work around its lack doesn&#39;t mean it doesn&#39;t have<br>&gt; value, and the fact that the simplest workaround is not the best one<br>&gt; is I think a good reason to make the easiest solution into the best<br>&gt; one (by providing .indexed()). Add to that the fact that a lot of<br>&gt; people probably use .enumerated() to produce indexes when working with<br>&gt; arrays, and this is a pitfall when working with other types, such as<br>&gt; ArraySlice which still has Int indexes but is no longer zero-based.<br></p><p>I am also concerned about introducing confusion around the difference<br>from enumerated().  These methods will have identical semantics for<br>Array.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Introducing `indexed()` collections</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  3, 2016 at 05:00:00pm</p></header><div class="content"><p>On Mon, Oct 3, 2016, at 02:51 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; <br>&gt; on Mon Oct 03 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On Fri, Sep 30, 2016, at 08:53 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; on Wed Sep 28 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; &gt; Indices have a specific, fixed meaning in Swift, which are used to create valid collection<br>&gt; &gt;&gt; &gt; subscripts. This proposal introduces indexed() to produce a more semantically relevant sequence<br>&gt; &gt; by<br>&gt; &gt;<br>&gt; &gt;&gt; &gt; pairing a collection&#39;s indices with its members. While it is trivial to create a solution in Swift,<br>&gt; &gt;&gt; &gt; the most common developer approach shown here calculates indexes twice:<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt; &gt; extension Collection {<br>&gt; &gt;&gt; &gt;     /// Returns a sequence of pairs (*idx*, *x*), where *idx* represents a<br>&gt; &gt;&gt; &gt;     /// consecutive collection index, and *x* represents an element of<br>&gt; &gt;&gt; &gt;     /// the sequence.<br>&gt; &gt;&gt; &gt;     func indexed() -&gt; Zip2Sequence&lt;Self.Indices, Self&gt; {<br>&gt; &gt;&gt; &gt;         return zip(indices, self)<br>&gt; &gt;&gt; &gt;     }<br>&gt; &gt;&gt; &gt; }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; How does this calculate indices twice?<br>&gt; &gt;<br>&gt; &gt; It calculates indices twice for any collection that uses<br>&gt; &gt; IndexingIterator as its iterator. <br>&gt; <br>&gt; Yes.  Not in general; just in that particular case.<br>&gt; <br>&gt; &gt; And for collections that doesn&#39;t, it still does the moral equivalent,<br>&gt; &gt; because it&#39;s calculating an index offset along with whatever work the<br>&gt; &gt; Iterator does to calculate the next element.<br>&gt; <br>&gt; Indexing is supposed to be cheap; almost free.  Lazy filtered<br>&gt; collections are an anomaly.  They&#39;re arguably not even legal<br>&gt; Collections, because advancing an index may not be O(1).  They exist<br>&gt; because they&#39;re useful, but you shouldn&#39;t pass them out without<br>&gt; understanding the consequences.<br></p><p>Using an index is supposed to be cheap/free. Calculating the next index is not guaranteed to be so. If you want another example of something that&#39;s not lazy, try String.CharacterView. Calculating the next index may be arbitrarily complex since I can string as many combining marks together as I want, though in practice it will be pretty cheap. But even this &quot;pretty cheap&quot; is still work, and depending on what I&#39;m doing in the loop, calculating character indexes may be a significant fraction of the work performed.<br></p><p>&gt; &gt; As an example, if my collection is `someArray.lazy.filter(…)` then<br>&gt; &gt; zip(col.indices, col) will run the filter twice over the collection.<br>&gt; <br>&gt; Okay.<br>&gt; <br>&gt; &gt;&gt; &gt; Incrementing an index in some collections can be unnecessarily<br>&gt; &gt;&gt; &gt; costly. <br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Seems like it&#39;s only *unnecessarily* costly in badly implemented<br>&gt; &gt;&gt; collections?<br>&gt; &gt;<br>&gt; &gt; A collection doesn&#39;t have to be badly-implemented to have a<br>&gt; &gt; non-trivial cost for calculating the next element. <br>&gt; &gt; As above, someArray.lazy.filter(…) is a good example of such a<br>&gt; &gt; collection.<br>&gt; <br>&gt; Its conformance to Collection is quite sketchy.<br></p><p>But it&#39;s not the only collection where calculating indexes is non-trivial.<br></p><p>-Kevin Ballard<br></p><p>&gt; &gt;&gt; &gt; In a lazy filtered collection, an index increment is potentially<br>&gt; &gt;&gt; &gt; O(N). We feel this is better addressed introducing a new function into<br>&gt; &gt;&gt; &gt; the Standard Library to provide a more efficient design that avoids<br>&gt; &gt;&gt; &gt; the attractive nuisance of the &quot;obvious&quot; solution.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I am generally opposed to adding this.  The usual solution developers<br>&gt; &gt;&gt; will reach for here is:<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;     for i in x.indices {<br>&gt; &gt;&gt;         somethingWith(x[i])<br>&gt; &gt;&gt;     }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; zip(indices, self) is only suboptimal for lazy filtered sequences, which<br>&gt; &gt;&gt; should be used with care anyhow (see the note here:<br>&gt; &gt;&gt; http://swiftdoc.org/v3.0/type/LazyFilterCollection/).<br>&gt; &gt;<br>&gt; &gt; It&#39;s suboptimal for any collection with a non-trivial index.<br>&gt; <br>&gt; Which should be an exceedingly rare thing.<br>&gt; <br>&gt; &gt;&gt; If you really need a lazy sequence of pairs that&#39;s optimal with lazy<br>&gt; &gt;&gt; filtered sequences, <br>&gt; &gt;&gt; <br>&gt; &gt;&gt;     x.indices.lazy.map { ($0, x[$0]) }<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; is a good solution and pretty easy to write.<br>&gt; &gt;<br>&gt; &gt; And yet people will write zip(x.indices, x) instead because it&#39;s<br>&gt; &gt; shorter and not immediately obvious that it may be suboptimal<br>&gt; &gt; depending on the collection.<br>&gt; &gt;<br>&gt; &gt; Why are you opposed to adding this? <br>&gt; <br>&gt; Mostly because it&#39;s additional API complexity, the usefulness appears to<br>&gt; be marginal, and it&#39;s optimizing for what should be a rare corner case<br>&gt; (collections that don&#39;t conform to efficiency expectations).<br>&gt; <br>&gt; I&#39;m not dead-set against adding it, but ATM it doesn&#39;t seem like there<br>&gt; are important use-cases that will benefit substantially from having it.<br>&gt; Convince me this is addressing a real need, and we&#39;ll talk.  In phase 2<br>&gt; :-).<br>&gt; <br>&gt; &gt; The ability to work around its lack doesn&#39;t mean it doesn&#39;t have<br>&gt; &gt; value, and the fact that the simplest workaround is not the best one<br>&gt; &gt; is I think a good reason to make the easiest solution into the best<br>&gt; &gt; one (by providing .indexed()). Add to that the fact that a lot of<br>&gt; &gt; people probably use .enumerated() to produce indexes when working with<br>&gt; &gt; arrays, and this is a pitfall when working with other types, such as<br>&gt; &gt; ArraySlice which still has Int indexes but is no longer zero-based.<br>&gt; <br>&gt; I am also concerned about introducing confusion around the difference<br>&gt; from enumerated().  These methods will have identical semantics for<br>&gt; Array.<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
