<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 14, 2015 at 11:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I’m investigating this bug: https://bugs.swift.org/browse/SR-186<br></p><p>Which appears to be a result of the fact that the logic that determines if an operator is prefix/postfix/binary does not treat comments as whitespace. So, for example:<br></p><p>/* comment */!foo<br></p><p>does not lex as expected because the “!&quot; thinks it has an something on both sides and so is treated as a binary operator. <br></p><p>Fixing this (by treating comments as whitespace here) will break existing code which relies on the current behavior, such as:<br></p><p>foo/* comment */!<br></p><p>which currently treats the “!” as a postfix operator but will change to binary. I expect these cases would be rare (maybe in some generated code?), but the results might be pretty confusing. <br></p><p>Any objections to fixing this or other thoughts? <br></p><p>Thanks,<br>Jesse<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/176a7f92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 14, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 8:15 PM, Jesse Rusak via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I’m investigating this bug: https://bugs.swift.org/browse/SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;<br>&gt; <br>&gt; Which appears to be a result of the fact that the logic that determines if an operator is prefix/postfix/binary does not treat comments as whitespace. So, for example:<br>&gt; <br>&gt; /* comment */!foo<br>&gt; <br>&gt; does not lex as expected because the “!&quot; thinks it has an something on both sides and so is treated as a binary operator. <br>&gt; <br>&gt; Fixing this (by treating comments as whitespace here) will break existing code which relies on the current behavior, such as:<br>&gt; <br>&gt; foo/* comment */!<br>&gt; <br>&gt; which currently treats the “!” as a postfix operator but will change to binary. I expect these cases would be rare (maybe in some generated code?), but the results might be pretty confusing. <br>&gt; <br>&gt; Any objections to fixing this or other thoughts? <br></p><p>There are two defensible models here:<br></p><p>1) comments should be treated as whitespace.<br>2) comments should be treated as if they were not present.<br></p><p>The later model seems more ideal to me (because you can put whitespace on either side of the comment after all), but I don’t have a strong opinion about that.  What do others think?<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/394d2ef9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0ab9e40f73106b42eaa9724c02b6ad8?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>Simon Pilkington</string> &lt;simonmpilkington at icloud.com&gt;<p>December 14, 2015 at 09:00:00pm</p></header><div class="content"><p>It seems to make more sense to treat comments as this if they are not present.<br></p><p>As a related question, should the presence/absence of whitespace be important at all? It seems fragile if it is.<br></p><p>-Simon<br></p><p><br>&gt; On 14 Dec 2015, at 9:42 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 14, 2015, at 8:15 PM, Jesse Rusak via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I’m investigating this bug: https://bugs.swift.org/browse/SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;<br>&gt;&gt; <br>&gt;&gt; Which appears to be a result of the fact that the logic that determines if an operator is prefix/postfix/binary does not treat comments as whitespace. So, for example:<br>&gt;&gt; <br>&gt;&gt; /* comment */!foo<br>&gt;&gt; <br>&gt;&gt; does not lex as expected because the “!&quot; thinks it has an something on both sides and so is treated as a binary operator. <br>&gt;&gt; <br>&gt;&gt; Fixing this (by treating comments as whitespace here) will break existing code which relies on the current behavior, such as:<br>&gt;&gt; <br>&gt;&gt; foo/* comment */!<br>&gt;&gt; <br>&gt;&gt; which currently treats the “!” as a postfix operator but will change to binary. I expect these cases would be rare (maybe in some generated code?), but the results might be pretty confusing. <br>&gt;&gt; <br>&gt;&gt; Any objections to fixing this or other thoughts? <br>&gt; <br>&gt; There are two defensible models here:<br>&gt; <br>&gt; 1) comments should be treated as whitespace.<br>&gt; 2) comments should be treated as if they were not present.<br>&gt; <br>&gt; The later model seems more ideal to me (because you can put whitespace on either side of the comment after all), but I don’t have a strong opinion about that.  What do others think?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/c688ceb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 14, 2015 at 11:00:00pm</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 9:51 PM, Simon Pilkington &lt;simonmpilkington at icloud.com&gt; wrote:<br>&gt; <br>&gt; It seems to make more sense to treat comments as this if they are not present.<br>&gt; <br>&gt; As a related question, should the presence/absence of whitespace be important at all? It seems fragile if it is.<br></p><p>The current design depends on whitespace to decide whether an operator is infix, postfix, or prefix.  It can be surprising to some folks when they first encounter it, but IMO it encourages more maintainable code to be written.<br></p><p>The one thing that I’d love to see fixed is to enhance the error produced for things like:<br></p><p>	let x = y*-z<br></p><p>to produce a fixit, which rewrites it as:<br></p><p>	let x = y * -z<br></p><p>-Chris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9c72f152ed52fbbdb5f174ad2e1e7b0a?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>John Calsbeek</string> &lt;john.calsbeek+lists at gmail.com&gt;<p>December 14, 2015 at 10:00:00pm</p></header><div class="content"><p>If you treat comments as though they are not present, you can no longer reason locally about whitespace on either side of an operator. Straw example:<br></p><p>foo/* insert an<br>excerpt from War<br>and Peace here */!<br></p><p>I need to scan to the other side of the comment to determine if ! is preceded by whitespace.<br></p><p>There is already a list of situations in which some token is treated as whitespace for the purpose of operators in The Swift Programming Language:<br></p><p>For the purposes of these rules, the characters (, [, and { before an operator, the characters ), ], and } after an operator, and the characters ,, ;, and : are also considered whitespace.<br></p><p>There is one caveat to the rules above. If the ! or ? predefined operator has no whitespace on the left, it is treated as a postfix operator, regardless of whether it has whitespace on the right. To use the ? as the optional-chaining operator, it must not have whitespace on the left. To use it in the ternary conditional (? :) operator, it must have whitespace around both sides.<br></p><p>Given that, it seems more natural to me to define comments as “treated-as-whitespace” in the same way.<br></p><p>“Treated as not present” is also not quite the right way to word the opposite case, since comments would still separate tokens. Say you had an automated tool that deletes comments (perhaps unlikely, but let’s roll with it). “Treated as not present” says you should completely delete the comment, but that doesn’t actually work since it could still cause two separate tokens to be glued together. “Treated as whitespace” just means that you have to replace the comment with at least one character of whitespace.<br></p><p>-John<br></p><p>&gt; On Dec 14, 2015, at 9:42 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Dec 14, 2015, at 8:15 PM, Jesse Rusak via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I’m investigating this bug: https://bugs.swift.org/browse/SR-186 &lt;https://bugs.swift.org/browse/SR-186&gt;<br>&gt;&gt; <br>&gt;&gt; Which appears to be a result of the fact that the logic that determines if an operator is prefix/postfix/binary does not treat comments as whitespace. So, for example:<br>&gt;&gt; <br>&gt;&gt; /* comment */!foo<br>&gt;&gt; <br>&gt;&gt; does not lex as expected because the “!&quot; thinks it has an something on both sides and so is treated as a binary operator. <br>&gt;&gt; <br>&gt;&gt; Fixing this (by treating comments as whitespace here) will break existing code which relies on the current behavior, such as:<br>&gt;&gt; <br>&gt;&gt; foo/* comment */!<br>&gt;&gt; <br>&gt;&gt; which currently treats the “!” as a postfix operator but will change to binary. I expect these cases would be rare (maybe in some generated code?), but the results might be pretty confusing. <br>&gt;&gt; <br>&gt;&gt; Any objections to fixing this or other thoughts? <br>&gt; <br>&gt; There are two defensible models here:<br>&gt; <br>&gt; 1) comments should be treated as whitespace.<br>&gt; 2) comments should be treated as if they were not present.<br>&gt; <br>&gt; The later model seems more ideal to me (because you can put whitespace on either side of the comment after all), but I don’t have a strong opinion about that.  What do others think?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/7752c85e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>Breaking change in lexing operators next to comments</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>December 15, 2015 at 07:00:00pm</p></header><div class="content"><p>&gt;&gt; On Dec 14, 2015, at 9:42 PM, Chris Lattner via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br></p><p>&gt;&gt; There are two defensible models here:<br>&gt;&gt; <br>&gt;&gt; 1) comments should be treated as whitespace.<br>&gt;&gt; 2) comments should be treated as if they were not present.<br>&gt;&gt; <br>&gt;&gt; The later model seems more ideal to me (because you can put whitespace on either side of the comment after all), but I don’t have a strong opinion about that.  What do others think?<br></p><p>&gt; <br>&gt; On Dec 15, 2015, at 1:08 AM, John Calsbeek via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; If you treat comments as though they are not present, you can no longer reason locally about whitespace on either side of an operator. Straw example:<br>&gt; <br>&gt; foo/* insert an<br>&gt; excerpt from War<br>&gt; and Peace here */!<br>&gt; <br>&gt; I need to scan to the other side of the comment to determine if ! is preceded by whitespace.<br>&gt; <br>&gt; There is already a list of situations in which some token is treated as whitespace for the purpose of operators in The Swift Programming Language:<br>&gt; <br>&gt; For the purposes of these rules, the characters (, [, and { before an operator, the characters ), ], and } after an operator, and the characters ,, ;, and : are also considered whitespace.<br>&gt; <br>&gt; There is one caveat to the rules above. If the ! or ? predefined operator has no whitespace on the left, it is treated as a postfix operator, regardless of whether it has whitespace on the right. To use the ? as the optional-chaining operator, it must not have whitespace on the left. To use it in the ternary conditional (? :) operator, it must have whitespace around both sides.<br>&gt; <br>&gt; Given that, it seems more natural to me to define comments as “treated-as-whitespace” in the same way.<br>&gt; <br>&gt; “Treated as not present” is also not quite the right way to word the opposite case, since comments would still separate tokens. Say you had an automated tool that deletes comments (perhaps unlikely, but let’s roll with it). “Treated as not present” says you should completely delete the comment, but that doesn’t actually work since it could still cause two separate tokens to be glued together. “Treated as whitespace” just means that you have to replace the comment with at least one character of whitespace.<br></p><p>FWIW, I agree with John about this. I think either model is reasonable but treating comments as whitespace is better because:<br></p><p>* The Swift language reference already states the general rule that comments are whitespace; I think it’s better to apply this throughout than change it.<br></p><p>* I think it’s easier to explain that &quot;comments are whitespace&quot; than &quot;comments are treated as not present except they separate tokens”.<br></p><p>* The non-local effects John describes are mildly awkward for human readers and in the lexer. (I think we’d have to walk backwards through slash-star comments to determine if we have space to the left of an operator.)<br></p><p>- Jesse<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151215/490fec2e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
