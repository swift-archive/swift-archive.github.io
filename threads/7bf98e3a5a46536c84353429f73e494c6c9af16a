<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Expand Document Markup for Mutating/Non-Mutating Cross References</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 30, 2016 at 10:00:00am</p></header><div class="content"><p>Bringing this over to its own thread.  Swift patterns encourage both<br>functional and procedural implementations for many methods. This<br>proposal makes it easier to connect those implementations through <br>Swift doc markup.<br></p><p>Thank you in advance for criticism, suggestions, and feedback. -- E<br></p><p>Expand Document Markup for Mutating/Non-Mutating Cross References<br></p><p>Proposal: SE-00XX<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/7a8bfa27d1875401022f50bf4f202027#introduction&gt;Introduction<br></p><p>Mutating and non-mutating pairs form a common Swift pattern. This proposal extends document markup to add description field labels that cross reference functional and procedural variations.<br></p><p>This proposal was discussed on-list in the [Draft] Expand Document Markup for Mutating/Non-Mutating Cross References &lt;applewebdata://4C55665E-EF64-41EE-B112-561AAE5CB6B3&gt;thread.<br></p><p> &lt;https://gist.github.com/erica/7a8bfa27d1875401022f50bf4f202027#motivation&gt;Motivation<br></p><p>The original design for @warn_unused_result provides optional arguments for both message and mutable_variantparameters that customize warnings when a method or function is called without consuming a result.<br></p><p>    @warn_unused_result(mutable_variant=&quot;sortInPlace&quot;)<br>    public func sort() -&gt; [Self.Generator.Element]<br>In Swift 2.2, cross references appear in a function&#39;s QuickHelp declaration field. This screenshot &lt;http://i.imgur.com/TTF4Y8C.jpg&gt; shows an example. Although ugly, doc-based cross referencing provides a valuable tool for developers seeking correspondence between two related functions. While, in compiler terms, it makes no sense to provide an equivalent variant and message option when attempting to consume the Void return type of mutating members. Most Void functions are not paired with a non-mutating member. By adding a highlighted field to documentation, both the mutating and non-mutating variations can cross-reference each other.<br></p><p>SE-0047 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0047-nonvoid-warn.md&gt;, which defaults non-Void functions to warn on unused results, initially proposed to extend Swift markup to introduce two field labels, specifically mutatingVariant and nonmutatingVariant. Field labels establish bidirection alternatives and incorporate the freeform messages originally designed into @warn_unused_result.<br></p><p>Swift&#39;s current markup includes: attention, important, note, remark,  and SeeAlso. Each of these could convey the relationship between mutating and non-mutating pairs like sort and sorted. To counter that argument, consider the following points:<br></p><p>Using named keywords instantly identifies why the documentation is calling these items out and promoting their names, rather than promoting some  general relationship like SeeAlso. QuickHelp highlighted keywords support the expert and guide the beginner, adding value in a way SeeAlso cannot.<br></p><p>Mutating and non-mutating pairs reflect a specific Swift pattern that differentiates functional implementations from their related procedural cousins. Some efforts, such as Dave Abraham&#39;s Set Algebra extensions &lt;http://dabrahams.github.io/swift-naming/SetAlgebra-Math.html&gt; are entirely built on creating and naming mutating/non-mutating pairs.<br></p><p>The current compiler-only approach is strictly one-way. These keywords support the developer in both directions and help avoid undesirable patterns like let self = nonMutatingCall.<br></p><p>Mutating and non-mutating pairs are are specifically called out in the API naming guide discussion on side effects.<br></p><p>Those without side-effects should read as noun phrases, e.g. x.distance(to: y), i.successor().<br>Those with side-effects should read as imperative verb phrases, e.g., print(x), x.sort(), x.append(y).<br>Use the “ed/ing” rule to name the nonmutating counterpart of a mutating method, e.g. x.sort()/x.sorted() and x.append(y)/x.appending(y).<br>Often, a mutating method will have a nonmutating variant returning the same, or a similar, type as the receiver. Prefer to name the nonmutating variant using the verb’s past participle (usually appending “ed”): When adding “ed” is not grammatical because the verb has a direct object, name the nonmutating variant using the verb’s present participle, by appending “ing.”<br></p><p>Source: The Swift API Design Guidelines &lt;https://swift.org/documentation/api-design-guidelines/&gt;<br>Swift&#39;s recent recommended/recommendedOver expansion lends weight that doc patterns that specifically serve developer needs can be added in modern Swift.<br></p><p>Three new document comment fields, namely - keyword:, - recommended: and - recommendedover:, allow Swift users to cooperate with code completion engine to deliver more effective code completion results. The - keyword: field specifies concepts that are not fully manifested in declaration names. - recommended: indicates other declarations are preferred to the one decorated; to the contrary, - recommendedover: indicates the decorated declaration is preferred to those declarations whose names are specified.<br></p><p>Source: The Swift master change log &lt;https://github.com/apple/swift/blob/master/CHANGELOG.md&gt;<br> &lt;https://gist.github.com/erica/7a8bfa27d1875401022f50bf4f202027#design-disadvantages&gt;Design Disadvantages<br></p><p>Being a documentation expansion, this approach excludes compile-time verification of method/function signatures.<br></p><p> &lt;https://gist.github.com/erica/7a8bfa27d1875401022f50bf4f202027#detail-design&gt;Detail Design<br></p><p>This proposal introduces two new document comment fields. The - mutatingVariant: and  - nonmutatingVariant:fields indicate paired members with and without side effects, offering instant reference for developers considering moving to or from in-place implementation.<br></p><p> &lt;https://gist.github.com/erica/7a8bfa27d1875401022f50bf4f202027#alternatives-considered&gt;Alternatives Considered<br></p><p>There are no alternatives considered.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/7bf9f16a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Expand Document Markup for Mutating/Non-Mutating Cross References</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 31, 2016 at 11:00:00am</p></header><div class="content"><p>Please disregard. This has been subsumed back into SE-0047.<br></p><p>Thanks again to the Swift Core team.<br></p><p>-- E<br></p><p><br></p><p>&gt; On Mar 30, 2016, at 10:51 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Bringing this over to its own thread.  Swift patterns encourage both<br>&gt; functional and procedural implementations for many methods. This<br>&gt; proposal makes it easier to connect those implementations through <br>&gt; Swift doc markup.<br>&gt; <br>&gt; Thank you in advance for criticism, suggestions, and feedback. -- E<br>&gt; <br>&gt; Expand Document Markup for Mutating/Non-Mutating Cross References<br>&gt; <br>&gt; Proposal: SE-00XX<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>blah blah<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/ec272aa4/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
