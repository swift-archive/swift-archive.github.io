<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>String(validatingUTF8:) doesn&#39;t</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April 21, 2016 at 04:00:00am</p></header><div class="content"><p>I have just now for the second time root-caused yet another &quot;nasty nasty UB bug&quot; from yet another developer who got cut on the very sharp edge of this API:<br></p><p>    var result = [40,50,60] as [Int8]<br>    return String(validatingUTF8: result)<br></p><p>This poorly-named String constructor does not take a Swift array of UTF8 bytes, it takes an UnsafePointer to a C string.  When that C string is not null-terminated (as shown here), UB ensues.<br></p><p>I believe *at least* we need a sane name for this constructor like String(validatingUTF8CString:) that vaguely suggests what the programmer can do to avoid UB.<br></p><p>I further believe that this API is just plain bad, but swift-dev disagrees and so in the interests of doing something to stop the bleeding I propose we rename.<br></p><p>Drew<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160421/797dde13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>String(validatingUTF8:) doesn&#39;t</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 21, 2016 at 01:00:00pm</p></header><div class="content"><p>How at all Swift allows such an implicit conversion from one type to <br>another, at the same time when we must explicitly convert let say Int8 to <br>Int16 ???<br></p><p>I.e. this is not allowed<br></p><p>var i8 : Int8 = 10<br>var i16 : Int16 = i8<br></p><p>But [Int8] to UnsafePointer&lt;CChar&gt; - no problems.<br></p><p>It is very weird behavior in this case.<br></p><p>Anyone can explain why String(validatingUTF8:) should silently convert <br>[Int8] to UnsafePointer&lt;CChar&gt; ??<br></p><p>On 21.04.2016 12:01, Drew Crawford via swift-evolution wrote:<br>&gt; I have just now for the second time root-caused yet another &quot;nasty nasty UB<br>&gt; bug&quot; from yet another developer who got cut on the very sharp edge of this API:<br>&gt;<br>&gt;     var result = [40,50,60] as [Int8]<br>&gt;     return String(validatingUTF8: result)<br>&gt;<br>&gt; This poorly-named String constructor does not take a Swift array of UTF8<br>&gt; bytes, it takes an UnsafePointer to a C string.  When that C string is not<br>&gt; null-terminated (as shown here), UB ensues.<br>&gt;<br>&gt; I believe **at least** we need a sane name for this constructor like<br>&gt; String(validatingUTF8CString:) that vaguely suggests what the programmer<br>&gt; can do to avoid UB.<br>&gt;<br>&gt; I further believe that this API is just plain bad, but swift-dev disagrees<br>&gt; and so in the interests of doing /something/ to stop the bleeding I propose<br>&gt; we rename.<br>&gt;<br>&gt; Drew<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>String(validatingUTF8:) doesn&#39;t</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April 21, 2016 at 05:00:00am</p></header><div class="content"><p>CChar is typedefed to Int8 I believe.  So the CChar=&gt;Int8 implicit conversion is not surprising.<br></p><p>The conversion from an [Int8] to an UnsafePointer&lt;Int8&gt; is a bit of a sharper edge, although there are cases where it makes sense (e.g. calling to C).  Importing C APIs with some kind of decl to opt into array-pointer conversion may make more sense than what we do now.<br></p><p>But independently of the language-level design problem, this is a bad API.  Its name does not describe what it does, It causes UB even though the word &quot;unsafe&quot; does not appear anywhere as is our convention, and quite frankly I don&#39;t understand why it is so important to have an API to work with CStrings when we could have an API to work with arrays in the standard library instead.  <br></p><p>I thought there might be a performance reason, but having read the sourcecode it looks O(N), so I am at a loss as to what problem this solves that an array-based API does not, that justifies the sharp edge of memory-unsafety.<br></p><p>Drew<br></p><p>&gt; On Apr 21, 2016, at 5:23 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; How at all Swift allows such an implicit conversion from one type to another, at the same time when we must explicitly convert let say Int8 to Int16 ???<br>&gt; <br>&gt; I.e. this is not allowed<br>&gt; <br>&gt; var i8 : Int8 = 10<br>&gt; var i16 : Int16 = i8<br>&gt; <br>&gt; But [Int8] to UnsafePointer&lt;CChar&gt; - no problems.<br>&gt; <br>&gt; It is very weird behavior in this case.<br>&gt; <br>&gt; Anyone can explain why String(validatingUTF8:) should silently convert [Int8] to UnsafePointer&lt;CChar&gt; ??<br>&gt; <br>&gt; On 21.04.2016 12:01, Drew Crawford via swift-evolution wrote:<br>&gt;&gt; I have just now for the second time root-caused yet another &quot;nasty nasty UB<br>&gt;&gt; bug&quot; from yet another developer who got cut on the very sharp edge of this API:<br>&gt;&gt; <br>&gt;&gt;    var result = [40,50,60] as [Int8]<br>&gt;&gt;    return String(validatingUTF8: result)<br>&gt;&gt; <br>&gt;&gt; This poorly-named String constructor does not take a Swift array of UTF8<br>&gt;&gt; bytes, it takes an UnsafePointer to a C string.  When that C string is not<br>&gt;&gt; null-terminated (as shown here), UB ensues.<br>&gt;&gt; <br>&gt;&gt; I believe **at least** we need a sane name for this constructor like<br>&gt;&gt; String(validatingUTF8CString:) that vaguely suggests what the programmer<br>&gt;&gt; can do to avoid UB.<br>&gt;&gt; <br>&gt;&gt; I further believe that this API is just plain bad, but swift-dev disagrees<br>&gt;&gt; and so in the interests of doing /something/ to stop the bleeding I propose<br>&gt;&gt; we rename.<br>&gt;&gt; <br>&gt;&gt; Drew<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
