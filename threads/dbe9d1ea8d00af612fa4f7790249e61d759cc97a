<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff7b13b7925cd296f0492251f6d700b4?s=50"></div><header><strong>Initializer labelling and forwarding</strong> from <string>David James</string> &lt;davidbjames1 at gmail.com&gt;<p>January 11, 2016 at 08:00:00pm</p></header><div class="content"><p>NOTE: this may cross-over with other proposals. I’m totally fine with converging, but just want this idea vetted first.<br></p><p>The idea is to reduce code duplication and improve maintainability, particularly around the constructing of objects. Objects hold fields which are subject to schema change, and therefore must be maintainable. The goal with this proposal/idea is to avoid replicating field names throughout the code, particularly when objects are being constructed.<br></p><p>One example is with the Builder pattern, which separates configuration of an object from it’s creation.<br></p><p>Here is some sample code. I have made bold the suggested changes.<br></p><p>Models:<br></p><p>struct Profile  {<br>    var user:Person?<br>    var shippingAddress:Location?<br>    var billingAddress:Location?<br>}<br></p><p>struct Person {<br>    let givenName:String<br>    let familyName:String<br>}<br></p><p>struct Location {<br>    let street:String<br>    let town:String<br>    let region:String<br>    let country:String<br>    init custom (street: String, town: String, region: String, country: String) {<br>        // ^^ initializer with label. contrived example.<br>        self.street = street<br>        self.town = town<br>        self.region = region<br>        self.country = country<br>    }<br>}<br></p><p>Here is a typical builder. Notice the field name duplication, in the method signatures, bodies, and the model objects above. This is a code smell. Granted, it can be resolved in other ways, but we tend to see this kind of duplication everywhere surrounding the model layer, and it causes maintenance problems.<br></p><p>struct TypicalBuilder {<br>    var profile:Profile = Profile()<br>    mutating func setUser(givenName: String, familyName: String) {<br>        profile.user = Person(givenName: givenName, familyName: familyName)<br>    }<br>    mutating func setShippingAddress(street: String, town: String, region: String, country: String) {<br>        profile.shippingAddress = Location(street: street, town: town, region: region, country: country)<br>    }<br>    mutating func setBillingAddress(street: String, town: String, region: String, country: String) {<br>        profile.billingAddress = Location(street: street, town: town, region: region, country: country)<br>    }<br>    func build() -&gt; Profile {<br>        return profile<br>    }<br>}<br></p><p>Here’s my idea for initializer forwarding. <br></p><p>struct BetterBuilder {<br>    var profile:Profile = Profile()<br>    mutating func setUser(forward: Person.init) {<br>        // .init without label would be equivalent to memberwise initializer<br>        // &quot;forward” could be an arbitrary label<br>        profile.user = Person(forward)<br>    }<br>    mutating func setShippingAddress(forward: Location.init{custom}) {<br>        // .init with label, uses initializer signature with that label<br>        profile.shippingAddress = Location(forward)<br>    }<br>    mutating func setBillingAddress(forward: Location.init{custom}) {<br>        profile.billingAddress = Location(forward)<br>    }<br>    func build() -&gt; Profile {<br>        return profile<br>    }<br>}<br></p><p>let builder = BetterBuilder()<br>builder.setUser(givenName: “David”, familyName: “James”) <br></p><p>It’s important to note, that the above two structs are equivalent, code completion would be the same and the call site would be same. <br></p><p>Syntax is up for grabs. Suggestions would be appreciated. Can this be converged with Doug Gregor’s function naming proposal &lt;https://github.com/DougGregor/swift-evolution/blob/generalized-naming/proposals/0000-generalized-naming.md&gt; or other proposals in the works?<br></p><p>Mainly, is the idea interesting? Can we expand it to include plain functions/methods as well (not just initializers).<br></p><p>David James<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160111/dbe9c97a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Initializer labelling and forwarding</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 11, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 11, 2016, at 1:58 PM, David James via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; NOTE: this may cross-over with other proposals. I’m totally fine with converging, but just want this idea vetted first.<br></p><p>Hi David.  Did have you seen the Parameter Forwarding proposal I sent out last night?  That would handle this use case, among others.  Here’s a link to the proposal (there is also a mailing list thread): https://github.com/anandabits/swift-evolution/blob/parameter-forwarding/proposals/NNNN-parameter-forwarding.md &lt;https://github.com/anandabits/swift-evolution/blob/parameter-forwarding/proposals/NNNN-parameter-forwarding.md&gt;<br></p><p>Thanks for providing a concrete example of how that proposal can be used!<br></p><p>Matthew<br></p><p>&gt; <br>&gt; The idea is to reduce code duplication and improve maintainability, particularly around the constructing of objects. Objects hold fields which are subject to schema change, and therefore must be maintainable. The goal with this proposal/idea is to avoid replicating field names throughout the code, particularly when objects are being constructed.<br>&gt; <br>&gt; One example is with the Builder pattern, which separates configuration of an object from it’s creation.<br>&gt; <br>&gt; Here is some sample code. I have made bold the suggested changes.<br>&gt; <br>&gt; Models:<br>&gt; <br>&gt; struct Profile  {<br>&gt;     var user:Person?<br>&gt;     var shippingAddress:Location?<br>&gt;     var billingAddress:Location?<br>&gt; }<br>&gt; <br>&gt; struct Person {<br>&gt;     let givenName:String<br>&gt;     let familyName:String<br>&gt; }<br>&gt; <br>&gt; struct Location {<br>&gt;     let street:String<br>&gt;     let town:String<br>&gt;     let region:String<br>&gt;     let country:String<br>&gt;     init custom (street: String, town: String, region: String, country: String) {<br>&gt;         // ^^ initializer with label. contrived example.<br>&gt;         self.street = street<br>&gt;         self.town = town<br>&gt;         self.region = region<br>&gt;         self.country = country<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Here is a typical builder. Notice the field name duplication, in the method signatures, bodies, and the model objects above. This is a code smell. Granted, it can be resolved in other ways, but we tend to see this kind of duplication everywhere surrounding the model layer, and it causes maintenance problems.<br>&gt; <br>&gt; struct TypicalBuilder {<br>&gt;     var profile:Profile = Profile()<br>&gt;     mutating func setUser(givenName: String, familyName: String) {<br>&gt;         profile.user = Person(givenName: givenName, familyName: familyName)<br>&gt;     }<br>&gt;     mutating func setShippingAddress(street: String, town: String, region: String, country: String) {<br>&gt;         profile.shippingAddress = Location(street: street, town: town, region: region, country: country)<br>&gt;     }<br>&gt;     mutating func setBillingAddress(street: String, town: String, region: String, country: String) {<br>&gt;         profile.billingAddress = Location(street: street, town: town, region: region, country: country)<br>&gt;     }<br>&gt;     func build() -&gt; Profile {<br>&gt;         return profile<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; Here’s my idea for initializer forwarding. <br>&gt; <br>&gt; struct BetterBuilder {<br>&gt;     var profile:Profile = Profile()<br>&gt;     mutating func setUser(forward: Person.init) {<br>&gt;         // .init without label would be equivalent to memberwise initializer<br>&gt;         // &quot;forward” could be an arbitrary label<br>&gt;         profile.user = Person(forward)<br>&gt;     }<br>&gt;     mutating func setShippingAddress(forward: Location.init{custom}) {<br>&gt;         // .init with label, uses initializer signature with that label<br>&gt;         profile.shippingAddress = Location(forward)<br>&gt;     }<br>&gt;     mutating func setBillingAddress(forward: Location.init{custom}) {<br>&gt;         profile.billingAddress = Location(forward)<br>&gt;     }<br>&gt;     func build() -&gt; Profile {<br>&gt;         return profile<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; let builder = BetterBuilder()<br>&gt; builder.setUser(givenName: “David”, familyName: “James”) <br>&gt; <br>&gt; It’s important to note, that the above two structs are equivalent, code completion would be the same and the call site would be same. <br>&gt; <br>&gt; Syntax is up for grabs. Suggestions would be appreciated. Can this be converged with Doug Gregor’s function naming proposal &lt;https://github.com/DougGregor/swift-evolution/blob/generalized-naming/proposals/0000-generalized-naming.md&gt; or other proposals in the works?<br>&gt; <br>&gt; Mainly, is the idea interesting? Can we expand it to include plain functions/methods as well (not just initializers).<br>&gt; <br>&gt; David James<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160111/3415ea03/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ff7b13b7925cd296f0492251f6d700b4?s=50"></div><header><strong>Initializer labelling and forwarding</strong> from <string>David James</string> &lt;davidbjames1 at gmail.com&gt;<p>January 13, 2016 at 01:00:00pm</p></header><div class="content"><p>On the one hand, I now see the naivety of my example, but I want to emphasize the idea behind it, and possibly behind some your proposals Matthew, and that is: how can we reduce code duplication and make code more maintainable?. Managing the proliferation of state in programs causes the majority of our headaches. If Swift can help mitigate this, we should put our thinking caps on and figure out a way.<br></p><p>&gt; On Jan 11, 2016, at 10:40 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 11, 2016, at 1:58 PM, David James via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; NOTE: this may cross-over with other proposals. I’m totally fine with converging, but just want this idea vetted first.<br>&gt; <br>&gt; Hi David.  Did have you seen the Parameter Forwarding proposal I sent out last night?  That would handle this use case, among others.  Here’s a link to the proposal (there is also a mailing list thread): https://github.com/anandabits/swift-evolution/blob/parameter-forwarding/proposals/NNNN-parameter-forwarding.md &lt;https://github.com/anandabits/swift-evolution/blob/parameter-forwarding/proposals/NNNN-parameter-forwarding.md&gt;<br>&gt; <br>&gt; Thanks for providing a concrete example of how that proposal can be used!<br>&gt; <br>&gt; Matthew<br>&gt; <br>&gt;&gt; <br>&gt;&gt; The idea is to reduce code duplication and improve maintainability, particularly around the constructing of objects. Objects hold fields which are subject to schema change, and therefore must be maintainable. The goal with this proposal/idea is to avoid replicating field names throughout the code, particularly when objects are being constructed.<br>&gt;&gt; <br>&gt;&gt; One example is with the Builder pattern, which separates configuration of an object from it’s creation.<br>&gt;&gt; <br>&gt;&gt; Here is some sample code. I have made bold the suggested changes.<br>&gt;&gt; <br>&gt;&gt; Models:<br>&gt;&gt; <br>&gt;&gt; struct Profile  {<br>&gt;&gt;     var user:Person?<br>&gt;&gt;     var shippingAddress:Location?<br>&gt;&gt;     var billingAddress:Location?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct Person {<br>&gt;&gt;     let givenName:String<br>&gt;&gt;     let familyName:String<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; struct Location {<br>&gt;&gt;     let street:String<br>&gt;&gt;     let town:String<br>&gt;&gt;     let region:String<br>&gt;&gt;     let country:String<br>&gt;&gt;     init custom (street: String, town: String, region: String, country: String) {<br>&gt;&gt;         // ^^ initializer with label. contrived example.<br>&gt;&gt;         self.street = street<br>&gt;&gt;         self.town = town<br>&gt;&gt;         self.region = region<br>&gt;&gt;         self.country = country<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Here is a typical builder. Notice the field name duplication, in the method signatures, bodies, and the model objects above. This is a code smell. Granted, it can be resolved in other ways, but we tend to see this kind of duplication everywhere surrounding the model layer, and it causes maintenance problems.<br>&gt;&gt; <br>&gt;&gt; struct TypicalBuilder {<br>&gt;&gt;     var profile:Profile = Profile()<br>&gt;&gt;     mutating func setUser(givenName: String, familyName: String) {<br>&gt;&gt;         profile.user = Person(givenName: givenName, familyName: familyName)<br>&gt;&gt;     }<br>&gt;&gt;     mutating func setShippingAddress(street: String, town: String, region: String, country: String) {<br>&gt;&gt;         profile.shippingAddress = Location(street: street, town: town, region: region, country: country)<br>&gt;&gt;     }<br>&gt;&gt;     mutating func setBillingAddress(street: String, town: String, region: String, country: String) {<br>&gt;&gt;         profile.billingAddress = Location(street: street, town: town, region: region, country: country)<br>&gt;&gt;     }<br>&gt;&gt;     func build() -&gt; Profile {<br>&gt;&gt;         return profile<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Here’s my idea for initializer forwarding. <br>&gt;&gt; <br>&gt;&gt; struct BetterBuilder {<br>&gt;&gt;     var profile:Profile = Profile()<br>&gt;&gt;     mutating func setUser(forward: Person.init) {<br>&gt;&gt;         // .init without label would be equivalent to memberwise initializer<br>&gt;&gt;         // &quot;forward” could be an arbitrary label<br>&gt;&gt;         profile.user = Person(forward)<br>&gt;&gt;     }<br>&gt;&gt;     mutating func setShippingAddress(forward: Location.init{custom}) {<br>&gt;&gt;         // .init with label, uses initializer signature with that label<br>&gt;&gt;         profile.shippingAddress = Location(forward)<br>&gt;&gt;     }<br>&gt;&gt;     mutating func setBillingAddress(forward: Location.init{custom}) {<br>&gt;&gt;         profile.billingAddress = Location(forward)<br>&gt;&gt;     }<br>&gt;&gt;     func build() -&gt; Profile {<br>&gt;&gt;         return profile<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let builder = BetterBuilder()<br>&gt;&gt; builder.setUser(givenName: “David”, familyName: “James”) <br>&gt;&gt; <br>&gt;&gt; It’s important to note, that the above two structs are equivalent, code completion would be the same and the call site would be same. <br>&gt;&gt; <br>&gt;&gt; Syntax is up for grabs. Suggestions would be appreciated. Can this be converged with Doug Gregor’s function naming proposal &lt;https://github.com/DougGregor/swift-evolution/blob/generalized-naming/proposals/0000-generalized-naming.md&gt; or other proposals in the works?<br>&gt;&gt; <br>&gt;&gt; Mainly, is the idea interesting? Can we expand it to include plain functions/methods as well (not just initializers).<br>&gt;&gt; <br>&gt;&gt; David James<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>David James<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/3bfa4911/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
