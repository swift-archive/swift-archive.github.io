<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68f3d59879e4cc1d37b611b718d388b6?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Chris Liscio</string> &lt;chris at supermegaultragroovy.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>Why can’t we use shorthand argument names and implicit returns when specifying the get and set blocks in a computed property? I.e., Why must we refer to newValue in the implementation of set, and not $0 like we do in closures? Also, why do we need ‘return’?<br></p><p>Once you get used to the shorthand, you kinda want to use it all over…<br></p><p>This question came up recently when I was writing a façade for another class, and would have liked to written something like the following:<br></p><p>class Façade {<br>  private var _wrapped: Something<br></p><p>  var wrappedProperty: Int {<br>    get { _wrapped.property }<br>    set { _wrapped.property = $0 }<br>  }<br></p><p>  var multipliedProperty: Int { _wrapped.property * 42 }<br>}<br></p><p>I apologize if this has already been discussed/requested before. I searched the archives and didn’t turn up anything that referred to this specifically.<br></p><p>Thanks!<br></p><p>Chris Liscio<br>http://supermegaultragroovy.com &lt;http://supermegaultragroovy.com/&gt;<br>Learn _your_ music with Capo: http://capoapp.com &lt;http://capoapp.com/&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/b92e72cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 on implicit return<br>-1 on $0; I like newValue more than it.<br></p><p>I also think the return type should be implicit.<br></p><p>&gt; On Feb 3, 2016, at 5:00 PM, Chris Liscio via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Why can’t we use shorthand argument names and implicit returns when specifying the get and set blocks in a computed property? I.e., Why must we refer to newValue in the implementation of set, and not $0 like we do in closures? Also, why do we need ‘return’?<br>&gt; <br>&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt; <br>&gt; This question came up recently when I was writing a façade for another class, and would have liked to written something like the following:<br>&gt; <br>&gt; class Façade {<br>&gt;   private var _wrapped: Something<br>&gt; <br>&gt;   var wrappedProperty: Int {<br>&gt;     get { _wrapped.property }<br>&gt;     set { _wrapped.property = $0 }<br>&gt;   }<br>&gt; <br>&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt; }<br>&gt; <br>&gt; I apologize if this has already been discussed/requested before. I searched the archives and didn’t turn up anything that referred to this specifically.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Chris Liscio<br>&gt; http://supermegaultragroovy.com &lt;http://supermegaultragroovy.com/&gt;<br>&gt; Learn _your_ music with Capo: http://capoapp.com &lt;http://capoapp.com/&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/2d75772a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 for both. I don&#39;t think that I would prefer the $0 syntax in most cases<br>but I would appreciate making the syntax more consistent.<br></p><p>TJ<br></p><p>On Wed, Feb 3, 2016 at 5:08 PM, Jessy Catterwaul via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 on implicit return<br>&gt; -1 on $0; I like newValue more than it.<br>&gt;<br>&gt; I also think the return *type* should be implicit.<br>&gt;<br>&gt; On Feb 3, 2016, at 5:00 PM, Chris Liscio via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Why can’t we use shorthand argument names and implicit returns when<br>&gt; specifying the get and set blocks in a computed property? I.e., Why must we<br>&gt; refer to newValue in the implementation of set, and not $0 like we do in<br>&gt; closures? Also, why do we need ‘return’?<br>&gt;<br>&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt;<br>&gt; This question came up recently when I was writing a façade for another<br>&gt; class, and would have liked to written something like the following:<br>&gt;<br>&gt; class Façade {<br>&gt;   private var _wrapped: Something<br>&gt;<br>&gt;   var wrappedProperty: Int {<br>&gt;     get { _wrapped.property }<br>&gt;     set { _wrapped.property = $0 }<br>&gt;   }<br>&gt;<br>&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt; }<br>&gt;<br>&gt; I apologize if this has already been discussed/requested before. I<br>&gt; searched the archives and didn’t turn up anything that referred to this<br>&gt; specifically.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Chris Liscio<br>&gt; http://supermegaultragroovy.com<br>&gt; Learn _your_ music with Capo: http://capoapp.com<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/489b0f68/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>If functions start using shorthand argument names, I would probably feel more comfortable with it. Is that being discussed?<br></p><p>&gt; On Feb 3, 2016, at 5:22 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt; <br>&gt; +1 for both. I don&#39;t think that I would prefer the $0 syntax in most cases but I would appreciate making the syntax more consistent.<br>&gt; <br>&gt; TJ<br>&gt; <br>&gt; On Wed, Feb 3, 2016 at 5:08 PM, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; +1 on implicit return<br>&gt; -1 on $0; I like newValue more than it.<br>&gt; <br>&gt; I also think the return type should be implicit.<br>&gt; <br>&gt;&gt; On Feb 3, 2016, at 5:00 PM, Chris Liscio via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Why can’t we use shorthand argument names and implicit returns when specifying the get and set blocks in a computed property? I.e., Why must we refer to newValue in the implementation of set, and not $0 like we do in closures? Also, why do we need ‘return’?<br>&gt;&gt; <br>&gt;&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt;&gt; <br>&gt;&gt; This question came up recently when I was writing a façade for another class, and would have liked to written something like the following:<br>&gt;&gt; <br>&gt;&gt; class Façade {<br>&gt;&gt;   private var _wrapped: Something<br>&gt;&gt; <br>&gt;&gt;   var wrappedProperty: Int {<br>&gt;&gt;     get { _wrapped.property }<br>&gt;&gt;     set { _wrapped.property = $0 }<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I apologize if this has already been discussed/requested before. I searched the archives and didn’t turn up anything that referred to this specifically.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; Chris Liscio<br>&gt;&gt; http://supermegaultragroovy.com &lt;http://supermegaultragroovy.com/&gt;<br>&gt;&gt; Learn _your_ music with Capo: http://capoapp.com &lt;http://capoapp.com/&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/a0cddb59/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February  3, 2016 at 02:00:00pm</p></header><div class="content"><p>+1 for both.  I find that I use $0 enough in closures that I have no<br>problem remembering what it does, and being able to use it for setters<br>would save me a bunch of typing.<br></p><p>On Wed, Feb 3, 2016 at 2:24 PM, Jessy Catterwaul via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; If functions start using shorthand argument names, I would probably feel<br>&gt; more comfortable with it. Is that being discussed?<br>&gt;<br>&gt; On Feb 3, 2016, at 5:22 PM, T.J. Usiyan &lt;griotspeak at gmail.com&gt; wrote:<br>&gt;<br>&gt; +1 for both. I don&#39;t think that I would prefer the $0 syntax in most cases<br>&gt; but I would appreciate making the syntax more consistent.<br>&gt;<br>&gt; TJ<br>&gt;<br>&gt; On Wed, Feb 3, 2016 at 5:08 PM, Jessy Catterwaul via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1 on implicit return<br>&gt;&gt; -1 on $0; I like newValue more than it.<br>&gt;&gt;<br>&gt;&gt; I also think the return *type* should be implicit.<br>&gt;&gt;<br>&gt;&gt; On Feb 3, 2016, at 5:00 PM, Chris Liscio via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Why can’t we use shorthand argument names and implicit returns when<br>&gt;&gt; specifying the get and set blocks in a computed property? I.e., Why must we<br>&gt;&gt; refer to newValue in the implementation of set, and not $0 like we do in<br>&gt;&gt; closures? Also, why do we need ‘return’?<br>&gt;&gt;<br>&gt;&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt;&gt;<br>&gt;&gt; This question came up recently when I was writing a façade for another<br>&gt;&gt; class, and would have liked to written something like the following:<br>&gt;&gt;<br>&gt;&gt; class Façade {<br>&gt;&gt;   private var _wrapped: Something<br>&gt;&gt;<br>&gt;&gt;   var wrappedProperty: Int {<br>&gt;&gt;     get { _wrapped.property }<br>&gt;&gt;     set { _wrapped.property = $0 }<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; I apologize if this has already been discussed/requested before. I<br>&gt;&gt; searched the archives and didn’t turn up anything that referred to this<br>&gt;&gt; specifically.<br>&gt;&gt;<br>&gt;&gt; Thanks!<br>&gt;&gt;<br>&gt;&gt; Chris Liscio<br>&gt;&gt; http://supermegaultragroovy.com<br>&gt;&gt; Learn _your_ music with Capo: http://capoapp.com<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/9e8d55b7/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/68f3d59879e4cc1d37b611b718d388b6?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Chris Liscio</string> &lt;chris at supermegaultragroovy.com&gt;<p>February  5, 2016 at 08:00:00am</p></header><div class="content"><p>Jessy,<br></p><p>&gt; On Feb 3, 2016, at 5:08 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt; +1 on implicit return<br></p><p>Yay!<br></p><p>&gt; -1 on $0; I like newValue more than it.<br></p><p>Well, my problem with newValue is the lack of consistency with everywhere else. If we’re not specifying names, then $0 feels “more like the rest of the language” than newValue does.<br></p><p>If you preferred to use newValue (or any other name), you could still do:<br></p><p>class Façade {<br>  private var _wrapped: Something<br></p><p>  var wrappedProperty: Int {<br>    get { _wrapped.property }<br>    set(newValue) { _wrapped.property = newValue }<br>  }<br></p><p>  var multipliedProperty: Int { _wrapped.property * 42 }<br>}<br></p><p>So it wouldn’t really stomp on anything too valuable IMO.<br></p><p>&gt; I also think the return type should be implicit.<br></p><p>An implicit return type could certainly be nice as well.<br></p><p>Chris<br></p><p>&gt; <br>&gt;&gt; On Feb 3, 2016, at 5:00 PM, Chris Liscio via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Why can’t we use shorthand argument names and implicit returns when specifying the get and set blocks in a computed property? I.e., Why must we refer to newValue in the implementation of set, and not $0 like we do in closures? Also, why do we need ‘return’?<br>&gt;&gt; <br>&gt;&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt;&gt; <br>&gt;&gt; This question came up recently when I was writing a façade for another class, and would have liked to written something like the following:<br>&gt;&gt; <br>&gt;&gt; class Façade {<br>&gt;&gt;   private var _wrapped: Something<br>&gt;&gt; <br>&gt;&gt;   var wrappedProperty: Int {<br>&gt;&gt;     get { _wrapped.property }<br>&gt;&gt;     set { _wrapped.property = $0 }<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I apologize if this has already been discussed/requested before. I searched the archives and didn’t turn up anything that referred to this specifically.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; Chris Liscio<br>&gt;&gt; http://supermegaultragroovy.com &lt;http://supermegaultragroovy.com/&gt;<br>&gt;&gt; Learn _your_ music with Capo: http://capoapp.com &lt;http://capoapp.com/&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160205/24d0c967/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February  4, 2016 at 09:00:00am</p></header><div class="content"><p>You can keep going on this line of thinking, e.g.:<br></p><p>    let posC = { max(0, $0) }<br></p><p>Is legal but you have to write:<br></p><p>    func posF(x: Int) -&gt; Int { return max(0, x) }<br></p><p>On Thursday, 4 February 2016, Chris Liscio via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Why can’t we use shorthand argument names and implicit returns when<br>&gt; specifying the get and set blocks in a computed property? I.e., Why must we<br>&gt; refer to newValue in the implementation of set, and not $0 like we do in<br>&gt; closures? Also, why do we need ‘return’?<br>&gt;<br>&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt;<br>&gt; This question came up recently when I was writing a façade for another<br>&gt; class, and would have liked to written something like the following:<br>&gt;<br>&gt; class Façade {<br>&gt;   private var _wrapped: Something<br>&gt;<br>&gt;   var wrappedProperty: Int {<br>&gt;     get { _wrapped.property }<br>&gt;     set { _wrapped.property = $0 }<br>&gt;   }<br>&gt;<br>&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt; }<br>&gt;<br>&gt; I apologize if this has already been discussed/requested before. I<br>&gt; searched the archives and didn’t turn up anything that referred to this<br>&gt; specifically.<br>&gt;<br>&gt; Thanks!<br>&gt;<br>&gt; Chris Liscio<br>&gt; http://supermegaultragroovy.com<br>&gt; Learn _your_ music with Capo: http://capoapp.com<br>&gt;<br>&gt;<br></p><p>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160204/a58b191c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Computed properties: get and set using shorthand notation?</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  3, 2016 at 05:00:00pm</p></header><div class="content"><p>I consider <br></p><p>func posF(x: Int) -&gt; Int { return max(0, x) }<br></p><p>to be a precursor to the syntax we’ll eventually have:<br></p><p>func posF(Int) {max(0, $0)}<br></p><p><br>&gt; On Feb 3, 2016, at 5:29 PM, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You can keep going on this line of thinking, e.g.:<br>&gt; <br>&gt;     let posC = { max(0, $0) }<br>&gt; <br>&gt; Is legal but you have to write:<br>&gt; <br>&gt;     func posF(x: Int) -&gt; Int { return max(0, x) }<br>&gt; <br>&gt; On Thursday, 4 February 2016, Chris Liscio via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Why can’t we use shorthand argument names and implicit returns when specifying the get and set blocks in a computed property? I.e., Why must we refer to newValue in the implementation of set, and not $0 like we do in closures? Also, why do we need ‘return’?<br>&gt; <br>&gt; Once you get used to the shorthand, you kinda want to use it all over…<br>&gt; <br>&gt; This question came up recently when I was writing a façade for another class, and would have liked to written something like the following:<br>&gt; <br>&gt; class Façade {<br>&gt;   private var _wrapped: Something<br>&gt; <br>&gt;   var wrappedProperty: Int {<br>&gt;     get { _wrapped.property }<br>&gt;     set { _wrapped.property = $0 }<br>&gt;   }<br>&gt; <br>&gt;   var multipliedProperty: Int { _wrapped.property * 42 }<br>&gt; }<br>&gt; <br>&gt; I apologize if this has already been discussed/requested before. I searched the archives and didn’t turn up anything that referred to this specifically.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; Chris Liscio<br>&gt; http://supermegaultragroovy.com &lt;http://supermegaultragroovy.com/&gt;<br>&gt; Learn _your_ music with Capo: http://capoapp.com &lt;http://capoapp.com/&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;   -- Howard.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160203/27892a01/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
