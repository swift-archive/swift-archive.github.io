<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 26, 2016 at 12:00:00pm</p></header><div class="content"><p>on Mon Jan 25 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Paul, let’s start a new thread about this — I was going to write about<br>&gt; the same idiom, but it’s out of scope of this review.<br>&gt;<br>&gt; I disagree with Dave that this is just a EDSL, <br></p><p>I didn&#39;t say *just* an EDSL!  EDSLs are hugely important.<br></p><p>&gt; I think things like completion/success/failure handlers are a very<br>&gt; common pattern, <br></p><p>That doesn&#39;t make it &quot;not an EDSL.&quot;<br></p><p>&gt; and it would be great to have consistent naming and a Guidelines<br>&gt; recommendation for them. (Usually in the context of argument names,<br>&gt; not chainable methods, which are, indeed, quite DSL-y).<br></p><p>Here&#39;s the problem: I don&#39;t want to make special rules for this one kind<br>of EDSL, because the next declarative language that comes along will<br>have the same problem with the guidelines.  I wouldn&#39;t mind saying<br>something like, &quot;mutating methods that are declarative in nature might<br>not be verbs.&quot;<br></p><p>&gt;<br>&gt;<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 25 Jan 2016, at 04:48, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Siesta uses the widespread fluent style of attaching callbacks to a request:<br>&gt;&gt; <br>&gt;&gt;     resource.load()<br>&gt;&gt;         .onCompletion { _ in stopSpinnyThing() }<br>&gt;&gt;         .onSuccess { _ in showHappyFace() }<br>&gt;&gt;         .onFailure { _ in showSadFace() }<br>&gt;&gt;         .onNewData { _ in soundTrumpets() }<br>&gt;&gt; <br>&gt;&gt; These methods mutate the receiving request (by adding a callback), and the guidelines thus say that they should be named as imperative verbs. The results of that don’t seem like an improvement:<br>&gt;&gt; <br>&gt;&gt;     resource.load()<br>&gt;&gt;         .addCompletionCallback { _ in stopSpinnyThing() }<br>&gt;&gt;         .addSuccessCallback { _ in showHappyFace() }<br>&gt;&gt;         .addFailureCallback { _ in showSadFace() }<br>&gt;&gt;         .addNewDataCallback { _ in soundTrumpets() }<br>&gt;&gt; <br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>January 27, 2016 at 11:00:00am</p></header><div class="content"><p>Here’s what I meant:<br></p><p>&gt;    resource.load()<br>&gt;        .onCompletion { _ in stopSpinnyThing() }<br>&gt;        .onSuccess { _ in showHappyFace() }<br>&gt;        .onFailure { _ in showSadFace() }<br>&gt;        .onNewData { _ in soundTrumpets() }<br></p><p>Is a nice DSL, but not a universal pattern we see everywhere.<br></p><p>However something like this:<br></p><p>    someNetworkingOperation(success: { … }, failure: { … })<br>    someAnimatingThing(completionHandler: { … })<br></p><p>Is very, very common, and I wouldn’t call that an EDSL, it’s just closure passing.<br></p><p>And while not a super big deal, I would like to see the naming of such names be standardized as “onSuccess”, “onFailure”, “onCompletion”.<br></p><p>Rationale:<br></p><p>   someAction(completion: () -&gt; Void)<br></p><p>A word describing the event itself, such as &quot;completion&quot;, &quot;success&quot;, &quot;failure&quot;, isn&#39;t always immediately obvious, depending on the context. For instance, when passing a function reference instead of an inline closure, it might not be fully clear that it is, in fact, a function that is called _when_ completion/success/failure occurs. It might give an impression that, say, &quot;completion&quot; is a _thing_, a term of art describing something meaningful.<br></p><p>And so, presumably for this reason, the Cocoa convention is to use the word &quot;handler&quot;, like so:<br></p><p>    someAction(completionHandler: () -&gt; Void)<br></p><p>This isn&#39;t too bad, but it is slightly verbose in my opinion. Of course, clarity takes precedense over brevity, but I believe there&#39;s a good idiom, common in other languages/frameworks/environments, that&#39;s less verbose, conveys the semantics well if not better, and reads very nicely:<br></p><p>    someAction(onCompletion: () -&gt; Void)<br></p><p>At call site, this reads very naturally without any ambiguity both when passing a closure inline:<br></p><p>    someAction(onSuccess: { ... }, onFailure: { ... })<br></p><p>And when passing a function reference<br></p><p>    someAction(onCompletion: doSomethingElse)<br></p><p>I know this isn’t the topic for this thread which is why I wasn’t going to elaborate too much. Do you think this level of naming guidance is appropriate for the Guidelines? If not, then never mind, not a big deal — but if maybe, then I could start a new thread. (This also ties into SE-0005 since, as far as I can tell, the “completionHandler” pattern is used exclusively in Cocoa APIs. So if there was an agreement that “onSuccess” is a better convention, the APIs could easily be translated mechanically)<br></p><p>— Radek<br></p><p>&gt; On 26 Jan 2016, at 21:08, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Jan 25 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Paul, let’s start a new thread about this — I was going to write about<br>&gt;&gt; the same idiom, but it’s out of scope of this review.<br>&gt;&gt; <br>&gt;&gt; I disagree with Dave that this is just a EDSL, <br>&gt; <br>&gt; I didn&#39;t say *just* an EDSL!  EDSLs are hugely important.<br>&gt; <br>&gt;&gt; I think things like completion/success/failure handlers are a very<br>&gt;&gt; common pattern, <br>&gt; <br>&gt; That doesn&#39;t make it &quot;not an EDSL.&quot;<br>&gt; <br>&gt;&gt; and it would be great to have consistent naming and a Guidelines<br>&gt;&gt; recommendation for them. (Usually in the context of argument names,<br>&gt;&gt; not chainable methods, which are, indeed, quite DSL-y).<br>&gt; <br>&gt; Here&#39;s the problem: I don&#39;t want to make special rules for this one kind<br>&gt; of EDSL, because the next declarative language that comes along will<br>&gt; have the same problem with the guidelines.  I wouldn&#39;t mind saying<br>&gt; something like, &quot;mutating methods that are declarative in nature might<br>&gt; not be verbs.&quot;<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 25 Jan 2016, at 04:48, Paul Cantrell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Siesta uses the widespread fluent style of attaching callbacks to a request:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    resource.load()<br>&gt;&gt;&gt;        .onCompletion { _ in stopSpinnyThing() }<br>&gt;&gt;&gt;        .onSuccess { _ in showHappyFace() }<br>&gt;&gt;&gt;        .onFailure { _ in showSadFace() }<br>&gt;&gt;&gt;        .onNewData { _ in soundTrumpets() }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; These methods mutate the receiving request (by adding a callback), and the guidelines thus say that they should be named as imperative verbs. The results of that don’t seem like an improvement:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    resource.load()<br>&gt;&gt;&gt;        .addCompletionCallback { _ in stopSpinnyThing() }<br>&gt;&gt;&gt;        .addSuccessCallback { _ in showHappyFace() }<br>&gt;&gt;&gt;        .addFailureCallback { _ in showSadFace() }<br>&gt;&gt;&gt;        .addNewDataCallback { _ in soundTrumpets() }<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
