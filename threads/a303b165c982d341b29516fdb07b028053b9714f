<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Pointers vs. References?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 12, 2015 at 01:00:00pm</p></header><div class="content"><p>I&#39;ve noticed a mix of pointers (FuncDecl*) and references (TypeChecker&amp;) in<br>the C++ codebase. Is there a particular reason for this? Perhaps a style<br>guide?<br></p><p>Jacob<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151212/a303714f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17d2af4afb70023e28e655d17471a018?s=50"></div><header><strong>Pointers vs. References?</strong> from <string>Michael Gottesman</string> &lt;mgottesman at apple.com&gt;<p>December 12, 2015 at 06:00:00pm</p></header><div class="content"><p>In general, we have not been particularly disciplined in this regard. I would suggest following what is being done locally in the file you are modifying, i.e. FuncDecl */TypeChecker &amp; as per the LLVM style guide.<br></p><p>Michael<br></p><p>&gt; On Dec 12, 2015, at 3:15 PM, Jacob Bandes-Storch via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;ve noticed a mix of pointers (FuncDecl*) and references (TypeChecker&amp;) in the C++ codebase. Is there a particular reason for this? Perhaps a style guide?<br>&gt; <br>&gt; Jacob<br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151212/a75c66b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Pointers vs. References?</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 14, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 12, 2015, at 4:20 PM, Michael Gottesman via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; In general, we have not been particularly disciplined in this regard. I would suggest following what is being done locally in the file you are modifying, i.e. FuncDecl */TypeChecker &amp; as per the LLVM style guide.<br></p><p>There are common rules at work here that govern most situations.  We almost always pass around objects that are part of the language representation as either pointers (e.g. AST/SIL/LLVM nodes) or values (e.g. Type, SILDeclRef); pretty much everything else is passed around as a reference, especially classes that manage the creation or manipulation of the language representation (e.g. IRGenModule, TypeChecker).<br></p><p>The biggest grey area is for those parts of the language representation that are either globally or contextually singleton, e.g. ASTContext and SILFunction; these are almost always stored as references.<br></p><p>John.<br></p><p>&gt; <br>&gt; Michael<br>&gt; <br>&gt;&gt; On Dec 12, 2015, at 3:15 PM, Jacob Bandes-Storch via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;ve noticed a mix of pointers (FuncDecl*) and references (TypeChecker&amp;) in the C++ codebase. Is there a particular reason for this? Perhaps a style guide?<br>&gt;&gt; <br>&gt;&gt; Jacob<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/8c16bf5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Pointers vs. References?</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>December 14, 2015 at 11:00:00am</p></header><div class="content"><p>I was thinking it might help some of the null-dereference issues if more<br>things were to be passed as references. Is there a particular reason to use<br>pointers instead? It seems there are several places which accept pointers<br>and assume they&#39;re not null, which isn&#39;t really safe.<br></p><p>(And, there&#39;s probably some work to be done adding `const` in a bunch of<br>places.)<br></p><p>Jacob<br></p><p>On Mon, Dec 14, 2015 at 11:34 AM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; On Dec 12, 2015, at 4:20 PM, Michael Gottesman via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; In general, we have not been particularly disciplined in this regard. I<br>&gt; would suggest following what is being done locally in the file you are<br>&gt; modifying, i.e. FuncDecl */TypeChecker &amp; as per the LLVM style guide.<br>&gt;<br>&gt;<br>&gt; There are common rules at work here that govern most situations.  We<br>&gt; almost always pass around objects that are part of the language<br>&gt; representation as either pointers (e.g. AST/SIL/LLVM nodes) or values (e.g.<br>&gt; Type, SILDeclRef); pretty much everything else is passed around as a<br>&gt; reference, especially classes that manage the creation or manipulation of<br>&gt; the language representation (e.g. IRGenModule, TypeChecker).<br>&gt;<br>&gt; The biggest grey area is for those parts of the language representation<br>&gt; that are either globally or contextually singleton, e.g. ASTContext and<br>&gt; SILFunction; these are almost always stored as references.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;<br>&gt; Michael<br>&gt;<br>&gt; On Dec 12, 2015, at 3:15 PM, Jacob Bandes-Storch via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;ve noticed a mix of pointers (FuncDecl*) and references (TypeChecker&amp;)<br>&gt; in the C++ codebase. Is there a particular reason for this? Perhaps a style<br>&gt; guide?<br>&gt;<br>&gt; Jacob<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151214/dd86996e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Pointers vs. References?</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 14, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 11:43 AM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; I was thinking it might help some of the null-dereference issues if more things were to be passed as references. Is there a particular reason to use pointers instead? It seems there are several places which accept pointers and assume they&#39;re not null, which isn&#39;t really safe.<br></p><p>In principle, I agree, hence the design of Swift optionals.  However, C++ isn’t very cooperative here.  Compilers do a lot of dynamic casting, and to work idiomatically, the result of a dynamic cast needs to be something you can test in an if condition (an optional type, if you will).  However, C++ if conditions aren&#39;t &quot;test-and-unwrap” like Swift’s if-let, they’re just “test”, so even within the guarded block you now need a lot of fussy (and only contextual safe) code to get back to a non-optional type that you can actually do something with.  It’s not really worth it.<br></p><p>&gt; (And, there&#39;s probably some work to be done adding `const` in a bunch of places.)<br></p><p>My experience is that ‘const’ doesn’t provide much value with language representations.  There’s a lot of boilerplate and redundancy to overload operations to propagate const-ness around correctly, you inevitably end up const_cast’ing stuff all the time regardless, and it’s generally well-known whether a particular context has any business modifying the representation (usually: no).<br></p><p>John.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
