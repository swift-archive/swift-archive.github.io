<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/afb1af7924cbadd912a8b5b2f1308bba?s=50"></div><header><strong>(no subject)</strong> from <string>John Siracusa</string> &lt;siracusa at gmail.com&gt;<p>December 11, 2015 at 11:00:00am</p></header><div class="content"><p>Chris Lattner wrote:<br></p><p>&gt; When introducing a feature like this, I think it would be useful to survey<br>&gt; a range of popular languages (and yes, even perl ;-) to understand what<br>&gt; facilities they provide and why (i.e. what problems they are solving) and<br>&gt; synthesize a good swift design that can solve the same problems with a<br>&gt; hopefully simple approach.<br></p><p><br>Travis Tilley wrote:<br></p><p>&gt; ​Perl and Erlang are unique in that valid code in either language looks<br>&gt; essentially like line noise. I&#39;d rather take inspiration from languages<br>&gt; like ruby, python, and elixir.​<br></p><p><br>Jokes aside, the ability to choose delimiters for strings and other<br>language constructs that surround some value is a huge boon to code<br>readability.<br></p><p>For example, RegExp literals in JavaScript:<br></p><p>var regex = /^\/usr\/local\//; // gross<br></p><p>An even simpler example, which applies to many languages: a string literal<br>that contains all of your possible string delimiters within it. This is not<br>an exotic thing in English.<br></p><p>message = &quot;\&quot;I don&#39;t like this,\&quot; she said.&quot;; // nope<br>message = &#39;&quot;I don\&#39;t like this,&quot; she said.&#39;;  // still nope<br></p><p>Then, of course, there&#39;s your escape character itself:<br></p><p>escapes = &quot;Some escapes: \\n, \\t, \\a&quot;; // sigh<br></p><p>There are many time-tested solutions to these syntactic/cosmetic problems.<br></p><p>* Different delimiters with different interpolation rules (e.g., single<br>quotes not honoring any backslash escapes and not doing variable<br>interpolation)<br></p><p>* Matched-pair delimiters that don&#39;t require anything to be escaped as long<br>as the delimiters are absent or matched within the string. (These alone<br>solve a huge range of problems.)<br></p><p>* Heredocs for long literals where you get to pick the end token.<br></p><p>* Heredocs modified by delimiters around the end token to control<br>interpolation within the long literal.<br></p><p>Which language looks like line noise now?<br></p><p>$messasge = q(&quot;I can&#39;t believe how nice this is,&quot; she said (quietly).);<br></p><p>$regex = qr(^/usr/local/);<br></p><p>$escapes = &#39;Some escapes: \n, \t, \a&#39;;<br></p><p>My take: once you use a language where you pretty much never have to<br>backslash-escape a character you can easily type to get it into a string,<br>it&#39;s really hard to go back.<br></p><p>-John<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/828d3f48/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>(no subject)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 11, 2015 at 08:00:00pm</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 8:52 AM, John Siracusa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Chris Lattner wrote:<br>&gt; When introducing a feature like this, I think it would be useful to survey a range of popular languages (and yes, even perl ;-) to understand what facilities they provide and why (i.e. what problems they are solving) and synthesize a good swift design that can solve the same problems with a hopefully simple approach.<br>&gt; <br>&gt; Travis Tilley wrote:<br>&gt; ​Perl and Erlang are unique in that valid code in either language looks essentially like line noise. I&#39;d rather take inspiration from languages like ruby, python, and elixir.​<br>&gt; <br>&gt; Jokes aside, the ability to choose delimiters for strings and other language constructs that surround some value is a huge boon to code readability.<br></p><p>I agree.<br></p><p>&gt; My take: once you use a language where you pretty much never have to backslash-escape a character you can easily type to get it into a string, it&#39;s really hard to go back. <br></p><p><br>In all seriousness, Perl is one of the best languages in the world at text and string processing, and Swift has a lot to learn from it and its community on this topic.  For anyone looking to work on string processing (including string literals and regex&#39;s), Perl is really the best game in town.  We have a long ways to go at the moment, but Swift should aspire to be *better* than Perl at string processing and manipulation - comparing to other languages may be interesting but the baseline should be set by Perl.<br></p><p>OTOH, there are some other things that Perl isn’t good at - like shipping on schedule.  Let’s not aspire to following its approach there…  :-)<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/c66d0da3/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
