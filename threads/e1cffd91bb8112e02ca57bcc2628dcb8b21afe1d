<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd5bd4566ee1f286333b7dbf2df6fadb?s=50"></div><header><strong>[Review] SE-0063: SwiftPM System Module Search Paths</strong> from <string>Anders Bertelrud</string> &lt;anders at apple.com&gt;<p>April  7, 2016 at 01:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>A review of &quot;SwiftPM System Module Search Paths&quot; for the Swift Package Manager begins now and runs through Wednesday, April 13th.<br></p><p>The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0063-swiftpm-system-module-search-paths.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br>	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br>	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>Anders<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05540cd6be96706f76aa66a4519f7db9?s=50"></div><header><strong>[swift-evolution] [Review] SE-0063: SwiftPM System Module Search Paths</strong> from <string>Ankit Agarwal</string> &lt;ankit at ankit.im&gt;<p>April  8, 2016 at 10:00:00am</p></header><div class="content"><p>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>I am in favour of this proposal. It will solve an important problem faced<br>by swiftpm users.<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to the Swift Package Manager?<br>&gt;<br></p><p>Yes, system modules often require extra flags and search paths are platform<br>dependent. A lot of users have reported bugs in jira about this.<br></p><p><br>&gt;         * Does this proposal fit well with the feel and direction of the<br>&gt; Swift Package Manager?<br>&gt;<br></p><p>Yes, it will improve the functionality of swiftpm<br></p><p><br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br></p><p>I implemented the first draft of proposal and tried using GTK3 library on<br>OSX and Ubuntu, It works out really nice. More info about the experiment :<br>http://ankit.im/swift/2016/03/26/improving-system-modules-support-in-swiftpm/<br></p><p><br>-- <br>Ankit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160408/af4a65a5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[swift-evolution] [Review] SE-0063: SwiftPM System Module Search Paths</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April  9, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Apr 7, 2016, at 1:14 PM, Anders Bertelrud via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think it is a good direction.<br></p><p>I think we inevitably will need to interface more with system package managers in order to do a great job of being seamless and working out of the box, and while the addition of &quot;providers&quot; to the Package.swift is going to have a maintenance cost, it seems sensible to go ahead and start building out this support. This design also allows the community to effective contribute a lot of the information on the package name correspondence.<br></p><p>The one thing I feel the proposal lacks currently is how tag versioning information in the Swift package is going to correspond to the underlying system package. My expectation is that we probably want Swift system packages to try and adopt a versioning scheme which matches that of the underlying system package.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to the Swift Package Manager?<br></p><p>Yes, this is a common initial pain point with using system modules, and will make it easier to understand the behavior in the context of other system package tools and standard project development environments (e.g., autoconf projects).<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of the Swift Package Manager?<br></p><p>I think it fits well, the intention is to <br></p><p>&gt; 	* If you have you used other package managers with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Not in this form.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>In-depth study.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; Anders<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] [Review] SE-0063: SwiftPM System Module Search Paths</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; The one thing I feel the proposal lacks currently is how tag versioning information in the Swift package is going to correspond to the underlying system package. My expectation is that we probably want Swift system packages to try and adopt a versioning scheme which matches that of the underlying system package.<br></p><p>This is already implemented as a recommendation for the user to use “best judgement” so strictly was not required in the proposal. But best judgement is certainly not enough detail.<br></p><p>The reason we did not initially say: use the same version as the system package is:<br></p><p>* you may need to bump the SwiftPM package independently of the system package version<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160411/a640a7a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ae51ca494b37cc270597830da66f089f?s=50"></div><header><strong>[swift-evolution] [Review] SE-0063: SwiftPM System Module Search Paths</strong> from <string>Max Howell</string> &lt;max.howell at apple.com&gt;<p>April 11, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;&gt; The one thing I feel the proposal lacks currently is how tag versioning information in the Swift package is going to correspond to the underlying system package. My expectation is that we probably want Swift system packages to try and adopt a versioning scheme which matches that of the underlying system package.<br>&gt; <br>&gt; This is already implemented as a recommendation for the user to use “best judgement” so strictly was not required in the proposal. But best judgement is certainly not enough detail.<br></p><p>s/Implemented/Documented: https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md#module-map-versioning<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160411/af5e631a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
