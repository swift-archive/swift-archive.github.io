<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 23, 2016 at 12:00:00pm</p></header><div class="content"><p>on Sat Jan 23 2016, plx &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jan 22, 2016, at 6:12 PM, Ross O&#39;Brien via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How would we apply this to delegate patterns?<br>&gt;&gt; For example, would we keep<br>&gt;&gt; tableview(tableView:cellForRowAtIndexPath:), or would we switch to<br>&gt;&gt; delegate(tableView:cellForRowAtIndexPath:) ?<br>&gt;&gt; Or perhaps better, for clarity over which protocol is being<br>&gt;&gt; conformed to / which property of the delegator is calling the<br>&gt;&gt; function:<br>&gt;&gt; dataSource(tableView:cellForRowAtIndexPath:),<br>&gt;&gt; delegate(tableView:didSelectRowAtIndexPath:)<br>&gt;<br>&gt; FWIW, I am personally favorable to a more radical-renaming for delegate methods, roughly the below:<br>&gt;<br>&gt; func numberOfSections(inTableView tableView: UITableView) -&gt; Int // &lt;- against guidelines, but symmetric<br>&gt; func numberOfRows(inTableView tableView: UITableView, forSection section: Int) -&gt; Int<br>&gt; func cellForRow(inTableView tableView: UITableView, atIndexPath indexPath: NSIndexPath) -&gt; UITableView<br></p><p>The interesting thing about delegate methods is that, for the most part,<br>use-sites don&#39;t appear in user code.  So *if* you&#39;re going to come up with<br>special conventions just for delegate methods you&#39;d want to serve the<br>declaration site.  I don&#39;t know what these things *ought* to look like,<br>but the declarations above look to me like they&#39;ve got an awful lot of<br>redundancy that doesn&#39;t help readability.<br></p><p>It&#39;s also worth asking whether the added complexity of special<br>guidelines for delegates pays for itself.<br></p><p><br>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b6a0b6562cd412f587c69d192f335161?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0023 API Design Guidelines</strong> from <string>plx</string> &lt;plxswift at icloud.com&gt;<p>January 23, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jan 23, 2016, at 2:33 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Jan 23 2016, plx &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jan 22, 2016, at 6:12 PM, Ross O&#39;Brien via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How would we apply this to delegate patterns?<br>&gt;&gt;&gt; For example, would we keep<br>&gt;&gt;&gt; tableview(tableView:cellForRowAtIndexPath:), or would we switch to<br>&gt;&gt;&gt; delegate(tableView:cellForRowAtIndexPath:) ?<br>&gt;&gt;&gt; Or perhaps better, for clarity over which protocol is being<br>&gt;&gt;&gt; conformed to / which property of the delegator is calling the<br>&gt;&gt;&gt; function:<br>&gt;&gt;&gt; dataSource(tableView:cellForRowAtIndexPath:),<br>&gt;&gt;&gt; delegate(tableView:didSelectRowAtIndexPath:)<br>&gt;&gt; <br>&gt;&gt; FWIW, I am personally favorable to a more radical-renaming for delegate methods, roughly the below:<br>&gt;&gt; <br>&gt;&gt; func numberOfSections(inTableView tableView: UITableView) -&gt; Int // &lt;- against guidelines, but symmetric<br>&gt;&gt; func numberOfRows(inTableView tableView: UITableView, forSection section: Int) -&gt; Int<br>&gt;&gt; func cellForRow(inTableView tableView: UITableView, atIndexPath indexPath: NSIndexPath) -&gt; UITableView<br>&gt; <br>&gt; The interesting thing about delegate methods is that, for the most part,<br>&gt; use-sites don&#39;t appear in user code.  So *if* you&#39;re going to come up with<br>&gt; special conventions just for delegate methods you&#39;d want to serve the<br>&gt; declaration site.  I don&#39;t know what these things *ought* to look like,<br>&gt; but the declarations above look to me like they&#39;ve got an awful lot of<br>&gt; redundancy that doesn&#39;t help readability.<br></p><p>Most of what follows should really be in the discussion about the Objective-C import, not here, but I’ll respond here with the parts relevant to the guidelines.<br></p><p>It seems self-evident that imported delegate methods violate the spirit of Swift’s API guidelines; in particular, the rule that “Methods can share a base name when they share the same basic meaning but operate on different types, or are in different domains” seems relevant. It’s thus been a bit surprising to me that delegate-style methods haven’t *already* gotten some special treatment; what I had isn’t great, but put it and some variants up against the original, like so:<br></p><p>func numberOfRows(in tableView: UITableView, forSection section: Int) -&gt; Int<br>func numberOfRowsIn(tableView: UITableView, forSection section: Int) -&gt; Int<br>func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int<br>func numberOfRows(inTableView tableView: UITableView, forSection section: Int) -&gt; Int<br></p><p>…(note the longest is only ~10 characters longer than the shortest!). <br></p><p>Although there might be an as-yet unseen option that’s superior to all of the above, just out of those 4 it’s hard to see how you can justify option #3 using the API guidelines; it also seems hard to envision a self-consistent expansion of the guidelines that’d lead to favoring #3.<br></p><p>As already noted this is really more-relevant to the “objective-c import revision”, but you can frame my points as obliquely asking “to what extent should the Swift API guidelines actually matter when doing the big Objective-C import?”<br></p><p>I also question your sense of real-world use of delegate protocols; just taking inventory of the most recent project I completed, it looks like it had 5 custom delegate-style protocols. Of these, 4 had exactly one implementation each, and 1 had exactly 2 implementations; I don’t think this is that untypical. If you accept it as not too atypical, it suggests a more uniform balance between defining a delegate protocol, using said protocol, and implementing said protocol.<br></p><p>To wind this digression down now, the API guidelines’ attitude towards redundancy seems somewhat troubling; no one wants needless redundancy, but natural languages tend towards redundancy (cf agreement/pleonasm/etc) and it’s not at all self-evident that less redundancy always implies increased readability (which you may or may not be intending to imply; I can’t tell)…especially when it’s easy to get fooled by increased speed-of-reading.<br></p><p>I will pick this discussion up in the Objective-C import review because I think it’s important.<br></p><p>&gt; It&#39;s also worth asking whether the added complexity of special<br>&gt; guidelines for delegates pays for itself.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160123/a918a0ea/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
