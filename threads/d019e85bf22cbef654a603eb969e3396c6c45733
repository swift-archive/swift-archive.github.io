<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>https://gist.github.com/erica/5a344b12bd989f6395c2<br></p><p>I think this one is pretty straightforward, but as always feedback is requested and appreciated. <br>Let me know if you&#39;re okay with the names and the approach and whether there are any technical<br>barriers that need addressing.<br></p><p>Thanks, -- E<br></p><p>Introducing Build Configuration Tests for Platform Conditions<br></p><p>Proposal: SE-00XX<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#introduction&gt;Introduction<br></p><p>This proposal introduces configuration test to differentiate platform conditions.<br></p><p>This proposal was discussed on-list in the Introducing Build Configuration Tests for Platform Conditions &lt;applewebdata://DAF46169-949E-4C76-B744-5D8AB8E633A8&gt;.<br></p><p> &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#motivation&gt;Motivation<br></p><p>Testing for platform conditions is a typical developer task. Although some built-in features like CFByteOrderGetCurrentexist, it seems a natural match to Swift to introduce build configurations specific to common platform conditions.<br></p><p> &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#detail-design&gt;Detail Design<br></p><p>This proposal adds the following build configuration tests:<br></p><p>#if endian(big)<br>#if endian(little)<br>#if bitwidth(32)<br>#if bitwidth(64)<br> &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#current-art&gt;Current Art<br></p><p>Swift currently supports the following configuration tests:<br></p><p>The literals true and false<br>The os() function that tests for OSX, iOS, watchOS, tvOS, Linux, Windows, and FreeBSD<br>The arch() function that tests for x86_64, arm, arm64, i386, powerpc64, and powerpc64le<br>The swift() function that tests for specific Swift language releases, e.g. swift(&gt;=2.2)<br> &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#alternatives-considered&gt;Alternatives Considered<br></p><p>There are no alternatives considered.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/d0195733/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>These are excellent.  I wouldn’t have chosen anything differently.<br></p><p>Thanks, Erica!<br></p><p>&gt; On Mar 15, 2016, at 9:10 AM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://gist.github.com/erica/5a344b12bd989f6395c2 &lt;https://gist.github.com/erica/5a344b12bd989f6395c2&gt;<br>&gt; <br>&gt; I think this one is pretty straightforward, but as always feedback is requested and appreciated. <br>&gt; Let me know if you&#39;re okay with the names and the approach and whether there are any technical<br>&gt; barriers that need addressing.<br>&gt; <br>&gt; Thanks, -- E<br>&gt; <br>&gt; Introducing Build Configuration Tests for Platform Conditions<br>&gt; <br>&gt; Proposal: SE-00XX<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#introduction&gt;Introduction<br>&gt; <br>&gt; This proposal introduces configuration test to differentiate platform conditions.<br>&gt; <br>&gt; This proposal was discussed on-list in the Introducing Build Configuration Tests for Platform Conditions &lt;applewebdata://16D657C7-581A-4F1A-9FCC-5C777E259D40&gt;.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#motivation&gt;Motivation<br>&gt; <br>&gt; Testing for platform conditions is a typical developer task. Although some built-in features like CFByteOrderGetCurrentexist, it seems a natural match to Swift to introduce build configurations specific to common platform conditions.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#detail-design&gt;Detail Design<br>&gt; <br>&gt; This proposal adds the following build configuration tests:<br>&gt; <br>&gt; #if endian(big)<br>&gt; #if endian(little)<br>&gt; #if bitwidth(32)<br>&gt; #if bitwidth(64)<br>&gt;  &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#current-art&gt;Current Art<br>&gt; <br>&gt; Swift currently supports the following configuration tests:<br>&gt; <br>&gt; The literals true and false<br>&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, Linux, Windows, and FreeBSD<br>&gt; The arch() function that tests for x86_64, arm, arm64, i386, powerpc64, and powerpc64le<br>&gt; The swift() function that tests for specific Swift language releases, e.g. swift(&gt;=2.2)<br>&gt;  &lt;https://gist.github.com/erica/5a344b12bd989f6395c2#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; There are no alternatives considered.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/f1bcf3d0/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 04:00:00pm</p></header><div class="content"><p>I guess the fuzziness in my mind is when considering LP64, LLP64, etc. I<br>believe swift attempts to avoid that by defining either 32 bit or 64 bit<br>model. If that is universally the case then I think bitwidth is fine. If<br>not then pointerwidth may be more correct. Those bridging to C would have<br>to consider information from the C world to deal with the variations of<br>type size based on platform and 32/64.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/89ab4aa5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>The vast majority of special cases I’ve seen and written are due to the size of Int, not a pointer per se.  To clear up the confusion, how about we rename bitwidth to intwidth or intsize?<br></p><p>- Will<br></p><p>&gt; On Mar 15, 2016, at 9:40 AM, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I guess the fuzziness in my mind is when considering LP64, LLP64, etc. I believe swift attempts to avoid that by defining either 32 bit or 64 bit model. If that is universally the case then I think bitwidth is fine. If not then pointerwidth may be more correct. Those bridging to C would have to consider information from the C world to deal with the variations of type size based on platform and 32/64.<br>&gt; <br>&gt; -Shawn<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>Before going any further, is it possible to hop over to the [DRAFT] Introducing a Debug Build Configuration Test, and pick up where Joe Groff just left off?<br>Looks like things may not be as clear and orthogonal as I initially thought and it would help (a lot) if the discussion was all in one place.<br></p><p>Thanks! -- E<br></p><p><br>&gt; On Mar 15, 2016, at 10:51 AM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt; <br>&gt; The vast majority of special cases I’ve seen and written are due to the size of Int, not a pointer per se.  To clear up the confusion, how about we rename bitwidth to intwidth or intsize?<br>&gt; <br>&gt; - Will<br>&gt; <br>&gt;&gt; On Mar 15, 2016, at 9:40 AM, Shawn Erickson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I guess the fuzziness in my mind is when considering LP64, LLP64, etc. I believe swift attempts to avoid that by defining either 32 bit or 64 bit model. If that is universally the case then I think bitwidth is fine. If not then pointerwidth may be more correct. Those bridging to C would have to consider information from the C world to deal with the variations of type size based on platform and 32/64.<br>&gt;&gt; <br>&gt;&gt; -Shawn<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Draft] Introducing Build Configuration Tests for Platform Conditions</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>March 15, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, Mar 15, 2016 at 9:51 AM William Dillon &lt;william at housedillon.com&gt;<br>wrote:<br></p><p>&gt; The vast majority of special cases I’ve seen and written are due to the<br>&gt; size of Int, not a pointer per se.  To clear up the confusion, how about we<br>&gt; rename bitwidth to intwidth or intsize?<br>&gt;<br>&gt; - Will<br>&gt;<br>&gt; &gt; On Mar 15, 2016, at 9:40 AM, Shawn Erickson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I guess the fuzziness in my mind is when considering LP64, LLP64, etc. I<br>&gt; believe swift attempts to avoid that by defining either 32 bit or 64 bit<br>&gt; model. If that is universally the case then I think bitwidth is fine. If<br>&gt; not then pointerwidth may be more correct. Those bridging to C would have<br>&gt; to consider information from the C world to deal with the variations of<br>&gt; type size based on platform and 32/64.<br>&gt;<br></p><p>I am curious to see some examples of checking Int size to better understand<br>the situation.<br></p><p>-Shawn<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/7a6649a5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
