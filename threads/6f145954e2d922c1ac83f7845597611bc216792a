<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d258a22a520c13772442666364207fa?s=50"></div><header><strong>Overloading assignment operator</strong> from <string>Don Wills</string> &lt;don.wills at portablesoftware.com&gt;<p>December  6, 2015 at 06:00:00am</p></header><div class="content"><p>The ability to overload operators is very useful.  However, that utility is diminished without the ability to overload the simple assignment operator ( = ).  I vaguely recall reading somewhere that there is a reason for this having to do with syntax ambiguity.  Can this problem be solved so that = can be overloaded?<br></p><p>Don Wills<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Overloading assignment operator</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 5:44 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The ability to overload operators is very useful.  However, that utility is diminished without the ability to overload the simple assignment operator ( = ).  I vaguely recall reading somewhere that there is a reason for this having to do with syntax ambiguity.  Can this problem be solved so that = can be overloaded?<br></p><p>In your specific case, I think Alex Lew is completely correct: you really don’t want a ton of overloaded operators, you just want your decimal type to be literal-convertible.<br></p><p>But to answer the question more generally, no, I can’t foresee us ever allowing the overloading of =, no.  = always means simple initialization/assignment in Swift; that is, it always simply propagates values around.  That’s a very fundamental language concept to mess around with.<br></p><p>The way to fix your problem in a less ad hoc way is to allow user-defined implicit conversions, which is something we’ve talked about already in a different thread.  What I said there was that it will require a lot of very careful language/type-checker design work.  Here, I’d like to identity another problem: the behavior of implicit conversions can be very confusing for non-experts to reason about, and in the context of a language with a fair amount of other subtle behaviors (e.g. due to overloading), that’s a very dangerous thing to bring in.  Explicit type coercions are much easier for non-experts to reason about.<br></p><p>John.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d258a22a520c13772442666364207fa?s=50"></div><header><strong>Overloading assignment operator</strong> from <string>Don Wills</string> &lt;don.wills at portablesoftware.com&gt;<p>December  6, 2015 at 11:00:00pm</p></header><div class="content"><p>John,<br></p><p>&gt; On Dec 6, 2015, at 10:54 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 5:44 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The ability to overload operators is very useful.  However, that utility is diminished without the ability to overload the simple assignment operator ( = ).  I vaguely recall reading somewhere that there is a reason for this having to do with syntax ambiguity.  Can this problem be solved so that = can be overloaded?<br>&gt; <br>&gt; In your specific case, I think Alex Lew is completely correct: you really don’t want a ton of overloaded operators, you just want your decimal type to be literal-convertible.<br>&gt; <br>&gt; But to answer the question more generally, no, I can’t foresee us ever allowing the overloading of =, no.  = always means simple initialization/assignment in Swift; that is, it always simply propagates values around.  That’s a very fundamental language concept to mess around with.<br></p><p>I guess I missed the subtlety that in Swift the statement &quot;x = y;&quot; is fundamentally different than &quot;x += y;&quot;.  That surprises me.  And it fails one of the basic principles that I&#39;ve always applied to software design:  The Principle of Least Astonishment.<br></p><p>Thanks for your response, even though it is quite disheartening to me.  As I get to know the nuances of Swift, I&#39;m starting to think that moving to Swift might be too big of a stretch for my programming staff.<br></p><p>Don Wills<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Overloading assignment operator</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December  6, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 6, 2015, at 10:17 PM, Don Wills &lt;don.wills at portablesoftware.com&gt; wrote:<br>&gt; John,<br>&gt; <br>&gt;&gt; On Dec 6, 2015, at 10:54 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 6, 2015, at 5:44 AM, Don Wills via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The ability to overload operators is very useful.  However, that utility is diminished without the ability to overload the simple assignment operator ( = ).  I vaguely recall reading somewhere that there is a reason for this having to do with syntax ambiguity.  Can this problem be solved so that = can be overloaded?<br>&gt;&gt; <br>&gt;&gt; In your specific case, I think Alex Lew is completely correct: you really don’t want a ton of overloaded operators, you just want your decimal type to be literal-convertible.<br>&gt;&gt; <br>&gt;&gt; But to answer the question more generally, no, I can’t foresee us ever allowing the overloading of =, no.  = always means simple initialization/assignment in Swift; that is, it always simply propagates values around.  That’s a very fundamental language concept to mess around with.<br>&gt; <br>&gt; I guess I missed the subtlety that in Swift the statement &quot;x = y;&quot; is fundamentally different than &quot;x += y;&quot;.  That surprises me.<br></p><p>It shouldn’t.  I am not aware of any languages in which = (or its equivalent) is just a normal overloaded operator.  Even in C++, (1) there are different formation rules for assignment operators, (2) assignment operators are often implicitly generated, (3) explicitly declared assignment operators can have subtle effects on formal language behavior, and (4) the resolution rules for assignment are different from the rules for other user-defined operators, even compound assignment.<br></p><p>Oh, and of course (5) the token “=&quot; doesn’t mean assignment in the contexts where it actually means initialization, which is something that was actually confused earlier in this thread, and which is probably the single most common point of confusion among even quite knowledgeable C++ programmers — and which is, by and large, a problem that we’ve defined away in Swift by not introducing this kind of semantic confusion around the behavior of =.<br></p><p>&gt; And it fails one of the basic principles that I&#39;ve always applied to software design:  The Principle of Least Astonishment.<br></p><p>In fact, in my experience, programmers tend to be quite astonished by the behavior of overloaded assignment.<br></p><p>Again, the feature you actually need for all of your examples is literal convertibility, which already exists; please look into it before writing off the language.<br></p><p>John.<br></p><p>&gt; Thanks for your response, even though it is quite disheartening to me.  As I get to know the nuances of Swift, I&#39;m starting to think that moving to Swift might be too big of a stretch for my programming staff.<br>&gt; <br>&gt; Don Wills<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Overloading assignment operator</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  7, 2015 at 07:00:00am</p></header><div class="content"><p>&gt; Here, I’d like to identity another problem: the behavior of implicit conversions can be very confusing for non-experts to reason about, and in the context of a language with a fair amount of other subtle behaviors (e.g. due to overloading), that’s a very dangerous thing to bring in.  Explicit type coercions are much easier for non-experts to reason about.<br></p><p>+1 to this.  I am very skeptical that the benefit of implicit conversions are worth the complexity and potential for confusion, except where a natural subtype relationship exists like Chris has mentioned in relation to numerics.<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
