<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fd420b6be1358fbbd155ad393453d8a5?s=50"></div><header><strong>[review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>David Ungar</string> &lt;ungar at icloud.com&gt;<p>May 24, 2016 at 03:00:00pm</p></header><div class="content"><p>-1<br></p><p>I love the desire for consistency in this proposal, but it brings up two issues:<br></p><p>1. Swift’s take on standalone functions vs member functions: As Swift has progressed, it seems to have adopted a preference (which I like) in favor of members over functions that just take arguments. I think that having “dynamicType” as a property is more consistent with this direction. I like the direction because the flow of the computation is from left-to-right. (I also have adopted the pipe operator “|&gt;” in my programming style for the same reason.) I love this aspect of a more functional style. In fact, I would rather move “sizeof” to be a property, maybe call it “bytesize”.<br></p><p>2. Stratification: But there’s a deeper issue. What direction should Swift be taking for reflection? For example, there might be a useful subset of Swift for very performance-critical applications in which there is no dynamic type information. In that case, would it make sense to put “dynamicType” in a separate box? If so, the syntax could be something like “Mirror(reflecting: &lt;someExpression&gt;).dynamicType” where this dynamicType returned a “mirror” on the type information. I’m not advocating this alternative, but this direction has significant both pros and cons. If this is something that the Swift team wants to consider in the future, it might be better to leave “dynamicType” alone for now. (For more info, see http://bracha.org/mirrors.pdf and http://bracha.org/mirrors-oopsla04.pdf.)<br></p><p>Thank you,<br></p><p>- David Ungar<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[review] SE-0096: Converting dynamicType from a property to an operator</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 25, 2016 at 07:00:00am</p></header><div class="content"><p>Agreed, dynamicType feels more like a property than a keyword and obj.dynamicType is more expressive than dynamicType(obj).<br></p><p>If it were to become a keyword matching sizeof, I&#39;d suggest using &quot;typeof&quot; instead which is more consistent.<br></p><p>For me -1.<br></p><p>Charlie<br></p><p>&gt; On May 25, 2016, at 12:11 AM, David Ungar via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1<br>&gt; <br>&gt; I love the desire for consistency in this proposal, but it brings up two issues:<br>&gt; <br>&gt; 1. Swift’s take on standalone functions vs member functions: As Swift has progressed, it seems to have adopted a preference (which I like) in favor of members over functions that just take arguments. I think that having “dynamicType” as a property is more consistent with this direction. I like the direction because the flow of the computation is from left-to-right. (I also have adopted the pipe operator “|&gt;” in my programming style for the same reason.) I love this aspect of a more functional style. In fact, I would rather move “sizeof” to be a property, maybe call it “bytesize”.<br>&gt; <br>&gt; 2. Stratification: But there’s a deeper issue. What direction should Swift be taking for reflection? For example, there might be a useful subset of Swift for very performance-critical applications in which there is no dynamic type information. In that case, would it make sense to put “dynamicType” in a separate box? If so, the syntax could be something like “Mirror(reflecting: &lt;someExpression&gt;).dynamicType” where this dynamicType returned a “mirror” on the type information. I’m not advocating this alternative, but this direction has significant both pros and cons. If this is something that the Swift team wants to consider in the future, it might be better to leave “dynamicType” alone for now. (For more info, see http://bracha.org/mirrors.pdf and http://bracha.org/mirrors-oopsla04.pdf.)<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; - David Ungar<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
