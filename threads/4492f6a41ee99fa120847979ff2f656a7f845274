<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 31, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160331/44925274/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0a299ea776456e5b490c6af93682926?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Sebastian Hagedorn</string> &lt;sebastian at iosphere.de&gt;<p>April  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>not applicable<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the mailing list thread and read the proposal.<br></p><p><br>&gt; On 01 Apr 2016, at 05:27, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/d5800583/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  2, 2016 at 08:00:00am</p></header><div class="content"><p>+1 with the same evaluation as Sebastian Hagedorn<br></p><p>On Friday, 1 April 2016, Sebastian Hagedorn via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; +1<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes.<br>&gt;<br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; not applicable<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Followed the mailing list thread and read the proposal.<br>&gt;<br>&gt;<br>&gt; On 01 Apr 2016, at 05:27, Douglas Gregor &lt;dgregor at apple.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;dgregor at apple.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot;<br>&gt; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution-announce at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/3a953a25/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April  1, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>-1 I admire the goal of making trailing closures usably in guard, but I do not like the inconsistency between guard and if. I also never liked the inconsistency with the else keyword in guard. Bother those reasons means that I’m worried that this will increase the cost of transforming guards into ifs, as can be quite frequent when refactoring code.<br></p><p>For example, transforming:<br></p><p>guard collection.contains { $0.predicate } else {<br>    return<br>}<br></p><p>Would require more modification:<br></p><p>if !collection.contains({ $0.predicate }) {<br>    return<br>}<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>I do not think so.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>I think this proposal has the danger of adding inconsistency, which is opposite to the direction of simplification for Swift 3.0<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Ruby uses keywords the conditional expression for the body of control structures (similar to guard’s else). Perhaps if Swift also adopted those would we be able to implement trailing closures in conditional expressions everywhere:<br></p><p>if condition then {<br>} else {<br>}<br></p><p>while condition do {<br>}<br></p><p>switch expression on {<br>}<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A thorough read and long thought.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/9757321a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5a72880ffed1a30cb9b8e3f372507145?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Rob Mayoff</string> &lt;mayoff at dqd.com&gt;<p>April  1, 2016 at 04:00:00pm</p></header><div class="content"><p>I would prefer the conditional statements to treat trailing closures<br>consistently, rather than allow this minor but inconsistent convenience. I<br>don&#39;t think this needs changing. I read the proposal and followed the list<br>discussion.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/b9c56a1f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>April  1, 2016 at 10:00:00pm</p></header><div class="content"><p>On Thu, Mar 31, 2016 at 8:27 PM Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot;<br>&gt; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; +1 for improving guard. As noted it does leverage an existing<br>inconsistency between guard and if/while/switch (e.g. else) so it isn&#39;t<br>really make things that more inconsistent. The use of else in guard exist<br>for good reasons.<br></p><p><br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; It is close in my book.<br></p><p><br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; I think so. I would like to see the modification of if/while/switch as<br>outlined in the alternates section to be more fully evaluated. It would<br>empower those constructs and bring things back into alignment.<br></p><p><br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; N/A<br></p><p><br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Fully read the proposal and followed the discussion.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160401/5adb282d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>April  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>I think there is a lot of value to allowing trailing closures in the guard condition clause. However, not at the cost of inconsistency. We have reviewed many proposals over the last month that addressed consistency issues in the Swift language, and if I&#39;m not mistaken, all of them have been accepted by the community, larger to eliminate the inconsistency.<br></p><p>Because of this, I think two of the alternatives stated by the proposal have credibility:<br>1) Eliminate the &quot;else&quot; keyword from the guard syntax.<br>2) Add keywords to &quot;if&quot;, &quot;while&quot;, &quot;for&quot;, and &quot;switch&quot; to delineate the condition clause from the body of the statement.<br></p><p>The second alternative has more appeal, because it supports trailing closures without &quot;heroics&quot;.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>No.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>No. Please don&#39;t add inconsistencies to the language, as we&#39;re just going to have to deal with it down the road.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Not in my experience.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>In-depth study.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/7266b302/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>April  3, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; Le 2 avr. 2016 à 15:39, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; I think there is a lot of value to allowing trailing closures in the guard condition clause. However, not at the cost of inconsistency. We have reviewed many proposals over the last month that addressed consistency issues in the Swift language, and if I&#39;m not mistaken, all of them have been accepted by the community, larger to eliminate the inconsistency.<br>&gt; <br>&gt; Because of this, I think two of the alternatives stated by the proposal have credibility:<br>&gt; 1) Eliminate the &quot;else&quot; keyword from the guard syntax.<br>&gt; 2) Add keywords to &quot;if&quot;, &quot;while&quot;, &quot;for&quot;, and &quot;switch&quot; to delineate the condition clause from the body of the statement.<br>&gt; <br>&gt; The second alternative has more appeal, because it supports trailing closures without &quot;heroics&quot;.<br></p><p>It have been mentioned multiple times that allowing trailing closure only for guard is creating an inconsistency, but these keywords already are inconsistent with the each other (beside the presence of the &#39;trailing&#39; else keyword) on the variable scoping:<br></p><p>- guard let: outer scope immutable variable<br>- if let: inner scope immutable variable<br>- for: inner scope immutable variable without let keyword<br></p><p>Consistency is good, but since each keywords are not for the exact same thing, it is normal to see some variances.  Like the global scope of the immutable variable created by guard; as per the intent of the keyword, or its trailing else keyword; needed to clarify that what follow is for, for lack of better word, the &#39;else&#39; case.<br></p><p>So as long as such inconsistency have a &quot;raison d&#39;être&quot;, that they have been designed and are not an oversight; there should be no reason to not allow them.<br></p><p>Dany<br></p><p>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; No.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; No. Please don&#39;t add inconsistencies to the language, as we&#39;re just going to have to deal with it down the road.<br>&gt; <br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; Not in my experience.<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; In-depth study.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/e47556bc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>April  4, 2016 at 10:00:00am</p></header><div class="content"><p>If I understand you correctly, you think adding keywords represents an inconsistency. However, I think it would add considerable consistency and utility to the Swift language. Yes, it would make it inconsistent with the generations of C-like languages that have come before it. However, I think we&#39;ve already taken considerable steps from away from C-like languages; for example, removing C-like for-loop syntax and unary increment/decrement operators.<br></p><p>-Patrick<br></p><p>&gt; On Apr 3, 2016, at 11:44 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Le 2 avr. 2016 à 15:39, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt; <br>&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; I think there is a lot of value to allowing trailing closures in the guard condition clause. However, not at the cost of inconsistency. We have reviewed many proposals over the last month that addressed consistency issues in the Swift language, and if I&#39;m not mistaken, all of them have been accepted by the community, larger to eliminate the inconsistency.<br>&gt;&gt; <br>&gt;&gt; Because of this, I think two of the alternatives stated by the proposal have credibility:<br>&gt;&gt; 1) Eliminate the &quot;else&quot; keyword from the guard syntax.<br>&gt;&gt; 2) Add keywords to &quot;if&quot;, &quot;while&quot;, &quot;for&quot;, and &quot;switch&quot; to delineate the condition clause from the body of the statement.<br>&gt;&gt; <br>&gt;&gt; The second alternative has more appeal, because it supports trailing closures without &quot;heroics&quot;.<br>&gt; <br>&gt; It have been mentioned multiple times that allowing trailing closure only for guard is creating an inconsistency, but these keywords already are inconsistent with the each other (beside the presence of the &#39;trailing&#39; else keyword) on the variable scoping:<br>&gt; <br>&gt; - guard let: outer scope immutable variable<br>&gt; - if let: inner scope immutable variable<br>&gt; - for: inner scope immutable variable without let keyword<br>&gt; <br>&gt; Consistency is good, but since each keywords are not for the exact same thing, it is normal to see some variances.  Like the global scope of the immutable variable created by guard; as per the intent of the keyword, or its trailing else keyword; needed to clarify that what follow is for, for lack of better word, the &#39;else&#39; case.<br>&gt; <br>&gt; So as long as such inconsistency have a &quot;raison d&#39;être&quot;, that they have been designed and are not an oversight; there should be no reason to not allow them.<br>&gt; <br>&gt; Dany<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; No.<br>&gt;&gt; <br>&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; No. Please don&#39;t add inconsistencies to the language, as we&#39;re just going to have to deal with it down the road.<br>&gt;&gt; <br>&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; Not in my experience.<br>&gt;&gt; <br>&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; In-depth study.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/fad55a11/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>April  4, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Le 4 avr. 2016 à 10:19, Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt; a écrit :<br>&gt; <br>&gt; If I understand you correctly, you think adding keywords represents an inconsistency.<br></p><p>I didn&#39;t write that, maybe I should have put my reply between your two paragraphs. Adding keywords such as &#39;then&#39; and &#39;do&#39; could add some consistency, but another word than &#39;do&#39; will likely have to be found as &#39;do&#39; could break code as highlighted by Xiaodi, as well as cause by the &#39;catch&#39; case caught by Jeremy.<br></p><p>I was merely highlighting the current inconsistency of the variable scope of &#39;guard let&#39; versus &#39;if let&#39; which no one had mentioned so far... An inconsistency which is (logically) fully design intent and will remain forever. So some inconsistencies are acceptable, <br></p><p>Is accepting trailing closure in &#39;guard&#39; really a new inconsistency?<br>Being unable to use them with &#39;guard&#39;, &#39;if&#39;, &#39;switch&#39; is the original inconsistency as the trailing closure seemed to be use in many places (including argument list of another function). Adding &#39;guard&#39; as a location where trailing closure are allowed doesn&#39;t really introduce a new inconsistency, it just incompletely reduce an existing inconsistency.<br></p><p>&gt; However, I think it would add considerable consistency and utility to the Swift language. Yes, it would make it inconsistent with the generations of C-like languages that have come before it. However, I think we&#39;ve already taken considerable steps from away from C-like languages; for example, removing C-like for-loop syntax and unary increment/decrement operators.<br></p><p>I am with you here, Swift is Swift, C is C, Swift should not be hampered by keeping the syntax identical to C. But, it seems that most prefer to type less, so we should be really careful with proposing new keywords like this &#39;then&#39; and &#39;do&#39; as they carry little meaning,  have to be mandatory (as per Chris), and are really needed only for trailing closure which will not be used by everyone.<br></p><p>So, I&#39;m against adding these &#39;then&#39; and &#39;do&#39; keywords for the sake of providing the trailing support to &#39;if&#39; and &#39;for&#39;. And I do not see why we should prevent &#39;guard&#39; from gaining this support just because the &#39;if&#39; and &#39;for&#39; doesn&#39;t also have it.<br></p><p>Dany<br> <br>&gt; <br>&gt;&gt; On Apr 3, 2016, at 11:44 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Le 2 avr. 2016 à 15:39, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt; I think there is a lot of value to allowing trailing closures in the guard condition clause. However, not at the cost of inconsistency. We have reviewed many proposals over the last month that addressed consistency issues in the Swift language, and if I&#39;m not mistaken, all of them have been accepted by the community, larger to eliminate the inconsistency.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because of this, I think two of the alternatives stated by the proposal have credibility:<br>&gt;&gt;&gt; 1) Eliminate the &quot;else&quot; keyword from the guard syntax.<br>&gt;&gt;&gt; 2) Add keywords to &quot;if&quot;, &quot;while&quot;, &quot;for&quot;, and &quot;switch&quot; to delineate the condition clause from the body of the statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The second alternative has more appeal, because it supports trailing closures without &quot;heroics&quot;.<br>&gt;&gt; <br>&gt;&gt; It have been mentioned multiple times that allowing trailing closure only for guard is creating an inconsistency, but these keywords already are inconsistent with the each other (beside the presence of the &#39;trailing&#39; else keyword) on the variable scoping:<br>&gt;&gt; <br>&gt;&gt; - guard let: outer scope immutable variable<br>&gt;&gt; - if let: inner scope immutable variable<br>&gt;&gt; - for: inner scope immutable variable without let keyword<br>&gt;&gt; <br>&gt;&gt; Consistency is good, but since each keywords are not for the exact same thing, it is normal to see some variances.  Like the global scope of the immutable variable created by guard; as per the intent of the keyword, or its trailing else keyword; needed to clarify that what follow is for, for lack of better word, the &#39;else&#39; case.<br>&gt;&gt; <br>&gt;&gt; So as long as such inconsistency have a &quot;raison d&#39;être&quot;, that they have been designed and are not an oversight; there should be no reason to not allow them.<br>&gt;&gt; <br>&gt;&gt; Dany<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; No.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; No. Please don&#39;t add inconsistencies to the language, as we&#39;re just going to have to deal with it down the road.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; Not in my experience.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In-depth study.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/fee6685a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  5, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; Am 05.04.2016 um 01:52 schrieb Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt;:.<br>&gt; <br>&gt; I am with you here, Swift is Swift, C is C, Swift should not be hampered by keeping the syntax identical to C. But, it seems that most prefer to type less, so we should be really careful with proposing new keywords like this &#39;then&#39; and &#39;do&#39; as they carry little meaning,  have to be mandatory (as per Chris), and are really needed only for trailing closure which will not be used by everyone.<br>&gt; <br>&gt; So, I&#39;m against adding these &#39;then&#39; and &#39;do&#39; keywords for the sake of providing the trailing support to &#39;if&#39; and &#39;for&#39;.<br></p><p>FWIW adding &#39;then&#39; would allow using &#39;if&#39; as an expression by replacing the {...} blocks with expressions. One argument against &#39;if&#39; expressions was that { } are ugly within an expression. So there might be a benefit besides providing trailing support.<br></p><p>-Thorsten<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>April  5, 2016 at 09:00:00pm</p></header><div class="content"><p>Yet another inconsistency in this area (for people who care about them)<br></p><p>While the &#39;while {}&#39; does not support trailing closures, the &#39;repeat {} while&#39; does support them. So, will the folks against supporting them in &#39;guard&#39; ask for a change to drop the support in the &#39;repeat {} while&#39;?<br></p><p>Dany<br></p><p>&gt; Le 4 avr. 2016 à 19:52, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; Le 4 avr. 2016 à 10:19, Patrick Gili &lt;gili.patrick.r at gili-labs.com&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; If I understand you correctly, you think adding keywords represents an inconsistency.<br>&gt; <br>&gt; I didn&#39;t write that, maybe I should have put my reply between your two paragraphs. Adding keywords such as &#39;then&#39; and &#39;do&#39; could add some consistency, but another word than &#39;do&#39; will likely have to be found as &#39;do&#39; could break code as highlighted by Xiaodi, as well as cause by the &#39;catch&#39; case caught by Jeremy.<br>&gt; <br>&gt; I was merely highlighting the current inconsistency of the variable scope of &#39;guard let&#39; versus &#39;if let&#39; which no one had mentioned so far... An inconsistency which is (logically) fully design intent and will remain forever. So some inconsistencies are acceptable, <br>&gt; <br>&gt; Is accepting trailing closure in &#39;guard&#39; really a new inconsistency?<br>&gt; Being unable to use them with &#39;guard&#39;, &#39;if&#39;, &#39;switch&#39; is the original inconsistency as the trailing closure seemed to be use in many places (including argument list of another function). Adding &#39;guard&#39; as a location where trailing closure are allowed doesn&#39;t really introduce a new inconsistency, it just incompletely reduce an existing inconsistency.<br>&gt; <br>&gt;&gt; However, I think it would add considerable consistency and utility to the Swift language. Yes, it would make it inconsistent with the generations of C-like languages that have come before it. However, I think we&#39;ve already taken considerable steps from away from C-like languages; for example, removing C-like for-loop syntax and unary increment/decrement operators.<br>&gt; <br>&gt; I am with you here, Swift is Swift, C is C, Swift should not be hampered by keeping the syntax identical to C. But, it seems that most prefer to type less, so we should be really careful with proposing new keywords like this &#39;then&#39; and &#39;do&#39; as they carry little meaning,  have to be mandatory (as per Chris), and are really needed only for trailing closure which will not be used by everyone.<br>&gt; <br>&gt; So, I&#39;m against adding these &#39;then&#39; and &#39;do&#39; keywords for the sake of providing the trailing support to &#39;if&#39; and &#39;for&#39;. And I do not see why we should prevent &#39;guard&#39; from gaining this support just because the &#39;if&#39; and &#39;for&#39; doesn&#39;t also have it.<br>&gt; <br>&gt; Dany<br>&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; On Apr 3, 2016, at 11:44 AM, Dany St-Amant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Le 2 avr. 2016 à 15:39, Patrick Gili via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; I think there is a lot of value to allowing trailing closures in the guard condition clause. However, not at the cost of inconsistency. We have reviewed many proposals over the last month that addressed consistency issues in the Swift language, and if I&#39;m not mistaken, all of them have been accepted by the community, larger to eliminate the inconsistency.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Because of this, I think two of the alternatives stated by the proposal have credibility:<br>&gt;&gt;&gt;&gt; 1) Eliminate the &quot;else&quot; keyword from the guard syntax.<br>&gt;&gt;&gt;&gt; 2) Add keywords to &quot;if&quot;, &quot;while&quot;, &quot;for&quot;, and &quot;switch&quot; to delineate the condition clause from the body of the statement.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The second alternative has more appeal, because it supports trailing closures without &quot;heroics&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It have been mentioned multiple times that allowing trailing closure only for guard is creating an inconsistency, but these keywords already are inconsistent with the each other (beside the presence of the &#39;trailing&#39; else keyword) on the variable scoping:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - guard let: outer scope immutable variable<br>&gt;&gt;&gt; - if let: inner scope immutable variable<br>&gt;&gt;&gt; - for: inner scope immutable variable without let keyword<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Consistency is good, but since each keywords are not for the exact same thing, it is normal to see some variances.  Like the global scope of the immutable variable created by guard; as per the intent of the keyword, or its trailing else keyword; needed to clarify that what follow is for, for lack of better word, the &#39;else&#39; case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So as long as such inconsistency have a &quot;raison d&#39;être&quot;, that they have been designed and are not an oversight; there should be no reason to not allow them.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dany<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; No.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; No. Please don&#39;t add inconsistencies to the language, as we&#39;re just going to have to deal with it down the road.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; Not in my experience.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In-depth study.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160405/482125f4/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>April  2, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1. I stumble on this quite often.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>yes<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>yes<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>quick reading<br></p><p><br>&gt; On Mar 31, 2016, at 11:27 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160402/00f33e74/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Interesting idea to put keywords in the other statements so that they can<br>also use trailing closures!<br></p><p>On Sunday, 3 April 2016, Ilya Belenkiy via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; +1. I stumble on this quite often.<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; yes<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; yes<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; quick reading<br>&gt;<br>&gt;<br>&gt;    -<br>&gt;<br>&gt;<br>&gt; On Mar 31, 2016, at 11:27 PM, Douglas Gregor via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot;<br>&gt; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/7247d589/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  3, 2016 at 04:00:00pm</p></header><div class="content"><p>Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br></p><p>I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br></p><p>	for eachValue in theValues do { … }<br></p><p>Which is very, very clear on what’s happening there and I like the consistency of every block having a kind of type (do, else, defer, catch etc.). That said it’s probably grounds for a separate, supplementary proposal once guard has this capability? Of course if it can be done at the same time that’d be great too, as the implementation of this proposal should assume that if/while will gain the same ability at some point once we decide how to do it.<br></p><p>&gt; On 3 Apr 2016, at 13:44, Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Interesting idea to put keywords in the other statements so that they can also use trailing closures!<br>&gt; <br>&gt; On Sunday, 3 April 2016, Ilya Belenkiy via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; +1. I stumble on this quite often.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; yes<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; yes<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; quick reading<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 31, 2016, at 11:27 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -- Howard.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/38f59bb9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  3, 2016 at 02:00:00pm</p></header><div class="content"><p>One idea related to this `for...do` syntax--maybe this will satisfy<br>some objections listed in the proposal:<br></p><p>Currently, Swift has optional semicolons. In the same spirit, suppose<br>control statements have optional colons, like this: `for eachValue in<br>theValues: { code }`. All current syntax continues to work, but you<br>could then use closures in control statements by putting in a colon<br>after the expression.<br></p><p>No new keywords would be needed, things would be very terse, and the<br>syntax would be unambiguous.<br></p><p>I&#39;m proposing this because, even though the `for...do` idea is<br>interesting, I&#39;m -1 as it is because it can create other ambiguities.<br>For example, imagine that you have `frobnicate(_: Int)` and<br>`frobnicate(_: Int, compare: (Int) -&gt; Bool)`. Which function is being<br>called if you see the following?<br></p><p>```<br>for i in frobnicate(1) {<br>// code<br>}<br>do {<br>// code<br>}<br>```<br></p><p>Either you would need new rules about line breaks (adding new<br>inconsistencies between control statements, because `if...else` has<br>very flexible rules about line breaks), or else the meaning of the<br>code above would change if the lines that followed were:<br></p><p>```<br>catch {<br>// code<br>}<br>```<br></p><p><br>On Sun, Apr 3, 2016 at 10:20 AM, Haravikk via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for<br>&gt; consistency’s sake.<br>&gt;<br>&gt; I actually really like the idea of having trailing keywords in loops and if<br>&gt; statements, these needn’t be required (except where a trailing closure is<br>&gt; used) but for example it means I could do a fully natural language loop<br>&gt; like:<br>&gt;<br>&gt; for eachValue in theValues do { … }<br>&gt;<br>&gt; Which is very, very clear on what’s happening there and I like the<br>&gt; consistency of every block having a kind of type (do, else, defer, catch<br>&gt; etc.). That said it’s probably grounds for a separate, supplementary<br>&gt; proposal once guard has this capability? Of course if it can be done at the<br>&gt; same time that’d be great too, as the implementation of this proposal should<br>&gt; assume that if/while will gain the same ability at some point once we decide<br>&gt; how to do it.<br>&gt;<br>&gt; On 3 Apr 2016, at 13:44, Howard Lovatt via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Interesting idea to put keywords in the other statements so that they can<br>&gt; also use trailing closures!<br>&gt;<br>&gt; On Sunday, 3 April 2016, Ilya Belenkiy via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt;<br>&gt;&gt; +1. I stumble on this quite often.<br>&gt;&gt;<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to<br>&gt;&gt; Swift?<br>&gt;&gt;<br>&gt;&gt; yes<br>&gt;&gt;<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;<br>&gt;&gt; yes<br>&gt;&gt;<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt; or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; quick reading<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Mar 31, 2016, at 11:27 PM, Douglas Gregor via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot;<br>&gt;&gt; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt;&gt; top of the message:<br>&gt;&gt;<br>&gt;&gt; Proposal link:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt;&gt;<br>&gt;&gt; Reply text<br>&gt;&gt;<br>&gt;&gt; Other replies<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and, eventually, determine the direction of<br>&gt;&gt; Swift. When writing your review, here are some questions you might want to<br>&gt;&gt; answer in your review:<br>&gt;&gt;<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to<br>&gt;&gt; Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how<br>&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt; or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; Doug Gregor<br>&gt;&gt;<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -- Howard.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>April  4, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 3 Apr 2016, at 17:20, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br>&gt; <br>&gt; I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br>&gt; <br>&gt; 	for eachValue in theValues do { … }<br></p><p>This is actually kind of bizarre. Here we are trying to invent new syntax so that the trailing closure can be used in if/while conditions and for sequences. However, there is already a perfectly good syntax for putting closures in these positions: put the closure in the parentheses of the function call. Are people really so desperate to use trailing closures everywhere that we have to add new keywords to the language? I don’t think they are.<br></p><p>&gt; <br>&gt; I like the consistency of every block having a kind of type (do, else, defer, catch etc.). <br></p><p>That is a rabbit hole down which you probably shouldn&#39;t go. If we go down the route of blocks having a “type”, the current situation in Swift becomes somewhat inconsistent. I would argue that the `else` block on a `guard` is of a different type to the `else` block on an `if`. If anything, the `else` block of an `if` is closer to the `then` block. Also, would you allow the `do` block in a `for` or `while` to have a `catch` block following it? If not, then these blocks are different to the  existing bare `do` block.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  4, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Am 04.04.2016 um 16:49 schrieb Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Apr 2016, at 17:20, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br>&gt;&gt; <br>&gt;&gt; I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br>&gt;&gt; <br>&gt;&gt;    for eachValue in theValues do { … }<br>&gt; <br>&gt; This is actually kind of bizarre. Here we are trying to invent new syntax so that the trailing closure can be used in if/while conditions and for sequences. However, there is already a perfectly good syntax for putting closures in these positions: put the closure in the parentheses of the function call. Are people really so desperate to use trailing closures everywhere that we have to add new keywords to the language? I don’t think they are.<br></p><p>I agree.<br>While I&#39;m a big proponent of trailing closures to create DSL like control constructs and prefer them over nesting closures within parentheses I don&#39;t think it is a good idea to mix such DSL like control constructs with existing control constructs as this would not increase readability but rather decrease it (compare e.g. the example given by Xiaodi).<br></p><p>Therefore I&#39;m -1 on this proposal and think it&#39;s fine having to use parentheses instead of trailing closures in such cases.<br></p><p>-Thorsten<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April  4, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 4 Apr 2016, at 15:49, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 3 Apr 2016, at 17:20, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br>&gt;&gt; <br>&gt;&gt; I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br>&gt;&gt; <br>&gt;&gt; 	for eachValue in theValues do { … }<br>&gt; <br>&gt; This is actually kind of bizarre. Here we are trying to invent new syntax so that the trailing closure can be used in if/while conditions and for sequences. However, there is already a perfectly good syntax for putting closures in these positions: put the closure in the parentheses of the function call. Are people really so desperate to use trailing closures everywhere that we have to add new keywords to the language? I don’t think they are.<br></p><p>While I kind of agree (and personally prefer the use of parenthesis in most places anyway) it’s an inconsistency to be unable to use them I think. While It’s understandable from a parsing/ambiguity perspective, it’s not really intuitive.<br></p><p>&gt;&gt; I like the consistency of every block having a kind of type (do, else, defer, catch etc.). <br>&gt; <br>&gt; That is a rabbit hole down which you probably shouldn&#39;t go. If we go down the route of blocks having a “type”, the current situation in Swift becomes somewhat inconsistent. I would argue that the `else` block on a `guard` is of a different type to the `else` block on an `if`. If anything, the `else` block of an `if` is closer to the `then` block. Also, would you allow the `do` block in a `for` or `while` to have a `catch` block following it? If not, then these blocks are different to the  existing bare `do` block. <br></p><p>Actually that’s not quite what I meant by “type”; while there is a case to be made for unifying these more (else and catch on loops for example) I just meant more along the lines that “do” would always group the main branch, “else” indicates an alternative path if a condition isn’t met and so-on. For the short term however this would just be a case of allowing do on the end to eliminate ambiguity and thus allow trailing closures, but in the long term it could be explored further.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>April  4, 2016 at 11:00:00am</p></header><div class="content"><p>On Mon, Apr 4, 2016 at 11:18 AM, Haravikk via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; On 4 Apr 2016, at 15:49, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On 3 Apr 2016, at 17:20, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;      for eachValue in theValues do { … }<br>&gt;&gt;<br>&gt;&gt; This is actually kind of bizarre. Here we are trying to invent new syntax so that the trailing closure can be used in if/while conditions and for sequences. However, there is already a perfectly good syntax for putting closures in these positions: put the closure in the parentheses of the function call. Are people really so desperate to use trailing closures everywhere that we have to add new keywords to the language? I don’t think they are.<br>&gt;<br>&gt; While I kind of agree (and personally prefer the use of parenthesis in most places anyway) it’s an inconsistency to be unable to use them I think. While It’s understandable from a parsing/ambiguity perspective, it’s not really intuitive.<br></p><p>I think it&#39;s quite consistent. Trailing closures must be trailing.<br>Interpret that to mean that it must be the last thing surrounded by<br>braces, not just the last closure. If a function takes two closures,<br>only the last can be written with trailing closure syntax. In the<br>context of a control statement, if a block of code surrounded by<br>braces follows the closure, the closure cannot be written in trailing<br>closure syntax. By your argument for &quot;consistency,&quot; all closures<br>should be allowed to be written in trailing syntax, so that for `func<br>foo(_: Int, _: () -&gt; (), _: () -&gt; ())`, I should be able to write<br>`func foo(2) { /* code */ } { /* code */ }`. I don&#39;t think we need<br>that level of &quot;consistency.&quot;<br></p><p>&gt;<br>&gt;&gt;&gt; I like the consistency of every block having a kind of type (do, else, defer, catch etc.).<br>&gt;&gt;<br>&gt;&gt; That is a rabbit hole down which you probably shouldn&#39;t go. If we go down the route of blocks having a “type”, the current situation in Swift becomes somewhat inconsistent. I would argue that the `else` block on a `guard` is of a different type to the `else` block on an `if`. If anything, the `else` block of an `if` is closer to the `then` block. Also, would you allow the `do` block in a `for` or `while` to have a `catch` block following it? If not, then these blocks are different to the  existing bare `do` block.<br>&gt;<br>&gt; Actually that’s not quite what I meant by “type”; while there is a case to be made for unifying these more (else and catch on loops for example) I just meant more along the lines that “do” would always group the main branch, “else” indicates an alternative path if a condition isn’t met and so-on. For the short term however this would just be a case of allowing do on the end to eliminate ambiguity and thus allow trailing closures, but in the long term it could be explored further.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>April  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 4 Apr 2016, at 18:18, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On 4 Apr 2016, at 15:49, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On 3 Apr 2016, at 17:20, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Although I use trailing closures a lot less now, I think I’m a +1 anyway for consistency’s sake.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I actually really like the idea of having trailing keywords in loops and if statements, these needn’t be required (except where a trailing closure is used) but for example it means I could do a fully natural language loop like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	for eachValue in theValues do { … }<br>&gt;&gt; <br>&gt;&gt; This is actually kind of bizarre. Here we are trying to invent new syntax so that the trailing closure can be used in if/while conditions and for sequences. However, there is already a perfectly good syntax for putting closures in these positions: put the closure in the parentheses of the function call. Are people really so desperate to use trailing closures everywhere that we have to add new keywords to the language? I don’t think they are.<br>&gt; <br>&gt; While I kind of agree (and personally prefer the use of parenthesis in most places anyway) it’s an inconsistency to be unable to use them I think. While It’s understandable from a parsing/ambiguity perspective, it’s not really intuitive.<br></p><p>But the resolution would be another inconsistency i.e. a separate keyword that is only required if the condition has a trailing closure. Furthermore, that is an inconsistency that adds extra complexity to the language.<br></p><p>&gt; <br>&gt;&gt;&gt; I like the consistency of every block having a kind of type (do, else, defer, catch etc.). <br>&gt;&gt; <br>&gt;&gt; That is a rabbit hole down which you probably shouldn&#39;t go. If we go down the route of blocks having a “type”, the current situation in Swift becomes somewhat inconsistent. I would argue that the `else` block on a `guard` is of a different type to the `else` block on an `if`. If anything, the `else` block of an `if` is closer to the `then` block. Also, would you allow the `do` block in a `for` or `while` to have a `catch` block following it? If not, then these blocks are different to the  existing bare `do` block. <br>&gt; <br>&gt; Actually that’s not quite what I meant by “type”; while there is a case to be made for unifying these more (else and catch on loops for example) I just meant more along the lines that “do” would always group the main branch, “else” indicates an alternative path if a condition isn’t met and so-on. For the short term however this would just be a case of allowing do on the end to eliminate ambiguity and thus allow trailing closures, but in the long term it could be explored further.<br></p><p>I don’t view the `else` on an `if` as being some kind of second class citizen, it’s simply one of two alternate execution paths, whereas the `else` on a `guard` really is a second class citizen - it is even restricted what you can put in the block i.e. it must cause the enclosing scope to be exited. <br></p><p>The reason why I called it a rabbit hole is because regarding the keyword in front of a block as denoting the kind of block it is, leads us to having to change a lot in order to make it meaningful and consistent.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>April  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Like others, I&#39;m -1 on this due to added inconsistency between the guard and other control flow statements.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 01 Apr 2016, at 05:27, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160403/26a8da2d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>April  4, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Mar 31, 2016, at 8:27 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; What is your evaluation of the proposal?<br>+1 - I’m in favor of it.<br></p><p><br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p><br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes. The point of trailing closure syntax is to allow user-defined functions to look like natural control flow statements. This is especially true for guard and the omission of the capability is an obvious oversight. The arguments against it seem to be arguments against trailing closure syntax entirely which is a separate issue from this proposal. So long as trailing closure syntax exists it should be usable in a guard statement.<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Reading the proposal and the various threads, plus some thinking time.<br></p><p><br></p><p><br>Russ<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160404/86e81464/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>April  5, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1. I like the rule of “don’t make me think”. If I write a piece of code that seems correct to me, why would the compiler “intentionally” stop me from accepting it? Just smooth out this rough edge and remove one scenario in which a compiler error stops me in my work for an error that’s not essential complexity.<br></p><p>Yes, the price of it is a slight inconsistency, as this won’t work with `if foo { … } {`. But I seriously doubt anyone would actually *see* this as inconsistent. Most programmers would just not be stopped for writing `guard foo { … } else`, and would never notice. No error, no problem :) It’s just that now there’s one less place that is a potential error generator ;)<br></p><p>So, yeah, it seems like a fairly straightforward improvement. Not perfect as it doesn’t solve anything, but more like “Why not?&quot;<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Sure, why not ;)<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick reading, and I’ve roughly followed the initial discussion on the pitch as well.<br></p><p>Best,<br>— Radek<br></p><p>&gt; On 01 Apr 2016, at 05:27, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160405/312a3788/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fa5f52f699e07a98fefcf30fb95354?s=50"></div><header><strong>[Review] SE-0056: Allow trailing closures in `guard` conditions</strong> from <string>James Richard</string> &lt;ketzu at me.com&gt;<p>April  5, 2016 at 07:00:00am</p></header><div class="content"><p>+1. I feel this fits well with Swift, and the current inconsistency with other statements warrants the change.<br></p><p>&gt; On Mar 31, 2016, at 8:27 PM, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0056 &quot;Allow trailing closures in `guard` conditions&quot; begins now and runs through April 5, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160405/00cd25c0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
