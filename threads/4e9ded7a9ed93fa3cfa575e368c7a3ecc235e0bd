<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br></p><p>Currently swift does this:<br></p><p>&gt; print(Int?(3))<br>Optional(3)<br>&gt; print(String?(&quot;meow&quot;))<br>Optional(&quot;meow&quot;)<br></p><p>I think swift should do this:<br></p><p>&gt; print(Int?(3))<br>3<br>&gt; print(String?(&quot;meow&quot;))<br>&quot;meow&quot;<br>&gt; debugPrint(Int?(3))<br>Optional(3)<br>&gt; debugPrint(String?(&quot;meow&quot;))<br>Optional(&quot;meow&quot;)<br></p><p>When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br></p><p>When debugging data structures, it makes sense to include the &quot;Optional&quot; indicator.<br></p><p>What was the intention here and what do people think is the desired behavior?<br></p><p>Andy<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 10:00 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt; I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br>&gt;<br>&gt; Currently swift does this:<br>&gt;<br>&gt;&gt; print(Int?(3))<br>&gt; Optional(3)<br>&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt; Optional(&quot;meow&quot;)<br>&gt;<br>&gt; I think swift should do this:<br>&gt;<br>&gt;&gt; print(Int?(3))<br>&gt; 3<br>&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt; &quot;meow&quot;<br>&gt;&gt; debugPrint(Int?(3))<br>&gt; Optional(3)<br>&gt;&gt; debugPrint(String?(&quot;meow&quot;))<br>&gt; Optional(&quot;meow&quot;)<br>&gt;<br>&gt; When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br>&gt;<br>&gt; When debugging data structures, it makes sense to include the &quot;Optional&quot; indicator.<br>&gt;<br>&gt; What was the intention here and what do people think is the desired behavior?<br></p><p>This behavior was not accidental.  Here&#39;s the rationale:<br></p><p>If an Optional is nil, it should somehow indicate that.  Whatever the<br>representation is, it would be engineer-oriented and not suitable for<br>end users.  Thus, Optional should never be printed to users, it would<br>only ever be presented to engineers, and thus its print() and<br>debugPrint() representations should be the same.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 10:00 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;&gt; I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br>&gt;&gt; <br>&gt;&gt; Currently swift does this:<br>&gt;&gt; <br>&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt; Optional(3)<br>&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt; <br>&gt;&gt; I think swift should do this:<br>&gt;&gt; <br>&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt; 3<br>&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt; &quot;meow&quot;<br>&gt;&gt;&gt; debugPrint(Int?(3))<br>&gt;&gt; Optional(3)<br>&gt;&gt;&gt; debugPrint(String?(&quot;meow&quot;))<br>&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt; <br>&gt;&gt; When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br>&gt;&gt; <br>&gt;&gt; When debugging data structures, it makes sense to include the &quot;Optional&quot; indicator.<br>&gt;&gt; <br>&gt;&gt; What was the intention here and what do people think is the desired behavior?<br>&gt; <br>&gt; This behavior was not accidental.  Here&#39;s the rationale:<br>&gt; <br>&gt; If an Optional is nil, it should somehow indicate that.  Whatever the<br>&gt; representation is, it would be engineer-oriented and not suitable for<br>&gt; end users.  Thus, Optional should never be printed to users, it would<br>&gt; only ever be presented to engineers, and thus its print() and<br>&gt; debugPrint() representations should be the same.<br>&gt; <br>&gt; Dmitri<br></p><p>I think you&#39;re saying that it&#39;s the programmer&#39;s responsibility not to construct a user-visible String from an Optional.<br></p><p>By accidental, I mean that Optional does not conform to CustomStringConvertible. If we want &quot;Optional&quot; to be part of the string conversion, then this conformance needs to exist, or I need to add some special handling of Optional. Do you see any problem with me adding that conformance?<br></p><p>Incidentally, when *do* we want debug string conversion to deviate? Or is it just a customization point we anticipate to be useful?<br></p><p>Andy<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December  4, 2015 at 10:00:00pm</p></header><div class="content"><p>On Fri, Dec 4, 2015 at 10:21 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; On Dec 4, 2015, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Dec 4, 2015 at 10:00 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;&gt;&gt; I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Currently swift does this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt;&gt; Optional(3)<br>&gt;&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think swift should do this:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt;&gt; 3<br>&gt;&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt;&gt; &quot;meow&quot;<br>&gt;&gt;&gt;&gt; debugPrint(Int?(3))<br>&gt;&gt;&gt; Optional(3)<br>&gt;&gt;&gt;&gt; debugPrint(String?(&quot;meow&quot;))<br>&gt;&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; When debugging data structures, it makes sense to include the &quot;Optional&quot; indicator.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What was the intention here and what do people think is the desired behavior?<br>&gt;&gt;<br>&gt;&gt; This behavior was not accidental.  Here&#39;s the rationale:<br>&gt;&gt;<br>&gt;&gt; If an Optional is nil, it should somehow indicate that.  Whatever the<br>&gt;&gt; representation is, it would be engineer-oriented and not suitable for<br>&gt;&gt; end users.  Thus, Optional should never be printed to users, it would<br>&gt;&gt; only ever be presented to engineers, and thus its print() and<br>&gt;&gt; debugPrint() representations should be the same.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;<br>&gt; I think you&#39;re saying that it&#39;s the programmer&#39;s responsibility not to construct a user-visible String from an Optional.<br></p><p>No, the responsibility is not to display it to users.  It is OK to e.g., log it.<br></p><p>&gt; By accidental, I mean that Optional does not conform to CustomStringConvertible. If we want &quot;Optional&quot; to be part of the string conversion, then this conformance needs to exist, or I need to add some special handling of Optional. Do you see any problem with me adding that conformance?<br></p><p>Yes, the same behavior should also apply to any user-defined type: if<br>there is only CustomDebugStringConvertible conformance, it should be<br>used for String(x) initialization.<br></p><p>&gt; Incidentally, when *do* we want debug string conversion to deviate? Or is it just a customization point we anticipate to be useful?<br></p><p>For example, in String: the user-presentable representation is the<br>string itself, the engineer-oriented representation shows all special<br>characters as escape sequences.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>December  5, 2015 at 12:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:26 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 10:21 PM, Andrew Trick &lt;atrick at apple.com &lt;mailto:atrick at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 4, 2015, at 10:05 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Dec 4, 2015 at 10:00 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Currently swift does this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt;&gt;&gt; Optional(3)<br>&gt;&gt;&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt;&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think swift should do this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; print(Int?(3))<br>&gt;&gt;&gt;&gt; 3<br>&gt;&gt;&gt;&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt;&gt;&gt;&gt; &quot;meow&quot;<br>&gt;&gt;&gt;&gt;&gt; debugPrint(Int?(3))<br>&gt;&gt;&gt;&gt; Optional(3)<br>&gt;&gt;&gt;&gt;&gt; debugPrint(String?(&quot;meow&quot;))<br>&gt;&gt;&gt;&gt; Optional(&quot;meow&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; When debugging data structures, it makes sense to include the &quot;Optional&quot; indicator.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What was the intention here and what do people think is the desired behavior?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This behavior was not accidental.  Here&#39;s the rationale:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If an Optional is nil, it should somehow indicate that.  Whatever the<br>&gt;&gt;&gt; representation is, it would be engineer-oriented and not suitable for<br>&gt;&gt;&gt; end users.  Thus, Optional should never be printed to users, it would<br>&gt;&gt;&gt; only ever be presented to engineers, and thus its print() and<br>&gt;&gt;&gt; debugPrint() representations should be the same.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; I think you&#39;re saying that it&#39;s the programmer&#39;s responsibility not to construct a user-visible String from an Optional.<br>&gt; <br>&gt; No, the responsibility is not to display it to users.  It is OK to e.g., log it.<br>&gt; <br>&gt;&gt; By accidental, I mean that Optional does not conform to CustomStringConvertible. If we want &quot;Optional&quot; to be part of the string conversion, then this conformance needs to exist, or I need to add some special handling of Optional. Do you see any problem with me adding that conformance?<br>&gt; <br>&gt; Yes, the same behavior should also apply to any user-defined type: if<br>&gt; there is only CustomDebugStringConvertible conformance, it should be<br>&gt; used for String(x) initialization.<br>&gt; <br>&gt;&gt; Incidentally, when *do* we want debug string conversion to deviate? Or is it just a customization point we anticipate to be useful?<br>&gt; <br>&gt; For example, in String: the user-presentable representation is the<br>&gt; string itself, the engineer-oriented representation shows all special<br>&gt; characters as escape sequences.<br>&gt; <br>&gt; Dmitri<br></p><p>I understand, thanks for the explanation. But Optionals are not like<br>other user-defined types in this respect. Let me clarify with an<br>example...<br></p><p>class A : CustomStringConvertible, CustomDebugStringConvertible { <br>    init() {}<br>    var description: String { get { return &quot;Apple&quot; } } <br>    var debugDescription: String { get { return &quot;Swift&quot; } } <br>}<br></p><p>print(A?(A()) is CustomStringConvertible)<br>// true<br></p><p>// Now, Optional does not conform to CustomStringConvertible, but as<br>// you can see above it is convertible to CustomStringConvertible.<br>// As print_unlocked is currently written, the behavior should be:<br>print(String(A?(A())))<br>Apple<br></p><p>// But as you explained, that is not the behavior we want. We could fix<br>// it by making Optional counter-intuitively conform to<br>// CustomStringConvertible. This prevents down conversion to the wrapped<br>// type, instead printing &quot;Optional&quot; and the payload&#39;s debug string.<br></p><p>extension Optional : CustomStringConvertible {<br>  /// A textual representation of `self`, suitable for debugging.<br>  ///<br>  /// Optional has no representation suitable for an output<br>  /// stream. Consequently, String conversion should always produce a<br>  /// debug string indicating the Optional type and including the<br>  /// debug representation of the wrapped type.<br>  ///<br>  /// Optional must conform to CustomStringConvertible to avoid<br>  /// automatic conversion to its wrapped type during String<br>  /// conversion.<br>  public var description: String {<br>    return debugDescription<br>  }<br>}<br>print(String(A?(A())))<br>Optional(Swift)<br></p><p>I think this is the way to go.<br></p><p>Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151205/029ee5e5/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Optional to String conversion</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>December  5, 2015 at 04:00:00am</p></header><div class="content"><p>&gt; On Dec 4, 2015, at 10:00 PM, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt; <br>&gt; I’m adding runtime functionality to support optional casts and ran into some Optional to String conversion behavior that is currently somewhat accidental—it will break when I add functionality. I want to understand the desired behavior before doing extra work to fix it.<br>&gt; <br>&gt; Currently swift does this:<br>&gt; <br>&gt;&gt; print(Int?(3))<br>&gt; Optional(3)<br>&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt; Optional(&quot;meow&quot;)<br>&gt; <br>&gt; I think swift should do this:<br>&gt; <br>&gt;&gt; print(Int?(3))<br>&gt; 3<br>&gt;&gt; print(String?(&quot;meow&quot;))<br>&gt; &quot;meow&quot;<br>&gt;&gt; debugPrint(Int?(3))<br>&gt; Optional(3)<br>&gt;&gt; debugPrint(String?(&quot;meow&quot;))<br>&gt; Optional(&quot;meow&quot;)<br>&gt; <br>&gt; When a value already knows how to represent itself as a string, I don&#39;t think that the string &quot;Optional&quot; belongs in the textual representation.<br></p><p>There are unfortunate output ambiguities if you don&#39;t include it.<br></p><p>Consider the output of all of these:<br></p><p>print(String?(&quot;test&quot;))<br>print(String?(&quot;nil&quot;))<br>print(String?.None)<br></p><p>The current output is unambiguous:<br></p><p>print(String?(&quot;test&quot;))<br>    Optional(&quot;test&quot;)<br>print(String?(&quot;nil&quot;))<br>    Optional(&quot;nil&quot;)<br>print(String?.None)<br>    nil<br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
