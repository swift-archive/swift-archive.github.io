<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Returning nothing</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>July 21, 2016 at 12:00:00pm</p></header><div class="content"><p>This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br></p><p>So<br></p><p>f: ( input: Int) -&gt; Void<br></p><p>becomes<br></p><p>f: ( input: Int) -&gt; Nothing<br></p><p>Instead of saying “f takes an Int and returns a Void” I read this as “f takes an Int and returns nothing”.<br></p><p>I’ve been using f:(input: Int) -&gt; () because it’s easier to explain than Void to non-experienced programmers. Experienced programmers have no problem with Void. But Void seems to be something we’re using just because we have for a while - like x++ and C-style for loops.<br></p><p>Best,<br></p><p>Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Returning nothing</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br></p><p>Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md). I think it would be confusing to rename Void to Nothing.<br></p><p>If we consider renaming it Unit is the obvious way to go (https://en.m.wikipedia.org/wiki/Unit_type)<br></p><p>&gt; <br>&gt; So<br>&gt; <br>&gt; f: ( input: Int) -&gt; Void<br>&gt; <br>&gt; becomes<br>&gt; <br>&gt; f: ( input: Int) -&gt; Nothing<br>&gt; <br>&gt; Instead of saying “f takes an Int and returns a Void” I read this as “f takes an Int and returns nothing”.<br>&gt; <br>&gt; I’ve been using f:(input: Int) -&gt; () because it’s easier to explain than Void to non-experienced programmers. Experienced programmers have no problem with Void. But Void seems to be something we’re using just because we have for a while - like x++ and C-style for loops.<br>&gt; <br>&gt; Best,<br>&gt; <br>&gt; Daniel<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Returning nothing</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>Quite frankly, I think the ship has long sailed for renaming Void.<br></p><p><br>On Thu, Jul 21, 2016 at 11:52 AM, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; &gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; This may be a silly question - given that one of Swift’s design<br>&gt; principles is to be a language for new programmers and for APIs to read<br>&gt; like English phrases, should we replace the typealias of Void for the<br>&gt; return type () with Nothing.<br>&gt;<br>&gt; Nothing was one of the names considered for the bottom type that replaces<br>&gt; @noreturn (<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md).<br>&gt; I think it would be confusing to rename Void to Nothing.<br>&gt;<br>&gt; If we consider renaming it Unit is the obvious way to go (<br>&gt; https://en.m.wikipedia.org/wiki/Unit_type)<br>&gt;<br>&gt; &gt;<br>&gt; &gt; So<br>&gt; &gt;<br>&gt; &gt; f: ( input: Int) -&gt; Void<br>&gt; &gt;<br>&gt; &gt; becomes<br>&gt; &gt;<br>&gt; &gt; f: ( input: Int) -&gt; Nothing<br>&gt; &gt;<br>&gt; &gt; Instead of saying “f takes an Int and returns a Void” I read this as “f<br>&gt; takes an Int and returns nothing”.<br>&gt; &gt;<br>&gt; &gt; I’ve been using f:(input: Int) -&gt; () because it’s easier to explain than<br>&gt; Void to non-experienced programmers. Experienced programmers have no<br>&gt; problem with Void. But Void seems to be something we’re using just because<br>&gt; we have for a while - like x++ and C-style for loops.<br>&gt; &gt;<br>&gt; &gt; Best,<br>&gt; &gt;<br>&gt; &gt; Daniel<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/0386cf99/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>Returning nothing</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>July 21, 2016 at 06:00:00pm</p></header><div class="content"><p>There&#39;s a difference between returning a void type and returning nothing.<br>An instance of Void is a catch-all &#39;something&#39; which conforms to no<br>protocols, which can be quite useful with generic types.<br></p><p>On Thu, Jul 21, 2016 at 5:59 PM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Quite frankly, I think the ship has long sailed for renaming Void.<br>&gt;<br>&gt;<br>&gt; On Thu, Jul 21, 2016 at 11:52 AM, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sent from my iPad<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This may be a silly question - given that one of Swift’s design<br>&gt;&gt; principles is to be a language for new programmers and for APIs to read<br>&gt;&gt; like English phrases, should we replace the typealias of Void for the<br>&gt;&gt; return type () with Nothing.<br>&gt;&gt;<br>&gt;&gt; Nothing was one of the names considered for the bottom type that replaces<br>&gt;&gt; @noreturn (<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md).<br>&gt;&gt; I think it would be confusing to rename Void to Nothing.<br>&gt;&gt;<br>&gt;&gt; If we consider renaming it Unit is the obvious way to go (<br>&gt;&gt; https://en.m.wikipedia.org/wiki/Unit_type)<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; So<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; f: ( input: Int) -&gt; Void<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; becomes<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; f: ( input: Int) -&gt; Nothing<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Instead of saying “f takes an Int and returns a Void” I read this as “f<br>&gt;&gt; takes an Int and returns nothing”.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I’ve been using f:(input: Int) -&gt; () because it’s easier to explain<br>&gt;&gt; than Void to non-experienced programmers. Experienced programmers have no<br>&gt;&gt; problem with Void. But Void seems to be something we’re using just because<br>&gt;&gt; we have for a while - like x++ and C-style for loops.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Best,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Daniel<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/3aa871a7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Returning nothing</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 21, 2016, at 11:59 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; Quite frankly, I think the ship has long sailed for renaming Void.<br></p><p>Agree.  I’m not advocating change, just stating things that should be considered if anyone wants to propose it.<br></p><p>&gt; <br>&gt; <br>&gt; On Thu, Jul 21, 2016 at 11:52 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; &gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br>&gt; <br>&gt; Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;). I think it would be confusing to rename Void to Nothing.<br>&gt; <br>&gt; If we consider renaming it Unit is the obvious way to go (https://en.m.wikipedia.org/wiki/Unit_type &lt;https://en.m.wikipedia.org/wiki/Unit_type&gt;)<br>&gt; <br>&gt; &gt;<br>&gt; &gt; So<br>&gt; &gt;<br>&gt; &gt; f: ( input: Int) -&gt; Void<br>&gt; &gt;<br>&gt; &gt; becomes<br>&gt; &gt;<br>&gt; &gt; f: ( input: Int) -&gt; Nothing<br>&gt; &gt;<br>&gt; &gt; Instead of saying “f takes an Int and returns a Void” I read this as “f takes an Int and returns nothing”.<br>&gt; &gt;<br>&gt; &gt; I’ve been using f:(input: Int) -&gt; () because it’s easier to explain than Void to non-experienced programmers. Experienced programmers have no problem with Void. But Void seems to be something we’re using just because we have for a while - like x++ and C-style for loops.<br>&gt; &gt;<br>&gt; &gt; Best,<br>&gt; &gt;<br>&gt; &gt; Daniel<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/0bd8f1d9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Returning nothing</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>July 21, 2016 at 06:00:00pm</p></header><div class="content"><p>Thanks all,<br></p><p>I did note that Nothing had been considered for another purpose and rejected so I didn’t think it would cause confusion.<br></p><p>I understand folks who advocate another name such as Unit but don’t feel that would help newcomers. Unit doesn’t seem to be more intuitive for them than Void.<br></p><p>Chris’ note addressed my misconception that a goal of Swift was that it could be a good first or learning language. I apologize for drawing that conclusion from (perhaps misreading) articles about Playgrounds that mentioned Swift as being designed so that it was a ideal for children and new programmers. The articles may have meant that the environment was designed for that purpose not the language.<br></p><p>Although my examples were in stand-alone functions, I was really thinking about functions that are passed as argument to other functions.<br></p><p>Given the response, there doesn’t seem to be a reason for me to draw up a proposal.<br></p><p>Thank you for the quick feedback,<br></p><p>Best,<br></p><p>Daniel<br></p><p><br>&gt; On Jul 21, 2016, at 1:19 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 21, 2016, at 11:59 AM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Quite frankly, I think the ship has long sailed for renaming Void.<br>&gt; <br>&gt; Agree.  I’m not advocating change, just stating things that should be considered if anyone wants to propose it.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Thu, Jul 21, 2016 at 11:52 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt; &gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br>&gt;&gt; <br>&gt;&gt; Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md&gt;). I think it would be confusing to rename Void to Nothing.<br>&gt;&gt; <br>&gt;&gt; If we consider renaming it Unit is the obvious way to go (https://en.m.wikipedia.org/wiki/Unit_type &lt;https://en.m.wikipedia.org/wiki/Unit_type&gt;)<br>&gt;&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; So<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; f: ( input: Int) -&gt; Void<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; becomes<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; f: ( input: Int) -&gt; Nothing<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Instead of saying “f takes an Int and returns a Void” I read this as “f takes an Int and returns nothing”.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I’ve been using f:(input: Int) -&gt; () because it’s easier to explain than Void to non-experienced programmers. Experienced programmers have no problem with Void. But Void seems to be something we’re using just because we have for a while - like x++ and C-style for loops.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Best,<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Daniel<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/5b5799a7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Returning nothing</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 21, 2016 at 03:00:00pm</p></header><div class="content"><p>On Jul 21, 2016, at 3:02 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Chris’ note addressed my misconception that a goal of Swift was that it could be a good first or learning language.<br></p><p>Please clarify this.  I said that Swift was not designed to mock English grammar.  It is absolutely intended to be a good teaching language, and I never said otherwise.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5af07e950f10c7c1df1c44bed055c1eb?s=50"></div><header><strong>Returning nothing</strong> from <string>Daniel Steinberg</string> &lt;daniel at dimsumthinking.com&gt;<p>July 21, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks for the clarification <br></p><p>I misunderstood your comment.<br></p><p>&gt; On Jul 21, 2016, at 6:29 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; On Jul 21, 2016, at 3:02 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Chris’ note addressed my misconception that a goal of Swift was that it could be a good first or learning language.<br>&gt; <br>&gt; Please clarify this.  I said that Swift was not designed to mock English grammar.  It is absolutely intended to be a good teaching language, and I never said otherwise.<br>&gt; <br>&gt; -Chris<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15947d27758dc90df81fd42c4a387bbb?s=50"></div><header><strong>Returning nothing</strong> from <string>James Dempsey</string> &lt;dempsey at mac.com&gt;<p>July 22, 2016 at 02:00:00pm</p></header><div class="content"><p>I think there might be some confusion since the Swift API Design Guidelines session at WWDC 2016 mentions:<br>“One of the principles of this particular API Design Guidelines is that we really want the use sites to read grammatically.”<br>and continues with a number of examples.<br></p><p>and the current Swift API Design Guidelines state:<br>“Prefer method and function names that make use sites form grammatical English phrases.”.<br></p><p>So there has been strong guidance to prefer Swift APIs that read like English grammar at the call site.<br></p><p>But I don’t think there has been any guidance to make API declarations read like English grammar.<br></p><p>But Chris just wrote:<br>&gt; I said that Swift was not designed to mock English grammar<br></p><p><br>My understanding is that:<br></p><p>- It is preferable for method and function names to form grammatical English phrases at the call site — but not absolutely necessary if something that breaks this guideline provides more clarity at the call site.<br></p><p>- There is no guidance that API declarations are expected to read grammatically<br></p><p>Is my understanding correct?<br></p><p>Thanks,<br></p><p>James<br></p><p>———————<br>James Dempsey<br>dempsey at mac.com<br></p><p><br></p><p>&gt; On Jul 21, 2016, at 3:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Jul 21, 2016, at 3:02 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Chris’ note addressed my misconception that a goal of Swift was that it could be a good first or learning language.<br>&gt; <br>&gt; Please clarify this.  I said that Swift was not designed to mock English grammar.  It is absolutely intended to be a good teaching language, and I never said otherwise.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>Returning nothing</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>On Jul 22, 2016, at 2:38 PM, James Dempsey via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think there might be some confusion since the Swift API Design Guidelines session at WWDC 2016 mentions:<br>&gt; “One of the principles of this particular API Design Guidelines is that we really want the use sites to read grammatically.”<br>&gt; and continues with a number of examples.<br>&gt; <br>&gt; and the current Swift API Design Guidelines state:<br>&gt; “Prefer method and function names that make use sites form grammatical English phrases.”.<br>&gt; <br>&gt; So there has been strong guidance to prefer Swift APIs that read like English grammar at the call site.<br>&gt; <br>&gt; But I don’t think there has been any guidance to make API declarations read like English grammar.<br>&gt; <br>&gt; But Chris just wrote:<br>&gt;&gt; I said that Swift was not designed to mock English grammar<br>&gt; <br>&gt; <br></p><p>We shouldn’t conflate language design and API design. It’s true that a programming language’s builtin keywords make up part of all APIs at the end of the day. But the language has a different set of priorities. Language designer (most of the time) have more syntax to worry about than API designers. The importance of term of art, succinctness, read-like-natural-language-ness…have different weights compared to APIs (not saying one way or another). <br></p><p>&gt; My understanding is that:<br>&gt; <br>&gt; - It is preferable for method and function names to form grammatical English phrases at the call site — but not absolutely necessary if something that breaks this guideline provides more clarity at the call site.<br>&gt; <br>&gt; - There is no guidance that API declarations are expected to read grammatically<br>&gt; <br></p><p>You said it in the first point: clarity at point of use is preferred, not necessarily at the point of declaration.<br></p><p>&gt; Is my understanding correct?<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; James<br>&gt; <br>&gt; ———————<br>&gt; James Dempsey<br>&gt; dempsey at mac.com<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 21, 2016, at 3:29 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Jul 21, 2016, at 3:02 PM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Chris’ note addressed my misconception that a goal of Swift was that it could be a good first or learning language.<br>&gt;&gt; <br>&gt;&gt; Please clarify this.  I said that Swift was not designed to mock English grammar.  It is absolutely intended to be a good teaching language, and I never said otherwise.<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Returning nothing</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July 21, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 21 Jul 2016, at 17:52, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br>&gt; <br>&gt; Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md). I think it would be confusing to rename Void to Nothing.<br></p><p>I think on that issue the favourite for replacing @noreturn is Never or NoReturn, rather than Nothing (since @noreturn doesn&#39;t return nothing, it doesn&#39;t return in the first place), so Nothing is actually okay in that regard.<br></p><p>I wouldn&#39;t mind the change of name, as void to me suggests something like a yawning abyss, which implies a substantive gap, rather than an actual absence of something, whereas Nothing is a bit clearer. That said I&#39;ve never had any real trouble with Void, but can see Nothing being a tad easier to teach.<br></p><p>It&#39;s also not necessarily a very disruptive change, as many people don&#39;t write -&gt; Void and just omit it, though personally I prefer to always write it out explicitly.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Returning nothing</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 21, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jul 21, 2016, at 12:51 PM, Haravikk &lt;swift-evolution at haravikk.me&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 21 Jul 2016, at 17:52, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br>&gt;&gt; <br>&gt;&gt; Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md). I think it would be confusing to rename Void to Nothing.<br>&gt; <br>&gt; I think on that issue the favourite for replacing @noreturn is Never or NoReturn, rather than Nothing (since @noreturn doesn&#39;t return nothing, it doesn&#39;t return in the first place), so Nothing is actually okay in that regard.<br></p><p>Yes, Never won that debate.  But Nothing was considered and does imply “bottom type” to many people.  That is why I don’t think it is a good choice here.<br></p><p>&gt; <br>&gt; I wouldn&#39;t mind the change of name, as void to me suggests something like a yawning abyss, which implies a substantive gap, rather than an actual absence of something, whereas Nothing is a bit clearer. That said I&#39;ve never had any real trouble with Void, but can see Nothing being a tad easier to teach.<br>&gt; <br>&gt; It&#39;s also not necessarily a very disruptive change, as many people don&#39;t write -&gt; Void and just omit it, though personally I prefer to always write it out explicitly.<br></p><p>Agree.  I’m neutral on changing it.  I just think Nothing is the wrong name.  I would advocate Unit if we’re going to change it.  Both Unit and Void have precedence in other languages.  The precedence for Nothing in other languages is “bottom type” which means it is going to be a confusing choice.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>Returning nothing</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 22, 2016 at 08:00:00am</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jul 21, 2016, at 7:51 PM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 21 Jul 2016, at 17:52, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; On Jul 21, 2016, at 11:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This may be a silly question - given that one of Swift’s design principles is to be a language for new programmers and for APIs to read like English phrases, should we replace the typealias of Void for the return type () with Nothing.<br>&gt;&gt; <br>&gt;&gt; Nothing was one of the names considered for the bottom type that replaces @noreturn (https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md). I think it would be confusing to rename Void to Nothing.<br>&gt; <br>&gt; I think on that issue the favourite for replacing @noreturn is Never or NoReturn, rather than Nothing (since @noreturn doesn&#39;t return nothing, it doesn&#39;t return in the first place), so Nothing is actually okay in that regard.<br></p><p><br>TS 2.0 adopted &#39;never&#39;<br></p><p>&gt; <br>&gt; I wouldn&#39;t mind the change of name, as void to me suggests something like a yawning abyss, which implies a substantive gap, rather than an actual absence of something, whereas Nothing is a bit clearer. That said I&#39;ve never had any real trouble with Void, but can see Nothing being a tad easier to teach.<br>&gt; <br>&gt; It&#39;s also not necessarily a very disruptive change, as many people don&#39;t write -&gt; Void and just omit it, though personally I prefer to always write it out explicitly.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Returning nothing</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>On Jul 21, 2016, at 9:42 AM, Daniel Steinberg via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  given that one of Swift’s design principles is … for APIs to read like English phrases,<br></p><p>This isn’t a goal of Swift.  The goal is to provide clarity at point of use, and many other things:<br>https://swift.org/documentation/api-design-guidelines/<br></p><p>I don’t see any advantage to renaming Void, particularly given that almost no one writes Void for first-order functions.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
