<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[Swift 4] Organizing source stability</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Chris writes:<br></p><p>&gt; - *Source stability features: *These should be relatively small, but<br>&gt; important.  For example, we need a “-std=swift3” sort of compiler flag.  We<br>&gt; may also add a way to conditionally enable larger efforts that are under<br>&gt; development but not yet stable - in order to make it easier to experiment<br>&gt; with them.<br></p><p><br></p><p>I am curious whether the team has thoughts on how to organize the compiler<br>codebase in such a way that new features can be added, and possibly<br>source-breaking changes made, while still keeping the old functionality<br>around.<br></p><p>Are any obvious areas that will need refactoring to make this feasible?<br>(Perhaps they could be turned into StarterBugs.)<br></p><p>How many versions back would the compiler be expected to support? Should<br>the Swift 5 compiler still support Swift 3 code?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160729/7e4b588a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:20 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Chris writes:<br>&gt; - Source stability features: These should be relatively small, but important.  For example, we need a “-std=swift3” sort of compiler flag.  We may also add a way to conditionally enable larger efforts that are under development but not yet stable - in order to make it easier to experiment with them.<br>&gt; <br>&gt; <br>&gt; I am curious whether the team has thoughts on how to organize the compiler codebase in such a way that new features can be added, and possibly source-breaking changes made, while still keeping the old functionality around.<br>&gt; <br>&gt; Are any obvious areas that will need refactoring to make this feasible? (Perhaps they could be turned into StarterBugs.)<br></p><p>I think this would be a great thing to do.  We need a few things:<br></p><p>- The actual compiler flag.  It is worth bikeshedding how it is spelled. “-std=“ is good inspiration, but clearly the wrong specific name.<br></p><p>- The implementation should be straight forward: the flag should get plumbed through to a field in swift::LangOptions.  Code that diverges can then check it.<br></p><p>- Handling divergence in the standard library is another big issue.  We have some ideas here, but it depends on having the compiler work done anyway to hook into.<br></p><p>&gt; How many versions back would the compiler be expected to support? Should the Swift 5 compiler still support Swift 3 code?<br></p><p>To be determined.  Swift 4 should definitely support Swift 3, but Swift 5 perhaps not.  We can decide that when Swift 4 is winding down.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160729/ec88b581/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>July 29, 2016 at 05:00:00pm</p></header><div class="content"><p>Here are a few thoughts:<br></p><p>   - -swift=4<br>   - -swift-version=4<br>   - -language-version=4<br>   - a top-of-file &quot;shebang&quot;-style comment indicating the version,<br>   something like //#swift(4), mirroring the &quot;#if swift&quot; syntax<br></p><p><br>On Fri, Jul 29, 2016 at 5:27 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 29, 2016, at 5:20 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Chris writes:<br>&gt;<br>&gt;&gt; - *Source stability features: *These should be relatively small, but<br>&gt;&gt; important.  For example, we need a “-std=swift3” sort of compiler flag.  We<br>&gt;&gt; may also add a way to conditionally enable larger efforts that are under<br>&gt;&gt; development but not yet stable - in order to make it easier to experiment<br>&gt;&gt; with them.<br>&gt;<br>&gt;<br>&gt;<br>&gt; I am curious whether the team has thoughts on how to organize the compiler<br>&gt; codebase in such a way that new features can be added, and possibly<br>&gt; source-breaking changes made, while still keeping the old functionality<br>&gt; around.<br>&gt;<br>&gt; Are any obvious areas that will need refactoring to make this feasible?<br>&gt; (Perhaps they could be turned into StarterBugs.)<br>&gt;<br>&gt;<br>&gt; I think this would be a great thing to do.  We need a few things:<br>&gt;<br>&gt; - The actual compiler flag.  It is worth bikeshedding how it is spelled.<br>&gt; “-std=“ is good inspiration, but clearly the wrong specific name.<br>&gt;<br>&gt; - The implementation should be straight forward: the flag should get<br>&gt; plumbed through to a field in swift::LangOptions.  Code that diverges can<br>&gt; then check it.<br>&gt;<br>&gt; - Handling divergence in the standard library is another big issue.  We<br>&gt; have some ideas here, but it depends on having the compiler work done<br>&gt; anyway to hook into.<br>&gt;<br>&gt; How many versions back would the compiler be expected to support? Should<br>&gt; the Swift 5 compiler still support Swift 3 code?<br>&gt;<br>&gt;<br>&gt; To be determined.  Swift 4 should definitely support Swift 3, but Swift 5<br>&gt; perhaps not.  We can decide that when Swift 4 is winding down.<br>&gt;<br>&gt; -Chris<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160729/287cffae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 29, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt; wrote:<br>&gt; <br>&gt; Here are a few thoughts:<br>&gt; -swift=4<br>&gt; -swift-version=4<br></p><p>-swift-version seems like the best option to me, but Jordan will have a strong opinion.  I think he’s crazy busy with Swift 3 work until late next week.<br></p><p>-Chris<br></p><p><br>&gt; -language-version=4<br>&gt; a top-of-file &quot;shebang&quot;-style comment indicating the version, something like //#swift(4), mirroring the &quot;#if swift&quot; syntax<br>&gt; <br>&gt; On Fri, Jul 29, 2016 at 5:27 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:20 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Chris writes:<br>&gt;&gt; - Source stability features: These should be relatively small, but important.  For example, we need a “-std=swift3” sort of compiler flag.  We may also add a way to conditionally enable larger efforts that are under development but not yet stable - in order to make it easier to experiment with them.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I am curious whether the team has thoughts on how to organize the compiler codebase in such a way that new features can be added, and possibly source-breaking changes made, while still keeping the old functionality around.<br>&gt;&gt; <br>&gt;&gt; Are any obvious areas that will need refactoring to make this feasible? (Perhaps they could be turned into StarterBugs.)<br>&gt; <br>&gt; I think this would be a great thing to do.  We need a few things:<br>&gt; <br>&gt; - The actual compiler flag.  It is worth bikeshedding how it is spelled. “-std=“ is good inspiration, but clearly the wrong specific name.<br>&gt; <br>&gt; - The implementation should be straight forward: the flag should get plumbed through to a field in swift::LangOptions.  Code that diverges can then check it.<br>&gt; <br>&gt; - Handling divergence in the standard library is another big issue.  We have some ideas here, but it depends on having the compiler work done anyway to hook into.<br>&gt; <br>&gt;&gt; How many versions back would the compiler be expected to support? Should the Swift 5 compiler still support Swift 3 code?<br>&gt; <br>&gt; To be determined.  Swift 4 should definitely support Swift 3, but Swift 5 perhaps not.  We can decide that when Swift 4 is winding down.<br>&gt; <br>&gt; -Chris<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160729/41be6663/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>September  6, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 21:13, Chris Lattner via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com &lt;mailto:jtbandes at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Here are a few thoughts:<br>&gt;&gt; -swift=4<br>&gt;&gt; -swift-version=4<br>&gt; <br>&gt; -swift-version seems like the best option to me, but Jordan will have a strong opinion.  I think he’s crazy busy with Swift 3 work until late next week.<br></p><p>:-) I missed this thread. -swift-version is all right. It doesn’t immediately sound nice (a bit wordy) but I don’t have anything better.<br></p><p>If I’m really getting nitpicky, I might note that we don’t really use = options in swiftc as much as separated operations (-swift-version 4).<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160906/770f85f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>September  7, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;ve filed https://bugs.swift.org/browse/SR-2582 for this.<br></p><p>On Tue, Sep 6, 2016 at 10:37 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 29, 2016, at 21:13, Chris Lattner via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch &lt;jtbandes at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Here are a few thoughts:<br>&gt;<br>&gt;    - -swift=4<br>&gt;    - -swift-version=4<br>&gt;<br>&gt;<br>&gt; -swift-version seems like the best option to me, but Jordan will have a<br>&gt; strong opinion.  I think he’s crazy busy with Swift 3 work until late next<br>&gt; week.<br>&gt;<br>&gt;<br>&gt; :-) I missed this thread. -swift-version is all right. It doesn’t<br>&gt; immediately sound nice (a bit wordy) but I don’t have anything better.<br>&gt;<br>&gt; If I’m really getting nitpicky, I might note that we don’t really use =<br>&gt; options in swiftc as much as separated operations (-swift-version 4).<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160907/5586192d/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>August  3, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	• a top-of-file &quot;shebang&quot;-style comment indicating the version, something like //#swift(4), mirroring the &quot;#if swift&quot; syntax<br></p><p>`import Swift 3.1`?<br></p><p>I think this brings up two interesting questions:<br></p><p>* Do we want to be able to mix files using different versions of Swift in the same module?<br>* Do we want to extend these backwards compatibility features beyond the standard library to other modules?<br></p><p>If the answer to both is &quot;yes&quot;, then the compiler can just treat the version of the `Swift` module specially, using it to adjust the language syntax in addition to the standard library interface. The command-line switch can be one that provides a default version for imports with unspecified versions, like:<br></p><p>	--version Swift=3.1 --version SomeJSON=1.2<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>August  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Aug 3, 2016, at 1:16 AM, Brent Royal-Gordon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; 	• a top-of-file &quot;shebang&quot;-style comment indicating the version, something like //#swift(4), mirroring the &quot;#if swift&quot; syntax<br>&gt; <br>&gt; `import Swift 3.1`?<br>&gt; <br>&gt; I think this brings up two interesting questions:<br>&gt; <br>&gt; * Do we want to be able to mix files using different versions of Swift in the same module?<br></p><p>No. It simplifies the problem greatly if the whole module is compiled with a single Swift version.<br></p><p>&gt; * Do we want to extend these backwards compatibility features beyond the standard library to other modules?<br></p><p>If we can design generally-useful features for handling language versioning, that the standard library can adopt, that would be great.<br></p><p>	- Doug<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>August  3, 2016 at 11:00:00pm</p></header><div class="content"><p>Importing the right version of a module (such as the standard library) when<br>more than one are available is just a search-paths problem. Supporting<br>multiple versions of the language&#39;s syntax and ABI, though, as far as I can<br>tell, requires the switch to be deeply baked into the compiler.<br></p><p>So I don&#39;t really see how we can get away with a &quot;general&quot; solution, beyond<br>perhaps some SwiftPM support for libraries that provide source or binaries<br>for multiple language versions.<br></p><p>On Wed, Aug 3, 2016 at 12:44 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Aug 3, 2016, at 1:16 AM, Brent Royal-Gordon via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Jul 29, 2016, at 5:55 PM, Jacob Bandes-Storch via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;      • a top-of-file &quot;shebang&quot;-style comment indicating the version,<br>&gt; something like //#swift(4), mirroring the &quot;#if swift&quot; syntax<br>&gt; &gt;<br>&gt; &gt; `import Swift 3.1`?<br>&gt; &gt;<br>&gt; &gt; I think this brings up two interesting questions:<br>&gt; &gt;<br>&gt; &gt; * Do we want to be able to mix files using different versions of Swift<br>&gt; in the same module?<br>&gt;<br>&gt; No. It simplifies the problem greatly if the whole module is compiled with<br>&gt; a single Swift version.<br>&gt;<br>&gt; &gt; * Do we want to extend these backwards compatibility features beyond the<br>&gt; standard library to other modules?<br>&gt;<br>&gt; If we can design generally-useful features for handling language<br>&gt; versioning, that the standard library can adopt, that would be great.<br>&gt;<br>&gt;         - Doug<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160803/e7f4e2e8/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ef7f67e1731d665cea6e6802e8a08217?s=50"></div><header><strong>[swift-evolution] [Swift 4] Organizing source stability</strong> from <string>Graydon Hoare</string> &lt;ghoare at apple.com&gt;<p>September  2, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jul 29, 2016, at 5:20 PM, Jacob Bandes-Storch via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am curious whether the team has thoughts on how to organize the compiler codebase in such a way that new features can be added, and possibly source-breaking changes made, while still keeping the old functionality around.<br></p><p>Picking up on a slightly cold thread...<br></p><p>Yes, I&#39;ve lately been sketching an extension to build-configuration (#if ..) statements, to support feature-at-a-time evolution. There are a bunch of edge issues to work through around compiler release channels, name scoping, diagnostics, parser control and so forth. I&#39;ll post a draft proposal in a bit.<br></p><p>-Graydon<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
