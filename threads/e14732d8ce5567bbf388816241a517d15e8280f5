<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/019f9103a2e36c35bcf1c713fd5d4812?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Raphaël Wach</string> &lt;raphael.wach at icloud.com&gt;<p>May  1, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi Swift programmers,<br></p><p>I would like to ask for opinions or feedback about server side application with swift.<br>Is it realistic to think about creating an application server with swift ?<br>I would love to develop games with both client and server in Swift and get rid of any other technologies in my stack but I am not sure that it’s a good idea for now.<br>I know that IBM started to allows server side Swift in their cloud though probably not many people use it for now as it’s a very recent work.<br></p><p>So does that seem possible for you to develop, host and maintain a game server with Swift or should I keep using more common server side technologies like C++, Node.js… ?<br></p><p>Hopefully, you can give me advices and help me to choose the best solution.<br></p><p>Cheers,<br></p><p>Raphaël<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Basem Emara</string> &lt;contact at basememara.com&gt;<p>May  1, 2016 at 12:00:00pm</p></header><div class="content"><p>This is certainly possible even today. There are many vibrant initiatives in this space that make it usable. I wouldn’t use it in production for another couple years until the dust settles and gets battle tested in real-world production scenarios (think how long Node.js took to be adopted by enterprise companies). If Apple were to officially release a Swift server, it would definitely accelerate this process.<br></p><p>&gt; On May 1, 2016, at 10:48 AM, Raphaël Wach via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift programmers,<br>&gt; <br>&gt; I would like to ask for opinions or feedback about server side application with swift.<br>&gt; Is it realistic to think about creating an application server with swift ?<br>&gt; I would love to develop games with both client and server in Swift and get rid of any other technologies in my stack but I am not sure that it’s a good idea for now.<br>&gt; I know that IBM started to allows server side Swift in their cloud though probably not many people use it for now as it’s a very recent work.<br>&gt; <br>&gt; So does that seem possible for you to develop, host and maintain a game server with Swift or should I keep using more common server side technologies like C++, Node.js… ?<br>&gt; <br>&gt; Hopefully, you can give me advices and help me to choose the best solution.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Raphaël<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/936a6a8c18cd1a181cae5de7b818a24d?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Dru Satori</string> &lt;dru at druware.com&gt;<p>May  1, 2016 at 08:00:00pm</p></header><div class="content"><p>Fwiw, I already have some swift code deployed in my internal server clusters.<br></p><p>Sent from my iPhone<br></p><p>&gt; On May 1, 2016, at 12:40 PM, Basem Emara via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; This is certainly possible even today. There are many vibrant initiatives in this space that make it usable. I wouldn’t use it in production for another couple years until the dust settles and gets battle tested in real-world production scenarios (think how long Node.js took to be adopted by enterprise companies). If Apple were to officially release a Swift server, it would definitely accelerate this process.<br>&gt; <br>&gt;&gt; On May 1, 2016, at 10:48 AM, Raphaël Wach via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Swift programmers,<br>&gt;&gt; <br>&gt;&gt; I would like to ask for opinions or feedback about server side application with swift.<br>&gt;&gt; Is it realistic to think about creating an application server with swift ?<br>&gt;&gt; I would love to develop games with both client and server in Swift and get rid of any other technologies in my stack but I am not sure that it’s a good idea for now.<br>&gt;&gt; I know that IBM started to allows server side Swift in their cloud though probably not many people use it for now as it’s a very recent work.<br>&gt;&gt; <br>&gt;&gt; So does that seem possible for you to develop, host and maintain a game server with Swift or should I keep using more common server side technologies like C++, Node.js… ?<br>&gt;&gt; <br>&gt;&gt; Hopefully, you can give me advices and help me to choose the best solution.<br>&gt;&gt; <br>&gt;&gt; Cheers,<br>&gt;&gt; <br>&gt;&gt; Raphaël<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/27fb74253bf2cb9c8dcea56452f74006?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Honza Dvorsky</string> &lt;czechboy0 at gmail.com&gt;<p>May  2, 2016 at 09:00:00am</p></header><div class="content"><p>Server-side Swift is not mature by any measure, but there are very vibrant<br>groups building a few competing solutions, outside the IBM group. I&#39;ve<br>already built a low-importance, in-production server using Vapor<br>&lt;https://github.com/qutheory/vapor&gt;. There&#39;s another group called Zewo<br>&lt;https://github.com/Zewo/Zewo&gt; also building web frameworks and underlying<br>technology. In an attempt to make the quickly-emerging frameworks pluggable<br>into each other, these spec-like &lt;https://github.com/open-swift&gt; libraries<br>were created. Another collection of frameworks in nestproject<br>&lt;https://github.com/nestproject&gt;, which aims at standardizing the web<br>server/web application interface.<br></p><p>There are many more projects, but I&#39;ve contributed to these three and there<br>are many very active people trying to create production-ready tools by the<br>time Swift 3 is released. Again, you can already build servers today, but<br>expect Swift and APIs to change frequently until Swift 3 drops. So if you&#39;d<br>like to contribute, these might be a good place to start.<br></p><p>On Sun, May 1, 2016 at 10:09 PM Dru Satori via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Fwiw, I already have some swift code deployed in my internal server<br>&gt; clusters.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; &gt; On May 1, 2016, at 12:40 PM, Basem Emara via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; This is certainly possible even today. There are many vibrant<br>&gt; initiatives in this space that make it usable. I wouldn’t use it in<br>&gt; production for another couple years until the dust settles and gets battle<br>&gt; tested in real-world production scenarios (think how long Node.js took to<br>&gt; be adopted by enterprise companies). If Apple were to officially release a<br>&gt; Swift server, it would definitely accelerate this process.<br>&gt; &gt;<br>&gt; &gt;&gt; On May 1, 2016, at 10:48 AM, Raphaël Wach via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hi Swift programmers,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I would like to ask for opinions or feedback about server side<br>&gt; application with swift.<br>&gt; &gt;&gt; Is it realistic to think about creating an application server with<br>&gt; swift ?<br>&gt; &gt;&gt; I would love to develop games with both client and server in Swift and<br>&gt; get rid of any other technologies in my stack but I am not sure that it’s a<br>&gt; good idea for now.<br>&gt; &gt;&gt; I know that IBM started to allows server side Swift in their cloud<br>&gt; though probably not many people use it for now as it’s a very recent work.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; So does that seem possible for you to develop, host and maintain a game<br>&gt; server with Swift or should I keep using more common server side<br>&gt; technologies like C++, Node.js… ?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Hopefully, you can give me advices and help me to choose the best<br>&gt; solution.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Cheers,<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Raphaël<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-users mailing list<br>&gt; &gt;&gt; swift-users at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160502/f329b908/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  1, 2016 at 11:00:00am</p></header><div class="content"><p>Hi Raphael,<br></p><p>I took a look at the current Kitura (Swift-IBM) code and they appear to be using libdispatch, but only to put there blocking calls off the main queue: https://github.com/IBM-Swift/Kitura-net/blob/master/Sources/KituraNet/HttpServerSpi.swift#L52. <br></p><p>This might be because libdispatch on Linux is not mature, I’m not sure. I haven’t benchmarked it or anything so it might be sufficient for what you are looking for. <br></p><p>I’ve been looking into libuv which is the async IO library that Node.js is built on top of, but you would still have to wrap it in Swift. I’m currently trying to see what it would be like to replicate some of libuv’s functionality with libdispatch. libuv and libdispatch overlap on functionality quite a bit, but libdispatch has the benefit of using a block API instead of a function pointer API, which makes memory management easier in Swift. However, libuv has many additional features for setting up TCP connections and other networking constructs.<br></p><p>Hope that helps a little bit, I’m exploring this area myself!<br></p><p>Tyler<br></p><p><br>&gt; On May 1, 2016, at 7:48 AM, Raphaël Wach via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Swift programmers,<br>&gt; <br>&gt; I would like to ask for opinions or feedback about server side application with swift.<br>&gt; Is it realistic to think about creating an application server with swift ?<br>&gt; I would love to develop games with both client and server in Swift and get rid of any other technologies in my stack but I am not sure that it’s a good idea for now.<br>&gt; I know that IBM started to allows server side Swift in their cloud though probably not many people use it for now as it’s a very recent work.<br>&gt; <br>&gt; So does that seem possible for you to develop, host and maintain a game server with Swift or should I keep using more common server side technologies like C++, Node.js… ?<br>&gt; <br>&gt; Hopefully, you can give me advices and help me to choose the best solution.<br>&gt; <br>&gt; Cheers,<br>&gt; <br>&gt; Raphaël<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>May  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 1, 2016, at 11:48 AM, Tyler Fleming Cloutier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; libuv and libdispatch overlap on functionality quite a bit, but libdispatch has the benefit of using a block API instead of a function pointer API, which makes memory management easier in Swift.<br></p><p>I think libdispatch would be the better choice, since it’s what’s going to be used in Swift’s standard library going forward.<br></p><p>&gt; However, libuv has many additional features for setting up TCP connections and other networking constructs.<br></p><p>The dispatch_io API lets you use libdispatch with file descriptors, so working with TCP would just involve making the usual system calls to open the connection and then creating a dispatch_io_t from the FD. It should just take a couple of lines of code.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160503/b3edc684/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>May  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 12:14 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 1, 2016, at 11:48 AM, Tyler Fleming Cloutier via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; libuv and libdispatch overlap on functionality quite a bit, but libdispatch has the benefit of using a block API instead of a function pointer API, which makes memory management easier in Swift.<br>&gt; <br>&gt; I think libdispatch would be the better choice, since it’s what’s going to be used in Swift’s standard library going forward.<br>&gt; <br>&gt;&gt; However, libuv has many additional features for setting up TCP connections and other networking constructs.<br>&gt; <br>&gt; The dispatch_io API lets you use libdispatch with file descriptors, so working with TCP would just involve making the usual system calls to open the connection and then creating a dispatch_io_t from the FD. It should just take a couple of lines of code.<br></p><p>Indeed!<br></p><p>https://github.com/TheArtOfEngineering/Edge/blob/master/Sources/TCP.swift<br></p><p>&gt; <br>&gt; —Jens<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160503/8ecade34/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f0c42759e3b302ee8b0665d8b59c1197?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Gerard Iglesias</string> &lt;gerard_iglesias at me.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>A good reading <br></p><p>https://github.com/robbiehanson/CocoaAsyncSocket<br></p><p>Usable In Swift, even if the umbrella module did not work for me, I had to compile it in my own workspace to use it in swift code<br></p><p>Regards <br></p><p>Gérard <br></p><p>&gt; Le 3 mai 2016 à 21:17, Tyler Cloutier via swift-users &lt;swift-users at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 12:14 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 1, 2016, at 11:48 AM, Tyler Fleming Cloutier via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; libuv and libdispatch overlap on functionality quite a bit, but libdispatch has the benefit of using a block API instead of a function pointer API, which makes memory management easier in Swift.<br>&gt;&gt; <br>&gt;&gt; I think libdispatch would be the better choice, since it’s what’s going to be used in Swift’s standard library going forward.<br>&gt;&gt; <br>&gt;&gt;&gt; However, libuv has many additional features for setting up TCP connections and other networking constructs.<br>&gt;&gt; <br>&gt;&gt; The dispatch_io API lets you use libdispatch with file descriptors, so working with TCP would just involve making the usual system calls to open the connection and then creating a dispatch_io_t from the FD. It should just take a couple of lines of code.<br>&gt; <br>&gt; Indeed!<br>&gt; <br>&gt; https://github.com/TheArtOfEngineering/Edge/blob/master/Sources/TCP.swift<br>&gt; <br>&gt;&gt; <br>&gt;&gt; —Jens<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160503/1a688f88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>May  3, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 12:46 PM, Gerard Iglesias &lt;gerard_iglesias at me.com&gt; wrote:<br>&gt; <br>&gt; A good reading <br>&gt; <br>&gt; https://github.com/robbiehanson/CocoaAsyncSocket &lt;https://github.com/robbiehanson/CocoaAsyncSocket&gt;<br>This is highly Mac/iOS-specific code, so it doesn’t make sense for applications targeted at servers.<br></p><p>Also, I’ve used CocoaAsyncSocket and it’s IMHO greatly overcomplicated for what it does. There is a LOT of code in there, and a fair amount of the complexity seems to be to work around obsolete limitations of iOS networking that are no longer relevant.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160503/3555e609/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/019f9103a2e36c35bcf1c713fd5d4812?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Raphaël Wach</string> &lt;raphael.wach at icloud.com&gt;<p>May  8, 2016 at 12:00:00pm</p></header><div class="content"><p>Thank you all for your feedback. That’s really helpful.<br></p><p>I understand that there is a lot of work in progress regarding server-side Swift and I’ll keep investigating this field though as nothing looks stable for now I’ll stick on Node.js in production for a while. <br>An Apple application server designed for Swift would really be awesome.<br>Hopefully, a good news at the incoming WWDC ? Who knows ;)<br></p><p>Cheers,<br></p><p>Raphaël<br></p><p><br>&gt; Le 3 mai 2016 à 23:03, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On May 3, 2016, at 12:46 PM, Gerard Iglesias &lt;gerard_iglesias at me.com &lt;mailto:gerard_iglesias at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; A good reading <br>&gt;&gt; <br>&gt;&gt; https://github.com/robbiehanson/CocoaAsyncSocket &lt;https://github.com/robbiehanson/CocoaAsyncSocket&gt;<br>&gt; This is highly Mac/iOS-specific code, so it doesn’t make sense for applications targeted at servers.<br>&gt; <br>&gt; Also, I’ve used CocoaAsyncSocket and it’s IMHO greatly overcomplicated for what it does. There is a LOT of code in there, and a fair amount of the complexity seems to be to work around obsolete limitations of iOS networking that are no longer relevant.<br>&gt; <br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160508/6da85775/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f0c42759e3b302ee8b0665d8b59c1197?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Gerard Iglesias</string> &lt;gerard_iglesias at me.com&gt;<p>May  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Jens,<br></p><p>I have to say that I am far from an expert in low level network coding, even if I started using Distributed object in 93 with NeXTStep, and I can build network connection with the basics, listen, bind, accept ... There is an interesting network code in swift with these basics on the IBM swift playground.<br></p><p>I wonder what kind of limitations are no longer relevant ?<br></p><p>And I found CocoaAsync very interesting to read because of the intensive use of GCD<br></p><p>And maybe it would be interesting to know who use what today with swift to put a server or a client in use?<br></p><p>Regards<br></p><p>Gérard <br></p><p>&gt; Le 3 mai 2016 à 23:03, Jens Alfke &lt;jens at mooseyard.com&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On May 3, 2016, at 12:46 PM, Gerard Iglesias &lt;gerard_iglesias at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; A good reading <br>&gt;&gt; <br>&gt;&gt; https://github.com/robbiehanson/CocoaAsyncSocket<br>&gt; <br>&gt; This is highly Mac/iOS-specific code, so it doesn’t make sense for applications targeted at servers.<br>&gt; <br>&gt; Also, I’ve used CocoaAsyncSocket and it’s IMHO greatly overcomplicated for what it does. There is a LOT of code in there, and a fair amount of the complexity seems to be to work around obsolete limitations of iOS networking that are no longer relevant.<br>&gt; <br>&gt; —Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160508/79fe1b13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/844252f688c1e1bd002a3be520c9a9b5?s=50"></div><header><strong>Server side swift application ?</strong> from <string>Fareed Quraishi</string> &lt;quraishi.fareed at gmail.com&gt;<p>May  9, 2016 at 09:00:00am</p></header><div class="content"><p>Don&#39;t know if I&#39;m late to this conversation. I have been using the perfect<br>&lt;http://perfect.org&gt; platform for server-side swift. My understanding was<br>it is the most robust platform, but I&#39;m using it because my boss said so. I<br>haven&#39;t had any problems and I&#39;m finding the community around it is growing<br>solid. If you want to give it a try, this tutorial<br>&lt;https://medium.com/@abjurato/swift-perfect-mustache-and-postgresql-on-heroku-48d483fe8489#.4z8r26myq&gt;<br>is pretty solid.<br></p><p>Thanks,<br>Fareed<br></p><p>On Sun, May 8, 2016 at 1:08 PM, Gerard Iglesias via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; Jens,<br>&gt;<br>&gt; I have to say that I am far from an expert in low level network coding,<br>&gt; even if I started using Distributed object in 93 with NeXTStep, and I can<br>&gt; build network connection with the basics, listen, bind, accept ... There is<br>&gt; an interesting network code in swift with these basics on the IBM swift<br>&gt; playground.<br>&gt;<br>&gt; I wonder what kind of limitations are no longer relevant ?<br>&gt;<br>&gt; And I found CocoaAsync very interesting to read because of the intensive<br>&gt; use of GCD<br>&gt;<br>&gt; And maybe it would be interesting to know who use what today with swift to<br>&gt; put a server or a client in use?<br>&gt;<br>&gt; Regards<br>&gt;<br>&gt; Gérard<br>&gt;<br>&gt; Le 3 mai 2016 à 23:03, Jens Alfke &lt;jens at mooseyard.com&gt; a écrit :<br>&gt;<br>&gt;<br>&gt; On May 3, 2016, at 12:46 PM, Gerard Iglesias &lt;gerard_iglesias at me.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; A good reading<br>&gt;<br>&gt; https://github.com/robbiehanson/CocoaAsyncSocket<br>&gt;<br>&gt;<br>&gt; This is highly Mac/iOS-specific code, so it doesn’t make sense for<br>&gt; applications targeted at servers.<br>&gt;<br>&gt; Also, I’ve used CocoaAsyncSocket and it’s IMHO greatly overcomplicated for<br>&gt; what it does. There is a LOT of code in there, and a fair amount of the<br>&gt; complexity seems to be to work around obsolete limitations of iOS<br>&gt; networking that are no longer relevant.<br>&gt;<br>&gt; —Jens<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br></p><p><br>-- <br>www.FareedQ.com<br>Twitter @IAmFareedQ<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160509/285e4e3a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
