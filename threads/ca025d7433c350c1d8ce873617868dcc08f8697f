<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 09:00:00am</p></header><div class="content"><p>Examples:<br></p><p>if “hello” in [“hello, there”] { … }<br></p><p>if “hello” not in [“hello, there”] { … }<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 17, 2015 at 06:00:00am</p></header><div class="content"><p>&gt; if “hello” in [“hello, there”] { … }<br>&gt; <br>&gt; if “hello” not in [“hello, there”] { … }<br></p><p>Swift is extremely sparing with keywords in operator position; the only ones I can think of off the top of my head are `is` and `as`, and even those aren’t actually operators. You’re proposing to introduce one as syntactic sugar for [array].contains(elem), and introduce an even more bizarre two-word operator for ![array].contains(elem). I don’t think that’s gonna fly.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 17, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 17, 2015, at 9:51 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; if “hello” in [“hello, there”] { … }<br>&gt;&gt; <br>&gt;&gt; if “hello” not in [“hello, there”] { … }<br>&gt; <br>&gt; Swift is extremely sparing with keywords in operator position; the only ones I can think of off the top of my head are `is` and `as`, and even those aren’t actually operators. You’re proposing to introduce one as syntactic sugar for [array].contains(elem), and introduce an even more bizarre two-word operator for ![array].contains(elem). I don’t think that’s gonna fly.<br></p><p>Most programmers would probably love using them though.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ff1daab58cd5e44a457908d1905c322?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Krzysztof Siejkowski</string> &lt;krzysztof at siejkowski.net&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>Most programmers would probably love using them though.<br></p><p><br>Myself, I’d not love using them. I also don’t like them in Python.<br></p><p><br></p><p>But not to dismiss the idea on personal merits, could you please elaborate on the details of „in” and „not in” usage?<br></p><p><br></p><p>1) What types could they be used with? SequenceType? Array? Dictionary? Set? Optional? <br></p><p>2) Should their usage be extensible to any type? Will there be a possibility for a type Foo to participate in? <br></p><p>```<br></p><p>let foo = Foo()<br></p><p>if bar in foo {}<br></p><p>if bar not in foo {}<br></p><p>```<br></p><p>3) Will the operators be usable only in `if` statement? What about case, where clauses etc?<br></p><p><br></p><p><br></p><p>Krzysztof<br></p><p><br></p><p><br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/4a133987/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 17, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On 17 Dec 2015, at 15:59, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 9:51 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; if “hello” in [“hello, there”] { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if “hello” not in [“hello, there”] { … }<br>&gt;&gt; <br>&gt;&gt; Swift is extremely sparing with keywords in operator position; the only ones I can think of off the top of my head are `is` and `as`, and even those aren’t actually operators. You’re proposing to introduce one as syntactic sugar for [array].contains(elem), and introduce an even more bizarre two-word operator for ![array].contains(elem). I don’t think that’s gonna fly.<br>&gt; <br>&gt; Most programmers would probably love using them though.<br></p><p><br>If that’s the case, I’d be in the minority. <br></p><p>I’d rather use [“hello&quot;, “there”].contains(“hello”). That might just be my background though which is heavily object oriented.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>I don&#39;t like it because it introduces a second way to do something that&#39;s already quite easy.<br></p><p>It&#39;s impossible for the Swift compiler to enforce that people never create a `contains` method (or create it without adhering to whatever protocol `in` uses behind the scenes), so in my opinion this would increase the burden of creating types that feel first-class.<br></p><p>As it&#39;s already been said before, Swift has been very careful with keywords so far. I wouldn&#39;t be in favor of introducing a keyword that replaces a method call.<br></p><p>Félix<br></p><p>&gt; Le 17 déc. 2015 à 10:48:02, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On 17 Dec 2015, at 15:59, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 17, 2015, at 9:51 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if “hello” in [“hello, there”] { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if “hello” not in [“hello, there”] { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift is extremely sparing with keywords in operator position; the only ones I can think of off the top of my head are `is` and `as`, and even those aren’t actually operators. You’re proposing to introduce one as syntactic sugar for [array].contains(elem), and introduce an even more bizarre two-word operator for ![array].contains(elem). I don’t think that’s gonna fly.<br>&gt;&gt; <br>&gt;&gt; Most programmers would probably love using them though.<br>&gt; <br>&gt; <br>&gt; If that’s the case, I’d be in the minority. <br>&gt; <br>&gt; I’d rather use [“hello&quot;, “there”].contains(“hello”). That might just be my background though which is heavily object oriented.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: Python&#39;s &quot;in&quot; and &quot;not in&quot; syntactic sugar</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December 17, 2015 at 09:00:00pm</p></header><div class="content"><p>I agree with Felix.<br></p><p>&gt; I wouldn&#39;t be in favor of introducing a keyword that replaces a method call.<br></p><p>Note that `not in` operator actually consists of two operators – `not`, which would be an alias for `!` and `in` which would be an alias for `contains()`.<br></p><p>As said by my preceding speakers, there are no operator-like keywords in Swift so far, and In my opinion, there shouldn&#39;t be any.<br></p><p><br>By the way,<br></p><p>&gt; Most programmers would probably love using them though.<br></p><p>Please do no speak in the name of majority without actual numbers. :)<br></p><p><br>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 17.12.2015, o godz. 17:16:<br>&gt; <br>&gt; I don&#39;t like it because it introduces a second way to do something that&#39;s already quite easy.<br>&gt; <br>&gt; It&#39;s impossible for the Swift compiler to enforce that people never create a `contains` method (or create it without adhering to whatever protocol `in` uses behind the scenes), so in my opinion this would increase the burden of creating types that feel first-class.<br>&gt; <br>&gt; As it&#39;s already been said before, Swift has been very careful with keywords so far. I wouldn&#39;t be in favor of introducing a keyword that replaces a method call.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 17 déc. 2015 à 10:48:02, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 17 Dec 2015, at 15:59, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 17, 2015, at 9:51 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if “hello” in [“hello, there”] { … }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if “hello” not in [“hello, there”] { … }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift is extremely sparing with keywords in operator position; the only ones I can think of off the top of my head are `is` and `as`, and even those aren’t actually operators. You’re proposing to introduce one as syntactic sugar for [array].contains(elem), and introduce an even more bizarre two-word operator for ![array].contains(elem). I don’t think that’s gonna fly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Most programmers would probably love using them though.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; If that’s the case, I’d be in the minority. <br>&gt;&gt; <br>&gt;&gt; I’d rather use [“hello&quot;, “there”].contains(“hello”). That might just be my background though which is heavily object oriented.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151217/fa7e9237/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
