<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 15, 2016 at 01:00:00pm</p></header><div class="content"><p>Presented for discussion and feedback. Thank you in advance for your thoughts.<br></p><p>-- Erica<br></p><p>Modernizing Playground Literals<br></p><p>Proposal: TBD<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#introduction&gt;Introduction<br></p><p>Playground literals tokenize colors, files, and images. They provide drag-and-drop convenience and in-context visualizations that offer easy reference and manipulation when designing playground content. These literals are built using a simple square bracket syntax that, in the current form, conflicts with collection literals. This proposal redesigns playground literals to follow the precedent of #available and #selector.<br></p><p>Thanks to Chris Lattner &lt;https://github.com/lattner&gt; for suggesting this enhancement.<br></p><p> &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#motivation&gt;Motivation<br></p><p>Color, image, and file literals are currently represented as:<br></p><p>[#Color(colorLiteralRed: red, green: green, blue: blue, alpha: alpha)#]<br>[#Image(imageLiteral: localResourceNameAsString)#]<br>[#FileReference(fileReferenceLiteral: localResourceNameAsString)#]<br>Playground literals present the following features:<br></p><p>They appear within a container designated with [# #] endpoints. <br>They are marked with a capital camel case role name.<br>First label arguments use the word literal to punch the construction of each literal item.<br>There are several issues with this approach:<br></p><p>The enclosing square brackets conflict with collection literals, adding extra work for parsing. <br>The construction syntax does not follow modern Swift conventions.<br>The word literal describes the constructed items not the argument being passed to create the literal. It is misplaced in its current use.<br> &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#detail-design&gt;Detail Design<br></p><p>Simplifying constructors to octothorpe &lt;https://en.wikipedia.org/wiki/Octothorpe&gt;-delineated identifiers cleans up the language, removes potential grammar conflicts, and follows precedent for other identifiers used in modern Swift. Our proposed identifiers are #colorliteral, #imageliteral, and #fileliteral.<br></p><p>color-literal → #colorliteral(red: unit-floating-point-literal, green: unit-floating-point-literal, blue: unit-floating-point-literal, alpha: unit-floating-point-literal)<br>unit-floating-point-literal → floating point number greater or equal to zero, less than or equal to one<br></p><p>image-literal → #imageliteral(name: image-resource-name)<br>image-resource-name → static-string-literal referring to image resource name<br></p><p>file-literal → #fileliteral(resourceName: file-resource-name)<br>file-resource-name → static-string-literal referring to local resource name<br>In this design:<br></p><p>Each redesigned identifier uses lower case, to match existing Swift literals.<br>Arguments use lower camel case labels, as is conventional.<br>The word literal is added to identifiers denoting each item&#39;s role.<br>The arguments are simplified and standardized to red, green, blue, alpha, imageName, and resourceName.<br> &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#alternatives-considered&gt;Alternatives Considered<br></p><p>#resourceliteral may better describe a file resource than #fileliteral.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160215/064a1275/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 16, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Feb 15, 2016, at 12:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Presented for discussion and feedback. Thank you in advance for your thoughts.<br></p><p>Hi Erica,<br></p><p>You already know this, but big +1 from me.  This is a syntactic construct that people are not supposed to see (which is why I’m not surprised you’re getting no feedback on the list) but it is important for us to pull the syntax inline with everything else, for consistency in the parser.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; Modernizing Playground Literals<br>&gt; <br>&gt; Proposal: TBD<br>&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt; Status: TBD<br>&gt; Review manager: TBD<br>&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#introduction&gt;Introduction<br>&gt; <br>&gt; Playground literals tokenize colors, files, and images. They provide drag-and-drop convenience and in-context visualizations that offer easy reference and manipulation when designing playground content. These literals are built using a simple square bracket syntax that, in the current form, conflicts with collection literals. This proposal redesigns playground literals to follow the precedent of #available and #selector.<br>&gt; <br>&gt; Thanks to Chris Lattner &lt;https://github.com/lattner&gt; for suggesting this enhancement.<br>&gt; <br>&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#motivation&gt;Motivation<br>&gt; <br>&gt; Color, image, and file literals are currently represented as:<br>&gt; <br>&gt; [#Color(colorLiteralRed: red, green: green, blue: blue, alpha: alpha)#]<br>&gt; [#Image(imageLiteral: localResourceNameAsString)#]<br>&gt; [#FileReference(fileReferenceLiteral: localResourceNameAsString)#]<br>&gt; Playground literals present the following features:<br>&gt; <br>&gt; They appear within a container designated with [# #] endpoints. <br>&gt; They are marked with a capital camel case role name.<br>&gt; First label arguments use the word literal to punch the construction of each literal item.<br>&gt; There are several issues with this approach:<br>&gt; <br>&gt; The enclosing square brackets conflict with collection literals, adding extra work for parsing. <br>&gt; The construction syntax does not follow modern Swift conventions.<br>&gt; The word literal describes the constructed items not the argument being passed to create the literal. It is misplaced in its current use.<br>&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#detail-design&gt;Detail Design<br>&gt; <br>&gt; Simplifying constructors to octothorpe &lt;https://en.wikipedia.org/wiki/Octothorpe&gt;-delineated identifiers cleans up the language, removes potential grammar conflicts, and follows precedent for other identifiers used in modern Swift. Our proposed identifiers are #colorliteral, #imageliteral, and #fileliteral.<br>&gt; <br>&gt; color-literal → #colorliteral(red: unit-floating-point-literal, green: unit-floating-point-literal, blue: unit-floating-point-literal, alpha: unit-floating-point-literal)<br>&gt; unit-floating-point-literal → floating point number greater or equal to zero, less than or equal to one<br>&gt; <br>&gt; image-literal → #imageliteral(name: image-resource-name)<br>&gt; image-resource-name → static-string-literal referring to image resource name<br>&gt; <br>&gt; file-literal → #fileliteral(resourceName: file-resource-name)<br>&gt; file-resource-name → static-string-literal referring to local resource name<br>&gt; In this design:<br>&gt; <br>&gt; Each redesigned identifier uses lower case, to match existing Swift literals.<br>&gt; Arguments use lower camel case labels, as is conventional.<br>&gt; The word literal is added to identifiers denoting each item&#39;s role.<br>&gt; The arguments are simplified and standardized to red, green, blue, alpha, imageName, and resourceName.<br>&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#alternatives-considered&gt;Alternatives Considered<br>&gt; <br>&gt; #resourceliteral may better describe a file resource than #fileliteral.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/3200a2a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 16, 2016 at 10:00:00am</p></header><div class="content"><p>Ken Orr also gave it his blessing if that counts.<br></p><p>-- Erica<br></p><p>&gt; On Feb 16, 2016, at 10:03 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 15, 2016, at 12:16 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Presented for discussion and feedback. Thank you in advance for your thoughts.<br>&gt; <br>&gt; Hi Erica,<br>&gt; <br>&gt; You already know this, but big +1 from me.  This is a syntactic construct that people are not supposed to see (which is why I’m not surprised you’re getting no feedback on the list) but it is important for us to pull the syntax inline with everything else, for consistency in the parser.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; Modernizing Playground Literals<br>&gt;&gt; <br>&gt;&gt; Proposal: TBD<br>&gt;&gt; Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>&gt;&gt; Status: TBD<br>&gt;&gt; Review manager: TBD<br>&gt;&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; Playground literals tokenize colors, files, and images. They provide drag-and-drop convenience and in-context visualizations that offer easy reference and manipulation when designing playground content. These literals are built using a simple square bracket syntax that, in the current form, conflicts with collection literals. This proposal redesigns playground literals to follow the precedent of #available and #selector.<br>&gt;&gt; <br>&gt;&gt; Thanks to Chris Lattner &lt;https://github.com/lattner&gt; for suggesting this enhancement.<br>&gt;&gt; <br>&gt;&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; Color, image, and file literals are currently represented as:<br>&gt;&gt; <br>&gt;&gt; [#Color(colorLiteralRed: red, green: green, blue: blue, alpha: alpha)#]<br>&gt;&gt; [#Image(imageLiteral: localResourceNameAsString)#]<br>&gt;&gt; [#FileReference(fileReferenceLiteral: localResourceNameAsString)#]<br>&gt;&gt; Playground literals present the following features:<br>&gt;&gt; <br>&gt;&gt; They appear within a container designated with [# #] endpoints. <br>&gt;&gt; They are marked with a capital camel case role name.<br>&gt;&gt; First label arguments use the word literal to punch the construction of each literal item.<br>&gt;&gt; There are several issues with this approach:<br>&gt;&gt; <br>&gt;&gt; The enclosing square brackets conflict with collection literals, adding extra work for parsing. <br>&gt;&gt; The construction syntax does not follow modern Swift conventions.<br>&gt;&gt; The word literal describes the constructed items not the argument being passed to create the literal. It is misplaced in its current use.<br>&gt;&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#detail-design&gt;Detail Design<br>&gt;&gt; <br>&gt;&gt; Simplifying constructors to octothorpe &lt;https://en.wikipedia.org/wiki/Octothorpe&gt;-delineated identifiers cleans up the language, removes potential grammar conflicts, and follows precedent for other identifiers used in modern Swift. Our proposed identifiers are #colorliteral, #imageliteral, and #fileliteral.<br>&gt;&gt; <br>&gt;&gt; color-literal → #colorliteral(red: unit-floating-point-literal, green: unit-floating-point-literal, blue: unit-floating-point-literal, alpha: unit-floating-point-literal)<br>&gt;&gt; unit-floating-point-literal → floating point number greater or equal to zero, less than or equal to one<br>&gt;&gt; <br>&gt;&gt; image-literal → #imageliteral(name: image-resource-name)<br>&gt;&gt; image-resource-name → static-string-literal referring to image resource name<br>&gt;&gt; <br>&gt;&gt; file-literal → #fileliteral(resourceName: file-resource-name)<br>&gt;&gt; file-resource-name → static-string-literal referring to local resource name<br>&gt;&gt; In this design:<br>&gt;&gt; <br>&gt;&gt; Each redesigned identifier uses lower case, to match existing Swift literals.<br>&gt;&gt; Arguments use lower camel case labels, as is conventional.<br>&gt;&gt; The word literal is added to identifiers denoting each item&#39;s role.<br>&gt;&gt; The arguments are simplified and standardized to red, green, blue, alpha, imageName, and resourceName.<br>&gt;&gt;  &lt;https://gist.github.com/erica/b377a1abb53414b7a9f2#alternatives-considered&gt;Alternatives Considered<br>&gt;&gt; <br>&gt;&gt; #resourceliteral may better describe a file resource than #fileliteral.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160216/19bfde8a/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a6a2eebe83a60a4b42395145484cda15?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>Daniel Vollmer</string> &lt;lists at maven.de&gt;<p>February 16, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 15 Feb 2016, at 21:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Presented for discussion and feedback. Thank you in advance for your thoughts.<br>&gt; <br>&gt; -- Erica<br>&gt; <br>&gt; Modernizing Playground Literals<br></p><p>[snip]<br></p><p>Ignoring the fact that I think Erica’s proposal is an improvement over the current state, a more general solution would be something like user-defined literals in C++11 (with whatever syntax). A playground could then pre-import the definitions of any literal types it wants to support, without having to change the language / compiler any time a new literal type is added.<br></p><p>I’m not sure whether this use-case is so important (or I’m overlooking something basic) that these items need such special treatment (e.g. #-prefix); couldn’t one just offer global factory functions for the literals in question and treat them specifically in Xcode’s playground UI?<br></p><p>	Daniel.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 16, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 16, 2016, at 10:31 AM, Daniel Vollmer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Feb 2016, at 21:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Presented for discussion and feedback. Thank you in advance for your thoughts.<br>&gt;&gt; <br>&gt;&gt; -- Erica<br>&gt;&gt; <br>&gt;&gt; Modernizing Playground Literals<br>&gt; <br>&gt; [snip]<br>&gt; <br>&gt; Ignoring the fact that I think Erica’s proposal is an improvement over the current state, a more general solution would be something like user-defined literals in C++11 (with whatever syntax). A playground could then pre-import the definitions of any literal types it wants to support, without having to change the language / compiler any time a new literal type is added.<br>&gt; <br>&gt; I’m not sure whether this use-case is so important (or I’m overlooking something basic) that these items need such special treatment (e.g. #-prefix); couldn’t one just offer global factory functions for the literals in question and treat them specifically in Xcode’s playground UI?<br>&gt; <br>&gt; 	Daniel.<br></p><p>It&#39;s certainly beyond the scope of this proposal.  I&#39;m not sure if it passes the Lattner test: &quot;Is there a clear, measurable, immediate benefit to Swift developers rather than being of value for its cleverness?&quot; There&#39;s also a general macro system that I know keeps coming up on these threads that ??Dave Abrahams?? is working on for Swift 4 or later.<br></p><p>-- Erica<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Discussion] Modernizing Playground Literals</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>February 18, 2016 at 12:00:00am</p></header><div class="content"><p>I agree that a general literal syntax is beyond the scope of this proposal<br>but, in my opinion, the &quot;clear, measurable, immediate benefit to Swift&quot;<br>would be a means to have literal support that might not force you to accept<br>all of the literal types inhabitants. As it stands, there are many types<br>which are poorly served by the literal types available. If I want to use a<br>string as a literal for my type, I must accept all possible strings (or<br>blow up at runtime). I would gladly put in extra work to allow a literal<br>syntax for my type that could be compile time checked.<br></p><p>This is not the literal syntax that I want. It is, however, the literal<br>syntax that is within scope.<br></p><p>+1<br></p><p><br></p><p>On Tue, Feb 16, 2016 at 1:45 PM, Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Feb 16, 2016, at 10:31 AM, Daniel Vollmer via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; On 15 Feb 2016, at 21:16, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Presented for discussion and feedback. Thank you in advance for your<br>&gt; thoughts.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -- Erica<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Modernizing Playground Literals<br>&gt; &gt;<br>&gt; &gt; [snip]<br>&gt; &gt;<br>&gt; &gt; Ignoring the fact that I think Erica’s proposal is an improvement over<br>&gt; the current state, a more general solution would be something like<br>&gt; user-defined literals in C++11 (with whatever syntax). A playground could<br>&gt; then pre-import the definitions of any literal types it wants to support,<br>&gt; without having to change the language / compiler any time a new literal<br>&gt; type is added.<br>&gt; &gt;<br>&gt; &gt; I’m not sure whether this use-case is so important (or I’m overlooking<br>&gt; something basic) that these items need such special treatment (e.g.<br>&gt; #-prefix); couldn’t one just offer global factory functions for the<br>&gt; literals in question and treat them specifically in Xcode’s playground UI?<br>&gt; &gt;<br>&gt; &gt;       Daniel.<br>&gt;<br>&gt; It&#39;s certainly beyond the scope of this proposal.  I&#39;m not sure if it<br>&gt; passes the Lattner test: &quot;Is there a clear, measurable, immediate benefit<br>&gt; to Swift developers rather than being of value for its cleverness?&quot; There&#39;s<br>&gt; also a general macro system that I know keeps coming up on these threads<br>&gt; that ??Dave Abrahams?? is working on for Swift 4 or later.<br>&gt;<br>&gt; -- Erica<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160218/3e936a4a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
