<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[RFC] New collections model: collections advance indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  8, 2016 at 09:00:00am</p></header><div class="content"><p>on Tue Mar 08 2016, Антон Жилин &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In the RFC, I see that indices only requires `next`. <br></p><p>In the RFC, there&#39;s no Index protocol at all;  Indices<br>are required to be Comparable.<br></p><p>&gt; I like this scheme a lot, it&#39;s very altruistic, like in C++. Get,<br>&gt; increment, end check - nothing more is required to work with<br>&gt; iterators.<br></p><p>FWIW, building a correct C++ iterator is so boilerplate-heavy and<br>occasionally subtle that people use libraries such as<br>http://www.boost.org/doc/libs/release/libs/iterator/doc/index.html<br></p><p>&gt; I like extracting everything optional to Collection hierarchy, and don&#39;t<br>&gt; like adding Equatable, Comparable or Hashable constraints on<br>&gt; iterators. <br></p><p>You can barely write any interesting generic algorithms at all without<br>the moral equivalent of Equatable indices.  <br></p><p>&gt; If you need Hashable in a specific scope, declare it as a generic<br>&gt; constraint.  I didnt really read the whole RFC, so I could have<br>&gt; misunderstood something.<br></p><p>I don&#39;t support making indices Hashable at this time; IMO that&#39;s part of<br>a much larger discussion that we need to have about regular types and<br>implicitly-generated conformances.  Comparable is arguable either way,<br>but we are proposing to require it in part to be able to test the<br>semantics of a valid Range.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
