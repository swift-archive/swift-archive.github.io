<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>September  1, 2016 at 10:00:00pm</p></header><div class="content"><p>I&#39;m not sure if it is a correct time to discuss this, if not - I&#39;ll hold <br>this for later time.<br></p><p>I was reading the article of author of some C/C++ static code analyzer tool <br>where he was analyzing and discussing about code of some open source <br>program. And there was a paragraph about bugs people make when using <br>ternary operator. There a lot of bugs in C/C++ sources of well-known open <br>source programs(like Chromium, ReactOS, MongoDB, Unreal Engine 4, Wine, <br>FreeBSD Kernel and many others) made when developer assumes that priority <br>of &#39;?:&#39; operator is higher than other operators like &#39;+&#39;, &#39;*&#39;, &#39;|&#39;, &#39;&amp;&#39; and <br>other.<br></p><p>Examples:<br></p><p>int edge_height = titlebar_bottom-&gt;height() -<br>     ShouldShowClientEdge() ? kClientEdgeThickness : 0;<br></p><p>ULONG treg = 0x54 + (dev &lt; 3) ? (dev &lt;&lt; 1) : 7;<br></p><p>if (IP_PACKET_SIZE &lt; parsedPacket.info.H263.dataLength +<br>        parsedPacket.info.H263.insert2byteStartCode ? 2:0) {...}<br></p><p>stringstream ss;<br>ss &lt;&lt; (sizeof(char *) == 8) ? &quot; 64bit&quot; : &quot; 32bit&quot;;<br></p><p>return UniformVectorExpressions.GetAllocatedSize()<br>       + UniformScalarExpressions.GetAllocatedSize()<br>       + Uniform2DTextureExpressions.GetAllocatedSize()<br>       + UniformCubeTextureExpressions.GetAllocatedSize()<br>       + ParameterCollections.GetAllocatedSize()<br>       + UniformBufferStruct<br>           ?<br>           (sizeof(FUniformBufferStruct) +<br>            UniformBufferStruct-&gt;GetMembers().GetAllocatedSize())<br>           :<br>           0;<br></p><p>.. and so on..<br></p><p>Yes, in Swift we have no problem with mixing lets say Ints and Boolean <br>values. But, it seems that it is highly possible to catch the same kind of <br>problem with ternary operator in Swift for boolean values:<br></p><p>func isOne()-&gt;Bool { print(1); return false }<br>func isTwo()-&gt;Bool { print(2); return false }<br></p><p>let a = true<br>let b = true<br></p><p>let result = a || (b) ? isOne() : isTwo() // prints 1<br></p><p>print(result) // false<br></p><p>As you understand, to work correctly we need parentheses:<br>let result = a || ((b) ? isOne() : isTwo()) // &lt;nothing&gt;<br>print(result) // true<br></p><p>..or set priority of &#39;?:&#39; operator higher than other operators (but this <br>probably could *silently* break old code?)<br></p><p>I was trying to play with custom operators and ternary operator :<br></p><p>func &lt;&lt;(lhs: inout String, rhs: String) { lhs += rhs }<br>func &lt;&lt;(lhs: inout String, rhs: Bool) { lhs += rhs.description }<br></p><p>let x = 10<br>var s = &quot;&quot;<br></p><p>s &lt;&lt; &quot;abc&quot;<br>print(s) // abc<br></p><p>s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;<br>print(s)<br></p><p>.. but this crashes the compiller(bug reported), but this shows that could <br>be other ways when ternary operator works not as expected by many developers.<br></p><p>I believe the problem is worth to be discussed and probably solved for <br>Swift in near future.<br></p><p>Opinions?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>September  3, 2016 at 12:00:00pm</p></header><div class="content"><p>(Seems my first email was not resent by mailing list due to its temporary <br>problems. So second attempt)<br></p><p>I&#39;m not sure if it is a correct time to discuss this, if not - I&#39;ll hold <br>this for later time.<br></p><p>I was reading the article of author of some C/C++ static code analyzer tool <br>where he was analyzing and discussing about code of some open source <br>program. And there was a paragraph about bugs people make when using <br>ternary operator. There a lot of bugs in C/C++ sources of well-known open <br>source programs(like Chromium, ReactOS, MongoDB, Unreal Engine 4, Wine, <br>FreeBSD Kernel and many others) made when developer assumes that priority <br>of &#39;?:&#39; operator is higher than other operators like &#39;+&#39;, &#39;*&#39;, &#39;|&#39;, &#39;&amp;&#39; and <br>other.<br></p><p>Examples:<br></p><p>int edge_height = titlebar_bottom-&gt;height() -<br>     ShouldShowClientEdge() ? kClientEdgeThickness : 0;<br></p><p>ULONG treg = 0x54 + (dev &lt; 3) ? (dev &lt;&lt; 1) : 7;<br></p><p>if (IP_PACKET_SIZE &lt; parsedPacket.info.H263.dataLength +<br>        parsedPacket.info.H263.insert2byteStartCode ? 2:0) {...}<br></p><p>stringstream ss;<br>ss &lt;&lt; (sizeof(char *) == 8) ? &quot; 64bit&quot; : &quot; 32bit&quot;;<br></p><p>return UniformVectorExpressions.GetAllocatedSize()<br>       + UniformScalarExpressions.GetAllocatedSize()<br>       + Uniform2DTextureExpressions.GetAllocatedSize()<br>       + UniformCubeTextureExpressions.GetAllocatedSize()<br>       + ParameterCollections.GetAllocatedSize()<br>       + UniformBufferStruct<br>           ?<br>           (sizeof(FUniformBufferStruct) +<br>            UniformBufferStruct-&gt;GetMembers().GetAllocatedSize())<br>           :<br>           0;<br></p><p>.. and so on..<br></p><p>Yes, in Swift we have no problem with mixing lets say Ints and Boolean <br>values. But, it seems that it is highly possible to catch the same kind of <br>problem with ternary operator in Swift for boolean values:<br></p><p>func isOne()-&gt;Bool { print(1); return false }<br>func isTwo()-&gt;Bool { print(2); return false }<br></p><p>let a = true<br>let b = true<br></p><p>let result = a || (b) ? isOne() : isTwo() // prints 1<br></p><p>print(result) // false<br></p><p>As you understand, to work correctly we need parentheses:<br>let result = a || ((b) ? isOne() : isTwo()) // &lt;nothing&gt;<br>print(result) // true<br></p><p>..or set priority of &#39;?:&#39; operator higher than other operators (but this <br>probably could *silently* break old code?)<br></p><p>I was trying to play with custom operators and ternary operator :<br></p><p>func &lt;&lt;(lhs: inout String, rhs: String) { lhs += rhs }<br>func &lt;&lt;(lhs: inout String, rhs: Bool) { lhs += rhs.description }<br></p><p>let x = 10<br>var s = &quot;&quot;<br></p><p>s &lt;&lt; &quot;abc&quot;<br>print(s) // abc<br></p><p>s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;<br>print(s)<br></p><p>.. but this crashes the compiler(bug reported), but this shows that could <br>be other ways when ternary operator works not as expected by many developers.<br></p><p>I believe the problem is worth to be discussed and probably solved for <br>Swift in near future.<br></p><p>Opinions?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>September  3, 2016 at 01:00:00pm</p></header><div class="content"><p>The problem you describe is not the priority of the ternary operator but that developers just assume a priority without checking (or learning) whether their assumption is correct. Changing the priority won&#39;t solve that problem, it would only shift the problem over to those developers assuming the other priority. Worse, it would create this problem for those developers knowing the correct priority, because they now have to relearn the new priority with the added difficulty of the priority being different from C.<br></p><p>I&#39;m not sure whether the problem really is one (other operators have priorities too, which have to be learned), but assuming for the moment that it is, a solution would be to replace the ternary operator with an if-expression: if condition then expr1 else expr2<br>This would enclose the condition between two keywords and thereby be free of misunderstandings.<br>Replacing the ternary operator is on the commonly asked changes list, though, and therefore requires new arguments/insights why a replacement would make sense. I think the possibly confusing priority has been discussed already in the past and therefore wouldn&#39;t count as new insight, though I&#39;m not quite sure.<br></p><p>-Thorsten <br></p><p>&gt; Am 03.09.2016 um 11:34 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; (Seems my first email was not resent by mailing list due to its temporary problems. So second attempt)<br>&gt; <br>&gt; I&#39;m not sure if it is a correct time to discuss this, if not - I&#39;ll hold this for later time.<br>&gt; <br>&gt; I was reading the article of author of some C/C++ static code analyzer tool where he was analyzing and discussing about code of some open source program. And there was a paragraph about bugs people make when using ternary operator. There a lot of bugs in C/C++ sources of well-known open source programs(like Chromium, ReactOS, MongoDB, Unreal Engine 4, Wine, FreeBSD Kernel and many others) made when developer assumes that priority of &#39;?:&#39; operator is higher than other operators like &#39;+&#39;, &#39;*&#39;, &#39;|&#39;, &#39;&amp;&#39; and other.<br>&gt; <br>&gt; Examples:<br>&gt; <br>&gt; int edge_height = titlebar_bottom-&gt;height() -<br>&gt;    ShouldShowClientEdge() ? kClientEdgeThickness : 0;<br>&gt; <br>&gt; ULONG treg = 0x54 + (dev &lt; 3) ? (dev &lt;&lt; 1) : 7;<br>&gt; <br>&gt; if (IP_PACKET_SIZE &lt; parsedPacket.info.H263.dataLength +<br>&gt;       parsedPacket.info.H263.insert2byteStartCode ? 2:0) {...}<br>&gt; <br>&gt; stringstream ss;<br>&gt; ss &lt;&lt; (sizeof(char *) == 8) ? &quot; 64bit&quot; : &quot; 32bit&quot;;<br>&gt; <br>&gt; return UniformVectorExpressions.GetAllocatedSize()<br>&gt;      + UniformScalarExpressions.GetAllocatedSize()<br>&gt;      + Uniform2DTextureExpressions.GetAllocatedSize()<br>&gt;      + UniformCubeTextureExpressions.GetAllocatedSize()<br>&gt;      + ParameterCollections.GetAllocatedSize()<br>&gt;      + UniformBufferStruct<br>&gt;          ?<br>&gt;          (sizeof(FUniformBufferStruct) +<br>&gt;           UniformBufferStruct-&gt;GetMembers().GetAllocatedSize())<br>&gt;          :<br>&gt;          0;<br>&gt; <br>&gt; .. and so on..<br>&gt; <br>&gt; Yes, in Swift we have no problem with mixing lets say Ints and Boolean values. But, it seems that it is highly possible to catch the same kind of problem with ternary operator in Swift for boolean values:<br>&gt; <br>&gt; func isOne()-&gt;Bool { print(1); return false }<br>&gt; func isTwo()-&gt;Bool { print(2); return false }<br>&gt; <br>&gt; let a = true<br>&gt; let b = true<br>&gt; <br>&gt; let result = a || (b) ? isOne() : isTwo() // prints 1<br>&gt; <br>&gt; print(result) // false<br>&gt; <br>&gt; As you understand, to work correctly we need parentheses:<br>&gt; let result = a || ((b) ? isOne() : isTwo()) // &lt;nothing&gt;<br>&gt; print(result) // true<br>&gt; <br>&gt; ..or set priority of &#39;?:&#39; operator higher than other operators (but this probably could *silently* break old code?)<br>&gt; <br>&gt; I was trying to play with custom operators and ternary operator :<br>&gt; <br>&gt; func &lt;&lt;(lhs: inout String, rhs: String) { lhs += rhs }<br>&gt; func &lt;&lt;(lhs: inout String, rhs: Bool) { lhs += rhs.description }<br>&gt; <br>&gt; let x = 10<br>&gt; var s = &quot;&quot;<br>&gt; <br>&gt; s &lt;&lt; &quot;abc&quot;<br>&gt; print(s) // abc<br>&gt; <br>&gt; s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;<br>&gt; print(s)<br>&gt; <br>&gt; .. but this crashes the compiler(bug reported), but this shows that could be other ways when ternary operator works not as expected by many developers.<br>&gt; <br>&gt; I believe the problem is worth to be discussed and probably solved for Swift in near future.<br>&gt; <br>&gt; Opinions?<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/b958b59a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>September  3, 2016 at 06:00:00am</p></header><div class="content"><p>I don&#39;t he&#39;s proposing to change the precedence of &quot;?:&quot; per se, just requiring — as part of its syntax — it to be enclosed in parens when it&#39;s not by itself:<br></p><p>x = condition ? y : z //ok, since it&#39;s by itself<br>x = (test || condition) ? y : z //ok, since it&#39;s still technically by itself<br>x = test || (condition ? y : z) //ok, has parens<br>x = test || condition ? y : z //syntax error, no parens<br></p><p>I don&#39;t actually know what the correct precedence for ?: is because I never use that 4th &quot;form&quot;, for the very reason this change is being proposed: it&#39;s too easy for me to get mixed up otherwise.<br></p><p>Where was I? Oh, right, as I understand it, this doesn&#39;t so much change ?:&#39;s precedence as it does remove it from the precedence &quot;system&quot;.<br></p><p>- Dave Sweeris<br></p><p>Sent from my iPhone, without sleep.<br></p><p>&gt; On Sep 3, 2016, at 06:21, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The problem you describe is not the priority of the ternary operator but that developers just assume a priority without checking (or learning) whether their assumption is correct. Changing the priority won&#39;t solve that problem, it would only shift the problem over to those developers assuming the other priority. Worse, it would create this problem for those developers knowing the correct priority, because they now have to relearn the new priority with the added difficulty of the priority being different from C.<br>&gt; <br>&gt; I&#39;m not sure whether the problem really is one (other operators have priorities too, which have to be learned), but assuming for the moment that it is, a solution would be to replace the ternary operator with an if-expression: if condition then expr1 else expr2<br>&gt; This would enclose the condition between two keywords and thereby be free of misunderstandings.<br>&gt; Replacing the ternary operator is on the commonly asked changes list, though, and therefore requires new arguments/insights why a replacement would make sense. I think the possibly confusing priority has been discussed already in the past and therefore wouldn&#39;t count as new insight, though I&#39;m not quite sure.<br>&gt; <br>&gt; -Thorsten <br>&gt; <br>&gt;&gt; Am 03.09.2016 um 11:34 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt; <br>&gt;&gt; (Seems my first email was not resent by mailing list due to its temporary problems. So second attempt)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure if it is a correct time to discuss this, if not - I&#39;ll hold this for later time.<br>&gt;&gt; <br>&gt;&gt; I was reading the article of author of some C/C++ static code analyzer tool where he was analyzing and discussing about code of some open source program. And there was a paragraph about bugs people make when using ternary operator. There a lot of bugs in C/C++ sources of well-known open source programs(like Chromium, ReactOS, MongoDB, Unreal Engine 4, Wine, FreeBSD Kernel and many others) made when developer assumes that priority of &#39;?:&#39; operator is higher than other operators like &#39;+&#39;, &#39;*&#39;, &#39;|&#39;, &#39;&amp;&#39; and other.<br>&gt;&gt; <br>&gt;&gt; Examples:<br>&gt;&gt; <br>&gt;&gt; int edge_height = titlebar_bottom-&gt;height() -<br>&gt;&gt;    ShouldShowClientEdge() ? kClientEdgeThickness : 0;<br>&gt;&gt; <br>&gt;&gt; ULONG treg = 0x54 + (dev &lt; 3) ? (dev &lt;&lt; 1) : 7;<br>&gt;&gt; <br>&gt;&gt; if (IP_PACKET_SIZE &lt; parsedPacket.info.H263.dataLength +<br>&gt;&gt;       parsedPacket.info.H263.insert2byteStartCode ? 2:0) {...}<br>&gt;&gt; <br>&gt;&gt; stringstream ss;<br>&gt;&gt; ss &lt;&lt; (sizeof(char *) == 8) ? &quot; 64bit&quot; : &quot; 32bit&quot;;<br>&gt;&gt; <br>&gt;&gt; return UniformVectorExpressions.GetAllocatedSize()<br>&gt;&gt;      + UniformScalarExpressions.GetAllocatedSize()<br>&gt;&gt;      + Uniform2DTextureExpressions.GetAllocatedSize()<br>&gt;&gt;      + UniformCubeTextureExpressions.GetAllocatedSize()<br>&gt;&gt;      + ParameterCollections.GetAllocatedSize()<br>&gt;&gt;      + UniformBufferStruct<br>&gt;&gt;          ?<br>&gt;&gt;          (sizeof(FUniformBufferStruct) +<br>&gt;&gt;           UniformBufferStruct-&gt;GetMembers().GetAllocatedSize())<br>&gt;&gt;          :<br>&gt;&gt;          0;<br>&gt;&gt; <br>&gt;&gt; .. and so on..<br>&gt;&gt; <br>&gt;&gt; Yes, in Swift we have no problem with mixing lets say Ints and Boolean values. But, it seems that it is highly possible to catch the same kind of problem with ternary operator in Swift for boolean values:<br>&gt;&gt; <br>&gt;&gt; func isOne()-&gt;Bool { print(1); return false }<br>&gt;&gt; func isTwo()-&gt;Bool { print(2); return false }<br>&gt;&gt; <br>&gt;&gt; let a = true<br>&gt;&gt; let b = true<br>&gt;&gt; <br>&gt;&gt; let result = a || (b) ? isOne() : isTwo() // prints 1<br>&gt;&gt; <br>&gt;&gt; print(result) // false<br>&gt;&gt; <br>&gt;&gt; As you understand, to work correctly we need parentheses:<br>&gt;&gt; let result = a || ((b) ? isOne() : isTwo()) // &lt;nothing&gt;<br>&gt;&gt; print(result) // true<br>&gt;&gt; <br>&gt;&gt; ..or set priority of &#39;?:&#39; operator higher than other operators (but this probably could *silently* break old code?)<br>&gt;&gt; <br>&gt;&gt; I was trying to play with custom operators and ternary operator :<br>&gt;&gt; <br>&gt;&gt; func &lt;&lt;(lhs: inout String, rhs: String) { lhs += rhs }<br>&gt;&gt; func &lt;&lt;(lhs: inout String, rhs: Bool) { lhs += rhs.description }<br>&gt;&gt; <br>&gt;&gt; let x = 10<br>&gt;&gt; var s = &quot;&quot;<br>&gt;&gt; <br>&gt;&gt; s &lt;&lt; &quot;abc&quot;<br>&gt;&gt; print(s) // abc<br>&gt;&gt; <br>&gt;&gt; s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;<br>&gt;&gt; print(s)<br>&gt;&gt; <br>&gt;&gt; .. but this crashes the compiler(bug reported), but this shows that could be other ways when ternary operator works not as expected by many developers.<br>&gt;&gt; <br>&gt;&gt; I believe the problem is worth to be discussed and probably solved for Swift in near future.<br>&gt;&gt; <br>&gt;&gt; Opinions?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/5c9a21ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>September  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Am 03.09.2016 um 13:55 schrieb David Sweeris &lt;davesweeris at mac.com&gt;:<br>&gt; <br>&gt; I don&#39;t he&#39;s proposing to change the precedence of &quot;?:&quot; per se, just requiring — as part of its syntax — it to be enclosed in parens when it&#39;s not by itself:<br></p><p>Ah, ok, I didn&#39;t get that. That makes more sense, then :-)<br></p><p>-Thorsten <br></p><p><br>&gt; <br>&gt; x = condition ? y : z //ok, since it&#39;s by itself<br>&gt; x = (test || condition) ? y : z //ok, since it&#39;s still technically by itself<br>&gt; x = test || (condition ? y : z) //ok, has parens<br>&gt; x = test || condition ? y : z //syntax error, no parens<br>&gt; <br>&gt; I don&#39;t actually know what the correct precedence for ?: is because I never use that 4th &quot;form&quot;, for the very reason this change is being proposed: it&#39;s too easy for me to get mixed up otherwise.<br>&gt; <br>&gt; Where was I? Oh, right, as I understand it, this doesn&#39;t so much change ?:&#39;s precedence as it does remove it from the precedence &quot;system&quot;.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt; Sent from my iPhone, without sleep.<br>&gt; <br>&gt;&gt; On Sep 3, 2016, at 06:21, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The problem you describe is not the priority of the ternary operator but that developers just assume a priority without checking (or learning) whether their assumption is correct. Changing the priority won&#39;t solve that problem, it would only shift the problem over to those developers assuming the other priority. Worse, it would create this problem for those developers knowing the correct priority, because they now have to relearn the new priority with the added difficulty of the priority being different from C.<br>&gt;&gt; <br>&gt;&gt; I&#39;m not sure whether the problem really is one (other operators have priorities too, which have to be learned), but assuming for the moment that it is, a solution would be to replace the ternary operator with an if-expression: if condition then expr1 else expr2<br>&gt;&gt; This would enclose the condition between two keywords and thereby be free of misunderstandings.<br>&gt;&gt; Replacing the ternary operator is on the commonly asked changes list, though, and therefore requires new arguments/insights why a replacement would make sense. I think the possibly confusing priority has been discussed already in the past and therefore wouldn&#39;t count as new insight, though I&#39;m not quite sure.<br>&gt;&gt; <br>&gt;&gt; -Thorsten <br>&gt;&gt; <br>&gt;&gt;&gt; Am 03.09.2016 um 11:34 schrieb Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (Seems my first email was not resent by mailing list due to its temporary problems. So second attempt)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not sure if it is a correct time to discuss this, if not - I&#39;ll hold this for later time.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was reading the article of author of some C/C++ static code analyzer tool where he was analyzing and discussing about code of some open source program. And there was a paragraph about bugs people make when using ternary operator. There a lot of bugs in C/C++ sources of well-known open source programs(like Chromium, ReactOS, MongoDB, Unreal Engine 4, Wine, FreeBSD Kernel and many others) made when developer assumes that priority of &#39;?:&#39; operator is higher than other operators like &#39;+&#39;, &#39;*&#39;, &#39;|&#39;, &#39;&amp;&#39; and other.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; int edge_height = titlebar_bottom-&gt;height() -<br>&gt;&gt;&gt;    ShouldShowClientEdge() ? kClientEdgeThickness : 0;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ULONG treg = 0x54 + (dev &lt; 3) ? (dev &lt;&lt; 1) : 7;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if (IP_PACKET_SIZE &lt; parsedPacket.info.H263.dataLength +<br>&gt;&gt;&gt;       parsedPacket.info.H263.insert2byteStartCode ? 2:0) {...}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; stringstream ss;<br>&gt;&gt;&gt; ss &lt;&lt; (sizeof(char *) == 8) ? &quot; 64bit&quot; : &quot; 32bit&quot;;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; return UniformVectorExpressions.GetAllocatedSize()<br>&gt;&gt;&gt;      + UniformScalarExpressions.GetAllocatedSize()<br>&gt;&gt;&gt;      + Uniform2DTextureExpressions.GetAllocatedSize()<br>&gt;&gt;&gt;      + UniformCubeTextureExpressions.GetAllocatedSize()<br>&gt;&gt;&gt;      + ParameterCollections.GetAllocatedSize()<br>&gt;&gt;&gt;      + UniformBufferStruct<br>&gt;&gt;&gt;          ?<br>&gt;&gt;&gt;          (sizeof(FUniformBufferStruct) +<br>&gt;&gt;&gt;           UniformBufferStruct-&gt;GetMembers().GetAllocatedSize())<br>&gt;&gt;&gt;          :<br>&gt;&gt;&gt;          0;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .. and so on..<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, in Swift we have no problem with mixing lets say Ints and Boolean values. But, it seems that it is highly possible to catch the same kind of problem with ternary operator in Swift for boolean values:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func isOne()-&gt;Bool { print(1); return false }<br>&gt;&gt;&gt; func isTwo()-&gt;Bool { print(2); return false }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a = true<br>&gt;&gt;&gt; let b = true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let result = a || (b) ? isOne() : isTwo() // prints 1<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(result) // false<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As you understand, to work correctly we need parentheses:<br>&gt;&gt;&gt; let result = a || ((b) ? isOne() : isTwo()) // &lt;nothing&gt;<br>&gt;&gt;&gt; print(result) // true<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ..or set priority of &#39;?:&#39; operator higher than other operators (but this probably could *silently* break old code?)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was trying to play with custom operators and ternary operator :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func &lt;&lt;(lhs: inout String, rhs: String) { lhs += rhs }<br>&gt;&gt;&gt; func &lt;&lt;(lhs: inout String, rhs: Bool) { lhs += rhs.description }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let x = 10<br>&gt;&gt;&gt; var s = &quot;&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; s &lt;&lt; &quot;abc&quot;<br>&gt;&gt;&gt; print(s) // abc<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;<br>&gt;&gt;&gt; print(s)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; .. but this crashes the compiler(bug reported), but this shows that could be other ways when ternary operator works not as expected by many developers.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe the problem is worth to be discussed and probably solved for Swift in near future.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Opinions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/9e277e76/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>September  3, 2016 at 03:00:00pm</p></header><div class="content"><p>With the replacement, I would prefer just &quot;then-else&quot;, which would still<br>clearly carry the meaning of low priority. But yes, this option was<br>explicitly rejected. Unfortunately.<br></p><p>I also agree that changing the priority is not a solution. But how about<br>removing priority?<br></p><p>The following expression:<br>`s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;`<br>Is currently parsed as<br>`(s &lt;&lt; (x == 10)) ? &quot;10&quot; : &quot;not 10&quot;`<br></p><p>With such a change, the compiler would make you add outer parentheses and<br>find a bug, by the way:<br>`s &lt;&lt; ((x == 10) ? &quot;10&quot; : &quot;not 10&quot;)`<br></p><p>Should this apply to assignment operators?<br>`s += (x == 10) ? &quot;10&quot; : &quot;not 10&quot;  // error?`<br></p><p>I think such caveats of `?:` are worth creating a proposal, at least.<br></p><p>2016-09-03 14:21 GMT+03:00 Thorsten Seitz via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; The problem you describe is not the priority of the ternary operator but<br>&gt; that developers just assume a priority without checking (or learning)<br>&gt; whether their assumption is correct. Changing the priority won&#39;t solve that<br>&gt; problem, it would only shift the problem over to those developers assuming<br>&gt; the other priority. Worse, it would create this problem for those<br>&gt; developers knowing the correct priority, because they now have to relearn<br>&gt; the new priority with the added difficulty of the priority being different<br>&gt; from C.<br>&gt;<br>&gt; I&#39;m not sure whether the problem really is one (other operators have<br>&gt; priorities too, which have to be learned), but assuming for the moment that<br>&gt; it is, a solution would be to replace the ternary operator with an<br>&gt; if-expression: *if* condition *then* expr1 *else* expr2<br>&gt; This would enclose the condition between two keywords and thereby be free<br>&gt; of misunderstandings.<br>&gt; Replacing the ternary operator is on the commonly asked changes list,<br>&gt; though, and therefore requires new arguments/insights why a replacement<br>&gt; would make sense. I think the possibly confusing priority has been<br>&gt; discussed already in the past and therefore wouldn&#39;t count as new insight,<br>&gt; though I&#39;m not quite sure.<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/1d9c0da8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch]: Require parenthesis for ternary operator &#39;?:&#39; or change its priority</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>September  3, 2016 at 11:00:00am</p></header><div class="content"><p>I agree with Thorsten. I would expand on that by arguing that (1) the<br>original motivation identified is inapplicable to Swift; (2) the solution<br>doesn&#39;t solve the problem, and creates more problems; (3) the revised<br>solutions are not compatible with the direction of Swift.<br></p><p>Argument (1):<br></p><p>The only real-world example provided is one in C, not Swift. The key<br>difference is that C will implicitly cast from many types to bool, but<br>Swift does not. Therefore, that example is not a demonstration of a<br>weakness in Swift.<br></p><p>The same issue could only arise in Swift when you have an expression `a<br>[operator] b ? c : d` where a, b, c, and d are all Bool--and the operator<br>is a Boolean operator. I see no evidence that confusion is encountered in<br>everyday practice because the user would have to (a) not know the relative<br>precedence of Boolean/ternary operators; (b) incorrectly believe that they<br>do know the relative precedence of Boolean/ternary operators; and (c)<br>choose not to use parentheses.<br></p><p>I don&#39;t think it&#39;s likely you&#39;ll encounter a real-life example of this, nor<br>do I think that we should make source-breaking changes to the language to<br>prevent that possibility, because the category of errors that are possible<br>if a user doesn&#39;t understand something *and* affirmatively believes<br>something that&#39;s not true *and* chooses not to use a sane coding style is<br>infinite and impossible to defend against.<br></p><p>Argument (2):<br></p><p>The original proposal is, in essence, to change `?:` to `()?:`, but that<br>does not solve the issue outlined above *and* silently breaks existing code<br>that uses the current operator correctly. For instance, `a &amp;&amp; (b || c) ? d<br>: e` would have a different meaning. Unless I&#39;m mistaken, the only way to<br>remove all ambiguity is to change the syntax from `?:` to `(()?:)`, which I<br>think you&#39;ll agree is absurd.<br></p><p>Argument (3):<br></p><p>Changing the syntax to use words is a commonly rejected proposal, and I<br>don&#39;t see any new information on how it would solve this particular issue.<br>Although custom operators can&#39;t use words, built-in ones do (e.g., `as`)<br>and still have relative precedence that is higher than some other<br>operators. Therefore, spelling out &quot;then&quot; absolutely does not &quot;carry the<br>meaning of low priority.&quot; In fact, by moving away from C, you are now going<br>to raise questions for the large proportion of uses who *do* know the<br>precedence of ?: as to what the corresponding precedence might be in Swift.<br></p><p>Finally, the argument to remove precedence here has the same defect as<br>previous proposals on changing or removing operator precedence. This<br>operator, like others, does have a known precedence. It is clearly written<br>out in a table, and in the case of `?:` it is essentially unchanged from<br>other languages in the C family. If you use the operator assuming it has<br>precedence that it does not have, then you are in for a bad time. However,<br>*every* operator with a precedence relationship has this &quot;caveat&quot;. That is,<br>after all, what it means to have precedence above some operator and below<br>some other operator. If you believe that the issues described above are<br>sufficient to remove precedence for `?:`, you must also believe that it is<br>sufficient to remove relative precedence between any two operators except<br>the basic arithmetic operators `+`, `-`, `*`, `/`. But this is clearly not<br>the direction of Swift, since we have recently changed custom operator<br>syntax specifically to enable a better way to define new operators *with<br>custom precedence*.<br></p><p>In short, any change in Swift should be justified by a real-world use case.<br>A source-breaking change, such as modifying the syntax or precedence of an<br>existing operator, should be justified by an overwhelming compelling<br>real-world use case. I see only theoretical ones presented here, and I see<br>no solution that actually addresses the alleged issue in a way that fits<br>with the direction of Swift.<br></p><p><br>On Sat, Sep 3, 2016 at 7:29 AM Anton Zhilin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; With the replacement, I would prefer just &quot;then-else&quot;, which would still<br>&gt; clearly carry the meaning of low priority. But yes, this option was<br>&gt; explicitly rejected. Unfortunately.<br>&gt;<br>&gt; I also agree that changing the priority is not a solution. But how about<br>&gt; removing priority?<br>&gt;<br>&gt; The following expression:<br>&gt; `s &lt;&lt; (x == 10) ? &quot;10&quot; : &quot;not 10&quot;`<br>&gt; Is currently parsed as<br>&gt; `(s &lt;&lt; (x == 10)) ? &quot;10&quot; : &quot;not 10&quot;`<br>&gt;<br>&gt; With such a change, the compiler would make you add outer parentheses and<br>&gt; find a bug, by the way:<br>&gt; `s &lt;&lt; ((x == 10) ? &quot;10&quot; : &quot;not 10&quot;)`<br>&gt;<br>&gt; Should this apply to assignment operators?<br>&gt; `s += (x == 10) ? &quot;10&quot; : &quot;not 10&quot;  // error?`<br>&gt;<br>&gt; I think such caveats of `?:` are worth creating a proposal, at least.<br>&gt;<br>&gt; 2016-09-03 14:21 GMT+03:00 Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;&gt; The problem you describe is not the priority of the ternary operator but<br>&gt;&gt; that developers just assume a priority without checking (or learning)<br>&gt;&gt; whether their assumption is correct. Changing the priority won&#39;t solve that<br>&gt;&gt; problem, it would only shift the problem over to those developers assuming<br>&gt;&gt; the other priority. Worse, it would create this problem for those<br>&gt;&gt; developers knowing the correct priority, because they now have to relearn<br>&gt;&gt; the new priority with the added difficulty of the priority being different<br>&gt;&gt; from C.<br>&gt;&gt;<br>&gt;&gt; I&#39;m not sure whether the problem really is one (other operators have<br>&gt;&gt; priorities too, which have to be learned), but assuming for the moment that<br>&gt;&gt; it is, a solution would be to replace the ternary operator with an<br>&gt;&gt; if-expression: *if* condition *then* expr1 *else* expr2<br>&gt;&gt; This would enclose the condition between two keywords and thereby be free<br>&gt;&gt; of misunderstandings.<br>&gt;&gt; Replacing the ternary operator is on the commonly asked changes list,<br>&gt;&gt; though, and therefore requires new arguments/insights why a replacement<br>&gt;&gt; would make sense. I think the possibly confusing priority has been<br>&gt;&gt; discussed already in the past and therefore wouldn&#39;t count as new insight,<br>&gt;&gt; though I&#39;m not quite sure.<br>&gt;&gt;<br>&gt;&gt; -Thorsten<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160903/26608f83/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
