<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April  6, 2016 at 02:00:00pm</p></header><div class="content"><p>on Wed Apr 06 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;     On Apr 6, 2016, at 2:17 PM, Dave Abrahams via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Guidance:<br>&gt;<br>&gt;         When using odd integer literals to produce an even number sequence,<br>&gt;         prefer the `...` operator to the `..&lt;` operator and change your ending<br>&gt;         literal to an even number.<br>&gt;<br>&gt;     I don&#39;t think you can fix counterintuitive behavior with guidance. <br>&gt;<br>&gt;     (1..&lt;199).striding(by: -2) is the first way I&#39;d reach for to express<br>&gt;     197, 195, ..., 3, 1<br>&gt;<br>&gt; Yes, but you can with warnings and fixits. <br>&gt;<br>&gt; * The compiler should issue a warning for any use of <br>&gt;<br>&gt; (n..&lt;m).striding(by: v | v &lt; 0) | n, m, v : Integer<br>&gt;<br>&gt; with a fixit of &quot;replace (n..&lt;m) with (n...m - 1)&quot; regardless of<br>&gt; whether n or m is known at compile time <br>&gt;<br>&gt; * If v cannot be known at compile time, I think the compiler should<br>&gt; always prefer ... to ..&lt;.<br>&gt;<br>&gt; * The compiler should not allow<br>&gt;<br>&gt; (n..&lt;m).striding(by: v | v &lt; 0) | n, m, v: floating point types<br>&gt;<br>&gt; where v is known at compile time to be a negative constant. There should <br>&gt; also be a runtime precondition that raises a fatal error should a negative <br>&gt; v be used with a half-open interval.<br></p><p>You can lessen the impact of any design choice by adding warnings and<br>fixits, but I&#39;m pretty sure it&#39;s better to make a choice that doesn&#39;t<br>require them.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Feature proposal: Range operator with step</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  7, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Am 06.04.2016 um 23:03 schrieb Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; on Wed Apr 06 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    On Apr 6, 2016, at 2:17 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;    &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    Guidance:<br>&gt;&gt; <br>&gt;&gt;        When using odd integer literals to produce an even number sequence,<br>&gt;&gt;        prefer the `...` operator to the `..&lt;` operator and change your ending<br>&gt;&gt;        literal to an even number.<br>&gt;&gt; <br>&gt;&gt;    I don&#39;t think you can fix counterintuitive behavior with guidance. <br>&gt;&gt; <br>&gt;&gt;    (1..&lt;199).striding(by: -2) is the first way I&#39;d reach for to express<br>&gt;&gt;    197, 195, ..., 3, 1<br>&gt;&gt; <br>&gt;&gt; Yes, but you can with warnings and fixits. <br>&gt;&gt; <br>&gt;&gt; * The compiler should issue a warning for any use of <br>&gt;&gt; <br>&gt;&gt; (n..&lt;m).striding(by: v | v &lt; 0) | n, m, v : Integer<br>&gt;&gt; <br>&gt;&gt; with a fixit of &quot;replace (n..&lt;m) with (n...m - 1)&quot; regardless of<br>&gt;&gt; whether n or m is known at compile time <br>&gt;&gt; <br>&gt;&gt; * If v cannot be known at compile time, I think the compiler should<br>&gt;&gt; always prefer ... to ..&lt;.<br>&gt;&gt; <br>&gt;&gt; * The compiler should not allow<br>&gt;&gt; <br>&gt;&gt; (n..&lt;m).striding(by: v | v &lt; 0) | n, m, v: floating point types<br>&gt;&gt; <br>&gt;&gt; where v is known at compile time to be a negative constant. There should <br>&gt;&gt; also be a runtime precondition that raises a fatal error should a negative <br>&gt;&gt; v be used with a half-open interval.<br>&gt; <br>&gt; You can lessen the impact of any design choice by adding warnings and<br>&gt; fixits, but I&#39;m pretty sure it&#39;s better to make a choice that doesn&#39;t<br>&gt; require them.<br></p><p>Absolutely! Having to add warnings and fixits just demonstrates that the design is confusing. <br></p><p>-Thorsten<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
