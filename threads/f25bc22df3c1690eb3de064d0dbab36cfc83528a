<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 26, 2016 at 02:00:00pm</p></header><div class="content"><p>on Sun Apr 24 2016, John Holdsworth &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; To audition Xcode using the following multi-line syntax:<br>&gt;<br>&gt; let xml = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt; &quot;&lt;catalog&gt;<br>&gt; &quot; &lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt; &quot; &lt;author&gt;\(author)&lt;/author&gt;<br>&gt; &quot; &lt;title&gt;XML Developer&#39;s Guide&lt;/title&gt;<br>&gt; &quot; &lt;genre&gt;Computer&lt;/genre&gt;<br>&gt; &quot; &lt;price&gt;44.95&lt;/price&gt;<br>&gt; &quot; &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;<br>&gt; &quot; &lt;description&gt;An in-depth look at creating applications with XML.&lt;/description&gt;<br>&gt; &quot; &lt;/book&gt;<br>&gt; &quot;&lt;/catalog&gt;<br>&gt; &quot;&quot;<br>&gt; print(xml)<br>&gt;<br>&gt; You can install:<br>&gt; http://johnholdsworth.com/swift-LOCAL-2016-04-25-a-osx.tar.gz<br></p><p>Personally, I don&#39;t like that this syntax requires the moral equivalent<br>of a continuation character.  It means I need to run a regex<br>search/replace over my text after I paste it between quotation marks.<br></p><p>&gt;     On 24 Apr 2016, at 23:35, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;<br>&gt;         On Apr 23, 2016, at 2:08 PM, Brent Royal-Gordon via swift-evolution<br>&gt;         &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;         I’m trying to avoid more advanced features such as the handling of<br>&gt;             indenting which<br>&gt;             for me complicates something that if kept simple can be documented<br>&gt;             very easily.<br>&gt;<br>&gt;         I don&#39;t think you can tackle multiline strings without worrying about<br>&gt;         indenting. Indentation may fundamentally change the approach you choose.<br>&gt;<br>&gt;     I agree with this and almost every point you make in your email (and your<br>&gt;     other subsequent one about one approach maximally general). That said, I<br>&gt;     wonder if there is a different conclusion that can be reached. I’m going to<br>&gt;     rearrange your three features a bit:<br>&gt;<br>&gt;         The way I would prefer to tackle these is:<br>&gt;<br>&gt;         * Multiline literals: If the closing quote of a string is not present,<br>&gt;         look at the next line. If it consists of (optional) indentation followed<br>&gt;         by a matching opening quote, the string has a newline and then continues<br>&gt;         after the quote on the next line. (The handling of comments is an open<br>&gt;         question here.)<br>&gt;<br>&gt;         let xml: String = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt;         &quot;&lt;catalog&gt;<br>&gt;         &quot;\t&lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt;         &quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;         &quot;\t&lt;/book&gt;<br>&gt;         &quot;&lt;/catalog&gt;&quot;<br>&gt;<br>&gt;         The cool things about this are that (a) the compiler can tell you really<br>&gt;         do mean this to be part of the literal and you haven&#39;t just forgotten to<br>&gt;         close the string, and (b) there&#39;s no guesswork about how indentation<br>&gt;         should be handled. The uncool thing is that you need to insert the quote<br>&gt;         at the beginning of each line, so you can&#39;t just blindly paste into a<br>&gt;         multiline literal. Editors can help make that easier, though—a &quot;paste as<br>&gt;         string literal&quot; feature would be a nice addition to Xcode, and not just<br>&gt;         for multiline strings or just for Swift.<br>&gt;<br>&gt;     Yes, I completely agree. This is is awesome, and a nice &amp; simple<br>&gt;     generalization of our existing syntax. It has obvious behavior even if you<br>&gt;     encounter it in code without knowing about the feature.<br>&gt;<br>&gt;         * Disabling escapes: If you use single quotes instead of double quotes,<br>&gt;         backslash escapes are disabled.<br>&gt;<br>&gt;     We need a way to disable escapes, but it seems to me that (since it is<br>&gt;     orthogonal to the other concerns) that it should not be tied to the<br>&gt;     “multiple single quotes” syntax. What is your thought on “modifier” prefix<br>&gt;     characters for string literals? e.g.:<br>&gt;<br>&gt;     let x = e”no \escapes \(processed here”<br>&gt;<br>&gt;     If we supported these, they would be supported with multi-line string<br>&gt;     literals by putting the modifiers on the first line of the literal, and the<br>&gt;     multi-line approach above would “just work”. You could introduce several<br>&gt;     different modifiers, e.g. one that disabled general escapes, but still<br>&gt;     allowed \(x) for substitution. <br>&gt;<br>&gt;         * Yes, with a number of backslashes matching the number of quotes, which<br>&gt;         allows you to insert literal \( text: &#39;&#39;&#39; &lt;author&gt;\\\(author)&lt;/author&gt;<br>&gt;<br>&gt;     Egads!<br>&gt;<br>&gt;         Notes on alternatives:<br>&gt;<br>&gt;         1. If you wanted to not provide no-escaping strings, an alternative<br>&gt;         would be to say that *all* escapes require as many backslashes as there<br>&gt;         are quotes in the string delimiter. Thus, a newline escape in a `&quot;&quot;&quot;`<br>&gt;         string would be `\\\n`. This would in practice give you the same<br>&gt;         flexibility to write a literal without worrying (much) about escaping.<br>&gt;<br>&gt;     I’m really not a fan of requiring “stacking” of escapes to re-enable them.<br>&gt;     This (IMO) just makes it less likely that you’ll run into an edge case. I<br>&gt;     also don’t like the “fix&quot; being to have to use 5 quotes around your strings :<br>&gt;     -)<br>&gt;<br>&gt;         3. It might be useful to make multiline `&quot;` strings trim trailing<br>&gt;         whitespace and comments like Perl&#39;s `/x` regex modifier does.<br>&gt;<br>&gt;     If you have modifier characters already, it is easy to build a small zoo<br>&gt;     full of these useful beasts.<br>&gt;<br>&gt;         * Alternative delimiters: If a string literal starts with three, or<br>&gt;         five, or seven, or etc. quotes, that is the delimiter, and fewer quotes<br>&gt;         than that in a row are simply literal quote marks. Four, six, etc.<br>&gt;         quotes is a quote mark abutting the end of the literal.<br>&gt;<br>&gt;         let xml: String = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;         &quot;&quot;&quot;&lt;catalog&gt;<br>&gt;         &quot;&quot;&quot;\t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;         &quot;&quot;&quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;         &quot;&quot;&quot;\t&lt;/book&gt;<br>&gt;         &quot;&quot;&quot;&lt;/catalog&gt;&quot;&quot;&quot;<br>&gt;<br>&gt;         You can&#39;t use this syntax to express an empty string, or a string<br>&gt;         consisting entirely of quote marks, but `&quot;&quot;` handles empty strings<br>&gt;         adequately, and escaping can help with quote marks. (An alternative<br>&gt;         would be to remove the abutting rule and permit `&quot;&quot;&quot;&quot;&quot;&quot;` to mean &quot;empty<br>&gt;         string&quot;, but abutting quotes seem more useful than long-delimiter empty<br>&gt;         strings.)<br>&gt;<br>&gt;     I agree that there is a need to support alternative delimiters, but<br>&gt;     subjectively, I find this to be pretty ugly. It is also a really unfortunate<br>&gt;     degenerate case for “I just want a large blob of XML” because you’d end up<br>&gt;     using “&quot;” almost all the time, and you have to use it on every line.<br>&gt;<br>&gt;     For cases like this, I think it would be reasonable to have a “heredoc” like<br>&gt;     scheme, which does not allow leading indentation, and does work with all the<br>&gt;     same modifier characters above. I do not have a preference on a particular<br>&gt;     syntax, and haven’t given it any thought, but this would allow you to do<br>&gt;     things like:<br>&gt;<br>&gt;     let str = &lt;&lt;EOF<br>&gt;     &lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;     &lt;catalog&gt;<br>&gt;     \t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;     \t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;     \t&lt;/book&gt;<br>&gt;     &lt;/catalog&gt;<br>&gt;     EOF<br>&gt;<br>&gt;     for example. You could then turn off escaping and other knobs using the<br>&gt;     modifier character (somehow, it would have to be incorporated into the<br>&gt;     syntax of course).<br>&gt;<br>&gt;     I generally agree with your down thread remarks about how Swift doesn’t like<br>&gt;     to have multiple different solutions for the same problem. OTOH, you could<br>&gt;     look at “” syntax as being analogous to closure exprs, and heredoc syntax as<br>&gt;     being analogous to nested functions :-)<br>&gt;<br>&gt;     -Chris<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04fcc6f514e0dd6c10a37dcc0558913b?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Daniel Phillips</string> &lt;djp_phillips at me.com&gt;<p>April 30, 2016 at 08:00:00am</p></header><div class="content"><p>Sorry for any extra noise here. I&#39;ve read the 58 emails in this thread and I just wanted to chime in my support for Dave here. <br></p><p>I think a multiline string literal implementation along the lines of Python is a no brainer. <br></p><p>In particular when I&#39;ve needed and wanted multiline string literals it has almost always been when I&#39;ve wanted to embed text from somewhere external (a text file for example, or string contents of a JSON file as part of unit testing). <br></p><p>Needing to append a token at the beginning of each line of my text would make multiline string literals considerably less productive for myself. <br></p><p>Just thought I&#39;d chime in with that. Sorry again for the extra noise. <br></p><p>Regards,<br>Daniel<br></p><p>&gt; On 26 Apr 2016, at 10:55 pm, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Sun Apr 24 2016, John Holdsworth &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; To audition Xcode using the following multi-line syntax:<br>&gt;&gt; <br>&gt;&gt; let xml = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt;&gt; &quot;&lt;catalog&gt;<br>&gt;&gt; &quot; &lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt;&gt; &quot; &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt; &quot; &lt;title&gt;XML Developer&#39;s Guide&lt;/title&gt;<br>&gt;&gt; &quot; &lt;genre&gt;Computer&lt;/genre&gt;<br>&gt;&gt; &quot; &lt;price&gt;44.95&lt;/price&gt;<br>&gt;&gt; &quot; &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;<br>&gt;&gt; &quot; &lt;description&gt;An in-depth look at creating applications with XML.&lt;/description&gt;<br>&gt;&gt; &quot; &lt;/book&gt;<br>&gt;&gt; &quot;&lt;/catalog&gt;<br>&gt;&gt; &quot;&quot;<br>&gt;&gt; print(xml)<br>&gt;&gt; <br>&gt;&gt; You can install:<br>&gt;&gt; http://johnholdsworth.com/swift-LOCAL-2016-04-25-a-osx.tar.gz<br>&gt; <br>&gt; Personally, I don&#39;t like that this syntax requires the moral equivalent<br>&gt; of a continuation character.  It means I need to run a regex<br>&gt; search/replace over my text after I paste it between quotation marks.<br>&gt; <br>&gt;&gt;    On 24 Apr 2016, at 23:35, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;        On Apr 23, 2016, at 2:08 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;        &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;        I’m trying to avoid more advanced features such as the handling of<br>&gt;&gt;            indenting which<br>&gt;&gt;            for me complicates something that if kept simple can be documented<br>&gt;&gt;            very easily.<br>&gt;&gt; <br>&gt;&gt;        I don&#39;t think you can tackle multiline strings without worrying about<br>&gt;&gt;        indenting. Indentation may fundamentally change the approach you choose.<br>&gt;&gt; <br>&gt;&gt;    I agree with this and almost every point you make in your email (and your<br>&gt;&gt;    other subsequent one about one approach maximally general). That said, I<br>&gt;&gt;    wonder if there is a different conclusion that can be reached. I’m going to<br>&gt;&gt;    rearrange your three features a bit:<br>&gt;&gt; <br>&gt;&gt;        The way I would prefer to tackle these is:<br>&gt;&gt; <br>&gt;&gt;        * Multiline literals: If the closing quote of a string is not present,<br>&gt;&gt;        look at the next line. If it consists of (optional) indentation followed<br>&gt;&gt;        by a matching opening quote, the string has a newline and then continues<br>&gt;&gt;        after the quote on the next line. (The handling of comments is an open<br>&gt;&gt;        question here.)<br>&gt;&gt; <br>&gt;&gt;        let xml: String = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt;&gt;        &quot;&lt;catalog&gt;<br>&gt;&gt;        &quot;\t&lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt;&gt;        &quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;        &quot;\t&lt;/book&gt;<br>&gt;&gt;        &quot;&lt;/catalog&gt;&quot;<br>&gt;&gt; <br>&gt;&gt;        The cool things about this are that (a) the compiler can tell you really<br>&gt;&gt;        do mean this to be part of the literal and you haven&#39;t just forgotten to<br>&gt;&gt;        close the string, and (b) there&#39;s no guesswork about how indentation<br>&gt;&gt;        should be handled. The uncool thing is that you need to insert the quote<br>&gt;&gt;        at the beginning of each line, so you can&#39;t just blindly paste into a<br>&gt;&gt;        multiline literal. Editors can help make that easier, though—a &quot;paste as<br>&gt;&gt;        string literal&quot; feature would be a nice addition to Xcode, and not just<br>&gt;&gt;        for multiline strings or just for Swift.<br>&gt;&gt; <br>&gt;&gt;    Yes, I completely agree. This is is awesome, and a nice &amp; simple<br>&gt;&gt;    generalization of our existing syntax. It has obvious behavior even if you<br>&gt;&gt;    encounter it in code without knowing about the feature.<br>&gt;&gt; <br>&gt;&gt;        * Disabling escapes: If you use single quotes instead of double quotes,<br>&gt;&gt;        backslash escapes are disabled.<br>&gt;&gt; <br>&gt;&gt;    We need a way to disable escapes, but it seems to me that (since it is<br>&gt;&gt;    orthogonal to the other concerns) that it should not be tied to the<br>&gt;&gt;    “multiple single quotes” syntax. What is your thought on “modifier” prefix<br>&gt;&gt;    characters for string literals? e.g.:<br>&gt;&gt; <br>&gt;&gt;    let x = e”no \escapes \(processed here”<br>&gt;&gt; <br>&gt;&gt;    If we supported these, they would be supported with multi-line string<br>&gt;&gt;    literals by putting the modifiers on the first line of the literal, and the<br>&gt;&gt;    multi-line approach above would “just work”. You could introduce several<br>&gt;&gt;    different modifiers, e.g. one that disabled general escapes, but still<br>&gt;&gt;    allowed \(x) for substitution. <br>&gt;&gt; <br>&gt;&gt;        * Yes, with a number of backslashes matching the number of quotes, which<br>&gt;&gt;        allows you to insert literal \( text: &#39;&#39;&#39; &lt;author&gt;\\\(author)&lt;/author&gt;<br>&gt;&gt; <br>&gt;&gt;    Egads!<br>&gt;&gt; <br>&gt;&gt;        Notes on alternatives:<br>&gt;&gt; <br>&gt;&gt;        1. If you wanted to not provide no-escaping strings, an alternative<br>&gt;&gt;        would be to say that *all* escapes require as many backslashes as there<br>&gt;&gt;        are quotes in the string delimiter. Thus, a newline escape in a `&quot;&quot;&quot;`<br>&gt;&gt;        string would be `\\\n`. This would in practice give you the same<br>&gt;&gt;        flexibility to write a literal without worrying (much) about escaping.<br>&gt;&gt; <br>&gt;&gt;    I’m really not a fan of requiring “stacking” of escapes to re-enable them.<br>&gt;&gt;    This (IMO) just makes it less likely that you’ll run into an edge case. I<br>&gt;&gt;    also don’t like the “fix&quot; being to have to use 5 quotes around your strings :<br>&gt;&gt;    -)<br>&gt;&gt; <br>&gt;&gt;        3. It might be useful to make multiline `&quot;` strings trim trailing<br>&gt;&gt;        whitespace and comments like Perl&#39;s `/x` regex modifier does.<br>&gt;&gt; <br>&gt;&gt;    If you have modifier characters already, it is easy to build a small zoo<br>&gt;&gt;    full of these useful beasts.<br>&gt;&gt; <br>&gt;&gt;        * Alternative delimiters: If a string literal starts with three, or<br>&gt;&gt;        five, or seven, or etc. quotes, that is the delimiter, and fewer quotes<br>&gt;&gt;        than that in a row are simply literal quote marks. Four, six, etc.<br>&gt;&gt;        quotes is a quote mark abutting the end of the literal.<br>&gt;&gt; <br>&gt;&gt;        let xml: String = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;        &quot;&quot;&quot;&lt;catalog&gt;<br>&gt;&gt;        &quot;&quot;&quot;\t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;        &quot;&quot;&quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;        &quot;&quot;&quot;\t&lt;/book&gt;<br>&gt;&gt;        &quot;&quot;&quot;&lt;/catalog&gt;&quot;&quot;&quot;<br>&gt;&gt; <br>&gt;&gt;        You can&#39;t use this syntax to express an empty string, or a string<br>&gt;&gt;        consisting entirely of quote marks, but `&quot;&quot;` handles empty strings<br>&gt;&gt;        adequately, and escaping can help with quote marks. (An alternative<br>&gt;&gt;        would be to remove the abutting rule and permit `&quot;&quot;&quot;&quot;&quot;&quot;` to mean &quot;empty<br>&gt;&gt;        string&quot;, but abutting quotes seem more useful than long-delimiter empty<br>&gt;&gt;        strings.)<br>&gt;&gt; <br>&gt;&gt;    I agree that there is a need to support alternative delimiters, but<br>&gt;&gt;    subjectively, I find this to be pretty ugly. It is also a really unfortunate<br>&gt;&gt;    degenerate case for “I just want a large blob of XML” because you’d end up<br>&gt;&gt;    using “&quot;” almost all the time, and you have to use it on every line.<br>&gt;&gt; <br>&gt;&gt;    For cases like this, I think it would be reasonable to have a “heredoc” like<br>&gt;&gt;    scheme, which does not allow leading indentation, and does work with all the<br>&gt;&gt;    same modifier characters above. I do not have a preference on a particular<br>&gt;&gt;    syntax, and haven’t given it any thought, but this would allow you to do<br>&gt;&gt;    things like:<br>&gt;&gt; <br>&gt;&gt;    let str = &lt;&lt;EOF<br>&gt;&gt;    &lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;    &lt;catalog&gt;<br>&gt;&gt;    \t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;    \t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;    \t&lt;/book&gt;<br>&gt;&gt;    &lt;/catalog&gt;<br>&gt;&gt;    EOF<br>&gt;&gt; <br>&gt;&gt;    for example. You could then turn off escaping and other knobs using the<br>&gt;&gt;    modifier character (somehow, it would have to be incorporated into the<br>&gt;&gt;    syntax of course).<br>&gt;&gt; <br>&gt;&gt;    I generally agree with your down thread remarks about how Swift doesn’t like<br>&gt;&gt;    to have multiple different solutions for the same problem. OTOH, you could<br>&gt;&gt;    look at “” syntax as being analogous to closure exprs, and heredoc syntax as<br>&gt;&gt;    being analogous to nested functions :-)<br>&gt;&gt; <br>&gt;&gt;    -Chris<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>multi-line string literals.</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>April 30, 2016 at 07:00:00pm</p></header><div class="content"><p>Same here. IMHO, there needs to be a version of multi line strings that&#39;s doesn&#39;t require to prefix a token on each line.<br></p><p>&gt; On 30 Apr 2016, at 09:20, Daniel Phillips via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry for any extra noise here. I&#39;ve read the 58 emails in this thread and I just wanted to chime in my support for Dave here. <br>&gt; <br>&gt; I think a multiline string literal implementation along the lines of Python is a no brainer. <br>&gt; <br>&gt; In particular when I&#39;ve needed and wanted multiline string literals it has almost always been when I&#39;ve wanted to embed text from somewhere external (a text file for example, or string contents of a JSON file as part of unit testing). <br>&gt; <br>&gt; Needing to append a token at the beginning of each line of my text would make multiline string literals considerably less productive for myself. <br>&gt; <br>&gt; Just thought I&#39;d chime in with that. Sorry again for the extra noise. <br>&gt; <br>&gt; Regards,<br>&gt; Daniel<br>&gt; <br>&gt;&gt; On 26 Apr 2016, at 10:55 pm, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Sun Apr 24 2016, John Holdsworth &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To audition Xcode using the following multi-line syntax:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let xml = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt;&gt;&gt; &quot;&lt;catalog&gt;<br>&gt;&gt;&gt; &quot; &lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt;&gt;&gt; &quot; &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt; &quot; &lt;title&gt;XML Developer&#39;s Guide&lt;/title&gt;<br>&gt;&gt;&gt; &quot; &lt;genre&gt;Computer&lt;/genre&gt;<br>&gt;&gt;&gt; &quot; &lt;price&gt;44.95&lt;/price&gt;<br>&gt;&gt;&gt; &quot; &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;<br>&gt;&gt;&gt; &quot; &lt;description&gt;An in-depth look at creating applications with XML.&lt;/description&gt;<br>&gt;&gt;&gt; &quot; &lt;/book&gt;<br>&gt;&gt;&gt; &quot;&lt;/catalog&gt;<br>&gt;&gt;&gt; &quot;&quot;<br>&gt;&gt;&gt; print(xml)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can install:<br>&gt;&gt;&gt; http://johnholdsworth.com/swift-LOCAL-2016-04-25-a-osx.tar.gz<br>&gt;&gt; <br>&gt;&gt; Personally, I don&#39;t like that this syntax requires the moral equivalent<br>&gt;&gt; of a continuation character.  It means I need to run a regex<br>&gt;&gt; search/replace over my text after I paste it between quotation marks.<br>&gt;&gt; <br>&gt;&gt;&gt;   On 24 Apr 2016, at 23:35, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       On Apr 23, 2016, at 2:08 PM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt;       &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       I’m trying to avoid more advanced features such as the handling of<br>&gt;&gt;&gt;           indenting which<br>&gt;&gt;&gt;           for me complicates something that if kept simple can be documented<br>&gt;&gt;&gt;           very easily.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       I don&#39;t think you can tackle multiline strings without worrying about<br>&gt;&gt;&gt;       indenting. Indentation may fundamentally change the approach you choose.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   I agree with this and almost every point you make in your email (and your<br>&gt;&gt;&gt;   other subsequent one about one approach maximally general). That said, I<br>&gt;&gt;&gt;   wonder if there is a different conclusion that can be reached. I’m going to<br>&gt;&gt;&gt;   rearrange your three features a bit:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       The way I would prefer to tackle these is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       * Multiline literals: If the closing quote of a string is not present,<br>&gt;&gt;&gt;       look at the next line. If it consists of (optional) indentation followed<br>&gt;&gt;&gt;       by a matching opening quote, the string has a newline and then continues<br>&gt;&gt;&gt;       after the quote on the next line. (The handling of comments is an open<br>&gt;&gt;&gt;       question here.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       let xml: String = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;<br>&gt;&gt;&gt;       &quot;&lt;catalog&gt;<br>&gt;&gt;&gt;       &quot;\t&lt;book id=\&quot;bk101\&quot; empty=\&quot;\&quot;&gt;<br>&gt;&gt;&gt;       &quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;       &quot;\t&lt;/book&gt;<br>&gt;&gt;&gt;       &quot;&lt;/catalog&gt;&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       The cool things about this are that (a) the compiler can tell you really<br>&gt;&gt;&gt;       do mean this to be part of the literal and you haven&#39;t just forgotten to<br>&gt;&gt;&gt;       close the string, and (b) there&#39;s no guesswork about how indentation<br>&gt;&gt;&gt;       should be handled. The uncool thing is that you need to insert the quote<br>&gt;&gt;&gt;       at the beginning of each line, so you can&#39;t just blindly paste into a<br>&gt;&gt;&gt;       multiline literal. Editors can help make that easier, though—a &quot;paste as<br>&gt;&gt;&gt;       string literal&quot; feature would be a nice addition to Xcode, and not just<br>&gt;&gt;&gt;       for multiline strings or just for Swift.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   Yes, I completely agree. This is is awesome, and a nice &amp; simple<br>&gt;&gt;&gt;   generalization of our existing syntax. It has obvious behavior even if you<br>&gt;&gt;&gt;   encounter it in code without knowing about the feature.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       * Disabling escapes: If you use single quotes instead of double quotes,<br>&gt;&gt;&gt;       backslash escapes are disabled.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   We need a way to disable escapes, but it seems to me that (since it is<br>&gt;&gt;&gt;   orthogonal to the other concerns) that it should not be tied to the<br>&gt;&gt;&gt;   “multiple single quotes” syntax. What is your thought on “modifier” prefix<br>&gt;&gt;&gt;   characters for string literals? e.g.:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   let x = e”no \escapes \(processed here”<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   If we supported these, they would be supported with multi-line string<br>&gt;&gt;&gt;   literals by putting the modifiers on the first line of the literal, and the<br>&gt;&gt;&gt;   multi-line approach above would “just work”. You could introduce several<br>&gt;&gt;&gt;   different modifiers, e.g. one that disabled general escapes, but still<br>&gt;&gt;&gt;   allowed \(x) for substitution. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       * Yes, with a number of backslashes matching the number of quotes, which<br>&gt;&gt;&gt;       allows you to insert literal \( text: &#39;&#39;&#39; &lt;author&gt;\\\(author)&lt;/author&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   Egads!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       Notes on alternatives:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       1. If you wanted to not provide no-escaping strings, an alternative<br>&gt;&gt;&gt;       would be to say that *all* escapes require as many backslashes as there<br>&gt;&gt;&gt;       are quotes in the string delimiter. Thus, a newline escape in a `&quot;&quot;&quot;`<br>&gt;&gt;&gt;       string would be `\\\n`. This would in practice give you the same<br>&gt;&gt;&gt;       flexibility to write a literal without worrying (much) about escaping.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   I’m really not a fan of requiring “stacking” of escapes to re-enable them.<br>&gt;&gt;&gt;   This (IMO) just makes it less likely that you’ll run into an edge case. I<br>&gt;&gt;&gt;   also don’t like the “fix&quot; being to have to use 5 quotes around your strings :<br>&gt;&gt;&gt;   -)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       3. It might be useful to make multiline `&quot;` strings trim trailing<br>&gt;&gt;&gt;       whitespace and comments like Perl&#39;s `/x` regex modifier does.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   If you have modifier characters already, it is easy to build a small zoo<br>&gt;&gt;&gt;   full of these useful beasts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       * Alternative delimiters: If a string literal starts with three, or<br>&gt;&gt;&gt;       five, or seven, or etc. quotes, that is the delimiter, and fewer quotes<br>&gt;&gt;&gt;       than that in a row are simply literal quote marks. Four, six, etc.<br>&gt;&gt;&gt;       quotes is a quote mark abutting the end of the literal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       let xml: String = &quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;&gt;       &quot;&quot;&quot;&lt;catalog&gt;<br>&gt;&gt;&gt;       &quot;&quot;&quot;\t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;&gt;       &quot;&quot;&quot;\t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;       &quot;&quot;&quot;\t&lt;/book&gt;<br>&gt;&gt;&gt;       &quot;&quot;&quot;&lt;/catalog&gt;&quot;&quot;&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       You can&#39;t use this syntax to express an empty string, or a string<br>&gt;&gt;&gt;       consisting entirely of quote marks, but `&quot;&quot;` handles empty strings<br>&gt;&gt;&gt;       adequately, and escaping can help with quote marks. (An alternative<br>&gt;&gt;&gt;       would be to remove the abutting rule and permit `&quot;&quot;&quot;&quot;&quot;&quot;` to mean &quot;empty<br>&gt;&gt;&gt;       string&quot;, but abutting quotes seem more useful than long-delimiter empty<br>&gt;&gt;&gt;       strings.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   I agree that there is a need to support alternative delimiters, but<br>&gt;&gt;&gt;   subjectively, I find this to be pretty ugly. It is also a really unfortunate<br>&gt;&gt;&gt;   degenerate case for “I just want a large blob of XML” because you’d end up<br>&gt;&gt;&gt;   using “&quot;” almost all the time, and you have to use it on every line.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   For cases like this, I think it would be reasonable to have a “heredoc” like<br>&gt;&gt;&gt;   scheme, which does not allow leading indentation, and does work with all the<br>&gt;&gt;&gt;   same modifier characters above. I do not have a preference on a particular<br>&gt;&gt;&gt;   syntax, and haven’t given it any thought, but this would allow you to do<br>&gt;&gt;&gt;   things like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   let str = &lt;&lt;EOF<br>&gt;&gt;&gt;   &lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;&gt;   &lt;catalog&gt;<br>&gt;&gt;&gt;   \t&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;&gt;   \t\t&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;   \t&lt;/book&gt;<br>&gt;&gt;&gt;   &lt;/catalog&gt;<br>&gt;&gt;&gt;   EOF<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   for example. You could then turn off escaping and other knobs using the<br>&gt;&gt;&gt;   modifier character (somehow, it would have to be incorporated into the<br>&gt;&gt;&gt;   syntax of course).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   I generally agree with your down thread remarks about how Swift doesn’t like<br>&gt;&gt;&gt;   to have multiple different solutions for the same problem. OTOH, you could<br>&gt;&gt;&gt;   look at “” syntax as being analogous to closure exprs, and heredoc syntax as<br>&gt;&gt;&gt;   being analogous to nested functions :-)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   -Chris<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
