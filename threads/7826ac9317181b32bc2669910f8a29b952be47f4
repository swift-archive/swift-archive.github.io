<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January  9, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0013 &quot;Remove Partial Application of Non-Final Super Methods” begins now and runs through January 13th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0013-remove-partial-application-super.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>Thank you,<br>Doug Gregor<br>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160109/782647f4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/04a3fc14ec0008acf8d406c93e23c3ae?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>Jesse Rusak</string> &lt;me at jesserusak.com&gt;<p>January  9, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; The review of SE-0013 &quot;Remove Partial Application of Non-Final Super Methods” begins now and runs through January 13th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0013-remove-partial-application-super.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0013-remove-partial-application-super.md&gt;<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>This seems very reasonable to me.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It seems like the trade off in functionality is quite minor (and easy to work around with a local closure) and wouldn’t be worth “deep changes” to resolve. <br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes, especially as the multiple argument list functionality is going away.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I read through the proposal and the implementation and experimented with a work-around.<br></p><p>- Jesse<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/ee1bc928/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 11, 2016 at 01:00:00pm</p></header><div class="content"><p>-1 from me. We should just go back to the old dispatch mechanism in Swift 2.2, since we&#39;re not using the dynamism for anything, and then in Swift 3.0 it&#39;s a non-issue, since there are no more curried function declarations and we can handle the other case.<br></p><p>(This is not a very formal review, but my motivation is entirely implementation-based. I did talk to David internally before sending this.)<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>Since the dynamic dispatch for super methods was already implemented and 2.2 was the active release on master, it seemed natural to propose it for that release at the time. Now that we&#39;ve already branched for Swift-2.2, I wouldn&#39;t be vehemently opposed to not cherry-picking to 2.2.<br></p><p>David<br></p><p>&gt; On Jan 11, 2016, at 1:53 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; -1 from me. We should just go back to the old dispatch mechanism in Swift 2.2, since we&#39;re not using the dynamism for anything, and then in Swift 3.0 it&#39;s a non-issue, since there are no more curried function declarations and we can handle the other case.<br>&gt; <br>&gt; (This is not a very formal review, but my motivation is entirely implementation-based. I did talk to David internally before sending this.)<br>&gt; <br>&gt; Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>I think my point is that the 2.2 branch currently contains a broken implementation, so we have to do something there. We don&#39;t have to do anything in Swift 3.0, though, because the feature has been removed.<br></p><p>Jordan<br></p><p>&gt; On Jan 15, 2016, at 10:20, David Farler &lt;dfarler at apple.com&gt; wrote:<br>&gt; <br>&gt; Since the dynamic dispatch for super methods was already implemented and 2.2 was the active release on master, it seemed natural to propose it for that release at the time. Now that we&#39;ve already branched for Swift-2.2, I wouldn&#39;t be vehemently opposed to not cherry-picking to 2.2.<br>&gt; <br>&gt; David<br>&gt; <br>&gt;&gt; On Jan 11, 2016, at 1:53 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 from me. We should just go back to the old dispatch mechanism in Swift 2.2, since we&#39;re not using the dynamism for anything, and then in Swift 3.0 it&#39;s a non-issue, since there are no more curried function declarations and we can handle the other case.<br>&gt;&gt; <br>&gt;&gt; (This is not a very formal review, but my motivation is entirely implementation-based. I did talk to David internally before sending this.)<br>&gt;&gt; <br>&gt;&gt; Jordan<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/fb31daac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f7d3036e2eaf1283f20f43d62472a29f?s=50"></div><header><strong>[Review] SE-0013 Remove Partial Application of Non-Final Super Methods</strong> from <string>David Farler</string> &lt;dfarler at apple.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>I understand what you meant. Removing the multiple parameter list declarations still isn&#39;t in on master, so I will have to throw this new diagnostic until that&#39;s in anyway, or just wait for the big syntax change to land. I&#39;m just saying, since these both have to go together as things stand right now, I&#39;m fine with not pushing it for 2.2.<br></p><p>David<br></p><p>&gt; On Jan 15, 2016, at 10:46 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I think my point is that the 2.2 branch currently contains a broken implementation, so we have to do something there. We don&#39;t have to do anything in Swift 3.0, though, because the feature has been removed.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 10:20, David Farler &lt;dfarler at apple.com &lt;mailto:dfarler at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Since the dynamic dispatch for super methods was already implemented and 2.2 was the active release on master, it seemed natural to propose it for that release at the time. Now that we&#39;ve already branched for Swift-2.2, I wouldn&#39;t be vehemently opposed to not cherry-picking to 2.2.<br>&gt;&gt; <br>&gt;&gt; David<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 11, 2016, at 1:53 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 from me. We should just go back to the old dispatch mechanism in Swift 2.2, since we&#39;re not using the dynamism for anything, and then in Swift 3.0 it&#39;s a non-issue, since there are no more curried function declarations and we can handle the other case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; (This is not a very formal review, but my motivation is entirely implementation-based. I did talk to David internally before sending this.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jordan<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/2054df54/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
