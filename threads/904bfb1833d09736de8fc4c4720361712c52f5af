<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 15, 2016 at 02:00:00pm</p></header><div class="content"><p>Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt. Is there some way to get those as Int in Swift for my Objective-C code, too? Maybe some macro in the spirit of NS_REFINED_FOR_SWIFT, NS_SWIFT_NAME, and NS_SWIFT_NOTHROW? Or probably rather something that gets applied to each parameter or return type? I didn’t find anything like that.<br></p><p>For example, I have an NSSegmentedCell subclass that has the following methods:<br></p><p>- (void)setRepresentedObject:(nullable id)anObject forSegment:(NSUInteger)segment;<br>- (nullable id)representedObjectForSegment:(NSUInteger)segment;<br></p><p>… which come through to Swift as:<br></p><p>func setRepresentedObject(anObject: AnyObject?, forSegment segment: UInt)<br>func representedObjectForSegment(segment: UInt) -&gt; AnyObject?<br></p><p>Note the UInt instead of Int. This isn’t very nice because all of the NSSegmentedCell methods use Int. Also, writing code involving these methods and indices extracted from an Array isn’t nice because it requires constant conversions between UInt and Int.<br></p><p>A nice solution would be to have something that allows selectively annotating these parameter and return types to tell the Clang Importer how to import types like NSUInteger to Swift. I guess Frameworks like Foundation and AppKit use something like that internally to opt-in or opt-out of this conversion.<br>Is there something like that I can use? Am I missing something?<br></p><p>Cheers,<br></p><p>Marco<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160115/904bf5af/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br></p><p>Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160115/1c2805d8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 16, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 2016-01-15, at 19:19, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt; <br>&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br></p><p>That is actually intentional on Apple’s part. I think it was mentioned in the WWDC sessions when Swift was introduced (don’t remember which one) and the “Using Swift with Cocoa and Objective-C” book mentions it since the very first release, if I’m not mistaken. To quite the section Foundation Data Types &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WorkingWithCocoaDataTypes.html#//apple_ref/doc/uid/TP40014216-CH6-ID75&gt;:<br></p><p>&gt; Swift bridges NSUInteger and NSInteger to Int. Both of these types come over as Int in Foundation APIs. Int is used for consistency whenever possible in Swift, but the UInt type is available if you require an unsigned integer type.<br></p><p><br>Clearly, Foundation APIs (and other Apple frameworks) get a special treatment here. What I’m looking for is a way to get that for my code, too.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160116/55d83ff7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 17, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 15, 2016, at 10:19 AM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt; <br>&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br></p><p>Yes, it is intentional, we do the same for size_t.<br></p><p>As far as I know, there is no way to get the same behavior for your own code.  It would be reasonable to introduce a clang attribute for that though.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160117/eb8984fd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 2016-01-17, at 22:01, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 10:19 AM, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt;&gt; <br>&gt;&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br>&gt; <br>&gt; Yes, it is intentional, we do the same for size_t.<br>&gt; <br>&gt; As far as I know, there is no way to get the same behavior for your own code.  It would be reasonable to introduce a clang attribute for that though.<br></p><p>Should I file a request for that somewhere?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160118/97cae683/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 18, 2016 at 11:00:00am</p></header><div class="content"><p>On Jan 18, 2016, at 1:15 AM, Marco Masser &lt;lists at duckcode.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 2016-01-17, at 22:01, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 15, 2016, at 10:19 AM, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br>&gt;&gt; <br>&gt;&gt; Yes, it is intentional, we do the same for size_t.<br>&gt;&gt; <br>&gt;&gt; As far as I know, there is no way to get the same behavior for your own code.  It would be reasonable to introduce a clang attribute for that though.<br>&gt; <br>&gt; Should I file a request for that somewhere?<br></p><p>Sure.  bugs.swift.org &lt;http://bugs.swift.org/&gt; is a good place for it.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160118/c469a085/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;&gt; Should I file a request for that somewhere?<br>&gt; <br>&gt; Sure.  bugs.swift.org &lt;http://bugs.swift.org/&gt; is a good place for it.<br></p><p><br>I wasn’t sure if that bug belonged on bugs.swift.org or llvm.org/bugs/, since you wrote that it’s clang related.<br></p><p>Anyways: Done. https://bugs.swift.org/browse/SR-583<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160119/2eaf2483/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 19, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 17, 2016, at 13:01, Chris Lattner via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 10:19 AM, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt;&gt; <br>&gt;&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br>&gt; <br>&gt; Yes, it is intentional, we do the same for size_t.<br>&gt; <br>&gt; As far as I know, there is no way to get the same behavior for your own code.  It would be reasonable to introduce a clang attribute for that though.<br></p><p>I&#39;ve been meaning to do an investigation to see about just doing this automatically for user code—i.e. how many of the top frameworks in CocoaPods are using NSUInteger to really mean &quot;word-sized unsigned integer&quot;, as opposed to &quot;the Apple framework uses NSUInteger here so I will too&quot;.<br></p><p>By the way, the original rational for the NSUInteger -&gt; Int mapping is mostly that our frameworks weren&#39;t consistent about the use of NSInteger/CFIndex vs. NSUInteger. Since Swift makes signedness conversions explicit, this would become an unnecessary burden. (For example, -[UITableViewDataSource numberOfSectionsInTableView:] &lt;https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html#//apple_ref/occ/intfm/UITableViewDataSource/numberOfSectionsInTableView:&gt;  uses NSInteger, but NSArray.count &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/occ/instp/NSArray/count&gt; uses NSUInteger.) We found that there would almost never be an NSUInteger value that actually went beyond NSIntegerMax, at least partly because this is the representation of NSNotFound &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Constants/#//apple_ref/doc/constant_group/NSNotFound&gt;. In cases where there was a value that went past NSIntegerMax, it was usually a unique identifier or a bitfield, i.e. not something that needed arithmetic operations. Since Swift doesn&#39;t have strange undefined behavior around its bitwise operations for signed types, there&#39;s no problem bringing these sorts of values in as Int as well. Similar arguments apply to size_t and rsize_t, which never actually have to represent an integer spanning half of the address space. (If you actually need such a thing for non-size-related reasons, the right type would be uintptr_t, which is imported as UInt.)<br></p><p>One exception is that we do keep the base of NS_OPTIONS enums as NSUInteger if so specified. In that case, we want to keep the integer constant valid as is and not force a spurious minus sign on the 32nd option.<br></p><p>The main loss here is that NSUInteger always carries the precondition of the value being non-negative, but again, existing frameworks already weren&#39;t consistent about that, so we considered it an acceptable trade-off.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160119/e6402267/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f1b93037cbc5f78f16450bd925ce3b5b?s=50"></div><header><strong>Importing NSUInteger in my own Objective-C Code as Int</strong> from <string>Marco Masser</string> &lt;lists at duckcode.com&gt;<p>January 20, 2016 at 11:00:00am</p></header><div class="content"><p>That is very interesting, thanks for sharing your thoughts and the implementers’ rationale on this!<br></p><p>&gt; On 2016-01-19, at 20:43, Jordan Rose via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 17, 2016, at 13:01, Chris Lattner via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 15, 2016, at 10:19 AM, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 15, 2016, at 5:19 AM, Marco Masser via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift imports NSUInteger in Objective-C APIs as Int, but only for Frameworks like Foundation and AppKit. For other code, NSUInteger is imported simply as UInt.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Really? I’d never noticed that. It seems wrong to me, since NSUInteger is clearly an unsigned type, so it should map to Uint.<br>&gt;&gt; <br>&gt;&gt; Yes, it is intentional, we do the same for size_t.<br>&gt;&gt; <br>&gt;&gt; As far as I know, there is no way to get the same behavior for your own code.  It would be reasonable to introduce a clang attribute for that though.<br>&gt; <br>&gt; I&#39;ve been meaning to do an investigation to see about just doing this automatically for user code—i.e. how many of the top frameworks in CocoaPods are using NSUInteger to really mean &quot;word-sized unsigned integer&quot;, as opposed to &quot;the Apple framework uses NSUInteger here so I will too&quot;.<br>&gt; <br>&gt; By the way, the original rational for the NSUInteger -&gt; Int mapping is mostly that our frameworks weren&#39;t consistent about the use of NSInteger/CFIndex vs. NSUInteger. Since Swift makes signedness conversions explicit, this would become an unnecessary burden. (For example, -[UITableViewDataSource numberOfSectionsInTableView:] &lt;https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html#//apple_ref/occ/intfm/UITableViewDataSource/numberOfSectionsInTableView:&gt;  uses NSInteger, but NSArray.count &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/occ/instp/NSArray/count&gt; uses NSUInteger.) We found that there would almost never be an NSUInteger value that actually went beyond NSIntegerMax, at least partly because this is the representation of NSNotFound &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Constants/#//apple_ref/doc/constant_group/NSNotFound&gt;. In cases where there was a value that went past NSIntegerMax, it was usually a unique identifier or a bitfield, i.e. not something that needed arithmetic operations. Since Swift doesn&#39;t have strange undefined behavior around its bitwise operations for signed types, there&#39;s no problem bringing these sorts of values in as Int as well. Similar arguments apply to size_t and rsize_t, which never actually have to represent an integer spanning half of the address space. (If you actually need such a thing for non-size-related reasons, the right type would be uintptr_t, which is imported as UInt.)<br>&gt; <br>&gt; One exception is that we do keep the base of NS_OPTIONS enums as NSUInteger if so specified. In that case, we want to keep the integer constant valid as is and not force a spurious minus sign on the 32nd option.<br>&gt; <br>&gt; The main loss here is that NSUInteger always carries the precondition of the value being non-negative, but again, existing frameworks already weren&#39;t consistent about that, so we considered it an acceptable trade-off.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160120/30bccb60/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
