<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ddffd12793bc9e9f2cdf4e57cd73d410?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>João Nunes</string> &lt;joao3001 at hotmail.com&gt;<p>February 11, 2016 at 02:00:00pm</p></header><div class="content"><p>Hello,<br></p><p><br>I have been thinking about a case that is missing completely from swift.<br></p><p><br>We have the AnyObject type to represent an Object of any type. <br>I recently run upon a situation where i needed a type to represent any Protocol. A AnyProtocol Type would be useful for my case.<br></p><p><br>Example:<br></p><p><br>I have a generic class that needs to receive a protocol type. The code without the AnyProtocol is the following:<br> <br></p><p><br></p><p><br></p><p><br>public class MulticastDelegate&lt;T&gt; {<br></p><p><br></p><p><br></p><p><br></p><p><br>	<br></p><p><br></p><p><br></p><p><br></p><p><br>	private var delegates = NSHashTable.weakObjectsHashTable()<br></p><p><br></p><p><br></p><p><br></p><p><br>	<br></p><p><br></p><p><br></p><p><br></p><p><br>	public init() {}<br></p><p><br></p><p><br></p><p><br></p><p><br>	<br></p><p><br></p><p><br></p><p><br></p><p><br>	public func addDelegate(delegate: T) {<br></p><p><br></p><p><br></p><p><br></p><p><br>		guard delegate is AnyObject else { return }<br></p><p><br></p><p><br></p><p><br></p><p><br>		delegates.addObject((delegate as! AnyObject))<br></p><p><br></p><p><br></p><p><br></p><p><br>	}<br>}<br></p><p><br>This code needs to “trust” that T is a protocol and also make sure T is an Object.<br></p><p>Example using AnyProtocol, if it existed:<br>public class MulticastDelegate&lt;T:AnyProtocol&gt; {<br></p><p><br>	<br></p><p><br>	private var delegates = NSHashTable.weakObjectsHashTable()<br></p><p><br>	<br></p><p><br>	public init() {}<br></p><p><br>	<br></p><p><br>	public func addDelegate(delegate: T) {<br></p><p><br></p><p><br>		delegates.addObject(delegate)<br></p><p><br>	}<br>}<br></p><p><br>Note that the protocol must be a class protocol. This could also be achieved with a where clause or AnyClassProtocol variant.<br></p><p><br>This example is also available on github: https://github.com/jonasman/MulticastDelegate<br></p><p><br>To extend my proposal, there might be cases where AnyStruct and AnyEnum would be usefull. I have no examples for these cases, but i believe someone might have it.<br>What are your thoughts, should I open a PR proposal?<br></p><p>João Nunes 		 	   		  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/55d36732/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>February 11, 2016 at 09:00:00am</p></header><div class="content"><p>What are the advantages of using AnyProtocol over a simple `class` constraint?  To my mind, If you&#39;re already using Any or AnyObject in an interface, it seems comfortable enough with dynamic dispatch that knowing the underlying representation of the thing you&#39;ve got won&#39;t do you much good.  <br></p><p>In your specific class, my thinking is a delegate need not be a protocol only if an Object presents just a good a target for a message.<br></p><p>~Robert Widmann<br></p><p>2016/02/11 9:08、João Nunes via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Hello,<br>&gt; <br>&gt; <br>&gt; <br>&gt; I have been thinking about a case that is missing completely from swift.<br>&gt; <br>&gt; <br>&gt; <br>&gt; We have the AnyObject type to represent an Object of any type. <br>&gt; <br>&gt; I recently run upon a situation where i needed a type to represent any Protocol. A AnyProtocol Type would be useful for my case.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Example:<br>&gt; <br>&gt; <br>&gt; <br>&gt; I have a generic class that needs to receive a protocol type. The code without the AnyProtocol is the following:<br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; <br>&gt; public class MulticastDelegate&lt;T&gt; {<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	private var delegates = NSHashTable.weakObjectsHashTable()<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	public init() {}<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	public func addDelegate(delegate: T) {<br>&gt; <br>&gt; <br>&gt; <br>&gt; 		guard delegate is AnyObject else { return }<br>&gt; <br>&gt; <br>&gt; <br>&gt; 		delegates.addObject((delegate as! AnyObject))<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	}<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; This code needs to “trust” that T is a protocol and also make sure T is an Object.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Example using AnyProtocol, if it existed:<br>&gt; <br>&gt; <br>&gt; <br>&gt; public class MulticastDelegate&lt;T:AnyProtocol&gt; {<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	private var delegates = NSHashTable.weakObjectsHashTable()<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	public init() {}<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	public func addDelegate(delegate: T) {<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; 		delegates.addObject(delegate)<br>&gt; <br>&gt; <br>&gt; <br>&gt; 	}<br>&gt; <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; Note that the protocol must be a class protocol. This could also be achieved with a where clause or AnyClassProtocol variant.<br>&gt; <br>&gt; <br>&gt; <br>&gt; This example is also available on github: https://github.com/jonasman/MulticastDelegate<br>&gt; <br>&gt; <br>&gt; <br>&gt; To extend my proposal, there might be cases where AnyStruct and AnyEnum would be usefull. I have no examples for these cases, but i believe someone might have it.<br>&gt; <br>&gt; <br>&gt; <br>&gt; What are your thoughts, should I open a PR proposal?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; João Nunes<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/964c1e6a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ddffd12793bc9e9f2cdf4e57cd73d410?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>João Nunes</string> &lt;joao3001 at hotmail.com&gt;<p>February 17, 2016 at 07:00:00pm</p></header><div class="content"><p>In the example given. How would you restrict the generic type to a protocol without the use of AnyProtocol ?<br></p><p>Joao<br></p><p>Sent from my iPhone<br></p><p>&gt; On 11 Feb 2016, at 16:53, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; What are the advantages of using AnyProtocol over a simple `class` constraint?  To my mind, If you&#39;re already using Any or AnyObject in an interface, it seems comfortable enough with dynamic dispatch that knowing the underlying representation of the thing you&#39;ve got won&#39;t do you much good.  <br>&gt; <br>&gt; In your specific class, my thinking is a delegate need not be a protocol only if an Object presents just a good a target for a message.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/02/11 9:08、João Nunes via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br>&gt; <br>&gt;&gt; Hello,<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have been thinking about a case that is missing completely from swift.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We have the AnyObject type to represent an Object of any type. <br>&gt;&gt; <br>&gt;&gt; I recently run upon a situation where i needed a type to represent any Protocol. A AnyProtocol Type would be useful for my case.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I have a generic class that needs to receive a protocol type. The code without the AnyProtocol is the following:<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; public class MulticastDelegate&lt;T&gt; {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	private var delegates = NSHashTable.weakObjectsHashTable()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	public init() {}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	public func addDelegate(delegate: T) {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 		guard delegate is AnyObject else { return }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 		delegates.addObject((delegate as! AnyObject))<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This code needs to “trust” that T is a protocol and also make sure T is an Object.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Example using AnyProtocol, if it existed:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; public class MulticastDelegate&lt;T:AnyProtocol&gt; {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	private var delegates = NSHashTable.weakObjectsHashTable()<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	public init() {}<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	public func addDelegate(delegate: T) {<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 		delegates.addObject(delegate)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Note that the protocol must be a class protocol. This could also be achieved with a where clause or AnyClassProtocol variant.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This example is also available on github: https://github.com/jonasman/MulticastDelegate<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; To extend my proposal, there might be cases where AnyStruct and AnyEnum would be usefull. I have no examples for these cases, but i believe someone might have it.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; What are your thoughts, should I open a PR proposal?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; João Nunes<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/81867dd5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1696913cf1335685a75e63e11b459ae3?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>Sune Foldager</string> &lt;cyano at me.com&gt;<p>February 17, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 17 Feb 2016, at 18:59, João Nunes via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In the example given. How would you restrict the generic type to a protocol without the use of AnyProtocol ?<br></p><p>But what would you gain from restricting to just protocols? What could go wrong if someone passed in a class?<br></p><p>-Sune<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/3dbd957c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ddffd12793bc9e9f2cdf4e57cd73d410?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>João Nunes</string> &lt;joao3001 at hotmail.com&gt;<p>February 17, 2016 at 09:00:00pm</p></header><div class="content"><p>The code is for a delegate. Thus it needs a protocol not a class. <br></p><p>If you use a class and not a protocol, your delegate wont be able to subclass any other class to implement the &quot;protocol&quot; because it is a class.<br></p><p>The same applies if the uitableview delegate was declared as a class. You couldn&#39;t subclass a viewcontroller and still conform to the tableview delegate protocol.<br></p><p><br>Joao<br></p><p>Sent from my iPhone<br></p><p>&gt; On 17 Feb 2016, at 21:12, Sune Foldager &lt;cyano at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 17 Feb 2016, at 18:59, João Nunes via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; In the example given. How would you restrict the generic type to a protocol without the use of AnyProtocol ?<br>&gt; <br>&gt; But what would you gain from restricting to just protocols? What could go wrong if someone passed in a class?<br>&gt; <br>&gt; -Sune<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/55412b78/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 17, 2016 at 02:00:00pm</p></header><div class="content"><p>So if I understand, the goal is to restrict safe/functional behavior when it doesn’t align with the intentions of how an API was intended to be used?<br></p><p>-DW<br></p><p>&gt; On Feb 17, 2016, at 12:37 PM, João Nunes via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; The code is for a delegate. Thus it needs a protocol not a class.<br>&gt; <br>&gt; If you use a class and not a protocol, your delegate wont be able to subclass any other class to implement the &quot;protocol&quot; because it is a class.<br>&gt; <br>&gt; The same applies if the uitableview delegate was declared as a class. You couldn&#39;t subclass a viewcontroller and still conform to the tableview delegate protocol.<br>&gt; <br>&gt; <br>&gt; Joao<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 17 Feb 2016, at 21:12, Sune Foldager &lt;cyano at me.com &lt;mailto:cyano at me.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 17 Feb 2016, at 18:59, João Nunes via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In the example given. How would you restrict the generic type to a protocol without the use of AnyProtocol ?<br>&gt;&gt; <br>&gt;&gt; But what would you gain from restricting to just protocols? What could go wrong if someone passed in a class?<br>&gt;&gt; <br>&gt;&gt; -Sune<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/bd71cd7a/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 496 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/bd71cd7a/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ddffd12793bc9e9f2cdf4e57cd73d410?s=50"></div><header><strong>AnyProtocol proposal</strong> from <string>João Nunes</string> &lt;joao3001 at hotmail.com&gt;<p>February 17, 2016 at 11:00:00pm</p></header><div class="content"><p>I didn’t get you 100%. <br>But If you are saying that the programmer is providing the API then yes.<br></p><p>João<br></p><p>&gt; On 17 Feb 2016, at 23:00, David Waite &lt;david at alkaline-solutions.com&gt; wrote:<br>&gt; <br>&gt; So if I understand, the goal is to restrict safe/functional behavior when it doesn’t align with the intentions of how an API was intended to be used?<br>&gt; <br>&gt; -DW<br>&gt; <br>&gt;&gt; On Feb 17, 2016, at 12:37 PM, João Nunes via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; The code is for a delegate. Thus it needs a protocol not a class. <br>&gt;&gt; <br>&gt;&gt; If you use a class and not a protocol, your delegate wont be able to subclass any other class to implement the &quot;protocol&quot; because it is a class.<br>&gt;&gt; <br>&gt;&gt; The same applies if the uitableview delegate was declared as a class. You couldn&#39;t subclass a viewcontroller and still conform to the tableview delegate protocol.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Joao<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 17 Feb 2016, at 21:12, Sune Foldager &lt;cyano at me.com &lt;mailto:cyano at me.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 17 Feb 2016, at 18:59, João Nunes via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In the example given. How would you restrict the generic type to a protocol without the use of AnyProtocol ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But what would you gain from restricting to just protocols? What could go wrong if someone passed in a class?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Sune<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160217/c42eddfc/attachment-0001.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
