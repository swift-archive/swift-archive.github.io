<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Argument of &#39;#selector&#39; cannot refer to a property?</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>February 21, 2016 at 10:00:00am</p></header><div class="content"><p>I’ve played with the new #selector syntax and am loving it. But I often want to use it as a way to provide strong-typing to APIs which require String representations of properties. For example:<br></p><p>class Model: NSObject {<br>	dynamic var firstName: String = &quot;&quot;<br>	dynamic var lastName: String = &quot;&quot;<br>}<br></p><p>extension Model {<br>	var jsonValue: [String:AnyObject] {<br>		return [<br>			#selector(self.firstName): firstName,<br>			#selector(self.lastName): lastName<br>		]<br>	}<br>}<br></p><p>extension Model {<br>	func modelWithName(name: String) {<br>		return Database.execute(&quot;SELECT * FROM Model WHERE \(#selector(self.firstName)) = ? OR \(#selector(self.lastName)) = ?&quot;)<br>	}<br>}<br></p><p>But there are currently two problems with this:<br></p><p>1) The compiler doesn’t accept #selector of properties with the error message: Argument of &#39;#selector&#39; cannot refer to a property. What’s the reasoning for that?<br>2) Even if it did, I would still have the wrap #selector with NSStringFromSelector. It would be really convenient if Selector objects would convert to String. How is that possible?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Argument of &#39;#selector&#39; cannot refer to a property?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Feb 21, 2016, at 1:19, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve played with the new #selector syntax and am loving it. But I often want to use it as a way to provide strong-typing to APIs which require String representations of properties. For example:<br>&gt; <br>&gt; class Model: NSObject {<br>&gt; 	dynamic var firstName: String = &quot;&quot;<br>&gt; 	dynamic var lastName: String = &quot;&quot;<br>&gt; }<br>&gt; <br>&gt; extension Model {<br>&gt; 	var jsonValue: [String:AnyObject] {<br>&gt; 		return [<br>&gt; 			#selector(self.firstName): firstName,<br>&gt; 			#selector(self.lastName): lastName<br>&gt; 		]<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; extension Model {<br>&gt; 	func modelWithName(name: String) {<br>&gt; 		return Database.execute(&quot;SELECT * FROM Model WHERE \(#selector(self.firstName)) = ? OR \(#selector(self.lastName)) = ?&quot;)<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; But there are currently two problems with this:<br>&gt; <br>&gt; 1) The compiler doesn’t accept #selector of properties with the error message: Argument of &#39;#selector&#39; cannot refer to a property. What’s the reasoning for that?<br></p><p>It&#39;s not obvious whether you want the selector of the getter or the selector of the setter. It is a hole, though. Doug, did you have any comments here?<br></p><p><br>&gt; 2) Even if it did, I would still have the wrap #selector with NSStringFromSelector. It would be really convenient if Selector objects would convert to String. How is that possible?<br></p><p>I&#39;m not sure why this would make sense. Selectors are not strings. (However, they are CustomStringConvertible, so you can just use &quot;String(…)&quot; to convert them.)<br></p><p>Jordan<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Argument of &#39;#selector&#39; cannot refer to a property?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 22, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; 1) The compiler doesn’t accept #selector of properties with the error message: Argument of &#39;#selector&#39; cannot refer to a property. What’s the reasoning for that?<br></p><p>Because in Objective-C, a property is syntactic sugar for a pair of accessor methods, but in Swift, a property is a completely distinct entity from a method. <br></p><p>&gt; 2) Even if it did, I would still have the wrap #selector with NSStringFromSelector. It would be really convenient if Selector objects would convert to String. How is that possible?<br></p><p>It isn&#39;t appropriate. A selector is a different type from a string. Even Objective-C doesn&#39;t let you do this.<br></p><p>Basically, both of these are instances of you wanting vastly looser semantics. That&#39;s just not in Swift&#39;s nature.<br></p><p>A different way to approach this whole problem is to use strings instead of selectors for your field names, which allows you to use traditional Key-Value Coding:<br></p><p>	class Model: NSObject {<br>		dynamic var firstName: String = &quot;&quot;<br>		dynamic var lastName: String = &quot;&quot;<br>	}<br>	<br>	extension Model {<br>		static var jsonFields = [&quot;firstName&quot;, &quot;lastName&quot;]<br>		<br>		var jsonValue: [String: AnyObject] {<br>			return dictionaryWithValuesForKeys(Model.jsonFields)<br>		}<br>	}<br></p><p>You could even protocolize it for reusability:<br></p><p>	protocol JSONRepresentable {<br>		static var jsonFields: [String] { get }<br>		var jsonValue: [String: AnyObject] { get }<br>	}<br>	<br>	extension JSONRepresentable where Self: NSObject {<br>		var jsonValue: [String: AnyObject] {<br>			return dictionaryWithValuesForKeys(Self.jsonFields)<br>		}<br>	}<br>	<br>	class Model: NSObject {<br>		dynamic var firstName: String = &quot;&quot;<br>		dynamic var lastName: String = &quot;&quot;<br>	}<br>	<br>	extension Model: JSONRepresentable {<br>		static var jsonFields = [&quot;firstName&quot;, &quot;lastName&quot;]<br>	}<br></p><p>That solves both problems, though you lose the typo checking that #selector might provide.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
