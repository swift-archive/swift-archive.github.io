<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br></p><p>func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br></p><p>FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br></p><p>Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br></p><p>-Andy<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/68262bc3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt; <br>&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt; )<br>&gt; <br>&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt; )<br>&gt; <br>&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt; <br>&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt; <br>&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br></p><p>Yeah, Andy&#39;s approach seems cleaner than overloading.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 4, 2016, at 09:18, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt;&gt; <br>&gt;&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt; )<br>&gt;&gt; <br>&gt;&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt; )<br>&gt;&gt; <br>&gt;&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt;&gt; <br>&gt;&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt;&gt; <br>&gt;&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br>&gt; <br>&gt; Yeah, Andy&#39;s approach seems cleaner than overloading.<br></p><p>:-( …but it’s an implicit conversion. Which we’re trying to expunge from the language. (Sort of.)<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/c5d58108/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 4, 2016, at 9:40 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 4, 2016, at 09:18, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br>&gt;&gt; <br>&gt;&gt; Yeah, Andy&#39;s approach seems cleaner than overloading.<br>&gt; <br>&gt; :-( …but it’s an implicit conversion. Which we’re trying to expunge from the language. (Sort of.)<br></p><p>I’ve heard exactly the opposite argument recently. Namely that explicit UnsafePointer construction indicates an “unsafe” cast (I personally don’t agree with that argument though).<br></p><p>Tangential: Which of our current implicit conversions are considered bad? I can’t think of a good alternative, particularly for String/Array to UnsafePointer.<br></p><p>-Andy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/79c3baa3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 4, 2016, at 10:07, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 4, 2016, at 9:40 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 09:18, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, Andy&#39;s approach seems cleaner than overloading.<br>&gt;&gt; <br>&gt;&gt; :-( …but it’s an implicit conversion. Which we’re trying to expunge from the language. (Sort of.)<br>&gt; <br>&gt; I’ve heard exactly the opposite argument recently. Namely that explicit UnsafePointer construction indicates an “unsafe” cast (I personally don’t agree with that argument though).<br>&gt; <br>&gt; Tangential: Which of our current implicit conversions are considered bad? I can’t think of a good alternative, particularly for String/Array to UnsafePointer.<br></p><p>String/Array to UnsafePointer can&#39;t be safely expressed in the language right now without the lifetime-extending wrapper closure, so I feel less bad about those. Inout-to-pointer conversions don&#39;t feel implicit because of the &#39;&amp;&#39;.<br></p><p>For other conversions, the remaining implicit value-to-reference bridging conversion is up for review, and we&#39;ve talked about tightening up when implicit optional wrapping can occur. IUOs are out of the type system, which is probably as far as they&#39;ll go. I think subclass-to-superclass and covariant function pointer conversions are likely to stay as is, though.<br></p><p>I think converting initialization from UnsafeMutablePointer&lt;T&gt; to UnsafePointer&lt;T&gt; is always safe, but all the other initializers may need to grow a label (under our rules). That doesn&#39;t mean there should be an implicit conversion for it, as convenient as it may be.<br></p><p>(The counter-movement is people who want implicit conversions from smaller to larger integer and floating-point types, so the tide may shift here.)<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/a8aab9a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 4, 2016, at 10:15 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 4, 2016, at 10:07, Andrew Trick &lt;atrick at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 9:40 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 09:18, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, Andy&#39;s approach seems cleaner than overloading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; :-( …but it’s an implicit conversion. Which we’re trying to expunge from the language. (Sort of.)<br>&gt;&gt; <br>&gt;&gt; I’ve heard exactly the opposite argument recently. Namely that explicit UnsafePointer construction indicates an “unsafe” cast (I personally don’t agree with that argument though).<br>&gt;&gt; <br>&gt;&gt; Tangential: Which of our current implicit conversions are considered bad? I can’t think of a good alternative, particularly for String/Array to UnsafePointer.<br>&gt; <br>&gt; String/Array to UnsafePointer can&#39;t be safely expressed in the language right now without the lifetime-extending wrapper closure, so I feel less bad about those. Inout-to-pointer conversions don&#39;t feel implicit because of the &#39;&amp;&#39;.<br></p><p>These conversions are also geared toward interop with well-behaved C APIs, and have caused problems when they fire in unwanted contexts (for example, [] - [] ends up taking the pointer difference of the two arrays&#39; buffers). We&#39;ve discussed limiting those conversions in particular to imported APIs for these reasons.<br></p><p>&gt; <br>&gt; For other conversions, the remaining implicit value-to-reference bridging conversion is up for review, and we&#39;ve talked about tightening up when implicit optional wrapping can occur. IUOs are out of the type system, which is probably as far as they&#39;ll go. I think subclass-to-superclass and covariant function pointer conversions are likely to stay as is, though.<br>&gt; <br>&gt; I think converting initialization from UnsafeMutablePointer&lt;T&gt; to UnsafePointer&lt;T&gt; is always safe, but all the other initializers may need to grow a label (under our rules). That doesn&#39;t mean there should be an implicit conversion for it, as convenient as it may be.<br>&gt; <br>&gt; (The counter-movement is people who want implicit conversions from smaller to larger integer and floating-point types, so the tide may shift here.)<br></p><p>Yeah, UnsafeMutablePointer to UnsafePointer conversion feels to me like it fits in the same bucket of &quot;safe&quot; conversions as Int8-to-Int16 etc. There&#39;s a well-behaved unidirectional subtype-ish relationship between the types, so many of the problems with ad-hoc user-defined implicit conversions don&#39;t apply.<br></p><p>-Joe<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6fe87aed0d64cdbc46378bf7596a7553?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Andrew Trick</string> &lt;atrick at apple.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 4, 2016, at 10:15 AM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 4, 2016, at 10:07, Andrew Trick &lt;atrick at apple.com &lt;mailto:atrick at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 4, 2016, at 9:40 AM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 4, 2016, at 09:18, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 3, 2016, at 9:39 PM, Andrew Trick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The new methods are needed, but they don’t need to be overloads. I have no idea why the argument type was originally declared Mutable.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func assignBackwardFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func assignFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int<br>&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; func initializeFrom(source: UnsafePointer&lt;Pointee&gt;, count: Int)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; FWIW: I made precisely this change a while back on an experimental branch while experimenting with UnsafePointer conversion. I don’t see a problem with it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Implicit argument conversion from UnsafeMutablePointer&lt;Pointee&gt; to UnsafePointer&lt;Pointee&gt; is normal and extremely obvious.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, Andy&#39;s approach seems cleaner than overloading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; :-( …but it’s an implicit conversion. Which we’re trying to expunge from the language. (Sort of.)<br>&gt;&gt; <br>&gt;&gt; I’ve heard exactly the opposite argument recently. Namely that explicit UnsafePointer construction indicates an “unsafe” cast (I personally don’t agree with that argument though).<br>&gt;&gt; <br>&gt;&gt; Tangential: Which of our current implicit conversions are considered bad? I can’t think of a good alternative, particularly for String/Array to UnsafePointer.<br>&gt; <br>&gt; String/Array to UnsafePointer can&#39;t be safely expressed in the language right now without the lifetime-extending wrapper closure, so I feel less bad about those. Inout-to-pointer conversions don&#39;t feel implicit because of the &#39;&amp;&#39;.<br>&gt; <br>&gt; For other conversions, the remaining implicit value-to-reference bridging conversion is up for review, and we&#39;ve talked about tightening up when implicit optional wrapping can occur. IUOs are out of the type system, which is probably as far as they&#39;ll go. I think subclass-to-superclass and covariant function pointer conversions are likely to stay as is, though.<br>&gt; <br>&gt; I think converting initialization from UnsafeMutablePointer&lt;T&gt; to UnsafePointer&lt;T&gt; is always safe, but all the other initializers may need to grow a label (under our rules). That doesn&#39;t mean there should be an implicit conversion for it, as convenient as it may be.<br></p><p>That’s good to hear. I completely agree that unsafe conversions need to grow a label.<br></p><p>Although I still somewhat prefer implicit Mutable to Immutable conversions not only because it is so convenient but because programmers will expect that behavior. It feels to me like we are mimicking a type qualifier. AFAIK it doesn’t introduce implementation complexity or strange corner cases.<br></p><p>-Andy<br></p><p>&gt; (The counter-movement is people who want implicit conversions from smaller to larger integer and floating-point types, so the tide may shift here.)<br>&gt; <br>&gt; Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/31bc43b0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7abf2ce34651dd5e97cd97b16ce21bae?s=50"></div><header><strong>[Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Guillaume Lessard</string> &lt;glessard at tffenterprises.com&gt;<p>May  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; * What is your evaluation of the proposal?<br></p><p>It makes sense to have `assignFrom` and `initializeFrom` defined for `UnsafePointer` sources.<br></p><p>I would much rather see them defined simply with `UnsafePointer` rather than having overloads. The ability to use UnsafeMutablePointer with UnsafePointer parameters is not so much compiler magic as it is an acknowledgement of how memory works.<br></p><p>Defining `assignBackwardFrom` for an `UnsafePointer` source is unneeded, because its purpose is copying between overlapping ranges of memory — that’s destructive. The source range of `assignBackwardFrom` *must* be an `UnsafeMutablePointer`, by definition. This being said, C’s memmove has a `const void*` source, even though the ranges may overlap.<br></p><p>I’d prefer having all three than having none, but IMO the best outcome is to change only the first 2.<br></p><p><br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. This has always seemed like a mistake to me.<br></p><p>&gt; * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. I like how non-magical these methods are.<br></p><p>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>There’s no need to remember which of memmove() or memcpy() allows overlapping ranges!<br></p><p>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Decades of using pointers informed my thoughts.<br></p><p>Cheers,<br>Guillaume Lessard<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>This email is sent on behalf of the standard library team.<br></p><p>Since the implicit conversion is available from `UnsafeMutablePointer` to `UnsafePointer`, the functions listed in the proposal do not have to be overloads, they can simply replace existing ones instead.<br>If/when the implicit conversion will be removed from the language, overloads accepting `UnsafeMutablePointer` would have to be introduced.<br></p><p>We also suggest extending the proposal to include other instances of the same pattern, if there are any elsewhere in the standard library.<br></p><p>thanks,<br>max<br></p><p><br></p><p>&gt; On May 3, 2016, at 8:56 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0076: Add overrides taking an UnsafePointer source to non-destructive copying methods on UnsafeMutablePointer&quot; begins now and runs through May 9. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0076-copying-to-unsafe-mutable-pointer-with-unsafe-pointer-source.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
