<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>mutating/non-mutating suggestion from	a	Rubyist</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 27, 2016 at 05:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/7b4ba211/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>April 27, 2016 at 06:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt;&gt;&gt; Clarifying comments inline below:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is not a new idea. Something almost identical to this has been<br>&gt;&gt;&gt; explored and discussed quite thoroughly already:<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;.<br>&gt;&gt;&gt; In fact, it was implmented and later reverted because it raised<br>&gt;&gt;&gt; language-design questions for which we had no good answers.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t know if the following are particularly good answers, but I&#39;ll try<br>&gt;&gt;&gt; anyway:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; fundamental issues:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Should the x.=f() syntax be required for *every* mutating method<br>&gt;&gt;&gt; invocation?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Allow me to ask it differently: Should some specific syntax be required for<br>&gt;&gt;&gt; every mutating method? — Yes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think I like that idea.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Should the syntax be `x.=f()`? — Not necessarily. I kinda like James<br>&gt;&gt;&gt; Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var numbers = [5, 12, 6, 2]<br>&gt;&gt;&gt; mutate numbers.append(10)<br>&gt;&gt;&gt; mutate numbers.sort()<br>&gt;&gt;&gt; if let biggest = mutate numbers.popLast() {<br>&gt;&gt;&gt; print(&quot;The biggest number was:&quot;, biggest)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; So `mutate` would work much like `try` but—unlike `try` which can move<br>&gt;&gt;&gt; further to the left—`mutate` would have to always prefix the mutating<br>&gt;&gt;&gt; receiver.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;, though I don&#39;t<br>&gt;&gt;&gt; think that would be really necessary).<br>&gt;&gt; <br>&gt;&gt; We&#39;ve already discussed this whole question length, specifically<br>&gt;&gt; considered the direction of an almost-identical language feature, and<br>&gt;&gt; ended up settling on the “form/ed/ing” naming conventions. If there is<br>&gt;&gt; some new information since then, it would be possible to handle<br>&gt; <br>&gt; <br>&gt; The new information might be that the &quot;form&quot; naming conventions have not been that well received, i.e. the naming discussion cannot really be described as &quot;settled&quot; :-)<br></p><p>Also, I could be wrong but IIRC the discussion of having some kind of &quot;mutation&quot; syntax post Swift 3 was held open when that discussion concluded.  It was just out of scope for Swift 3 to address all of the necessary issues. <br></p><p>I hope this issue isn&#39;t settled once and for all as I am not very happy with the current solution.  The &quot;form&quot; names are quite awkward and confusing IMO.  I would eventually get used to them but that is the problem - they will really take getting used to.<br></p><p><br>&gt; <br>&gt; -Thorsten<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160427/66c825ae/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 28, 2016 at 07:00:00am</p></header><div class="content"><p>Personally I like the xxx and xxxed naming, e.g. sort and sorted, and think<br>it should be universally applied, e.g. union and unioned.<br></p><p>However that proved unpopular and we ended up with a hybrid with sort and<br>sorted but union and formUnion. Which no one seems to like!<br></p><p>Therefore I suggest a new review for the proposed:<br></p><p>    mutating array.sort(&lt;)<br>    let sorted = array.sort(&lt;)<br>    mutating set.union(other)<br>    let unioned = set.union(other)<br></p><p>I think the motivation for new review, or new information if you like, is<br>the discussion didn&#39;t cease after the decision was taken, unlike most<br>discussions on swift-evolution.<br></p><p>On Wednesday, 27 April 2016, Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;dabrahams at apple.com&#39;);&gt;&gt;:<br>&gt;<br>&gt;<br>&gt; on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com<br>&gt; &lt;http://tseitz42-at-icloud.com&gt;&gt; wrote:<br>&gt;<br>&gt; Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt;<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt;:<br>&gt;<br>&gt;<br>&gt; I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt;<br>&gt; Clarifying comments inline below:<br>&gt;<br>&gt;<br>&gt; On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt;<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt; This is not a new idea. Something almost identical to this has been<br>&gt;<br>&gt; explored and discussed quite thoroughly already:<br>&gt;<br>&gt; &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;.<br>&gt;<br>&gt; In fact, it was implmented and later reverted because it raised<br>&gt;<br>&gt; language-design questions for which we had no good answers.<br>&gt;<br>&gt;<br>&gt; I don&#39;t know if the following are particularly good answers, but I&#39;ll try<br>&gt;<br>&gt; anyway:<br>&gt;<br>&gt;<br>&gt; I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt;<br>&gt;<br>&gt; fundamental issues:<br>&gt;<br>&gt;<br>&gt; * Should the x.=f() syntax be required for *every* mutating method<br>&gt;<br>&gt; invocation?<br>&gt;<br>&gt;<br>&gt; Allow me to ask it differently: Should some specific syntax be required for<br>&gt;<br>&gt; every mutating method? — Yes.<br>&gt;<br>&gt;<br>&gt; I think I like that idea.<br>&gt;<br>&gt;<br>&gt; Should the syntax be `x.=f()`? — Not necessarily. I kinda like James<br>&gt;<br>&gt; Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt;<br>&gt;<br>&gt; var numbers = [5, 12, 6, 2]<br>&gt;<br>&gt; mutate numbers.append(10)<br>&gt;<br>&gt; mutate numbers.sort()<br>&gt;<br>&gt; if let biggest = mutate numbers.popLast() {<br>&gt;<br>&gt; print(&quot;The biggest number was:&quot;, biggest)<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; So `mutate` would work much like `try` but—unlike `try` which can move<br>&gt;<br>&gt; further to the left—`mutate` would have to always prefix the mutating<br>&gt;<br>&gt; receiver.<br>&gt;<br>&gt;<br>&gt; That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;, though I<br>&gt; don&#39;t<br>&gt;<br>&gt; think that would be really necessary).<br>&gt;<br>&gt;<br>&gt; We&#39;ve already discussed this whole question length, specifically<br>&gt; considered the direction of an almost-identical language feature, and<br>&gt; ended up settling on the “form/ed/ing” naming conventions. If there is<br>&gt; some new information since then, it would be possible to handle<br>&gt;<br>&gt;<br>&gt; The new information might be that the &quot;form&quot; naming conventions have not<br>&gt; been that well received, i.e. the naming discussion cannot really be<br>&gt; described as &quot;settled&quot; :-)<br>&gt;<br>&gt;<br>&gt; Also, I could be wrong but IIRC the discussion of having some kind of<br>&gt; &quot;mutation&quot; syntax post Swift 3 was held open when that discussion<br>&gt; concluded.  It was just out of scope for Swift 3 to address all of the<br>&gt; necessary issues.<br>&gt;<br>&gt; I hope this issue isn&#39;t settled once and for all as I am not very happy<br>&gt; with the current solution.  The &quot;form&quot; names are quite awkward and<br>&gt; confusing IMO.  I would eventually get used to them but that is the problem<br>&gt; - they will really take getting used to.<br>&gt;<br>&gt;<br>&gt;<br>&gt; -Thorsten<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/c5665b76/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7559ac465b184ec777f29d37c0e4b374?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Michael Peternell</string> &lt;michael.peternell at gmx.at&gt;<p>April 27, 2016 at 11:00:00pm</p></header><div class="content"><p>Isn&#39;t there a strong convention that overloaded methods should be very similar? Like a print function that takes a String and a print function that takes an Int? Having two &#39;sort&#39; functions that are not even similar, but that just refer to the same concept (&#39;sorting&#39;) seems confusing, and I haven&#39;t seen this in any other language so far. I think overloading is a somewhat advanced topic, and programming beginners should be allowed to be ignorant about this feature and just think &quot;print is a function that prints its argument to the console&quot; or &quot;sort is a function that sorts a sequence&quot; - not having to care if the function is overloaded or not. (I know that print() is not an overloaded function is Swift, this was just an example.)<br></p><p>-Michael<br></p><p>&gt; Am 27.04.2016 um 23:13 schrieb Howard Lovatt via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Personally I like the xxx and xxxed naming, e.g. sort and sorted, and think it should be universally applied, e.g. union and unioned. <br>&gt; <br>&gt; However that proved unpopular and we ended up with a hybrid with sort and sorted but union and formUnion. Which no one seems to like!<br>&gt; <br>&gt; Therefore I suggest a new review for the proposed:<br>&gt; <br>&gt;     mutating array.sort(&lt;)<br>&gt;     let sorted = array.sort(&lt;)<br>&gt;     mutating set.union(other)<br>&gt;     let unioned = set.union(other)<br>&gt; <br>&gt; I think the motivation for new review, or new information if you like, is the discussion didn&#39;t cease after the decision was taken, unlike most discussions on swift-evolution. <br>&gt; <br>&gt; On Wednesday, 27 April 2016, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt;&gt;&gt;&gt; Clarifying comments inline below:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is not a new idea. Something almost identical to this has been<br>&gt;&gt;&gt;&gt; explored and discussed quite thoroughly already:<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;.<br>&gt;&gt;&gt;&gt; In fact, it was implmented and later reverted because it raised<br>&gt;&gt;&gt;&gt; language-design questions for which we had no good answers.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t know if the following are particularly good answers, but I&#39;ll try<br>&gt;&gt;&gt;&gt; anyway:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; fundamental issues:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Should the x.=f() syntax be required for *every* mutating method<br>&gt;&gt;&gt;&gt; invocation?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Allow me to ask it differently: Should some specific syntax be required for<br>&gt;&gt;&gt;&gt; every mutating method? — Yes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think I like that idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Should the syntax be `x.=f()`? — Not necessarily. I kinda like James<br>&gt;&gt;&gt;&gt; Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var numbers = [5, 12, 6, 2]<br>&gt;&gt;&gt;&gt; mutate numbers.append(10)<br>&gt;&gt;&gt;&gt; mutate numbers.sort()<br>&gt;&gt;&gt;&gt; if let biggest = mutate numbers.popLast() {<br>&gt;&gt;&gt;&gt; print(&quot;The biggest number was:&quot;, biggest)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; So `mutate` would work much like `try` but—unlike `try` which can move<br>&gt;&gt;&gt;&gt; further to the left—`mutate` would have to always prefix the mutating<br>&gt;&gt;&gt;&gt; receiver.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;, though I don&#39;t<br>&gt;&gt;&gt;&gt; think that would be really necessary).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We&#39;ve already discussed this whole question length, specifically<br>&gt;&gt;&gt; considered the direction of an almost-identical language feature, and<br>&gt;&gt;&gt; ended up settling on the “form/ed/ing” naming conventions. If there is<br>&gt;&gt;&gt; some new information since then, it would be possible to handle<br>&gt;&gt; <br>&gt;&gt; The new information might be that the &quot;form&quot; naming conventions have not been that well received, i.e. the naming discussion cannot really be described as &quot;settled&quot; :-)<br>&gt; <br>&gt; Also, I could be wrong but IIRC the discussion of having some kind of &quot;mutation&quot; syntax post Swift 3 was held open when that discussion concluded.  It was just out of scope for Swift 3 to address all of the necessary issues. <br>&gt; <br>&gt; I hope this issue isn&#39;t settled once and for all as I am not very happy with the current solution.  The &quot;form&quot; names are quite awkward and confusing IMO.  I would eventually get used to them but that is the problem - they will really take getting used to.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Thorsten<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; -- Howard.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>April 28, 2016 at 10:00:00am</p></header><div class="content"><p>Think of the name of the mutating method sort as `mutating sort`, i.e. a<br>different name than `sort` and therefore not an overload. This way the call<br>and declaration match:<br></p><p>    struct Array&lt;T&gt;: ... {<br>        func mutating sort(...) { ... }<br>        func sort(...) -&gt; [T] { ... }<br>    }<br></p><p>    mutating array.sort(&gt;)<br>    let sorted = array.sort(&gt;)<br></p><p>As a critique of the `func mutating &lt;name&gt;` proposal consider:<br></p><p>    protocol P {<br>        func mutating p()<br>        func p()<br>    }<br></p><p>    class AP: P {<br>        func mutating p() { ... } // `mutating` not currently allowed in a<br>class<br>        func p() { ... }<br>    }<br></p><p>    let aP = AP()<br>    mutating aP.p() // Odd since `aP` is a let - but would everyone get<br>used to it quickly and realize that what `aP` points to is mutated<br></p><p><br>  -- Howard.<br></p><p>On 28 April 2016 at 07:50, Michael Peternell &lt;michael.peternell at gmx.at&gt;<br>wrote:<br></p><p>&gt; Isn&#39;t there a strong convention that overloaded methods should be very<br>&gt; similar? Like a print function that takes a String and a print function<br>&gt; that takes an Int? Having two &#39;sort&#39; functions that are not even similar,<br>&gt; but that just refer to the same concept (&#39;sorting&#39;) seems confusing, and I<br>&gt; haven&#39;t seen this in any other language so far. I think overloading is a<br>&gt; somewhat advanced topic, and programming beginners should be allowed to be<br>&gt; ignorant about this feature and just think &quot;print is a function that prints<br>&gt; its argument to the console&quot; or &quot;sort is a function that sorts a sequence&quot;<br>&gt; - not having to care if the function is overloaded or not. (I know that<br>&gt; print() is not an overloaded function is Swift, this was just an example.)<br>&gt;<br>&gt; -Michael<br>&gt;<br>&gt; &gt; Am 27.04.2016 um 23:13 schrieb Howard Lovatt via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt; Personally I like the xxx and xxxed naming, e.g. sort and sorted, and<br>&gt; think it should be universally applied, e.g. union and unioned.<br>&gt; &gt;<br>&gt; &gt; However that proved unpopular and we ended up with a hybrid with sort<br>&gt; and sorted but union and formUnion. Which no one seems to like!<br>&gt; &gt;<br>&gt; &gt; Therefore I suggest a new review for the proposed:<br>&gt; &gt;<br>&gt; &gt;     mutating array.sort(&lt;)<br>&gt; &gt;     let sorted = array.sort(&lt;)<br>&gt; &gt;     mutating set.union(other)<br>&gt; &gt;     let unioned = set.union(other)<br>&gt; &gt;<br>&gt; &gt; I think the motivation for new review, or new information if you like,<br>&gt; is the discussion didn&#39;t cease after the decision was taken, unlike most<br>&gt; discussions on swift-evolution.<br>&gt; &gt;<br>&gt; &gt; On Wednesday, 27 April 2016, Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Sent from my iPad<br>&gt; &gt;<br>&gt; &gt; On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt; &gt;&gt;&gt;&gt; Clarifying comments inline below:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; This is not a new idea. Something almost identical to this has been<br>&gt; &gt;&gt;&gt;&gt; explored and discussed quite thoroughly already:<br>&gt; &gt;&gt;&gt;&gt; &lt;<br>&gt; https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;.<br>&gt; &gt;&gt;&gt;&gt; In fact, it was implmented and later reverted because it raised<br>&gt; &gt;&gt;&gt;&gt; language-design questions for which we had no good answers.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I don&#39;t know if the following are particularly good answers, but I&#39;ll<br>&gt; try<br>&gt; &gt;&gt;&gt;&gt; anyway:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; fundamental issues:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; * Should the x.=f() syntax be required for *every* mutating method<br>&gt; &gt;&gt;&gt;&gt; invocation?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Allow me to ask it differently: Should some specific syntax be<br>&gt; required for<br>&gt; &gt;&gt;&gt;&gt; every mutating method? — Yes.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I think I like that idea.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Should the syntax be `x.=f()`? — Not necessarily. I kinda like James<br>&gt; &gt;&gt;&gt;&gt; Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; var numbers = [5, 12, 6, 2]<br>&gt; &gt;&gt;&gt;&gt; mutate numbers.append(10)<br>&gt; &gt;&gt;&gt;&gt; mutate numbers.sort()<br>&gt; &gt;&gt;&gt;&gt; if let biggest = mutate numbers.popLast() {<br>&gt; &gt;&gt;&gt;&gt; print(&quot;The biggest number was:&quot;, biggest)<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; So `mutate` would work much like `try` but—unlike `try` which can move<br>&gt; &gt;&gt;&gt;&gt; further to the left—`mutate` would have to always prefix the mutating<br>&gt; &gt;&gt;&gt;&gt; receiver.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;, though<br>&gt; I don&#39;t<br>&gt; &gt;&gt;&gt;&gt; think that would be really necessary).<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; We&#39;ve already discussed this whole question length, specifically<br>&gt; &gt;&gt;&gt; considered the direction of an almost-identical language feature, and<br>&gt; &gt;&gt;&gt; ended up settling on the “form/ed/ing” naming conventions. If there is<br>&gt; &gt;&gt;&gt; some new information since then, it would be possible to handle<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The new information might be that the &quot;form&quot; naming conventions have<br>&gt; not been that well received, i.e. the naming discussion cannot really be<br>&gt; described as &quot;settled&quot; :-)<br>&gt; &gt;<br>&gt; &gt; Also, I could be wrong but IIRC the discussion of having some kind of<br>&gt; &quot;mutation&quot; syntax post Swift 3 was held open when that discussion<br>&gt; concluded.  It was just out of scope for Swift 3 to address all of the<br>&gt; necessary issues.<br>&gt; &gt;<br>&gt; &gt; I hope this issue isn&#39;t settled once and for all as I am not very happy<br>&gt; with the current solution.  The &quot;form&quot; names are quite awkward and<br>&gt; confusing IMO.  I would eventually get used to them but that is the problem<br>&gt; - they will really take getting used to.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; -Thorsten<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -- Howard.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160428/94706903/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>mutating/non-mutating suggestion from a Rubyist</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 28, 2016 at 08:00:00am</p></header><div class="content"><p>Choosing between sort/sorted/union/formUnion(but map/filter/reduce) and <br>explicit &#39;mutating&#39; keyword - I&#39;ll choose the later.<br>(But I prefer marker like array&amp;.sort(&lt;) for mutating methods)<br></p><p>But I feel like this discussion(regarding naming) is closed and decision is <br>made, and we can just exchange opinions on that decision. And it seems like <br>the most of us agree with the decision. So...<br></p><p>On 28.04.2016 0:13, Howard Lovatt via swift-evolution wrote:<br>&gt; Personally I like the xxx and xxxed naming, e.g. sort and sorted, and think<br>&gt; it should be universally applied, e.g. union and unioned.<br>&gt;<br>&gt; However that proved unpopular and we ended up with a hybrid with sort and<br>&gt; sorted but union and formUnion. Which no one seems to like!<br>&gt;<br>&gt; Therefore I suggest a new review for the proposed:<br>&gt;<br>&gt;     mutating array.sort(&lt;)<br>&gt;     let sorted = array.sort(&lt;)<br>&gt;     mutating set.union(other)<br>&gt;     let unioned = set.union(other)<br>&gt;<br>&gt; I think the motivation for new review, or new information if you like, is<br>&gt; the discussion didn&#39;t cease after the decision was taken, unlike most<br>&gt; discussions on swift-evolution.<br>&gt;<br>&gt; On Wednesday, 27 April 2016, Matthew Johnson via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;     Sent from my iPad<br>&gt;<br>&gt;     On Apr 27, 2016, at 12:37 AM, Thorsten Seitz via swift-evolution<br>&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;     Am 26. April 2016 um 22:02 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     on Tue Apr 26 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com<br>&gt;&gt;&gt;     &lt;http://tseitz42-at-icloud.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Am 23.04.2016 um 10:27 schrieb Pyry Jahkola via swift-evolution<br>&gt;&gt;&gt;&gt;     &lt;swift-evolution at swift.org&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     I&#39;d like to second James Campbell&#39;s suggestion of a `mutate` keyword.<br>&gt;&gt;&gt;&gt;     Clarifying comments inline below:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On 23 Apr 2016, at 00:24, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     This is not a new idea. Something almost identical to this has been<br>&gt;&gt;&gt;&gt;     explored and discussed quite thoroughly already:<br>&gt;&gt;&gt;&gt;     &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst&gt;<br>&gt;&gt;&gt;&gt;     &lt;https://github.com/apple/swift/blob/master/docs/proposals/Inplace.rst%3E&gt;.<br>&gt;&gt;&gt;&gt;     In fact, it was implmented and later reverted because it raised<br>&gt;&gt;&gt;&gt;     language-design questions for which we had no good answers.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     I don&#39;t know if the following are particularly good answers, but<br>&gt;&gt;&gt;&gt;     I&#39;ll try<br>&gt;&gt;&gt;&gt;     anyway:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     I don&#39;t believe the choice of glyph (&amp; vs =) affects any of the<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     fundamental issues:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     * Should the x.=f() syntax be required for *every* mutating method<br>&gt;&gt;&gt;&gt;     invocation?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Allow me to ask it differently: Should some specific syntax be<br>&gt;&gt;&gt;&gt;     required for<br>&gt;&gt;&gt;&gt;     every mutating method? — Yes.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     I think I like that idea.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Should the syntax be `x.=f()`? — Not necessarily. I kinda like James<br>&gt;&gt;&gt;&gt;     Campbell&#39;s idea of a `mutate` keyword. Consider the following:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     var numbers = [5, 12, 6, 2]<br>&gt;&gt;&gt;&gt;     mutate numbers.append(10)<br>&gt;&gt;&gt;&gt;     mutate numbers.sort()<br>&gt;&gt;&gt;&gt;     if let biggest = mutate numbers.popLast() {<br>&gt;&gt;&gt;&gt;     print(&quot;The biggest number was:&quot;, biggest)<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     So `mutate` would work much like `try` but—unlike `try` which can move<br>&gt;&gt;&gt;&gt;     further to the left—`mutate` would have to always prefix the mutating<br>&gt;&gt;&gt;&gt;     receiver.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     That doesn&#39;t look so bad (we might shorten &#39;mutate&#39; to &#39;mut&#39;,<br>&gt;&gt;&gt;&gt;     though I don&#39;t<br>&gt;&gt;&gt;&gt;     think that would be really necessary).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     We&#39;ve already discussed this whole question length, specifically<br>&gt;&gt;&gt;     considered the direction of an almost-identical language feature, and<br>&gt;&gt;&gt;     ended up settling on the “form/ed/ing” naming conventions. If there is<br>&gt;&gt;&gt;     some new information since then, it would be possible to handle<br>&gt;&gt;<br>&gt;&gt;     The new information might be that the &quot;form&quot; naming conventions have<br>&gt;&gt;     not been that well received, i.e. the naming discussion cannot really<br>&gt;&gt;     be described as &quot;settled&quot; :-)<br>&gt;<br>&gt;     Also, I could be wrong but IIRC the discussion of having some kind of<br>&gt;     &quot;mutation&quot; syntax post Swift 3 was held open when that discussion<br>&gt;     concluded.  It was just out of scope for Swift 3 to address all of the<br>&gt;     necessary issues.<br>&gt;<br>&gt;     I hope this issue isn&#39;t settled once and for all as I am not very happy<br>&gt;     with the current solution.  The &quot;form&quot; names are quite awkward and<br>&gt;     confusing IMO.  I would eventually get used to them but that is the<br>&gt;     problem - they will really take getting used to.<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;     -Thorsten<br>&gt;&gt;     _______________________________________________<br>&gt;&gt;     swift-evolution mailing list<br>&gt;&gt;     swift-evolution at swift.org<br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; -- Howard.<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
