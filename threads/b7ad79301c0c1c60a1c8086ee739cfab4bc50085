<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October  2, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sun Oct 02 2016, Brent Royal-Gordon &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Oct 1, 2016, at 8:45 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Iâ€™m up for reviving the ObjectiveCBridgeable proposal :)<br>&gt;&gt; <br>&gt;&gt; Okay, but IMO the API of that protocol is wrong.  Any public interface<br>&gt;&gt; should look something like _CustomObjectiveCBridgeable per<br>&gt;&gt;<br>&gt; https://github.com/apple/swift/commit/87944ed2449ec7314ed8690b8894ce96ad339ebf#diff-9b6ea5442068d139aa4193a59b6e4b91<br>&gt;<br>&gt; Do you mind providing some color on this design? It seems to me that<br>&gt; the proposal&#39;s ObjectiveCBridgeable design was both more idiomatic<br></p><p>How so?<br></p><p>&gt; and permitted more behavior (particularly by allowing lazy collection<br>&gt; bridging), whereas this design&#39;s only benefit seems to be that it<br>&gt; abstracts away the specific &quot;policy&quot; (but that would prevent lazy<br>&gt; bridging or other behavior differences between different<br>&gt; policies). Why is this one better?<br></p><p>Because it results in far less code repetition and far more predictable<br>semantic relationships among the different bridging operations.<br></p><p>Yes, to agree with that design one has to buy into the idea that lazily<br>bridging from Objective-C is a net loss, and that any important cases<br>where it&#39;s a win can be dealt with well.  There are many strong reasons<br>to believe that&#39;s true, but we have some work ahead of us in order to<br>demonstrate it conclusively.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Pitch] Making some RawRepresentable things bridge to ObjC as their raw value</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>October  2, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Oct 2, 2016, at 3:46 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Do you mind providing some color on this design? It seems to me that<br>&gt;&gt; the proposal&#39;s ObjectiveCBridgeable design was both more idiomatic<br>&gt; <br>&gt; How so?<br></p><p>I mean merely that, when asked &quot;How do I create a new instance from some data?&quot;, Swift&#39;s preferred answer is &quot;Write an initializer&quot;, and thus `init?(bridgedFromObjectiveC: ObjectiveCType)` is a more natural solution than `static func bridged&lt;Policy: BridgePolicy&gt;(from: ObjectiveCType, by: Policy.Type) -&gt; Self?`. Obviously this is a mere style concern and should be ignored if there are good reasons to use the other design, but it seems to me that it deserves at least a little bit of weight.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
