<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>Examples:<br></p><p>var x:Int = none // uninitialized but not an optional<br></p><p>print(x) // run-time error as x is uninitialized<br></p><p>if x == nil { … } // compile time error… x can never be nil because it is not an optional<br></p><p>if x == none { x = 2 } // … but it can be uninitialized<br></p><p>Optionals can also be uninitialized:<br></p><p>var y:Int? = none // uninitialized and an optional<br></p><p>if y == nil { … } // run-time error as y is uninitialized<br></p><p>y = nil<br></p><p>if y == nil { … } // fine<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January  7, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 9:46 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Examples:<br>&gt; <br>&gt; var x:Int = none // uninitialized but not an optional<br>&gt; <br>&gt; print(x) // run-time error as x is uninitialized<br>&gt; <br>&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt; <br>&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; <br>&gt; Optionals can also be uninitialized:<br>&gt; <br>&gt; var y:Int? = none // uninitialized and an optional<br>&gt; <br>&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; <br>&gt; y = nil<br>&gt; <br>&gt; if y == nil { … } // fine<br></p><p>This use case should be supportable as a property behavior; check out the &quot;delayed&quot; example from my proposal:<br></p><p>https://gist.github.com/jckarter/f3d392cf183c6b2b2ac3<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>January  7, 2016 at 05:00:00pm</p></header><div class="content"><p>So what would none do for arrays ?<br></p><p>Would it auto initialize an empty array ?<br></p><p>If so would love to play around with alternative key words<br></p><p>On Thu, Jan 7, 2016 at 5:50 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 7, 2016, at 9:46 AM, Amir Michail via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Examples:<br>&gt; &gt;<br>&gt; &gt; var x:Int = none // uninitialized but not an optional<br>&gt; &gt;<br>&gt; &gt; print(x) // run-time error as x is uninitialized<br>&gt; &gt;<br>&gt; &gt; if x == nil { … } // compile time error… x can never be nil because it<br>&gt; is not an optional<br>&gt; &gt;<br>&gt; &gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; &gt;<br>&gt; &gt; Optionals can also be uninitialized:<br>&gt; &gt;<br>&gt; &gt; var y:Int? = none // uninitialized and an optional<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; &gt;<br>&gt; &gt; y = nil<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // fine<br>&gt;<br>&gt; This use case should be supportable as a property behavior; check out the<br>&gt; &quot;delayed&quot; example from my proposal:<br>&gt;<br>&gt; https://gist.github.com/jckarter/f3d392cf183c6b2b2ac3<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br> Wizard<br>james at supmenow.com<br>+44 7523 279 698<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/d614cc85/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January  7, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 9:56 AM, James Campbell &lt;james at supmenow.com&gt; wrote:<br>&gt; <br>&gt; So what would none do for arrays ?<br>&gt; <br>&gt; Would it auto initialize an empty array ? <br>&gt; <br>&gt; If so would love to play around with alternative key words<br></p><p>If I understand Amir correctly, they&#39;re proposing that &#39;none&#39; place the variable in a dynamically invalid state, and the program will trap if the value isn&#39;t set before use.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; On Thu, Jan 7, 2016 at 5:50 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; On Jan 7, 2016, at 9:46 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Examples:<br>&gt; &gt;<br>&gt; &gt; var x:Int = none // uninitialized but not an optional<br>&gt; &gt;<br>&gt; &gt; print(x) // run-time error as x is uninitialized<br>&gt; &gt;<br>&gt; &gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt; &gt;<br>&gt; &gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; &gt;<br>&gt; &gt; Optionals can also be uninitialized:<br>&gt; &gt;<br>&gt; &gt; var y:Int? = none // uninitialized and an optional<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; &gt;<br>&gt; &gt; y = nil<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // fine<br>&gt; <br>&gt; This use case should be supportable as a property behavior; check out the &quot;delayed&quot; example from my proposal:<br>&gt; <br>&gt; https://gist.github.com/jckarter/f3d392cf183c6b2b2ac3 &lt;https://gist.github.com/jckarter/f3d392cf183c6b2b2ac3&gt;<br>&gt; <br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt;  Wizard<br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;<br>&gt; +44 7523 279 698<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/0ce4fc67/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  7, 2016 at 01:00:00pm</p></header><div class="content"><p>An implicitly-unwrapped optional would do almost that, no?<br></p><p>Félix<br></p><p>&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Examples:<br>&gt; <br>&gt; var x:Int = none // uninitialized but not an optional<br>&gt; <br>&gt; print(x) // run-time error as x is uninitialized<br>&gt; <br>&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt; <br>&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; <br>&gt; Optionals can also be uninitialized:<br>&gt; <br>&gt; var y:Int? = none // uninitialized and an optional<br>&gt; <br>&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; <br>&gt; y = nil<br>&gt; <br>&gt; if y == nil { … } // fine<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/087f47db/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January  7, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt; <br></p><p>You can use “none” to eliminate implicitly unwrapped optionals from the language.<br></p><p>&gt; Félix<br>&gt; <br>&gt;&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Examples:<br>&gt;&gt; <br>&gt;&gt; var x:Int = none // uninitialized but not an optional<br>&gt;&gt; <br>&gt;&gt; print(x) // run-time error as x is uninitialized<br>&gt;&gt; <br>&gt;&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt;&gt; <br>&gt;&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt;&gt; <br>&gt;&gt; Optionals can also be uninitialized:<br>&gt;&gt; <br>&gt;&gt; var y:Int? = none // uninitialized and an optional<br>&gt;&gt; <br>&gt;&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt;&gt; <br>&gt;&gt; y = nil<br>&gt;&gt; <br>&gt;&gt; if y == nil { … } // fine<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/8dec63c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  7, 2016 at 02:00:00pm</p></header><div class="content"><p>That would leave you with runtime checks instead of compile-time checks and I totally disagree with that.<br></p><p>Félix<br></p><p>&gt; Le 7 janv. 2016 à 13:45:21, Amir Michail &lt;a.michail at me.com&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt;&gt; <br>&gt; <br>&gt; You can use “none” to eliminate implicitly unwrapped optionals from the language.<br>&gt; <br>&gt;&gt; Félix<br>&gt;&gt; <br>&gt;&gt;&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var x:Int = none // uninitialized but not an optional<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(x) // run-time error as x is uninitialized<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Optionals can also be uninitialized:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var y:Int? = none // uninitialized and an optional<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; y = nil<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if y == nil { … } // fine<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/94bd0f27/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January  7, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 7, 2016, at 2:09 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; That would leave you with runtime checks instead of compile-time checks and I totally disagree with that.<br>&gt; <br></p><p>Implicitly unwrapped optionals do runtime checks also.<br></p><p>&gt; Félix<br>&gt; <br>&gt;&gt; Le 7 janv. 2016 à 13:45:21, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; You can use “none” to eliminate implicitly unwrapped optionals from the language.<br>&gt;&gt; <br>&gt;&gt;&gt; Félix<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var x:Int = none // uninitialized but not an optional<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; print(x) // run-time error as x is uninitialized<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Optionals can also be uninitialized:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var y:Int? = none // uninitialized and an optional<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; y = nil<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if y == nil { … } // fine<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/21a96a6e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Yes, but following your suggestion, there may not be a difference between a non-optional value and an implicitly-wrapped optional, meaning that there will be a lot more of them.<br></p><p>Félix<br></p><p>&gt; Le 7 janv. 2016 à 14:10:44, Amir Michail &lt;a.michail at me.com&gt; a écrit :<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 7, 2016, at 2:09 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That would leave you with runtime checks instead of compile-time checks and I totally disagree with that.<br>&gt;&gt; <br>&gt; <br>&gt; Implicitly unwrapped optionals do runtime checks also.<br>&gt; <br>&gt;&gt; Félix<br>&gt;&gt; <br>&gt;&gt;&gt; Le 7 janv. 2016 à 13:45:21, Amir Michail &lt;a.michail at me.com &lt;mailto:a.michail at me.com&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can use “none” to eliminate implicitly unwrapped optionals from the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Félix<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var x:Int = none // uninitialized but not an optional<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; print(x) // run-time error as x is uninitialized<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Optionals can also be uninitialized:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var y:Int? = none // uninitialized and an optional<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; y = nil<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if y == nil { … } // fine<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/19dcf80d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>January  7, 2016 at 02:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jan 7, 2016, at 2:34 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; Yes, but following your suggestion, there may not be a difference between a non-optional value and an implicitly-wrapped optional, meaning that there will be a lot more of them.<br></p><p>Variables that are never assigned &quot;none&quot; need not have these runtime checks. Alternatively, you can have a type suffix similar to ? to indicate that a variable may be in an uninitialized state. <br></p><p>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt;&gt; Le 7 janv. 2016 à 14:10:44, Amir Michail &lt;a.michail at me.com&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jan 7, 2016, at 2:09 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That would leave you with runtime checks instead of compile-time checks and I totally disagree with that.<br>&gt;&gt; <br>&gt;&gt; Implicitly unwrapped optionals do runtime checks also.<br>&gt;&gt; <br>&gt;&gt;&gt; Félix<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Le 7 janv. 2016 à 13:45:21, Amir Michail &lt;a.michail at me.com&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You can use “none” to eliminate implicitly unwrapped optionals from the language.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Félix<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Examples:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var x:Int = none // uninitialized but not an optional<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; print(x) // run-time error as x is uninitialized<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Optionals can also be uninitialized:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; var y:Int? = none // uninitialized and an optional<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; y = nil<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; if y == nil { … } // fine<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/4a5558ab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d1bff9080a4237cc9b79c5751afb6f7?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Jarod Long</string> &lt;swift at lng.la&gt;<p>January  7, 2016 at 12:00:00pm</p></header><div class="content"><p>None is really just another way of saying something is nil, and a type suffix to allow assigning none is exactly equivalent to implicitly-unwrapped optionals, so I don&#39;t see any value in replacing them with this feature.<br></p><p>Not requiring a type suffix to assign none would be equivalent to allowing assignment of nil to any type, making everything an implicitly-unwrapped optional. You lose the compile-time nil safety that optionals provide, and the compiler likely loses many optimization opportunities because there are many situations where it can&#39;t know (or it is very difficult to know) whether a value could have possibly been assigned none at some point.<br></p><p>I understand the desire to reduce optionality to make code cleaner, but this kind of feature actually hides complexity and makes things more difficult in the long run. Implicitly-unwrapped optionals are a good compromise between cleanliness and effectively communicating when something can fail at run time.<br></p><p>Jarod<br></p><p><br>On Jan 7, 2016, 11:41 -0800, Amir Michail via swift-evolution&lt;swift-evolution at swift.org&gt;, wrote:<br>&gt;  <br>&gt;  <br>&gt; Sent from my iPad<br>&gt;  <br>&gt; On Jan 7, 2016, at 2:34 PM, Félix Cloutier&lt;felixcca at yahoo.ca(mailto:felixcca at yahoo.ca)&gt;wrote:<br>&gt;  <br>&gt; &gt; Yes, but following your suggestion, there may not be a difference between a non-optional value and an implicitly-wrapped optional, meaning that there will be a lot more of them.<br>&gt;  <br>&gt; Variables that are never assigned &quot;none&quot; need not have these runtime checks. Alternatively, you can have a type suffix similar to ? to indicate that a variable may be in an uninitialized state.<br>&gt; &gt;  <br>&gt; &gt; Félix<br>&gt; &gt; &gt; Le 7 janv. 2016 à 14:10:44, Amir Michail&lt;a.michail at me.com(mailto:a.michail at me.com)&gt;a écrit :<br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; On Jan 7, 2016, at 2:09 PM, Félix Cloutier&lt;felixcca at yahoo.ca(mailto:felixcca at yahoo.ca)&gt;wrote:<br>&gt; &gt; &gt; &gt; That would leave you with runtime checks instead of compile-time checks and I totally disagree with that.<br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; Implicitly unwrapped optionals do runtime checks also.<br>&gt; &gt; &gt; &gt; Félix<br>&gt; &gt; &gt; &gt; &gt; Le 7 janv. 2016 à 13:45:21, Amir Michail&lt;a.michail at me.com(mailto:a.michail at me.com)&gt;a écrit :<br>&gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; On Jan 7, 2016, at 1:40 PM, Félix Cloutier&lt;felixcca at yahoo.ca(mailto:felixcca at yahoo.ca)&gt;wrote:<br>&gt; &gt; &gt; &gt; &gt; &gt; An implicitly-unwrapped optional would do almost that, no?<br>&gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; You can use “none” to eliminate implicitly unwrapped optionals from the language.<br>&gt; &gt; &gt; &gt; &gt; &gt; Félix<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; Le 7 janv. 2016 à 12:46:53, Amir Michail via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;a écrit :<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; Examples:<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; var x:Int = none // uninitialized but not an optional<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; print(x) // run-time error as x is uninitialized<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; Optionals can also be uninitialized:<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; var y:Int? = none // uninitialized and an optional<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; y = nil<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; if y == nil { … } // fine<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt; &gt;  <br>&gt; &gt; &gt;  <br>&gt; &gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/c7c8daef/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  8, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; var x:Int = none // uninitialized but not an optional<br>&gt; <br>&gt; print(x) // run-time error as x is uninitialized<br>&gt; <br>&gt; if x == nil { … } // compile time error… x can never be nil because it is not an optional<br>&gt; <br>&gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; <br>&gt; Optionals can also be uninitialized:<br>&gt; <br>&gt; var y:Int? = none // uninitialized and an optional<br>&gt; <br>&gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; <br>&gt; y = nil<br>&gt; <br>&gt; if y == nil { … } // fine<br></p><p>I think there *may* be a case for this as a strictly static check. That is, setting a variable to `none` would be a way to explicitly mark the current state as invalid, and ask the compiler to prove that it&#39;s not used again until you&#39;ve reinitialized it. But your example of `x == none` would not make any sense—`none` would not be a thing that existed at runtime. That&#39;s a very niche feature, though, and I&#39;d need convincing that it&#39;s helpful.<br></p><p>I&#39;m strongly opposed to this feature as a runtime construct. It&#39;s basically just reintroducing null references, which is an anti-goal.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b728da29cd3d569863451ebf5d1d361?s=50"></div><header><strong>Proposal: Add &quot;none&quot; and simplify the language.</strong> from <string>品雪</string> &lt;pinxue at gmail.com&gt;<p>January  9, 2016 at 05:00:00pm</p></header><div class="content"><p>To have ? in the symbol is much better than looking back again and again to<br>ensure variable is initialized or not for me.<br></p><p>Ruby style of fields naming is even better for reading, though a little<br>burden for writing.<br></p><p>On Sat, Jan 9, 2016 at 3:38 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; var x:Int = none // uninitialized but not an optional<br>&gt; &gt;<br>&gt; &gt; print(x) // run-time error as x is uninitialized<br>&gt; &gt;<br>&gt; &gt; if x == nil { … } // compile time error… x can never be nil because it<br>&gt; is not an optional<br>&gt; &gt;<br>&gt; &gt; if x == none { x = 2 } // … but it can be uninitialized<br>&gt; &gt;<br>&gt; &gt; Optionals can also be uninitialized:<br>&gt; &gt;<br>&gt; &gt; var y:Int? = none // uninitialized and an optional<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // run-time error as y is uninitialized<br>&gt; &gt;<br>&gt; &gt; y = nil<br>&gt; &gt;<br>&gt; &gt; if y == nil { … } // fine<br>&gt;<br>&gt; I think there *may* be a case for this as a strictly static check. That<br>&gt; is, setting a variable to `none` would be a way to explicitly mark the<br>&gt; current state as invalid, and ask the compiler to prove that it&#39;s not used<br>&gt; again until you&#39;ve reinitialized it. But your example of `x == none` would<br>&gt; not make any sense—`none` would not be a thing that existed at runtime.<br>&gt; That&#39;s a very niche feature, though, and I&#39;d need convincing that it&#39;s<br>&gt; helpful.<br>&gt;<br>&gt; I&#39;m strongly opposed to this feature as a runtime construct. It&#39;s<br>&gt; basically just reintroducing null references, which is an anti-goal.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Best Regards!<br></p><p>Yang Wu<br>--------------------------------------------------------<br>Location: Pudong, Shanghai, China.<br>EMail    : pinxue at gmail.com<br>Website: http://www.time2change.mobi http://rockplayer.com<br>Twitter/Weibo : @pinxue<br>&lt;http://www.pinxue.net&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160109/61fcd795/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
