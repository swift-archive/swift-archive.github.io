<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/45196398e9685000d195ec626d477f0e?s=50"></div><header><strong>Propagating Optionals</strong> from <string>Trans</string> &lt;transfire at gmail.com&gt;<p>September 25, 2016 at 04:00:00pm</p></header><div class="content"><p>As I&#39;ve been learning Swift recently, one aspect of the language<br>jumped out at me with a &quot;code smell&quot;. Namely, the way Optionals are<br>handled. For starters, just consider how long this chapter is:<br>https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html<br>That&#39;s pretty beefy for something on the surface is pretty simple.<br></p><p>More concretely, consider the example given:<br></p><p>    class Person {<br>        var residence: Residence?<br>    }<br></p><p>    class Residence {<br>        var numberOfRooms = 1<br>    }<br></p><p>    let john = Person()<br></p><p>    let roomCount = john.residence.numberOfRooms<br></p><p>    // error: value of optional type &#39;Residence?&#39; not unwrapped; did<br>you mean to use &#39;!&#39; or &#39;?&#39;?<br></p><p>As general rule of thumb, whenever I get an error and the system tells<br>me what I probably meant, that is a pretty good sign the system isn&#39;t<br>doing all it can for me and making me jump through an unnecessary<br>hoop.<br></p><p>Basically &quot;john.residence.numberOfRooms&quot; is a completely wasted<br>expression -- it&#39;s meaningless. You have to put a `?` or `!` in there<br>to get anything useful. I can&#39;t see any good reason for that.<br>&quot;john.residence.numberOfRooms&quot; could just behave one way or the other,<br>either as if the `?` were there, or the `!`. And of the two, the<br>obvious choice is `?` because... I already told the program it the was<br>optional in &quot;var residence: Residence?&quot;.  I said it was optional, and<br>yep I meant that. (Reminds me of the old retort &quot;did I stutter?&quot;)<br>Thus, if I try to assign it to something else it too should be<br>optional. If I want it to be otherwise I&#39;d add the `!`.<br></p><p>Making this change would just simplify a whole mess of code and about<br>half that chapter would all but vanish.<br></p><p>In addition, seeing that `!` acts a short-circuit to error, it would<br>be nice to have something equivalent for fallback value. We can&#39;t use<br>`??` b/c it doesn&#39;t chain, though maybe it could be made to? And I&#39;d<br>rather not reuse `?.` here  (for reasons I can explain later). Maybe<br>`:` is a good choice? In any case, exact syntax aside,<br></p><p>    let homelessShelter = Residence()<br>    let roomCount = john.residence:homelessShelter.numberOfRooms<br></p><p>Now, roomCount will not be optional, because there is a guaranteed value.<br></p><p>I think simplifying Optionals this way would be a good fit for Swift,<br>making this part of the language a whole lot cleaner and clearer.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b0a8a8751387599c6d98c36808e8916c?s=50"></div><header><strong>Propagating Optionals</strong> from <string>William Sumner</string> &lt;prestonsumner at me.com&gt;<p>September 25, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Sep 25, 2016, at 2:19 PM, Trans via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As I&#39;ve been learning Swift recently, one aspect of the language<br>&gt; jumped out at me with a &quot;code smell&quot;. Namely, the way Optionals are<br>&gt; handled. For starters, just consider how long this chapter is:<br>&gt; https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html<br>&gt; That&#39;s pretty beefy for something on the surface is pretty simple.<br>&gt; <br>&gt; More concretely, consider the example given:<br>&gt; <br>&gt;   class Person {<br>&gt;       var residence: Residence?<br>&gt;   }<br>&gt; <br>&gt;   class Residence {<br>&gt;       var numberOfRooms = 1<br>&gt;   }<br>&gt; <br>&gt;   let john = Person()<br>&gt; <br>&gt;   let roomCount = john.residence.numberOfRooms<br>&gt; <br>&gt;   // error: value of optional type &#39;Residence?&#39; not unwrapped; did<br>&gt; you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt; <br>&gt; As general rule of thumb, whenever I get an error and the system tells<br>&gt; me what I probably meant, that is a pretty good sign the system isn&#39;t<br>&gt; doing all it can for me and making me jump through an unnecessary<br>&gt; hoop.<br>&gt; <br>&gt; Basically &quot;john.residence.numberOfRooms&quot; is a completely wasted<br>&gt; expression -- it&#39;s meaningless. You have to put a `?` or `!` in there<br>&gt; to get anything useful. I can&#39;t see any good reason for that.<br>&gt; &quot;john.residence.numberOfRooms&quot; could just behave one way or the other,<br>&gt; either as if the `?` were there, or the `!`. And of the two, the<br>&gt; obvious choice is `?` because... I already told the program it the was<br>&gt; optional in &quot;var residence: Residence?&quot;.  I said it was optional, and<br>&gt; yep I meant that. (Reminds me of the old retort &quot;did I stutter?&quot;)<br>&gt; Thus, if I try to assign it to something else it too should be<br>&gt; optional. If I want it to be otherwise I&#39;d add the `!`.<br>&gt; <br>&gt; Making this change would just simplify a whole mess of code and about<br>&gt; half that chapter would all but vanish.<br></p><p>You have to be explicit about how to handle nullability because you’re attempting to access the property of an optional property.<br></p><p>&gt; In addition, seeing that `!` acts a short-circuit to error, it would<br>&gt; be nice to have something equivalent for fallback value. We can&#39;t use<br>&gt; `??` b/c it doesn&#39;t chain, though maybe it could be made to? And I&#39;d<br>&gt; rather not reuse `?.` here  (for reasons I can explain later). Maybe<br>&gt; `:` is a good choice? In any case, exact syntax aside,<br>&gt; <br>&gt;   let homelessShelter = Residence()<br>&gt;   let roomCount = john.residence:homelessShelter.numberOfRooms<br>&gt; <br>&gt; Now, roomCount will not be optional, because there is a guaranteed value.<br>&gt; <br>&gt; I think simplifying Optionals this way would be a good fit for Swift,<br>&gt; making this part of the language a whole lot cleaner and clearer.<br></p><p><br>You can accomplish this using parenthesis:<br></p><p>let roomCount = (john.residence ?? homelessShelter).numberOfRooms<br></p><p>Preston<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Propagating Optionals</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>September 26, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 26 Sep 2016, at 00:26, William Sumner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;  let roomCount = john.residence.numberOfRooms<br>&gt;&gt; <br>&gt;&gt;  // error: value of optional type &#39;Residence?&#39; not unwrapped; did<br>&gt;&gt; you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;&gt; <br>&gt;&gt; As general rule of thumb, whenever I get an error and the system tells<br>&gt;&gt; me what I probably meant, that is a pretty good sign the system isn&#39;t<br>&gt;&gt; doing all it can for me and making me jump through an unnecessary<br>&gt;&gt; hoop.<br></p><p>In this case, the compiler hasn’t told you what you probably mean. It’s given you two different meanings to choose from and hasn’t actually excluded other ways to fix the issue e.g. if let or guard let or even an extension to Optional.<br></p><p>As Haravikk and Brent have said, assuming either of these as the default is dangerous.<br></p><p>Assuming ! as the default, to my mind negates the point of introducing optionals at all, we might as well go back to null references. The whole point is to eliminate the “no value” problem at compile time, not run time.<br></p><p>Assuming ? as the default is more insidious. The application may carry on and may persist state that is incorrect.<br></p><p>I think the current behaviour is correct.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Propagating Optionals</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>September 25, 2016 at 09:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160925/279057f4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Propagating Optionals</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>September 26, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 25 Sep 2016, at 21:19, Trans via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; &quot;john.residence.numberOfRooms&quot; could just behave one way or the other<br></p><p>While I understand where you&#39;re coming from, I think the problem is that whichever version we specified as a guess would be wrong some of the time anyway, which is why it&#39;s better to just force the developer to think about it and put the correct symbol(s) for their use case.<br></p><p>For example, if we assumed a behaviour of !, then the user is going to get runtime errors that might not always occur (say the residence is nil 5% of the time, that&#39;s potentially only a 5% chance of triggering the error during testing). If we assume ? as the correct behaviour then the developer could end up with an error much further down their code depending upon when and how they use the result of the statement, and looking back at the code it won&#39;t be as obvious where that optional came from (especially if you meant to put an exclamation mark but didn&#39;t, so are assuming a non-optional value).<br></p><p>It&#39;s just one of those cases where I think it&#39;s better to force the developer to be explicit, rather than try to guess what they meant to do.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>Propagating Optionals</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>October  7, 2016 at 06:00:00pm</p></header><div class="content"><p>On Sun, Sep 25, 2016 at 4:19 PM, Trans via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; As I&#39;ve been learning Swift recently, one aspect of the language<br>&gt; jumped out at me with a &quot;code smell&quot;. Namely, the way Optionals are<br>&gt; handled. For starters, just consider how long this chapter is:<br>&gt; https://developer.apple.com/library/content/documentation/<br>&gt; Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html<br>&gt; That&#39;s pretty beefy for something on the surface is pretty simple.<br>&gt;<br>&gt;<br>Handling &#39;nothing&#39; is actually complicated. I am not sure that there is a<br>reasonable way to make it less complicated. There are quite a few tools to<br>deal with &quot;this might not contain anything&quot; and yes, that can be daunting,<br>but each tool pulls its weight.<br></p><p><br></p><p>&gt; More concretely, consider the example given:<br>&gt;<br>&gt;     class Person {<br>&gt;         var residence: Residence?<br>&gt;     }<br>&gt;<br>&gt;     class Residence {<br>&gt;         var numberOfRooms = 1<br>&gt;     }<br>&gt;<br>&gt;     let john = Person()<br>&gt;<br>&gt;     let roomCount = john.residence.numberOfRooms<br>&gt;<br>&gt;     // error: value of optional type &#39;Residence?&#39; not unwrapped; did<br>&gt; you mean to use &#39;!&#39; or &#39;?&#39;?<br>&gt;<br>&gt; As general rule of thumb, whenever I get an error and the system tells<br>&gt; me what I probably meant, that is a pretty good sign the system isn&#39;t<br>&gt; doing all it can for me and making me jump through an unnecessary<br>&gt; hoop.<br>&gt;<br></p><p>If you click the fixit, the compiler will insert a `!` for you. If you<br>typed that using autocomplete, it would have put a `?` in for you. I don&#39;t<br>see understand what else it can do for you. A choice has to be made about<br>how to handle &quot;The left portion of this might be nil&quot; and an implicit<br>choice is bad.<br></p><p><br></p><p>&gt;<br>&gt; Basically &quot;john.residence.numberOfRooms&quot; is a completely wasted<br>&gt; expression -- it&#39;s meaningless. You have to put a `?` or `!` in there<br>&gt; to get anything useful. I can&#39;t see any good reason for that.<br>&gt; &quot;john.residence.numberOfRooms&quot; could just behave one way or the other,<br>&gt; either as if the `?` were there, or the `!`. And of the two, the<br>&gt; obvious choice is `?` because... I already told the program it the was<br>&gt; optional in &quot;var residence: Residence?&quot;.  I said it was optional, and<br>&gt; yep I meant that. (Reminds me of the old retort &quot;did I stutter?&quot;)<br>&gt;<br></p><p>You meant &#39;this might be nil&#39;. You did not say what to do when it is and<br>you usually cannot always say if finding nothing is recoverable even for<br>the same property.<br></p><p><br></p><p>&gt; Thus, if I try to assign it to something else it too should be<br>&gt; optional. If I want it to be otherwise I&#39;d add the `!`.<br>&gt;<br>This seems like a step backward. `?` calls out everyplace that there is<br>uncertainty about `nothing`. Going back to hidden nil messaging isn&#39;t a<br>good move. I know what it feels like to unexpectedly message nil. I can<br>debug it just fine. I know that the skill can be acquired and yet, I think<br>that swift is better for not requiring that skill of new programmers.<br></p><p><br>&gt; Making this change would just simplify a whole mess of code and about<br>&gt; half that chapter would all but vanish.<br>&gt;<br></p><p>It would not simplify the code at all. It would complicate reading it.<br></p><p><br>&gt;<br>&gt; In addition, seeing that `!` acts a short-circuit to error, it would<br>&gt; be nice to have something equivalent for fallback value. We can&#39;t use<br>&gt; `??` b/c it doesn&#39;t chain, though maybe it could be made to? And I&#39;d<br>&gt; rather not reuse `?.` here  (for reasons I can explain later). Maybe<br>&gt; `:` is a good choice? In any case, exact syntax aside,<br>&gt;<br>&gt;     let homelessShelter = Residence()<br>&gt;     let roomCount = john.residence:homelessShelter.numberOfRooms<br>&gt;<br>&gt; Now, roomCount will not be optional, because there is a guaranteed value.<br>&gt;<br>&gt; I think simplifying Optionals this way would be a good fit for Swift,<br>&gt; making this part of the language a whole lot cleaner and clearer.<br>&gt;<br></p><p><br>I disagree, as the rest of my reply has likely indicated. Some things a<br>fine being implicit (the positive sign on integers, for instance).<br>Optionality is not one of those things.<br></p><p><br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161007/089c2c4e/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
