<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>October  3, 2016 at 01:00:00pm</p></header><div class="content"><p>Hey all,<br></p><p>Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br></p><p>It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br></p><p>I&#39;ve posted the current draft below.<br></p><p>Thanks,<br>Harlan Haskins<br></p><p>Disallow Optionals in String Interpolation Segments<br>Proposal: SE-NNNN<br>Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>Review Manager: TBD<br>Status: Awaiting revie<br>Introduction<br></p><p>Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br></p><p>Swift-evolution thread: Discussion thread topic for that proposal<br></p><p>Motivation<br></p><p>The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br></p><p>Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br></p><p>Proposed solution<br></p><p>The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br></p><p>Detailed design<br></p><p>Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br></p><p>Impact on existing code<br></p><p>As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br></p><p>Alternatives considered<br></p><p>A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br></p><p>Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br></p><p>A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br></p><p><br></p><p>Sent from my iPad<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/4d616750/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October  3, 2016 at 10:00:00am</p></header><div class="content"><p>We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br></p><p>-Joe<br></p><p>&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey all,<br>&gt; <br>&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt; <br>&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt; <br>&gt; I&#39;ve posted the current draft below.<br>&gt; <br>&gt; Thanks,<br>&gt; Harlan Haskins<br>&gt; <br>&gt; Disallow Optionals in String Interpolation Segments<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt; Review Manager: TBD<br>&gt; Status: Awaiting revie<br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt; <br>&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt; <br>&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt; <br>&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt; <br>&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt; <br>&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt; <br>&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt; <br>&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/fb724e4c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br></p><p>- Harlan<br></p><p>&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey all,<br>&gt;&gt; <br>&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt; <br>&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt; <br>&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Harlan Haskins<br>&gt;&gt; <br>&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt; <br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>&gt;&gt; Review Manager: TBD<br>&gt;&gt; Status: Awaiting revie<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt; <br>&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt; <br>&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br>&gt;&gt; <br>&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt; <br>&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/856d14b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt; <br>&gt; - Harlan<br>&gt; <br>&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/d377abab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October  3, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 11:02 AM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br></p><p>I think there&#39;s a case to be made to generalize the &#39;Any&#39; warning to Optional implicitly being deduced as a type variable binding in any unconstrained context. What exactly constitutes &#39;implicit&#39; and &#39;unconstrained&#39; is up for debate, though, and probably needs some experimentation to figure out what feels good. For instance, explicitly constructing an optional is a signal the optionality intentional. Potentially, having multiple Optional parameters binding the same type variable also increases the likelihood it&#39;s intended, for example:<br></p><p>func foo&lt;T&gt;(x: T, y: T) {}<br></p><p>var x: Int? = 1<br>var y: Int = 2<br>foo(x, y) // One Optional isn&#39;t unwrapped, forcing the other to promote. Maybe a mistake?<br>var z: Int? = 3<br>foo(x, z) // Two T parameters are Optional. Probably intentional?<br></p><p>Regardless of whether there&#39;s a more general principle we can base a warning on, string interpolation and String(describing:) are common enough pitfalls that they may just deserve special case treatment.<br></p><p>-Joe<br></p><p>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt;&gt; <br>&gt;&gt; - Harlan<br>&gt;&gt; <br>&gt;&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/c2584cdc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 11:26 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 11:02 AM, Robert Widmann &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br>&gt; <br>&gt; I think there&#39;s a case to be made to generalize the &#39;Any&#39; warning to Optional implicitly being deduced as a type variable binding in any unconstrained context. What exactly constitutes &#39;implicit&#39; and &#39;unconstrained&#39; is up for debate, though, and probably needs some experimentation to figure out what feels good. For instance, explicitly constructing an optional is a signal the optionality intentional. Potentially, having multiple Optional parameters binding the same type variable also increases the likelihood it&#39;s intended, for example:<br>&gt; <br>&gt; func foo&lt;T&gt;(x: T, y: T) {}<br>&gt; <br>&gt; var x: Int? = 1<br>&gt; var y: Int = 2<br>&gt; foo(x, y) // One Optional isn&#39;t unwrapped, forcing the other to promote. Maybe a mistake?<br>&gt; var z: Int? = 3<br>&gt; foo(x, z) // Two T parameters are Optional. Probably intentional?<br>&gt; <br>&gt; Regardless of whether there&#39;s a more general principle we can base a warning on, string interpolation and String(describing:) are common enough pitfalls that they may just deserve special case treatment.<br></p><p>I think string interpolation could be handled pretty easily with a warning by extending the existing warning for Any. We just need to look at interpolation expressions and if any of the segments are optional-typed emit a warning unless they are explicitly casted to the optional type. The fixit can suggest explicit casting or using the debugDescription.<br></p><p>I’m not sure we really need an evolution proposal for that.<br></p><p>As for the more general topic of trickiness around optional injection into unconstrained generics: Yes, we should review that at some point as well. I recall seeing at least one concrete complaint about surprising behavior resulting from doing this in generic functions, but I cannot find the bug at the moment.<br></p><p>Mark<br></p><p><br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Harlan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/088a8199/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 05:00:00pm</p></header><div class="content"><p>Definitely right about that, the implementation &lt;https://github.com/CodaFi/swift/commit/43a582ef0fb108369f3df955f617b77b71cbd45e#diff-9124ea1eb6021a3c7323d7a07fd85c1eR2409&gt; took all of 10 minutes after extending the OptionalToAnyCoercionWalker.  If you’ve got any comments, please let me know there.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 3, 2016, at 4:06 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 3, 2016, at 11:26 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 11:02 AM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br>&gt;&gt; <br>&gt;&gt; I think there&#39;s a case to be made to generalize the &#39;Any&#39; warning to Optional implicitly being deduced as a type variable binding in any unconstrained context. What exactly constitutes &#39;implicit&#39; and &#39;unconstrained&#39; is up for debate, though, and probably needs some experimentation to figure out what feels good. For instance, explicitly constructing an optional is a signal the optionality intentional. Potentially, having multiple Optional parameters binding the same type variable also increases the likelihood it&#39;s intended, for example:<br>&gt;&gt; <br>&gt;&gt; func foo&lt;T&gt;(x: T, y: T) {}<br>&gt;&gt; <br>&gt;&gt; var x: Int? = 1<br>&gt;&gt; var y: Int = 2<br>&gt;&gt; foo(x, y) // One Optional isn&#39;t unwrapped, forcing the other to promote. Maybe a mistake?<br>&gt;&gt; var z: Int? = 3<br>&gt;&gt; foo(x, z) // Two T parameters are Optional. Probably intentional?<br>&gt;&gt; <br>&gt;&gt; Regardless of whether there&#39;s a more general principle we can base a warning on, string interpolation and String(describing:) are common enough pitfalls that they may just deserve special case treatment.<br>&gt; <br>&gt; I think string interpolation could be handled pretty easily with a warning by extending the existing warning for Any. We just need to look at interpolation expressions and if any of the segments are optional-typed emit a warning unless they are explicitly casted to the optional type. The fixit can suggest explicit casting or using the debugDescription.<br>&gt; <br>&gt; I’m not sure we really need an evolution proposal for that.<br>&gt; <br>&gt; As for the more general topic of trickiness around optional injection into unconstrained generics: Yes, we should review that at some point as well. I recall seeing at least one concrete complaint about surprising behavior resulting from doing this in generic functions, but I cannot find the bug at the moment.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Harlan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Proposal: SE-NNNN<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	• A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	• Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	• A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/7024fab7/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>October  3, 2016 at 05:00:00pm</p></header><div class="content"><p>If you don&#39;t think this needs a proposal, then Robert has an implementation almost done. We could submit a PR later today.<br></p><p>- Harlan<br></p><p>&gt; On Oct 3, 2016, at 4:06 PM, Mark Lacey via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 11:26 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 11:02 AM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br>&gt;&gt; <br>&gt;&gt; I think there&#39;s a case to be made to generalize the &#39;Any&#39; warning to Optional implicitly being deduced as a type variable binding in any unconstrained context. What exactly constitutes &#39;implicit&#39; and &#39;unconstrained&#39; is up for debate, though, and probably needs some experimentation to figure out what feels good. For instance, explicitly constructing an optional is a signal the optionality intentional. Potentially, having multiple Optional parameters binding the same type variable also increases the likelihood it&#39;s intended, for example:<br>&gt;&gt; <br>&gt;&gt; func foo&lt;T&gt;(x: T, y: T) {}<br>&gt;&gt; <br>&gt;&gt; var x: Int? = 1<br>&gt;&gt; var y: Int = 2<br>&gt;&gt; foo(x, y) // One Optional isn&#39;t unwrapped, forcing the other to promote. Maybe a mistake?<br>&gt;&gt; var z: Int? = 3<br>&gt;&gt; foo(x, z) // Two T parameters are Optional. Probably intentional?<br>&gt;&gt; <br>&gt;&gt; Regardless of whether there&#39;s a more general principle we can base a warning on, string interpolation and String(describing:) are common enough pitfalls that they may just deserve special case treatment.<br>&gt; <br>&gt; I think string interpolation could be handled pretty easily with a warning by extending the existing warning for Any. We just need to look at interpolation expressions and if any of the segments are optional-typed emit a warning unless they are explicitly casted to the optional type. The fixit can suggest explicit casting or using the debugDescription.<br>&gt; <br>&gt; I’m not sure we really need an evolution proposal for that.<br>&gt; <br>&gt; As for the more general topic of trickiness around optional injection into unconstrained generics: Yes, we should review that at some point as well. I recall seeing at least one concrete complaint about surprising behavior resulting from doing this in generic functions, but I cannot find the bug at the moment.<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Harlan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/edc4d56c/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 2:12 PM, Harlan Haskins &lt;harlan at harlanhaskins.com&gt; wrote:<br>&gt; <br>&gt; If you don&#39;t think this needs a proposal<br></p><p>Well, that’s not up to me, so let’s wait until someone else chimes in. :)<br></p><p>Mark<br></p><p>&gt; , then Robert has an implementation almost done. We could submit a PR later today.<br>&gt; <br>&gt; - Harlan<br>&gt; <br>&gt; On Oct 3, 2016, at 4:06 PM, Mark Lacey via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 11:26 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 11:02 AM, Robert Widmann &lt;devteam.codafi at gmail.com &lt;mailto:devteam.codafi at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Because the initializer here doesn’t take Any, it takes &lt;T&gt;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think there&#39;s a case to be made to generalize the &#39;Any&#39; warning to Optional implicitly being deduced as a type variable binding in any unconstrained context. What exactly constitutes &#39;implicit&#39; and &#39;unconstrained&#39; is up for debate, though, and probably needs some experimentation to figure out what feels good. For instance, explicitly constructing an optional is a signal the optionality intentional. Potentially, having multiple Optional parameters binding the same type variable also increases the likelihood it&#39;s intended, for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func foo&lt;T&gt;(x: T, y: T) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var x: Int? = 1<br>&gt;&gt;&gt; var y: Int = 2<br>&gt;&gt;&gt; foo(x, y) // One Optional isn&#39;t unwrapped, forcing the other to promote. Maybe a mistake?<br>&gt;&gt;&gt; var z: Int? = 3<br>&gt;&gt;&gt; foo(x, z) // Two T parameters are Optional. Probably intentional?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regardless of whether there&#39;s a more general principle we can base a warning on, string interpolation and String(describing:) are common enough pitfalls that they may just deserve special case treatment.<br>&gt;&gt; <br>&gt;&gt; I think string interpolation could be handled pretty easily with a warning by extending the existing warning for Any. We just need to look at interpolation expressions and if any of the segments are optional-typed emit a warning unless they are explicitly casted to the optional type. The fixit can suggest explicit casting or using the debugDescription.<br>&gt;&gt; <br>&gt;&gt; I’m not sure we really need an evolution proposal for that.<br>&gt;&gt; <br>&gt;&gt; As for the more general topic of trickiness around optional injection into unconstrained generics: Yes, we should review that at some point as well. I recall seeing at least one concrete complaint about surprising behavior resulting from doing this in generic functions, but I cannot find the bug at the moment.<br>&gt;&gt; <br>&gt;&gt; Mark<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 2:00 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, Optional-to-Any does not currently hit this case because IIRC it doesn&#39;t promote to Any in an interpolation segment. I tested this with a ToT build yesterday.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - Harlan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 1:57 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We now emit a warning whenever an optional is used as an Any. I disagree that this should be an error, but it seems reasonable to warn (if we don&#39;t already thanks to the &#39;Any&#39; warning).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/1e41fed7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b54c2d366bbc31b41cf7dcbc77324f9?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Keith Smiley</string> &lt;k at keith.so&gt;<p>October  3, 2016 at 11:00:00am</p></header><div class="content"><p>+1 to this warning. We&#39;ve been hit by this bug a bunch of times. Especially when<br>optionality of properties have been in flux.<br></p><p>Just yesterday: https://twitter.com/zefhous/status/782783999663943680<br></p><p>--<br>Keith Smiley<br></p><p>On 10/03, Harlan Haskins via swift-evolution wrote:<br>&gt; Hey all,<br>&gt;<br>&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;<br>&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;<br>&gt; I&#39;ve posted the current draft below.<br>&gt;<br>&gt; Thanks,<br>&gt; Harlan Haskins<br>&gt;<br>&gt; Disallow Optionals in String Interpolation Segments<br>&gt; Proposal: SE-NNNN<br>&gt; Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>&gt; Review Manager: TBD<br>&gt; Status: Awaiting revie<br>&gt; Introduction<br>&gt;<br>&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;<br>&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;<br>&gt; Motivation<br>&gt;<br>&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;<br>&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;<br>&gt; Proposed solution<br>&gt;<br>&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;<br>&gt; Detailed design<br>&gt;<br>&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;<br>&gt; Impact on existing code<br>&gt;<br>&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;<br>&gt; Alternatives considered<br>&gt;<br>&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br>&gt;<br>&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;<br>&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Sent from my iPad<br></p><p>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>On Mon, Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution wrote:<br>&gt; Swift developers frequently use string interpolation as a convenient,<br>&gt; concise syntax for interweaving variable values with strings. The<br>&gt; interpolation machinery, however, has surprising behavior in one<br>&gt; specific case: Optional&lt;T&gt;. If a user puts an optional value into a<br>&gt; string interpolation segment, it will insert either<br>&gt; &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these<br>&gt; is particularly desirable, so we propose a warning and fix-it to<br>&gt; surface solutions to these potential mistakes.<br></p><p>Is there any way we could instead allow Optionals but just print them<br>the way we print ImplicitlyUnwrappedOptionals? That&#39;s almost always how<br>I want my Optionals to work when interpolating. To be specific, this<br>means for .some(x) we just print x, and for .none we print &quot;nil&quot;.<br></p><p>-Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/647ad22d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>October  3, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 14:41, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution wrote:<br>&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt; <br>&gt; <br>&gt; Is there any way we could instead allow Optionals but just print them the way we print ImplicitlyUnwrappedOptionals? That&#39;s almost always how I want my Optionals to work when interpolating. To be specific, this means for .some(x) we just print x, and for .none we print &quot;nil&quot;.<br></p><p>We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/75386041/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  3, 2016 at 03:00:00pm</p></header><div class="content"><p>On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;<br>&gt;&gt; On Oct 3, 2016, at 14:41, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-<br>&gt;&gt; evolution wrote:<br>&gt;&gt;&gt; Swift developers frequently use string interpolation as a<br>&gt;&gt;&gt; convenient, concise syntax for interweaving variable values with<br>&gt;&gt;&gt; strings. The interpolation machinery, however, has surprising<br>&gt;&gt;&gt; behavior in one specific case: Optional&lt;T&gt;. If a user puts an<br>&gt;&gt;&gt; optional value into a string interpolation segment, it will insert<br>&gt;&gt;&gt; either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither<br>&gt;&gt;&gt; of these is particularly desirable, so we propose a warning and fix-<br>&gt;&gt;&gt; it to surface solutions to these potential mistakes.<br>&gt;&gt;<br>&gt;&gt; Is there any way we could instead allow Optionals but just print<br>&gt;&gt; them the way we print ImplicitlyUnwrappedOptionals? That&#39;s almost<br>&gt;&gt; always how I want my Optionals to work when interpolating. To be<br>&gt;&gt; specific, this means for .some(x) we just print x, and for .none we<br>&gt;&gt; print &quot;nil&quot;.<br>&gt; We had this at one point, but we took it out because people would<br>&gt; forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the<br>&gt; best answer here.<br></p><p>But you can&#39;t write that, unless you&#39;re dealing specifically with an<br>Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br></p><p>unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to<br>operands of type &#39;Int?&#39; and &#39;String&#39;<br>    print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>                ~ ^  ~~~~~<br>unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially<br>matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?,<br>@autoclosure () thro<br>ws -&gt; T?)<br>    print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>                  ^<br>This leads to writing code like &quot;… \(x.map(String.init(describing:)) ??<br>&quot;nil&quot;)&quot; which is pretty gross.<br></p><p>-Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/e694ba8a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f463dd4e7af28b64ad8f0e032ee82dc?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Nate Cook</string> &lt;natecook at gmail.com&gt;<p>October  4, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ...<br>&gt;&gt;&gt; <br>&gt;&gt; We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br>&gt; <br>&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt; <br>&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                 ~ ^  ~~~~~<br>&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?, @autoclosure () thro<br>&gt; ws -&gt; T?)<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                   ^<br>&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br></p><p>I think that if we&#39;re going to add this warning we should make it possible to provide a string as an alternative. It seems like it should be possible to build a ?? operator with a (T?, String) -&gt; _StringInterpolationSomething signature that works only in a string interpolation context.<br></p><p>There are some types that aren&#39;t trivially constructible, or don&#39;t have clear alternatives for the nil case. Other times it might just not make sense to build a new instance simply to turn it into a string. If we&#39;re going to make people provide an alternative for optionals in this otherwise simple-to-use construct, let&#39;s make it simple to do so.<br></p><p>This is undoubtedly a more complex approach that could be considered separately, but I think it would be a valuable part of how developers could transition their code.<br></p><p>Nate<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/092ac514/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  4, 2016 at 10:00:00am</p></header><div class="content"><p>On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; We had this at one point, but we took it out because people would<br>&gt;&gt;&gt; forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is<br>&gt;&gt;&gt; the best answer here.<br>&gt;&gt;<br>&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an<br>&gt;&gt; Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;<br>&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to<br>&gt;&gt; operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these<br>&gt;&gt; partially matching parameter lists: (T?, @autoclosure () throws -&gt;<br>&gt;&gt; T), (T?, @autoclosure () thro<br>&gt;&gt; ws -&gt; T?)<br>&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;                   ^<br>&gt;&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:))<br>&gt;&gt; ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;<br>&gt; I think that if we&#39;re going to add this warning we should make it<br>&gt; possible to provide a string as an alternative. It seems like it<br>&gt; should be possible to build a ?? operator with a (T?, String) -&gt;<br>&gt; _StringInterpolationSomething signature that works only in a string<br>&gt; interpolation context.<br>&gt;<br>&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t<br>&gt; have clear alternatives for the nil case. Other times it might just<br>&gt; not make sense to build a new instance simply to turn it into a<br>&gt; string. If we&#39;re going to make people provide an alternative for<br>&gt; optionals in this otherwise simple-to-use construct, let&#39;s make it<br>&gt; simple to do so.<br>&gt;<br>&gt; This is undoubtedly a more complex approach that could be considered<br>&gt; separately, but I think it would be a valuable part of how developers<br>&gt; could transition their code.<br></p><p>I like this idea. This combined with the warning for naively<br>interpolating an Optional would be a good solution, because now when I<br>see the warning I can trivially solve it with `?? &quot;nil&quot;`.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/3dd329fa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October  4, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;&gt; <br>&gt;&gt; I think that if we&#39;re going to add this warning we should make it possible to provide a string as an alternative. It seems like it should be possible to build a ?? operator with a (T?, String) -&gt; _StringInterpolationSomething signature that works only in a string interpolation context.<br>&gt;&gt; <br>&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have clear alternatives for the nil case. Other times it might just not make sense to build a new instance simply to turn it into a string. If we&#39;re going to make people provide an alternative for optionals in this otherwise simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;&gt; <br>&gt;&gt; This is undoubtedly a more complex approach that could be considered separately, but I think it would be a valuable part of how developers could transition their code.<br></p><p>That’s definitely more complex, and seems like a completely orthogonal feature request.<br></p><p>&gt; I like this idea. This combined with the warning for naively interpolating an Optional would be a good solution, because now when I see the warning I can trivially solve it with `?? &quot;nil”`.<br></p><p>If you can suppress the warning with `as T?` (where T? is the type of the thing being warned on), you wouldn’t need a form that specifically printed “nil”, correct?<br></p><p>Mark<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/64fd9ec8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  4, 2016 at 11:00:00am</p></header><div class="content"><p>On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;<br>&gt;&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people would<br>&gt;&gt;&gt;&gt;&gt; forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is<br>&gt;&gt;&gt;&gt;&gt; the best answer here.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with<br>&gt;&gt;&gt;&gt; an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied<br>&gt;&gt;&gt;&gt; to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these<br>&gt;&gt;&gt;&gt; partially matching parameter lists: (T?, @autoclosure () throws -&gt;<br>&gt;&gt;&gt;&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt;&gt; This leads to writing code like &quot;…<br>&gt;&gt;&gt;&gt; \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I think that if we&#39;re going to add this warning we should make it<br>&gt;&gt;&gt; possible to provide a string as an alternative. It seems like it<br>&gt;&gt;&gt; should be possible to build a ?? operator with a (T?, String) -&gt;<br>&gt;&gt;&gt; _StringInterpolationSomething signature that works only in a string<br>&gt;&gt;&gt; interpolation context.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t<br>&gt;&gt;&gt; have clear alternatives for the nil case. Other times it might just<br>&gt;&gt;&gt; not make sense to build a new instance simply to turn it into a<br>&gt;&gt;&gt; string. If we&#39;re going to make people provide an alternative for<br>&gt;&gt;&gt; optionals in this otherwise simple-to-use construct, let&#39;s make it<br>&gt;&gt;&gt; simple to do so.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is undoubtedly a more complex approach that could be considered<br>&gt;&gt;&gt; separately, but I think it would be a valuable part of how<br>&gt;&gt;&gt; developers could transition their code.<br>&gt;<br>&gt; That’s definitely more complex, and seems like a completely orthogonal<br>&gt; feature request.<br>&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; I like this idea. This combined with the warning for naively<br>&gt;&gt; interpolating an Optional would be a good solution, because now when<br>&gt;&gt; I see the warning I can trivially solve it with `?? &quot;nil”`.<br>&gt;<br>&gt; If you can suppress the warning with `as T?` (where T? is the type of<br>&gt; the thing being warned on), you wouldn’t need a form that specifically<br>&gt; printed “nil”, correct?<br></p><p>How many times do I need to repeat myself? I&#39;m looking for a solution to<br>the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot;<br>wrapper for .some values) is a PITA right now. Getting rid of the<br>warning does not solve this problem. This is why I like Nate Cook&#39;s idea<br>to enable `?? &quot;nil&quot;` in string interpolations, because it *does* solve<br>my problem. And with this tool, now the warning on printing Optionals<br>becomes useful because it tells me where to add `?? &quot;nil&quot;`. Getting rid<br>of the warning without the ability to add `?? &quot;nil&quot;` is not helpful to<br>me, because I don&#39;t want to print &quot;Optional(…)&quot;.<br></p><p>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/ecfc355e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  4, 2016 at 01:00:00pm</p></header><div class="content"><p>On Tue, Oct 4, 2016 at 1:06 PM, Kevin Ballard via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;<br>&gt;<br>&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;<br>&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;<br>&gt;<br>&gt; ...<br>&gt;<br>&gt;<br>&gt; We had this at one point, but we took it out because people would forget<br>&gt; to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer<br>&gt; here.<br>&gt;<br>&gt;<br>&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an<br>&gt; Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;<br>&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to<br>&gt; operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                 ~ ^  ~~~~~<br>&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially<br>&gt; matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?,<br>&gt; @autoclosure () thro<br>&gt; ws -&gt; T?)<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                   ^<br>&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ??<br>&gt; &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;<br>&gt;<br>&gt; I think that if we&#39;re going to add this warning we should make it possible<br>&gt; to provide a string as an alternative. It seems like it should be possible<br>&gt; to build a ?? operator with a (T?, String) -&gt;<br>&gt; _StringInterpolationSomething signature that works only in a string<br>&gt; interpolation context.<br>&gt;<br>&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have<br>&gt; clear alternatives for the nil case. Other times it might just not make<br>&gt; sense to build a new instance simply to turn it into a string. If we&#39;re<br>&gt; going to make people provide an alternative for optionals in this otherwise<br>&gt; simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;<br>&gt; This is undoubtedly a more complex approach that could be considered<br>&gt; separately, but I think it would be a valuable part of how developers could<br>&gt; transition their code.<br>&gt;<br>&gt;<br>&gt; That’s definitely more complex, and seems like a completely orthogonal<br>&gt; feature request.<br>&gt;<br>&gt;<br>&gt; I like this idea. This combined with the warning for naively interpolating<br>&gt; an Optional would be a good solution, because now when I see the warning I<br>&gt; can trivially solve it with `?? &quot;nil”`.<br>&gt;<br>&gt;<br>&gt; If you can suppress the warning with `as T?` (where T? is the type of the<br>&gt; thing being warned on), you wouldn’t need a form that specifically printed<br>&gt; “nil”, correct?<br>&gt;<br>&gt;<br>&gt; How many times do I need to repeat myself? I&#39;m looking for a solution to<br>&gt; the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot; wrapper<br>&gt; for .some values) is a PITA right now. Getting rid of the warning does not<br>&gt; solve this problem. This is why I like Nate Cook&#39;s idea to enable `??<br>&gt; &quot;nil&quot;` in string interpolations, because it *does* solve my problem. And<br>&gt; with this tool, now the warning on printing Optionals becomes useful<br>&gt; because it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning<br>&gt; without the ability to add `?? &quot;nil&quot;` is not helpful to me, because I don&#39;t<br>&gt; want to print &quot;Optional(…)&quot;.<br>&gt;<br></p><p>I&#39;m confused. Why not just add this to your project?<br></p><p>```<br>extension Optional : CustomStringConvertible {<br>    public var description: String {<br>        guard let some = self else { return &quot;nil&quot; }<br>        return String(describing: some)<br>    }<br>}<br>```<br></p><p><br>-Kevin Ballard<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/84044623/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  4, 2016 at 11:00:00am</p></header><div class="content"><p>On Tue, Oct 4, 2016, at 11:34 AM, Xiaodi Wu wrote:<br>&gt; On Tue, Oct 4, 2016 at 1:06 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt; __<br>&gt;&gt;<br>&gt;&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; really is the best answer here.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with<br>&gt;&gt;&gt;&gt;&gt;&gt; an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied<br>&gt;&gt;&gt;&gt;&gt;&gt; to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these<br>&gt;&gt;&gt;&gt;&gt;&gt; partially matching parameter lists: (T?, @autoclosure () throws<br>&gt;&gt;&gt;&gt;&gt;&gt; -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt;&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt;&gt;&gt;&gt; This leads to writing code like &quot;…<br>&gt;&gt;&gt;&gt;&gt;&gt; \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty<br>&gt;&gt;&gt;&gt;&gt;&gt; gross.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I think that if we&#39;re going to add this warning we should make it<br>&gt;&gt;&gt;&gt;&gt; possible to provide a string as an alternative. It seems like it<br>&gt;&gt;&gt;&gt;&gt; should be possible to build a ?? operator with a (T?, String) -&gt;<br>&gt;&gt;&gt;&gt;&gt; _StringInterpolationSomething signature that works only in a<br>&gt;&gt;&gt;&gt;&gt; string interpolation context.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t<br>&gt;&gt;&gt;&gt;&gt; have clear alternatives for the nil case. Other times it might<br>&gt;&gt;&gt;&gt;&gt; just not make sense to build a new instance simply to turn it into<br>&gt;&gt;&gt;&gt;&gt; a string. If we&#39;re going to make people provide an alternative for<br>&gt;&gt;&gt;&gt;&gt; optionals in this otherwise simple-to-use construct, let&#39;s make it<br>&gt;&gt;&gt;&gt;&gt; simple to do so.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is undoubtedly a more complex approach that could be<br>&gt;&gt;&gt;&gt;&gt; considered separately, but I think it would be a valuable part of<br>&gt;&gt;&gt;&gt;&gt; how developers could transition their code.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That’s definitely more complex, and seems like a completely<br>&gt;&gt;&gt; orthogonal feature request.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I like this idea. This combined with the warning for naively<br>&gt;&gt;&gt;&gt; interpolating an Optional would be a good solution, because now<br>&gt;&gt;&gt;&gt; when I see the warning I can trivially solve it with `?? &quot;nil”`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If you can suppress the warning with `as T?` (where T? is the type<br>&gt;&gt;&gt; of the thing being warned on), you wouldn’t need a form that<br>&gt;&gt;&gt; specifically printed “nil”, correct?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; How many times do I need to repeat myself? I&#39;m looking for a solution<br>&gt;&gt; to the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot;<br>&gt;&gt; wrapper for .some values) is a PITA right now. Getting rid of the<br>&gt;&gt; warning does not solve this problem. This is why I like Nate Cook&#39;s<br>&gt;&gt; idea to enable `?? &quot;nil&quot;` in string interpolations, because it *does*<br>&gt;&gt; solve my problem. And with this tool, now the warning on printing<br>&gt;&gt; Optionals becomes useful because it tells me where to add `?? &quot;nil&quot;`.<br>&gt;&gt; Getting rid of the warning without the ability to add `?? &quot;nil&quot;` is<br>&gt;&gt; not helpful to me, because I don&#39;t want to print &quot;Optional(…)&quot;.<br>&gt;<br>&gt; I&#39;m confused. Why not just add this to your project?<br>&gt;<br>&gt; ```<br>&gt; extension Optional : CustomStringConvertible {<br>&gt;     public var description: String {<br>&gt;         guard let some = self else { return &quot;nil&quot; }<br>&gt;         return String(describing: some)<br>&gt;     }<br>&gt; }<br>&gt; ```<br></p><p>Because that&#39;s globally changing the behavior of Optional in a way<br>that&#39;s very surprising.<br></p><p>-Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/170e4a6b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  4, 2016 at 02:00:00pm</p></header><div class="content"><p>On Tue, Oct 4, 2016 at 1:49 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br></p><p>&gt; On Tue, Oct 4, 2016, at 11:34 AM, Xiaodi Wu wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016 at 1:06 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;<br>&gt;<br>&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;<br>&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;<br>&gt;<br>&gt; ...<br>&gt;<br>&gt;<br>&gt; We had this at one point, but we took it out because people would forget<br>&gt; to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer<br>&gt; here.<br>&gt;<br>&gt;<br>&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an<br>&gt; Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;<br>&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to<br>&gt; operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                 ~ ^  ~~~~~<br>&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially<br>&gt; matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?,<br>&gt; @autoclosure () thro<br>&gt; ws -&gt; T?)<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                   ^<br>&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ??<br>&gt; &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;<br>&gt;<br>&gt; I think that if we&#39;re going to add this warning we should make it possible<br>&gt; to provide a string as an alternative. It seems like it should be possible<br>&gt; to build a ?? operator with a (T?, String) -&gt;<br>&gt; _StringInterpolationSomething signature that works only in a string<br>&gt; interpolation context.<br>&gt;<br>&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have<br>&gt; clear alternatives for the nil case. Other times it might just not make<br>&gt; sense to build a new instance simply to turn it into a string. If we&#39;re<br>&gt; going to make people provide an alternative for optionals in this otherwise<br>&gt; simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;<br>&gt; This is undoubtedly a more complex approach that could be considered<br>&gt; separately, but I think it would be a valuable part of how developers could<br>&gt; transition their code.<br>&gt;<br>&gt;<br>&gt; That’s definitely more complex, and seems like a completely orthogonal<br>&gt; feature request.<br>&gt;<br>&gt;<br>&gt; I like this idea. This combined with the warning for naively interpolating<br>&gt; an Optional would be a good solution, because now when I see the warning I<br>&gt; can trivially solve it with `?? &quot;nil”`.<br>&gt;<br>&gt;<br>&gt; If you can suppress the warning with `as T?` (where T? is the type of the<br>&gt; thing being warned on), you wouldn’t need a form that specifically printed<br>&gt; “nil”, correct?<br>&gt;<br>&gt;<br>&gt;<br>&gt; How many times do I need to repeat myself? I&#39;m looking for a solution to<br>&gt; the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot; wrapper<br>&gt; for .some values) is a PITA right now. Getting rid of the warning does not<br>&gt; solve this problem. This is why I like Nate Cook&#39;s idea to enable `??<br>&gt; &quot;nil&quot;` in string interpolations, because it *does* solve my problem. And<br>&gt; with this tool, now the warning on printing Optionals becomes useful<br>&gt; because it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning<br>&gt; without the ability to add `?? &quot;nil&quot;` is not helpful to me, because I don&#39;t<br>&gt; want to print &quot;Optional(…)&quot;.<br>&gt;<br>&gt;<br>&gt; I&#39;m confused. Why not just add this to your project?<br>&gt;<br>&gt; ```<br>&gt; extension Optional : CustomStringConvertible {<br>&gt;     public var description: String {<br>&gt;         guard let some = self else { return &quot;nil&quot; }<br>&gt;         return String(describing: some)<br>&gt;     }<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt;<br>&gt; Because that&#39;s globally changing the behavior of Optional in a way that&#39;s<br>&gt; very surprising.<br>&gt;<br></p><p>Agreed, but I thought that&#39;s what you were asking for above?<br></p><p><br>&gt;<br>&gt;<br>&gt; -Kevin<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/bc65a7a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  4, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, Oct 4, 2016, at 12:01 PM, Xiaodi Wu wrote:<br>&gt; On Tue, Oct 4, 2016 at 1:49 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;&gt; __<br>&gt;&gt; On Tue, Oct 4, 2016, at 11:34 AM, Xiaodi Wu wrote:<br>&gt;&gt;&gt; On Tue, Oct 4, 2016 at 1:06 PM, Kevin Ballard via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; __<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; really is the best answer here.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; partially matching parameter lists: (T?, @autoclosure () throws<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This leads to writing code like &quot;…<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; gross.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think that if we&#39;re going to add this warning we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it possible to provide a string as an alternative. It seems like<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it should be possible to build a ?? operator with a (T?, String)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -&gt; _StringInterpolationSomething signature that works only in a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; string interpolation context.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; There are some types that aren&#39;t trivially constructible, or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; don&#39;t have clear alternatives for the nil case. Other times it<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; might just not make sense to build a new instance simply to turn<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it into a string. If we&#39;re going to make people provide an<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; alternative for optionals in this otherwise simple-to-use<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; construct, let&#39;s make it simple to do so.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is undoubtedly a more complex approach that could be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; considered separately, but I think it would be a valuable part<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; of how developers could transition their code.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; That’s definitely more complex, and seems like a completely<br>&gt;&gt;&gt;&gt;&gt; orthogonal feature request.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. This combined with the warning for naively<br>&gt;&gt;&gt;&gt;&gt;&gt; interpolating an Optional would be a good solution, because now<br>&gt;&gt;&gt;&gt;&gt;&gt; when I see the warning I can trivially solve it with `?? &quot;nil”`.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If you can suppress the warning with `as T?` (where T? is the type<br>&gt;&gt;&gt;&gt;&gt; of the thing being warned on), you wouldn’t need a form that<br>&gt;&gt;&gt;&gt;&gt; specifically printed “nil”, correct?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; How many times do I need to repeat myself? I&#39;m looking for a<br>&gt;&gt;&gt;&gt; solution to the problem where printing Optionals sanely (e.g. no<br>&gt;&gt;&gt;&gt; &quot;Optional(…)&quot; wrapper for .some values) is a PITA right now.<br>&gt;&gt;&gt;&gt; Getting rid of the warning does not solve this problem. This is why<br>&gt;&gt;&gt;&gt; I like Nate Cook&#39;s idea to enable `?? &quot;nil&quot;` in string<br>&gt;&gt;&gt;&gt; interpolations, because it *does* solve my problem. And with this<br>&gt;&gt;&gt;&gt; tool, now the warning on printing Optionals becomes useful because<br>&gt;&gt;&gt;&gt; it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning<br>&gt;&gt;&gt;&gt; without the ability to add `?? &quot;nil&quot;` is not helpful to me, because<br>&gt;&gt;&gt;&gt; I don&#39;t want to print &quot;Optional(…)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;m confused. Why not just add this to your project?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; extension Optional : CustomStringConvertible {<br>&gt;&gt;&gt;     public var description: String {<br>&gt;&gt;&gt;         guard let some = self else { return &quot;nil&quot; }<br>&gt;&gt;&gt;         return String(describing: some)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; Because that&#39;s globally changing the behavior of Optional in a way<br>&gt;&gt; that&#39;s very surprising.<br>&gt;<br>&gt; Agreed, but I thought that&#39;s what you were asking for above?<br></p><p>I wanted to change the behavior of string interpolation specifically,<br>not the behavior of `String(describing: someOptionalValue)`.<br></p><p>-Kevin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/9cad2415/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  4, 2016 at 09:00:00pm</p></header><div class="content"><p>On Tue, Oct 4, 2016 at 7:16 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br></p><p>&gt; On Tue, Oct 4, 2016, at 12:01 PM, Xiaodi Wu wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016 at 1:49 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 11:34 AM, Xiaodi Wu wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016 at 1:06 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;<br>&gt;<br>&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;<br>&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;<br>&gt;<br>&gt; ...<br>&gt;<br>&gt;<br>&gt; We had this at one point, but we took it out because people would forget<br>&gt; to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer<br>&gt; here.<br>&gt;<br>&gt;<br>&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an<br>&gt; Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;<br>&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to<br>&gt; operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                 ~ ^  ~~~~~<br>&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially<br>&gt; matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?,<br>&gt; @autoclosure () thro<br>&gt; ws -&gt; T?)<br>&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;                   ^<br>&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ??<br>&gt; &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;<br>&gt;<br>&gt; I think that if we&#39;re going to add this warning we should make it possible<br>&gt; to provide a string as an alternative. It seems like it should be possible<br>&gt; to build a ?? operator with a (T?, String) -&gt;<br>&gt; _StringInterpolationSomething signature that works only in a string<br>&gt; interpolation context.<br>&gt;<br>&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have<br>&gt; clear alternatives for the nil case. Other times it might just not make<br>&gt; sense to build a new instance simply to turn it into a string. If we&#39;re<br>&gt; going to make people provide an alternative for optionals in this otherwise<br>&gt; simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;<br>&gt; This is undoubtedly a more complex approach that could be considered<br>&gt; separately, but I think it would be a valuable part of how developers could<br>&gt; transition their code.<br>&gt;<br>&gt;<br>&gt; That’s definitely more complex, and seems like a completely orthogonal<br>&gt; feature request.<br>&gt;<br>&gt;<br>&gt; I like this idea. This combined with the warning for naively interpolating<br>&gt; an Optional would be a good solution, because now when I see the warning I<br>&gt; can trivially solve it with `?? &quot;nil”`.<br>&gt;<br>&gt;<br>&gt; If you can suppress the warning with `as T?` (where T? is the type of the<br>&gt; thing being warned on), you wouldn’t need a form that specifically printed<br>&gt; “nil”, correct?<br>&gt;<br>&gt;<br>&gt;<br>&gt; How many times do I need to repeat myself? I&#39;m looking for a solution to<br>&gt; the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot; wrapper<br>&gt; for .some values) is a PITA right now. Getting rid of the warning does not<br>&gt; solve this problem. This is why I like Nate Cook&#39;s idea to enable `??<br>&gt; &quot;nil&quot;` in string interpolations, because it *does* solve my problem. And<br>&gt; with this tool, now the warning on printing Optionals becomes useful<br>&gt; because it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning<br>&gt; without the ability to add `?? &quot;nil&quot;` is not helpful to me, because I don&#39;t<br>&gt; want to print &quot;Optional(…)&quot;.<br>&gt;<br>&gt;<br>&gt; I&#39;m confused. Why not just add this to your project?<br>&gt;<br>&gt; ```<br>&gt; extension Optional : CustomStringConvertible {<br>&gt;     public var description: String {<br>&gt;         guard let some = self else { return &quot;nil&quot; }<br>&gt;         return String(describing: some)<br>&gt;     }<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt;<br>&gt; Because that&#39;s globally changing the behavior of Optional in a way that&#39;s<br>&gt; very surprising.<br>&gt;<br>&gt;<br>&gt; Agreed, but I thought that&#39;s what you were asking for above?<br>&gt;<br>&gt;<br>&gt; I wanted to change the behavior of string interpolation specifically, not<br>&gt; the behavior of `String(describing: someOptionalValue)`.<br>&gt;<br></p><p>It hadn&#39;t occurred to me that this was on the table. It would be very<br>surprising for string interpolation to behave differently from<br>`String.init(describing:)`, would it not?<br></p><p>-Kevin<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/caafb1c5/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October  4, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Oct 4, 2016, at 11:06 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt;&gt;&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that if we&#39;re going to add this warning we should make it possible to provide a string as an alternative. It seems like it should be possible to build a ?? operator with a (T?, String) -&gt; _StringInterpolationSomething signature that works only in a string interpolation context.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have clear alternatives for the nil case. Other times it might just not make sense to build a new instance simply to turn it into a string. If we&#39;re going to make people provide an alternative for optionals in this otherwise simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is undoubtedly a more complex approach that could be considered separately, but I think it would be a valuable part of how developers could transition their code.<br>&gt;&gt; <br>&gt;&gt; That’s definitely more complex, and seems like a completely orthogonal feature request.<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; I like this idea. This combined with the warning for naively interpolating an Optional would be a good solution, because now when I see the warning I can trivially solve it with `?? &quot;nil”`.<br>&gt;&gt; <br>&gt;&gt; If you can suppress the warning with `as T?` (where T? is the type of the thing being warned on), you wouldn’t need a form that specifically printed “nil”, correct?<br>&gt; <br>&gt; How many times do I need to repeat myself? I&#39;m looking for a solution to the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot; wrapper for .some values) is a PITA right now. Getting rid of the warning does not solve this problem. This is why I like Nate Cook&#39;s idea to enable `?? &quot;nil&quot;` in string interpolations, because it does solve my problem. And with this tool, now the warning on printing Optionals becomes useful because it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning without the ability to add `?? &quot;nil&quot;` is not helpful to me, because I don&#39;t want to print &quot;Optional(…)&quot;.<br></p><p>A string interpolation segment can accept any type, so &#39;x ?? &quot;nil&quot;&#39; arguably ought to be able to work by joining both sides of the ?? to &#39;Any&#39;, as if you&#39;d written `(x as Any?) ?? (&quot;nil&quot; as Any)`. IIRC we have some artificial limitations on deducing `Any`, since it can obviously be problematic to have things like array literals automatically fall into [Any] because you accidentally mixed types, but string interpolations are loosely-typed by design. I wonder if there&#39;s anything we could do to admit it in this case.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/aa1809ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>October  4, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 4, 2016, at 11:47 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Oct 4, 2016, at 11:06 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, Oct 4, 2016, at 10:44 AM, Mark Lacey wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 4, 2016, at 10:29 AM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt;&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt;&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt;&gt;&gt;&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think that if we&#39;re going to add this warning we should make it possible to provide a string as an alternative. It seems like it should be possible to build a ?? operator with a (T?, String) -&gt; _StringInterpolationSomething signature that works only in a string interpolation context.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have clear alternatives for the nil case. Other times it might just not make sense to build a new instance simply to turn it into a string. If we&#39;re going to make people provide an alternative for optionals in this otherwise simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This is undoubtedly a more complex approach that could be considered separately, but I think it would be a valuable part of how developers could transition their code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s definitely more complex, and seems like a completely orthogonal feature request.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like this idea. This combined with the warning for naively interpolating an Optional would be a good solution, because now when I see the warning I can trivially solve it with `?? &quot;nil”`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If you can suppress the warning with `as T?` (where T? is the type of the thing being warned on), you wouldn’t need a form that specifically printed “nil”, correct?<br>&gt;&gt; <br>&gt;&gt; How many times do I need to repeat myself? I&#39;m looking for a solution to the problem where printing Optionals sanely (e.g. no &quot;Optional(…)&quot; wrapper for .some values) is a PITA right now. Getting rid of the warning does not solve this problem. This is why I like Nate Cook&#39;s idea to enable `?? &quot;nil&quot;` in string interpolations, because it does solve my problem. And with this tool, now the warning on printing Optionals becomes useful because it tells me where to add `?? &quot;nil&quot;`. Getting rid of the warning without the ability to add `?? &quot;nil&quot;` is not helpful to me, because I don&#39;t want to print &quot;Optional(…)&quot;.<br>&gt; <br>&gt; A string interpolation segment can accept any type, so &#39;x ?? &quot;nil&quot;&#39; arguably ought to be able to work by joining both sides of the ?? to &#39;Any&#39;, as if you&#39;d written `(x as Any?) ?? (&quot;nil&quot; as Any)`. IIRC we have some artificial limitations on deducing `Any`, since it can obviously be problematic to have things like array literals automatically fall into [Any] because you accidentally mixed types, but string interpolations are loosely-typed by design. I wonder if there&#39;s anything we could do to admit it in this case.<br></p><p>We generally don&#39;t consider existential types as a meet of two non-existential types because (1) finding the most-precise common existential type involves enumerating all the known conformances of each type, which is problematic for a number of reasons, and (2) it can be done for two completely arbitrary types because of Any, but we don&#39;t want things like (flag ? &quot;foo&quot; : 123) to type-check without some sort of type annotation.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/16f1346a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  4, 2016 at 02:00:00pm</p></header><div class="content"><p>It&#39;s an interesting idea that needs to be written down in a separate proposal and is tangentially related to the problem we are trying to solve here and now.  It is trivial to define this operator and was suggested by Charlie as new API to be added to Optional the last time improving Optionals in interpolation segments was discussed.  For now we&#39;re trying to keep it light and bugfix-esque.<br></p><p>~Robert Widmann<br></p><p>2016/10/04 13:29、Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; On Tue, Oct 4, 2016, at 10:28 AM, Nate Cook wrote:<br>&gt;&gt;&gt; On Oct 3, 2016, at 5:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Oct 3, 2016, at 03:18 PM, Jordan Rose wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We had this at one point, but we took it out because people would forget to test the nil case. I think `?? &quot;&quot;` or `?? nil` really is the best answer here.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But you can&#39;t write that, unless you&#39;re dealing specifically with an Optional&lt;String&gt;.  If you try you&#39;ll get an error:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; unnamed.swift:2:19: error: binary operator &#39;??&#39; cannot be applied to operands of type &#39;Int?&#39; and &#39;String&#39;<br>&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;                 ~ ^  ~~~~~<br>&gt;&gt;&gt; unnamed.swift:2:19: note: overloads for &#39;??&#39; exist with these partially matching parameter lists: (T?, @autoclosure () throws -&gt; T), (T?, @autoclosure () thro<br>&gt;&gt;&gt; ws -&gt; T?)<br>&gt;&gt;&gt;     print(&quot;x: \(x ?? &quot;nil&quot;)&quot;)<br>&gt;&gt;&gt;                   ^<br>&gt;&gt;&gt; This leads to writing code like &quot;… \(x.map(String.init(describing:)) ?? &quot;nil&quot;)&quot; which is pretty gross.<br>&gt;&gt; <br>&gt;&gt; I think that if we&#39;re going to add this warning we should make it possible to provide a string as an alternative. It seems like it should be possible to build a ?? operator with a (T?, String) -&gt; _StringInterpolationSomething signature that works only in a string interpolation context.<br>&gt;&gt; <br>&gt;&gt; There are some types that aren&#39;t trivially constructible, or don&#39;t have clear alternatives for the nil case. Other times it might just not make sense to build a new instance simply to turn it into a string. If we&#39;re going to make people provide an alternative for optionals in this otherwise simple-to-use construct, let&#39;s make it simple to do so.<br>&gt;&gt; <br>&gt;&gt; This is undoubtedly a more complex approach that could be considered separately, but I think it would be a valuable part of how developers could transition their code.<br>&gt; <br>&gt; I like this idea. This combined with the warning for naively interpolating an Optional would be a good solution, because now when I see the warning I can trivially solve it with `?? &quot;nil&quot;`.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/0d965694/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>October  4, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 3 Oct 2016, at 22:41, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution wrote:<br>&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt; <br>&gt; <br>&gt; Is there any way we could instead allow Optionals but just print them the way we print ImplicitlyUnwrappedOptionals? That&#39;s almost always how I want my Optionals to work when interpolating. To be specific, this means for .some(x) we just print x, and for .none we print &quot;nil”.<br></p><p>On the other hand, when I interpolate an optional, I want it to be obvious that it is an Optional. If I didn’t want Optional(foo) in the string, I would unwrap it first. <br></p><p>I also disagree with the proposal that the behaviour is surprising. What else would you expect? <br></p><p>Having said that, I have no objection to the proposed warning.<br></p><p><br>&gt; <br>&gt; -Kevin<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>October  4, 2016 at 08:00:00am</p></header><div class="content"><p>I would say it&#39;s surprising if you don&#39;t expect the value to be optional. Swift is such that you can write very long programs without knowing yourself the static type of every variable. It just takes one Optional property of a non-optional struct passed into a string interpolation segment to cause this behavior, as Keith showed earlier with url.absoluteString. This is especially bad because APIs are being notated with optionality, like in the Swift 2.2 -&gt; 2.3 shift, that were previously implicitly unwrapped.<br></p><p>I think a warning is the best way to go here. A developer probably didn&#39;t intend to interpolate an optional (I&#39;ve never personally wanted the behavior) and this lets them know.<br></p><p>- Harlan<br></p><p>&gt; On Oct 4, 2016, at 8:31 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 3 Oct 2016, at 22:41, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Oct 3, 2016, at 10:52 AM, Harlan Haskins via swift-evolution wrote:<br>&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Is there any way we could instead allow Optionals but just print them the way we print ImplicitlyUnwrappedOptionals? That&#39;s almost always how I want my Optionals to work when interpolating. To be specific, this means for .some(x) we just print x, and for .none we print &quot;nil”.<br>&gt; <br>&gt; On the other hand, when I interpolate an optional, I want it to be obvious that it is an Optional. If I didn’t want Optional(foo) in the string, I would unwrap it first. <br>&gt; <br>&gt; I also disagree with the proposal that the behaviour is surprising. What else would you expect? <br>&gt; <br>&gt; Having said that, I have no objection to the proposed warning.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; -Kevin<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>October  4, 2016 at 01:00:00am</p></header><div class="content"><p>I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt;<br></p><p>Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br></p><p>&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey all,<br>&gt; <br>&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt; <br>&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt; <br>&gt; I&#39;ve posted the current draft below.<br>&gt; <br>&gt; Thanks,<br>&gt; Harlan Haskins<br>&gt; <br>&gt; Disallow Optionals in String Interpolation Segments<br>&gt; <br>&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt; Review Manager: TBD<br>&gt; Status: Awaiting revie<br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt; <br>&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt; <br>&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt; <br>&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt; <br>&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt; <br>&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt; <br>&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt; <br>&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt; <br>&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt; <br>&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt; <br>&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt; <br>&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/d03a19fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Under our proposal you can return to the old semantics of printing nil with an explicit optional cast - one which we will offer to insert for you.<br></p><p>Otherwise if you actually intend for a default value that value would have type Int, not String.  Under the current regime if you want to print something custom the for nil the way you&#39;ve got it now you&#39;re going to have to go through the reflecting initializer anyway so I don&#39;t see a problem here.<br></p><p>~Robert Widmann<br></p><p>2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882<br>&gt; <br>&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey all,<br>&gt;&gt; <br>&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt; <br>&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt; <br>&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Harlan Haskins<br>&gt;&gt; <br>&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt; Proposal: SE-NNNN<br>&gt;&gt; Authors: Harlan Haskins, Julio Carrettoni, Robert Widmann<br>&gt;&gt; Review Manager: TBD<br>&gt;&gt; Status: Awaiting revie<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt; <br>&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; <br>&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt; <br>&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt; <br>&gt;&gt; Proposed solution<br>&gt;&gt; <br>&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt; <br>&gt;&gt; Detailed design<br>&gt;&gt; <br>&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; <br>&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt; <br>&gt;&gt; Alternatives considered<br>&gt;&gt; <br>&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140).<br>&gt;&gt; <br>&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt; <br>&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/4ee918df/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  3, 2016 at 05:00:00pm</p></header><div class="content"><p>I assume you meant that as a reply to me?<br></p><p>The problem is twofold:<br></p><p>1. Printing the value without adornment, or &quot;nil&quot; for nil, is a very<br>   common thing to want to do and we shouldn&#39;t have to write code like<br>   `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to accomplish it.<br>2. Due to the changes made to IUOs, if you use a IUO in a string<br>   interpolation, previously it would print as desired (either the value<br>   or the string `&quot;nil&quot;`) but now it prints as Optional (e.g. with the<br>   `&quot;Optional(…)&quot;` wrapper).<br></p><p>-Kevin<br></p><p>On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-evolution wrote:<br>&gt; Under our proposal you can return to the old semantics of printing<br>&gt; nil with an explicit optional cast - one which we will offer to<br>&gt; insert for you.<br>&gt;<br>&gt; Otherwise if you actually intend for a default value that value would<br>&gt; have type Int, not String.  Under the current regime if you want to<br>&gt; print something custom the for nil the way you&#39;ve got it now you&#39;re<br>&gt; going to have to go through the reflecting initializer anyway so I<br>&gt; don&#39;t see a problem here.<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-<br>&gt; evolution at swift.org&gt; のメッセージ:<br>&gt;&gt; I&#39;ve already suggested this quite some time back and was told that<br>&gt;&gt; this doesn&#39;t need to go through evolution. It&#39;s filed here:<br>&gt;&gt; https://bugs.swift.org/browse/SR-1882<br>&gt;&gt;<br>&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m<br>&gt;&gt; unlikely to have the time anytime soon...<br>&gt;&gt;<br>&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a<br>&gt;&gt;&gt; proposal to mitigate something that&#39;s burned us all since Swift 1.<br>&gt;&gt;&gt; We&#39;d love some feedback!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It&#39;s available here:<br>&gt;&gt;&gt; https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br></p><p><br>&gt;&gt;&gt;  * Proposal: SE-NNNN[1]<br>&gt;&gt;&gt;  * Authors: Harlan Haskins[2], Julio Carrettoni[3], Robert<br>&gt;&gt;&gt;    Widmann[4]<br>&gt;&gt;&gt;  * Review Manager: TBD<br>&gt;&gt;&gt;  * Status: Awaiting revie<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; Swift developers frequently use string interpolation as a<br>&gt;&gt;&gt; convenient, concise syntax for interweaving variable values with<br>&gt;&gt;&gt; strings. The interpolation machinery, however, has surprising<br>&gt;&gt;&gt; behavior in one specific case: Optional&lt;T&gt;. If a user puts an<br>&gt;&gt;&gt; optional value into a string interpolation segment, it will insert<br>&gt;&gt;&gt; either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither<br>&gt;&gt;&gt; of these is particularly desirable, so we propose a warning and fix-<br>&gt;&gt;&gt; it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal[5]<br>&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt; *The Swift Programming Language* defines string interpolation<br>&gt;&gt;&gt; segments as &quot;a way to construct a new String value from a mix of<br>&gt;&gt;&gt; constants, variables, literals, and expressions&quot;. There is one type<br>&gt;&gt;&gt; that runs counter to this definition: Optional. The .none case in<br>&gt;&gt;&gt; particular is used to indicate the absence of a value. Moreover, its<br>&gt;&gt;&gt; inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in<br>&gt;&gt;&gt; output that is often fed to UI elements. Even barring that,<br>&gt;&gt;&gt; interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a<br>&gt;&gt;&gt; result that is not useful even in logged output.<br>&gt;&gt;&gt; Given that the Optional type is never fit for display to the end<br>&gt;&gt;&gt; user, and can often be a surprising find in the console, we propose<br>&gt;&gt;&gt; that requesting an Optional&#39;s debug description be an explicit act.<br>&gt;&gt;&gt; This proposal now requires a warning when using an expression of<br>&gt;&gt;&gt; Optional type within a string interpolation segment.<br>&gt;&gt;&gt; Proposed solution<br>&gt;&gt;&gt; The user will be warned after attempting to use an expression with<br>&gt;&gt;&gt; type Optional&lt;T&gt; in a string interpolation segment. They will then<br>&gt;&gt;&gt; be offered a fixit suggesting they explicitly request the<br>&gt;&gt;&gt; debugDescription of the Optional value instead.<br>&gt;&gt;&gt; Detailed design<br>&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-<br>&gt;&gt;&gt; formedness of expressions in interpolation segments. These are then<br>&gt;&gt;&gt; fed directly to String.init(stringInterpolationSegment:) and are run<br>&gt;&gt;&gt; through the runtime reflection system to generate a description.<br>&gt;&gt;&gt; Semantic analysis will be tweaked to inspect the result of solving<br>&gt;&gt;&gt; an interpolation segment for an Optional and will offer a fixit in<br>&gt;&gt;&gt; that case.<br>&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt; As this is a warning, code written before this proposal will<br>&gt;&gt;&gt; continue to compile and run with the same semantics as before.<br>&gt;&gt;&gt; Authors of code that makes use of this unsafe pattern will be<br>&gt;&gt;&gt; offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt; Alternatives considered<br></p><p><br>&gt;&gt;&gt;  * A fixit that suggests a default value be inserted would be<br>&gt;&gt;&gt;    entirely appropriate (following the style of the fixit introduced<br>&gt;&gt;&gt;    in SE-0140[6]).<br></p><p><br>&gt;&gt;&gt;  * Forbidding this pattern by hard error would make this proposal a<br>&gt;&gt;&gt;    breaking change that is out of scope for this stage of Swift&#39;s<br>&gt;&gt;&gt;    development.<br></p><p><br>&gt;&gt;&gt;  * A fixit that introduces a force-unwrapping would technically work<br>&gt;&gt;&gt;    as well, however it would be fixing a dangerous operation with<br>&gt;&gt;&gt;    yet another dangerous operation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>Links:<br></p><p>  1. https://gist.github.com/harlanhaskins/NNNN-filename.md<br>  2. https://github.com/harlanhaskins<br>  3. https://github.com/Julioacarrettoni<br>  4. https://github.com/CodaFi<br>  5. https://lists.swift.org/pipermail/swift-evolution/<br>  6. https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/bc596e9b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 8:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I assume you meant that as a reply to me?<br>&gt; <br>&gt; The problem is twofold:<br>&gt; <br>&gt; 1. Printing the value without adornment, or &quot;nil&quot; for nil, is a very common thing to want to do and we shouldn&#39;t have to write code like `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to accomplish it.<br></p><p>My point is before you were unable to do this without the ‘uglyness’ presented here anyway [you would have gotten “Optional(“value”)”], so I don’t see the point of raising this concern.  If you want the old behavior, just ask for it with an explicit cast or `.debugDescription`.<br></p><p>&gt; 2. Due to the changes made to IUOs, if you use a IUO in a string interpolation, previously it would print as desired (either the value or the string `&quot;nil&quot;`) but now it prints as Optional (e.g. with the `&quot;Optional(…)&quot;` wrapper).<br></p><p>IUOs are not in the scope for this proposal, but I get your point.<br></p><p>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-evolution wrote:<br>&gt;&gt; Under our proposal you can return to the old semantics of printing nil with an explicit optional cast - one which we will offer to insert for you.<br>&gt;&gt; <br>&gt;&gt; Otherwise if you actually intend for a default value that value would have type Int, not String.  Under the current regime if you want to print something custom the for nil the way you&#39;ve got it now you&#39;re going to have to go through the reflecting initializer anyway so I don&#39;t see a problem here.<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt;&gt; I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/7d5e909d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>October  3, 2016 at 06:00:00pm</p></header><div class="content"><p>On Mon, Oct 3, 2016, at 06:49 PM, Robert Widmann wrote:<br>&gt;<br>&gt;&gt; On Oct 3, 2016, at 8:49 PM, Kevin Ballard via swift-evolution &lt;swift-<br>&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I assume you meant that as a reply to me?<br>&gt;&gt;<br>&gt;&gt; The problem is twofold:<br>&gt;&gt;<br>&gt;&gt; 1. Printing the value without adornment, or &quot;nil&quot; for nil, is a<br>&gt;&gt;    very common thing to want to do and we shouldn&#39;t have to write<br>&gt;&gt;    code like `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to<br>&gt;&gt;    accomplish it.<br>&gt;<br>&gt; My point is before you were unable to do this without the ‘uglyness’<br>&gt; presented here anyway [you would have gotten “Optional(“value”)”], so<br>&gt; I don’t see the point of raising this concern.  If you want the old<br>&gt; behavior, just ask for it with an explicit cast or<br>&gt; `.debugDescription`.<br></p><p>This proposal was done because the current behavior of Optionals in<br>string interpolation isn&#39;t very useful for most people. You&#39;re proposing<br>banning it outright (with an escape hatch to recover the current<br>behavior). I&#39;m saying that, since it isn&#39;t very useful for most people,<br>instead of banning it we could make it useful.<br></p><p>-Kevin<br></p><p>&gt;&gt; 2. Due to the changes made to IUOs, if you use a IUO in a string<br>&gt;&gt;    interpolation, previously it would print as desired (either the<br>&gt;&gt;    value or the string `&quot;nil&quot;`) but now it prints as Optional (e.g.<br>&gt;&gt;    with the `&quot;Optional(…)&quot;` wrapper).<br>&gt;<br>&gt; IUOs are not in the scope for this proposal, but I get your point.<br>&gt;<br>&gt;&gt;<br>&gt;&gt; -Kevin<br>&gt;&gt;<br>&gt;&gt; On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-<br>&gt;&gt; evolution wrote:<br>&gt;&gt;&gt; Under our proposal you can return to the old semantics of printing<br>&gt;&gt;&gt; nil with an explicit optional cast - one which we will offer to<br>&gt;&gt;&gt; insert for you.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Otherwise if you actually intend for a default value that value<br>&gt;&gt;&gt; would have type Int, not String.  Under the current regime if you<br>&gt;&gt;&gt; want to print something custom the for nil the way you&#39;ve got it now<br>&gt;&gt;&gt; you&#39;re going to have to go through the reflecting initializer anyway<br>&gt;&gt;&gt; so I don&#39;t see a problem here.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-<br>&gt;&gt;&gt; evolution at swift.org&gt; のメッセージ:<br>&gt;&gt;&gt;&gt; I&#39;ve already suggested this quite some time back and was told that<br>&gt;&gt;&gt;&gt; this doesn&#39;t need to go through evolution. It&#39;s filed here:<br>&gt;&gt;&gt;&gt; https://bugs.swift.org/browse/SR-1882<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m<br>&gt;&gt;&gt;&gt; unlikely to have the time anytime soon...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-<br>&gt;&gt;&gt;&gt;&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt; proposal to mitigate something that&#39;s burned us all since Swift 1.<br>&gt;&gt;&gt;&gt;&gt; We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It&#39;s available here:<br>&gt;&gt;&gt;&gt;&gt; https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br></p><p><br>&gt;&gt;&gt;&gt;&gt;  * Proposal: SE-NNNN[1]<br>&gt;&gt;&gt;&gt;&gt;  * Authors: Harlan Haskins[2], Julio Carrettoni[3], Robert<br>&gt;&gt;&gt;&gt;&gt;    Widmann[4]<br>&gt;&gt;&gt;&gt;&gt;  * Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;  * Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a<br>&gt;&gt;&gt;&gt;&gt; convenient, concise syntax for interweaving variable values with<br>&gt;&gt;&gt;&gt;&gt; strings. The interpolation machinery, however, has surprising<br>&gt;&gt;&gt;&gt;&gt; behavior in one specific case: Optional&lt;T&gt;. If a user puts an<br>&gt;&gt;&gt;&gt;&gt; optional value into a string interpolation segment, it will insert<br>&gt;&gt;&gt;&gt;&gt; either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string.<br>&gt;&gt;&gt;&gt;&gt; Neither of these is particularly desirable, so we propose a<br>&gt;&gt;&gt;&gt;&gt; warning and fix-it to surface solutions to these potential<br>&gt;&gt;&gt;&gt;&gt; mistakes.<br>&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that<br>&gt;&gt;&gt;&gt;&gt; proposal[5]<br>&gt;&gt;&gt;&gt;&gt; Motivation<br>&gt;&gt;&gt;&gt;&gt; *The Swift Programming Language* defines string interpolation<br>&gt;&gt;&gt;&gt;&gt; segments as &quot;a way to construct a new String value from a mix of<br>&gt;&gt;&gt;&gt;&gt; constants, variables, literals, and expressions&quot;. There is one<br>&gt;&gt;&gt;&gt;&gt; type that runs counter to this definition: Optional. The .none<br>&gt;&gt;&gt;&gt;&gt; case in particular is used to indicate the absence of a value.<br>&gt;&gt;&gt;&gt;&gt; Moreover, its inclusion in interpolation segments leads to the<br>&gt;&gt;&gt;&gt;&gt; dreaded &quot;nil&quot; in output that is often fed to UI elements. Even<br>&gt;&gt;&gt;&gt;&gt; barring that, interpolating a non-nil optional value yields<br>&gt;&gt;&gt;&gt;&gt; &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged<br>&gt;&gt;&gt;&gt;&gt; output.<br>&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end<br>&gt;&gt;&gt;&gt;&gt; user, and can often be a surprising find in the console, we<br>&gt;&gt;&gt;&gt;&gt; propose that requesting an Optional&#39;s debug description be an<br>&gt;&gt;&gt;&gt;&gt; explicit act. This proposal now requires a warning when using an<br>&gt;&gt;&gt;&gt;&gt; expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt; Proposed solution<br>&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with<br>&gt;&gt;&gt;&gt;&gt; type Optional&lt;T&gt; in a string interpolation segment. They will then<br>&gt;&gt;&gt;&gt;&gt; be offered a fixit suggesting they explicitly request the<br>&gt;&gt;&gt;&gt;&gt; debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt; Detailed design<br>&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-<br>&gt;&gt;&gt;&gt;&gt; formedness of expressions in interpolation segments. These are<br>&gt;&gt;&gt;&gt;&gt; then fed directly to String.init(stringInterpolationSegment:) and<br>&gt;&gt;&gt;&gt;&gt; are run through the runtime reflection system to generate a<br>&gt;&gt;&gt;&gt;&gt; description. Semantic analysis will be tweaked to inspect the<br>&gt;&gt;&gt;&gt;&gt; result of solving an interpolation segment for an Optional and<br>&gt;&gt;&gt;&gt;&gt; will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt; Impact on existing code<br>&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will<br>&gt;&gt;&gt;&gt;&gt; continue to compile and run with the same semantics as before.<br>&gt;&gt;&gt;&gt;&gt; Authors of code that makes use of this unsafe pattern will be<br>&gt;&gt;&gt;&gt;&gt; offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt; Alternatives considered<br></p><p><br>&gt;&gt;&gt;&gt;&gt;  * A fixit that suggests a default value be inserted would be<br>&gt;&gt;&gt;&gt;&gt;    entirely appropriate (following the style of the fixit<br>&gt;&gt;&gt;&gt;&gt;    introduced in SE-0140[6]).<br></p><p><br>&gt;&gt;&gt;&gt;&gt;  * Forbidding this pattern by hard error would make this proposal<br>&gt;&gt;&gt;&gt;&gt;    a breaking change that is out of scope for this stage of<br>&gt;&gt;&gt;&gt;&gt;    Swift&#39;s development.<br></p><p><br>&gt;&gt;&gt;&gt;&gt;  * A fixit that introduces a force-unwrapping would technically<br>&gt;&gt;&gt;&gt;&gt;    work as well, however it would be fixing a dangerous operation<br>&gt;&gt;&gt;&gt;&gt;    with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; _________________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>Links:<br></p><p>  1. https://gist.github.com/harlanhaskins/NNNN-filename.md<br>  2. https://github.com/harlanhaskins<br>  3. https://github.com/Julioacarrettoni<br>  4. https://github.com/CodaFi<br>  5. https://lists.swift.org/pipermail/swift-evolution/<br>  6. https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/c631626b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 9:54 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 06:49 PM, Robert Widmann wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 8:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I assume you meant that as a reply to me?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is twofold:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Printing the value without adornment, or &quot;nil&quot; for nil, is a very common thing to want to do and we shouldn&#39;t have to write code like `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to accomplish it.<br>&gt;&gt; <br>&gt;&gt; My point is before you were unable to do this without the ‘uglyness’ presented here anyway [you would have gotten “Optional(“value”)”], so I don’t see the point of raising this concern.  If you want the old behavior, just ask for it with an explicit cast or `.debugDescription`.<br>&gt; <br>&gt; This proposal was done because the current behavior of Optionals in string interpolation isn&#39;t very useful for most people. You&#39;re proposing banning it outright (with an escape hatch to recover the current behavior). I&#39;m saying that, since it isn&#39;t very useful for most people, instead of banning it we could make it useful.<br></p><p>Then Optional needs to have a stable and useful `.description`, but I don’t think it’s appropriate to have users rely on the output of `debugDescription` much less use it in interpolated strings as it is now.  That’s why we wrote this proposal.  We are changing no behavior, your programs will still compile under this proposal, they will still execute with the same semantics as before, you will just get a warning that you cannot and should not depend on the debug representation of a type that specifically has a case for “no value here”.  If you want to silence that warning you’re gonna have to jump through some hoops - hoops that we’ll show you with fixits.<br></p><p>&gt; -Kevin<br>&gt; <br>&gt;&gt;&gt; 2. Due to the changes made to IUOs, if you use a IUO in a string interpolation, previously it would print as desired (either the value or the string `&quot;nil&quot;`) but now it prints as Optional (e.g. with the `&quot;Optional(…)&quot;` wrapper).<br>&gt;&gt; <br>&gt;&gt; IUOs are not in the scope for this proposal, but I get your point.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; Under our proposal you can return to the old semantics of printing nil with an explicit optional cast - one which we will offer to insert for you.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Otherwise if you actually intend for a default value that value would have type Int, not String.  Under the current regime if you want to print something custom the for nil the way you&#39;ve got it now you&#39;re going to have to go through the reflecting initializer anyway so I don&#39;t see a problem here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt;&gt;&gt;&gt; I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/d9c1fc37/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>October  4, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Oct 4, 2016, at 3:57 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 3, 2016, at 9:54 PM, Kevin Ballard &lt;kevin at sb.org &lt;mailto:kevin at sb.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Mon, Oct 3, 2016, at 06:49 PM, Robert Widmann wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 8:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I assume you meant that as a reply to me?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The problem is twofold:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. Printing the value without adornment, or &quot;nil&quot; for nil, is a very common thing to want to do and we shouldn&#39;t have to write code like `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to accomplish it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My point is before you were unable to do this without the ‘uglyness’ presented here anyway [you would have gotten “Optional(“value”)”], so I don’t see the point of raising this concern.  If you want the old behavior, just ask for it with an explicit cast or `.debugDescription`.<br>&gt;&gt; <br>&gt;&gt; This proposal was done because the current behavior of Optionals in string interpolation isn&#39;t very useful for most people. You&#39;re proposing banning it outright (with an escape hatch to recover the current behavior). I&#39;m saying that, since it isn&#39;t very useful for most people, instead of banning it we could make it useful.<br>&gt; <br>&gt; Then Optional needs to have a stable and useful `.description`, but I don’t think it’s appropriate to have users rely on the output of `debugDescription` much less use it in interpolated strings as it is now.  That’s why we wrote this proposal.  We are changing no behavior, your programs will still compile under this proposal, they will still execute with the same semantics as before, you will just get a warning that you cannot and should not depend on the debug representation of a type that specifically has a case for “no value here”.  If you want to silence that warning you’re gonna have to jump through some hoops - hoops that we’ll show you with fixits.<br></p><p>There were these concerns:<br></p><p>- the documentation explicitly discourages people to call description or debugDescription from within the code. So my original suggestion to make the fixit simply call debugDescription was met with resistance since this is discouraged. I am not sure about the reasoning for this though.<br></p><p>- some people did find the Optional(value) wrap useful and changing it could be viewed on as breaking change, though cases where the user may be testing a string for Optional seems rare at best. But again, there were voices that were loudly against.<br></p><p>- suggestion by Chris Lattner was to silence the warning either by:<br>	- wrapping the expression in extra parentheses<br>	- adding ?? and default value<br></p><p>Personally, I do not like this suggestion since it makes the code readability low due to the fact that the expression is within a string and thus formatting options that would help you improve readability are limited. <br></p><p>I&#39;ve suggested adding two methods to Optional&lt;T&gt;:<br></p><p>- func descriptionWithDefaultValue(_ value: String = &quot;nil&quot;) which while more descriptive isn&#39;t discouraged from being called directly and allows you to specify nil value (I have use cases for empty string, etc.)<br></p><p>- var detailedDescription: String - simply returns current implementation of debugDescription<br></p><p><br>My extension of Optional&lt;T&gt;:<br></p><p>https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift &lt;https://github.com/charlieMonroe/XUCore/blob/master/XUCore/additions/OptionalAdditions.swift&gt;<br></p><p>Original proposal:<br></p><p>https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385 &lt;https://gist.github.com/charlieMonroe/82e1519dd2b57029f69bc7abe99d7385&gt;<br></p><p><br>&gt; <br>&gt;&gt; -Kevin<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. Due to the changes made to IUOs, if you use a IUO in a string interpolation, previously it would print as desired (either the value or the string `&quot;nil&quot;`) but now it prints as Optional (e.g. with the `&quot;Optional(…)&quot;` wrapper).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IUOs are not in the scope for this proposal, but I get your point.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Kevin<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; Under our proposal you can return to the old semantics of printing nil with an explicit optional cast - one which we will offer to insert for you.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Otherwise if you actually intend for a default value that value would have type Int, not String.  Under the current regime if you want to print something custom the for nil the way you&#39;ve got it now you&#39;re going to have to go through the reflecting initializer anyway so I don&#39;t see a problem here.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161004/e4e15ace/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal draft] Disallow Optionals in String Interpolation Segments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Forgive me for mixing terminology from before stating “If you want the old behavior” and the like.  What I meant is “If you want to silence the warning”.  I should point out that it is just that: a warning.  We specifically mention that we didn’t spring for a hard error because that would make this a source-breaking proposal and we realize that it is useful to be able to quickly print an optional to test something.  But at the end of the day you should think about the representation of data flowing through your program and be explicit about whether you want the debug interpretation of an optional value or whether you intended - as we believe is true of the majority of cases - to provide a default non-optional value.<br></p><p>&gt; On Oct 3, 2016, at 9:54 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Mon, Oct 3, 2016, at 06:49 PM, Robert Widmann wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 8:49 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I assume you meant that as a reply to me?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The problem is twofold:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Printing the value without adornment, or &quot;nil&quot; for nil, is a very common thing to want to do and we shouldn&#39;t have to write code like `\(x.map(String.init(describing:)) ?? &quot;nil&quot;)` to accomplish it.<br>&gt;&gt; <br>&gt;&gt; My point is before you were unable to do this without the ‘uglyness’ presented here anyway [you would have gotten “Optional(“value”)”], so I don’t see the point of raising this concern.  If you want the old behavior, just ask for it with an explicit cast or `.debugDescription`.<br>&gt; <br>&gt; This proposal was done because the current behavior of Optionals in string interpolation isn&#39;t very useful for most people. You&#39;re proposing banning it outright (with an escape hatch to recover the current behavior). I&#39;m saying that, since it isn&#39;t very useful for most people, instead of banning it we could make it useful.<br>&gt; <br>&gt; -Kevin<br>&gt; <br>&gt;&gt;&gt; 2. Due to the changes made to IUOs, if you use a IUO in a string interpolation, previously it would print as desired (either the value or the string `&quot;nil&quot;`) but now it prints as Optional (e.g. with the `&quot;Optional(…)&quot;` wrapper).<br>&gt;&gt; <br>&gt;&gt; IUOs are not in the scope for this proposal, but I get your point.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Kevin<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Oct 3, 2016, at 05:43 PM, Robert Widmann via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; Under our proposal you can return to the old semantics of printing nil with an explicit optional cast - one which we will offer to insert for you.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Otherwise if you actually intend for a default value that value would have type Int, not String.  Under the current regime if you want to print something custom the for nil the way you&#39;ve got it now you&#39;re going to have to go through the reflecting initializer anyway so I don&#39;t see a problem here.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016/10/03 19:25、Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; のメッセージ:<br>&gt;&gt;&gt;&gt;&gt; I&#39;ve already suggested this quite some time back and was told that this doesn&#39;t need to go through evolution. It&#39;s filed here: https://bugs.swift.org/browse/SR-1882 &lt;https://bugs.swift.org/browse/SR-1882&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Unfortunately, I haven&#39;t had time to look into it myself and I&#39;m unlikely to have the time anytime soon...<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 7:52 PM, Harlan Haskins via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Hey all,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Julio Carrettoni, Robert Widmann, and I have been working on a proposal to mitigate something that&#39;s burned us all since Swift 1. We&#39;d love some feedback!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s available here: https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve posted the current draft below.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Disallow Optionals in String Interpolation Segments<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Proposal: SE-NNNN &lt;https://gist.github.com/harlanhaskins/NNNN-filename.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Authors: Harlan Haskins &lt;https://github.com/harlanhaskins&gt;, Julio Carrettoni &lt;https://github.com/Julioacarrettoni&gt;, Robert Widmann &lt;https://github.com/CodaFi&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager: TBD<br>&gt;&gt;&gt;&gt;&gt;&gt; Status: Awaiting revie<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift developers frequently use string interpolation as a convenient, concise syntax for interweaving variable values with strings. The interpolation machinery, however, has surprising behavior in one specific case: Optional&lt;T&gt;. If a user puts an optional value into a string interpolation segment, it will insert either &quot;Optional(&quot;value&quot;)&quot; or &quot;nil&quot; in the resulting string. Neither of these is particularly desirable, so we propose a warning and fix-it to surface solutions to these potential mistakes.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal &lt;https://lists.swift.org/pipermail/swift-evolution/&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The Swift Programming Language defines string interpolation segments as &quot;a way to construct a new String value from a mix of constants, variables, literals, and expressions&quot;. There is one type that runs counter to this definition: Optional. The .none case in particular is used to indicate the absence of a value. Moreover, its inclusion in interpolation segments leads to the dreaded &quot;nil&quot; in output that is often fed to UI elements. Even barring that, interpolating a non-nil optional value yields &quot;Optional(&quot;value&quot;)&quot;, a result that is not useful even in logged output.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Given that the Optional type is never fit for display to the end user, and can often be a surprising find in the console, we propose that requesting an Optional&#39;s debug description be an explicit act. This proposal now requires a warning when using an expression of Optional type within a string interpolation segment.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#proposed-solution&gt;Proposed solution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The user will be warned after attempting to use an expression with type Optional&lt;T&gt; in a string interpolation segment. They will then be offered a fixit suggesting they explicitly request the debugDescription of the Optional value instead.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#detailed-design&gt;Detailed design<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Semantic analysis currently does not do much but guarantee the well-formedness of expressions in interpolation segments. These are then fed directly to String.init(stringInterpolationSegment:) and are run through the runtime reflection system to generate a description. Semantic analysis will be tweaked to inspect the result of solving an interpolation segment for an Optional and will offer a fixit in that case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#impact-on-existing-code&gt;Impact on existing code<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As this is a warning, code written before this proposal will continue to compile and run with the same semantics as before. Authors of code that makes use of this unsafe pattern will be offered a migration path to the safer, more explicit form.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  &lt;https://gist.github.com/harlanhaskins/63b7343e7fe4e5f4c6cfbe9413a98fdd#alternatives-considered&gt;Alternatives considered<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that suggests a default value be inserted would be entirely appropriate (following the style of the fixit introduced in SE-0140 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md&gt;).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Forbidding this pattern by hard error would make this proposal a breaking change that is out of scope for this stage of Swift&#39;s development.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A fixit that introduces a force-unwrapping would technically work as well, however it would be fixing a dangerous operation with yet another dangerous operation.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPad<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/40627368/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
