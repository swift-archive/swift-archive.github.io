<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a16d66fdf58b8ac3738db189a9f5b222?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Paul Hudson</string> &lt;paul.hudson at gmail.com&gt;<p>August 15, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello!<br></p><p>I just noticed that performSelectorInBackground(_:withObject:) has<br>been mapped to performSelector(inBackground:with:) in Swift 3. So:<br></p><p>performSelector(inBackground: #selector(doStuff), with: nil)<br></p><p>This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>with the selector that is attached to it. It&#39;s possible this has been<br>through careful API review and if so I apologize. On the other hand,<br>if it&#39;s an oversight is there time for it to be looked at again?<br></p><p>Thank you!<br></p><p><br>Paul<br>--<br>Free Swift tutorials – hackingwithswift.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>August 16, 2016 at 08:00:00am</p></header><div class="content"><p>Those methods should probably all belong to the same family of `perform` but it matches the method naming of:<br></p><p>open func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)<br></p><p>But perhaps the naming family should belong to this one:<br></p><p>open func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool)<br></p><p>&gt; On Aug 15, 2016, at 3:53 PM, Paul Hudson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello!<br>&gt; <br>&gt; I just noticed that performSelectorInBackground(_:withObject:) has<br>&gt; been mapped to performSelector(inBackground:with:) in Swift 3. So:<br>&gt; <br>&gt; performSelector(inBackground: #selector(doStuff), with: nil)<br>&gt; <br>&gt; This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>&gt; with the selector that is attached to it. It&#39;s possible this has been<br>&gt; through careful API review and if so I apologize. On the other hand,<br>&gt; if it&#39;s an oversight is there time for it to be looked at again?<br>&gt; <br>&gt; Thank you!<br>&gt; <br>&gt; <br>&gt; Paul<br>&gt; --<br>&gt; Free Swift tutorials – hackingwithswift.com<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>August 16, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On Aug 16, 2016, at 8:42 AM, Philippe Hausler via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Those methods should probably all belong to the same family of `perform` but it matches the method naming of:<br>&gt; <br>&gt; open func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)<br>&gt; <br>&gt; But perhaps the naming family should belong to this one:<br>&gt; <br>&gt; open func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool)<br>&gt; <br>&gt;&gt; On Aug 15, 2016, at 3:53 PM, Paul Hudson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello!<br>&gt;&gt; <br>&gt;&gt; I just noticed that performSelectorInBackground(_:withObject:) has<br>&gt;&gt; been mapped to performSelector(inBackground:with:) in Swift 3. So:<br>&gt;&gt; <br>&gt;&gt; performSelector(inBackground: #selector(doStuff), with: nil)<br>&gt;&gt; <br>&gt;&gt; This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>&gt;&gt; with the selector that is attached to it. It&#39;s possible this has been<br>&gt;&gt; through careful API review and if so I apologize. On the other hand,<br>&gt;&gt; if it&#39;s an oversight is there time for it to be looked at again?<br></p><p>Unfortunately per timing wise we are really late in the game to fix the names of things. It would require a full API review to push through a better name for it. (However I agree that perhaps we should rename them)<br></p><p>Also there were a pair of block variants added to RunLoop that falls into this family:<br></p><p>open func perform(inModes modes: [RunLoopMode], block: @escaping () -&gt; Swift.Void)<br>open func perform(_ block: @escaping () -&gt; Swift.Void)<br></p><p>&gt;&gt; <br>&gt;&gt; Thank you!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Paul<br>&gt;&gt; --<br>&gt;&gt; Free Swift tutorials – hackingwithswift.com<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>August 16, 2016 at 03:00:00pm</p></header><div class="content"><p>It is following the naming methodology of a sentence like structure<br>&quot;performed selector in background &lt;selector&gt; with &lt;object&gt;&quot;. It does read a<br>little strange but likely comes from a simple remapping of the existing<br>objective-c name for familiarly reasons.<br></p><p>It could be performInBackground(selector:,with:) ... &quot;Perform in background<br>&lt;selector&gt; with &lt;object&gt;&quot; but that also reads a little strange.<br></p><p>-Shawn<br></p><p>On Tue, Aug 16, 2016 at 8:40 AM Paul Hudson via swift-corelibs-dev &lt;<br>swift-corelibs-dev at swift.org&gt; wrote:<br></p><p>&gt; Hello!<br>&gt;<br>&gt; I just noticed that performSelectorInBackground(_:withObject:) has<br>&gt; been mapped to performSelector(inBackground:with:) in Swift 3. So:<br>&gt;<br>&gt; performSelector(inBackground: #selector(doStuff), with: nil)<br>&gt;<br>&gt; This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>&gt; with the selector that is attached to it. It&#39;s possible this has been<br>&gt; through careful API review and if so I apologize. On the other hand,<br>&gt; if it&#39;s an oversight is there time for it to be looked at again?<br>&gt;<br>&gt; Thank you!<br>&gt;<br>&gt;<br>&gt; Paul<br>&gt; --<br>&gt; Free Swift tutorials – hackingwithswift.com<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160816/87099c37/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>August 16, 2016 at 08:00:00am</p></header><div class="content"><p>I would claim that perhaps it should be:<br></p><p>open func perform(inBackground aSelector: Selector, with anArgument: Any?)<br></p><p>That way it matches the completion family of the rest of performing. But if that is the case we should take a look at the onMainThread ones as well so they look like this perhaps:<br></p><p>open func perform(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)<br></p><p>That way the call sites would look like this:<br></p><p>myObject.perform(inBackground: #selector(doBackgroundStuff), with: nil)<br>myObject.perform(onMainThread: #selector(doMainThreadStuff), with: nil)<br>myObject.perform(#selector(doDelayedThings), with: nil, afterDelay: 0.7)<br>let result = myObject.perform(#selector(doThingsNow), with: nil).takeUnretainedValue()<br></p><p>&gt; On Aug 16, 2016, at 8:46 AM, Shawn Erickson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; It is following the naming methodology of a sentence like structure &quot;performed selector in background &lt;selector&gt; with &lt;object&gt;&quot;. It does read a little strange but likely comes from a simple remapping of the existing objective-c name for familiarly reasons.<br>&gt; <br>&gt; It could be performInBackground(selector:,with:) ... &quot;Perform in background &lt;selector&gt; with &lt;object&gt;&quot; but that also reads a little strange.<br>&gt; <br>&gt; -Shawn<br>&gt; <br>&gt; On Tue, Aug 16, 2016 at 8:40 AM Paul Hudson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt; Hello!<br>&gt; <br>&gt; I just noticed that performSelectorInBackground(_:withObject:) has<br>&gt; been mapped to performSelector(inBackground:with:) in Swift 3. So:<br>&gt; <br>&gt; performSelector(inBackground: #selector(doStuff), with: nil)<br>&gt; <br>&gt; This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>&gt; with the selector that is attached to it. It&#39;s possible this has been<br>&gt; through careful API review and if so I apologize. On the other hand,<br>&gt; if it&#39;s an oversight is there time for it to be looked at again?<br>&gt; <br>&gt; Thank you!<br>&gt; <br>&gt; <br>&gt; Paul<br>&gt; --<br>&gt; Free Swift tutorials – hackingwithswift.com &lt;http://hackingwithswift.com/&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160816/f828d9b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>NSObject&#39;s performSelector(inBackground:with:) doesn&#39;t feel right in Swift 3</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>August 16, 2016 at 03:00:00pm</p></header><div class="content"><p>Ah yeah didn&#39;t notice the others got named that way without the selector<br>after perform. Yeah it seems like it was simply mismapped. I suggest<br>filling a radar about ASAP (not in the standard library realm).<br>On Tue, Aug 16, 2016 at 8:52 AM Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br></p><p>&gt; I would claim that perhaps it should be:<br>&gt;<br>&gt; open func perform(inBackground aSelector: Selector, with anArgument: Any?)<br>&gt;<br>&gt; That way it matches the completion family of the rest of performing. But<br>&gt; if that is the case we should take a look at the onMainThread ones as well<br>&gt; so they look like this perhaps:<br>&gt;<br>&gt; open func perform(onMainThread aSelector: Selector, with arg: Any?,<br>&gt; waitUntilDone wait: Bool, modes array: [String]?)<br>&gt;<br>&gt; That way the call sites would look like this:<br>&gt;<br>&gt; myObject.perform(inBackground: #selector(doBackgroundStuff), with: nil)<br>&gt; myObject.perform(onMainThread: #selector(doMainThreadStuff), with: nil)<br>&gt; myObject.perform(#selector(doDelayedThings), with: nil, afterDelay: 0.7)<br>&gt; let result = myObject.perform(#selector(doThingsNow), with:<br>&gt; nil).takeUnretainedValue()<br>&gt;<br>&gt; On Aug 16, 2016, at 8:46 AM, Shawn Erickson via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; It is following the naming methodology of a sentence like structure<br>&gt; &quot;performed selector in background &lt;selector&gt; with &lt;object&gt;&quot;. It does read a<br>&gt; little strange but likely comes from a simple remapping of the existing<br>&gt; objective-c name for familiarly reasons.<br>&gt;<br>&gt; It could be performInBackground(selector:,with:) ... &quot;Perform in<br>&gt; background &lt;selector&gt; with &lt;object&gt;&quot; but that also reads a little strange.<br>&gt;<br>&gt; -Shawn<br>&gt;<br>&gt; On Tue, Aug 16, 2016 at 8:40 AM Paul Hudson via swift-corelibs-dev &lt;<br>&gt; swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Hello!<br>&gt;&gt;<br>&gt;&gt; I just noticed that performSelectorInBackground(_:withObject:) has<br>&gt;&gt; been mapped to performSelector(inBackground:with:) in Swift 3. So:<br>&gt;&gt;<br>&gt;&gt; performSelector(inBackground: #selector(doStuff), with: nil)<br>&gt;&gt;<br>&gt;&gt; This seems confusing to me – the &quot;inBackground&quot; label has little to do<br>&gt;&gt; with the selector that is attached to it. It&#39;s possible this has been<br>&gt;&gt; through careful API review and if so I apologize. On the other hand,<br>&gt;&gt; if it&#39;s an oversight is there time for it to be looked at again?<br>&gt;&gt;<br>&gt;&gt; Thank you!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Paul<br>&gt;&gt; --<br>&gt;&gt; Free Swift tutorials – hackingwithswift.com<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160816/3edff6f1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
