<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b7260358732da9654413e2d6d6f3739?s=50"></div><header><strong>Support Transducers</strong> from <string>Jason Jobe</string> &lt;box14 at jasonjobe.com&gt;<p>December 25, 2015 at 12:00:00pm</p></header><div class="content"><p>Okay,<br></p><p>I would like to propose that Transducers be considered for addition to the Swift core.<br></p><p>&quot;Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts…&quot;<br></p><p>There are ways to build them w/out any language modification but they are not as efficient as alternative expressions.<br>Here are some example implementations to give you an idea.<br></p><p>	https://gist.github.com/rjchatfield/14e2869b0c572696ea3c &lt;https://gist.github.com/rjchatfield/14e2869b0c572696ea3c&gt;<br>	https://github.com/mbrandonw/learn-transducers-playground/blob/master/transducers.md &lt;https://github.com/mbrandonw/learn-transducers-playground/blob/master/transducers.md&gt;<br>	https://gist.github.com/hsavit1/0791bc9a54d11608ed6d &lt;https://gist.github.com/hsavit1/0791bc9a54d11608ed6d&gt;<br></p><p><br>I look forward to your thoughts and comments.<br></p><p>-jason<br></p><p><br>Transducers are Coming — Cognitect Blog &lt;http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming&gt;<br></p><p>A presentation by Rich Hickey<br>https://www.youtube.com/watch?v=6mTbuzafcII &lt;https://www.youtube.com/watch?v=6mTbuzafcII&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151225/78c7fce1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Support Transducers</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>December 25, 2015 at 09:00:00am</p></header><div class="content"><p>On Fri, Dec 25, 2015 at 9:07 AM, Jason Jobe via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Okay,<br>&gt;<br>&gt; I would like to propose that Transducers be considered for addition to the Swift core.<br>&gt;<br>&gt; &quot;Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts…&quot;<br>&gt;<br>&gt; There are ways to build them w/out any language modification but they are not as efficient as alternative expressions.<br></p><p>Hi Jason,<br></p><p>I was playing with a similar idea here:<br></p><p>https://github.com/apple/swift/blob/master/test/Prototypes/CollectionTransformers.swift<br></p><p>You wouldn&#39;t find the word &#39;transducer&#39; there, but it is based on<br>similar principles, except it also allows you to optimize the AST of<br>the transformation, and it is structured in such a way that would<br>allow us to automatically parallelize the whole pipeline.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e5b8fa5e4f9e527ea335031bf2ec9a03?s=50"></div><header><strong>Support Transducers</strong> from <string>Árpád Goretity</string> &lt;arpad.goretity at gmail.com&gt;<p>December 25, 2015 at 08:00:00pm</p></header><div class="content"><p>This is a nice idea that I would definitely support having in the stdlib.<br>By the way, are there any benchmarks supporting that transducers do indeed<br>result in a performance gain? Having to allocate/traverse fewer arrays sure<br>seems like a win, but other constant factors may be introduced by the<br>extensive use of closures.<br></p><p><br>On Fri, Dec 25, 2015 at 6:53 PM, Dmitri Gribenko via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, Dec 25, 2015 at 9:07 AM, Jason Jobe via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Okay,<br>&gt; &gt;<br>&gt; &gt; I would like to propose that Transducers be considered for addition to<br>&gt; the Swift core.<br>&gt; &gt;<br>&gt; &gt; &quot;Transducers are a powerful and composable way to build algorithmic<br>&gt; transformations that you can reuse in many contexts…&quot;<br>&gt; &gt;<br>&gt; &gt; There are ways to build them w/out any language modification but they<br>&gt; are not as efficient as alternative expressions.<br>&gt;<br>&gt; Hi Jason,<br>&gt;<br>&gt; I was playing with a similar idea here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionTransformers.swift<br>&gt;<br>&gt; You wouldn&#39;t find the word &#39;transducer&#39; there, but it is based on<br>&gt; similar principles, except it also allows you to optimize the AST of<br>&gt; the transformation, and it is structured in such a way that would<br>&gt; allow us to automatically parallelize the whole pipeline.<br>&gt;<br>&gt; Dmitri<br>&gt;<br>&gt; --<br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Author of the Sparkling language<br>http://h2co3.org/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151225/a9476293/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Support Transducers</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December 25, 2015 at 01:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Dec 25, 2015, at 11:53 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Dec 25, 2015 at 9:07 AM, Jason Jobe via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Okay,<br>&gt;&gt; <br>&gt;&gt; I would like to propose that Transducers be considered for addition to the Swift core.<br>&gt;&gt; <br>&gt;&gt; &quot;Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts…&quot;<br>&gt;&gt; <br>&gt;&gt; There are ways to build them w/out any language modification but they are not as efficient as alternative expressions.<br>&gt; <br>&gt; Hi Jason,<br>&gt; <br>&gt; I was playing with a similar idea here:<br>&gt; <br>&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionTransformers.swift<br>&gt; <br>&gt; You wouldn&#39;t find the word &#39;transducer&#39; there, but it is based on<br>&gt; similar principles, except it also allows you to optimize the AST of<br>&gt; the transformation, and it is structured in such a way that would<br>&gt; allow us to automatically parallelize the whole pipeline.<br>&gt; <br></p><p>It&#39;s great to see you experimenting with this!<br></p><p>It&#39;s unrelated but one comment in there jumped out at me:<br>// As sad as it is, I think for practical performance reasons we should rewrite<br>// the inner parts of the fork-join framework in C++.  In way too many cases<br>// than necessary Swift requires an extra allocation to pin objects in memory<br>// for safe multithreaded access.  -Dmitri<br></p><p><br></p><p><br></p><p>I agree this is sad, but also hope it is only a temporary situation (as with other performance related concerns).  Any thoughts on that?<br></p><p>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151225/da4e5728/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Support Transducers</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 25, 2015 at 11:00:00am</p></header><div class="content"><p>&gt; On Dec 25, 2015, at 11:15 AM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt; On Dec 25, 2015, at 11:53 AM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Dec 25, 2015 at 9:07 AM, Jason Jobe via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Okay,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would like to propose that Transducers be considered for addition to the Swift core.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &quot;Transducers are a powerful and composable way to build algorithmic transformations that you can reuse in many contexts…&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are ways to build them w/out any language modification but they are not as efficient as alternative expressions.<br>&gt;&gt; <br>&gt;&gt; Hi Jason,<br>&gt;&gt; <br>&gt;&gt; I was playing with a similar idea here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/blob/master/test/Prototypes/CollectionTransformers.swift &lt;https://github.com/apple/swift/blob/master/test/Prototypes/CollectionTransformers.swift&gt;<br>&gt;&gt; <br>&gt;&gt; You wouldn&#39;t find the word &#39;transducer&#39; there, but it is based on<br>&gt;&gt; similar principles, except it also allows you to optimize the AST of<br>&gt;&gt; the transformation, and it is structured in such a way that would<br>&gt;&gt; allow us to automatically parallelize the whole pipeline.<br>&gt;&gt; <br>&gt; <br>&gt; It&#39;s great to see you experimenting with this!<br>&gt; <br>&gt; It&#39;s unrelated but one comment in there jumped out at me:<br>&gt; // As sad as it is, I think for practical performance reasons we should rewrite<br>&gt; // the inner parts of the fork-join framework in C++.  In way too many cases<br>&gt; // than necessary Swift requires an extra allocation to pin objects in memory<br>&gt; // for safe multithreaded access.  -Dmitri<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; I agree this is sad, but also hope it is only a temporary situation (as with other performance related concerns).  Any thoughts on that?<br></p><p>There&#39;s the intermediate possibility of using SIL to write these, which will give exact control over when copies and retains happen without dropping down to C++ and dealing with the fragility of maintaining common ABIs between Swift/C++ functions and the loss of high-level optimization opportunity.<br></p><p>-Joe<br></p><p>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151225/0d7479c1/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
