<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5f8862ab8cd49b84e253ab330b10f0f1?s=50"></div><header><strong>Thoughts regarding readable INTENT of Loop keywords</strong> from <string>Nathanial Burton-Bradford</string> &lt;nathanial_bb at hotmail.com&gt;<p>March 30, 2016 at 07:00:00pm</p></header><div class="content"><p>Swift Control Flow using Loops<br></p><p><br>One of Swifts strengths is clear, readable INTENT, conveyed by the languages Keyword tokens. For anyone new to programming, clear, readable intent, goes a long way in helping them master the language, by helping reduce logical/semantic errors caused by a misunderstanding of the names used in specifying the languages keyword tokens…<br></p><p>Swift’s control flow keywords can be ambiguous, in this respect, when conveying the functional intent of loop control logic, within the language.<br></p><p><br>I would like to open up discussion, therefore, regarding the possible renaming of Swift’s control flow keywords, with the hope that this leads to clearer INTENT regarding loops.<br></p><p><br></p><p>Replace For-In with Loop Using<br></p><p><br>for foo in d…y loop foo using d…y<br></p><p><br>For x in 1…5 loop x using 1…5<br></p><p>loop i=0 using i&lt;10<br></p><p>loop i using 0..&lt;10<br></p><p><br></p><p><br>For _ in 1 …power ———-&gt; loop using 1…power<br></p><p><br>“The underscore character (_) used in place of a loop variable causes the individual values to be ignored and does not provide access to the current value during each iteration of the loop.”<br></p><p><br>I feel underscore character (_) is confusing, semantically.<br></p><p><br></p><p>let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, “Jack&quot;]<br></p><p>for name in names { ———-&gt; loop names using name {<br></p><p>    print(&quot;Hello, \(name)!&quot;)<br></p><p>}<br></p><p><br>Note : loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br></p><p><br>let numberOfLegs = [&quot;spider&quot;: 8, &quot;ant&quot;: 6, &quot;cat&quot;: 4]<br></p><p>for (animalName, legCount) in numberOfLegs {<br></p><p>    print(&quot;\(animalName)s have \(legCount) legs&quot;)<br></p><p>}<br></p><p><br>loop numberOfLegs using (animalName, legCount) {<br></p><p>print(“ \(animalName)s have \(legCount) Legs”)<br></p><p>}<br></p><p><br>Note : Again loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br></p><p><br></p><p>for (airportCode, airportName) in airports {<br></p><p>loop airports using (airportCode, airportName)<br></p><p>for airportCode in airports.keys {<br></p><p>loop airports.keys using airportCode {<br></p><p><br></p><p>for airportName in airports.values {<br></p><p>loop airports.values using airportName {<br></p><p><br>for value in array[1..&lt;array.count] {<br></p><p>loop array[1..&lt;array.count] using value<br></p><p><br>‘while’ using loop while<br></p><p><br>loop while square &lt; finalSquare {<br></p><p>    // roll the dice<br></p><p>    diceRoll += 1<br></p><p>    if diceRoll == 7 { diceRoll = 1 }<br></p><p>    // move by the rolled amount<br></p><p><br>Control transfer statements<br></p><p><br>repeat { ——&gt; loop {<br></p><p>…<br></p><p>} while<br></p><p><br></p><p>“Break<br></p><p>The break statement ends execution of an entire control flow statement immediately. ”<br></p><p><br>I propose replacing Break, in loops, with exit now (intent is explicit)<br></p><p>Note: Labeled Statements with break -<br></p><p>break gameLoop exit now gameLoop<br></p><p><br>“Continue<br></p><p>The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.”<br></p><p><br>“switch character {<br></p><p>    case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br></p><p>        continue // Continue what? to next line? to end? to beginning?<br></p><p>    default:<br></p><p>        puzzleOutput.append(character)<br></p><p>    }”<br></p><p><br>I propose replacing continue with next cycle or next loop<br></p><p><br></p><p>“switch character {<br></p><p>    case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br></p><p>        next cycle // intent is explicit<br></p><p>    default:<br></p><p>        puzzleOutput.append(character)<br></p><p>    }”<br></p><p><br>Note: Labeled Statements with Continue - as per Break example, next cycle gameLoop<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/d81176c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>Thoughts regarding readable INTENT of Loop keywords</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>March 31, 2016 at 09:00:00am</p></header><div class="content"><p>I do not see how this is more readable. The current for loop is perfectly readable and conveys the intent very well IMO: it executes a code block FOR every ELEMENT that is IN a SEQUENCE. In contrast, I find your proposal rather confusing: it combines a number of different constructions with different semantics and generally is less transparent. <br></p><p>Best, <br></p><p> Taras<br></p><p>&gt; On 30 Mar 2016, at 21:54, Nathanial Burton-Bradford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift Control Flow using Loops <br>&gt; <br>&gt; One of Swifts strengths is clear, readable INTENT, conveyed by the languages Keyword tokens. For anyone new to programming, clear, readable intent, goes a long way in helping them master the language, by helping reduce logical/semantic errors caused by a misunderstanding of the names used in specifying the languages keyword tokens…<br>&gt; Swift’s control flow keywords can be ambiguous, in this respect, when conveying the functional intent of loop control logic, within the language.<br>&gt; <br>&gt; I would like to open up discussion, therefore, regarding the possible renaming of Swift’s control flow keywords, with the hope that this leads to clearer INTENT regarding loops. <br>&gt; <br>&gt; <br>&gt; Replace For-In with Loop Using <br>&gt; <br>&gt; for foo in d…y <br>&gt; loop foo using d…y<br>&gt; <br>&gt; For x in 1…5<br>&gt; loop x using 1…5<br>&gt; <br>&gt; loop i=0 using i&lt;10<br>&gt; <br>&gt; loop i using 0..&lt;10<br>&gt; <br>&gt; <br>&gt; <br>&gt; For _ in 1 …power<br>&gt; ———-&gt;<br>&gt; loop using 1…power<br>&gt; <br>&gt; “The underscore character (_) used in place of a loop variable causes the individual values to be ignored and does not provide access to the current value during each iteration of the loop.”<br>&gt; <br>&gt; I feel underscore character (_) is confusing, semantically. <br>&gt; <br>&gt; <br>&gt; let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, “Jack&quot;]<br>&gt; for name in names {<br>&gt; ———-&gt; loop names using name {<br>&gt;     print(&quot;Hello, \(name)!&quot;)<br>&gt; }<br>&gt; <br>&gt; Note : loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt; <br>&gt; let numberOfLegs = [&quot;spider&quot;: 8, &quot;ant&quot;: 6, &quot;cat&quot;: 4]<br>&gt; for (animalName, legCount) in numberOfLegs {<br>&gt;     print(&quot;\(animalName)s have \(legCount) legs&quot;)<br>&gt; }<br>&gt; <br>&gt; loop numberOfLegs using (animalName, legCount) {<br>&gt; print(“ \(animalName)s have \(legCount) Legs”)<br>&gt; }<br>&gt; <br>&gt; Note : Again loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt; <br>&gt; <br>&gt; for (airportCode, airportName) in airports {<br>&gt; loop airports using (airportCode, airportName) <br>&gt; for airportCode in airports.keys {<br>&gt; loop airports.keys using airportCode {<br>&gt;    <br>&gt; for airportName in airports.values {<br>&gt; loop airports.values using airportName {<br>&gt; <br>&gt; for value in array[1..&lt;array.count] {<br>&gt; loop array[1..&lt;array.count] using value<br>&gt; <br>&gt; ‘while’ using loop while <br>&gt; <br>&gt; loop while square &lt; finalSquare {<br>&gt;     // roll the dice<br>&gt;     diceRoll += 1<br>&gt;     if diceRoll == 7 { diceRoll = 1 }<br>&gt;     // move by the rolled amount<br>&gt; <br>&gt; Control transfer statements<br>&gt; <br>&gt; repeat { <br>&gt; ——&gt; loop {<br>&gt; …<br>&gt; } while <br>&gt; <br>&gt; <br>&gt; “Break<br>&gt; The break statement ends execution of an entire control flow statement immediately. ”<br>&gt; <br>&gt; I propose replacing Break, in loops, with exit now (intent is explicit)<br>&gt; Note: Labeled Statements with break - <br>&gt; break gameLoop exit now gameLoop<br>&gt; <br>&gt; “Continue<br>&gt; The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.”<br>&gt; <br>&gt; “switch character {<br>&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;         continue // Continue what? to next line? to end? to beginning?<br>&gt;     default:<br>&gt;         puzzleOutput.append(character)<br>&gt;     }”<br>&gt; <br>&gt; I propose replacing continue with next cycle or next loop<br>&gt; <br>&gt; <br>&gt; “switch character {<br>&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;         next cycle // intent is explicit<br>&gt;     default:<br>&gt;         puzzleOutput.append(character)<br>&gt;     }”<br>&gt; <br>&gt; Note: Labeled Statements with Continue - as per Break example, next cycle gameLoop <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/a1f825dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8b9f0c10986385f3c7f50615d6176be3?s=50"></div><header><strong>Thoughts regarding readable INTENT of Loop keywords</strong> from <string>Pierre Monod-Broca</string> &lt;pierre at monod-broca.fr&gt;<p>March 31, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 with Taras<br></p><p>&gt; Le 31 mars 2016 à 09:55, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I do not see how this is more readable. The current for loop is perfectly readable and conveys the intent very well IMO: it executes a code block FOR every ELEMENT that is IN a SEQUENCE. In contrast, I find your proposal rather confusing: it combines a number of different constructions with different semantics and generally is less transparent. <br>&gt; <br>&gt; Best, <br>&gt; <br>&gt;  Taras<br>&gt; <br>&gt;&gt; On 30 Mar 2016, at 21:54, Nathanial Burton-Bradford via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift Control Flow using Loops <br>&gt;&gt; <br>&gt;&gt; One of Swifts strengths is clear, readable INTENT, conveyed by the languages Keyword tokens. For anyone new to programming, clear, readable intent, goes a long way in helping them master the language, by helping reduce logical/semantic errors caused by a misunderstanding of the names used in specifying the languages keyword tokens…<br>&gt;&gt; Swift’s control flow keywords can be ambiguous, in this respect, when conveying the functional intent of loop control logic, within the language.<br>&gt;&gt; <br>&gt;&gt; I would like to open up discussion, therefore, regarding the possible renaming of Swift’s control flow keywords, with the hope that this leads to clearer INTENT regarding loops. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Replace For-In with Loop Using <br>&gt;&gt; <br>&gt;&gt; for foo in d…y <br>&gt;&gt; loop foo using d…y<br>&gt;&gt; <br>&gt;&gt; For x in 1…5<br>&gt;&gt; loop x using 1…5<br>&gt;&gt; <br>&gt;&gt; loop i=0 using i&lt;10<br>&gt;&gt; <br>&gt;&gt; loop i using 0..&lt;10<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; For _ in 1 …power<br>&gt;&gt; ———-&gt;<br>&gt;&gt; loop using 1…power<br>&gt;&gt; <br>&gt;&gt; “The underscore character (_) used in place of a loop variable causes the individual values to be ignored and does not provide access to the current value during each iteration of the loop.”<br>&gt;&gt; <br>&gt;&gt; I feel underscore character (_) is confusing, semantically. <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, “Jack&quot;]<br>&gt;&gt; for name in names {<br>&gt;&gt; ———-&gt; loop names using name {<br>&gt;&gt;     print(&quot;Hello, \(name)!&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Note : loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt;&gt; <br>&gt;&gt; let numberOfLegs = [&quot;spider&quot;: 8, &quot;ant&quot;: 6, &quot;cat&quot;: 4]<br>&gt;&gt; for (animalName, legCount) in numberOfLegs {<br>&gt;&gt;     print(&quot;\(animalName)s have \(legCount) legs&quot;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; loop numberOfLegs using (animalName, legCount) {<br>&gt;&gt; print(“ \(animalName)s have \(legCount) Legs”)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Note : Again loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; for (airportCode, airportName) in airports {<br>&gt;&gt; loop airports using (airportCode, airportName) <br>&gt;&gt; for airportCode in airports.keys {<br>&gt;&gt; loop airports.keys using airportCode {<br>&gt;&gt;    <br>&gt;&gt; for airportName in airports.values {<br>&gt;&gt; loop airports.values using airportName {<br>&gt;&gt; <br>&gt;&gt; for value in array[1..&lt;array.count] {<br>&gt;&gt; loop array[1..&lt;array.count] using value<br>&gt;&gt; <br>&gt;&gt; ‘while’ using loop while <br>&gt;&gt; <br>&gt;&gt; loop while square &lt; finalSquare {<br>&gt;&gt;     // roll the dice<br>&gt;&gt;     diceRoll += 1<br>&gt;&gt;     if diceRoll == 7 { diceRoll = 1 }<br>&gt;&gt;     // move by the rolled amount<br>&gt;&gt; <br>&gt;&gt; Control transfer statements<br>&gt;&gt; <br>&gt;&gt; repeat { <br>&gt;&gt; ——&gt; loop {<br>&gt;&gt; …<br>&gt;&gt; } while <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; “Break<br>&gt;&gt; The break statement ends execution of an entire control flow statement immediately. ”<br>&gt;&gt; <br>&gt;&gt; I propose replacing Break, in loops, with exit now (intent is explicit)<br>&gt;&gt; Note: Labeled Statements with break - <br>&gt;&gt; break gameLoop exit now gameLoop<br>&gt;&gt; <br>&gt;&gt; “Continue<br>&gt;&gt; The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.”<br>&gt;&gt; <br>&gt;&gt; “switch character {<br>&gt;&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;&gt;         continue // Continue what? to next line? to end? to beginning?<br>&gt;&gt;     default:<br>&gt;&gt;         puzzleOutput.append(character)<br>&gt;&gt;     }”<br>&gt;&gt; <br>&gt;&gt; I propose replacing continue with next cycle or next loop<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; “switch character {<br>&gt;&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;&gt;         next cycle // intent is explicit<br>&gt;&gt;     default:<br>&gt;&gt;         puzzleOutput.append(character)<br>&gt;&gt;     }”<br>&gt;&gt; <br>&gt;&gt; Note: Labeled Statements with Continue - as per Break example, next cycle gameLoop <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/fe6f9ea6/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Thoughts regarding readable INTENT of Loop keywords</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 31, 2016 at 11:00:00am</p></header><div class="content"><p>I mentioned this is in another thread, but I like the current for loop structure because it’s pretty clear when you name things well, like so:<br></p><p>	for eachValue in theValues { … }<br></p><p>This is a holdover from my love of Applescript (the language, the runtime performance can bite me), it’d be nice if I could use the “do” keyword to define the block, as that would complete the sentence, but I think that’s pretty clear personally.<br></p><p>&gt; On 30 Mar 2016, at 20:54, Nathanial Burton-Bradford via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift Control Flow using Loops <br>&gt; <br>&gt; One of Swifts strengths is clear, readable INTENT, conveyed by the languages Keyword tokens. For anyone new to programming, clear, readable intent, goes a long way in helping them master the language, by helping reduce logical/semantic errors caused by a misunderstanding of the names used in specifying the languages keyword tokens…<br>&gt; Swift’s control flow keywords can be ambiguous, in this respect, when conveying the functional intent of loop control logic, within the language.<br>&gt; <br>&gt; I would like to open up discussion, therefore, regarding the possible renaming of Swift’s control flow keywords, with the hope that this leads to clearer INTENT regarding loops. <br>&gt; <br>&gt; <br>&gt; Replace For-In with Loop Using <br>&gt; <br>&gt; for foo in d…y <br>&gt; loop foo using d…y<br>&gt; <br>&gt; For x in 1…5<br>&gt; loop x using 1…5<br>&gt; <br>&gt; loop i=0 using i&lt;10<br>&gt; <br>&gt; loop i using 0..&lt;10<br>&gt; <br>&gt; <br>&gt; <br>&gt; For _ in 1 …power<br>&gt; ———-&gt;<br>&gt; loop using 1…power<br>&gt; <br>&gt; “The underscore character (_) used in place of a loop variable causes the individual values to be ignored and does not provide access to the current value during each iteration of the loop.”<br>&gt; <br>&gt; I feel underscore character (_) is confusing, semantically. <br>&gt; <br>&gt; <br>&gt; let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, “Jack&quot;]<br>&gt; for name in names {<br>&gt; ———-&gt; loop names using name {<br>&gt;     print(&quot;Hello, \(name)!&quot;)<br>&gt; }<br>&gt; <br>&gt; Note : loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt; <br>&gt; let numberOfLegs = [&quot;spider&quot;: 8, &quot;ant&quot;: 6, &quot;cat&quot;: 4]<br>&gt; for (animalName, legCount) in numberOfLegs {<br>&gt;     print(&quot;\(animalName)s have \(legCount) legs&quot;)<br>&gt; }<br>&gt; <br>&gt; loop numberOfLegs using (animalName, legCount) {<br>&gt; print(“ \(animalName)s have \(legCount) Legs”)<br>&gt; }<br>&gt; <br>&gt; Note : Again loop ARRAY using ELEMENT(S) - which is logically consistent with ‘-using’ as last keyword instance.<br>&gt; <br>&gt; <br>&gt; for (airportCode, airportName) in airports {<br>&gt; loop airports using (airportCode, airportName) <br>&gt; for airportCode in airports.keys {<br>&gt; loop airports.keys using airportCode {<br>&gt;    <br>&gt; for airportName in airports.values {<br>&gt; loop airports.values using airportName {<br>&gt; <br>&gt; for value in array[1..&lt;array.count] {<br>&gt; loop array[1..&lt;array.count] using value<br>&gt; <br>&gt; ‘while’ using loop while <br>&gt; <br>&gt; loop while square &lt; finalSquare {<br>&gt;     // roll the dice<br>&gt;     diceRoll += 1<br>&gt;     if diceRoll == 7 { diceRoll = 1 }<br>&gt;     // move by the rolled amount<br>&gt; <br>&gt; Control transfer statements<br>&gt; <br>&gt; repeat { <br>&gt; ——&gt; loop {<br>&gt; …<br>&gt; } while <br>&gt; <br>&gt; <br>&gt; “Break<br>&gt; The break statement ends execution of an entire control flow statement immediately. ”<br>&gt; <br>&gt; I propose replacing Break, in loops, with exit now (intent is explicit)<br>&gt; Note: Labeled Statements with break - <br>&gt; break gameLoop exit now gameLoop<br>&gt; <br>&gt; “Continue<br>&gt; The continue statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.”<br>&gt; <br>&gt; “switch character {<br>&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;         continue // Continue what? to next line? to end? to beginning?<br>&gt;     default:<br>&gt;         puzzleOutput.append(character)<br>&gt;     }”<br>&gt; <br>&gt; I propose replacing continue with next cycle or next loop<br>&gt; <br>&gt; <br>&gt; “switch character {<br>&gt;     case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;:<br>&gt;         next cycle // intent is explicit<br>&gt;     default:<br>&gt;         puzzleOutput.append(character)<br>&gt;     }”<br>&gt; <br>&gt; Note: Labeled Statements with Continue - as per Break example, next cycle gameLoop <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/2cc84873/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
