<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Idea] How to eliminate &#39;optional&#39; protocol requirements</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>April  8, 2016 at 09:00:00am</p></header><div class="content"><p>My main point was that, this was an extremely common practice in Objective C (one which was even used/encouraged by Apple for quite a while) and the proposal needs to address it.  There is a lot of working code out there that uses this pattern.  In short, we need to be careful not to accidentally trip all of those magical behavior changes you were talking about, since it would effectively break that code.<br></p><p>It is one thing to say that there is a better way to approach this problem for new code in Swift… it is another entirely to say that code written this way years ago in ObjC (and which works today with Swift) can’t be used with Swift 3.0 without a major refactoring effort.<br></p><p>Thanks,<br>Jon<br></p><p>P.S.  I will leave my secondary point (that I would like to see more of Smalltalk’s abilities in Swift) alone for the most part, since it seems to be distracting from my main point that the proposal would break code which currently works.<br></p><p>&gt; Table view semantics were discussed at length on a prior version of the<br>&gt; thread. That pattern is less than ideal; it essentially creates magic<br>&gt; behavior that&#39;s only described by documentation… or, worse, completely<br>&gt; forgotten about in documentation; something changing from version to<br>&gt; version of the framework; etc. I can not tell you how many times this<br>&gt; has tripped up members of my teams. Over in Cocoa proper, similar<br>&gt; behavior changes also arise (usually performance optimizations) from<br>&gt; whether or not you *override* a method, and it&#39;s even more confusing.<br>&gt;  <br>&gt; Such a practice should not be a cornerstone of a modern language; as<br>&gt; discussed in the prior thread, the different semantics of the measuring<br>&gt; methods (the current return values, as well as the implicit one from not<br>&gt; overriding) should be captured explicitly in an enum, with a clear<br>&gt; default return value. This is in line with the spirit of Swift. Your API<br>&gt; contract with the user is clear, and the introduction of default<br>&gt; implementations is versioned as a matter of public API.<br>&gt;  <br>&gt; It&#39;s interesting that you use the phrase &quot;customization points&quot;. Our<br>&gt; text for teaching protocol extensions in Swift uses it heavily - that<br>&gt; *is* the behavior of protocols with default implementations in Swift<br>&gt; today. You delegate something out, but give it a default implementation<br>&gt; with logic you specify. That&#39;s a customization point, too.<br>&gt;  <br>&gt; Cheers!<br>&gt; Zachary Waldowski<br>&gt; zach at waldowski.me &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160408/0105d09f/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
