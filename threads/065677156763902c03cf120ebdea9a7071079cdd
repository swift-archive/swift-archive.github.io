<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December 29, 2015 at 10:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;d like to gauge reaction for a proposal I was considering: adding to the<br>standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to<br>initialize a Mirror with a custom summary. If no custom summary is<br>provided, the summary would default to the string produced by calling<br>String(reflecting: subject) on the subject at the time of mirror creation.<br></p><p>Some context: right now, there are two APIs for mirrors in the standard<br>library: CustomReflectable, which is publicly exposed and relies on the<br>conforming type creating a Mirror object, and _Reflectable, which relies on<br>the conforming type having a companion type conforming to _MirrorType. A<br>short-term goal is to migrate the standard library&#39;s types off the<br>_Reflectable API and have them use the CustomReflectable API, and changing<br>dump() accordingly.<br></p><p>The extant implementation of dump() uses a property on _MirrorType called<br>&quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an<br>array.) &quot;summary&quot; is absent from Mirror or any types related to<br>CustomReflectable. I asked Joe Groff about this and the rationale was that<br>it was deemed too similar to debugDescription (or String(reflecting: foo))<br>to be worth carrying over.<br></p><p>I would like to suggest that there might be a purpose for &quot;summary&quot;:<br></p><p>- Types with children, especially container types like arrays, often print<br>out a description of their children as part of their debugDescription or<br>description, redundant when using an API like dump() which provides a<br>structural representation of the children of the subject. In such cases a<br>lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>represent to the user.<br></p><p>- Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>these types customized by the corresponding Mirror would allow for a<br>&#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>by the runtime without making more substantial changes to the API which<br>might break third-party code (such as conforming CGRect to any of the<br>aforementioned protocols).<br></p><p>I know that Mirror (and reflection as a whole) are being considered for<br>major design changes, so this would be a minor transient change to make the<br>API easier to work with in the meantime.<br></p><p>Please let me know whether or not you think this proposed change is<br>meaningful and worthwhile, or if you have any questions.<br></p><p>Best,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151229/06569cdd/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 30, 2015 at 09:00:00am</p></header><div class="content"><p>I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br></p><p>-Joe<br></p><p>&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to the standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to initialize a Mirror with a custom summary. If no custom summary is provided, the summary would default to the string produced by calling String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt; <br>&gt; Some context: right now, there are two APIs for mirrors in the standard library: CustomReflectable, which is publicly exposed and relies on the conforming type creating a Mirror object, and _Reflectable, which relies on the conforming type having a companion type conforming to _MirrorType. A short-term goal is to migrate the standard library&#39;s types off the _Reflectable API and have them use the CustomReflectable API, and changing dump() accordingly.<br>&gt; <br>&gt; The extant implementation of dump() uses a property on _MirrorType called &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an array.) &quot;summary&quot; is absent from Mirror or any types related to CustomReflectable. I asked Joe Groff about this and the rationale was that it was deemed too similar to debugDescription (or String(reflecting: foo)) to be worth carrying over.<br>&gt; <br>&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt; <br>&gt; - Types with children, especially container types like arrays, often print out a description of their children as part of their debugDescription or description, redundant when using an API like dump() which provides a structural representation of the children of the subject. In such cases a lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to represent to the user.<br>&gt; <br>&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible, CustomDebugStringConvertible, Streamable, etc. Having a custom summary for these types customized by the corresponding Mirror would allow for a &#39;pretty&#39; representation during reflection in lieu of the ugly one generated by the runtime without making more substantial changes to the API which might break third-party code (such as conforming CGRect to any of the aforementioned protocols).<br>&gt; <br>&gt; I know that Mirror (and reflection as a whole) are being considered for major design changes, so this would be a minor transient change to make the API easier to work with in the meantime.<br>&gt; <br>&gt; Please let me know whether or not you think this proposed change is meaningful and worthwhile, or if you have any questions.<br>&gt; <br>&gt; Best,<br>&gt; Austin<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151230/1ee277e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Getting custom summaries for the common CG types certainly seems reasonable. We&#39;d have to get approval from the appropriate teams at Apple, but I can&#39;t see any objections.<br></p><p>Jordan<br></p><p><br>&gt; On Dec 30, 2015, at 9:55, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to the standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to initialize a Mirror with a custom summary. If no custom summary is provided, the summary would default to the string produced by calling String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt;&gt; <br>&gt;&gt; Some context: right now, there are two APIs for mirrors in the standard library: CustomReflectable, which is publicly exposed and relies on the conforming type creating a Mirror object, and _Reflectable, which relies on the conforming type having a companion type conforming to _MirrorType. A short-term goal is to migrate the standard library&#39;s types off the _Reflectable API and have them use the CustomReflectable API, and changing dump() accordingly.<br>&gt;&gt; <br>&gt;&gt; The extant implementation of dump() uses a property on _MirrorType called &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an array.) &quot;summary&quot; is absent from Mirror or any types related to CustomReflectable. I asked Joe Groff about this and the rationale was that it was deemed too similar to debugDescription (or String(reflecting: foo)) to be worth carrying over.<br>&gt;&gt; <br>&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt; <br>&gt;&gt; - Types with children, especially container types like arrays, often print out a description of their children as part of their debugDescription or description, redundant when using an API like dump() which provides a structural representation of the children of the subject. In such cases a lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to represent to the user.<br>&gt;&gt; <br>&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible, CustomDebugStringConvertible, Streamable, etc. Having a custom summary for these types customized by the corresponding Mirror would allow for a &#39;pretty&#39; representation during reflection in lieu of the ugly one generated by the runtime without making more substantial changes to the API which might break third-party code (such as conforming CGRect to any of the aforementioned protocols).<br>&gt;&gt; <br>&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for major design changes, so this would be a minor transient change to make the API easier to work with in the meantime.<br>&gt;&gt; <br>&gt;&gt; Please let me know whether or not you think this proposed change is meaningful and worthwhile, or if you have any questions.<br>&gt;&gt; <br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/f06a686f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  5, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi Joe,<br></p><p>I respect the choice of the team to use Custom[Debug]StringConvertible in<br>lieu of summary. At the same time, in my opinion the output of dump() has<br>become significantly more difficult to read (c.f. unit tests in<br>https://github.com/apple/swift/pull/838/files). Would you and the team be<br>open to exploring alternative solutions that improve the readability of<br>dump() without increasing API surface area? For example, perhaps the<br>reflection machinery itself should have special handling for some of the<br>built-in types. If not, I&#39;ll consider this discussion thread complete.<br></p><p>Thanks,<br>Austin<br></p><p><br></p><p>On Tue, Jan 5, 2016 at 3:22 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br></p><p>&gt; Getting custom summaries for the common CG types certainly seems<br>&gt; reasonable. We&#39;d have to get approval from the appropriate teams at Apple,<br>&gt; but I can&#39;t see any objections.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Dec 30, 2015, at 9:55, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use<br>&gt; Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to the<br>&gt; standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to<br>&gt; initialize a Mirror with a custom summary. If no custom summary is<br>&gt; provided, the summary would default to the string produced by calling<br>&gt; String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt;<br>&gt; Some context: right now, there are two APIs for mirrors in the standard<br>&gt; library: CustomReflectable, which is publicly exposed and relies on the<br>&gt; conforming type creating a Mirror object, and _Reflectable, which relies on<br>&gt; the conforming type having a companion type conforming to _MirrorType. A<br>&gt; short-term goal is to migrate the standard library&#39;s types off the<br>&gt; _Reflectable API and have them use the CustomReflectable API, and changing<br>&gt; dump() accordingly.<br>&gt;<br>&gt; The extant implementation of dump() uses a property on _MirrorType called<br>&gt; &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an<br>&gt; array.) &quot;summary&quot; is absent from Mirror or any types related to<br>&gt; CustomReflectable. I asked Joe Groff about this and the rationale was that<br>&gt; it was deemed too similar to debugDescription (or String(reflecting: foo))<br>&gt; to be worth carrying over.<br>&gt;<br>&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;<br>&gt; - Types with children, especially container types like arrays, often print<br>&gt; out a description of their children as part of their debugDescription or<br>&gt; description, redundant when using an API like dump() which provides a<br>&gt; structural representation of the children of the subject. In such cases a<br>&gt; lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>&gt; represent to the user.<br>&gt;<br>&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>&gt; these types customized by the corresponding Mirror would allow for a<br>&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>&gt; by the runtime without making more substantial changes to the API which<br>&gt; might break third-party code (such as conforming CGRect to any of the<br>&gt; aforementioned protocols).<br>&gt;<br>&gt; I know that Mirror (and reflection as a whole) are being considered for<br>&gt; major design changes, so this would be a minor transient change to make the<br>&gt; API easier to work with in the meantime.<br>&gt;<br>&gt; Please let me know whether or not you think this proposed change is<br>&gt; meaningful and worthwhile, or if you have any questions.<br>&gt;<br>&gt; Best,<br>&gt; Austin<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/69f26db9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 5:28 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Joe,<br>&gt; <br>&gt; I respect the choice of the team to use Custom[Debug]StringConvertible in lieu of summary. At the same time, in my opinion the output of dump() has become significantly more difficult to read (c.f. unit tests in https://github.com/apple/swift/pull/838/files &lt;https://github.com/apple/swift/pull/838/files&gt;).<br></p><p>Specific examples of readability regressions, please?<br></p><p>&gt; Would you and the team be open to exploring alternative solutions that improve the readability of dump() without increasing API surface area?<br></p><p>Sure.<br></p><p>&gt; For example, perhaps the reflection machinery itself should have special handling for some of the built-in types. If not, I&#39;ll consider this discussion thread complete.<br>&gt; <br>&gt; Thanks,<br>&gt; Austin<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Tue, Jan 5, 2016 at 3:22 PM, Jordan Rose &lt;jordan_rose at apple.com &lt;mailto:jordan_rose at apple.com&gt;&gt; wrote:<br>&gt; Getting custom summaries for the common CG types certainly seems reasonable. We&#39;d have to get approval from the appropriate teams at Apple, but I can&#39;t see any objections.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 30, 2015, at 9:55, Joe Groff via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to the standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to initialize a Mirror with a custom summary. If no custom summary is provided, the summary would default to the string produced by calling String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some context: right now, there are two APIs for mirrors in the standard library: CustomReflectable, which is publicly exposed and relies on the conforming type creating a Mirror object, and _Reflectable, which relies on the conforming type having a companion type conforming to _MirrorType. A short-term goal is to migrate the standard library&#39;s types off the _Reflectable API and have them use the CustomReflectable API, and changing dump() accordingly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The extant implementation of dump() uses a property on _MirrorType called &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an array.) &quot;summary&quot; is absent from Mirror or any types related to CustomReflectable. I asked Joe Groff about this and the rationale was that it was deemed too similar to debugDescription (or String(reflecting: foo)) to be worth carrying over.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Types with children, especially container types like arrays, often print out a description of their children as part of their debugDescription or description, redundant when using an API like dump() which provides a structural representation of the children of the subject. In such cases a lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to represent to the user.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible, CustomDebugStringConvertible, Streamable, etc. Having a custom summary for these types customized by the corresponding Mirror would allow for a &#39;pretty&#39; representation during reflection in lieu of the ugly one generated by the runtime without making more substantial changes to the API which might break third-party code (such as conforming CGRect to any of the aforementioned protocols).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for major design changes, so this would be a minor transient change to make the API easier to work with in the meantime.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Please let me know whether or not you think this proposed change is meaningful and worthwhile, or if you have any questions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Best,<br>&gt;&gt;&gt; Austin<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-Dave<br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/93638a75/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Custom summary for Mirrors?</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  5, 2016 at 06:00:00pm</p></header><div class="content"><p>Here are a couple of examples I had in mind.<br></p><p>* Arrays (from test/1_stdlib/Runtime.swift:1348), dumping an array with 5<br>elements:<br></p><p>BEFORE:<br>▿ 5 elements<br>- [0]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite<br>- [1]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint<br>- [2]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker<br>▿ [3]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks<br>    - ClarisWorks: true<br>       ▿ [4]:<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard<br>    - HyperCard: false<br></p><p>AFTER:<br>▿ [a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite,<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint,<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker,<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks(true),<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard(false)]<br>- [0]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacWrite<br>- [1]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.MacPaint<br>- [2]: a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.FileMaker<br>▿ [3]:<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.ClarisWorks(true)<br>    - ClarisWorks: true<br>    ▿ [4]:<br>a.MultiPayloadTagBitsSmallNonGenericEnumWithDefaultMirror.HyperCard(false)<br>    - HyperCard: false<br></p><p>* Dictionaries (from test/1_stdlib/ReflectionHashing.swift:43):<br></p><p>BEFORE:<br>▿ 5 key/value pairs<br>  ▿ [0]: (2 elements)<br>    - .0: Four<br>    - .1: 4<br>  ▿ [1]: (2 elements)<br>    ...<br></p><p>AFTER:<br>▿ [&quot;Four&quot;: 4, &quot;One&quot;: 1, &quot;Two&quot;: 2, &quot;Five&quot;: 5, &quot;Three&quot;: 3]<br>  ▿ [0]: (&quot;Four&quot;, 4)<br>    - .0: &quot;Four&quot;<br>    - .1: 4<br>  ▿ [1]: (&quot;One&quot;, 1)<br>    ...<br></p><p>* Dumping a CGRect (from test/1_stdlib/Reflection_objc.swift):<br></p><p>BEFORE:<br>(50.0, 60.0, 100.0, 150.0)<br></p><p>AFTER:<br>__C.CGRect(origin: __C.CGPoint(x: 50.0, y: 60.0), size: __C.CGSize(width:<br>100.0, height: 150.0))<br></p><p>Let me know if you&#39;d like more, although most are variants on the above.<br></p><p>Best,<br>Austin<br></p><p><br></p><p>On Tue, Jan 5, 2016 at 5:37 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 5, 2016, at 5:28 PM, Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi Joe,<br>&gt;<br>&gt; I respect the choice of the team to use Custom[Debug]StringConvertible in<br>&gt; lieu of summary. At the same time, in my opinion the output of dump() has<br>&gt; become significantly more difficult to read (c.f. unit tests in<br>&gt; https://github.com/apple/swift/pull/838/files).<br>&gt;<br>&gt;<br>&gt; Specific examples of readability regressions, please?<br>&gt;<br>&gt; Would you and the team be open to exploring alternative solutions that<br>&gt; improve the readability of dump() without increasing API surface area?<br>&gt;<br>&gt;<br>&gt; Sure.<br>&gt;<br>&gt; For example, perhaps the reflection machinery itself should have special<br>&gt; handling for some of the built-in types. If not, I&#39;ll consider this<br>&gt; discussion thread complete.<br>&gt;<br>&gt; Thanks,<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Tue, Jan 5, 2016 at 3:22 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt; Getting custom summaries for the common CG types certainly seems<br>&gt;&gt; reasonable. We&#39;d have to get approval from the appropriate teams at Apple,<br>&gt;&gt; but I can&#39;t see any objections.<br>&gt;&gt;<br>&gt;&gt; Jordan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 30, 2015, at 9:55, Joe Groff via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I believe &#39;summary&#39; is obsolete, and you&#39;re supposed to use<br>&gt;&gt; Custom[Debug]StringConvertible to customize your type&#39;s reporting now.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt; On Dec 29, 2015, at 10:38 PM, Austin Zheng via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hi all,<br>&gt;&gt;<br>&gt;&gt; I&#39;d like to gauge reaction for a proposal I was considering: adding to<br>&gt;&gt; the standard library&#39;s Mirror type a &#39;summary&#39; property, and the option to<br>&gt;&gt; initialize a Mirror with a custom summary. If no custom summary is<br>&gt;&gt; provided, the summary would default to the string produced by calling<br>&gt;&gt; String(reflecting: subject) on the subject at the time of mirror creation.<br>&gt;&gt;<br>&gt;&gt; Some context: right now, there are two APIs for mirrors in the standard<br>&gt;&gt; library: CustomReflectable, which is publicly exposed and relies on the<br>&gt;&gt; conforming type creating a Mirror object, and _Reflectable, which relies on<br>&gt;&gt; the conforming type having a companion type conforming to _MirrorType. A<br>&gt;&gt; short-term goal is to migrate the standard library&#39;s types off the<br>&gt;&gt; _Reflectable API and have them use the CustomReflectable API, and changing<br>&gt;&gt; dump() accordingly.<br>&gt;&gt;<br>&gt;&gt; The extant implementation of dump() uses a property on _MirrorType called<br>&gt;&gt; &quot;summary&quot;. (This is where e.g. &quot;4 elements&quot; comes from when you dump() an<br>&gt;&gt; array.) &quot;summary&quot; is absent from Mirror or any types related to<br>&gt;&gt; CustomReflectable. I asked Joe Groff about this and the rationale was that<br>&gt;&gt; it was deemed too similar to debugDescription (or String(reflecting: foo))<br>&gt;&gt; to be worth carrying over.<br>&gt;&gt;<br>&gt;&gt; I would like to suggest that there might be a purpose for &quot;summary&quot;:<br>&gt;&gt;<br>&gt;&gt; - Types with children, especially container types like arrays, often<br>&gt;&gt; print out a description of their children as part of their debugDescription<br>&gt;&gt; or description, redundant when using an API like dump() which provides a<br>&gt;&gt; structural representation of the children of the subject. In such cases a<br>&gt;&gt; lighter-weight description (like &quot;3 elements&quot;) might be more appropriate to<br>&gt;&gt; represent to the user.<br>&gt;&gt;<br>&gt;&gt; - Certain types like CGRect don&#39;t conform to CustomStringConvertible,<br>&gt;&gt; CustomDebugStringConvertible, Streamable, etc. Having a custom summary for<br>&gt;&gt; these types customized by the corresponding Mirror would allow for a<br>&gt;&gt; &#39;pretty&#39; representation during reflection in lieu of the ugly one generated<br>&gt;&gt; by the runtime without making more substantial changes to the API which<br>&gt;&gt; might break third-party code (such as conforming CGRect to any of the<br>&gt;&gt; aforementioned protocols).<br>&gt;&gt;<br>&gt;&gt; I know that Mirror (and reflection as a whole) are being considered for<br>&gt;&gt; major design changes, so this would be a minor transient change to make the<br>&gt;&gt; API easier to work with in the meantime.<br>&gt;&gt;<br>&gt;&gt; Please let me know whether or not you think this proposed change is<br>&gt;&gt; meaningful and worthwhile, or if you have any questions.<br>&gt;&gt;<br>&gt;&gt; Best,<br>&gt;&gt; Austin<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; -Dave<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160105/98744620/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
