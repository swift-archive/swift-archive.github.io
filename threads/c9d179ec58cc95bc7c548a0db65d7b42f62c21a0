<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  2, 2016 at 08:00:00am</p></header><div class="content"><p>on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;  in Swift 4, then we can use the following:<br>&gt;<br>&gt; protocol From&lt;T&gt; {<br>&gt;     init(_ from: T)<br>&gt; }<br>&gt;<br>&gt; And deprecate all the weird Convertibles.<br></p><p>Even if we could do that, “From” would never be an appropriate name for<br>the ability to express a type as a particular kind of literal.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>July  2, 2016 at 10:00:00am</p></header><div class="content"><p>I kinda agree that these names still aren&#39;t the best. FWIW, I much preferred the originals, even if they could be misleading.<br></p><p>What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br></p><p>&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt; <br>&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;    init(_ from: T)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; And deprecate all the weird Convertibles.<br>&gt; <br>&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt; the ability to express a type as a particular kind of literal.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>July  2, 2016 at 10:00:00am</p></header><div class="content"><p>(My bad, accidentally hit send too early). <br></p><p>That, or we could keep either the Convert or Express forms with &quot;IntegerLiteralConverting&quot; or &quot;IntegerLiteralExpressing&quot;. And if we decide &quot;express&quot; really is the best word to describe what happens, I personally prefer &quot;IntegerLiteralExpressing&quot; to &quot;ExpressibleAsIntegerLiteral&quot;, which doesn&#39;t feel at home with the other Swift protocol names.<br></p><p>Riley<br></p><p>&gt; On Jul 2, 2016, at 10:49 AM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt; <br>&gt; I kinda agree that these names still aren&#39;t the best. FWIW, I much preferred the originals, even if they could be misleading.<br>&gt; <br>&gt; What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br>&gt; <br>&gt;&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;   init(_ from: T)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;&gt; <br>&gt;&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt;&gt; the ability to express a type as a particular kind of literal.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  2, 2016 at 12:00:00pm</p></header><div class="content"><p>on Sat Jul 02 2016, Riley Testut &lt;rileytestut-AT-gmail.com&gt; wrote:<br></p><p>&gt; (My bad, accidentally hit send too early). <br>&gt;<br>&gt; That, or we could keep either the Convert or Express forms with<br>&gt; &quot;IntegerLiteralConverting&quot; or &quot;IntegerLiteralExpressing&quot;. And if we<br>&gt; decide &quot;express&quot; really is the best word to describe what happens, I<br>&gt; personally prefer &quot;IntegerLiteralExpressing&quot; to<br>&gt; &quot;ExpressibleAsIntegerLiteral&quot;, which doesn&#39;t feel at home with the<br>&gt; other Swift protocol names.<br></p><p>It doesn&#39;t matter if it “feels at home” if it has the wrong meaning.<br>It&#39;s not that Integer can express an integer literal; It&#39;s that an<br>integer literal can express an Integer.<br></p><p>When naming, we need to learn to stop treating the comfortable ring of<br>familiar word patterns as an arbiter of success.<br></p><p>&gt;<br>&gt; Riley<br>&gt;<br>&gt;&gt; On Jul 2, 2016, at 10:49 AM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I kinda agree that these names still aren&#39;t the best. FWIW, I much<br>&gt;&gt; preferred the originals, even if they could be misleading.<br>&gt;&gt; <br>&gt;&gt; What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt;&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;&gt;   init(_ from: T)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt;&gt;&gt; the ability to express a type as a particular kind of literal.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/009173d589176cfd9c8146cc49849ff6?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Riley Testut</string> &lt;rileytestut at gmail.com&gt;<p>July  2, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt; familiar word patterns as an arbiter of success.<br></p><p>I’m not sure I agree with this statement. I would argue we should most certainly aim to keep a consistent feel across our naming conventions, and furthermore, I think familiar word patterns greatly lowers barrier for entry for newcomers to the language. A big reason for so many of these renamings is because they don’t feel “Swifty”, and even if that might not be a good technical reason, I think it’s as valid a reason as any.<br></p><p>Following that, “ExpressibleAsIntegerLiteral” feels extremely un-swifty, and while technically you could argue it follows the Swift API Guidelines, the fact that it’s the only protocol with the adjective at the beginning and not the end is a giant red flag to me (unless I’m missing some).<br></p><p>A final thought: is it really better to have a technically correct name over one that, while technically incorrect, got its point across about how it should be used? This might just be me, but I would far prefer a name that from my interpretation would tell me how to use it, rather than one that would require me to think about what it actually means (as we’ve seen from all the confusion about what these protocols were actually doing).<br></p><p>Overall though, I’m glad there is this much debate about the future of these names, I think it will leave us with the best name (eventually) :-)<br></p><p>&gt; On Jul 2, 2016, at 2:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Jul 02 2016, Riley Testut &lt;rileytestut-AT-gmail.com &lt;http://rileytestut-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; (My bad, accidentally hit send too early). <br>&gt;&gt; <br>&gt;&gt; That, or we could keep either the Convert or Express forms with<br>&gt;&gt; &quot;IntegerLiteralConverting&quot; or &quot;IntegerLiteralExpressing&quot;. And if we<br>&gt;&gt; decide &quot;express&quot; really is the best word to describe what happens, I<br>&gt;&gt; personally prefer &quot;IntegerLiteralExpressing&quot; to<br>&gt;&gt; &quot;ExpressibleAsIntegerLiteral&quot;, which doesn&#39;t feel at home with the<br>&gt;&gt; other Swift protocol names.<br>&gt; <br>&gt; It doesn&#39;t matter if it “feels at home” if it has the wrong meaning.<br>&gt; It&#39;s not that Integer can express an integer literal; It&#39;s that an<br>&gt; integer literal can express an Integer.<br>&gt; <br>&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt; familiar word patterns as an arbiter of success.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Riley<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 2, 2016, at 10:49 AM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I kinda agree that these names still aren&#39;t the best. FWIW, I much<br>&gt;&gt;&gt; preferred the originals, even if they could be misleading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt;&gt;&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;  init(_ from: T)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt;&gt;&gt;&gt; the ability to express a type as a particular kind of literal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/739831c1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  2, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On Jul 2, 2016, at 2:39 PM, Riley Testut via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt;&gt; familiar word patterns as an arbiter of success.<br>&gt; <br>&gt; I’m not sure I agree with this statement. I would argue we should most certainly aim to keep a consistent feel across our naming conventions...<br>&gt; Following that, “ExpressibleAsIntegerLiteral” feels extremely un-swiftyPI Guidelines, the fact that it’s the only protocol with the adjective at the beginning and not the end is a giant red flag to me (unless I’m missing some)....<br></p><p>Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br></p><p>-- E [2]<br>[1] I&#39;d probably even buy into &quot;From&quot; instead of &quot;By&quot;.<br>[2] I keep *promising* myself to stop adding to this conversation and pull an Elsa.<br>My success rate at keeping this promise is, as yet, suboptimal.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/dd94b4b7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  3, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br></p><p>Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer that these protocols kinda work backwards, so to speak. That is, if I understand things correctly, rather than adding functionality/semantics to the conforming type, conforming to a literal protocol adds functionality/semantics to the corresponding literal &quot;type&quot; (which we can&#39;t directly interact with because they don&#39;t actually exist within Swift&#39;s type system).<br></p><p>- Dave Sweeris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July  3, 2016 at 03:00:00pm</p></header><div class="content"><p>How about Syntax.IntegerLiteralDestination as a name?<br></p><p>That way just as, for example, CustomStringConvertible can be read to mean<br>“This type can be converted to a string in a custom manner”, we would have<br>Syntax.IntegerLiteralDestination meaning “This type can be the destination<br>for a literal integer in syntax.”<br></p><p>That said, I think Syntax.IntegerLiteral is sufficient. “This type can be a<br>literal integer in syntax.”<br></p><p>Nevin<br></p><p>On Sunday, July 3, 2016, David Sweeris via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt; &gt; I don&#39;t think it would pass the DaveTest despite it being only 2<br>&gt; characters longer.[1]<br>&gt;<br>&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer that<br>&gt; these protocols kinda work backwards, so to speak. That is, if I understand<br>&gt; things correctly, rather than adding functionality/semantics to the<br>&gt; conforming type, conforming to a literal protocol adds<br>&gt; functionality/semantics to the corresponding literal &quot;type&quot; (which we can&#39;t<br>&gt; directly interact with because they don&#39;t actually exist within Swift&#39;s<br>&gt; type system).<br>&gt;<br>&gt; - Dave Sweeris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/096c81f3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  4, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On Jul 3, 2016, at 9:52 AM, David Sweeris &lt;davesweeris at mac.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt; <br>&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer that these protocols kinda work backwards, so to speak. That is, if I understand things correctly, rather than adding functionality/semantics to the conforming type, conforming to a literal protocol adds functionality/semantics to the corresponding literal &quot;type&quot; (which we can&#39;t directly interact with because they don&#39;t actually exist within Swift&#39;s type system).<br></p><p>Either view is consistent with the facts but Occam tells me the simpler (first) theory is the correct one. 😏<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt; ]<br></p><p>&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt; <br>&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer that these protocols kinda work backwards, so to speak. That is, if I understand things correctly, rather than adding functionality/semantics to the conforming type, conforming to a literal protocol adds functionality/semantics to the corresponding literal &quot;type&quot; (which we can&#39;t directly interact with because they don&#39;t actually exist within Swift&#39;s type system).<br></p><p>I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity: &quot;you can go from a concrete type to a literal&quot; (rather than the correct &quot;you can go from a literal to a concrete type&quot;).<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/8f53d383/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 02:00:00pm</p></header><div class="content"><p>on Tue Jul 05 2016, Jordan Rose &lt;jordan_rose-AT-apple.com&gt; wrote:<br></p><p>&gt; [Proposal:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;<br>&gt; ]<br>&gt;<br>&gt;&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt;&gt; <br>&gt;&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer<br>&gt;&gt; that these protocols kinda work backwards, so to speak. That is, if<br>&gt;&gt; I understand things correctly, rather than adding<br>&gt;&gt; functionality/semantics to the conforming type, conforming to a<br>&gt;&gt; literal protocol adds functionality/semantics to the corresponding<br>&gt;&gt; literal &quot;type&quot; (which we can&#39;t directly interact with because they<br>&gt;&gt; don&#39;t actually exist within Swift&#39;s type system).<br>&gt;<br>&gt; I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer<br>&gt; literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity:<br>&gt; &quot;you can go from a concrete type to a literal&quot; (rather than the<br>&gt; correct &quot;you can go from a literal to a concrete type&quot;).<br></p><p>I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  5, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 4:17 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 05 2016, Jordan Rose &lt;jordan_rose-AT-apple.com &lt;http://at-apple.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; [Proposal:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;&gt;<br>&gt;&gt; ]<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt;&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer<br>&gt;&gt;&gt; that these protocols kinda work backwards, so to speak. That is, if<br>&gt;&gt;&gt; I understand things correctly, rather than adding<br>&gt;&gt;&gt; functionality/semantics to the conforming type, conforming to a<br>&gt;&gt;&gt; literal protocol adds functionality/semantics to the corresponding<br>&gt;&gt;&gt; literal &quot;type&quot; (which we can&#39;t directly interact with because they<br>&gt;&gt;&gt; don&#39;t actually exist within Swift&#39;s type system).<br>&gt;&gt; <br>&gt;&gt; I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer<br>&gt;&gt; literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity:<br>&gt;&gt; &quot;you can go from a concrete type to a literal&quot; (rather than the<br>&gt;&gt; correct &quot;you can go from a literal to a concrete type&quot;).<br>&gt; <br>&gt; I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br></p><p>I am not either.  I want you and the core team to choose what you feel is the best name after considering all of the input and trust you to make the right decision.<br></p><p>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/7629d755/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>on Tue Jul 05 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br></p><p>&gt;&gt; On Jul 5, 2016, at 4:17 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Tue Jul 05 2016, Jordan Rose &lt;jordan_rose-AT-apple.com &lt;http://at-apple.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; [Proposal:<br>&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;&gt;<br>&gt;&gt;&gt; ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer<br>&gt;&gt;&gt;&gt; that these protocols kinda work backwards, so to speak. That is, if<br>&gt;&gt;&gt;&gt; I understand things correctly, rather than adding<br>&gt;&gt;&gt;&gt; functionality/semantics to the conforming type, conforming to a<br>&gt;&gt;&gt;&gt; literal protocol adds functionality/semantics to the corresponding<br>&gt;&gt;&gt;&gt; literal &quot;type&quot; (which we can&#39;t directly interact with because they<br>&gt;&gt;&gt;&gt; don&#39;t actually exist within Swift&#39;s type system).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer<br>&gt;&gt;&gt; literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity:<br>&gt;&gt;&gt; &quot;you can go from a concrete type to a literal&quot; (rather than the<br>&gt;&gt;&gt; correct &quot;you can go from a literal to a concrete type&quot;).<br>&gt;&gt; <br>&gt;&gt; I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br>&gt;<br>&gt; I am not either.  I want you and the core team to choose what you feel<br>&gt; is the best name after considering all of the input and trust you to<br>&gt; make the right decision.<br></p><p>Well, nobody who like “As” has objected to “By,” so let&#39;s go with that one.<br></p><p><br>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 5:12 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 05 2016, Matthew Johnson &lt;matthew-AT-anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Jul 5, 2016, at 4:17 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Tue Jul 05 2016, Jordan Rose &lt;jordan_rose-AT-apple.com &lt;http://at-apple.com/&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; [Proposal:<br>&gt;&gt;&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md<br>&gt;&gt;&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;&gt;<br>&gt;&gt;&gt;&gt; ]<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer<br>&gt;&gt;&gt;&gt;&gt; that these protocols kinda work backwards, so to speak. That is, if<br>&gt;&gt;&gt;&gt;&gt; I understand things correctly, rather than adding<br>&gt;&gt;&gt;&gt;&gt; functionality/semantics to the conforming type, conforming to a<br>&gt;&gt;&gt;&gt;&gt; literal protocol adds functionality/semantics to the corresponding<br>&gt;&gt;&gt;&gt;&gt; literal &quot;type&quot; (which we can&#39;t directly interact with because they<br>&gt;&gt;&gt;&gt;&gt; don&#39;t actually exist within Swift&#39;s type system).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer<br>&gt;&gt;&gt;&gt; literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity:<br>&gt;&gt;&gt;&gt; &quot;you can go from a concrete type to a literal&quot; (rather than the<br>&gt;&gt;&gt;&gt; correct &quot;you can go from a literal to a concrete type&quot;).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br>&gt;&gt; <br>&gt;&gt; I am not either.  I want you and the core team to choose what you feel<br>&gt;&gt; is the best name after considering all of the input and trust you to<br>&gt;&gt; make the right decision.<br>&gt; <br>&gt; Well, nobody who like “As” has objected to “By,” so let&#39;s go with that one.<br></p><p>Sounds good to me.  :-)<br></p><p>&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 3:17 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Jul 05 2016, Jordan Rose &lt;jordan_rose-AT-apple.com &lt;http://at-apple.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; [Proposal:<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;<br>&gt;&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0115-literal-syntax-protocols.md&gt;&gt;<br>&gt;&gt; ]<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 3, 2016, at 9:52, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 2, 2016, at 23:16, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Change it to &quot;Syntax.ExpressibleByIntegerLiteral&quot; and I&#39;d be onboard but<br>&gt;&gt;&gt;&gt; I don&#39;t think it would pass the DaveTest despite it being only 2 characters longer.[1]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah, I agree with &quot;By&quot; instead of &quot;As&quot;. It makes it a bit clearer<br>&gt;&gt;&gt; that these protocols kinda work backwards, so to speak. That is, if<br>&gt;&gt;&gt; I understand things correctly, rather than adding<br>&gt;&gt;&gt; functionality/semantics to the conforming type, conforming to a<br>&gt;&gt;&gt; literal protocol adds functionality/semantics to the corresponding<br>&gt;&gt;&gt; literal &quot;type&quot; (which we can&#39;t directly interact with because they<br>&gt;&gt;&gt; don&#39;t actually exist within Swift&#39;s type system).<br>&gt;&gt; <br>&gt;&gt; I like &quot;By&quot; much better than &quot;As&quot;. For me, &quot;expressible as integer<br>&gt;&gt; literal&quot; has the meaning we don&#39;t want, with no hint of ambiguity:<br>&gt;&gt; &quot;you can go from a concrete type to a literal&quot; (rather than the<br>&gt;&gt; correct &quot;you can go from a literal to a concrete type&quot;).<br>&gt; <br>&gt; I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p><p>\o/ 👍✨🎉<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/9306d9c1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  6, 2016 at 05:00:00pm</p></header><div class="content"><p>On 06.07.2016 0:17, Dave Abrahams via swift-evolution wrote:<br>&gt;<br>&gt; I&#39;m not opposed to “By” if many more people think it&#39;s clearer.<br>&gt;<br></p><p>FWIW, for me &quot;By&quot; is *much* more clearer.<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/426fbd3d9b662663dc5647b08c4e3410?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Anders Ha</string> &lt;hello at andersio.co&gt;<p>July  3, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 3 Jul 2016, at 3:53 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Jul 02 2016, Riley Testut &lt;rileytestut-AT-gmail.com &lt;http://rileytestut-at-gmail.com/&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; (My bad, accidentally hit send too early). <br>&gt;&gt; <br>&gt;&gt; That, or we could keep either the Convert or Express forms with<br>&gt;&gt; &quot;IntegerLiteralConverting&quot; or &quot;IntegerLiteralExpressing&quot;. And if we<br>&gt;&gt; decide &quot;express&quot; really is the best word to describe what happens, I<br>&gt;&gt; personally prefer &quot;IntegerLiteralExpressing&quot; to<br>&gt;&gt; &quot;ExpressibleAsIntegerLiteral&quot;, which doesn&#39;t feel at home with the<br>&gt;&gt; other Swift protocol names.<br>&gt; <br>&gt; It doesn&#39;t matter if it “feels at home” if it has the wrong meaning.<br>&gt; It&#39;s not that Integer can express an integer literal; It&#39;s that an<br>&gt; integer literal can express an Integer.<br></p><p>If &quot;IntegerLiteralExpressing&quot; describes the expressibility of a type as integer literals, &quot;IntegerLiteralAccepting&quot; would probably be the one describing the ability of a type to accept a integer literal.<br></p><p>&gt; <br>&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt; familiar word patterns as an arbiter of success.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Riley<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 2, 2016, at 10:49 AM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I kinda agree that these names still aren&#39;t the best. FWIW, I much<br>&gt;&gt;&gt; preferred the originals, even if they could be misleading.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt;&gt;&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;  init(_ from: T)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt;&gt;&gt;&gt; the ability to express a type as a particular kind of literal.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/e605414c/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July  2, 2016 at 05:00:00pm</p></header><div class="content"><p>To be honest, that’s why I suggested the idea of Literal.IntegerProtocol with the Protocol suffix.<br></p><p>If I’d read something like this extension Array : Literal.ArrayProtocol I won’t be confused what that protocol will do, because it doesn’t tell me the full behavior from its name. ErrorProtocol is very similar. To me it signals that it has something to do with the literal and arrays. If I’d look up the protocol and see that there is an associated type plus an initializer I’ll get the AHA moment and realize that with this protocol I can make an array literal into my type (or array in this example).<br></p><p>I’m not trying to push my personal suggestion. Decide however is best for the whole community. ;)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 2. Juli 2016 um 17:50:06, Riley Testut via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I kinda agree that these names still aren&#39;t the best. FWIW, I much preferred the originals, even if they could be misleading.<br></p><p>What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br></p><p>&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt;  <br>&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;  <br>&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt; init(_ from: T)<br>&gt;&gt; }<br>&gt;&gt;  <br>&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;  <br>&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt; the ability to express a type as a particular kind of literal.<br>&gt;  <br>&gt; --  <br>&gt; -Dave<br>&gt;  <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/9e5c5de7/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
