<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  5, 2016 at 10:00:00pm</p></header><div class="content"><p>on Sat Mar 05 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br></p><p>&gt;&gt; On Feb 25, 2016, at 7:29 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sun Feb 14 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;<br>&gt;&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented<br>&gt;&gt;&gt; approach to the protocol-oriented programming (POP) paradigm.  By this<br>&gt;&gt;&gt; statement I mean that they tell us that with POP we should begin our<br>&gt;&gt;&gt; design with the protocol rather than with the superclass as we did<br>&gt;&gt;&gt; with OOP however the protocol design tends to mirror the superclass<br>&gt;&gt;&gt; design of OOP.  They also tell us that we should use extensions to add<br>&gt;&gt;&gt; common functionality to types that conform to a protocol as we did<br>&gt;&gt;&gt; with superclasses in OOP.  While protocols and protocol extensions are<br>&gt;&gt;&gt; arguably two of the most important concepts of POP these tutorials<br>&gt;&gt;&gt; seem to be missing some other very important concepts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt;&gt; Object-Oriented design to highlight some of the conceptual<br>&gt;&gt;&gt; differences.  You can view the blog post here:<br>&gt;&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html<br>&gt;&gt;&gt; &lt;http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br>&gt;&gt; <br>&gt;&gt; While I agree that simply translating classes into protocols misses the<br>&gt;&gt; point, it seems as though your post still only deals with the<br>&gt;&gt; dynamically-polymorphic half of the protocol world.  I don&#39;t see any<br>&gt;&gt; generics in there at all, for example.  If you&#39;re really going for a<br>&gt;&gt; comprehensive view of POP, you need to get into that stuff too.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;<br>&gt; You are correct that POP is about so much more than what was covered<br>&gt; in this introductory post.  This post was written to be an<br>&gt; introduction to be Protocol-Oriented programming with a comparison to<br>&gt; Object-Oriented programming.<br>&gt;<br>&gt; POP was introduced to the World less than a year ago.  <br></p><p>Yes, I was there ;-)<br></p><p>&gt; Over the next few years, as Swift changes and matures; the<br>&gt; Protocol-Oriented programming paradigm will mature with it.  Hopefully<br>&gt; I can continue to write about these changes as well.<br></p><p>I hope so.<br></p><p>&gt; My book does cover POP and the technologies that make up POP more<br>&gt; extensively than this post does however I plan on writing several more<br>&gt; posts, as time allows with my day job, to expand not only on this post<br>&gt; but also on the material in my book.<br></p><p>I&#39;m definitely interested to see more.<br></p><p>Thanks for your work on this,<br>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c8bc65b07027beac76b917624be47611?s=50"></div><header><strong>Comparing POP to OOP</strong> from <string>Jon Hoffman</string> &lt;hoffman.jon at gmail.com&gt;<p>March  6, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Mar 6, 2016, at 1:08 AM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat Mar 05 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; On Feb 25, 2016, at 7:29 PM, Dave Abrahams via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Sun Feb 14 2016, Jon Hoffman &lt;swift-users-AT-swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Numerous tutorials that I have seen take a very Object-Oriented<br>&gt;&gt;&gt;&gt; approach to the protocol-oriented programming (POP) paradigm.  By this<br>&gt;&gt;&gt;&gt; statement I mean that they tell us that with POP we should begin our<br>&gt;&gt;&gt;&gt; design with the protocol rather than with the superclass as we did<br>&gt;&gt;&gt;&gt; with OOP however the protocol design tends to mirror the superclass<br>&gt;&gt;&gt;&gt; design of OOP.  They also tell us that we should use extensions to add<br>&gt;&gt;&gt;&gt; common functionality to types that conform to a protocol as we did<br>&gt;&gt;&gt;&gt; with superclasses in OOP.  While protocols and protocol extensions are<br>&gt;&gt;&gt;&gt; arguably two of the most important concepts of POP these tutorials<br>&gt;&gt;&gt;&gt; seem to be missing some other very important concepts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In this post I would like to compare Protocol-Oriented design to<br>&gt;&gt;&gt;&gt; Object-Oriented design to highlight some of the conceptual<br>&gt;&gt;&gt;&gt; differences.  You can view the blog post here:<br>&gt;&gt;&gt;&gt; http://masteringswift.blogspot.com/2016/02/pop-and-oop.html<br>&gt;&gt;&gt;&gt; &lt;http://masteringswift.blogspot.com/2016/02/pop-and-oop.html&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; While I agree that simply translating classes into protocols misses the<br>&gt;&gt;&gt; point, it seems as though your post still only deals with the<br>&gt;&gt;&gt; dynamically-polymorphic half of the protocol world.  I don&#39;t see any<br>&gt;&gt;&gt; generics in there at all, for example.  If you&#39;re really going for a<br>&gt;&gt;&gt; comprehensive view of POP, you need to get into that stuff too.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; You are correct that POP is about so much more than what was covered<br>&gt;&gt; in this introductory post.  This post was written to be an<br>&gt;&gt; introduction to be Protocol-Oriented programming with a comparison to<br>&gt;&gt; Object-Oriented programming.<br>&gt;&gt; <br>&gt;&gt; POP was introduced to the World less than a year ago.  <br>&gt; <br>&gt; Yes, I was there ;-)<br></p><p>Luckily you, I havenâ€™t been to a WWDC however living on a lake I am able to sit by the lake and watch the video at my leisure.  Not really sure which one is better :)<br></p><p>&gt; <br>&gt;&gt; Over the next few years, as Swift changes and matures; the<br>&gt;&gt; Protocol-Oriented programming paradigm will mature with it.  Hopefully<br>&gt;&gt; I can continue to write about these changes as well.<br>&gt; <br>&gt; I hope so.<br>&gt; <br>&gt;&gt; My book does cover POP and the technologies that make up POP more<br>&gt;&gt; extensively than this post does however I plan on writing several more<br>&gt;&gt; posts, as time allows with my day job, to expand not only on this post<br>&gt;&gt; but also on the material in my book.<br>&gt; <br>&gt; I&#39;m definitely interested to see more.<br>&gt; <br>&gt; Thanks for your work on this,<br></p><p>Thanks, I am definitely getting a number of idea about future posts based on our conversation.  <br></p><p>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
