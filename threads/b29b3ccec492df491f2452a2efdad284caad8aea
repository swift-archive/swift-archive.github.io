<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e828f637e91f7d986b7a79574dc0c45a?s=50"></div><header><strong>Proposal: &quot;inout&quot; in for loops</strong> from <string>Amir Michail</string> &lt;a.michail at me.com&gt;<p>December 11, 2015 at 08:00:00am</p></header><div class="content"><p>Examples:<br></p><p>var x=[1,2,3]<br>for inout v in x {<br>   v++<br>}<br></p><p>for inout d in d1, d2, d3 { // can’t use list here as it would result in copying of dictionaries<br>      d.removeAll()<br>}<br></p><p> <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/b29b8aea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: &quot;inout&quot; in for loops</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December 11, 2015 at 11:00:00pm</p></header><div class="content"><p>Hi Amir,<br></p><p>Please read up on the semantics of for-in loops &amp; generators, and if you think this is a good idea, then propose the actual language changes necessary to provide this behavior.  Thanks,<br></p><p>-Chris<br></p><p>&gt; On Dec 11, 2015, at 5:12 AM, Amir Michail via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Examples:<br>&gt; <br>&gt; var x=[1,2,3]<br>&gt; for inout v in x {<br>&gt;    v++<br>&gt; }<br>&gt; <br>&gt; for inout d in d1, d2, d3 { // can’t use list here as it would result in copying of dictionaries<br>&gt;       d.removeAll()<br>&gt; }<br>&gt; <br>&gt;  <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151211/000a5baf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal: &quot;inout&quot; in for loops</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>December 14, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 11, 2015, at 11:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi Amir,<br>&gt; <br>&gt; Please read up on the semantics of for-in loops &amp; generators, and if you think this is a good idea, then propose the actual language changes necessary to provide this behavior.  Thanks,<br>&gt; <br>&gt; -Chris<br></p><p>An &#39;inout&#39; for loop would be handy for some use cases, but would probably depend on a MutableCollectionType at minimum rather than any arbitrary SequenceType. You can implement a mutable version of &#39;forEach&#39; as a higher-order function extension on MutableCollectionType today:<br></p><p>extension MutableCollectionType {<br>  mutating func mutableForEach(body: (inout Generator.Element) throws -&gt; ()) rethrows {<br>    for index in indices {<br>      try body(&amp;self[index])<br>    }<br>  }<br>}<br></p><p>var x = [1,2,3]<br></p><p>x.mutableForEach { (inout y: Int) in y += 1 }<br></p><p>print(x)<br></p><p>If you want to propose this as a language feature, you could use a library implementation like this as a starting point for proposing how it would work.<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/60074023/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Proposal: &quot;inout&quot; in for loops</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December 14, 2015 at 12:00:00pm</p></header><div class="content"><p>&gt; On Dec 14, 2015, at 9:29 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; On Dec 11, 2015, at 11:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Amir,<br>&gt;&gt; <br>&gt;&gt; Please read up on the semantics of for-in loops &amp; generators, and if you think this is a good idea, then propose the actual language changes necessary to provide this behavior.  Thanks,<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt; <br>&gt; An &#39;inout&#39; for loop would be handy for some use cases, but would probably depend on a MutableCollectionType at minimum rather than any arbitrary SequenceType. You can implement a mutable version of &#39;forEach&#39; as a higher-order function extension on MutableCollectionType today:<br>&gt; <br>&gt; extension MutableCollectionType {<br>&gt;   mutating func mutableForEach(body: (inout Generator.Element) throws -&gt; ()) rethrows {<br>&gt;     for index in indices {<br>&gt;       try body(&amp;self[index])<br>&gt;     }<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; var x = [1,2,3]<br>&gt; <br>&gt; x.mutableForEach { (inout y: Int) in y += 1 }<br>&gt; <br>&gt; print(x)<br>&gt; <br>&gt; If you want to propose this as a language feature, you could use a library implementation like this as a starting point for proposing how it would work.<br></p><p>Interesting observation from when Doug and I were discussing this:  index + subscript is also cheaper than generators for non-mutating for loops, at least for certain kinds of Sequence.  At the very least, it requires less heroism from the mandatory optimizer to get C-like performance at -O0.  And the code pattern would *very* closely parallel what we would presumably emit for an mutating for loop.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151214/76aefde4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
