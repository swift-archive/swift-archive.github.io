<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0048: Generic Type Aliases</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>March 24, 2016 at 09:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br></p><p>Proposal link:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>Reply text<br></p><p>Other replies<br> &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>What is your evaluation of the proposal?<br>Is the problem being addressed significant enough to warrant a change to Swift?<br>Does this proposal fit well with the feel and direction of Swift?<br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>Thank you,<br></p><p>Doug Gregor<br></p><p>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160324/c5bb5192/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6dee842b5eb2fd94ffa79edac00b440e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Chris Wagner</string> &lt;cwagner118 at gmail.com&gt;<p>March 24, 2016 at 10:00:00am</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1, originally I hadn’t seen the value, but ran into wanting this just the other day.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Very much so.<br></p><p><br>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>NA<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>Pretty brief, read through the proposal early on and was reaching for this functionality a few days ago. <br></p><p><br></p><p>&gt; On Mar 24, 2016, at 9:54 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/57a883d0/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Review] SE-0048: Generic Type Aliases</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>+1.  Especially for forcing the alias side of the declaration to explicitly keep track of type constraints.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes. Previously, one could &quot;work around&quot; this by declaring a 0-case generic enum with associated type &quot;projections&quot;.  I&#39;m glad to see that pattern find a formal place in the language.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>This proposal brings Swift up to par with languages that allow any kind of &quot;alias&quot;ing of types, whether that be C++ or Haskell [in a cleaner way than the former].<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>In-depth study.  I actually took a crack at an implementation a while ago!<br></p><p>~Robert Widmann<br></p><p>2016/03/24 12:54、Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/cbcbc385/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9df2c06d044639a33128b3b66f0b6509?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Juan Ignacio Laube</string> &lt;juanignaciolaube at gmail.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>What is your evaluation of the proposal?<br>A strong +1 on this.<br></p><p>Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br></p><p>If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>N/A<br></p><p>How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>In-depth study, I ran into a situation where I needed something like this some time ago.<br></p><p><br>&gt; On Mar 24, 2016, at 1:54 PM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/c576cdd4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>March 24, 2016 at 12:00:00pm</p></header><div class="content"><p>Strong +1 from me, too. With the exact response as Juan. It is among the top 10 on my wish list.<br></p><p>&gt; On Mar 24, 2016, at 11:18 AM, Juan Ignacio Laube via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; A strong +1 on this.<br>&gt; <br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Yes.<br>&gt; <br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; Yes.<br>&gt; <br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; N/A<br>&gt; <br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; In-depth study, I ran into a situation where I needed something like this some time ago.<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 24, 2016, at 1:54 PM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt;&gt; <br>&gt;&gt; Proposal link:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md&gt;<br>&gt;&gt; Reply text<br>&gt;&gt; <br>&gt;&gt; Other replies<br>&gt;&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; Doug Gregor<br>&gt;&gt; <br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/e40e44db/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0048: Generic Type Aliases</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 25, 2016 at 07:00:00am</p></header><div class="content"><p>&gt;<br>&gt;<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;<br>&gt; Really useful addition<br>&gt;<br>&gt;<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;<br>&gt; Yes, it is a limitation of the current language that you can&#39;t do this.<br>&gt; You can get round the limitation using a struct but type alias is a neater<br>&gt; solution.<br>&gt;<br>&gt;<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>&gt; Yes, you would naturally expect this to be possible<br>&gt;<br>&gt;<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;<br>&gt; No<br>&gt;<br>&gt;<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; Followed swift-evolution discussions<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/fc344722/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March 25, 2016 at 12:00:00am</p></header><div class="content"><p>Strong +1 here too.<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>&gt; On 24 Mar 2016, at 17:54, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager. When replying, please try to keep the proposal link at the top of the message:<br>&gt; <br>&gt; Proposal link:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reply text<br>&gt; <br>&gt; Other replies<br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; What is your evaluation of the proposal?<br>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/d26841b6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>[Review] SE-0048: Generic Type Aliases</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>March 25, 2016 at 12:00:00am</p></header><div class="content"><p>+1 for reasons already mentioned by others.<br></p><p>On Thu, Mar 24, 2016 at 5:54 PM, Douglas Gregor via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through<br>&gt; March 29, 2016. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at the<br>&gt; top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt;<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;<br>&gt; &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;    - What is your evaluation of the proposal?<br>&gt;    - Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br>&gt;    - Does this proposal fit well with the feel and direction of Swift?<br>&gt;    - If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br>&gt;    - How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; Doug Gregor<br>&gt;<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>bitCycle AB | Smedjegatan 12 | 742 32 Östhammar | Sweden<br>http://www.bitcycle.com/<br>Phone: +46-73-753 24 62<br>E-mail: jens at bitcycle.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160325/652f36e6/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>March 24, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>Big +1.  I would prefer to see it go further to allow arbitrary constraints, but it is a big step forward and that can come in the future.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br>Yes<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>Yes, it is very similar.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>This is a feature I have wanted since the beginning.  I followed the discussion and read the proposal.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; Thank you,<br>&gt; <br>&gt; Doug Gregor<br>&gt; <br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/5dc5b590/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 25, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br></p><p>&gt; 	• What is your evaluation of the proposal?<br></p><p>I think it&#39;s a good idea that will make a lot of code clearer.<br></p><p>I agree with the decision not to support additional constraints on the generic type. Typealiases should be just what it says in the name: aliases. It should not be possible to constrain a type with a typealias in a way you could not by substituting the same type name in directly.<br></p><p>In other words, I don&#39;t think this:<br></p><p>	typealias ComparableArray&lt;T where T : Comparable&gt; = Array&lt;T&gt;<br></p><p>Makes any more sense than this:<br></p><p>	Array&lt;T where T: Comparable&gt;<br></p><p>&gt; 	• Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. The &quot;proposed solution&quot; examples are all quite sensible.<br></p><p>&gt; 	• Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	• If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I haven&#39;t used any such languages enough to ever use an equivalent feature.<br></p><p>&gt; 	• How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 30, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br></p><p>&gt;    • What is your evaluation of the proposal?<br></p><p>+1<br></p><p>I think it is a very important feature to enable working with more complicated generic types while maintaining readability.<br></p><p>I do not agree with the decision not to support additional constraints on the generic type. I do have the strong feeling that this would be useful. At the moment it is not more than a feeling, though, without a compelling example, and as it can easily be added later I&#39;m fine with a first implementation as proposed.<br></p><p>&gt;    • Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, definitely.<br></p><p>&gt;    • Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;    • If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Haskell has generic typealiases which are quite commonly used.<br></p><p>&gt;    • How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>-Thorsten<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>March 26, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br>+1<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>I have not used a language with a similar feature.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read thoroughly.<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160326/fa248c6c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>on Thu Mar 24 2016, Douglas Gregor &lt;dgregor-AT-apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through March 29, 2016. The proposal is available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager. When replying, please try to keep the proposal link at<br>&gt; the top of the message:<br>&gt;<br>&gt; Proposal link:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; Reply text<br>&gt;<br>&gt; Other replies<br>&gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the<br>&gt; direction of Swift. When writing your review, here are some questions<br>&gt; you might want to answer in your review:<br>&gt;<br>&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; Is the problem being addressed significant enough to warrant a change<br>&gt; to Swift?<br></p><p>That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>says, generic type aliases fill an obvious functional gap.  But what<br>real-world problems are they solving and why should adding them be a<br>priority?<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 28, 2016 at 09:00:00pm</p></header><div class="content"><p>On Mar 24, 2016, at 1:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change<br>&gt;&gt; to Swift?<br>&gt; <br>&gt; That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>&gt; says, generic type aliases fill an obvious functional gap.  But what<br>&gt; real-world problems are they solving<br></p><p>They allow you to make aliases for generic types, e.g. from the document:<br></p><p>	typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>	typealias DictionaryOfStrings&lt;T : Hashable&gt; = Dictionary&lt;T, String&gt;<br>	typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>	typealias Vec3&lt;T&gt; = (T, T, T)<br>	typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br></p><p>It is an inconsistency in the language that you can create aliases for non-generic types, but that you can’t make them for generic ones.  Perhaps you are objecting to typealias as a feature at all?<br></p><p>&gt; and why should adding them be a priority?<br></p><p>It is part of the general goal of completing the generics system, a stated Swift 3 goal.<br></p><p>-Chris<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>March 29, 2016 at 12:00:00am</p></header><div class="content"><p>To give a motivating example, we ported a streaming library that involved a highly generic type called Proxy&lt;A, B, X, Y, R&gt; (here https://github.com/typelift/Aquifer/blob/master/Aquifer/Proxy.swift#L62) that is built in such a way that its various generic aliases (written below in the enum&#39;s typealiases) impart upon it completely different semantics and use cases depending on how the underlying type is specialized.  Without generic aliases, we&#39;re forced to use the hacks in that linked file and expose methods that suggest a particular semantics by reaching for the right enum and asking for the respective typealias.  This way, we can cut out the middle man and just get on with it.<br></p><p>So, even if this feature weren&#39;t here there is still a way to do it in the language as it stands.  But for something that is so obviously a gap in the implementation, not including it seems a waste, don&#39;t you think?<br></p><p>~Robert Widmann<br></p><p>2016/03/29 0:28、Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; On Mar 24, 2016, at 1:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt; <br>&gt;&gt; That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>&gt;&gt; says, generic type aliases fill an obvious functional gap.  But what<br>&gt;&gt; real-world problems are they solving<br>&gt; <br>&gt; They allow you to make aliases for generic types, e.g. from the document:<br>&gt; <br>&gt;    typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt;    typealias DictionaryOfStrings&lt;T : Hashable&gt; = Dictionary&lt;T, String&gt;<br>&gt;    typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt;    typealias Vec3&lt;T&gt; = (T, T, T)<br>&gt;    typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br>&gt; <br>&gt; It is an inconsistency in the language that you can create aliases for non-generic types, but that you can’t make them for generic ones.  Perhaps you are objecting to typealias as a feature at all?<br>&gt; <br>&gt;&gt; and why should adding them be a priority?<br>&gt; <br>&gt; It is part of the general goal of completing the generics system, a stated Swift 3 goal.<br>&gt; <br>&gt; -Chris<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 29, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Mar 28 2016, Chris Lattner &lt;clattner-AT-apple.com&gt; wrote:<br></p><p>&gt; On Mar 24, 2016, at 1:18 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change<br>&gt;&gt;&gt; to Swift?<br>&gt;&gt; <br>&gt;&gt; That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>&gt;&gt; says, generic type aliases fill an obvious functional gap.  But what<br>&gt;&gt; real-world problems are they solving<br>&gt;<br>&gt; They allow you to make aliases for generic types, e.g. from the document:<br>&gt;<br>&gt; 	typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt; 	typealias DictionaryOfStrings&lt;T : Hashable&gt; = Dictionary&lt;T, String&gt;<br>&gt; 	typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt; 	typealias Vec3&lt;T&gt; = (T, T, T)<br>&gt; 	typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br></p><p>I know what the feature allows.  What I don&#39;t see is any burning need<br>for it.<br></p><p>&gt; It is an inconsistency in the language that you can create aliases for<br>&gt; non-generic types, but that you can’t make them for generic ones.<br>&gt; Perhaps you are objecting to typealias as a feature at all?<br></p><p>I&#39;m not objecting at all.  It&#39;s an obvious thing for us to do, and we<br>should do it at some point.  It just doesn&#39;t seem very impactful or<br>crucial.<br></p><p>&gt;&gt; and why should adding them be a priority?<br>&gt;<br>&gt; It is part of the general goal of completing the generics system, a<br>&gt; stated Swift 3 goal.<br></p><p>True.  I just wonder if we should be frying bigger fish.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>March 29, 2016 at 11:00:00pm</p></header><div class="content"><p>This feature removes the need, in specific cases, for wrapping a function<br>in a struct &#39;just for&#39; the ability to use generics.<br></p><p>```swift<br>typealias Parser&lt;Output&gt; = String -&gt; Output<br></p><p>// can now, sometimes, replace<br></p><p>struct Parser&lt;Output&gt; {<br>    let transform: String -&gt; Output<br>    init(transform: String -&gt; Output) {<br>        self.transform = transform<br>    }<br>```<br></p><p>Both are useful but being forced to use the second declaration when the<br>first would suffice is frustrating.<br></p><p><br></p><p>On Tue, Mar 29, 2016 at 7:14 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Mar 28 2016, Chris Lattner &lt;clattner-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Mar 24, 2016, at 1:18 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Is the problem being addressed significant enough to warrant a change<br>&gt; &gt;&gt;&gt; to Swift?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>&gt; &gt;&gt; says, generic type aliases fill an obvious functional gap.  But what<br>&gt; &gt;&gt; real-world problems are they solving<br>&gt; &gt;<br>&gt; &gt; They allow you to make aliases for generic types, e.g. from the document:<br>&gt; &gt;<br>&gt; &gt;       typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<br>&gt; &gt;       typealias DictionaryOfStrings&lt;T : Hashable&gt; = Dictionary&lt;T, String&gt;<br>&gt; &gt;       typealias IntFunction&lt;T&gt; = (T) -&gt; Int<br>&gt; &gt;       typealias Vec3&lt;T&gt; = (T, T, T)<br>&gt; &gt;       typealias BackwardTriple&lt;T1,T2,T3&gt; = (T3, T2, T1)<br>&gt;<br>&gt; I know what the feature allows.  What I don&#39;t see is any burning need<br>&gt; for it.<br>&gt;<br>&gt; &gt; It is an inconsistency in the language that you can create aliases for<br>&gt; &gt; non-generic types, but that you can’t make them for generic ones.<br>&gt; &gt; Perhaps you are objecting to typealias as a feature at all?<br>&gt;<br>&gt; I&#39;m not objecting at all.  It&#39;s an obvious thing for us to do, and we<br>&gt; should do it at some point.  It just doesn&#39;t seem very impactful or<br>&gt; crucial.<br>&gt;<br>&gt; &gt;&gt; and why should adding them be a priority?<br>&gt; &gt;<br>&gt; &gt; It is part of the general goal of completing the generics system, a<br>&gt; &gt; stated Swift 3 goal.<br>&gt;<br>&gt; True.  I just wonder if we should be frying bigger fish.<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/3d2837d4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/89e9af7c5754673419c8fac930319700?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Russ Bishop</string> &lt;xenadu at gmail.com&gt;<p>March 29, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Mar 29, 2016, at 10:14 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I&#39;m not objecting at all.  It&#39;s an obvious thing for us to do, and we<br>&gt; should do it at some point.  It just doesn&#39;t seem very impactful or<br>&gt; crucial.<br></p><p>I use typealiases as a form of documentation for an API, not just for convenience. The fact that Xcode parses the doc comments on them is also quite useful. <br></p><p><br>Russ<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/e5d41329/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>[Review] SE-0048: Generic Type Aliases</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>March 30, 2016 at 08:00:00am</p></header><div class="content"><p>Personally I find typealias useful for giving a friendly name to long types<br>and informative names to types in general. This applies to generic types as<br>much as non-generic, e.g.:<br></p><p>    typealias Vec4&lt;T: Numerical&gt; = (T, T, T, T)<br>    typealias Mat4&lt;T: Numerical&gt; = (Vec&lt;T&gt;, Vec&lt;T&gt;, Vec&lt;T&gt;, Vec&lt;T&gt;)<br></p><p>Further I would like to be able to add additional constraints that are not<br>part of the rhs of the alias, e.g.:<br></p><p>    typealias VecSparse&lt;T: Numerical&gt; = Dictionary&lt;Int, T&gt;<br>    typealias MatSparse&lt;T: Numerical&gt; = Dictionary&lt;Int, VecSparse&lt;T&gt;&gt;<br></p><p>On Friday, 25 March 2016, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Mar 24 2016, Douglas Gregor &lt;dgregor-AT-apple.com&gt; wrote:<br>&gt;<br>&gt; &gt; Hello Swift community,<br>&gt; &gt;<br>&gt; &gt; The review of SE-0048 &quot;Generic Type Aliases&quot; begins now and runs through<br>&gt; March 29, 2016. The proposal is available here:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; &gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; or, if you would like to keep your feedback private, directly to the<br>&gt; &gt; review manager. When replying, please try to keep the proposal link at<br>&gt; &gt; the top of the message:<br>&gt; &gt;<br>&gt; &gt; Proposal link:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md<br>&gt; &gt; Reply text<br>&gt; &gt;<br>&gt; &gt; Other replies<br>&gt; &gt;  &lt;https://github.com/apple/swift-evolution#what-goes-into-a-review-1&gt;What<br>&gt; goes into a review?<br>&gt; &gt;<br>&gt; &gt; The goal of the review process is to improve the proposal under review<br>&gt; &gt; through constructive criticism and, eventually, determine the<br>&gt; &gt; direction of Swift. When writing your review, here are some questions<br>&gt; &gt; you might want to answer in your review:<br>&gt; &gt;<br>&gt; &gt; What is your evaluation of the proposal?<br>&gt; &gt;<br>&gt; &gt; Is the problem being addressed significant enough to warrant a change<br>&gt; &gt; to Swift?<br>&gt;<br>&gt; That&#39;s my biggest question about this proposal.  Yes, as the proposal<br>&gt; says, generic type aliases fill an obvious functional gap.  But what<br>&gt; real-world problems are they solving and why should adding them be a<br>&gt; priority?<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>-- <br>-- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160330/97310737/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0048: Generic Type Aliases</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>March 29, 2016 at 10:00:00pm</p></header><div class="content"><p>On Thu, Mar 24, 2016, at 09:54 AM, Douglas Gregor wrote:<br>&gt; What is your evaluation of the proposal?<br> <br>Strong +1 here. I&#39;ve wanted this since day one. In fact, I filed ticket<br>SR-64 to cover adding this a while ago.<br></p><p>&gt;  * Is the problem being addressed significant enough to warrant a<br>&gt;    change to Swift?<br> <br>Yes, the lack of generic typealiases can be a real annoyance.<br></p><p>&gt;  * Does this proposal fit well with the feel and direction of Swift?<br> <br>Yes.<br></p><p>&gt;  * If you have used other languages or libraries with a similar<br>&gt;    feature, how do you feel that this proposal compares to those?<br> <br>Both Haskell and Rust have generic typealiases and it works pretty well.<br></p><p>&gt;  * How much effort did you put into your review? A glance, a quick<br>&gt;    reading, or an in-depth study?<br> <br>A quick reading, plus I was involved in the original swift-<br>evolution thread.<br> <br>-Kevin Ballard<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160329/e7d099db/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
