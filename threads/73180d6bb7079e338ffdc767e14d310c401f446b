<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 20, 2016 at 10:00:00am</p></header><div class="content"><p>on Fri Jan 15 2016, Zach Waldowski via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br></p><p>&gt; Charles -<br>&gt;<br>&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; non-descriptive,<br></p><p>The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>(and secondarily, declarations) that need to be clear.  Trying to make<br>the names of methods descriptive by themselves just hurts readability at<br>the use-site.<br></p><p>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 20, 2016 at 06:00:00pm</p></header><div class="content"><p>Thanks, Dave.<br></p><p>I definitely wasn&#39;t hard to convince on this. The change has already<br>been made to the proposal, its PR, and the pending PR to the stdlib.<br></p><p>Cheers!<br>Zach Waldowski<br>zach at waldowski.me<br></p><p>On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>wrote:<br>&gt; <br>&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; <br>&gt; &gt; Charles -<br>&gt; &gt;<br>&gt; &gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt; non-descriptive,<br>&gt; <br>&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; the use-site.<br>&gt; <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>January 26, 2016 at 06:00:00pm</p></header><div class="content"><p>Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>posted the PR to Swift itself:<br></p><p>   https://github.com/apple/swift/pull/1109<br></p><p>The existing proposal PR:<br></p><p>   https://github.com/apple/swift-evolution/pull/101<br></p><p>-- <br>Sincerely,<br>  Zachary Waldowski<br>  zach at waldowski.me<br></p><p>On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>wrote:<br>&gt; Thanks, Dave.<br>&gt; <br>&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt; <br>&gt; Cheers!<br>&gt; Zach Waldowski<br>&gt; zach at waldowski.me<br>&gt; <br>&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; &gt; Charles -<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt; &gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt; &gt; non-descriptive,<br>&gt; &gt; <br>&gt; &gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; &gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; &gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; &gt; the use-site.<br>&gt; &gt; <br>&gt; &gt; -Dave<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>February  1, 2016 at 12:00:00am</p></header><div class="content"><p>It occurred to me that this proposal provides a way to efficiently initialize Strings from UTF code unit sequences, but it doesn’t provide a way to *append* code unit sequences to existing strings. String has an existing method to append Character sequences:<br></p><p>String.appendContentsOf&lt;S : SequenceType where S.Generator.Element == Character&gt;(_: S)<br></p><p>The equivalent for code units would presumably be:<br></p><p>String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding: Encoding.Type)<br></p><p>Is there any interest in adding that to the proposal? It would only have a lot of value if it could be implemented in a more efficient way than just calling String.Append() for each decoded Character. From looking at the code, that might not be straightforward.<br></p><p>—CK<br></p><p>&gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt; posted the PR to Swift itself:<br>&gt; <br>&gt;   https://github.com/apple/swift/pull/1109<br>&gt; <br>&gt; The existing proposal PR:<br>&gt; <br>&gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt; <br>&gt; -- <br>&gt; Sincerely,<br>&gt;   Zachary Waldowski<br>&gt;   zach at waldowski.me<br>&gt; <br>&gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt; wrote:<br>&gt;&gt; Thanks, Dave.<br>&gt;&gt; <br>&gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt;&gt; <br>&gt;&gt; Cheers!<br>&gt;&gt; Zach Waldowski<br>&gt;&gt; zach at waldowski.me<br>&gt;&gt; <br>&gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Charles -<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt;&gt;&gt;&gt; non-descriptive,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt;&gt;&gt; the use-site.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[Draft proposal] Faster/lower-level external String initialization</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>February  1, 2016 at 09:00:00am</p></header><div class="content"><p>Due to the semantics of _StringCore and _StringBuffer (as far as I<br>understand them), such a method would not be more efficient than<br>creating another String with the new initializer and concatenating the<br>two, and would require more significant plumbing changes to<br>_StringBuffer.<br></p><p>It would be good to shop around for this proposal, though; maybe if<br>someone on the core team wants to chime in.<br></p><p>Cheers,<br>Zachary Waldowski<br>zach at waldowski.me<br></p><p>On Mon, Feb 1, 2016, at 03:07 AM, Charles Kissinger wrote:<br>&gt; It occurred to me that this proposal provides a way to efficiently<br>&gt; initialize Strings from UTF code unit sequences, but it doesn’t provide a<br>&gt; way to *append* code unit sequences to existing strings. String has an<br>&gt; existing method to append Character sequences:<br>&gt; <br>&gt; String.appendContentsOf&lt;S : SequenceType where S.Generator.Element ==<br>&gt; Character&gt;(_: S)<br>&gt; <br>&gt; The equivalent for code units would presumably be:<br>&gt; <br>&gt; String.appendContentsOf&lt;S : SequenceType, Encoding: UnicodeCodecType<br>&gt; where Encoding.CodeUnit == Input.Generator.Element&gt;(_: S, encoding:<br>&gt; Encoding.Type)<br>&gt; <br>&gt; Is there any interest in adding that to the proposal? It would only have<br>&gt; a lot of value if it could be implemented in a more efficient way than<br>&gt; just calling String.Append() for each decoded Character. From looking at<br>&gt; the code, that might not be straightforward.<br>&gt; <br>&gt; —CK<br>&gt; <br>&gt; &gt; On Jan 26, 2016, at 3:14 PM, Zach Waldowski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; Since this seems to have gone quiet, and the code was already done, I&#39;ve<br>&gt; &gt; posted the PR to Swift itself:<br>&gt; &gt; <br>&gt; &gt;   https://github.com/apple/swift/pull/1109<br>&gt; &gt; <br>&gt; &gt; The existing proposal PR:<br>&gt; &gt; <br>&gt; &gt;   https://github.com/apple/swift-evolution/pull/101<br>&gt; &gt; <br>&gt; &gt; -- <br>&gt; &gt; Sincerely,<br>&gt; &gt;   Zachary Waldowski<br>&gt; &gt;   zach at waldowski.me<br>&gt; &gt; <br>&gt; &gt; On Wed, Jan 20, 2016, at 06:08 PM, Zach Waldowski via swift-evolution<br>&gt; &gt; wrote:<br>&gt; &gt;&gt; Thanks, Dave.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; I definitely wasn&#39;t hard to convince on this. The change has already<br>&gt; &gt;&gt; been made to the proposal, its PR, and the pending PR to the stdlib.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Cheers!<br>&gt; &gt;&gt; Zach Waldowski<br>&gt; &gt;&gt; zach at waldowski.me<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; On Wed, Jan 20, 2016, at 01:23 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; on Fri Jan 15 2016, Zach Waldowski via swift-evolution<br>&gt; &gt;&gt;&gt; &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg-AT-public.gmane.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Charles -<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; I shared the same concern, and mention them in the proposal. I thought<br>&gt; &gt;&gt;&gt;&gt; `decode(_:as:)` to be too simple to the point of being<br>&gt; &gt;&gt;&gt;&gt; non-descriptive,<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; The names of methods don&#39;t need to be descriptive.  It&#39;s the use-sites<br>&gt; &gt;&gt;&gt; (and secondarily, declarations) that need to be clear.  Trying to make<br>&gt; &gt;&gt;&gt; the names of methods descriptive by themselves just hurts readability at<br>&gt; &gt;&gt;&gt; the use-site.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; -Dave<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
