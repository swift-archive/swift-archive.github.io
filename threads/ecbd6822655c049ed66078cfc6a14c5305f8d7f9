<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Idea] A 128-bit unsigned integer value type</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 25, 2016 at 03:00:00pm</p></header><div class="content"><p>on Sat May 21 2016, Károly Lőrentey &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 2016-05-17 14:30:36 +0000, Muse M via swift-evolution said:<br>&gt;<br>&gt;&gt; Most programming languages does have 128-bit of type except Swift.<br>&gt;<br>&gt; I don&#39;t think there is huge demand for a full-blown Int128 type in the<br>&gt; standard library, but it would be nice to have double-width<br>&gt; multiplication &amp; division methods in Swift&#39;s existing integer types. I<br>&gt; assume LLVM has intrinsics for this that compile down to single<br>&gt; instructions on x86_64.<br>&gt;<br>&gt; This would speed up some 64-bit fixed-point operations with 128-bit<br>&gt; temporaries (such as Mach timestamp scaling arithmetic) and allow pure<br>&gt; Swift arbitrary-precision integer packages to provide faster<br>&gt; operations.<br>&gt;<br>&gt; I currently need to emulate full-width multiplication/division with<br>&gt; code such as this:<br>&gt;<br>&gt; https://github.com/lorentey/BigInt/blob/master/Sources/BigDigit.swift#L102-L177 <br>&gt;<br>&gt; A 128/64=64 full-width division done this way requires 2 single-width<br>&gt; divisions and 6 multiplications. I&#39;d love to replace this with a<br>&gt; single full-width x86 DIV instruction.<br></p><p>One reason we don&#39;t have Int128 everywhere is that we don&#39;t currently<br>have the necessary primitives on 32-bit systems.<br></p><p>However, when the integers protocol proposal that Max Moiseev is working on<br>comes out, it will include an implementation of a <br></p><p>  DoublePrecision&lt;T:Integer&gt;<br></p><p>either as public API or in the tests (I forget which).  The intention is<br>that on 32-bit platforms we can eventually define Int128 as a typealias<br>for DoublePrecision&lt;Int64&gt;.  We can also introduce Int256, for which I<br>know there is an audience.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>[Idea] A 128-bit unsigned integer value type</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>May 26, 2016 at 02:00:00pm</p></header><div class="content"><p>FWIW: here is the link to the prototype https://github.com/apple/swift/blob/master/test/Prototypes/Integers.swift.gyb<br></p><p>Max<br></p><p>&gt; On May 25, 2016, at 3:53 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Sat May 21 2016, Károly Lőrentey &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On 2016-05-17 14:30:36 +0000, Muse M via swift-evolution said:<br>&gt;&gt; <br>&gt;&gt;&gt; Most programming languages does have 128-bit of type except Swift.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t think there is huge demand for a full-blown Int128 type in the<br>&gt;&gt; standard library, but it would be nice to have double-width<br>&gt;&gt; multiplication &amp; division methods in Swift&#39;s existing integer types. I<br>&gt;&gt; assume LLVM has intrinsics for this that compile down to single<br>&gt;&gt; instructions on x86_64.<br>&gt;&gt; <br>&gt;&gt; This would speed up some 64-bit fixed-point operations with 128-bit<br>&gt;&gt; temporaries (such as Mach timestamp scaling arithmetic) and allow pure<br>&gt;&gt; Swift arbitrary-precision integer packages to provide faster<br>&gt;&gt; operations.<br>&gt;&gt; <br>&gt;&gt; I currently need to emulate full-width multiplication/division with<br>&gt;&gt; code such as this:<br>&gt;&gt; <br>&gt;&gt; https://github.com/lorentey/BigInt/blob/master/Sources/BigDigit.swift#L102-L177 <br>&gt;&gt; <br>&gt;&gt; A 128/64=64 full-width division done this way requires 2 single-width<br>&gt;&gt; divisions and 6 multiplications. I&#39;d love to replace this with a<br>&gt;&gt; single full-width x86 DIV instruction.<br>&gt; <br>&gt; One reason we don&#39;t have Int128 everywhere is that we don&#39;t currently<br>&gt; have the necessary primitives on 32-bit systems.<br>&gt; <br>&gt; However, when the integers protocol proposal that Max Moiseev is working on<br>&gt; comes out, it will include an implementation of a <br>&gt; <br>&gt;  DoublePrecision&lt;T:Integer&gt;<br>&gt; <br>&gt; either as public API or in the tests (I forget which).  The intention is<br>&gt; that on 32-bit platforms we can eventually define Int128 as a typealias<br>&gt; for DoublePrecision&lt;Int64&gt;.  We can also introduce Int256, for which I<br>&gt; know there is an audience.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160526/0e98b9ba/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
