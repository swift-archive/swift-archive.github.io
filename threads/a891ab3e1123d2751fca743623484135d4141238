<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 06:00:00pm</p></header><div class="content"><p>on Thu Mar 24 2016, Andrey Tarantsov &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt;&gt; The new default is better for:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - (A) classes that provide both mutating and non-mutating methods;<br>&gt;&gt;&gt; - (B) methods where forgetting to use the result produces a bug (a<br>&gt;&gt;&gt; download task that needs to be resumed, an alert that needs to be<br>&gt;&gt;&gt; displayed, a listener that needs to be stored somewhere, etc).<br>&gt;&gt; <br>&gt;&gt; To be clear, the mistake this warning prevents is the unintentional call<br>&gt;&gt; to a non-mutating method when one thinks one is mutating the receiver.<br>&gt;&gt; This scenario can arise independently of A or B.<br>&gt;<br>&gt; Sure. Although if a type only has mutating or non-mutating methods,<br>&gt; but not both, the mistake will probably be immediately apparent, <br></p><p>Why do you think so?<br></p><p>&gt; so the diagnostic doesn&#39;t win you much (except maybe in a newbie<br>&gt; learning environment, which is an important use case as well).<br>&gt;<br>&gt; A.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>March 27, 2016 at 03:00:00pm</p></header><div class="content"><p>In the proposal there is no mention of generic functions.<br>Take a map function of a Wrapper:<br></p><p>Wrapper&lt;T&gt; {<br>        func map&lt;U&gt;(transform: T -&gt; U) -&gt; U { ... }<br>}<br></p><p>let intWrapper = Wrapper(1)<br>intWrapper.map{ print($0) } // this returns Void<br></p><p><br>Should the last line be inferred to have a discardable result?<br></p><p>In my opinion a function which returns a generic result should warn for unused results in every case. Here, &quot;map&quot; gets a closure with side effects which is very unusual and should be handled with another function like &quot;apply&quot;.<br></p><p><br>- Maximilian<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0047 Defaulting non-Void functions so they warn on unused results</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 27, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Mar 27, 2016, at 6:33 AM, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In the proposal there is no mention of generic functions.<br>&gt; Take a map function of a Wrapper:<br>&gt; <br>&gt; Wrapper&lt;T&gt; {<br>&gt;        func map&lt;U&gt;(transform: T -&gt; U) -&gt; U { ... }<br>&gt; }<br>&gt; <br>&gt; let intWrapper = Wrapper(1)<br>&gt; intWrapper.map{ print($0) } // this returns Void<br>&gt; Should the last line be inferred to have a discardable result?<br></p><p>Yes, this will be inferred to return Void, so no warning will be produced.<br></p><p>-Chris<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
