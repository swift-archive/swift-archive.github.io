<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1164c6dc99e3ea586eaaeb50289bd95c?s=50"></div><header><strong>Proposal Idea: Use of =?utf-8?Q?=3D=3D_?=outside of comparisons should be treated as an error.</strong> from <string>Jared Sinclair</string> &lt;desk at jaredsinclair.com&gt;<p>January 11, 2016 at 03:00:00pm</p></header><div class="content"><p>Consider the following:<br></p><p>protocol Updatable {<br>    func update(state: Bool)<br>}<br></p><p>class Thing: Updatable {<br>    private var enabled = false<br>    <br>    func update(state: Bool) {<br>        self.enabled == state<br>    }<br>}<br></p><p>The obvious intention is to set self.enabled to the incoming value of state. However, it’s easy to accidentally type a second equals sign. The effect of this typo is self.enabled is never updated, leading to a run-time bug that could be difficult to diagnose. <br></p><p>This typo doesn’t generate any errors or warnings. I can’t think of a valid reason to use the equals function outside of comparisons. If the compiler instead treated this typo as an error, the mistake would be trivial to identify and fix:<br></p><p>protocol Updatable {<br>    func update(state: Bool)<br>}<br></p><p>class Thing: Updatable {<br>    private var enabled = false<br>    <br>    func update(state: Bool) {<br>        self.enabled == state // Error: `==` may not be used outside of comparisons<br>    }<br>}<br></p><p>-- <br>Jared Sinclair<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160111/1f497d9f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal Idea: Use of == outside of comparisons should be treated as an error.</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 11, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 11, 2016, at 12:39 PM, Jared Sinclair via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Consider the following:<br>&gt; <br>&gt; protocol Updatable {<br>&gt;     func update(state: Bool)<br>&gt; }<br>&gt; <br>&gt; class Thing: Updatable {<br>&gt;     private var enabled = false<br>&gt;     <br>&gt;     func update(state: Bool) {<br>&gt;         self.enabled == state<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; The obvious intention is to set self.enabled to the incoming value of state. However, it’s easy to accidentally type a second equals sign. The effect of this typo is self.enabled is never updated, leading to a run-time bug that could be difficult to diagnose. <br>&gt; <br>&gt; This typo doesn’t generate any errors or warnings. I can’t think of a valid reason to use the equals function outside of comparisons. If the compiler instead treated this typo as an error, the mistake would be trivial to identify and fix:<br>&gt; <br>&gt; protocol Updatable {<br>&gt;     func update(state: Bool)<br>&gt; }<br>&gt; <br>&gt; class Thing: Updatable {<br>&gt;     private var enabled = false<br>&gt;     <br>&gt;     func update(state: Bool) {<br>&gt;         self.enabled == state // Error: `==` may not be used outside of comparisons<br>&gt;     }<br>&gt; }<br></p><p>If it isn&#39;t already, the implementation of `==` ought to be marked with the `@warn_unused_result` attribute, which will give you a warning if the result is ignored. We&#39;re discussing making warn_unused_result the default behavior in another thread.<br></p><p>-Joe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160111/44a72c78/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4030f7e8f6b6d3c09d10ec12691773c1?s=50"></div><header><strong>Proposal Idea: Use of == outside of comparisons should be treated as an error.</strong> from <string>John Randolph</string> &lt;jcr at mac.com&gt;<p>January 12, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jan 11, 2016, at 12:45 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If it isn&#39;t already, the implementation of `==` ought to be marked with the `@warn_unused_result` attribute, which will give you a warning if the result is ignored. We&#39;re discussing making warn_unused_result the default behavior in another thread.<br>&gt; <br>&gt; -Joe<br></p><p>I’d consider that warning sufficient to keep me from making this mistake.  Making it an error seems like overkill.<br></p><p>-jcr<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/b1214007/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Proposal Idea: Use of == outside of comparisons should be treated as an error.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January 13, 2016 at 08:00:00am</p></header><div class="content"><p>I&#39;m +1 on @warn_unused_result, does that need a proposal or is a PR<br>sufficient?<br></p><p>On Tue, Jan 12, 2016 at 7:45 AM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 11, 2016, at 12:39 PM, Jared Sinclair via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Consider the following:<br>&gt;<br>&gt; protocol Updatable {<br>&gt;     func update(state: Bool)<br>&gt; }<br>&gt;<br>&gt; class Thing: Updatable {<br>&gt;     private var enabled = false<br>&gt;<br>&gt;     func update(state: Bool) {<br>&gt;         self.enabled == state<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt; The obvious intention is to set self.enabled to the incoming value of<br>&gt; state. However, it’s easy to accidentally type a second equals sign. The<br>&gt; effect of this typo is self.enabled is never updated, leading to a<br>&gt; run-time bug that could be difficult to diagnose.<br>&gt;<br>&gt; This typo doesn’t generate any errors or warnings. I can’t think of a<br>&gt; valid reason to use the equals function outside of comparisons. If the<br>&gt; compiler instead treated this typo as an error, the mistake would be<br>&gt; trivial to identify and fix:<br>&gt;<br>&gt; protocol Updatable {<br>&gt;     func update(state: Bool)<br>&gt; }<br>&gt;<br>&gt; class Thing: Updatable {<br>&gt;     private var enabled = false<br>&gt;<br>&gt;     func update(state: Bool) {<br>&gt;         self.enabled == state // Error: `==` may not be used outside of<br>&gt; comparisons<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; If it isn&#39;t already, the implementation of `==` ought to be marked with<br>&gt; the `@warn_unused_result` attribute, which will give you a warning if the<br>&gt; result is ignored. We&#39;re discussing making warn_unused_result the default<br>&gt; behavior in another thread.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160113/fac6b7cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Proposal Idea: Use of == outside of comparisons should be treated as an error.</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>January 12, 2016 at 01:00:00pm</p></header><div class="content"><p>A pull request to the standard library would be appreciated.<br></p><p>Dmitri<br></p><p>On Tue, Jan 12, 2016 at 1:01 PM, Andrew Bennett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m +1 on @warn_unused_result, does that need a proposal or is a PR<br>&gt; sufficient?<br>&gt;<br>&gt; On Tue, Jan 12, 2016 at 7:45 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 11, 2016, at 12:39 PM, Jared Sinclair via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Consider the following:<br>&gt;&gt;<br>&gt;&gt; protocol Updatable {<br>&gt;&gt;     func update(state: Bool)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class Thing: Updatable {<br>&gt;&gt;     private var enabled = false<br>&gt;&gt;<br>&gt;&gt;     func update(state: Bool) {<br>&gt;&gt;         self.enabled == state<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The obvious intention is to set self.enabled to the incoming value of<br>&gt;&gt; state. However, it’s easy to accidentally type a second equals sign. The<br>&gt;&gt; effect of this typo is self.enabled is never updated, leading to a<br>&gt;&gt; run-time bug that could be difficult to diagnose.<br>&gt;&gt;<br>&gt;&gt; This typo doesn’t generate any errors or warnings. I can’t think of a<br>&gt;&gt; valid reason to use the equals function outside of comparisons. If the<br>&gt;&gt; compiler instead treated this typo as an error, the mistake would be<br>&gt;&gt; trivial to identify and fix:<br>&gt;&gt;<br>&gt;&gt; protocol Updatable {<br>&gt;&gt;     func update(state: Bool)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class Thing: Updatable {<br>&gt;&gt;     private var enabled = false<br>&gt;&gt;<br>&gt;&gt;     func update(state: Bool) {<br>&gt;&gt;         self.enabled == state // Error: `==` may not be used outside of<br>&gt;&gt; comparisons<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If it isn&#39;t already, the implementation of `==` ought to be marked with<br>&gt;&gt; the `@warn_unused_result` attribute, which will give you a warning if the<br>&gt;&gt; result is ignored. We&#39;re discussing making warn_unused_result the default<br>&gt;&gt; behavior in another thread.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/04ed036f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/214d1bb1587020b60ef37c85b887562e?s=50"></div><header><strong>Proposal Idea: Use of == outside of comparisons should be treated as an error.</strong> from <string>Alex Johnson</string> &lt;ajohnson at quickleft.com&gt;<p>January 12, 2016 at 01:00:00pm</p></header><div class="content"><p>I think @warn_unused_result is already present on ==, at least for Bool in<br>Swift 2.1.1.<br></p><p>For example:<br></p><p>$ swift --version<br>Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)<br>Target: x86_64-apple-darwin15.2.0<br></p><p>$ cat test.swift<br>var a = true<br>let b = false<br></p><p>func doStuff() {<br>  a == b<br>}<br></p><p>$ swift test.swift<br>test.swift:5:5: warning: result of call to &#39;==&#39; is unused<br>  a == b<br>    ^<br></p><p>Warnings aren&#39;t shown in Playgrounds or in the REPL, though, so if you&#39;re<br>running code there you won&#39;t see it.<br></p><p><br>On Tue, Jan 12, 2016 at 1:01 PM, Andrew Bennett via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;m +1 on @warn_unused_result, does that need a proposal or is a PR<br>&gt; sufficient?<br>&gt;<br>&gt; On Tue, Jan 12, 2016 at 7:45 AM, Joe Groff via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jan 11, 2016, at 12:39 PM, Jared Sinclair via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Consider the following:<br>&gt;&gt;<br>&gt;&gt; protocol Updatable {<br>&gt;&gt;     func update(state: Bool)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class Thing: Updatable {<br>&gt;&gt;     private var enabled = false<br>&gt;&gt;<br>&gt;&gt;     func update(state: Bool) {<br>&gt;&gt;         self.enabled == state<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; The obvious intention is to set self.enabled to the incoming value of<br>&gt;&gt; state. However, it’s easy to accidentally type a second equals sign. The<br>&gt;&gt; effect of this typo is self.enabled is never updated, leading to a<br>&gt;&gt; run-time bug that could be difficult to diagnose.<br>&gt;&gt;<br>&gt;&gt; This typo doesn’t generate any errors or warnings. I can’t think of a<br>&gt;&gt; valid reason to use the equals function outside of comparisons. If the<br>&gt;&gt; compiler instead treated this typo as an error, the mistake would be<br>&gt;&gt; trivial to identify and fix:<br>&gt;&gt;<br>&gt;&gt; protocol Updatable {<br>&gt;&gt;     func update(state: Bool)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; class Thing: Updatable {<br>&gt;&gt;     private var enabled = false<br>&gt;&gt;<br>&gt;&gt;     func update(state: Bool) {<br>&gt;&gt;         self.enabled == state // Error: `==` may not be used outside of<br>&gt;&gt; comparisons<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If it isn&#39;t already, the implementation of `==` ought to be marked with<br>&gt;&gt; the `@warn_unused_result` attribute, which will give you a warning if the<br>&gt;&gt; result is ignored. We&#39;re discussing making warn_unused_result the default<br>&gt;&gt; behavior in another thread.<br>&gt;&gt;<br>&gt;&gt; -Joe<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>*Alex Johnson | Engineering Lead*<br></p><p>*Quick Left, Inc. &lt;https://quickleft.com/&gt;*<br>*Boulder **|* *Denver* *|* *Portland** |** San Francisco*<br></p><p>1 (844) QL-NERDS<br></p><p>@nonsensery<br></p><p><br>&lt;https://github.com/quickleft&gt; &lt;https://www.facebook.com/quickleft&gt;<br>&lt;https://twitter.com/quickleft&gt; &lt;https://instagram.com/quick_left/&gt;<br>&lt;https://www.flickr.com/photos/quickleft&gt; &lt;https://vimeo.com/quickleft&gt;<br></p><p><br>*What&#39;s it like to work with us? **TrainingPeaks, iTriage, and Ping<br>Identity share their stories in this short video** A Client&#39;s View<br>&lt;https://vimeo.com/92286352&gt;*.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160112/9cba2d87/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
