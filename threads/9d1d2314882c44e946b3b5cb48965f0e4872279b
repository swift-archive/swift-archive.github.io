<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 29, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi everyone!<br></p><p>I have a generic class similar to this one:<br></p><p>class C&lt;T: Equatable&gt; {<br>    let t: T<br>    init(t: T) { self.t = t }<br>}<br></p><p>When try to wrap ‘Int?&#39; inside, I get the following error:<br></p><p>let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br></p><p>Yet when I try to compare two ‘Int?’ values, everything works:<br></p><p>let a: Int? = 5<br>let b: Int? = 6<br></p><p>let c = a == b // NO ERROR<br></p><p>So, is ‘Int?&#39; equatable or not?<br></p><p>Thanks!<br></p><p>R+<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/9d1d279b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 29, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi everyone!<br></p><p>I have a generic class similar to this one:<br></p><p>class C&lt;T: Equatable&gt; {<br>    let t: T<br>    init(t: T) { self.t = t }<br>}<br></p><p>When try to wrap ‘Int?&#39; inside, I get the following error:<br></p><p>let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br></p><p>Yet when I try to compare two ‘Int?’ values, everything works:<br></p><p>let a: Int? = 5<br>let b: Int? = 6<br></p><p>let c = a == b // NO ERROR<br></p><p>So, is ‘Int?&#39; equatable or not?<br></p><p>Thanks!<br></p><p>R+<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/1cf67365/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/55d1b18da3640fffe7f10a595e12897f?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Keith Duvall</string> &lt;keith.duvall at icloud.com&gt;<p>February 29, 2016 at 10:00:00am</p></header><div class="content"><p>Don’t mark it as optional in the generic definition. Mark it as optional in your implementation.<br></p><p>class C&lt;T: Equatable&gt; {<br>	let t: T?<br>	init(t: T?) {<br>		self.t = t<br>	}<br>}<br></p><p>let a = C&lt;Int&gt;(t: nil)<br></p><p>print(a.t) // nil<br></p><p>let b = C&lt;Int&gt;(t: 5)<br></p><p>print(b.t) // Optional(5)<br></p><p>Keith<br></p><p><br>&gt; On Feb 29, 2016, at 9:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I have a generic class similar to this one:<br>&gt; <br>&gt; class C&lt;T: Equatable&gt; {<br>&gt;     let t: T<br>&gt;     init(t: T) { self.t = t }<br>&gt; }<br>&gt; <br>&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt; <br>&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt; <br>&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt; <br>&gt; let a: Int? = 5<br>&gt; let b: Int? = 6<br>&gt; <br>&gt; let c = a == b // NO ERROR<br>&gt; <br>&gt; So, is ‘Int?&#39; equatable or not?<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; R+<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/3a9f09b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/271e3cc541515ca98f32c9bab72c41f6?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Peter Vertes</string> &lt;pvertes at gmail.com&gt;<p>February 29, 2016 at 10:00:00am</p></header><div class="content"><p>To extend on Keith’s explanation:<br></p><p>class C&lt;T: Equatable&gt; {<br>    let t: T?<br>    init(t: T?) { self.t = t }<br>}<br></p><p>let a = C&lt;Int&gt;(t: nil)<br>print(a.t)<br></p><p>let b = C&lt;Int&gt;(t: 5)<br>print(b.t)<br></p><p>let c = C&lt;Int&gt;(t: 5)<br>print(c.t)<br></p><p>func ==(lhs: C&lt;Int&gt;, rhs: C&lt;Int&gt;) -&gt; Bool {<br>    return lhs.t == rhs.t<br>}<br></p><p>var d = a == b	// false<br>var e = b == c	// true<br></p><p>You’d also need to override the “==“ operator for C&lt;Int&gt; types in order to be able to compare them.<br></p><p>-Pete<br></p><p><br></p><p>&gt; On Feb 29, 2016, at 10:07 AM, Keith Duvall via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Don’t mark it as optional in the generic definition. Mark it as optional in your implementation.<br>&gt; <br>&gt; class C&lt;T: Equatable&gt; {<br>&gt; 	let t: T?<br>&gt; 	init(t: T?) {<br>&gt; 		self.t = t<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; let a = C&lt;Int&gt;(t: nil)<br>&gt; <br>&gt; print(a.t) // nil<br>&gt; <br>&gt; let b = C&lt;Int&gt;(t: 5)<br>&gt; <br>&gt; print(b.t) // Optional(5)<br>&gt; <br>&gt; Keith<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 29, 2016, at 9:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone!<br>&gt;&gt; <br>&gt;&gt; I have a generic class similar to this one:<br>&gt;&gt; <br>&gt;&gt; class C&lt;T: Equatable&gt; {<br>&gt;&gt;     let t: T<br>&gt;&gt;     init(t: T) { self.t = t }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt;&gt; <br>&gt;&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt;&gt; <br>&gt;&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt;&gt; <br>&gt;&gt; let a: Int? = 5<br>&gt;&gt; let b: Int? = 6<br>&gt;&gt; <br>&gt;&gt; let c = a == b // NO ERROR<br>&gt;&gt; <br>&gt;&gt; So, is ‘Int?&#39; equatable or not?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/5b5e7cd5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 29, 2016 at 04:00:00pm</p></header><div class="content"><p>Got it. Thanks!<br></p><p>R+<br></p><p>&gt; On 29 Feb 2016, at 16:07, Keith Duvall via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Don’t mark it as optional in the generic definition. Mark it as optional in your implementation.<br>&gt; <br>&gt; class C&lt;T: Equatable&gt; {<br>&gt; 	let t: T?<br>&gt; 	init(t: T?) {<br>&gt; 		self.t = t<br>&gt; 	}<br>&gt; }<br>&gt; <br>&gt; let a = C&lt;Int&gt;(t: nil)<br>&gt; <br>&gt; print(a.t) // nil<br>&gt; <br>&gt; let b = C&lt;Int&gt;(t: 5)<br>&gt; <br>&gt; print(b.t) // Optional(5)<br>&gt; <br>&gt; Keith<br>&gt; <br>&gt; <br>&gt;&gt; On Feb 29, 2016, at 9:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone!<br>&gt;&gt; <br>&gt;&gt; I have a generic class similar to this one:<br>&gt;&gt; <br>&gt;&gt; class C&lt;T: Equatable&gt; {<br>&gt;&gt;     let t: T<br>&gt;&gt;     init(t: T) { self.t = t }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt;&gt; <br>&gt;&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt;&gt; <br>&gt;&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt;&gt; <br>&gt;&gt; let a: Int? = 5<br>&gt;&gt; let b: Int? = 6<br>&gt;&gt; <br>&gt;&gt; let c = a == b // NO ERROR<br>&gt;&gt; <br>&gt;&gt; So, is ‘Int?&#39; equatable or not?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/f9801582/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February 29, 2016 at 10:00:00am</p></header><div class="content"><p>To the best of my understanding, Int? is not equatable. Your let c = a == b  code works because this function (or something like it) is defined:<br>func == &lt;T: Equatable&gt; (lhs: Optional&lt;T&gt;, rhs: Optional&lt;T&gt;) -&gt; Bool {<br>    switch (lhs, rhs) {<br>    case (.None, .None): return true<br>    case (.Some(let l), .Some(let r)): return l == r<br>    default: return false<br>    }<br>}<br></p><p>The reason it’s done this way is that currently there’s no mechanism for conditional protocol conformance. Ideally, you’d be able to write something like this:<br>extension Optional : Equatable where T: Equatable {}<br>… which, combined with that existing == function, would make Int? be equatable.<br></p><p>IIRC, Apple is intending to remove this limitation, but I can’t remember if it’s made the cut for Swift 3 or if it’ll be later on.<br></p><p>In the meantime, if Keith’s solution of making the variable be a T? instead of T doesn’t work for you, I think this will let you continue on with other parts of your code (although I have NOT thoroughly tested it… use at your own risk):<br>public struct OptionalWrapper&lt;T&gt; : Equatable {<br>    typealias Wrapped = T<br>    var unwrap: Wrapped?<br>    init(_ value: Wrapped?) { unwrap = value }<br>}<br>public func == &lt;T: Equatable&gt; (lhs: OptionalWrapper&lt;T&gt;, rhs: OptionalWrapper&lt;T&gt;) -&gt; Bool {<br>    switch (lhs.unwrap, rhs.unwrap) {<br>    case (.None, .None): return true<br>    case (.Some(let l), .Some(let r)): return l == r<br>    default: return false<br>    }<br>}<br>public func == &lt;T: Equatable&gt; (lhs: OptionalWrapper&lt;T?&gt;, rhs: OptionalWrapper&lt;T?&gt;) -&gt; Bool {<br>    switch (lhs.unwrap, rhs.unwrap) {<br>    case (.None, .None): return true<br>    case (.Some(let l), .Some(let r)): return l == r<br>    default: return false<br>    }<br>}<br>public func == &lt;T&gt; (lhs: OptionalWrapper&lt;T&gt;, rhs: OptionalWrapper&lt;T&gt;) -&gt; Bool {<br>    switch (lhs.unwrap, rhs.unwrap) {<br>    case (.None, .None): return true<br>    case (.Some, .None): return false<br>    case (.None, .Some): return false<br>    case (.Some, .Some): fatalError(&quot;\(__FILE__):\(__LINE__):\(__COLUMN__): Binary operator &#39;==&#39; cannot be applied to two &#39;\(T.self)&#39; operands&quot;)<br>    }<br>}<br></p><p>The syntax for actually using it is a bit long, but it should work: <br>let a = C(t: OptionalWrapper(4)) // infers that Wrapped == Int<br>let b = C(t: OptionalWrapper&lt;Int&gt;(nil)) // must be explicit since nil is just Optional.None, without any other type info<br>let c = a.t == b.t // false<br></p><p>Hope that helps<br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 29, 2016, at 8:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I have a generic class similar to this one:<br>&gt; <br>&gt; class C&lt;T: Equatable&gt; {<br>&gt;     let t: T<br>&gt;     init(t: T) { self.t = t }<br>&gt; }<br>&gt; <br>&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt; <br>&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt; <br>&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt; <br>&gt; let a: Int? = 5<br>&gt; let b: Int? = 6<br>&gt; <br>&gt; let c = a == b // NO ERROR<br>&gt; <br>&gt; So, is ‘Int?&#39; equatable or not?<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; R+<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/65e0e88d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>February 29, 2016 at 07:00:00pm</p></header><div class="content"><p>Wow! Thanks for (extra-extra-extra) detailed answer. I will try this.<br></p><p>R+<br></p><p>&gt; On 29 Feb 2016, at 17:41, davesweeris at mac.com wrote:<br>&gt; <br>&gt; To the best of my understanding, Int? is not equatable. Your let c = a == b  code works because this function (or something like it) is defined:<br>&gt; func == &lt;T: Equatable&gt; (lhs: Optional&lt;T&gt;, rhs: Optional&lt;T&gt;) -&gt; Bool {<br>&gt;     switch (lhs, rhs) {<br>&gt;     case (.None, .None): return true<br>&gt;     case (.Some(let l), .Some(let r)): return l == r<br>&gt;     default: return false<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; The reason it’s done this way is that currently there’s no mechanism for conditional protocol conformance. Ideally, you’d be able to write something like this:<br>&gt; extension Optional : Equatable where T: Equatable {}<br>&gt; … which, combined with that existing == function, would make Int? be equatable.<br>&gt; <br>&gt; IIRC, Apple is intending to remove this limitation, but I can’t remember if it’s made the cut for Swift 3 or if it’ll be later on.<br>&gt; <br>&gt; In the meantime, if Keith’s solution of making the variable be a T? instead of T doesn’t work for you, I think this will let you continue on with other parts of your code (although I have NOT thoroughly tested it… use at your own risk):<br>&gt; public struct OptionalWrapper&lt;T&gt; : Equatable {<br>&gt;     typealias Wrapped = T<br>&gt;     var unwrap: Wrapped?<br>&gt;     init(_ value: Wrapped?) { unwrap = value }<br>&gt; }<br>&gt; public func == &lt;T: Equatable&gt; (lhs: OptionalWrapper&lt;T&gt;, rhs: OptionalWrapper&lt;T&gt;) -&gt; Bool {<br>&gt;     switch (lhs.unwrap, rhs.unwrap) {<br>&gt;     case (.None, .None): return true<br>&gt;     case (.Some(let l), .Some(let r)): return l == r<br>&gt;     default: return false<br>&gt;     }<br>&gt; }<br>&gt; public func == &lt;T: Equatable&gt; (lhs: OptionalWrapper&lt;T?&gt;, rhs: OptionalWrapper&lt;T?&gt;) -&gt; Bool {<br>&gt;     switch (lhs.unwrap, rhs.unwrap) {<br>&gt;     case (.None, .None): return true<br>&gt;     case (.Some(let l), .Some(let r)): return l == r<br>&gt;     default: return false<br>&gt;     }<br>&gt; }<br>&gt; public func == &lt;T&gt; (lhs: OptionalWrapper&lt;T&gt;, rhs: OptionalWrapper&lt;T&gt;) -&gt; Bool {<br>&gt;     switch (lhs.unwrap, rhs.unwrap) {<br>&gt;     case (.None, .None): return true<br>&gt;     case (.Some, .None): return false<br>&gt;     case (.None, .Some): return false<br>&gt;     case (.Some, .Some): fatalError(&quot;\(__FILE__):\(__LINE__):\(__COLUMN__): Binary operator &#39;==&#39; cannot be applied to two &#39;\(T.self)&#39; operands&quot;)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; The syntax for actually using it is a bit long, but it should work: <br>&gt; let a = C(t: OptionalWrapper(4)) // infers that Wrapped == Int<br>&gt; let b = C(t: OptionalWrapper&lt;Int&gt;(nil)) // must be explicit since nil is just Optional.None, without any other type info<br>&gt; let c = a.t == b.t // false<br>&gt; <br>&gt; Hope that helps<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Feb 29, 2016, at 8:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi everyone!<br>&gt;&gt; <br>&gt;&gt; I have a generic class similar to this one:<br>&gt;&gt; <br>&gt;&gt; class C&lt;T: Equatable&gt; {<br>&gt;&gt;     let t: T<br>&gt;&gt;     init(t: T) { self.t = t }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt;&gt; <br>&gt;&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt;&gt; <br>&gt;&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt;&gt; <br>&gt;&gt; let a: Int? = 5<br>&gt;&gt; let b: Int? = 6<br>&gt;&gt; <br>&gt;&gt; let c = a == b // NO ERROR<br>&gt;&gt; <br>&gt;&gt; So, is ‘Int?&#39; equatable or not?<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/326d559f/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b7513b7d11e2aa623380d671875fa080?s=50"></div><header><strong>Type &quot;T?&quot; does not conform to protocol &#39;Equatable&#39;</strong> from <string>Chris McIntyre</string> &lt;cmcintyre3600 at gmail.com&gt;<p>February 29, 2016 at 10:00:00am</p></header><div class="content"><p>Int? is not Equatable, b. You would have to use a non-optional. <br></p><p>Under the hood, Optionals are actually an Enum with two cases, None, and Some&lt;T&gt;. func ==(lhs: Int?, rhs: Int?) must be designed essentially as a switch statement to handle each possibility. <br>--<br>Chris McIntyre<br></p><p><br></p><p><br>&gt; On Feb 29, 2016, at 9:24 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi everyone!<br>&gt; <br>&gt; I have a generic class similar to this one:<br>&gt; <br>&gt; class C&lt;T: Equatable&gt; {<br>&gt;     let t: T<br>&gt;     init(t: T) { self.t = t }<br>&gt; }<br>&gt; <br>&gt; When try to wrap ‘Int?&#39; inside, I get the following error:<br>&gt; <br>&gt; let a = C&lt;Int?&gt;(t: nil) // ERROR: Type &quot;Int?&quot; does not conform to protocol &#39;Equatable&#39;<br>&gt; <br>&gt; Yet when I try to compare two ‘Int?’ values, everything works:<br>&gt; <br>&gt; let a: Int? = 5<br>&gt; let b: Int? = 6<br>&gt; <br>&gt; let c = a == b // NO ERROR<br>&gt; <br>&gt; So, is ‘Int?&#39; equatable or not?<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; R+<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160229/12d27678/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
