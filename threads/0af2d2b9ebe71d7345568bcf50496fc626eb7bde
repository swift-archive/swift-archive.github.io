<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Renaming sizeof, sizeofValue, strideof, strideofValue</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June  5, 2016 at 05:00:00pm</p></header><div class="content"><p>on Wed Jun 01 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Wed, Jun 1, 2016 at 11:55 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt;  On Wed, Jun 1, 2016 at 11:28 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt;  wrote:<br>&gt;<br>&gt;  Upon accepting SE-0098, the core team renamed the proposed stdlib function from dynamicType() to type(of:). They write, &quot;The<br>&gt;  core team recognizes that this means that we should probably resyntax the existing sizeof/strideof functions, but that should be<br>&gt;  a follow-on discussion.&quot;<br>&gt;<br>&gt;  Follow on discussion started. Have at it.<br>&gt;<br>&gt;  See: http://thread.gmane.org/gmane.comp.lang.swift.evolution/15830<br>&gt;<br>&gt; To summarize the previous discussion:<br>&gt;<br>&gt; 1. Per Joe Groff, although sizeof() and friends are treated as terms-of-art, these names were lifted straight from C and do not correspond to<br>&gt; anything named &quot;sizeof&quot; in LLVM.<br>&gt;<br>&gt; 2. There are issues with using a name such as stride(of:), because stride(...) already means something else in the stdlib; moreover, size(of:) isn&#39;t<br>&gt; the best name for something that doesn&#39;t do what its C namesake does; therefore, larger changes to the naming were suggested.<br>&gt;<br>&gt; 2. Dave A. and others expressed the opinion that these should probably not be global functions; his preference was for:<br>&gt;<br>&gt; ```<br>&gt; MemoryLayout&lt;T&gt;.size // currently sizeof()<br>&gt; MemoryLayout&lt;T&gt;.spacing // currently strideof()<br>&gt; MemoryLayout&lt;T&gt;.alignment // currently alignof()<br>&gt; ```<br></p><p>I&#39;d also be willing to see memoryLayout(T.self).size, if pressed.<br></p><p>&gt; 3. Dave A. proposed that sizeofValue(), strideofValue(), and<br>&gt; alignofValue() are better off removed altogether. I don&#39;t know if<br>&gt; people are going to be happy about this idea.<br></p><p>I would be happy to hear from people about their use-cases that become<br>utterly unreadable when <br></p><p>  sizeofValue(x)<br></p><p>is replaced by <br></p><p>  MemoryLayout&lt;x.Self&gt;.size<br></p><p>or<br></p><p>  memoryLayout(type(of: x)).size<br></p><p>But if we don&#39;t have strong evidence that such use-cases exist, I am<br>strongly biased toward removing those functions.  These incredibly<br>low-level facilities are seldom used, even within the standard library.<br>It would take a very strong argument to convince me that the exposed API<br>should be broader than absolutely necessary in this area.<br></p><p>&gt; * * *<br>&gt;<br>&gt; If we take inspiration from type(of:), then it&#39;s actually sizeofValue(), etc., that should be renamed size(of:), etc. Also, a fun tidbit is that what&#39;s<br>&gt; currently called sizeof(), etc.--the ones that take types rather than values--are actually not very good candidates for having parameter labels,<br>&gt; because it&#39;s OK to write `sizeof(Int)`, but one must currently write `size(of: Int.self)` when the function has a label.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
