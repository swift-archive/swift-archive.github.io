<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  1, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Apr 28 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; We all know and love sizeof(), but given that it&#39;s different from its C<br>&gt; counterpart anyway, shouldn&#39;t these conform to Swift naming guidelines? In other<br>&gt; words, after SE-0006, shouldn&#39;t these names be as follows?<br>&gt;<br>&gt; ```<br>&gt; size&lt;T&gt;(of: T.Type)<br>&gt; size&lt;T&gt;(ofValue: T)<br>&gt; stride&lt;T&gt;(of: T.Type)<br>&gt; stride&lt;T&gt;(ofValue: T)<br>&gt; align&lt;T&gt;(of: T.Type)<br>&gt; align&lt;T&gt;(ofValue: T)<br>&gt; ```<br>&gt;<br>&gt; There are obvious issues with two different things named `stride`, but IMO<br>&gt; that&#39;s best addressed by renaming one of them; the real problem is that the word<br>&gt; stride is used in two different ways already. Thoughts?<br></p><p>These functions correspond to C and LLVM primitives and we consciously<br>kept those names because they are terms of art. I don&#39;t know that<br></p><p>  size(of: T.self)<br></p><p>is particularly descriptive usage, and if we were going to change them<br>so they didn&#39;t look like sizeof, strideof, alignof I&#39;d want to make them<br>far more descriptive.  E.g.<br></p><p>  memoryFootprint(Int.self)<br></p><p>or<br></p><p>  bytesRequiredForStorage(Int.self)<br>  standardByteAlignment(Int.self)<br>  bytesBetweenArrayElements(Int.self)<br></p><p>etc.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Trial balloon: conforming sizeof, sizeofValue, etc. to naming guidelines</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May  1, 2016 at 08:00:00pm</p></header><div class="content"><p>On Sun, May 1, 2016 at 7:00 PM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Thu Apr 28 2016, Xiaodi Wu &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; We all know and love sizeof(), but given that it&#39;s different from its C<br>&gt; &gt; counterpart anyway, shouldn&#39;t these conform to Swift naming guidelines?<br>&gt; In other<br>&gt; &gt; words, after SE-0006, shouldn&#39;t these names be as follows?<br>&gt; &gt;<br>&gt; &gt; ```<br>&gt; &gt; size&lt;T&gt;(of: T.Type)<br>&gt; &gt; size&lt;T&gt;(ofValue: T)<br>&gt; &gt; stride&lt;T&gt;(of: T.Type)<br>&gt; &gt; stride&lt;T&gt;(ofValue: T)<br>&gt; &gt; align&lt;T&gt;(of: T.Type)<br>&gt; &gt; align&lt;T&gt;(ofValue: T)<br>&gt; &gt; ```<br>&gt; &gt;<br>&gt; &gt; There are obvious issues with two different things named `stride`, but<br>&gt; IMO<br>&gt; &gt; that&#39;s best addressed by renaming one of them; the real problem is that<br>&gt; the word<br>&gt; &gt; stride is used in two different ways already. Thoughts?<br>&gt;<br>&gt; These functions correspond to C and LLVM primitives and we consciously<br>&gt; kept those names because they are terms of art.<br></p><p><br>I recognize that this was the intention behind preserving the names as-is.<br>The thought process behind proposing a renaming was as follows:<br></p><p>* The Swift counterpart to C `sizeof()` is `strideof(_:)`. Thus, although<br>the *names* are treated as terms of art, not all of them are used to mean<br>the art for which they are terms (if you will). To reinforce the separation<br>between C primitives and these Swift functions, C `offsetof()` has no Swift<br>counterpart.<br></p><p>* A survey of other languages suggests that, as terms of art, these names<br>are not always treated as a single word but as a phrase, by which I mean<br>that the preposition &quot;of&quot; can be subject to language-specific naming<br>conventions. For example, in Rust you have `size_of()`, `size_of_val()`,<br>etc.; in the .NET Framework, you have the `Marshal.SizeOf()` method; and<br>even in LLVM you apparently have (and this is based just on googling--my<br>level of familiarity with LLVM is low to nonexistent) struct `AlignOf&lt;T&gt;`.<br></p><p><br>&gt; I don&#39;t know that<br>&gt;<br>&gt;   size(of: T.self)<br>&gt;<br>&gt; is particularly descriptive usage, and if we were going to change them<br>&gt; so they didn&#39;t look like sizeof, strideof, alignof I&#39;d want to make them<br>&gt; far more descriptive.  E.g.<br>&gt;<br>&gt;   memoryFootprint(Int.self)<br>&gt;<br>&gt; or<br>&gt;<br>&gt;   bytesRequiredForStorage(Int.self)<br>&gt;   standardByteAlignment(Int.self)<br>&gt;   bytesBetweenArrayElements(Int.self)<br>&gt;<br>&gt; etc.<br>&gt;<br></p><p>To my mind, `size(of:)` is not moving away from using a term of art but<br>rather following existing precedent in conforming use of the preposition to<br>language-specific conventions. Like you, I would be hesitant to suggest<br>moving away from these terms of art altogether. I do think, though, that<br>moving the preposition has the bonus of visually suggesting however subtly<br>that `size(of:)` might have a Swift-specific twist that makes it not a<br>drop-in equivalent for C `sizeof()`.<br></p><p><br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160501/5546620f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
