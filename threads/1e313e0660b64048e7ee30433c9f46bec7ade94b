<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>Add an implicit return nil if function reaches end before return explicitly called</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>June 22, 2016 at 09:00:00pm</p></header><div class="content"><p>Welcome, Logan.<br></p><p>Functions currently return the empty tuple, ‘()’, by default. Void is a typealias to the empty tuple type. It is also possible to write ‘return ()’ explicitly, rather than just ‘return’. (This is generally a detail of the language, so may be unfamiliar)<br></p><p>It is unclear in your proposal as it stands which (if any) a function returning ‘()?’ would use as its default: (), or nil?<br>Would the ‘nil’ keyword still be required when writing return explicitly?<br></p><p>While this does match behaviour present in other parts of the language, and I see the benefit of having implicit returns in this otherwise straightforward case, I&#39;m struggling to decide as to whether this is worth the extra complexity of having two orthogonal implicit return mechanisms.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;4AC6F31E-9E46-47B3-8CAE-B5EDD04043D5 at gmail.com&gt; <br></p><p>I believe Swift should no longer require an explicit return on all functions and instead do an implicit nil return if the function reaches the end of its control flow and has an optional return type.<br></p><p>This could be useful to keep code clean and compact, by only having to write code for cases that our function handles and just returning nil otherwise automatically.<br></p><p><br>Consider:<br></p><p>func toInt(string : String?) -&gt; Int?<br>{<br>if let s = string<br>{<br>return s.intValue<br>}<br></p><p>//Make this return implicitly happen instead of requiring it.<br>//return nil <br>}<br></p><p><br></p><p>This also very much goes along with the implicit return within a guard statement that I have seen proposed. Here:<br></p><p>func toInt(string: String?) -&gt; Int?<br>{<br>guard let s = string else {<br>//this could be implicitly returned using the same logic, since the guard means we have reached the end of our code path without returning<br>//return nil <br>}<br>return s.toInt()<br>}<br></p><p><br>These methods could be re-written as so:<br></p><p>This could allow us to write the examples below much cleaner<br>func toInt(string : String?) -&gt; Int?<br>{<br>if let s = string<br>{<br>return s.toInt()<br>}<br>}<br></p><p>func toInt(string: String?) -&gt; Int?<br>{<br>guard let s = string else {} <br>return s.toInt()<br>}<br></p><p>// it would be even cooler if we could omit the else {} and make them not it return by default. But that’s another thing all together<br>func toInt(string: String?) -&gt; Int?<br>{<br>guard let s = string<br>return s.toInt()<br>}<br></p><p><br>Thanks for reading my first post to the Swift open source discussion board!<br>-Logan<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>------------- End Message ------------- <br></p><p><br></p><p>From James F<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>Add an implicit return nil if function reaches end before return explicitly called</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>June 22, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jun 22, 2016, at 1:36 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Welcome, Logan.<br>&gt; <br>&gt; Functions currently return the empty tuple, ‘()’, by default. Void is a typealias to the empty tuple type. It is also possible to write ‘return ()’ explicitly, rather than just ‘return’. (This is generally a detail of the language, so may be unfamiliar)<br></p><p>It is more correct to say that it is illegal to reach the end of a function whose return type is not ().  Falling off the end of a function that returns ()? will not implicitly return Optional.Some(()); it will produce an error:<br></p><p>(swift) func foo() -&gt; ()? {}<br>&lt;REPL Input&gt;:1:20: error: missing return in a function expected to return &#39;()?&#39;<br>func foo() -&gt; ()? {}<br>                   ^<br></p><p>We could amend this rule to permit reaching the end of an optional-returning function, with the semantics of returning nil.  I do not, however, think that would be a good idea; it turns simple mistakes into bugs, feels inconsistent in the language, and is unnecessarily obscure for readers.<br></p><p>John.<br></p><p>&gt; <br>&gt; It is unclear in your proposal as it stands which (if any) a function returning ‘()?’ would use as its default: (), or nil?<br>&gt; Would the ‘nil’ keyword still be required when writing return explicitly?<br>&gt; <br>&gt; While this does match behaviour present in other parts of the language, and I see the benefit of having implicit returns in this otherwise straightforward case, I&#39;m struggling to decide as to whether this is worth the extra complexity of having two orthogonal implicit return mechanisms.<br>&gt; <br>&gt; ------------ Begin Message ------------ <br>&gt; Group: gmane.comp.lang.swift.evolution <br>&gt; MsgID: &lt;4AC6F31E-9E46-47B3-8CAE-B5EDD04043D5 at gmail.com&gt; <br>&gt; <br>&gt; I believe Swift should no longer require an explicit return on all functions and instead do an implicit nil return if the function reaches the end of its control flow and has an optional return type.<br>&gt; <br>&gt; This could be useful to keep code clean and compact, by only having to write code for cases that our function handles and just returning nil otherwise automatically.<br>&gt; <br>&gt; <br>&gt; Consider:<br>&gt; <br>&gt; func toInt(string : String?) -&gt; Int?<br>&gt; {<br>&gt; if let s = string<br>&gt; {<br>&gt; return s.intValue<br>&gt; }<br>&gt; <br>&gt; //Make this return implicitly happen instead of requiring it.<br>&gt; //return nil <br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; This also very much goes along with the implicit return within a guard statement that I have seen proposed. Here:<br>&gt; <br>&gt; func toInt(string: String?) -&gt; Int?<br>&gt; {<br>&gt; guard let s = string else {<br>&gt; //this could be implicitly returned using the same logic, since the guard means we have reached the end of our code path without returning<br>&gt; //return nil <br>&gt; }<br>&gt; return s.toInt()<br>&gt; }<br>&gt; <br>&gt; <br>&gt; These methods could be re-written as so:<br>&gt; <br>&gt; This could allow us to write the examples below much cleaner<br>&gt; func toInt(string : String?) -&gt; Int?<br>&gt; {<br>&gt; if let s = string<br>&gt; {<br>&gt; return s.toInt()<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; func toInt(string: String?) -&gt; Int?<br>&gt; {<br>&gt; guard let s = string else {} <br>&gt; return s.toInt()<br>&gt; }<br>&gt; <br>&gt; // it would be even cooler if we could omit the else {} and make them not it return by default. But that’s another thing all together<br>&gt; func toInt(string: String?) -&gt; Int?<br>&gt; {<br>&gt; guard let s = string<br>&gt; return s.toInt()<br>&gt; }<br>&gt; <br>&gt; <br>&gt; Thanks for reading my first post to the Swift open source discussion board!<br>&gt; -Logan<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; ------------- End Message ------------- <br>&gt; <br>&gt; <br>&gt; <br>&gt; From James F<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/e321a9d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Add an implicit return nil if function reaches end before return explicitly called</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June 23, 2016 at 06:00:00am</p></header><div class="content"><p>This kind of sounds like the proposal to have implicit return in guard statements.<br></p><p>I agree with John that this kind of feels incosistent and obscure.<br></p><p>An alternative that could be used everywhere though may look like this:<br></p><p>func myFunc() -&gt; String {<br>	autoreturn {<br>		return &quot;Hello&quot;<br>	}<br></p><p>	if Date.today.isSunday {<br>		return &quot;Sunday&quot;<br>	}<br>}<br></p><p>The `autoreturn` would act as `defer` on paths that do not have a return statement, would be applicable in any function (i.e. any return type allowed).<br></p><p>I can see this being useful if you need to return default value that needs to have some further initialization and the method is quite long.<br></p><p>&gt; On Jun 22, 2016, at 10:55 PM, John McCall via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 1:36 PM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Welcome, Logan.<br>&gt;&gt; <br>&gt;&gt; Functions currently return the empty tuple, ‘()’, by default. Void is a typealias to the empty tuple type. It is also possible to write ‘return ()’ explicitly, rather than just ‘return’. (This is generally a detail of the language, so may be unfamiliar)<br>&gt; <br>&gt; It is more correct to say that it is illegal to reach the end of a function whose return type is not ().  Falling off the end of a function that returns ()? will not implicitly return Optional.Some(()); it will produce an error:<br>&gt; <br>&gt; (swift) func foo() -&gt; ()? {}<br>&gt; &lt;REPL Input&gt;:1:20: error: missing return in a function expected to return &#39;()?&#39;<br>&gt; func foo() -&gt; ()? {}<br>&gt;                    ^<br>&gt; <br>&gt; We could amend this rule to permit reaching the end of an optional-returning function, with the semantics of returning nil.  I do not, however, think that would be a good idea; it turns simple mistakes into bugs, feels inconsistent in the language, and is unnecessarily obscure for readers.<br>&gt; <br>&gt; John.<br>&gt; <br>&gt;&gt; <br>&gt;&gt; It is unclear in your proposal as it stands which (if any) a function returning ‘()?’ would use as its default: (), or nil?<br>&gt;&gt; Would the ‘nil’ keyword still be required when writing return explicitly?<br>&gt;&gt; <br>&gt;&gt; While this does match behaviour present in other parts of the language, and I see the benefit of having implicit returns in this otherwise straightforward case, I&#39;m struggling to decide as to whether this is worth the extra complexity of having two orthogonal implicit return mechanisms.<br>&gt;&gt; <br>&gt;&gt; ------------ Begin Message ------------ <br>&gt;&gt; Group: gmane.comp.lang.swift.evolution <br>&gt;&gt; MsgID: &lt;4AC6F31E-9E46-47B3-8CAE-B5EDD04043D5 at gmail.com &lt;mailto:4AC6F31E-9E46-47B3-8CAE-B5EDD04043D5 at gmail.com&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I believe Swift should no longer require an explicit return on all functions and instead do an implicit nil return if the function reaches the end of its control flow and has an optional return type.<br>&gt;&gt; <br>&gt;&gt; This could be useful to keep code clean and compact, by only having to write code for cases that our function handles and just returning nil otherwise automatically.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Consider:<br>&gt;&gt; <br>&gt;&gt; func toInt(string : String?) -&gt; Int?<br>&gt;&gt; {<br>&gt;&gt; if let s = string<br>&gt;&gt; {<br>&gt;&gt; return s.intValue<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; //Make this return implicitly happen instead of requiring it.<br>&gt;&gt; //return nil <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; This also very much goes along with the implicit return within a guard statement that I have seen proposed. Here:<br>&gt;&gt; <br>&gt;&gt; func toInt(string: String?) -&gt; Int?<br>&gt;&gt; {<br>&gt;&gt; guard let s = string else {<br>&gt;&gt; //this could be implicitly returned using the same logic, since the guard means we have reached the end of our code path without returning<br>&gt;&gt; //return nil <br>&gt;&gt; }<br>&gt;&gt; return s.toInt()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; These methods could be re-written as so:<br>&gt;&gt; <br>&gt;&gt; This could allow us to write the examples below much cleaner<br>&gt;&gt; func toInt(string : String?) -&gt; Int?<br>&gt;&gt; {<br>&gt;&gt; if let s = string<br>&gt;&gt; {<br>&gt;&gt; return s.toInt()<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func toInt(string: String?) -&gt; Int?<br>&gt;&gt; {<br>&gt;&gt; guard let s = string else {} <br>&gt;&gt; return s.toInt()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // it would be even cooler if we could omit the else {} and make them not it return by default. But that’s another thing all together<br>&gt;&gt; func toInt(string: String?) -&gt; Int?<br>&gt;&gt; {<br>&gt;&gt; guard let s = string<br>&gt;&gt; return s.toInt()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thanks for reading my first post to the Swift open source discussion board!<br>&gt;&gt; -Logan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ------------- End Message ------------- <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; From James F<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160623/b7af42b3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
