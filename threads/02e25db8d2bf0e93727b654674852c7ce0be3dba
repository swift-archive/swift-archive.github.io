<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d67dc06a6330e7043f85896351fd7e83?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Maxim Veksler</string> &lt;maxim at vekslers.org&gt;<p>February 12, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello everyone,<br></p><p>I would like to start a discussion on the possibility of enabling<br>compelling Swift binaries that embed the source code from which they&#39;ve<br>been compiled.<br></p><p>The value of having source code embedded alongside the binary is  debugging<br>aid - A developer will be able to download 3rd party framework, include it<br>into his Xcode project and then drill down in a debug session into the<br>framework code, having Xcode showing him the source code from which the<br>current breakpoint instruction was built.<br></p><p>This feature exists in the java world where you can compile a Jar file,<br>having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored<br>in this property<br>https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11.<br>This allows opening the Jar of a target library in eclipse and instantly<br>seeing what the code is doing.<br></p><p>The alternatives today are either decompilers, or .dSYM both are good but<br>not great as each requires manually steps in either management or enforcing<br>corrects of the results.<br></p><p>Would the community be interested in such a &quot;plug and play&quot; approach for<br>attaching source code to build frameworks / applications / stand alone<br>binaries ?<br></p><p>Is it feasible to expect such a thing from native apps? if not, can it be<br>an Xcode level feature when only .packages (Framework/Application) will be<br>added support for shipping the .dSYM and Xcode will know to do the lifting<br>to make it just work for the developer?<br></p><p><br>tnx,<br>-m<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160212/02e23dba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February 13, 2016 at 05:00:00am</p></header><div class="content"><p>I don’t understand that — I would think it would be up to the development (IDE) environment.  Swift code is open-source and can be installed, without bundling (assuming the IDE can handle it).  Just have to make sure that there is a source package that corresponds to a given release that could be downloaded.<br></p><p>For the most part it would be a function of the development environment, not of the Swift language.<br></p><p><br>&gt; On 2016-02-13, at 5:35:21, Maxim Veksler via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello everyone, <br>&gt; <br>&gt; I would like to start a discussion on the possibility of enabling compelling Swift binaries that embed the source code from which they&#39;ve been compiled.<br>&gt; <br>&gt; The value of having source code embedded alongside the binary is  debugging aid - A developer will be able to download 3rd party framework, include it into his Xcode project and then drill down in a debug session into the framework code, having Xcode showing him the source code from which the current breakpoint instruction was built.<br>&gt; <br>&gt; This feature exists in the java world where you can compile a Jar file, having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored in this property https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11 &lt;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11&gt;. This allows opening the Jar of a target library in eclipse and instantly seeing what the code is doing.<br>&gt; <br>&gt; The alternatives today are either decompilers, or .dSYM both are good but not great as each requires manually steps in either management or enforcing corrects of the results. <br>&gt; <br>&gt; Would the community be interested in such a &quot;plug and play&quot; approach for attaching source code to build frameworks / applications / stand alone binaries ?<br>&gt; <br>&gt; Is it feasible to expect such a thing from native apps? if not, can it be an Xcode level feature when only .packages (Framework/Application) will be added support for shipping the .dSYM and Xcode will know to do the lifting to make it just work for the developer?<br>&gt; <br>&gt; <br>&gt; tnx,<br>&gt; -m<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/506c60cf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d67dc06a6330e7043f85896351fd7e83?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Maxim Veksler</string> &lt;maxim at vekslers.org&gt;<p>February 14, 2016 at 12:00:00pm</p></header><div class="content"><p>On Sat, Feb 13, 2016 at 12:39 AM, Craig Cruden &lt;ccruden at novafore.com&gt; wrote:<br></p><p>&gt; don’t understand that — I would think it would be up to the development<br>&gt; (IDE) environment.  Swift code is open-source and can be installed, without<br>&gt; bundling (assuming the IDE can handle it).  Just have to make sure that<br>&gt; there is a source package that corresponds to a given release that could be<br>&gt; downloaded<br></p><p><br>That&#39;s a good point, we are post distributed version control era.<br></p><p>If I understand your suggestion this means that each binary / framework<br>should have in it&#39;s meta data a path leading to a git (or other) source<br>repository and a pointer to the exact hash / tag of the commit that<br>produced the given binary. This would allow IDE automation to clone the<br>given repo automatically, and display the source during the debugging<br>session.<br></p><p>I think that this introduces a problem for developers working in<br>environments that have no direct internet access (gov, army, labs) but work<br>around could be implemented.<br></p><p><br>-- <br>puıɯ ʎɯ ɯoɹɟ ʇuǝs<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160214/f932c06b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>For discussion: Including source code alongside binaries</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>February 13, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; Le 12 févr. 2016 à 23:35, Maxim Veksler via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello everyone, <br>&gt; <br>&gt; I would like to start a discussion on the possibility of enabling compelling Swift binaries that embed the source code from which they&#39;ve been compiled.<br>&gt; <br>&gt; The value of having source code embedded alongside the binary is  debugging aid - A developer will be able to download 3rd party framework, include it into his Xcode project and then drill down in a debug session into the framework code, having Xcode showing him the source code from which the current breakpoint instruction was built.<br>&gt; <br>&gt; This feature exists in the java world where you can compile a Jar file, having each .class contain it&#39;s .java counter part. I //think// it&#39;s stored in this property https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11 &lt;https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.11&gt;. This allows opening the Jar of a target library in eclipse and instantly seeing what the code is doing.<br>&gt; <br>&gt; The alternatives today are either decompilers, or .dSYM both are good but not great as each requires manually steps in either management or enforcing corrects of the results. <br></p><p>dsym is not an alternative and don’t provide the sources. It is just a bundle of debug symbols, which are information required to map instruction addresses to function name and source code line. Having the sources without dsym would be mostly useless. You won’t be able to put symbolic breakpoint or source location breakpoint, and won’t be able to get anything useful from the debugger but assembly.<br></p><p>&gt; Would the community be interested in such a &quot;plug and play&quot; approach for attaching source code to build frameworks / applications / stand alone binaries ?<br>&gt; <br>&gt; Is it feasible to expect such a thing from native apps? if not, can it be an Xcode level feature when only .packages (Framework/Application) will be added support for shipping the .dSYM and Xcode will know to do the lifting to make it just work for the developer?<br>&gt; <br>&gt; <br>&gt; tnx,<br>&gt; -m<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/4c516447/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
