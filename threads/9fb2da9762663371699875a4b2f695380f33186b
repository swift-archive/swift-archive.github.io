<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0077: Improved operator declarations&quot; begins now and runs through May 23. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 17, 2016 at 11:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes. Definitely. Operator overloading is currently fine in only the<br>simplest of cases.<br>        * Does this proposal fit well with the feel and direction of Swift?<br>I think so, yes.<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>No<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br></p><p>I followed the original thread and have been wrangling precedence for a<br>while now.<br></p><p><br></p><p>One problem that I have encountered with operators that I think still needs<br>solving is operators from different libraries colliding with regard to<br>precedence.<br></p><p>`^` is the example that bit me most recently. Swift has one with left<br>fixity at 160. I wanted to overload it with right fixity for math<br>operators. The only way that I have thought involves<br>- precedence groups are tied to a module<br>- overloads in modules are tied to specific precedence groups.<br></p><p>I have *not a clue* about how feasible this solution is, but it would allow<br>greater flexibility and, at least in my opinion, more understandable<br>behavior. Attempting to overload `^` right now, especially with right<br>fixity, results in confusing behavior.<br></p><p><br></p><p><br>On Tue, May 17, 2016 at 11:30 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0077: Improved operator declarations&quot; begins now and<br>&gt; runs through May 23. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/482030f8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>May 17, 2016 at 11:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1. Although I would prefer something like:<br></p><p>precedence(greaterThan: LogicalAnd)<br></p><p>to:<br></p><p>precedence(&gt; LogicalAnd)<br></p><p>I think the latter is more difficult to read, and I just find the idea of<br>using an operator in an operator/precendencegroup definition strange.<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes. Magical numbers are definitely not used elsewhere in the language.<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>N/A<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>Read the proposal<br></p><p>On Tue, May 17, 2016 at 11:30 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0077: Improved operator declarations&quot; begins now and<br>&gt; runs through May 23. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/f66e712f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 17, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>Generally in favor. To indulge in a little bikeshedding:<br></p><p>* `precedencegroup` defines both associativity and precedence, so the<br>naming isn&#39;t great. Maybe `operatorgroup`?<br>* I&#39;m not sure about the parentheses used between the braces. To me, it<br>would fit better with the language to use colons.<br>* It may be confusing that relative precedence levels are themselves<br>described using operators or words that describe operators. I&#39;d suggest<br>simpler words that aren&#39;t self-referential, such as &quot;above&quot; and &quot;below&quot;.<br></p><p>So to put it all together, here&#39;s the color of my bikeshed:<br></p><p>```<br>operatorgroup Comparative {<br>  associativity: left,<br>  precedence: above(LogicalAnd)<br>}<br></p><p><br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/c6b18078/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 18, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I like this proposal, except for the `precedencegroup` syntax, which I think is a bit overwrought. Rather than this proposal&#39;s:<br></p><p>	precedencegroup Multiplicative {<br>		associativity(left)<br>		precedence(&gt; Additive)<br>	} <br></p><p>I would prefer to see:<br></p><p>	precedence Multiplicative &gt; Additive left<br></p><p>(Or possibly, if the `left` is deemed too inexplicable by itself, `associativity(left)`.) I don&#39;t really think the `precedence` keyword or the curly brackets bring much to the declaration, and dropping them allows us to replace the awkward compound `precedencegroup` with the shorter and equally explanatory `precedence`.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. The numeric precedence levels are a significant wart, an impedance to both reading the standard library and implementing new custom operators.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. Magic numbers are un-Swifty.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The only language I know which has equivalently powerful custom operator specification is Perl 6. When you define a new operator in Perl 6, you&#39;re asked to declare it `is tighter`, `is looser`, or `is equiv` to another operator. `tighter` and `looser` both introduce a new precedence level between the operator you specified and the next closest existing precedence level.<br></p><p>The Swift solution seems better because it asks you to design your precedence hierarchy first and then assign operators to its levels. It also allows for two operators to have no precedence relative to each other, so they have to be parenthesized.<br></p><p>However, one good thing about the Perl 6 solution is that it lets you introduce new precedence levels between the existing ones. It&#39;s not clear to me if this proposal allows that, and if so, how. (I don&#39;t believe any of the examples demonstrate that.)<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0077: Improved operator declarations</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>I like this proposal but I believe the syntax could be better. <br></p><p>I think this would read more naturally:<br></p><p>precedence Multiplicative { above Additive left }<br></p><p>I would suggest using above, below, equalto, for the precedence values. <br></p><p>I think it reads more naturally and, like others have said, I find it odd that a operator is used inside an operator declaration.<br></p><p>I love how clean current operator declarations look and would like to see that preserved somewhat. <br></p><p>Brandon <br></p><p>Sent from my iPad<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 18, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0077: Improved operator declarations&quot; begins now and runs through May 23. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br></p><p>I didn&#39;t follow much of the thread for this but from the description<br>of the proposal I can see how it adds clarity and understanding to<br>code. I really cannot tell the precedence of an operator I declared in<br>certain expressions because those precedence number don&#39;t make much<br>sense. The idea of describing the precedence of the operator compared<br>to other groups of operators seems to add a lot more of understanding<br>to my code. Just forgive me if I didn&#39;t see this but I expect that I<br>cannot declare an operator belonging to more than one group or compare<br>to more than one group for precedence (thou I see some situations<br>being able to asset precedence against more than one group could be<br>useful).<br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>C# allowed for operator overloading but not declaring new operators<br>thus all precedence was already defined by the language.<br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>May 19, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 18 May 2016, at 04:30, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. A major improvement over the current system. I’m fine with the suggested syntax in general. I’ll be using it rarely enough that it won’t bother me what is eventually settled on. <br></p><p>By the way, in the future directions version of the BitwiseShift group we have <br></p><p>     members(&lt;&lt;, &gt;&gt;)<br></p><p>Is that a typo?<br></p><p>Also, just to confirm that my understanding of how this will work is correct, the proposal seems to suggest that future directions definitions of the bitwise operators will forbid combining bitwise operators in expressions with arithmetic operators e.g.<br></p><p>     a &lt;&lt; b + c<br></p><p>will be illegal because there is no relationship defined between the additive group and the bitwise groups (when it comes up for review, I will definitely be opposed to that, but it doesn’t affect  my assessment of this proposal).<br>  <br></p><p><br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I’ve used operator overloading in both C++ and C#. You can’t define new operators in C#, so the problem does not exist there and I can’t remember how it worked in C++ because the experience seems to have been erased from my mind.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the review, skimmed the three.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 8:30 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0077: Improved operator declarations&quot; begins now and runs through May 23. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br></p><p>The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br></p><p>What&#39;s the purpose of equality relationships between precedence groups?<br></p><p>Your proposal should call out the special treatment of the Assignment and Ternary groups.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/8c806515/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 20, 2016 at 11:00:00pm</p></header><div class="content"><p>Inline:<br></p><p>2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br></p><p>&gt; The transitivity rule plus the ability to define precedence relationships<br>&gt; in both directions on a new precedence group allows a new precedence group<br>&gt; to create a precedence relationship between existing unrelated precedence<br>&gt; groups.  This should be forbidden.<br>&gt;<br></p><p>Agreed, although there is an alternate solution to allow global-scope<br>relationship definition.<br>Trying to write it formally:<br></p><p>====begin====<br>Precedence relationships that, by transitivity rule, create relationship<br>between two imported groups, is an error. Example:<br></p><p>// Module X<br>precedencegroup A { }<br>precedencegroup C { }<br></p><p>// Module Y<br>import X<br>precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br></p><p>This results in compilation error &quot;B uses transitivity to define<br>relationship between imported groups A and C&quot;.<br>The rationale behind this is that otherwise one can create relationships<br>between standard precedence groups that are confusing for the reader.<br>====end====<br></p><p>What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;<br></p><p>Agreed, will remove.<br></p><p><br>&gt; Your proposal should call out the special treatment of the Assignment and<br>&gt; Ternary groups.<br>&gt;<br></p><p>Do you mean that most operators should define greater precedence than<br>Assignment / Ternary? Or there should be some other special treatment?<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/84e01062/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>May 20, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; Inline:<br>&gt; <br>&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt; <br>&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt; Trying to write it formally:<br>&gt; <br>&gt; ====begin====<br>&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt; <br>&gt; // Module X<br>&gt; precedencegroup A { }<br>&gt; precedencegroup C { }<br>&gt; <br>&gt; // Module Y<br>&gt; import X<br>&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt; <br>&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt; ====end====<br></p><p>Seems good to me.<br></p><p>&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt; <br>&gt; Agreed, will remove.<br></p><p>Ok.<br> <br>&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt; <br>&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br></p><p>Just that they have implicit members.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/4aac6337/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt; Inline:<br>&gt;&gt; <br>&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt; <br>&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt; Trying to write it formally:<br>&gt;&gt; <br>&gt;&gt; ====begin====<br>&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt; <br>&gt;&gt; // Module X<br>&gt;&gt; precedencegroup A { }<br>&gt;&gt; precedencegroup C { }<br>&gt;&gt; <br>&gt;&gt; // Module Y<br>&gt;&gt; import X<br>&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt; <br>&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt; ====end====<br>&gt; <br>&gt; Seems good to me.<br></p><p>Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br></p><p>&gt; <br>&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt; <br>&gt;&gt; Agreed, will remove.<br>&gt; <br>&gt; Ok.<br>&gt;  <br>&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt; <br>&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt; <br>&gt; Just that they have implicit members.<br>&gt; <br>&gt; John.<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/a843a8de/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 21, 2016 at 12:00:00am</p></header><div class="content"><p>Yes, in this case it should be allowed, because this relationship already<br>existed in imported modules. I will add that, too, thanks!<br></p><p>- Anton<br></p><p>2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br></p><p>&gt;<br>&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;<br>&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; Inline:<br>&gt;<br>&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;<br>&gt;&gt; The transitivity rule plus the ability to define precedence relationships<br>&gt;&gt; in both directions on a new precedence group allows a new precedence group<br>&gt;&gt; to create a precedence relationship between existing unrelated precedence<br>&gt;&gt; groups.  This should be forbidden.<br>&gt;&gt;<br>&gt;<br>&gt; Agreed, although there is an alternate solution to allow global-scope<br>&gt; relationship definition.<br>&gt; Trying to write it formally:<br>&gt;<br>&gt; ====begin====<br>&gt; Precedence relationships that, by transitivity rule, create relationship<br>&gt; between two imported groups, is an error. Example:<br>&gt;<br>&gt; // Module X<br>&gt; precedencegroup A { }<br>&gt; precedencegroup C { }<br>&gt;<br>&gt; // Module Y<br>&gt; import X<br>&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;<br>&gt; This results in compilation error &quot;B uses transitivity to define<br>&gt; relationship between imported groups A and C&quot;.<br>&gt; The rationale behind this is that otherwise one can create relationships<br>&gt; between standard precedence groups that are confusing for the reader.<br>&gt;<br>&gt; ====end====<br>&gt;<br>&gt;<br>&gt; Seems good to me.<br>&gt;<br>&gt;<br>&gt; Would this be allowed if Module X already defined precedence group C &gt; A<br>&gt; (it would not be defining a *new* relationship between A and C in that<br>&gt; case)?<br>&gt;<br>&gt;<br>&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;<br>&gt;<br>&gt; Agreed, will remove.<br>&gt;<br>&gt;<br>&gt; Ok.<br>&gt;<br>&gt;<br>&gt; Your proposal should call out the special treatment of the Assignment and<br>&gt;&gt; Ternary groups.<br>&gt;&gt;<br>&gt;<br>&gt; Do you mean that most operators should define greater precedence than<br>&gt; Assignment / Ternary? Or there should be some other special treatment?<br>&gt;<br>&gt;<br>&gt; Just that they have implicit members.<br>&gt;<br>&gt; John.<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/81cfe7e3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br></p><p>Cool.<br></p><p>What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br></p><p><br>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt;:<br>&gt; <br>&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt; import X<br>&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt; ====end====<br>&gt;&gt; <br>&gt;&gt; Seems good to me.<br>&gt; <br>&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt; <br>&gt;&gt; Ok.<br>&gt;&gt;  <br>&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt; <br>&gt;&gt; Just that they have implicit members.<br>&gt;&gt; <br>&gt;&gt; John.<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/f458ae6c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 21, 2016 at 12:00:00am</p></header><div class="content"><p>My working version is still the one in the proposal, but I&#39;m planning to<br>add the alternative versions we discussed, including your and Brent&#39;s<br>variants.<br></p><p>IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;).<br>Your lighter version looks more clean, but somewhat less consistent and<br>more free in terms of grammar.<br></p><p>Also, I&#39;ve got another version, which is considerably ligher than current<br>one, while being as structured:<br></p><p>precedence Multiplicative {<br>    associativity(left)<br>    above(Additive)<br>    below(Exponentiative)<br>}<br></p><p>- Anton<br></p><p>2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br></p><p>&gt;<br>&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;<br>&gt; Yes, in this case it should be allowed, because this relationship already<br>&gt; existed in imported modules. I will add that, too, thanks!<br>&gt;<br>&gt;<br>&gt; Cool.<br>&gt;<br>&gt; What is the latest syntax you are using?  Did you consider any of the<br>&gt; lighter weight options?  That subthread died without conclusion (unless I<br>&gt; missed something somehow).<br>&gt;<br>&gt;<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt; Inline:<br>&gt;&gt;<br>&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; The transitivity rule plus the ability to define precedence<br>&gt;&gt;&gt; relationships in both directions on a new precedence group allows a new<br>&gt;&gt;&gt; precedence group to create a precedence relationship between existing<br>&gt;&gt;&gt; unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Agreed, although there is an alternate solution to allow global-scope<br>&gt;&gt; relationship definition.<br>&gt;&gt; Trying to write it formally:<br>&gt;&gt;<br>&gt;&gt; ====begin====<br>&gt;&gt; Precedence relationships that, by transitivity rule, create relationship<br>&gt;&gt; between two imported groups, is an error. Example:<br>&gt;&gt;<br>&gt;&gt; // Module X<br>&gt;&gt; precedencegroup A { }<br>&gt;&gt; precedencegroup C { }<br>&gt;&gt;<br>&gt;&gt; // Module Y<br>&gt;&gt; import X<br>&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;<br>&gt;&gt; This results in compilation error &quot;B uses transitivity to define<br>&gt;&gt; relationship between imported groups A and C&quot;.<br>&gt;&gt; The rationale behind this is that otherwise one can create relationships<br>&gt;&gt; between standard precedence groups that are confusing for the reader.<br>&gt;&gt;<br>&gt;&gt; ====end====<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Seems good to me.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A<br>&gt;&gt; (it would not be defining a *new* relationship between A and C in that<br>&gt;&gt; case)?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Agreed, will remove.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Ok.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Your proposal should call out the special treatment of the Assignment and<br>&gt;&gt;&gt; Ternary groups.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Do you mean that most operators should define greater precedence than<br>&gt;&gt; Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Just that they have implicit members.<br>&gt;&gt;<br>&gt;&gt; John.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/f62826dc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 20, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My working version is still the one in the proposal, but I&#39;m planning to add the alternative versions we discussed, including your and Brent&#39;s variants.<br>&gt; <br>&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;). Your lighter version looks more clean, but somewhat less consistent and more free in terms of grammar.<br>&gt; <br>&gt; Also, I&#39;ve got another version, which is considerably ligher than current one, while being as structured:<br>&gt; <br>&gt; precedence Multiplicative {<br>&gt;     associativity(left)<br>&gt;     above(Additive)<br>&gt;     below(Exponentiative)<br>&gt; }<br></p><p>Why not:<br></p><p>precedence Multiplicative {<br>    associativity left<br>    above Additive<br>    below Epxonentiative<br>}<br></p><p>Just seeing if removing the parens reduces some of the noise. <br></p><p>Sorry if I missed this suggestion earlier and it was denied :P<br></p><p>Brandon <br></p><p><br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br>&gt;&gt; <br>&gt;&gt; Cool.<br>&gt;&gt; <br>&gt;&gt; What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/60a72e1c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>On Fri, May 20, 2016 at 5:06 PM, Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt;<br>&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; My working version is still the one in the proposal, but I&#39;m planning to<br>&gt; add the alternative versions we discussed, including your and Brent&#39;s<br>&gt; variants.<br>&gt;<br>&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;).<br>&gt; Your lighter version looks more clean, but somewhat less consistent and<br>&gt; more free in terms of grammar.<br>&gt;<br>&gt; Also, I&#39;ve got another version, which is considerably ligher than current<br>&gt; one, while being as structured:<br>&gt;<br>&gt; precedence Multiplicative {<br>&gt;     associativity(left)<br>&gt;     above(Additive)<br>&gt;     below(Exponentiative)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Why not:<br>&gt;<br>&gt; precedence Multiplicative {<br>&gt;     associativity left<br>&gt;     above Additive<br>&gt;     below Epxonentiative<br>&gt; }<br>&gt;<br>&gt; Just seeing if removing the parens reduces some of the noise.<br>&gt;<br>&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt;<br>&gt;<br>+1 to this, or a version with colons and commas<br></p><p><br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Yes, in this case it should be allowed, because this relationship already<br>&gt;&gt; existed in imported modules. I will add that, too, thanks!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Cool.<br>&gt;&gt;<br>&gt;&gt; What is the latest syntax you are using?  Did you consider any of the<br>&gt;&gt; lighter weight options?  That subthread died without conclusion (unless I<br>&gt;&gt; missed something somehow).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence<br>&gt;&gt;&gt;&gt; relationships in both directions on a new precedence group allows a new<br>&gt;&gt;&gt;&gt; precedence group to create a precedence relationship between existing<br>&gt;&gt;&gt;&gt; unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope<br>&gt;&gt;&gt; relationship definition.<br>&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship<br>&gt;&gt;&gt; between two imported groups, is an error. Example:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt; import X<br>&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define<br>&gt;&gt;&gt; relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships<br>&gt;&gt;&gt; between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A<br>&gt;&gt;&gt; (it would not be defining a *new* relationship between A and C in that<br>&gt;&gt;&gt; case)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment<br>&gt;&gt;&gt;&gt; and Ternary groups.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Do you mean that most operators should define greater precedence than<br>&gt;&gt;&gt; Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/644c7341/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 5:06 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; My working version is still the one in the proposal, but I&#39;m planning to add the alternative versions we discussed, including your and Brent&#39;s variants.<br>&gt;&gt; <br>&gt;&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;). Your lighter version looks more clean, but somewhat less consistent and more free in terms of grammar.<br>&gt;&gt; <br>&gt;&gt; Also, I&#39;ve got another version, which is considerably ligher than current one, while being as structured:<br>&gt;&gt; <br>&gt;&gt; precedence Multiplicative {<br>&gt;&gt;     associativity(left)<br>&gt;&gt;     above(Additive)<br>&gt;&gt;     below(Exponentiative)<br>&gt;&gt; }<br>&gt; <br>&gt; Why not:<br>&gt; <br>&gt; precedence Multiplicative {<br>&gt;     associativity left<br>&gt;     above Additive<br>&gt;     below Epxonentiative<br>&gt; }<br>&gt; <br>&gt; Just seeing if removing the parens reduces some of the noise. <br></p><p>I would be happy with this.  It is almost the same as what I had suggested, just using &gt; and &lt; rather than above and below (because that was what the proposal was using).  Using words instead is fine with me.  The parens are my biggest objection in this version.  In the original version I also didn’t like the verbosity of `precedencegroup` and the redundant statement `precedence` inside the braces.<br></p><p>&gt; <br>&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Anton<br>&gt;&gt; <br>&gt;&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br>&gt;&gt; <br>&gt;&gt; Cool.<br>&gt;&gt; <br>&gt;&gt; What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt;&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/7fd732ab/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 21, 2016 at 03:00:00pm</p></header><div class="content"><p>Updated the proposal:<br>https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>I included many of alternate solutions. Please, reply, if I missed any.<br></p><p>Still I do not hurry to swap any of alternate solution with syntax used<br>throughout the proposal, although many of them are objectively better.<br></p><p>- Anton<br></p><p>2016-05-21 1:17 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br></p><p>&gt;<br>&gt; On May 20, 2016, at 5:06 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; My working version is still the one in the proposal, but I&#39;m planning to<br>&gt; add the alternative versions we discussed, including your and Brent&#39;s<br>&gt; variants.<br>&gt;<br>&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;).<br>&gt; Your lighter version looks more clean, but somewhat less consistent and<br>&gt; more free in terms of grammar.<br>&gt;<br>&gt; Also, I&#39;ve got another version, which is considerably ligher than current<br>&gt; one, while being as structured:<br>&gt;<br>&gt; precedence Multiplicative {<br>&gt;     associativity(left)<br>&gt;     above(Additive)<br>&gt;     below(Exponentiative)<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Why not:<br>&gt;<br>&gt; precedence Multiplicative {<br>&gt;     associativity left<br>&gt;     above Additive<br>&gt;     below Epxonentiative<br>&gt; }<br>&gt;<br>&gt;<br>&gt; Just seeing if removing the parens reduces some of the noise.<br>&gt;<br>&gt;<br>&gt; I would be happy with this.  It is almost the same as what I had<br>&gt; suggested, just using &gt; and &lt; rather than above and below (because that was<br>&gt; what the proposal was using).  Using words instead is fine with me.  The<br>&gt; parens are my biggest objection in this version.  In the original version I<br>&gt; also didn’t like the verbosity of `precedencegroup` and the redundant<br>&gt; statement `precedence` inside the braces.<br>&gt;<br>&gt;<br>&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Yes, in this case it should be allowed, because this relationship already<br>&gt;&gt; existed in imported modules. I will add that, too, thanks!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Cool.<br>&gt;&gt;<br>&gt;&gt; What is the latest syntax you are using?  Did you consider any of the<br>&gt;&gt; lighter weight options?  That subthread died without conclusion (unless I<br>&gt;&gt; missed something somehow).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence<br>&gt;&gt;&gt;&gt; relationships in both directions on a new precedence group allows a new<br>&gt;&gt;&gt;&gt; precedence group to create a precedence relationship between existing<br>&gt;&gt;&gt;&gt; unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope<br>&gt;&gt;&gt; relationship definition.<br>&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship<br>&gt;&gt;&gt; between two imported groups, is an error. Example:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt; import X<br>&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define<br>&gt;&gt;&gt; relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships<br>&gt;&gt;&gt; between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A<br>&gt;&gt;&gt; (it would not be defining a *new* relationship between A and C in that<br>&gt;&gt;&gt; case)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment<br>&gt;&gt;&gt;&gt; and Ternary groups.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Do you mean that most operators should define greater precedence than<br>&gt;&gt;&gt; Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; John.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/e66b2346/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 21, 2016 at 09:00:00am</p></header><div class="content"><p>Looking real good (especially the alternative section :P)!<br></p><p>What&#39;s the rationale for using upper and lower?<br></p><p>My objection to this is how it can be read: &quot;precedence addition associativity left upper XXX lower XXX&quot;<br></p><p>I think upper and lower kind of break the flow of how it is read. <br></p><p>This seems clearer (when read as you are skimming code): &quot;precedence addition associativity left above XXX below XXX&quot;<br></p><p>While I&#39;m at it...might I suggest something controversial?<br></p><p>associativity -&gt; associate <br></p><p>Example when read: &quot;precedence addition associate left above XXX below XXX&quot;<br></p><p>Reads pretty nice I think. <br></p><p>Brandon<br></p><p>&gt; On May 21, 2016, at 8:48 AM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Updated the proposal:<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; <br>&gt; I included many of alternate solutions. Please, reply, if I missed any.<br>&gt; <br>&gt; Still I do not hurry to swap any of alternate solution with syntax used throughout the proposal, although many of them are objectively better.<br>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-21 1:17 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 5:06 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My working version is still the one in the proposal, but I&#39;m planning to add the alternative versions we discussed, including your and Brent&#39;s variants.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;). Your lighter version looks more clean, but somewhat less consistent and more free in terms of grammar.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I&#39;ve got another version, which is considerably ligher than current one, while being as structured:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; precedence Multiplicative {<br>&gt;&gt;&gt;&gt;     associativity(left)<br>&gt;&gt;&gt;&gt;     above(Additive)<br>&gt;&gt;&gt;&gt;     below(Exponentiative)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; precedence Multiplicative {<br>&gt;&gt;&gt;     associativity left<br>&gt;&gt;&gt;     above Additive<br>&gt;&gt;&gt;     below Epxonentiative<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just seeing if removing the parens reduces some of the noise. <br>&gt;&gt; <br>&gt;&gt; I would be happy with this.  It is almost the same as what I had suggested, just using &gt; and &lt; rather than above and below (because that was what the proposal was using).  Using words instead is fine with me.  The parens are my biggest objection in this version.  In the original version I also didn’t like the verbosity of `precedencegroup` and the redundant statement `precedence` inside the braces.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cool.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/d25c7a0c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 21, 2016 at 08:00:00am</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On May 21, 2016, at 7:48 AM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; Updated the proposal:<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; <br>&gt; I included many of alternate solutions. Please, reply, if I missed any.<br>&gt; <br>&gt; Still I do not hurry to swap any of alternate solution with syntax used throughout the proposal, although many of them are objectively better.<br></p><p>Looks good.  I really hope we do go with one of the better syntax forms though.<br></p><p>The one thing I don&#39;t like is &quot;upper&quot; and &quot;lower&quot;.  Those don&#39;t make sense to me in this context.  Any of &lt; and &gt;, above and below, greaterThan and lessThan, gt and lt would be better IMO.<br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-21 1:17 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 5:06 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My working version is still the one in the proposal, but I&#39;m planning to add the alternative versions we discussed, including your and Brent&#39;s variants.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;). Your lighter version looks more clean, but somewhat less consistent and more free in terms of grammar.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, I&#39;ve got another version, which is considerably ligher than current one, while being as structured:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; precedence Multiplicative {<br>&gt;&gt;&gt;&gt;     associativity(left)<br>&gt;&gt;&gt;&gt;     above(Additive)<br>&gt;&gt;&gt;&gt;     below(Exponentiative)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why not:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; precedence Multiplicative {<br>&gt;&gt;&gt;     associativity left<br>&gt;&gt;&gt;     above Additive<br>&gt;&gt;&gt;     below Epxonentiative<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just seeing if removing the parens reduces some of the noise. <br>&gt;&gt; <br>&gt;&gt; I would be happy with this.  It is almost the same as what I had suggested, just using &gt; and &lt; rather than above and below (because that was what the proposal was using).  Using words instead is fine with me.  The parens are my biggest objection in this version.  In the original version I also didn’t like the verbosity of `precedencegroup` and the redundant statement `precedence` inside the braces.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Cool.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/60386f84/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 21, 2016 at 04:00:00pm</p></header><div class="content"><p>Sorry, &quot;upper&quot; and &quot;lower&quot; was my mistake that I copy-pasted all over the<br>place. Just in case, I added those alternate word variants, as well.<br></p><p>- Anton<br></p><p>2016-05-21 16:31 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br></p><p>&gt;<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On May 21, 2016, at 7:48 AM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;<br>&gt; Updated the proposal:<br>&gt;<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; I included many of alternate solutions. Please, reply, if I missed any.<br>&gt;<br>&gt; Still I do not hurry to swap any of alternate solution with syntax used<br>&gt; throughout the proposal, although many of them are objectively better.<br>&gt;<br>&gt;<br>&gt; Looks good.  I really hope we do go with one of the better syntax forms<br>&gt; though.<br>&gt;<br>&gt; The one thing I don&#39;t like is &quot;upper&quot; and &quot;lower&quot;.  Those don&#39;t make sense<br>&gt; to me in this context.  Any of &lt; and &gt;, above and below, greaterThan and<br>&gt; lessThan, gt and lt would be better IMO.<br>&gt;<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-05-21 1:17 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 5:06 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On May 20, 2016, at 5:56 PM, Антон Жилин via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; My working version is still the one in the proposal, but I&#39;m planning to<br>&gt;&gt; add the alternative versions we discussed, including your and Brent&#39;s<br>&gt;&gt; variants.<br>&gt;&gt;<br>&gt;&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;).<br>&gt;&gt; Your lighter version looks more clean, but somewhat less consistent and<br>&gt;&gt; more free in terms of grammar.<br>&gt;&gt;<br>&gt;&gt; Also, I&#39;ve got another version, which is considerably ligher than current<br>&gt;&gt; one, while being as structured:<br>&gt;&gt;<br>&gt;&gt; precedence Multiplicative {<br>&gt;&gt;     associativity(left)<br>&gt;&gt;     above(Additive)<br>&gt;&gt;     below(Exponentiative)<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Why not:<br>&gt;&gt;<br>&gt;&gt; precedence Multiplicative {<br>&gt;&gt;     associativity left<br>&gt;&gt;     above Additive<br>&gt;&gt;     below Epxonentiative<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Just seeing if removing the parens reduces some of the noise.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I would be happy with this.  It is almost the same as what I had<br>&gt;&gt; suggested, just using &gt; and &lt; rather than above and below (because that was<br>&gt;&gt; what the proposal was using).  Using words instead is fine with me.  The<br>&gt;&gt; parens are my biggest objection in this version.  In the original version I<br>&gt;&gt; also didn’t like the verbosity of `precedencegroup` and the redundant<br>&gt;&gt; statement `precedence` inside the braces.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Sorry if I missed this suggestion earlier and it was denied :P<br>&gt;&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; - Anton<br>&gt;&gt;<br>&gt;&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yes, in this case it should be allowed, because this relationship<br>&gt;&gt;&gt; already existed in imported modules. I will add that, too, thanks!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cool.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What is the latest syntax you are using?  Did you consider any of the<br>&gt;&gt;&gt; lighter weight options?  That subthread died without conclusion (unless I<br>&gt;&gt;&gt; missed something somehow).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; - Anton<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence<br>&gt;&gt;&gt;&gt;&gt; relationships in both directions on a new precedence group allows a new<br>&gt;&gt;&gt;&gt;&gt; precedence group to create a precedence relationship between existing<br>&gt;&gt;&gt;&gt;&gt; unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope<br>&gt;&gt;&gt;&gt; relationship definition.<br>&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create<br>&gt;&gt;&gt;&gt; relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define<br>&gt;&gt;&gt;&gt; relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create<br>&gt;&gt;&gt;&gt; relationships between standard precedence groups that are confusing for the<br>&gt;&gt;&gt;&gt; reader.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Seems good to me.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt;<br>&gt;&gt;&gt;&gt; A (it would not be defining a *new* relationship between A and C in that<br>&gt;&gt;&gt;&gt; case)?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment<br>&gt;&gt;&gt;&gt;&gt; and Ternary groups.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than<br>&gt;&gt;&gt;&gt; Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; John.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160521/c04482d7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 23, 2016 at 11:00:00pm</p></header><div class="content"><p>@CoreTeam Please, don&#39;t forget to merge pull request with fixes and<br>alternatives from review period.<br></p><p>@AnyoneElse Today is (formally) the last day of review. It may be your last<br>chance!<br></p><p>Apple repo link:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>My repo with some latest changes:<br>https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/8fe50a15/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>May 23, 2016 at 05:00:00pm</p></header><div class="content"><p>If we&#39;re going to go with words, how about &quot;before&quot; and &quot;after&quot;<br></p><p>As in &quot;The Multiplicitive precedence group gets evaluated before Additive<br>and after Exponentiative&quot;<br></p><p>On Mon, May 23, 2016 at 4:10 PM, Антон Жилин &lt;swift-evolution at swift.org&gt;<br>wrote:<br></p><p>&gt; @CoreTeam Please, don&#39;t forget to merge pull request with fixes and<br>&gt; alternatives from review period.<br>&gt;<br>&gt; @AnyoneElse Today is (formally) the last day of review. It may be your<br>&gt; last chance!<br>&gt;<br>&gt; Apple repo link:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; My repo with some latest changes:<br>&gt;<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/5470ab12/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 23, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On May 23, 2016, at 13:10, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; @CoreTeam Please, don&#39;t forget to merge pull request with fixes and alternatives from review period.<br>&gt; <br>&gt; @AnyoneElse Today is (formally) the last day of review. It may be your last chance!<br>&gt; <br>&gt; Apple repo link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br>&gt; <br>&gt; My repo with some latest changes:<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md &lt;https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md&gt;<br></p><p>Thanks for doing this. While I’m a little apprehensive about the implementation, I don’t expect it to be a problem in practice; a DAG is a pretty safe data structure, and the size of the graph (i.e. the number of precedence groups in a program) probably won’t be that big in practice. And it’s so much better than arbitrary precedence numbers.<br></p><p>To discuss later: what are the naming guidelines for precedence groups? (What part of speech? Why UpperCamelCase?) Are they in a separate scope from normal names? Can you qualify them with module names?<br></p><p>(Operator declarations in general are weirdly global right now, because they need to be resolvable without doing full lookup work, and because it was easier to implement them that way. So making precedence groups special as well is probably fine, at least for now.)<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160523/5d1353b6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 24, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; While I’m a little apprehensive about the implementation<br></p><p>It was simple in the beginning, then two additions were made:<br>1. Global transitivity checking<br>2. Precedence relationships that, by transitivity rule, create relationship<br>between two imported groups, is an error (John McCall)<br></p><p>I don&#39;t know how to do any of these checks without nxn connectivity table.<br>Is that even possible?<br></p><p>&gt; Are they in a separate scope from normal names?<br>Yes, otherwise Range would be a conflict with standard library structure.<br></p><p>&gt; Can you qualify them with module names?<br>Right now, I guess, no, although that would be nice to have. I agree that<br>this can be discussed later.<br></p><p>- Anton<br></p><p>2016-05-24 6:14 GMT+03:00 Jordan Rose &lt;jordan_rose at apple.com&gt;:<br></p><p>&gt;<br>&gt; On May 23, 2016, at 13:10, Антон Жилин via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; @CoreTeam Please, don&#39;t forget to merge pull request with fixes and<br>&gt; alternatives from review period.<br>&gt;<br>&gt; @AnyoneElse Today is (formally) the last day of review. It may be your<br>&gt; last chance!<br>&gt;<br>&gt; Apple repo link:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt; My repo with some latest changes:<br>&gt;<br>&gt; https://github.com/Anton3/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt;<br>&gt;<br>&gt; Thanks for doing this. While I’m a little apprehensive about the<br>&gt; implementation, I don’t expect it to be a problem in practice; a DAG is a<br>&gt; pretty safe data structure, and the size of the graph (i.e. the number of<br>&gt; precedence groups in a program) probably won’t be that big in practice. And<br>&gt; it’s so much better than arbitrary precedence numbers.<br>&gt;<br>&gt; To discuss later: what are the naming guidelines for precedence groups?<br>&gt; (What part of speech? Why UpperCamelCase?) Are they in a separate scope<br>&gt; from normal names? Can you qualify them with module names?<br>&gt;<br>&gt; (Operator declarations in general are weirdly global right now, because<br>&gt; they need to be resolvable without doing full lookup work, and because it<br>&gt; was easier to implement them that way. So making precedence groups special<br>&gt; as well is probably fine, at least for now.)<br>&gt;<br>&gt; Jordan<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/917d30ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 24, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; &gt; Can you qualify them with module names?<br>&gt; Right now, I guess, no, although that would be nice to have. I agree that this can be discussed later.<br></p><p>I wonder if we should force people today to put a `public` keyword on their `operator` and `precedence` (or whatever) declarations, so that when we eventually *do* stop doing the weird global thing we&#39;re currently doing, existing code won&#39;t break (as much).<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>May 31, 2016 at 01:00:00am</p></header><div class="content"><p>I assume that Core team is scheduling a discussion or already discussing<br>the proposal, and that really takes time in our case.<br></p><p>In reply to Brent, I think that we can start requiring `public` if (when?)<br>operator visibility levels are added.<br></p><p>- Anton<br></p><p>2016-05-24 13:53 GMT+03:00 Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br></p><p>&gt; &gt; &gt; Can you qualify them with module names?<br>&gt; &gt; Right now, I guess, no, although that would be nice to have. I agree<br>&gt; that this can be discussed later.<br>&gt;<br>&gt; I wonder if we should force people today to put a `public` keyword on<br>&gt; their `operator` and `precedence` (or whatever) declarations, so that when<br>&gt; we eventually *do* stop doing the weird global thing we&#39;re currently doing,<br>&gt; existing code won&#39;t break (as much).<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160531/ad8fa610/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>June  9, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;m starting to worry about the proposal, too. Any news?<br></p><p>- Anton<br></p><p>2016-05-31 1:07 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; I assume that Core team is scheduling a discussion or already discussing<br>&gt; the proposal, and that really takes time in our case.<br>&gt;<br>&gt; In reply to Brent, I think that we can start requiring `public` if (when?)<br>&gt; operator visibility levels are added.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-05-24 13:53 GMT+03:00 Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;<br>&gt;&gt; &gt; &gt; Can you qualify them with module names?<br>&gt;&gt; &gt; Right now, I guess, no, although that would be nice to have. I agree<br>&gt;&gt; that this can be discussed later.<br>&gt;&gt;<br>&gt;&gt; I wonder if we should force people today to put a `public` keyword on<br>&gt;&gt; their `operator` and `precedence` (or whatever) declarations, so that when<br>&gt;&gt; we eventually *do* stop doing the weird global thing we&#39;re currently doing,<br>&gt;&gt; existing code won&#39;t break (as much).<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/de43d6e8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 12:31 PM, Антон Жилин via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m starting to worry about the proposal, too. Any news?<br>&gt; <br>&gt; - Anton<br></p><p><br>They posted:<br></p><p>The core team has caught up except for three proposals that have gone through the review period, but which haven’t been decided yet:<br></p><p>The details of SE-0086 are still being discussed.  The proposal overall is certain to be approved, but the specific list of affected types may or may not change. <br></p><p>The core team has not yet had time to discuss SE-0077, SE-0091 - we typically have a weekly core team meeting to discuss proposals, and ran out of time to discuss them (due to design discussion required for other proposals).  We will discuss them (as well as the other reviews about to complete) next time we meet.<br></p><p>With WWDC looming, the core team is getting a bit DoS’d, so reviews and detailed discussions may end up getting deferred for a couple of weeks.<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/5bcbd09c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 20, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 20, 2016, at 4:56 PM, Антон Жилин &lt;antonyzhilin at gmail.com&gt; wrote:<br>&gt; <br>&gt; My working version is still the one in the proposal, but I&#39;m planning to add the alternative versions we discussed, including your and Brent&#39;s variants.<br>&gt; <br>&gt; IMHO, original version is heavy, but clear (not to confuse with &quot;clean&quot;). Your lighter version looks more clean, but somewhat less consistent and more free in terms of grammar.<br>&gt; <br>&gt; Also, I&#39;ve got another version, which is considerably ligher than current one, while being as structured:<br>&gt; <br>&gt; precedence Multiplicative {<br>&gt;     associativity(left)<br>&gt;     above(Additive)<br>&gt;     below(Exponentiative)<br>&gt; }<br></p><p>In this case I think clear and clean are one and the same.  The parentheses feel arbitrarily noisy to me.  What purpose do they serve?<br></p><p>&gt; <br>&gt; - Anton<br>&gt; <br>&gt; 2016-05-21 0:25 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt;:<br>&gt; <br>&gt;&gt; On May 20, 2016, at 4:22 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes, in this case it should be allowed, because this relationship already existed in imported modules. I will add that, too, thanks!<br>&gt; <br>&gt; Cool.<br>&gt; <br>&gt; What is the latest syntax you are using?  Did you consider any of the lighter weight options?  That subthread died without conclusion (unless I missed something somehow).<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Anton<br>&gt;&gt; <br>&gt;&gt; 2016-05-21 0:01 GMT+03:00 Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt; On May 20, 2016, at 3:51 PM, John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 20, 2016, at 1:25 PM, Антон Жилин &lt;antonyzhilin at gmail.com &lt;mailto:antonyzhilin at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Inline:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2016-05-20 20:58 GMT+03:00 John McCall &lt;rjmccall at apple.com &lt;mailto:rjmccall at apple.com&gt;&gt;:<br>&gt;&gt;&gt;&gt; The transitivity rule plus the ability to define precedence relationships in both directions on a new precedence group allows a new precedence group to create a precedence relationship between existing unrelated precedence groups.  This should be forbidden.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agreed, although there is an alternate solution to allow global-scope relationship definition.<br>&gt;&gt;&gt;&gt; Trying to write it formally:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ====begin====<br>&gt;&gt;&gt;&gt; Precedence relationships that, by transitivity rule, create relationship between two imported groups, is an error. Example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Module X<br>&gt;&gt;&gt;&gt; precedencegroup A { }<br>&gt;&gt;&gt;&gt; precedencegroup C { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Module Y<br>&gt;&gt;&gt;&gt; import X<br>&gt;&gt;&gt;&gt; precedencegroup B { precedence(&gt; A) precedence(&lt; C) }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This results in compilation error &quot;B uses transitivity to define relationship between imported groups A and C&quot;.<br>&gt;&gt;&gt;&gt; The rationale behind this is that otherwise one can create relationships between standard precedence groups that are confusing for the reader.<br>&gt;&gt;&gt;&gt; ====end====<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Seems good to me.<br>&gt;&gt; <br>&gt;&gt; Would this be allowed if Module X already defined precedence group C &gt; A (it would not be defining a *new* relationship between A and C in that case)?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What&#39;s the purpose of equality relationships between precedence groups?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Agreed, will remove.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ok.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Your proposal should call out the special treatment of the Assignment and Ternary groups.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Do you mean that most operators should define greater precedence than Assignment / Ternary? Or there should be some other special treatment?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just that they have implicit members.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; John.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160520/29e34c20/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Review] SE-0077: Improved operator declarations</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>May 25, 2016 at 11:00:00am</p></header><div class="content"><p>Any updates about the status of this review?<br></p><p>Thanks,<br>Brandon<br></p><p>&gt; On May 17, 2016, at 11:30 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0077: Improved operator declarations&quot; begins now and runs through May 23. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
