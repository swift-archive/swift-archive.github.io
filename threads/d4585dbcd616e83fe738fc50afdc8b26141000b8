<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0a88a27755600d9f1c1ce00e3c209a38?s=50"></div><header><strong>[Review] SE-0111: Remove type system significance of function argument labels</strong> from <string>Brad Hilton</string> &lt;brad.hilton.nw at gmail.com&gt;<p>July  1, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>-1. Argument labels can have meaning and are very useful, especially for default parameter names in closures:<br></p><p>```// Declaration<br>func handleResponse(handler: (response: Response) -&gt; ())<br></p><p>// Callsite<br>handleResponse { response in // response automatically implied as the parameter name, clarifying usage.<br>  ...<br>}<br>```<br></p><p>I’d prefer we leave the existing behavior or consider the alternative solution to prohibit implicit subtyping.<br></p><p>&gt;Does this proposal fit well with the feel and direction of Swift?<br></p><p>I don’t feel that it does. I’ve always felt that being able to declare function types with named parameters was a powerful feature that allowed more expressivity in the language.<br></p><p>``` // Clear that the first String argument is the message and that the second is the sender<br>let messageHandler: (message: String, sender: String) -&gt; ()<br></p><p>// Not clear what these parameters are<br>let messageHandler: (String, String) -&gt; ()```<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The closest comparison I can think of are Objective-C selectors, but these are more powerful and type-safe. I think it’s a real strength of the language.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading, and I have used function declarations with and without labels extensively.<br></p><p>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels&quot; begins now and runs through July 4. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br></p><p>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>[Review] SE-0111: Remove type system significance of function argument labels</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 7:37 AM, Brad Hilton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; -1. Argument labels can have meaning and are very useful, especially for default parameter names in closures:<br>&gt; <br>&gt; ```// Declaration<br>&gt; func handleResponse(handler: (response: Response) -&gt; ())<br>&gt; <br>&gt; // Callsite<br>&gt; handleResponse { response in // response automatically implied as the parameter name, clarifying usage.<br>&gt;  ...<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; I’d prefer we leave the existing behavior or consider the alternative solution to prohibit implicit subtyping.<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; I don’t feel that it does. I’ve always felt that being able to declare function types with named parameters was a powerful feature that allowed more expressivity in the language.<br>&gt; <br>&gt; ``` // Clear that the first String argument is the message and that the second is the sender<br>&gt; let messageHandler: (message: String, sender: String) -&gt; ()<br>&gt; <br>&gt; // Not clear what these parameters are<br>&gt; let messageHandler: (String, String) -&gt; ()```<br>&gt; <br></p><p>Would a way of specifying argument labels as part of the variable name help? That is, making variables have compound names like functions when they have function type? E.g.<br></p><p>let messageHandler(message:sender:) : (String, String) -&gt; ()<br></p><p>Or more commonly,<br></p><p>let messageHandler(message:sender:) = … // something resulting in type (String, String) -&gt; ()<br></p><p>This would achieve the goal of taking labels out of types, but still have them present and relevant as part of names.<br></p><p><br>&gt;&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; The closest comparison I can think of are Objective-C selectors, but these are more powerful and type-safe. I think it’s a real strength of the language.<br>&gt; <br>&gt;&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading, and I have used function declarations with and without labels extensively.<br>&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0111: Remove type system significance of function argument labels&quot; begins now and runs through July 4. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0111-remove-arg-label-type-significance.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt; <br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
