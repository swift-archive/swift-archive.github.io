<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/86faaff6b90699a5dda6b5cddcc36f97?s=50"></div><header><strong>Issues with LLDB and modules</strong> from <string>Dmitry Shevchenko</string> &lt;dmishe at google.com&gt;<p>September  9, 2016 at 06:00:00pm</p></header><div class="content"><p>Hello, I would like to ask a couple of implementation questions about LLDB<br>and Swift.<br></p><p>We are building swift in a custom build system (bazel.org) where we try to<br>use Swift static libraries to compose our programs. In other words, we<br>build multiple Swift targets into a pair of (.a, .switfmodule) and then<br>link static libraries together into the final executable.<br></p><p>It works pretty well, but there are issues when it comes to debugging.<br>Ideally, we would like to debug with and without dSYM to speedup<br>compilations.<br></p><p>&gt;From reading SwiftASTContext.cpp, it looks like LLDB needs to load the<br>corresponding .swiftmodule to work.<br>It does so by looking at the AST tag in the symbol table of the executable.<br>Is this correct, or is there another way that LLDB can find the module?<br></p><p>Additionally, there can only be one such tag, since LLDB reads the first<br>one it finds and stops.<br>However, if a program is composed from multiple modules, it&#39;s not possible<br>to tell the debugger to load them all. For example, if the app is written<br>mostly in ObjC, but has multiple helper Swift libraries where each has its<br>own module, and those modules do not import each other (so there&#39;s no clear<br>way to say what is the &quot;main&quot; module), how would we tell LLDB to load all<br>of them?<br></p><p>Thank you!<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20160909/981c42e5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/86faaff6b90699a5dda6b5cddcc36f97?s=50"></div><header><strong>Issues with LLDB and modules</strong> from <string>Dmitry Shevchenko</string> &lt;dmishe at google.com&gt;<p>September 12, 2016 at 04:00:00pm</p></header><div class="content"><p>My apologies, the url should read http://bazel.io.<br></p><p>On Fri, Sep 9, 2016 at 2:04 PM Dmitry Shevchenko &lt;dmishe at google.com&gt; wrote:<br></p><p>&gt; Hello, I would like to ask a couple of implementation questions about LLDB<br>&gt; and Swift.<br>&gt;<br>&gt; We are building swift in a custom build system (bazel.org) where we try<br>&gt; to use Swift static libraries to compose our programs. In other words, we<br>&gt; build multiple Swift targets into a pair of (.a, .switfmodule) and then<br>&gt; link static libraries together into the final executable.<br>&gt;<br>&gt; It works pretty well, but there are issues when it comes to debugging.<br>&gt; Ideally, we would like to debug with and without dSYM to speedup<br>&gt; compilations.<br>&gt;<br>&gt; From reading SwiftASTContext.cpp, it looks like LLDB needs to load the<br>&gt; corresponding .swiftmodule to work.<br>&gt; It does so by looking at the AST tag in the symbol table of the<br>&gt; executable.<br>&gt; Is this correct, or is there another way that LLDB can find the module?<br>&gt;<br>&gt; Additionally, there can only be one such tag, since LLDB reads the first<br>&gt; one it finds and stops.<br>&gt; However, if a program is composed from multiple modules, it&#39;s not possible<br>&gt; to tell the debugger to load them all. For example, if the app is written<br>&gt; mostly in ObjC, but has multiple helper Swift libraries where each has its<br>&gt; own module, and those modules do not import each other (so there&#39;s no clear<br>&gt; way to say what is the &quot;main&quot; module), how would we tell LLDB to load all<br>&gt; of them?<br>&gt;<br>&gt; Thank you!<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20160912/8f3876ac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/86faaff6b90699a5dda6b5cddcc36f97?s=50"></div><header><strong>Issues with LLDB and modules</strong> from <string>Dmitry Shevchenko</string> &lt;dmishe at google.com&gt;<p>September 14, 2016 at 04:00:00pm</p></header><div class="content"><p>Added a functional test project on a bug here<br>https://bugs.swift.org/browse/SR-2637<br></p><p>Hopefully this makes things a bit more clear.<br></p><p>On Mon, Sep 12, 2016 at 12:13 PM Dmitry Shevchenko &lt;dmishe at google.com&gt;<br>wrote:<br></p><p>&gt; My apologies, the url should read http://bazel.io.<br>&gt;<br>&gt;<br>&gt; On Fri, Sep 9, 2016 at 2:04 PM Dmitry Shevchenko &lt;dmishe at google.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Hello, I would like to ask a couple of implementation questions about LLDB<br>&gt; and Swift.<br>&gt;<br>&gt; We are building swift in a custom build system (bazel.org) where we try<br>&gt; to use Swift static libraries to compose our programs. In other words, we<br>&gt; build multiple Swift targets into a pair of (.a, .switfmodule) and then<br>&gt; link static libraries together into the final executable.<br>&gt;<br>&gt; It works pretty well, but there are issues when it comes to debugging.<br>&gt; Ideally, we would like to debug with and without dSYM to speedup<br>&gt; compilations.<br>&gt;<br>&gt; From reading SwiftASTContext.cpp, it looks like LLDB needs to load the<br>&gt; corresponding .swiftmodule to work.<br>&gt; It does so by looking at the AST tag in the symbol table of the<br>&gt; executable.<br>&gt; Is this correct, or is there another way that LLDB can find the module?<br>&gt;<br>&gt; Additionally, there can only be one such tag, since LLDB reads the first<br>&gt; one it finds and stops.<br>&gt; However, if a program is composed from multiple modules, it&#39;s not possible<br>&gt; to tell the debugger to load them all. For example, if the app is written<br>&gt; mostly in ObjC, but has multiple helper Swift libraries where each has its<br>&gt; own module, and those modules do not import each other (so there&#39;s no clear<br>&gt; way to say what is the &quot;main&quot; module), how would we tell LLDB to load all<br>&gt; of them?<br>&gt;<br>&gt; Thank you!<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20160914/360386ed/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
