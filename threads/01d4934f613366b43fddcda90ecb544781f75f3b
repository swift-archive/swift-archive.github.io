<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0090: Remove .self and freely allow type references in expressions&quot; begins now and runs through May 23. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>May 17, 2016 at 11:00:00pm</p></header><div class="content"><p>Could we reconsider rejecting the uppercase and lowercase conventions as a<br>syntactic requirement? While I still disagree with enum cases not being<br>UpperCamelCase, that decision narrows the &#39;approved&#39; enough that the<br>syntactic requirement would line up with guidance. It would also make<br>teaching the conventions much easier. New students who, for whatever<br>reason, prefer naming variables with upper camel case would have immediate<br>and concrete feedback from the dev tools that that is non-idiomatic.<br></p><p><br>If that is a non starter, let me try another. Was a disambiguating token<br>preceding the type reference considered?<br></p><p>On Tue, May 17, 2016 at 11:33 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0090: Remove .self and freely allow type references in<br>&gt; expressions&quot; begins now and runs through May 23. The proposal is available<br>&gt; here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/50e0d255/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May 17, 2016 at 10:00:00pm</p></header><div class="content"><p>+1.  A lot of (mostly functional) languages that need to disambiguate type constructors from terms enforce this as a requirement to great effect.<br></p><p>~Robert Widmann<br></p><p>2016/05/17 21:56、T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; Could we reconsider rejecting the uppercase and lowercase conventions as a syntactic requirement? While I still disagree with enum cases not being UpperCamelCase, that decision narrows the &#39;approved&#39; enough that the syntactic requirement would line up with guidance. It would also make teaching the conventions much easier. New students who, for whatever reason, prefer naming variables with upper camel case would have immediate and concrete feedback from the dev tools that that is non-idiomatic. <br>&gt; <br>&gt; <br>&gt; If that is a non starter, let me try another. Was a disambiguating token preceding the type reference considered? <br>&gt; <br>&gt;&gt; On Tue, May 17, 2016 at 11:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0090: Remove .self and freely allow type references in expressions&quot; begins now and runs through May 23. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/0dbc32a4/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On May 17, 2016, at 8:56 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Could we reconsider rejecting the uppercase and lowercase conventions as a syntactic requirement? While I still disagree with enum cases not being UpperCamelCase, that decision narrows the &#39;approved&#39; enough that the syntactic requirement would line up with guidance. It would also make teaching the conventions much easier. New students who, for whatever reason, prefer naming variables with upper camel case would have immediate and concrete feedback from the dev tools that that is non-idiomatic. <br></p><p>Enforcing this at the language level would require us to decide how to handle importing APIs that don&#39;t follow the rules. We&#39;ve put effort into modifying many of the Core Foundation APIs, but not all of them, and there&#39;s of course still POSIX and the standard C library. (We&#39;d also need a rule for non-Western scripts that don&#39;t distinguish case.)<br></p><p>&gt; <br>&gt; If that is a non starter, let me try another. Was a disambiguating token preceding the type reference considered? <br></p><p>We expressly wanted to avoid anything like C++&#39;s `typename` and `template` disambiguation hacks.<br></p><p>-Joe<br></p><p>&gt; On Tue, May 17, 2016 at 11:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0090: Remove .self and freely allow type references in expressions&quot; begins now and runs through May 23. The proposal is available here:<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 11:40 AM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On May 17, 2016, at 8:56 PM, T.J. Usiyan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Could we reconsider rejecting the uppercase and lowercase conventions as a syntactic requirement? While I still disagree with enum cases not being UpperCamelCase, that decision narrows the &#39;approved&#39; enough that the syntactic requirement would line up with guidance. It would also make teaching the conventions much easier. New students who, for whatever reason, prefer naming variables with upper camel case would have immediate and concrete feedback from the dev tools that that is non-idiomatic. <br>&gt; <br>&gt; Enforcing this at the language level would require us to decide how to handle importing APIs that don&#39;t follow the rules. We&#39;ve put effort into modifying many of the Core Foundation APIs, but not all of them, and there&#39;s of course still POSIX and the standard C library. (We&#39;d also need a rule for non-Western scripts that don&#39;t distinguish case.)<br>&gt; <br>&gt;&gt; <br>&gt;&gt; If that is a non starter, let me try another. Was a disambiguating token preceding the type reference considered? <br>&gt; <br>&gt; We expressly wanted to avoid anything like C++&#39;s `typename` and `template` disambiguation hacks.<br></p><p>Thank you for this!  Those are absolutely horrible.<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Tue, May 17, 2016 at 11:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0090: Remove .self and freely allow type references in expressions&quot; begins now and runs through May 23. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;        https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt;        https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt;        * What is your evaluation of the proposal?<br>&gt;&gt;        * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;        * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;        * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;        * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;        https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160518/80b4e851/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>May 17, 2016 at 11:00:00pm</p></header><div class="content"><p>On Tue, May 17, 2016 at 8:33 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;         * What is your evaluation of the proposal?<br>&gt;<br></p><p>I suspect few would argue against the premise, namely that .self should go.<br>One quibble with the details, though:<br></p><p>```<br>  useType([Int])         // Passes Array&lt;Int&gt;<br>  useArray([Int])         // Passes an array, containing Int<br>```<br></p><p>This seems a little magical; by contrast, [Int.self] vs. [Int].self is<br>unambiguous. Moreover (not that I can conceive of a use for it), wouldn&#39;t<br>things get hairy if one tries to express `[[Int].self]`? I&#39;d like to<br>propose an alternative:<br></p><p>Python has a trailing comma rule for tuples. That is, to distinguish a<br>parenthesized expression from a single-item tuple, the latter must be<br>written as `(item,)`. Perhaps the same idea could be used in this case.<br>That is:<br></p><p>```<br>[Int] // Array&lt;Int&gt;<br>[Int,] // an array, containing one element Int<br>```<br></p><p>        * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160517/1b507653/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 18, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>I am in favor, except that I think we should keep `.self` in the language.<br></p><p>In my years programming, I have on a few occasions found it *very* useful to have an identity method/property automatically available on all instances. For instance, one of my Ruby projects has a model with `last_week`, `last_month`, `last_year`, etc. class methods on it returning subsets of the available models, and I had a screen with a panel summarizing the number of instances in each of these ranges. When I wanted to add an &quot;all time&quot; count, I upgraded to Ruby 2.2 and used its new `itself` method.<br></p><p>To make this actually useful, .self would have to behave like a normal property in all respects—for instance, it would need to have a read-only lens once we support lenses. I don&#39;t think this is a tall order, but it *is* something that would need to be done.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. It&#39;s a pain to write code that talks about types.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. We don&#39;t normally tolerate &quot;load-bearing duct tape&quot; in the syntax like this.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Ruby has first-class, no-muss, no-fuss class objects like this and it&#39;s really nice.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading, plus I followed some of the earlier discussions.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 18, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On May 18, 2016, at 3:43 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I am in favor, except that I think we should keep `.self` in the language.<br>&gt; <br>&gt; In my years programming, I have on a few occasions found it *very* useful to have an identity method/property automatically available on all instances. For instance, one of my Ruby projects has a model with `last_week`, `last_month`, `last_year`, etc. class methods on it returning subsets of the available models, and I had a screen with a panel summarizing the number of instances in each of these ranges. When I wanted to add an &quot;all time&quot; count, I upgraded to Ruby 2.2 and used its new `itself` method.<br>&gt; <br>&gt; To make this actually useful, .self would have to behave like a normal property in all respects—for instance, it would need to have a read-only lens once we support lenses. I don&#39;t think this is a tall order, but it *is* something that would need to be done.<br></p><p>I thought about this, but { $0 } is already a fairly compact way to express the identity function.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 18, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; I thought about this, but { $0 } is already a fairly compact way to express the identity function.<br></p><p>It is, but I worry a bit about the core team&#39;s tendency to say &quot;Oh, just use a closure&quot; whenever something like this comes up. A function/method/property name can be merely *read*; a closure must be *interpreted*. And writing closures is error-prone—a slip of the keys and you&#39;ve written `{ 0 }` or `{ 40 }` instead of `{ $0 }`, which look similar and (soon will) work in the same expressions but behave completely differently.<br></p><p>Naming operations is powerful; it helps you understand them better and it helps you avoid fat-fingering them.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 1:33 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I thought about this, but { $0 } is already a fairly compact way to express the identity function.<br>&gt; <br>&gt; It is, but I worry a bit about the core team&#39;s tendency to say &quot;Oh, just use a closure&quot; whenever something like this comes up. A function/method/property name can be merely *read*; a closure must be *interpreted*. And writing closures is error-prone—a slip of the keys and you&#39;ve written `{ 0 }` or `{ 40 }` instead of `{ $0 }`, which look similar and (soon will) work in the same expressions but behave completely differently.<br>&gt; <br>&gt; Naming operations is powerful; it helps you understand them better and it helps you avoid fat-fingering them.<br></p><p>+1<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May 18, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 11:33 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; I thought about this, but { $0 } is already a fairly compact way to express the identity function.<br>&gt; <br>&gt; It is, but I worry a bit about the core team&#39;s tendency to say &quot;Oh, just use a closure&quot; whenever something like this comes up. A function/method/property name can be merely *read*; a closure must be *interpreted*. And writing closures is error-prone—a slip of the keys and you&#39;ve written `{ 0 }` or `{ 40 }` instead of `{ $0 }`, which look similar and (soon will) work in the same expressions but behave completely differently.<br></p><p>It seems to me that you could just as easily fat-finger `self` when you meant `.self`. The type system is likely to catch both `{ 0 }` and `self` mistakes.<br></p><p>-Joe<br></p><p>&gt; Naming operations is powerful; it helps you understand them better and it helps you avoid fat-fingering them.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May 18, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On May 18, 2016, at 12:51 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I thought about this, but { $0 } is already a fairly compact way to express the identity function.<br>&gt;&gt; <br>&gt;&gt; It is, but I worry a bit about the core team&#39;s tendency to say &quot;Oh, just use a closure&quot; whenever something like this comes up. A function/method/property name can be merely *read*; a closure must be *interpreted*. And writing closures is error-prone—a slip of the keys and you&#39;ve written `{ 0 }` or `{ 40 }` instead of `{ $0 }`, which look similar and (soon will) work in the same expressions but behave completely differently.<br>&gt; <br>&gt; It seems to me that you could just as easily fat-finger `self` when you meant `.self`.<br></p><p>If I write `list.map { 0 }` instead of `list.map { $0 }`, that&#39;s perfectly valid code. If I write `list.map(self)` instead of `list.map(.self)`, <br></p><p>&gt; The type system is likely to catch both `{ 0 }` and `self` mistakes.<br></p><p>The type system will immediately (absent some odd overloading) catch `self` instead of `.self` because you&#39;re using an instance where a function is expected. But `{ 0 }` is a function `T -&gt; Int` where `T -&gt; T` is expected—a much more subtle difference, particularly since a closure&#39;s return value is often generic and used to determine the return value of the function it&#39;s passed to. So it&#39;s pretty likely that `{ 0 }` will satisfy the requirements of the immediate context; if type-checking is going to fail, it&#39;ll be because some later use of the result expects a `T` instead of an `Int`. So the type-checking failure will come in a future expression or statement, if indeed it ever does come at all.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>May 18, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>+1.  IIRC this wasn&#39;t always required and I was bummed when the requirement was introduced.  Good riddance.  That said, I wouldn&#39;t mind if .self was kept as an alternative as Brent has requested.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Similar response as Brent with regards to Ruby.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Followed the discussion and read the proposal.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2fa5f52f699e07a98fefcf30fb95354?s=50"></div><header><strong>[Review] SE-0090: Remove .self and freely allow type references in expressions</strong> from <string>James Richard</string> &lt;ketzu at me.com&gt;<p>May 18, 2016 at 09:00:00am</p></header><div class="content"><p>+1 to this. Never been a fan of that, and it seems more like a workaround then syntactical clarity.<br></p><p>&gt; On May 17, 2016, at 8:33 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0090: Remove .self and freely allow type references in expressions&quot; begins now and runs through May 23. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
