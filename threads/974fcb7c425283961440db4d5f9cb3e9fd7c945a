<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>April 12, 2016 at 11:00:00pm</p></header><div class="content"><p>I would really like to see something like the following added to the standard library:<br></p><p>extension Dictionary {<br>    <br>    func mapValues&lt;U&gt;(transform:(Key,Value)-&gt;U)-&gt;[Key:U] {<br>        var output:[Key:U] = [:]<br>        for (k,v) in self {<br>            output[k] = transform(k,v)<br>        }<br>        return output<br>    }<br>    <br>}<br></p><p>It comes up enough that I have had to add it to pretty much every one of my projects.  I also don’t feel comfortable adding it to my frameworks, since I figure a lot of people are also adding something like this to their projects, and I don’t want to cause a conflict with their version.  Prime candidate for the standard library.<br></p><p>I like calling it ‘mapValues&#39; as opposed to providing an override for map, since it makes the specific behavior more clear.  I would expect ‘map&#39; to possibly map the keys as well (though there are issues where the new keys overlap).  I suppose you could just have a bunch of overrides for map if the compiler becomes good enough at differentiating return types: (Value)-&gt;(Value), (Key,Value)-&gt;Value, (Key, Value)-&gt;(Key,Value)<br></p><p>Thanks,<br>Jon<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160412/974f945a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 13, 2016 at 02:00:00am</p></header><div class="content"><p>“map” already &quot;maps the values” so I think something like “transform” might be a little clearer, if we don’t want to just overload “map”. Regardless of what it’s called, though, I’m +1 on the functionality.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 13, 2016, at 1:41 AM, Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I would really like to see something like the following added to the standard library:<br>&gt; <br>&gt; extension Dictionary {<br>&gt;     <br>&gt;     func mapValues&lt;U&gt;(transform:(Key,Value)-&gt;U)-&gt;[Key:U] {<br>&gt;         var output:[Key:U] = [:]<br>&gt;         for (k,v) in self {<br>&gt;             output[k] = transform(k,v)<br>&gt;         }<br>&gt;         return output<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; It comes up enough that I have had to add it to pretty much every one of my projects.  I also don’t feel comfortable adding it to my frameworks, since I figure a lot of people are also adding something like this to their projects, and I don’t want to cause a conflict with their version.  Prime candidate for the standard library.<br>&gt; <br>&gt; I like calling it ‘mapValues&#39; as opposed to providing an override for map, since it makes the specific behavior more clear.  I would expect ‘map&#39; to possibly map the keys as well (though there are issues where the new keys overlap).  I suppose you could just have a bunch of overrides for map if the compiler becomes good enough at differentiating return types: (Value)-&gt;(Value), (Key,Value)-&gt;Value, (Key, Value)-&gt;(Key,Value)<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160413/4d783daa/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 13, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; I would really like to see something like the following added to the standard library:<br>&gt; <br>&gt; extension Dictionary {<br>&gt;     <br>&gt;     func mapValues&lt;U&gt;(transform:(Key,Value)-&gt;U)-&gt;[Key:U] {<br>&gt;         var output:[Key:U] = [:]<br>&gt;         for (k,v) in self {<br>&gt;             output[k] = transform(k,v)<br>&gt;         }<br>&gt;         return output<br>&gt;     }<br>&gt;     <br>&gt; }<br></p><p>+1 from me, and +78 from people on Stack Overflow: &lt;http://stackoverflow.com/a/24219069/41222&gt;<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 13, 2016 at 12:00:00pm</p></header><div class="content"><p>+1 for this. Highly useful method and imo should be implemented for Dictionary.<br></p><p>And what if we need to transform the key?<br>For ex. we have<br>var d = [&quot;1&quot; : &quot;abc&quot;, &quot;2&quot; : &quot;def&quot;]<br>we could have such method:<br>d.mapKeys {k,v -&gt; Int in Int(k)! }<br>to get:<br>[2: &quot;abc&quot;, 1: &quot;def&quot;]<br></p><p>I.e. I suggest to implement and mapKeys() also. It could be also useful in <br>some situations.<br></p><p>On 13.04.2016 9:41, Jonathan Hull via swift-evolution wrote:<br>&gt; I would really like to see something like the following added to the<br>&gt; standard library:<br>&gt;<br>&gt; extensionDictionary{<br>&gt;<br>&gt;<br>&gt; func mapValues&lt;U&gt;(transform:(Key,Value)-&gt;U)-&gt;[Key:U] {<br>&gt; var output:[Key:U] = [:]<br>&gt; for (k,v) in self {<br>&gt;              output[k] = transform(k,v)<br>&gt;          }<br>&gt; return output<br>&gt;      }<br>&gt;<br>&gt;<br>&gt; }<br>&gt;<br>&gt; It comes up enough that I have had to add it to pretty much every one of my<br>&gt; projects.  I also don’t feel comfortable adding it to my frameworks, since<br>&gt; I figure a lot of people are also adding something like this to their<br>&gt; projects, and I don’t want to cause a conflict with their version.  Prime<br>&gt; candidate for the standard library.<br>&gt;<br>&gt; I like calling it ‘mapValues&#39; as opposed to providing an override for map,<br>&gt; since it makes the specific behavior more clear.  I would expect ‘map&#39; to<br>&gt; possibly map the keys as well (though there are issues where the new keys<br>&gt; overlap).  I suppose you could just have a bunch of overrides for map if<br>&gt; the compiler becomes good enough at differentiating return types:<br>&gt; (Value)-&gt;(Value), (Key,Value)-&gt;Value, (Key, Value)-&gt;(Key,Value)<br>&gt;<br>&gt; Thanks,<br>&gt; Jon<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>April 13, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; I.e. I suggest to implement and mapKeys() also. It could be also useful in some situations.<br></p><p>`mapKeys` is much more dangerous, because you could end up mapping many values into a single key. You kind of need to combine the values somehow. Perhaps:<br></p><p>	extension Dictionary {<br>		func mapValues&lt;OutValue&gt;(_ valueTransform: @noescape Value throws -&gt; OutValue) rethrows -&gt; [Key: OutValue] { … }<br>		<br>		func mapKeys&lt;OutKey: Hashable&gt;(_ keyTransform: @noescape Key throws -&gt; OutKey) rethrows -&gt; [OutKey: [Value]] { … }<br></p><p>		// Possibly flatMap variants, too?<br>	}<br>	<br>	extension Dictionary where Value: Sequence {<br>		func reduceValues&lt;OutValue&gt;(_ initial: OutValue, combine: @noescape (OutValue, Value.Iterator.Element) throws -&gt; OutValue) rethrows -&gt; [Key: OutValue] {<br>			return mapValues { $0.reduce(initial, combine: combine) }<br>		}<br>	}<br></p><p>Which you would end up using like this:<br></p><p>	let wordFrequencies: [String: Int] = …<br>	let firstLetterFrequencies: [Character: Int] = wordFrequencies.mapKeys { $0.characters.first! }.reduceValues(0, combine: +)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>[Proposal] mapValues</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>I like the idea of having a mapping method which maps back to the actual type.<br>What about a more general approach? consider:<br></p><p>mappedSelf(transform: T -&gt; U) -&gt; Self&lt;U&gt;<br>filteredSelf(includeElement: T -&gt; Bool) -&gt; Self&lt;U&gt;<br></p><p>Which can be added to other collections like Set and sequences like a lazy number sequence.<br></p><p>Best regards<br>- Maximilian<br></p><p>&gt; Am 13.04.2016 um 08:41 schrieb Jonathan Hull via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; I would really like to see something like the following added to the standard library:<br>&gt; <br>&gt; extension Dictionary {<br>&gt;     <br>&gt;     func mapValues&lt;U&gt;(transform:(Key,Value)-&gt;U)-&gt;[Key:U] {<br>&gt;         var output:[Key:U] = [:]<br>&gt;         for (k,v) in self {<br>&gt;             output[k] = transform(k,v)<br>&gt;         }<br>&gt;         return output<br>&gt;     }<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; It comes up enough that I have had to add it to pretty much every one of my projects.  I also don’t feel comfortable adding it to my frameworks, since I figure a lot of people are also adding something like this to their projects, and I don’t want to cause a conflict with their version.  Prime candidate for the standard library.<br>&gt; <br>&gt; I like calling it ‘mapValues&#39; as opposed to providing an override for map, since it makes the specific behavior more clear.  I would expect ‘map&#39; to possibly map the keys as well (though there are issues where the new keys overlap).  I suppose you could just have a bunch of overrides for map if the compiler becomes good enough at differentiating return types: (Value)-&gt;(Value), (Key,Value)-&gt;Value, (Key, Value)-&gt;(Key,Value)<br>&gt; <br>&gt; Thanks,<br>&gt; Jon<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160418/2ded35b7/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
