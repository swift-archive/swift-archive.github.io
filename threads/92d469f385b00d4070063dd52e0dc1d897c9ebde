<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Proposal: Make NSTask&#39;s standardInput/standardOutput/standardError properties type-safe</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>December 17, 2015 at 11:00:00am</p></header><div class="content"><p>This is my first proposal to swift-corelibs, so I’m not sure how much flexibility we have in terms of deviating from the darwin’s original Foundation definitions.  That said, it’s always seemed a little screwy to me that NSTask&#39;s standardInput/standardOutput/standardError properties sacrifice any semblance of compile-time type safety by accepting id/AnyObject (which, at run time, must be either NSPipe or NSFileHandle, else it blows up).  If allowed, I’d like to take the opportunity to modernize this in the open source version of Foundation.<br></p><p>public class NSTask : NSObject {<br>    <br>...    <br></p><p>    public enum IOType {<br>        <br>        case FileHandle(NSFileHandle)<br>        case Pipe(NSPipe)<br>    }<br>    <br>    public var standardInput: NSTask.IOType?<br>    public var standardOutput: NSTask.IOType?<br>    public var standardError: NSTask.IOType?<br></p><p>...<br></p><p>   <br>}<br></p><p>Dan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/92d4ebde/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Proposal: Make NSTask&#39;s standardInput/standardOutput/standardError properties type-safe</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December 17, 2015 at 12:00:00pm</p></header><div class="content"><p>Hi Dan,<br></p><p>Thank you for your proposal. This is the right place to start discussion of it. If we want to do this then we would have to make changes in both Darwin and open source versions, to maintain source compatibility.<br></p><p>Out of curiosity, why propose an enum instead of an additional set of typed properties? Looking at the implementation of NSTask, it sure seems like we only expect either a file handle or pipe. I’m not sure if we would ever add another.<br></p><p>- Tony<br></p><p>&gt; On Dec 17, 2015, at 11:34 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; This is my first proposal to swift-corelibs, so I’m not sure how much flexibility we have in terms of deviating from the darwin’s original Foundation definitions.  That said, it’s always seemed a little screwy to me that NSTask&#39;s standardInput/standardOutput/standardError properties sacrifice any semblance of compile-time type safety by accepting id/AnyObject (which, at run time, must be either NSPipe or NSFileHandle, else it blows up).  If allowed, I’d like to take the opportunity to modernize this in the open source version of Foundation.<br>&gt; <br>&gt; public class NSTask : NSObject {<br>&gt;     <br>&gt; ...    <br>&gt; <br>&gt;     public enum IOType {<br>&gt;         <br>&gt;         case FileHandle(NSFileHandle)<br>&gt;         case Pipe(NSPipe)<br>&gt;     }<br>&gt;     <br>&gt;     public var standardInput: NSTask.IOType?<br>&gt;     public var standardOutput: NSTask.IOType?<br>&gt;     public var standardError: NSTask.IOType?<br>&gt; <br>&gt; ...<br>&gt; <br>&gt;    <br>&gt; }<br>&gt; <br>&gt; Dan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/99f7f8c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Proposal: Make NSTask&#39;s standardInput/standardOutput/standardError properties type-safe</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>December 17, 2015 at 12:00:00pm</p></header><div class="content"><p>Hi Tony, thanks for the response!<br></p><p>In regards to why an enum w/ associated values:<br></p><p>- It avoids creating additional storage.  (Admittedly, a very small amount, but the point still stands.)<br>- It deterministically defines that it’s either one or the other, and guards against someone trying to be clever and setting both the Pipe and Handle properties.  Even if we do have a safeguard for that (like “setting the Pipe property nils out the File Handle property” and vice-versa), making it a type-safe enum improves API clarity.  I’m generally not a fan of implicit API behaviors that require reading the fine print, and while they are necessary sometimes, I’d much prefer the class’s declaration makes it clear from the get-go.  <br>- Furthermore on the previous point, it helps encourage safer client usage patterns for callers getting pre-launched NSTask objects from opaque factory methods.  (I don’t see this pattern out in the wild very much, but I don’t want to rule it out, especially if Swift starts taking off on the server-side).<br></p><p>Dan<br></p><p>&gt; On Dec 17, 2015, at 12:31 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Dan,<br>&gt; <br>&gt; Thank you for your proposal. This is the right place to start discussion of it. If we want to do this then we would have to make changes in both Darwin and open source versions, to maintain source compatibility.<br>&gt; <br>&gt; Out of curiosity, why propose an enum instead of an additional set of typed properties? Looking at the implementation of NSTask, it sure seems like we only expect either a file handle or pipe. I’m not sure if we would ever add another.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; On Dec 17, 2015, at 11:34 AM, Dan Stenmark via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is my first proposal to swift-corelibs, so I’m not sure how much flexibility we have in terms of deviating from the darwin’s original Foundation definitions.  That said, it’s always seemed a little screwy to me that NSTask&#39;s standardInput/standardOutput/standardError properties sacrifice any semblance of compile-time type safety by accepting id/AnyObject (which, at run time, must be either NSPipe or NSFileHandle, else it blows up).  If allowed, I’d like to take the opportunity to modernize this in the open source version of Foundation.<br>&gt;&gt; <br>&gt;&gt; public class NSTask : NSObject {<br>&gt;&gt;     <br>&gt;&gt; ...    <br>&gt;&gt; <br>&gt;&gt;     public enum IOType {<br>&gt;&gt;         <br>&gt;&gt;         case FileHandle(NSFileHandle)<br>&gt;&gt;         case Pipe(NSPipe)<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     public var standardInput: NSTask.IOType?<br>&gt;&gt;     public var standardOutput: NSTask.IOType?<br>&gt;&gt;     public var standardError: NSTask.IOType?<br>&gt;&gt; <br>&gt;&gt; ...<br>&gt;&gt; <br>&gt;&gt;    <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Dan<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151217/467cf789/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
