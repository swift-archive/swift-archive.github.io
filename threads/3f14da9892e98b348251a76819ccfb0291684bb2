<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>August 19, 2016 at 11:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155<br></p><p>I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br></p><p>Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br></p><p>Thanks,<br>- Will<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/3f144bb2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>August 19, 2016 at 01:00:00pm</p></header><div class="content"><p>One of the challenges we have in removing imports in public headers is that other projects are importing those headers transitively. Someone else may be assuming they get stdio.h by importing CoreFoundation.h or dispatch.h, and using something from that header.<br></p><p>- Tony<br></p><p>&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/155&gt;<br>&gt; <br>&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt; <br>&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt; <br>&gt; Thanks,<br>&gt; - Will<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/2e094fc3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/562c2299436b75df013fb428ddf90ce6?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>Pierre Habouzit</string> &lt;pierre at habouzit.net&gt;<p>August 19, 2016 at 05:00:00pm</p></header><div class="content"><p>the include was added to dispatch specifically to allow dispatch_io to build on intel so your patch I think would break Intel.<br></p><p>I think the general problem is likely that glibc is not module friendly today.<br></p><p>-Pierre<br></p><p>&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/155&gt;<br>&gt; <br>&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt; <br>&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt; <br>&gt; Thanks,<br>&gt; - Will<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/41d4b293/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>August 19, 2016 at 08:00:00pm</p></header><div class="content"><p>True enough.  In that case, would be acceptable to match by architecture and skip the import on arm?<br></p><p>&gt; On Aug 19, 2016, at 5:56 PM, Pierre Habouzit &lt;pierre at habouzit.net&gt; wrote:<br>&gt; <br>&gt; the include was added to dispatch specifically to allow dispatch_io to build on intel so your patch I think would break Intel.<br>&gt; <br>&gt; I think the general problem is likely that glibc is not module friendly today.<br>&gt; <br>&gt; -Pierre<br>&gt; <br>&gt;&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/155&gt;<br>&gt;&gt; <br>&gt;&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt;&gt; <br>&gt;&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; - Will<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/b9bfa0b4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/562c2299436b75df013fb428ddf90ce6?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>Pierre Habouzit</string> &lt;pierre at habouzit.net&gt;<p>August 19, 2016 at 10:00:00pm</p></header><div class="content"><p>Dispatch/dispatch.h is a public header. So not really. <br></p><p>-Pierre on his iPhone<br></p><p>&gt; On Aug 19, 2016, at 8:41 PM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt; <br>&gt; True enough.  In that case, would be acceptable to match by architecture and skip the import on arm?<br>&gt; <br>&gt;&gt; On Aug 19, 2016, at 5:56 PM, Pierre Habouzit &lt;pierre at habouzit.net&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; the include was added to dispatch specifically to allow dispatch_io to build on intel so your patch I think would break Intel.<br>&gt;&gt; <br>&gt;&gt; I think the general problem is likely that glibc is not module friendly today.<br>&gt;&gt; <br>&gt;&gt; -Pierre<br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; - Will<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/893439d6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>August 19, 2016 at 10:00:00pm</p></header><div class="content"><p>Ok then.  At this point I suppose I&#39;m looking at maintaining a fork of libdispatch.  I can&#39;t think of any other solutions that make sense.<br></p><p>&gt; On Aug 19, 2016, at 10:31 PM, Pierre Habouzit &lt;pierre at habouzit.net&gt; wrote:<br>&gt; <br>&gt; Dispatch/dispatch.h is a public header. So not really. <br>&gt; <br>&gt; -Pierre on his iPhone<br>&gt; <br>&gt; On Aug 19, 2016, at 8:41 PM, William Dillon &lt;william at housedillon.com &lt;mailto:william at housedillon.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; True enough.  In that case, would be acceptable to match by architecture and skip the import on arm?<br>&gt;&gt; <br>&gt;&gt;&gt; On Aug 19, 2016, at 5:56 PM, Pierre Habouzit &lt;pierre at habouzit.net &lt;mailto:pierre at habouzit.net&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; the include was added to dispatch specifically to allow dispatch_io to build on intel so your patch I think would break Intel.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think the general problem is likely that glibc is not module friendly today.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Pierre<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/155&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; - Will<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/ea2d7f8b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/562c2299436b75df013fb428ddf90ce6?s=50"></div><header><strong>Duplicate definition of va_list on Arm</strong> from <string>Pierre Habouzit</string> &lt;pierre at habouzit.net&gt;<p>August 19, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Aug 19, 2016, at 10:35 PM, William Dillon &lt;william at housedillon.com&gt; wrote:<br>&gt; <br>&gt; Ok then.  At this point I suppose I&#39;m looking at maintaining a fork of libdispatch.  I can&#39;t think of any other solutions that make sense.<br></p><p>That sounds like a bit of an extreme answer that won’t get you a lot of sympathy.<br></p><p>The problem at the heart is that glibc doesn’t have a consistent way of defining things depending on the architecture, and doesn’t work well with modules, which will break swift all over the place. macOS went through several iterations to have its own Libc work well with modules. It has nothing to do with dispatch for real.<br></p><p>The way to address that is to either get glibc to change (good luck with that, I used to co maintain it in Debian a lifetime ago, and let’s say I doubt you will get a lot of traction here), or you work with the swift toolchain to try to find a solution to overlay on top of glibc headers so that these kind of things have a sane cross-architecture solution.<br></p><p>gcc used to have what they called “fixed headers” where they had this tool to fix some mistakes that caused system headers to be broken, maybe swift needs to have something like that until the underlying projects slowly get fixed.<br></p><p>but right now you’re asking to break an architecture to support another, and that’s just not how porting works.<br></p><p><br>-Pierre<br></p><p>&gt; <br>&gt;&gt; On Aug 19, 2016, at 10:31 PM, Pierre Habouzit &lt;pierre at habouzit.net &lt;mailto:pierre at habouzit.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Dispatch/dispatch.h is a public header. So not really. <br>&gt;&gt; <br>&gt;&gt; -Pierre on his iPhone<br>&gt;&gt; <br>&gt;&gt; On Aug 19, 2016, at 8:41 PM, William Dillon &lt;william at housedillon.com &lt;mailto:william at housedillon.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; True enough.  In that case, would be acceptable to match by architecture and skip the import on arm?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Aug 19, 2016, at 5:56 PM, Pierre Habouzit &lt;pierre at habouzit.net &lt;mailto:pierre at habouzit.net&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; the include was added to dispatch specifically to allow dispatch_io to build on intel so your patch I think would break Intel.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think the general problem is likely that glibc is not module friendly today.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Pierre<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Aug 19, 2016, at 11:53 AM, William Dillon via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In corelibs-foundation project we&#39;ve been using a patch based on https://github.com/apple/swift-corelibs-foundation/pull/399/files &lt;https://github.com/apple/swift-corelibs-foundation/pull/399/files&gt; for quite some time (summary: remove #include &lt;stdio.h&gt;).  The PR hasn&#39;t gotten any where for various reasons.  Currently, I&#39;ve gotten libdispatch working on arm, but it requires a fix that&#39;s essentially identical.  It is part of a PR available here: https://github.com/apple/swift-corelibs-libdispatch/pull/155 &lt;https://github.com/apple/swift-corelibs-libdispatch/pull/155&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;d like to get this moving forward in both cases, and I&#39;d like to bring it to the list.  What exactly is stdio.h bringing in?  I realize the comment identifies __off_t, but at least on arm that&#39;s being provided elsewhere.  Furthermore, __off_t is defined in several places.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Are there any suggestions for what a satisfactory solution would be to address the duplicate definition of va_list on arm that does not negatively impact other platforms?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt;&gt; - Will<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160819/17602007/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
