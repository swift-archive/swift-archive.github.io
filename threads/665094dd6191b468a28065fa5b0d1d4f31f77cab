<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 22, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Fri, May 20, 2016, at 05:14 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; &gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m a little nervous about this change, because converting things to<br>&gt;&gt; &gt; strings is a fairly basic operation and it should be immediately<br>&gt;&gt; &gt; obvious how to do that. That said, the described issues are pretty<br>&gt;&gt; &gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt;&gt; &gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt;&gt; &gt; pointed out, it sounds like this is related to print(), but this<br>&gt;&gt; &gt; initializer does not actually print anything, it just converts any<br>&gt;&gt; &gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt;&gt; &gt; it&#39;s too long. This initializer should be easier to call than<br>&gt;&gt; &gt; String(reflecting:). Also, in my experience this initializer is<br>&gt;&gt; &gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt;&gt; &gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt;&gt; &gt; short and generic, and it makes sense as it creates a String from any<br>&gt;&gt; &gt; value.<br>&gt;&gt; <br>&gt;&gt; Not too bad.  I could live with it.<br>&gt;<br>&gt; ðŸ˜€<br>&gt;<br>&gt;&gt; &gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt;&gt; &gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt;&gt; &gt; turned into a first-class function value.<br>&gt;&gt; <br>&gt;&gt;   { &quot;\($0)&quot; }<br>&gt;&gt; <br>&gt;&gt; ?<br>&gt;<br>&gt; Good point. I think what I intended to express was you cannot refer to<br>&gt; this operation by name anymore. Maybe not a big deal, but it feels<br>&gt; weird.<br></p><p>Makes sense.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 25, 2016 at 11:00:00pm</p></header><div class="content"><p>What is so bad about the global function idea?<br></p><p>reflect(_:Any)-&gt;String<br></p><p>Itâ€™s invoking the reflection APIs, doing a bunch of things you could do yourself with Mirror, and returning a String.<br></p><p>I know we donâ€™t have many global functions, but this seems like a reasonable place for one.<br></p><p>This isnâ€™t Objective-C; we have namespaces. You can still create another function with that same signature, and refer to the global one with Swift.reflect().<br></p><p>Karl<br></p><p>&gt; On 22 May 2016, at 20:19, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, May 20, 2016, at 05:14 PM, Dave Abrahams via swift-evolution wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m a little nervous about this change, because converting things to<br>&gt;&gt;&gt;&gt; strings is a fairly basic operation and it should be immediately<br>&gt;&gt;&gt;&gt; obvious how to do that. That said, the described issues are pretty<br>&gt;&gt;&gt;&gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt;&gt;&gt;&gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt;&gt;&gt;&gt; pointed out, it sounds like this is related to print(), but this<br>&gt;&gt;&gt;&gt; initializer does not actually print anything, it just converts any<br>&gt;&gt;&gt;&gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt;&gt;&gt;&gt; it&#39;s too long. This initializer should be easier to call than<br>&gt;&gt;&gt;&gt; String(reflecting:). Also, in my experience this initializer is<br>&gt;&gt;&gt;&gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt;&gt;&gt;&gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt;&gt;&gt;&gt; short and generic, and it makes sense as it creates a String from any<br>&gt;&gt;&gt;&gt; value.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not too bad.  I could live with it.<br>&gt;&gt; <br>&gt;&gt; ðŸ˜€<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt;&gt;&gt;&gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt;&gt;&gt;&gt; turned into a first-class function value.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  { &quot;\($0)&quot; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ?<br>&gt;&gt; <br>&gt;&gt; Good point. I think what I intended to express was you cannot refer to<br>&gt;&gt; this operation by name anymore. Maybe not a big deal, but it feels<br>&gt;&gt; weird.<br>&gt; <br>&gt; Makes sense.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>May 25, 2016 at 03:00:00pm</p></header><div class="content"><p>On Wed, May 25, 2016, at 02:56 PM, Karl Wagner via swift-evolution wrote:<br>&gt; What is so bad about the global function idea?<br>&gt; <br>&gt; reflect(_:Any)-&gt;String<br>&gt; <br>&gt; Itâ€™s invoking the reflection APIs, doing a bunch of things you could do yourself with Mirror, and returning a String.<br>&gt; <br>&gt; I know we donâ€™t have many global functions, but this seems like a reasonable place for one.<br>&gt; <br>&gt; This isnâ€™t Objective-C; we have namespaces. You can still create another function with that same signature, and refer to the global one with Swift.reflect().<br></p><p>The function under debate doesn&#39;t use the reflection API unless the type doesn&#39;t implement any of the related protocols, so calling it reflect(_:) would be very misleading. That name would be much more appropriate as a replacement for String(reflecting:).<br></p><p>-Kevin<br></p><p>&gt; Karl<br>&gt; <br>&gt; &gt; On 22 May 2016, at 20:19, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt;&gt; On Fri, May 20, 2016, at 05:14 PM, Dave Abrahams via swift-evolution wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; I&#39;m a little nervous about this change, because converting things to<br>&gt; &gt;&gt;&gt;&gt; strings is a fairly basic operation and it should be immediately<br>&gt; &gt;&gt;&gt;&gt; obvious how to do that. That said, the described issues are pretty<br>&gt; &gt;&gt;&gt;&gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt; &gt;&gt;&gt;&gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt; &gt;&gt;&gt;&gt; pointed out, it sounds like this is related to print(), but this<br>&gt; &gt;&gt;&gt;&gt; initializer does not actually print anything, it just converts any<br>&gt; &gt;&gt;&gt;&gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt; &gt;&gt;&gt;&gt; it&#39;s too long. This initializer should be easier to call than<br>&gt; &gt;&gt;&gt;&gt; String(reflecting:). Also, in my experience this initializer is<br>&gt; &gt;&gt;&gt;&gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt; &gt;&gt;&gt;&gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt; &gt;&gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt; &gt;&gt;&gt;&gt; short and generic, and it makes sense as it creates a String from any<br>&gt; &gt;&gt;&gt;&gt; value.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; Not too bad.  I could live with it.<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; ðŸ˜€<br>&gt; &gt;&gt; <br>&gt; &gt;&gt;&gt;&gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt; &gt;&gt;&gt;&gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt; &gt;&gt;&gt;&gt; turned into a first-class function value.<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt;  { &quot;\($0)&quot; }<br>&gt; &gt;&gt;&gt; <br>&gt; &gt;&gt;&gt; ?<br>&gt; &gt;&gt; <br>&gt; &gt;&gt; Good point. I think what I intended to express was you cannot refer to<br>&gt; &gt;&gt; this operation by name anymore. Maybe not a big deal, but it feels<br>&gt; &gt;&gt; weird.<br>&gt; &gt; <br>&gt; &gt; Makes sense.<br>&gt; &gt; <br>&gt; &gt; -- <br>&gt; &gt; -Dave<br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Review] SE-0089: Renaming String.init&lt;T&gt;(_: T)</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>May 25, 2016 at 07:00:00pm</p></header><div class="content"><p>I get it that the point here is about the intention. If you mean to call<br>that initialiser, using an extra name or none should make no difference. If<br>there is a chance people are misusing the nameless initialiser, I don&#39;t see<br>a reason why not adding a name here.<br></p><p>On Wednesday, 25 May 2016, Karl Wagner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; What is so bad about the global function idea?<br>&gt;<br>&gt; reflect(_:Any)-&gt;String<br>&gt;<br>&gt; Itâ€™s invoking the reflection APIs, doing a bunch of things you could do<br>&gt; yourself with Mirror, and returning a String.<br>&gt;<br>&gt; I know we donâ€™t have many global functions, but this seems like a<br>&gt; reasonable place for one.<br>&gt;<br>&gt; This isnâ€™t Objective-C; we have namespaces. You can still create another<br>&gt; function with that same signature, and refer to the global one with<br>&gt; Swift.reflect().<br>&gt;<br>&gt; Karl<br>&gt;<br>&gt; &gt; On 22 May 2016, at 20:19, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; On Fri, May 20, 2016, at 05:14 PM, Dave Abrahams via swift-evolution<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Fri May 20 2016, Kevin Ballard &lt;swift-evolution at swift.org<br>&gt; &lt;javascript:;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Tue, May 17, 2016, at 08:32 PM, Chris Lattner via swift-evolution<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;   * What is your evaluation of the proposal?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I&#39;m a little nervous about this change, because converting things to<br>&gt; &gt;&gt;&gt;&gt; strings is a fairly basic operation and it should be immediately<br>&gt; &gt;&gt;&gt;&gt; obvious how to do that. That said, the described issues are pretty<br>&gt; &gt;&gt;&gt;&gt; bad, and I know I&#39;ve had to carefully triple-check sometimes to make<br>&gt; &gt;&gt;&gt;&gt; sure I was calling the right initializer. So I&#39;m +1 on the idea.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; That said, I don&#39;t like the name String(printing:). As others have<br>&gt; &gt;&gt;&gt;&gt; pointed out, it sounds like this is related to print(), but this<br>&gt; &gt;&gt;&gt;&gt; initializer does not actually print anything, it just converts any<br>&gt; &gt;&gt;&gt;&gt; value into a string. I also don&#39;t like String(describing:) because<br>&gt; &gt;&gt;&gt;&gt; it&#39;s too long. This initializer should be easier to call than<br>&gt; &gt;&gt;&gt;&gt; String(reflecting:). Also, in my experience this initializer is<br>&gt; &gt;&gt;&gt;&gt; particularly useful with code of the form `someOpt.map(String.init)`,<br>&gt; &gt;&gt;&gt;&gt; and saying `someOpt.map(String.init(describing:))` is annoyingly long.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Given this, I&#39;d like to suggest the simpler `String(from:)`. It&#39;s<br>&gt; &gt;&gt;&gt;&gt; short and generic, and it makes sense as it creates a String from any<br>&gt; &gt;&gt;&gt;&gt; value.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Not too bad.  I could live with it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ðŸ˜€<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I&#39;m also not a fan of Dave&#39;s suggestion of removing this initializer<br>&gt; &gt;&gt;&gt;&gt; entirely in favor of &quot;\(foo)&quot;.  This feels weird, and it also can&#39;t be<br>&gt; &gt;&gt;&gt;&gt; turned into a first-class function value.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;  { &quot;\($0)&quot; }<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; ?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Good point. I think what I intended to express was you cannot refer to<br>&gt; &gt;&gt; this operation by name anymore. Maybe not a big deal, but it feels<br>&gt; &gt;&gt; weird.<br>&gt; &gt;<br>&gt; &gt; Makes sense.<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; -Dave<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br>--<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160525/0374d413/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
