<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07c147e6770f1e43d129f52aafd44138?s=50"></div><header><strong>++ and --</strong> from <string>Biala</string> &lt;bialata at yahoo.com&gt;<p>March 23, 2016 at 10:00:00am</p></header><div class="content"><p>Hello,<br>I would like to share my opinion on -- and ++ operators...<br>I think that ++ and ‚Äî should stay and MUST be implemented as faster operations than += and -=.They have very specific job after all and that is the general understanding. If you fail to implement them as faster operators that will really look as major weakness of SWIFT development team. Swift is still too slow ‚Äì try working with Arrays so having these faster operators that are very commonly used will be a plus. Another plus will be that you will not break tons of existing code. Breaking existing code is always considered as an architecture weakness and always have a negative impact on the whole developers community ‚Äì take a look at Microsoft for example they often do that mistake‚Ä¶. Android on the other hand is till that moment always building over the old (however they make other mistakes¬†<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/3e734279/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bce64da43e291f2ce30987a83780502c?s=50"></div><header><strong>++ and --</strong> from <string>Patrick Pijnappel</string> &lt;patrickpijnappel at gmail.com&gt;<p>March 23, 2016 at 10:00:00pm</p></header><div class="content"><p>Note that += 1 and -= 1 compile to the same assembly as ++ and -- respectively<br>and therefore have identical performance.<br></p><p>On Wed, Mar 23, 2016 at 9:44 PM, Biala via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I would like to share my opinion on -- and ++ operators...<br>&gt;<br>&gt; I think that ++ and ‚Äî should stay and MUST be implemented as faster<br>&gt; operations than += and -=.They have very specific job after all and that is<br>&gt; the general understanding. If you fail to implement them as faster<br>&gt; operators that will really look as major weakness of SWIFT development<br>&gt; team. Swift is still too slow ‚Äì try working with Arrays so having these<br>&gt; faster operators that are very commonly used will be a plus. Another plus<br>&gt; will be that you will not break tons of existing code. Breaking existing<br>&gt; code is always considered as an architecture weakness and always have a<br>&gt; negative impact on the whole developers community ‚Äì take a look at<br>&gt; Microsoft for example they often do that mistake‚Ä¶. Android on the other<br>&gt; hand is till that moment always building over the old (however they make<br>&gt; other mistakes [image: üòâ]<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/39bd3fd5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>++ and --</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>March 23, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; I think that ++ and ‚Äî should stay and MUST be implemented as faster operations than += and -=.<br></p><p>If there is an easy way to make operations faster, imho that should be applied to every method ;-)<br></p><p>Jokes apart, compilers of today know some really smart tricks, so if &quot;+= 1&quot; is slower than &quot;++&quot;, I&#39;d consider that a bug.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/9c084211/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2a461f6af6a598c78eb573075ed2e577?s=50"></div><header><strong>++ and --</strong> from <string>Ergin Bilgin</string> &lt;erginbil at gmail.com&gt;<p>March 23, 2016 at 03:00:00pm</p></header><div class="content"><p>First of all, I am not a big fan of removal of &quot;++&quot; operator. Still,<br>&quot;+= 1&quot; has the same performance with &quot;++&quot; but since I like the comfort of<br>writing just &quot;++&quot;, I will just write an extension when Swift 3 will be<br>released. I know many people who will do the same.<br></p><p>On 23 March 2016 at 13:09, Tino Heth via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think that ++ and ‚Äî should stay and MUST be implemented as faster<br>&gt; operations than += and -=.<br>&gt;<br>&gt; If there is an easy way to make operations faster, imho that should be<br>&gt; applied to every method ;-)<br>&gt;<br>&gt; Jokes apart, compilers of today know some really smart tricks, so if &quot;+=<br>&gt; 1&quot; is slower than &quot;++&quot;, I&#39;d consider that a bug.<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/65507323/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>++ and --</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>March 23, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;d be willing to keep &quot;++&quot; and &quot;--&quot; if they stopped having a return type.<br>&quot;x++&quot; is fine; &quot;let y = x++&quot; is where we lose clarity, so I&#39;d much prefer<br>to see that expressed as &quot;let y = x + 1; x++&quot;.<br></p><p>On Wed, Mar 23, 2016 at 1:10 PM, Ergin Bilgin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;     First of all, I am not a big fan of removal of &quot;++&quot; operator. Still,<br>&gt; &quot;+= 1&quot; has the same performance with &quot;++&quot; but since I like the comfort of<br>&gt; writing just &quot;++&quot;, I will just write an extension when Swift 3 will be<br>&gt; released. I know many people who will do the same.<br>&gt;<br>&gt; On 23 March 2016 at 13:09, Tino Heth via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; I think that ++ and ‚Äî should stay and MUST be implemented as faster<br>&gt;&gt; operations than += and -=.<br>&gt;&gt;<br>&gt;&gt; If there is an easy way to make operations faster, imho that should be<br>&gt;&gt; applied to every method ;-)<br>&gt;&gt;<br>&gt;&gt; Jokes apart, compilers of today know some really smart tricks, so if &quot;+=<br>&gt;&gt; 1&quot; is slower than &quot;++&quot;, I&#39;d consider that a bug.<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/3afd6dc9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>++ and --</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>March 23, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On 23 Mar 2016, at 13:33, Ross O&#39;Brien via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d be willing to keep &quot;++&quot; and &quot;--&quot; if they stopped having a return type. &quot;x++&quot; is fine; &quot;let y = x++&quot; is where we lose clarity, so I&#39;d much prefer to see that expressed as &quot;let y = x + 1; x++‚Äù.<br></p><p>Personally I don‚Äôt see the point; ++ and ‚Äî only really offer an advantage when they‚Äôre being used within conditions/expressions, but as you say that‚Äôs when they are at their most dangerous. As single line statements they offer no real saving over += 1 or -= 1, while requiring an additional operator covering all the various integer types. By forcing += 1 and -= 1 we also make sure that all assignment operations contain an equals sign, which I think is good for consistency.<br></p><p><br>For anyone that is desperately attached to using the operator then it‚Äôs not hard to add them back in, but I‚Äôve used these for years and have no special fondness for them.<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>++ and --</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>March 23, 2016 at 10:00:00pm</p></header><div class="content"><p>This pre-proposal needs to answer a few questions before it can really go<br>anywhere:<br></p><p>- What sort of mechanism can ++/-- exploit, that &quot;+= 1&quot; or &quot;-= 1&quot; can&#39;t, to<br>make the former perform better than the latter? It would be helpful to have<br>at least a vague idea as to whether this is even possible, or else the<br>proposal is meaningless.<br></p><p>- Exactly how is adding in a faster ++/-- operator going to address Swift&#39;s<br>performance problems? For example, how is ++/-- going to make arrays<br>perform better?<br></p><p>- Why were the (multiple) arguments made in favor of the proposal to remove<br>++/-- weak or incorrect? What arguments in favor of keeping ++/-- are<br>stronger than their counterparts?<br></p><p>Best,<br>Austin<br></p><p><br>On Wed, Mar 23, 2016 at 6:44 PM, Biala via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I would like to share my opinion on -- and ++ operators...<br>&gt;<br>&gt; I think that ++ and ‚Äî should stay and MUST be implemented as faster<br>&gt; operations than += and -=.They have very specific job after all and that is<br>&gt; the general understanding. If you fail to implement them as faster<br>&gt; operators that will really look as major weakness of SWIFT development<br>&gt; team. Swift is still too slow ‚Äì try working with Arrays so having these<br>&gt; faster operators that are very commonly used will be a plus. Another plus<br>&gt; will be that you will not break tons of existing code. Breaking existing<br>&gt; code is always considered as an architecture weakness and always have a<br>&gt; negative impact on the whole developers community ‚Äì take a look at<br>&gt; Microsoft for example they often do that mistake‚Ä¶. Android on the other<br>&gt; hand is till that moment always building over the old (however they make<br>&gt; other mistakes [image: üòâ]<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/8fd49f81/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
