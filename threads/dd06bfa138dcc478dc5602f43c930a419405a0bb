<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 19, 2016 at 12:00:00pm</p></header><div class="content"><p>Based on the discussion, I think the real danger of subclassing is unexpected behaviour - in other words, overriding methods. There doesn&#39;t seem to be a need to penalise subclasses which just add properties and extra methods based on them.<br></p><p>I&#39;d be in favour of keeping current behaviour for classes, but having to mark methods explicitly as overrideable, virtual, open, or whatever semantics we decide upon. This seems like the safest syntax.<br></p><p>I&#39;d also support a grouping mechanism for marking methods in this way, similar to extensions&#39; current auto-annotation for ‘public’.<br></p><p>------------ Begin Message ------------ <br>Group: gmane.comp.lang.swift.evolution <br>MsgID: &lt;2C9B4C5A-52C2-4E0E-8B9E-6E5444629D85 at apple.com&gt; <br></p><p>Hello Swift community,<br></p><p>The second review of &quot;SE-0117: Default classes to be non-subclassable publicly&quot; begins now and runs through July 22. The proposal is available here:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>* What is your evaluation of the proposal?<br>* Is the problem being addressed significant enough to warrant a change to Swift?<br>* Does this proposal fit well with the feel and direction of Swift?<br>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>------------- End Message -------------<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 19, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 4:13 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Based on the discussion, I think the real danger of subclassing is unexpected behaviour - in other words, overriding methods. There doesn&#39;t seem to be a need to penalise subclasses which just add properties and extra methods based on them.<br>&gt; <br>&gt; I&#39;d be in favour of keeping current behaviour for classes, but having to mark methods explicitly as overrideable, virtual, open, or whatever semantics we decide upon. This seems like the safest syntax.<br>&gt; <br>&gt; I&#39;d also support a grouping mechanism for marking methods in this way, similar to extensions&#39; current auto-annotation for ‘public’.<br>The is a proposal waiting to be merged that seeks to disallow public extensions auto-annotation. I think extensions would be better with out it. <br></p><p><br>&gt; <br>&gt; ------------ Begin Message ------------ <br>&gt; Group: gmane.comp.lang.swift.evolution <br>&gt; MsgID: &lt;2C9B4C5A-52C2-4E0E-8B9E-6E5444629D85 at apple.com&gt; <br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The second review of &quot;SE-0117: Default classes to be non-subclassable publicly&quot; begins now and runs through July 22. The proposal is available here:<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; ------------- End Message ------------- <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[Review #2] SE-0117: Default classes to be non-subclassable publicly</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 19, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 19 Jul 2016, at 17:05, Jose Cheyo Jimenez &lt;cheyo at masters3d.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jul 19, 2016, at 4:13 AM, James Froggatt via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Based on the discussion, I think the real danger of subclassing is unexpected behaviour - in other words, overriding methods. There doesn&#39;t seem to be a need to penalise subclasses which just add properties and extra methods based on them.<br>&gt;&gt; <br>&gt;&gt; I&#39;d be in favour of keeping current behaviour for classes, but having to mark methods explicitly as overrideable, virtual, open, or whatever semantics we decide upon. This seems like the safest syntax.<br>&gt;&gt; <br>&gt;&gt; I&#39;d also support a grouping mechanism for marking methods in this way, similar to extensions&#39; current auto-annotation for ‘public’.<br>&gt; The is a proposal waiting to be merged that seeks to disallow public extensions auto-annotation. I think extensions would be better with out it. <br>&gt; <br></p><p>Indeed, hence why I&#39;m calling it a ‘grouping mechanism’ for now. If this is removed from extensions, I&#39;m hoping for a more focused replacement - not so much because I&#39;m a lazy typer, but rather because it supports the addition of this sort of granular access control, while keeping boilerplate to a minimum.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; ------------ Begin Message ------------ <br>&gt;&gt; Group: gmane.comp.lang.swift.evolution <br>&gt;&gt; MsgID: &lt;2C9B4C5A-52C2-4E0E-8B9E-6E5444629D85 at apple.com&gt; <br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The second review of &quot;SE-0117: Default classes to be non-subclassable publicly&quot; begins now and runs through July 22. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ------------- End Message ------------- <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/83f4a7aa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
