<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3283e69dac603660e4abad5fef6f538?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Spromicky</string> &lt;spromicky at gmail.com&gt;<p>June  9, 2016 at 04:00:00pm</p></header><div class="content"><p>Sure, and this so confused. For new users its seems like: “Ok, we have optional and non-optional variables in Swift. We can force unwrap optional if we want, or if we sure, that in this moment this variable not `nil`. Now we try write functions.<br>Non-optional:<br>func foo(_ bar: Int) {<br>    //...<br>}<br>Clear, good!<br></p><p>Now try with optional: <br>func foo(_ bar: Int?) {<br>    guard let bar = bar else { return }<br></p><p>    //...<br>}<br>Ok, we can pass optional value in function and implement some default behaviour for `nil`, for example, or whatever. It is have sense. It is cool. It is safety. <br>Oh! We can set params force unwrap! What it mean? And how it works?<br></p><p>func foo(_ bar: Int!) {<br>    //...<br>}<br></p><p>Hmmmm… There will be crash if we use `bar` and it will be `nil`. So we must check for `nil` before use. Ok.<br></p><p>func foo(_ bar: Int!) {<br>    guard bar != nil else { return }<br></p><p>    //...<br>}<br></p><p>Oh it is looks safety. But what difference from usual usage of optional? Just only that we not write `let bar = bar` in `guard`?<br>And if someone else will use my function and will sees in param list force unwrap what he must think? That mean that he can pass optional and all will be checked and fine? Or it mean “yes, you can pass optional, but it was makes just for comfort pass optional without unwrapping, but still not have checks in implementation&quot;<br>This two cases with force unwrap we can write in other way: <br>func foo(_ bar: Int) {<br>    //...<br>}<br></p><p>var i: Int?<br>//...<br>foo(i!)<br></p><p>or <br></p><p>func foo(_ bar: Int) {<br>    //...<br>}<br></p><p>var i: Int?<br>//...<br>if let i = i {<br>    foo(i)<br>}<br></p><p>But now we fully and clearly understand what happening.“<br></p><p>I hope I explained my point. Just wanna add more safety and clarity.<br></p><p>&gt; Just to clarify : it will crash not because `nil` passed, but because there<br>&gt; is no check for `nil` in the function itself. I.e. nobody prevents you to<br>&gt; make a function that *will* check the nil and at the same time use all the<br>&gt; bonuses from implicitly unwrapped optional parameter:<br>&gt; <br>&gt; func foo(_ i: Int!) {<br>&gt; guard i != nil else {return}<br>&gt; <br>&gt; print(i) // use IUO parameter<br>&gt; }<br>&gt; <br>&gt; foo(nil) // no errors<br>&gt; foo(1) // 1<br>&gt; <br>&gt; <br>&gt; On 09.06.2016 11:04, Spromicky via swift-evolution wrote:<br>&gt; &gt; Yep, but no one stop you if you pass optional value. And in runtime it crash in case if it really will be `nil`. But from other side non-optional params make the same, and does not let you pass an optional value, and show error on compile time. This make your code more safety.<br>&gt; &gt; Now force unwrapped params in function used only if you use old Obj-C code without nullability modifiers, so no sense, i think, for clear swift code.<br>&gt; &gt; <br>&gt; &gt; &gt; This confused me at the beginning.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; But doesn&#39;t Int! In parameter type means the function is awaiting an unwrapped value so the user should ensure that it data parameter is available, valid, and unwrapped?<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; --<br>&gt; &gt; &gt; J. Charles<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution&lt;swift-evolution at swift.org&gt;a écrit :<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; Hello, everyone!<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; I wanna propose to you to remove force unwrapping in fuction signature for swift code. That no sense in clear swift code. If we wanna use some optional value as function param, that is not optional, we must unwrap it before function call.<br>&gt; &gt; &gt; &gt; People who new in swift look at how they old Obj-C code (without nullability modifiers) translate in to swift:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; Obj-C:<br>&gt; &gt; &gt; &gt; - (void)foo:(NSInteger)bar {<br>&gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; Swift transaliton:<br>&gt; &gt; &gt; &gt; func foo(bar: Int!) {<br>&gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; And think that force unwrapping in signature is good practice. And start write functions in clear swift code like this:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; func newFoo(bar: Int!) {<br>&gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; and use it like this:<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; let bar: Int? = 1<br>&gt; &gt; &gt; &gt; newFoo(bar)<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; And it really work, and they does not think that this can crash in case if `bar` will be `nil`.<br>&gt; &gt; &gt; &gt; But in clear swift we wanna work with parametrs in function that clearly or optional, or not.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; func newFoo(bar: Int) {<br>&gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; or<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; func newFoo(bar: Int?) {<br>&gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; When we write a new function we know what we need in this case and use optional params or not.<br>&gt; &gt; &gt; &gt; <br>&gt; &gt; &gt; &gt; So my proposal is remove force unwrapping(`!`) from function signatures, cause it have no sense, and that confuse new users.<br>&gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/22820f5c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>[Proposal] Remove force unwrapping in function signature.</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June  9, 2016 at 05:00:00pm</p></header><div class="content"><p>Yes, that’s exactly my point. Force unwrapping optionals adds confusion for<br>new users; all too often I see newcomers ending up with the assumption that<br>the force unwrapping takes care of the check for them.<br></p><p>On Thu, Jun 9, 2016 at 6:40 AM Spromicky via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Sure, and this so confused. For new users its seems like: “Ok, we have<br>&gt; optional and non-optional variables in Swift. We can force unwrap optional<br>&gt; if we want, or if we sure, that in this moment this variable not `nil`. Now<br>&gt; we try write functions.<br>&gt; Non-optional:<br>&gt; func foo(_ bar: Int) {<br>&gt;     //...<br>&gt; }<br>&gt; Clear, good!<br>&gt;<br>&gt; Now try with optional:<br>&gt; func foo(_ bar: Int?) {<br>&gt;     guard let bar = bar else { return }<br>&gt;<br>&gt;     //...<br>&gt; }<br>&gt; Ok, we can pass optional value in function and implement some default<br>&gt; behaviour for `nil`, for example, or whatever. It is have sense. It is<br>&gt; cool. It is safety.<br>&gt; Oh! We can set params force unwrap! What it mean? And how it works?<br>&gt;<br>&gt; func foo(_ bar: Int!) {<br>&gt;     //...<br>&gt; }<br>&gt;<br>&gt; Hmmmm… There will be crash if we use `bar` and it will be `nil`. So we<br>&gt; must check for `nil` before use. Ok.<br>&gt;<br>&gt; func foo(_ bar: Int!) {<br>&gt;     guard bar != nil else { return }<br>&gt;<br>&gt;     //...<br>&gt; }<br>&gt;<br>&gt; Oh it is looks safety. But what difference from usual usage of optional? Just<br>&gt; only that we not write `let bar = bar` in `guard`?<br>&gt; And if someone else will use my function and will sees in param list force<br>&gt; unwrap what he must think? That mean that he can pass optional and all will<br>&gt; be checked and fine? Or it mean “yes, you can pass optional, but it was<br>&gt; makes just for comfort pass optional without unwrapping, but still not have<br>&gt; checks in implementation&quot;<br>&gt; This two cases with force unwrap we can write in other way:<br>&gt; func foo(_ bar: Int) {<br>&gt;     //...<br>&gt; }<br>&gt;<br>&gt; var i: Int?<br>&gt; //...<br>&gt; foo(i!)<br>&gt;<br>&gt; or<br>&gt;<br>&gt; func foo(_ bar: Int) {<br>&gt;     //...<br>&gt; }<br>&gt;<br>&gt; var i: Int?<br>&gt; //...<br>&gt; if let i = i {<br>&gt;     foo(i)<br>&gt; }<br>&gt;<br>&gt; But now we fully and clearly understand what happening.“<br>&gt;<br>&gt; I hope I explained my point. Just wanna add more safety and clarity.<br>&gt;<br>&gt; &gt; Just to clarify : it will crash not because `nil` passed, but because<br>&gt; there<br>&gt; &gt; is no check for `nil` in the function itself. I.e. nobody prevents you to<br>&gt; &gt; make a function that *will* check the nil and at the same time use all<br>&gt; the<br>&gt; &gt; bonuses from implicitly unwrapped optional parameter:<br>&gt; &gt;<br>&gt; &gt; func foo(_ i: Int!) {<br>&gt; &gt; guard i != nil else {return}<br>&gt; &gt;<br>&gt; &gt; print(i) // use IUO parameter<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; foo(nil) // no errors<br>&gt; &gt; foo(1) // 1<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On 09.06.2016 11:04, Spromicky via swift-evolution wrote:<br>&gt; &gt; &gt; Yep, but no one stop you if you pass optional value. And in runtime it<br>&gt; crash in case if it really will be `nil`. But from other side non-optional<br>&gt; params make the same, and does not let you pass an optional value, and show<br>&gt; error on compile time. This make your code more safety.<br>&gt; &gt; &gt; Now force unwrapped params in function used only if you use old Obj-C<br>&gt; code without nullability modifiers, so no sense, i think, for clear swift<br>&gt; code.<br>&gt;<br></p><p>Yes, this is probably the only reason why it was added. The best solution<br>probably to convert all of these methods to allowing Optional types by<br>default and then going through them and adding `_Nonnull` on a case-by-case<br>basis.<br></p><p><br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; This confused me at the beginning.<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; But doesn&#39;t Int! In parameter type means the function is awaiting an<br>&gt; unwrapped value so the user should ensure that it data parameter is<br>&gt; available, valid, and unwrapped?<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; --<br>&gt; &gt; &gt; &gt; J. Charles<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; Le 8 juin 2016 à 13:30, Spromicky via swift-evolution&lt;<br>&gt; swift-evolution at swift.org&gt;a écrit :<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; Hello, everyone!<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; I wanna propose to you to remove force unwrapping in fuction<br>&gt; signature for swift code. That no sense in clear swift code. If we wanna<br>&gt; use some optional value as function param, that is not optional, we must<br>&gt; unwrap it before function call.<br>&gt; &gt; &gt; &gt; &gt; People who new in swift look at how they old Obj-C code (without<br>&gt; nullability modifiers) translate in to swift:<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; Obj-C:<br>&gt; &gt; &gt; &gt; &gt; - (void)foo:(NSInteger)bar {<br>&gt; &gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; Swift transaliton:<br>&gt; &gt; &gt; &gt; &gt; func foo(bar: Int!) {<br>&gt; &gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; And think that force unwrapping in signature is good practice. And<br>&gt; start write functions in clear swift code like this:<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; func newFoo(bar: Int!) {<br>&gt; &gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; and use it like this:<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; let bar: Int? = 1<br>&gt; &gt; &gt; &gt; &gt; newFoo(bar)<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; And it really work, and they does not think that this can crash in<br>&gt; case if `bar` will be `nil`.<br>&gt; &gt; &gt; &gt; &gt; But in clear swift we wanna work with parametrs in function that<br>&gt; clearly or optional, or not.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; func newFoo(bar: Int) {<br>&gt; &gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; or<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; func newFoo(bar: Int?) {<br>&gt; &gt; &gt; &gt; &gt; //...<br>&gt; &gt; &gt; &gt; &gt; }<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; When we write a new function we know what we need in this case and<br>&gt; use optional params or not.<br>&gt; &gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt; &gt; So my proposal is remove force unwrapping(`!`) from function<br>&gt; signatures, cause it have no sense, and that confuse new users.<br>&gt; &gt; &gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; _______________________________________________<br>&gt; &gt; &gt; swift-evolution mailing list<br>&gt; &gt; &gt; swift-evolution at swift.org<br>&gt; &gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160609/36701b93/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
