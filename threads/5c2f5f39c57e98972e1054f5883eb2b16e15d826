<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  5, 2016 at 09:00:00pm</p></header><div class="content"><p>Sorry if this is a repeat, but I’d like to suggest promoting certain structs from Foundation to the Swift standard library.<br></p><p>As an OS X and iOS developer, it sometimes seems that I work with [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or String.  I’d love to see Swift’s standard library include Rect, Point, and Size types, with bridging to make them “just work” with any UIKit or AppKit API that expects their NS or CG equivalents.  Maybe also typealias Frame and Bounds to Rect while we’re at it.<br></p><p>Thoughts?<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January  6, 2016 at 12:00:00am</p></header><div class="content"><p>NSRect and CGRect are already the same type and can be used interchangeably:<br></p><p>&gt; typedef CGRect NSRect;<br></p><p><br>You can easily typealias CGRect to Rect as well if you don&#39;t like the two-letter prefix. Otherwise, if you can wait a bit, SE-0005 &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt; will probably do it for you since it should remove the NS prefix &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md#stripping-the-ns-prefix&gt; on Foundation APIs.<br></p><p>I&#39;m ot particularly enthusiastic about the suggested Frame and Bounds typealiases though. You could still assign a Bounds to a Frame so I don&#39;t think that there&#39;s a big win here.<br></p><p>Félix<br></p><p>&gt; Le 6 janv. 2016 à 00:10:31, John Randolph via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Sorry if this is a repeat, but I’d like to suggest promoting certain structs from Foundation to the Swift standard library.<br>&gt; <br>&gt; As an OS X and iOS developer, it sometimes seems that I work with [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or String.  I’d love to see Swift’s standard library include Rect, Point, and Size types, with bridging to make them “just work” with any UIKit or AppKit API that expects their NS or CG equivalents.  Maybe also typealias Frame and Bounds to Rect while we’re at it.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; -jcr<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/c0478e25/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>January  5, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; As an OS X and iOS developer, it sometimes seems that I work with [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or String.  I’d love to see Swift’s standard library include Rect, Point, and Size types, with bridging to make them “just work” with any UIKit or AppKit API that expects their NS or CG equivalents.  Maybe also typealias Frame and Bounds to Rect while we’re at it.<br>&gt; <br>&gt; Thoughts?<br></p><p>My main thought is that, although I use these types in my iOS and Mac apps all the time, I think I&#39;ve used a rectangle type in web development maybe once (when I was generating images). Swift is currently used mainly for GUI programming, but most of the domains it&#39;s expanding into are ones where it doesn&#39;t need those types.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  6, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 5, 2016, at 10:10 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; As an OS X and iOS developer, it sometimes seems that I work with [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or String.  I’d love to see Swift’s standard library include Rect, Point, and Size types, with bridging to make them “just work” with any UIKit or AppKit API that expects their NS or CG equivalents.  Maybe also typealias Frame and Bounds to Rect while we’re at it.<br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt; <br>&gt; My main thought is that, although I use these types in my iOS and Mac apps all the time, I think I&#39;ve used a rectangle type in web development maybe once (when I was generating images). Swift is currently used mainly for GUI programming, but most of the domains it&#39;s expanding into are ones where it doesn&#39;t need those types.<br></p><p>It’s a feature that would be useful in the areas where Swift is being used today.  Whether a feature is important in other domains doesn’t make it any less useful in Swift’s current applications.<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>January  6, 2016 at 09:00:00pm</p></header><div class="content"><p>I support this, not because I find NS- and CG- geometric structs confusing.<br>I support it because I&#39;m hoping Swift library versions would be generic. I<br>would be very glad to see us get *Rect&lt;Double&gt;* or *Point&lt;Int&gt;* as part of<br>the standard library.<br></p><p>On Wed, Jan 6, 2016 at 9:32 PM, John Randolph via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 5, 2016, at 10:10 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; As an OS X and iOS developer, it sometimes seems that I work with<br>&gt; [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or<br>&gt; String.  I’d love to see Swift’s standard library include Rect, Point, and<br>&gt; Size types, with bridging to make them “just work” with any UIKit or AppKit<br>&gt; API that expects their NS or CG equivalents.  Maybe also typealias Frame<br>&gt; and Bounds to Rect while we’re at it.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Thoughts?<br>&gt; &gt;<br>&gt; &gt; My main thought is that, although I use these types in my iOS and Mac<br>&gt; apps all the time, I think I&#39;ve used a rectangle type in web development<br>&gt; maybe once (when I was generating images). Swift is currently used mainly<br>&gt; for GUI programming, but most of the domains it&#39;s expanding into are ones<br>&gt; where it doesn&#39;t need those types.<br>&gt;<br>&gt; It’s a feature that would be useful in the areas where Swift is being used<br>&gt; today.  Whether a feature is important in other domains doesn’t make it any<br>&gt; less useful in Swift’s current applications.<br>&gt;<br>&gt; -jcr<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/cf1729e6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>January  7, 2016 at 02:00:00am</p></header><div class="content"><p>Rect, Point, Size, EdgeInsets are all ripe for this but I would prefer a<br>Generic implementation as Charles Constant pointed out. Obj-C compatibility<br>is a problem for the generic idea.<br></p><p>On Thu, Jan 7, 2016 at 12:51 AM, Charles Constant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I support this, not because I find NS- and CG- geometric structs<br>&gt; confusing. I support it because I&#39;m hoping Swift library versions would be<br>&gt; generic. I would be very glad to see us get *Rect&lt;Double&gt;* or *Point&lt;Int&gt;* as<br>&gt; part of the standard library.<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 9:32 PM, John Randolph via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jan 5, 2016, at 10:10 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; As an OS X and iOS developer, it sometimes seems that I work with<br>&gt;&gt; [GG|NS]Point, [GG|NS]Rect, and [GG|NS]Size almost as much as I use Float or<br>&gt;&gt; String.  I’d love to see Swift’s standard library include Rect, Point, and<br>&gt;&gt; Size types, with bridging to make them “just work” with any UIKit or AppKit<br>&gt;&gt; API that expects their NS or CG equivalents.  Maybe also typealias Frame<br>&gt;&gt; and Bounds to Rect while we’re at it.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Thoughts?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My main thought is that, although I use these types in my iOS and Mac<br>&gt;&gt; apps all the time, I think I&#39;ve used a rectangle type in web development<br>&gt;&gt; maybe once (when I was generating images). Swift is currently used mainly<br>&gt;&gt; for GUI programming, but most of the domains it&#39;s expanding into are ones<br>&gt;&gt; where it doesn&#39;t need those types.<br>&gt;&gt;<br>&gt;&gt; It’s a feature that would be useful in the areas where Swift is being<br>&gt;&gt; used today.  Whether a feature is important in other domains doesn’t make<br>&gt;&gt; it any less useful in Swift’s current applications.<br>&gt;&gt;<br>&gt;&gt; -jcr<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/b10f4518/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  6, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 9:51 PM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt; <br>&gt; I support this, not because I find NS- and CG- geometric structs confusing. I support it because I&#39;m hoping Swift library versions would be generic. I would be very glad to see us get Rect&lt;Double&gt; or Point&lt;Int&gt; as part of the standard library.<br></p><p>I like that.  I can certainly think of situations where I might want integer based rectangles, sizes, and points.<br></p><p>-jcr<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/3706c630/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>January  6, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; I can certainly think of situations where I might want integer based<br>rectangles, sizes, and points.<br></p><p>I&#39;m quite biased this week, because I spent *yesterday* writing a file for<br>my project with &quot;IntRect&quot; &quot;IntPoint&quot; &quot;IntSize&quot; ad nauseam. It&#39;s not<br>something I&#39;m very thrilled to have as part of my Audio app - a lone file<br>of geometric structs that aready exist if you use CGFloats, where I don&#39;t<br>get the full implementation, etc. And previously, I&#39;ve written code that I<br>needed land on whole numbers, and the extra concern about finding the right<br>options in Cocoa to do so just stressed me out.<br></p><p>On Wed, Jan 6, 2016 at 11:24 PM, John Randolph &lt;jcr at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Jan 6, 2016, at 9:51 PM, Charles Constant &lt;charles at charlesism.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt; I support this, not because I find NS- and CG- geometric structs<br>&gt; confusing. I support it because I&#39;m hoping Swift library versions would be<br>&gt; generic. I would be very glad to see us get *Rect&lt;Double&gt;* or *Point&lt;Int&gt;* as<br>&gt; part of the standard library.<br>&gt;<br>&gt;<br>&gt; I like that.  I can certainly think of situations where I might want<br>&gt; integer based rectangles, sizes, and points.<br>&gt;<br>&gt; -jcr<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/d916ffee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd1ac9d0a3d774b1938abdb816240014?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>John Randolph</string> &lt;jcr at icloud.com&gt;<p>January  6, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On Jan 6, 2016, at 11:38 PM, Charles Constant &lt;charles at charlesism.com&gt; wrote:<br>&gt; <br>&gt; &gt; I can certainly think of situations where I might want integer based rectangles, sizes, and points.<br>&gt; <br>&gt; I&#39;m quite biased this week, because I spent *yesterday* writing a file for my project with &quot;IntRect&quot; &quot;IntPoint&quot; &quot;IntSize&quot; ad nauseam. It&#39;s not something I&#39;m very thrilled to have as part of my Audio app - a lone file of geometric structs that aready exist if you use CGFloats, where I don&#39;t get the full implementation, etc. And previously, I&#39;ve written code that I needed land on whole numbers, and the extra concern about finding the right options in Cocoa to do so just stressed me out.  <br></p><p>FWIW, NSIntegralRect() and CGRectIntegral() do exist.  Note their entirely different naming conventions.  ;-)<br></p><p>Would be much nicer to just use myRect.integralRect when I need to round it.  Might also be nice to have myRect.roundedOut and myRect.roundedIn for a bit more control of which way the sides move.<br></p><p>-jcr<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>January  6, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; CGRectIntegral<br></p><p>But that&#39;s conversion though, right? That&#39;s part of what I find stressful.<br>If I&#39;m using Ints internally, I don&#39;t ever need to worry about getting<br>wonky results because of floating point math.<br></p><p>On Wed, Jan 6, 2016 at 11:45 PM, John Randolph &lt;jcr at icloud.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jan 6, 2016, at 11:38 PM, Charles Constant &lt;charles at charlesism.com&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; &gt; I can certainly think of situations where I might want integer based<br>&gt; rectangles, sizes, and points.<br>&gt; &gt;<br>&gt; &gt; I&#39;m quite biased this week, because I spent *yesterday* writing a file<br>&gt; for my project with &quot;IntRect&quot; &quot;IntPoint&quot; &quot;IntSize&quot; ad nauseam. It&#39;s not<br>&gt; something I&#39;m very thrilled to have as part of my Audio app - a lone file<br>&gt; of geometric structs that aready exist if you use CGFloats, where I don&#39;t<br>&gt; get the full implementation, etc. And previously, I&#39;ve written code that I<br>&gt; needed land on whole numbers, and the extra concern about finding the right<br>&gt; options in Cocoa to do so just stressed me out.<br>&gt;<br>&gt; FWIW, NSIntegralRect() and CGRectIntegral() do exist.  Note their entirely<br>&gt; different naming conventions.  ;-)<br>&gt;<br>&gt; Would be much nicer to just use myRect.integralRect when I need to round<br>&gt; it.  Might also be nice to have myRect.roundedOut and myRect.roundedIn for<br>&gt; a bit more control of which way the sides move.<br>&gt;<br>&gt; -jcr<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160106/5b47e82f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>January  7, 2016 at 11:00:00pm</p></header><div class="content"><p>I definitely think a library for generic CG compatible types would be<br>great. I also think the standard library may need adaptation to allow<br>integers and floats to be used in generic structures (there isn&#39;t common<br>protocols for arithmetic operators, and those operators have different<br>implications for signed vs unsigned, float versus integer, etc.).<br></p><p>However I do not think they are fundamental enough as data structures and<br>data types to be in the standard library.<br></p><p>-1<br></p><p>I would support something like CGVector (for 1,2,4,8... components), if<br>that can expose hardware vector optimisations that may not otherwise be<br>accessible. However that may be implemented efficiently enough with a third<br>party c library (like this https://github.com/mattt/Surge), and afaik may<br>already be under consideration for the built-in Float types.<br></p><p><br>On Thu, Jan 7, 2016 at 6:54 PM, Charles Constant via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; CGRectIntegral<br>&gt;<br>&gt; But that&#39;s conversion though, right? That&#39;s part of what I find<br>&gt; stressful. If I&#39;m using Ints internally, I don&#39;t ever need to worry about<br>&gt; getting wonky results because of floating point math.<br>&gt;<br>&gt; On Wed, Jan 6, 2016 at 11:45 PM, John Randolph &lt;jcr at icloud.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jan 6, 2016, at 11:38 PM, Charles Constant &lt;charles at charlesism.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; &gt; I can certainly think of situations where I might want integer based<br>&gt;&gt; rectangles, sizes, and points.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I&#39;m quite biased this week, because I spent *yesterday* writing a file<br>&gt;&gt; for my project with &quot;IntRect&quot; &quot;IntPoint&quot; &quot;IntSize&quot; ad nauseam. It&#39;s not<br>&gt;&gt; something I&#39;m very thrilled to have as part of my Audio app - a lone file<br>&gt;&gt; of geometric structs that aready exist if you use CGFloats, where I don&#39;t<br>&gt;&gt; get the full implementation, etc. And previously, I&#39;ve written code that I<br>&gt;&gt; needed land on whole numbers, and the extra concern about finding the right<br>&gt;&gt; options in Cocoa to do so just stressed me out.<br>&gt;&gt;<br>&gt;&gt; FWIW, NSIntegralRect() and CGRectIntegral() do exist.  Note their<br>&gt;&gt; entirely different naming conventions.  ;-)<br>&gt;&gt;<br>&gt;&gt; Would be much nicer to just use myRect.integralRect when I need to round<br>&gt;&gt; it.  Might also be nice to have myRect.roundedOut and myRect.roundedIn for<br>&gt;&gt; a bit more control of which way the sides move.<br>&gt;&gt;<br>&gt;&gt; -jcr<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/bd18721c/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Proposal]: Rectangles and other common structures.</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>January  7, 2016 at 04:00:00pm</p></header><div class="content"><p>I don&#39;t think Point, Rect... belong to the standard library - but nonetheless, there should be a standard lib where they belong to:<br>I think C++ suffered a lot because there is no point-structure that is well accepted. Many people declared own, incompatible variants with the same boring traits — and most would have simply used the default implementation, if there had been one.<br></p><p>So what I would like to see is a set of official supported libs to cover basic topics like graphics and math, and constructs like Box and Either.<br>Those libs could declare interfaces for common tasks and evolve beside the stdlib, serving a task similar to what boost does in C++.<br></p><p>Tino<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160107/8fbfd7c9/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
