<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Get rid of #endif</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March  8, 2016 at 04:00:00pm</p></header><div class="content"><p>Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br></p><p>Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br></p><p>	if foo {<br>		blah<br>	}<br>	else {<br>		yadda<br>	}<br></p><p>However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br></p><p>	#if FOO<br>		blah<br>	#else<br>		blah<br>	#endif<br></p><p>In addition to the inconsistency, I consider this to have several concrete disadvantages:<br></p><p>- It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>- It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br></p><p>C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br></p><p>Therefore, I suggest we switch to this syntax:<br></p><p>	#if FOO {<br>		blah<br>	}<br>	#else {<br>		blah<br>	}<br></p><p>That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br></p><p>	#suppress self-in-closure {<br>		blah<br>	}<br></p><p>If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br></p><p>	#behavior var lazy&lt;Value&gt;: Value {<br>		private var value: Value?<br>		<br>		get {<br>			if let value = value {<br>				return value<br>			}<br>			let newValue = initialValue<br>			value = newValue<br>			return newValue<br>		}<br>		set {<br>			value = newValue<br>		}<br>	}<br></p><p>There are two disadvantages I can identify:<br></p><p>- The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br></p><p>- `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br></p><p>If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08e0e501c1b7f3d2ee6d0ed52f560702?s=50"></div><header><strong>Get rid of #endif</strong> from <string>Richard Ross</string> &lt;richardross at fb.com&gt;<p>March  9, 2016 at 12:00:00am</p></header><div class="content"><p>-1. Keeping it the current way makes it significantly more obvious where the conditional compilation ends, rather than having to scour for yet another pesky curly brace.<br></p><p>Additionally, some of us are logical and prefer not to use conditional compilation as an extra indentation level :)<br>--<br>Richard<br></p><p>&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br>&gt; <br>&gt; Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br>&gt; <br>&gt; 	if foo {<br>&gt; 		blah<br>&gt; 	}<br>&gt; 	else {<br>&gt; 		yadda<br>&gt; 	}<br>&gt; <br>&gt; However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br>&gt; <br>&gt; 	#if FOO<br>&gt; 		blah<br>&gt; 	#else<br>&gt; 		blah<br>&gt; 	#endif<br>&gt; <br>&gt; In addition to the inconsistency, I consider this to have several concrete disadvantages:<br>&gt; <br>&gt; - It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>&gt; - It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br>&gt; <br>&gt; C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br>&gt; <br>&gt; Therefore, I suggest we switch to this syntax:<br>&gt; <br>&gt; 	#if FOO {<br>&gt; 		blah<br>&gt; 	}<br>&gt; 	#else {<br>&gt; 		blah<br>&gt; 	}<br>&gt; <br>&gt; That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt; <br>&gt; 	#suppress self-in-closure {<br>&gt; 		blah<br>&gt; 	}<br>&gt; <br>&gt; If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br>&gt; <br>&gt; 	#behavior var lazy&lt;Value&gt;: Value {<br>&gt; 		private var value: Value?<br>&gt; 		<br>&gt; 		get {<br>&gt; 			if let value = value {<br>&gt; 				return value<br>&gt; 			}<br>&gt; 			let newValue = initialValue<br>&gt; 			value = newValue<br>&gt; 			return newValue<br>&gt; 		}<br>&gt; 		set {<br>&gt; 			value = newValue<br>&gt; 		}<br>&gt; 	}<br>&gt; <br>&gt; There are two disadvantages I can identify:<br>&gt; <br>&gt; - The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br>&gt; <br>&gt; - `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt; <br>&gt; If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e=<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Get rid of #endif</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>March  8, 2016 at 08:00:00pm</p></header><div class="content"><p>I don&#39;t think that this change can be implemented at all. `#if swift` doesn&#39;t parse inactive branches, so you wouldn&#39;t be able to disambiguate an `#if swift` end brace from a normal end brace.<br></p><p>Félix<br></p><p>&gt; Le 8 mars 2016 à 19:33:49, Richard Ross via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; -1. Keeping it the current way makes it significantly more obvious where the conditional compilation ends, rather than having to scour for yet another pesky curly brace.<br>&gt; <br>&gt; Additionally, some of us are logical and prefer not to use conditional compilation as an extra indentation level :)<br>&gt; --<br>&gt; Richard<br>&gt; <br>&gt;&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br>&gt;&gt; <br>&gt;&gt; Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br>&gt;&gt; <br>&gt;&gt; 	if foo {<br>&gt;&gt; 		blah<br>&gt;&gt; 	}<br>&gt;&gt; 	else {<br>&gt;&gt; 		yadda<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br>&gt;&gt; <br>&gt;&gt; 	#if FOO<br>&gt;&gt; 		blah<br>&gt;&gt; 	#else<br>&gt;&gt; 		blah<br>&gt;&gt; 	#endif<br>&gt;&gt; <br>&gt;&gt; In addition to the inconsistency, I consider this to have several concrete disadvantages:<br>&gt;&gt; <br>&gt;&gt; - It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>&gt;&gt; - It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br>&gt;&gt; <br>&gt;&gt; C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br>&gt;&gt; <br>&gt;&gt; Therefore, I suggest we switch to this syntax:<br>&gt;&gt; <br>&gt;&gt; 	#if FOO {<br>&gt;&gt; 		blah<br>&gt;&gt; 	}<br>&gt;&gt; 	#else {<br>&gt;&gt; 		blah<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt;&gt; <br>&gt;&gt; 	#suppress self-in-closure {<br>&gt;&gt; 		blah<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br>&gt;&gt; <br>&gt;&gt; 	#behavior var lazy&lt;Value&gt;: Value {<br>&gt;&gt; 		private var value: Value?<br>&gt;&gt; 		<br>&gt;&gt; 		get {<br>&gt;&gt; 			if let value = value {<br>&gt;&gt; 				return value<br>&gt;&gt; 			}<br>&gt;&gt; 			let newValue = initialValue<br>&gt;&gt; 			value = newValue<br>&gt;&gt; 			return newValue<br>&gt;&gt; 		}<br>&gt;&gt; 		set {<br>&gt;&gt; 			value = newValue<br>&gt;&gt; 		}<br>&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; There are two disadvantages I can identify:<br>&gt;&gt; <br>&gt;&gt; - The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br>&gt;&gt; <br>&gt;&gt; - `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt;&gt; <br>&gt;&gt; If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e= &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e=&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160308/2ca86a1f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Get rid of #endif</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>March  9, 2016 at 12:00:00pm</p></header><div class="content"><p>You would at least need #} to disambiguate. With your proposal:<br></p><p>#if FALSE {<br>if false {<br>}<br>print(&quot;hello&quot;)<br>#if FALSE {<br>}<br>}<br></p><p>This either:<br>• is invalid syntax<br>• prints hello<br>• does nothing<br></p><p>Sent from my iPhone<br>&gt; On 09 Mar 2016, at 02:22, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t think that this change can be implemented at all. `#if swift` doesn&#39;t parse inactive branches, so you wouldn&#39;t be able to disambiguate an `#if swift` end brace from a normal end brace.<br>&gt; <br>&gt; Félix<br>&gt; <br>&gt;&gt; Le 8 mars 2016 à 19:33:49, Richard Ross via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; -1. Keeping it the current way makes it significantly more obvious where the conditional compilation ends, rather than having to scour for yet another pesky curly brace.<br>&gt;&gt; <br>&gt;&gt; Additionally, some of us are logical and prefer not to use conditional compilation as an extra indentation level :)<br>&gt;&gt; --<br>&gt;&gt; Richard<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	if foo {<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	else {<br>&gt;&gt;&gt; 		yadda<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#if FOO<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	#else<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	#endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In addition to the inconsistency, I consider this to have several concrete disadvantages:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>&gt;&gt;&gt; - It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Therefore, I suggest we switch to this syntax:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#if FOO {<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	#else {<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#suppress self-in-closure {<br>&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	#behavior var lazy&lt;Value&gt;: Value {<br>&gt;&gt;&gt; 		private var value: Value?<br>&gt;&gt;&gt; 		<br>&gt;&gt;&gt; 		get {<br>&gt;&gt;&gt; 			if let value = value {<br>&gt;&gt;&gt; 				return value<br>&gt;&gt;&gt; 			}<br>&gt;&gt;&gt; 			let newValue = initialValue<br>&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt; 			return newValue<br>&gt;&gt;&gt; 		}<br>&gt;&gt;&gt; 		set {<br>&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt; 		}<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are two disadvantages I can identify:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e= <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160309/7412803b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/73a38bb7bc9528e31098defe30e68ea4?s=50"></div><header><strong>Get rid of #endif</strong> from <string>Jean-Daniel Dupas</string> &lt;mailing at xenonium.com&gt;<p>March 10, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; Le 9 mars 2016 à 12:40, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; You would at least need #} to disambiguate. With your proposal:<br>&gt; <br>&gt; #if FALSE {<br>&gt; if false {<br>&gt; }<br>&gt; print(&quot;hello&quot;)<br>&gt; #if FALSE {<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; This either:<br>&gt; • is invalid syntax<br>&gt; • prints hello<br>&gt; • does nothing<br></p><p>Swift required the block in compiler directive to be syntactically correct. So, you can’t have a dandling &quot;{&quot; and so that sample should not introduced ambiguity.<br></p><p>&gt; Sent from my iPhone<br>&gt; On 09 Mar 2016, at 02:22, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; I don&#39;t think that this change can be implemented at all. `#if swift` doesn&#39;t parse inactive branches, so you wouldn&#39;t be able to disambiguate an `#if swift` end brace from a normal end brace.<br>&gt;&gt; <br>&gt;&gt; Félix<br>&gt;&gt; <br>&gt;&gt;&gt; Le 8 mars 2016 à 19:33:49, Richard Ross via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1. Keeping it the current way makes it significantly more obvious where the conditional compilation ends, rather than having to scour for yet another pesky curly brace.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Additionally, some of us are logical and prefer not to use conditional compilation as an extra indentation level :)<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Richard<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	if foo {<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; 	else {<br>&gt;&gt;&gt;&gt; 		yadda<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#if FOO<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	#else<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	#endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; In addition to the inconsistency, I consider this to have several concrete disadvantages:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>&gt;&gt;&gt;&gt; - It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Therefore, I suggest we switch to this syntax:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#if FOO {<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; 	#else {<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#suppress self-in-closure {<br>&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	#behavior var lazy&lt;Value&gt;: Value {<br>&gt;&gt;&gt;&gt; 		private var value: Value?<br>&gt;&gt;&gt;&gt; 		<br>&gt;&gt;&gt;&gt; 		get {<br>&gt;&gt;&gt;&gt; 			if let value = value {<br>&gt;&gt;&gt;&gt; 				return value<br>&gt;&gt;&gt;&gt; 			}<br>&gt;&gt;&gt;&gt; 			let newValue = initialValue<br>&gt;&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt;&gt; 			return newValue<br>&gt;&gt;&gt;&gt; 		}<br>&gt;&gt;&gt;&gt; 		set {<br>&gt;&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt;&gt; 		}<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; There are two disadvantages I can identify:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; - `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e= &lt;https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e=&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160310/ab67b54d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Get rid of #endif</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>March 11, 2016 at 08:00:00am</p></header><div class="content"><p>But in that case, you are placing #if at the same syntactic level as standard blocks and you loose a fair amount of expressive power.<br></p><p>&gt; On 10 Mar 2016, at 20:03, Jean-Daniel Dupas &lt;mailing at xenonium.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 9 mars 2016 à 12:40, David Hart via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; You would at least need #} to disambiguate. With your proposal:<br>&gt;&gt; <br>&gt;&gt; #if FALSE {<br>&gt;&gt; if false {<br>&gt;&gt; }<br>&gt;&gt; print(&quot;hello&quot;)<br>&gt;&gt; #if FALSE {<br>&gt;&gt; }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This either:<br>&gt;&gt; • is invalid syntax<br>&gt;&gt; • prints hello<br>&gt;&gt; • does nothing<br>&gt; <br>&gt; Swift required the block in compiler directive to be syntactically correct. So, you can’t have a dandling &quot;{&quot; and so that sample should not introduced ambiguity.<br>&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; On 09 Mar 2016, at 02:22, Félix Cloutier via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t think that this change can be implemented at all. `#if swift` doesn&#39;t parse inactive branches, so you wouldn&#39;t be able to disambiguate an `#if swift` end brace from a normal end brace.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Félix<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 8 mars 2016 à 19:33:49, Richard Ross via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1. Keeping it the current way makes it significantly more obvious where the conditional compilation ends, rather than having to scour for yet another pesky curly brace.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Additionally, some of us are logical and prefer not to use conditional compilation as an extra indentation level :)<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Richard<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m wondering if we should change it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Swift and C both use curly-bracket blocks to delimit if statements and other runtime control flow:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	if foo {<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; 	else {<br>&gt;&gt;&gt;&gt;&gt; 		yadda<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; However, the preprocessor/build configuration equivalent uses keywords in the style of languages like BASIC:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#if FOO<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	#else<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	#endif<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; In addition to the inconsistency, I consider this to have several concrete disadvantages:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - It leaves the preferred indentation of a conditional block ambiguous. Some people indent, others don&#39;t.<br>&gt;&gt;&gt;&gt;&gt; - It gives us no syntax to build on for other things that should be &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as strange as it is because there&#39;s no sensible way to delimit a block structure.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; C justifies this because the preprocessor is a separate pass with its own rules, but Swift does not have this limitation.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Therefore, I suggest we switch to this syntax:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#if FOO {<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; 	#else {<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; That gives us a basis to cleanly extend compiler directives to add new features. For instance, the #suppress directive discussed in the &quot;[Idea] #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#suppress self-in-closure {<br>&gt;&gt;&gt;&gt;&gt; 		blah<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If their design ends up being purely compile-time with no runtime impact, we might even consider using this syntax for behaviors:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	#behavior var lazy&lt;Value&gt;: Value {<br>&gt;&gt;&gt;&gt;&gt; 		private var value: Value?<br>&gt;&gt;&gt;&gt;&gt; 		<br>&gt;&gt;&gt;&gt;&gt; 		get {<br>&gt;&gt;&gt;&gt;&gt; 			if let value = value {<br>&gt;&gt;&gt;&gt;&gt; 				return value<br>&gt;&gt;&gt;&gt;&gt; 			}<br>&gt;&gt;&gt;&gt;&gt; 			let newValue = initialValue<br>&gt;&gt;&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt;&gt;&gt; 			return newValue<br>&gt;&gt;&gt;&gt;&gt; 		}<br>&gt;&gt;&gt;&gt;&gt; 		set {<br>&gt;&gt;&gt;&gt;&gt; 			value = newValue<br>&gt;&gt;&gt;&gt;&gt; 		}<br>&gt;&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; There are two disadvantages I can identify:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - The fact that a particular } is associated with a compiler directive may not be immediately obvious when reading code.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; - `#if swift(...)` may not be able to correctly parse the close of the block if unrecognized new language features inside the block appear to unbalance the curly brackets. (For instance, if a new literal syntax is used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If these problems are considered serious enough, an alternative would be to use `#}` to indicate the close of the compiler directive&#39;s scope. This is obviously not an ordinary curly bracket and is unlikely to appear in source for any other reason.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e= <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/b8a326ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Get rid of #endif</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>March 11, 2016 at 10:00:00am</p></header><div class="content"><p>-1 the #endif is much more clear and since it&#39;s so jarring you know its<br>pre-compiler magic.<br></p><p>*___________________________________*<br></p><p>*James⎥Head of Trolls*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Fri, Mar 11, 2016 at 7:20 AM, David Hart via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; But in that case, you are placing #if at the same syntactic level as<br>&gt; standard blocks and you loose a fair amount of expressive power.<br>&gt;<br>&gt; On 10 Mar 2016, at 20:03, Jean-Daniel Dupas &lt;mailing at xenonium.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; Le 9 mars 2016 à 12:40, David Hart via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; You would at least need #} to disambiguate. With your proposal:<br>&gt;<br>&gt; #if FALSE {<br>&gt; if false {<br>&gt; }<br>&gt; print(&quot;hello&quot;)<br>&gt; #if FALSE {<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; This either:<br>&gt; • is invalid syntax<br>&gt; • prints hello<br>&gt; • does nothing<br>&gt;<br>&gt;<br>&gt; Swift required the block in compiler directive to be syntactically<br>&gt; correct. So, you can’t have a dandling &quot;{&quot; and so that sample should not<br>&gt; introduced ambiguity.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt; On 09 Mar 2016, at 02:22, Félix Cloutier via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I don&#39;t think that this change can be implemented at all. `#if swift`<br>&gt; doesn&#39;t parse inactive branches, so you wouldn&#39;t be able to disambiguate an<br>&gt; `#if swift` end brace from a normal end brace.<br>&gt;<br>&gt; Félix<br>&gt;<br>&gt; Le 8 mars 2016 à 19:33:49, Richard Ross via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; a écrit :<br>&gt;<br>&gt; -1. Keeping it the current way makes it significantly more obvious where<br>&gt; the conditional compilation ends, rather than having to scour for yet<br>&gt; another pesky curly brace.<br>&gt;<br>&gt; Additionally, some of us are logical and prefer not to use conditional<br>&gt; compilation as an extra indentation level :)<br>&gt; --<br>&gt; Richard<br>&gt;<br>&gt; On Mar 8, 2016, at 4:23 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Swift inherited an odd preprocessor-related inconsistency from C, and I&#39;m<br>&gt; wondering if we should change it.<br>&gt;<br>&gt; Swift and C both use curly-bracket blocks to delimit if statements and<br>&gt; other runtime control flow:<br>&gt;<br>&gt; if foo {<br>&gt; blah<br>&gt; }<br>&gt; else {<br>&gt; yadda<br>&gt; }<br>&gt;<br>&gt; However, the preprocessor/build configuration equivalent uses keywords in<br>&gt; the style of languages like BASIC:<br>&gt;<br>&gt; #if FOO<br>&gt; blah<br>&gt; #else<br>&gt; blah<br>&gt; #endif<br>&gt;<br>&gt; In addition to the inconsistency, I consider this to have several concrete<br>&gt; disadvantages:<br>&gt;<br>&gt; - It leaves the preferred indentation of a conditional block ambiguous.<br>&gt; Some people indent, others don&#39;t.<br>&gt; - It gives us no syntax to build on for other things that should be<br>&gt; &quot;scoped&quot;. For instance, clang&#39;s `#pragma clang diagnostic push/pop` is as<br>&gt; strange as it is because there&#39;s no sensible way to delimit a block<br>&gt; structure.<br>&gt;<br>&gt; C justifies this because the preprocessor is a separate pass with its own<br>&gt; rules, but Swift does not have this limitation.<br>&gt;<br>&gt; Therefore, I suggest we switch to this syntax:<br>&gt;<br>&gt; #if FOO {<br>&gt; blah<br>&gt; }<br>&gt; #else {<br>&gt; blah<br>&gt; }<br>&gt;<br>&gt; That gives us a basis to cleanly extend compiler directives to add new<br>&gt; features. For instance, the #suppress directive discussed in the &quot;[Idea]<br>&gt; #suppress(warning-identifier)&quot; could be given a syntax like this:<br>&gt;<br>&gt; #suppress self-in-closure {<br>&gt; blah<br>&gt; }<br>&gt;<br>&gt; If their design ends up being purely compile-time with no runtime impact,<br>&gt; we might even consider using this syntax for behaviors:<br>&gt;<br>&gt; #behavior var lazy&lt;Value&gt;: Value {<br>&gt; private var value: Value?<br>&gt;<br>&gt; get {<br>&gt; if let value = value {<br>&gt; return value<br>&gt; }<br>&gt; let newValue = initialValue<br>&gt; value = newValue<br>&gt; return newValue<br>&gt; }<br>&gt; set {<br>&gt; value = newValue<br>&gt; }<br>&gt; }<br>&gt;<br>&gt; There are two disadvantages I can identify:<br>&gt;<br>&gt; - The fact that a particular } is associated with a compiler directive may<br>&gt; not be immediately obvious when reading code.<br>&gt;<br>&gt; - `#if swift(...)` may not be able to correctly parse the close of the<br>&gt; block if unrecognized new language features inside the block appear to<br>&gt; unbalance the curly brackets. (For instance, if a new literal syntax is<br>&gt; used to quote a closing curly and older Swift compilers don&#39;t recognize it.)<br>&gt;<br>&gt; If these problems are considered serious enough, an alternative would be<br>&gt; to use `#}` to indicate the close of the compiler directive&#39;s scope. This<br>&gt; is obviously not an ordinary curly bracket and is unlikely to appear in<br>&gt; source for any other reason.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt;<br>&gt; https://urldefense.proofpoint.com/v2/url?u=https-3A__lists.swift.org_mailman_listinfo_swift-2Devolution&amp;d=CwIGaQ&amp;c=5VD0RTtNlTh3ycd41b3MUw&amp;r=Ezje1IF3xGXfUMfsj4fBc7oM7BcJys1dhQ6psfXzLMU&amp;m=KpVD5NRN240WmQvnHJitBkkgyBtlHU87STAlrcfVNSA&amp;s=V6Bvu749V2ofSYff-m5YKMX_g5Yr48jKkjCeBANWe4w&amp;e=<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160311/1550d7aa/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
