<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ceee3416184656c101818713f1885af0?s=50"></div><header><strong>large dictionary literal overflows swiftc stack</strong> from <string>Jon Rafkind</string> &lt;jon.rafkind at hpe.com&gt;<p>March 22, 2016 at 07:00:00pm</p></header><div class="content"><p>Attached is a file from a project called PerfectLib that contains a dictionary literal with 816 entries in it. On my system with exactly 559 entries (meaning the last entry is &quot;res&quot;) the file can be compiled, but with 560 or more it crashes. It looks like the crash is an infinite loop, I see many entries like this in the stack trace.<br></p><p>frame #3351: 0x000000000199e0fe swift`tryTypeVariableBindings(cs=0x00007fffffff82e8, depth=12, typeVar=0x0000000007edba58, bindings=ArrayRef&lt;(anonymous namespace)::PotentialBinding&gt; @ 0x00007ffffffe00f8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow)::PotentialBinding&gt;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::FreeTypeVariableBinding) + 1294 at CSSolver.cpp:1078<br>    frame #3352: 0x000000000199cdef swift`swift::constraints::ConstraintSystem::solveSimplified(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 879 at CSSolver.cpp:1551<br>    frame #3353: 0x000000000199b7c0 swift`swift::constraints::ConstraintSystem::solveRec(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 608 at CSSolver.cpp:1256<br>    frame #3354: 0x000000000199e0fe swift`tryTypeVariableBindings(cs=0x00007fffffff82e8, depth=11, typeVar=0x0000000007eca470, bindings=ArrayRef&lt;(anonymous namespace)::PotentialBinding&gt; @ 0x00007ffffffe1de8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow)::PotentialBinding&gt;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::FreeTypeVariableBinding) + 1294 at CSSolver.cpp:1078<br>    frame #3355: 0x000000000199cdef swift`swift::constraints::ConstraintSystem::solveSimplified(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 879 at CSSolver.cpp:1551<br>    frame #3356: 0x000000000199b7c0 swift`swift::constraints::ConstraintSystem::solveRec(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 608 at CSSolver.cpp:1256<br></p><p>The bottom of the stack is<br></p><p>frame #3391: 0x00000000017d21d9 swift`swift::TypeChecker::solveForExpression(this=0x00007fffffff97e0, expr=0x00007fffffff8fe0, dc=0x0000000007ead5c0, convertType=Type @ 0x00007fffffff7518, allowFreeTypeVariables=Disallow, listener=0x00007fffffff8f50, cs=0x00007fffffff82e8, viable=0x00007fffffff7660, options=(Storage = 16)) + 665 at TypeCheckConstraints.cpp:1154<br>    frame #3392: 0x00000000017d4ae7 swift`swift::TypeChecker::typeCheckExpression(this=0x00007fffffff97e0, expr=0x00007fffffff8fe0, dc=0x0000000007ead5c0, convertType=Type @ 0x00007fffffff8e48, convertTypePurpose=CTP_Unused, options=(Storage = 16), listener=0x00007fffffff8f50) + 711 at TypeCheckConstraints.cpp:1304<br>    frame #3393: 0x00000000017d61f5 swift`swift::TypeChecker::typeCheckBinding(this=0x00007fffffff97e0, pattern=0x00007fffffff8fe8, initializer=0x00007fffffff8fe0, DC=0x0000000007ead5c0) + 261 at TypeCheckConstraints.cpp:1624<br>    frame #3394: 0x00000000017d64cd swift`swift::TypeChecker::typeCheckPatternBinding(this=0x00007fffffff97e0, PBD=0x0000000007ed3fe8, patternNumber=0) + 237 at TypeCheckConstraints.cpp:1674<br>    frame #3395: 0x0000000001809eb1 swift`validatePatternBindingDecl(tc=0x00007fffffff97e0, binding=0x0000000007ed3fe8, entryNumber=0) + 1025 at TypeCheckDecl.cpp:1214<br>    frame #3396: 0x00000000018126b3 swift`(anonymous namespace)::DeclChecker::visitPatternBindingDecl(this=0x00007fffffff93b0, PBD=0x0000000007ed3fe8) + 83 at TypeCheckDecl.cpp:2842<br>    frame #3397: 0x00000000018117ac swift`swift::ASTVisitor&lt;(anonymous namespace)::DeclChecker, void, void, void, void, void, void&gt;::visit(this=0x00007fffffff93b0, D=0x0000000007ed3fe8) + 140 at DeclNodes.def:91<br>    frame #3398: 0x00000000018076f7 swift`(anonymous namespace)::DeclChecker::visit(this=0x00007fffffff93b0, decl=0x0000000007ed3fe8) + 39 at TypeCheckDecl.cpp:2672<br>    frame #3399: 0x0000000001807650 swift`swift::TypeChecker::typeCheckDecl(this=0x00007fffffff97e0, D=0x0000000007ed3fe8, isFirstPass=false) + 160 at TypeCheckDecl.cpp:5561<br>    frame #3400: 0x00000000018ca5ce swift`(anonymous namespace)::StmtChecker::visitBraceStmt(this=0x00007fffffff9600, BS=0x0000000007ed4038) + 1166 at TypeCheckStmt.cpp:1078<br>    frame #3401: 0x00000000018c9f0b swift`swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(this=0x00007fffffff9600, S=0x0000000007ed4038) + 91 at StmtNodes.def:43<br>    frame #3402: 0x00000000018c99fa swift`bool (anonymous namespace)::StmtChecker::typeCheckStmt&lt;swift::BraceStmt&gt;(this=0x00007fffffff9600, S=0x00007fffffff9668) + 42 at TypeCheckStmt.cpp:325<br>    frame #3403: 0x00000000018c98e4 swift`swift::TypeChecker::typeCheckTopLevelCodeDecl(this=0x00007fffffff97e0, TLCD=0x0000000007ead590) + 132 at TypeCheckStmt.cpp:1405<br>    frame #3404: 0x00000000017b1524 swift`swift::performTypeChecking(SF=0x0000000007ead380, TLC=0x00007fffffffa068, Options=(Storage = 5), StartElem=0) + 900 at TypeChecker.cpp:585<br>    frame #3405: 0x0000000001515e08 swift`swift::CompilerInstance::performSema(this=0x00007fffffffb680) + 5048 at Frontend.cpp:464<br>    frame #3406: 0x0000000000c5e42c swift`performCompile(Instance=0x00007fffffffb680, Invocation=0x00007fffffffb250, Args=ArrayRef&lt;const char *&gt; @ 0x00007fffffffad50, ReturnValue=0x00007fffffffaf34) + 1500 at frontend_main.cpp:666<br>    frame #3407: 0x0000000000c5da75 swift`frontend_main(Args=ArrayRef&lt;const char *&gt; @ 0x00007fffffffc188, Argv0=&quot;/home/jon/tmp/swift/swift/install/bin/swift&quot;, MainAddr=0x0000000000c4c010) + 2981 at frontend_main.cpp:1117<br>    frame #3408: 0x0000000000c4cc3e swift`main(argc_=10, argv_=0x00007fffffffdba8) + 3054 at driver.cpp:156<br>    frame #3409: 0x00007ffff6375ec5 libc.so.6`__libc_start_main(main=(swift`main at driver.cpp:107), argc=10, argv=0x00007fffffffdba8, init=&lt;unavailable&gt;, fini=&lt;unavailable&gt;, rtld_fini=&lt;unavailable&gt;, stack_end=0x00007fffffffdb98) + 245 at libc-start.c:287<br>    frame #3410: 0x0000000000c4bf44 swift`_start + 41<br></p><p>This crash is on linux using swift 2.2 @ c9e72b3a9290a78d. I haven&#39;t tried the swift-2.2-RELEASE tag, but it will probably have the same behavior as my current git checkout is pretty close (in terms of commits) to the release tag. Curiously on osx the native swift binary does not have a problem with this file.<br></p><p>My own code built on top of the swift codebase on osx does crash, however. I am currently investigating what differences there are between how I invoke the swift type checker and how the native swiftc does it.<br></p><p>--<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>large dictionary literal overflows swiftc stack</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>March 22, 2016 at 12:00:00pm</p></header><div class="content"><p>I&#39;d recommend testing to see if this is improved in Swift 3, if it&#39;s practical to switch your codebase over. There are some type checker improvements there that didn&#39;t make it into Swift 2.<br></p><p>-Joe<br></p><p>&gt; On Mar 22, 2016, at 12:13 PM, Rafkind, Jon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Attached is a file from a project called PerfectLib that contains a dictionary literal with 816 entries in it. On my system with exactly 559 entries (meaning the last entry is &quot;res&quot;) the file can be compiled, but with 560 or more it crashes. It looks like the crash is an infinite loop, I see many entries like this in the stack trace.<br>&gt; <br>&gt; frame #3351: 0x000000000199e0fe swift`tryTypeVariableBindings(cs=0x00007fffffff82e8, depth=12, typeVar=0x0000000007edba58, bindings=ArrayRef&lt;(anonymous namespace)::PotentialBinding&gt; @ 0x00007ffffffe00f8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow)::PotentialBinding&gt;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::FreeTypeVariableBinding) + 1294 at CSSolver.cpp:1078<br>&gt;    frame #3352: 0x000000000199cdef swift`swift::constraints::ConstraintSystem::solveSimplified(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 879 at CSSolver.cpp:1551<br>&gt;    frame #3353: 0x000000000199b7c0 swift`swift::constraints::ConstraintSystem::solveRec(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 608 at CSSolver.cpp:1256<br>&gt;    frame #3354: 0x000000000199e0fe swift`tryTypeVariableBindings(cs=0x00007fffffff82e8, depth=11, typeVar=0x0000000007eca470, bindings=ArrayRef&lt;(anonymous namespace)::PotentialBinding&gt; @ 0x00007ffffffe1de8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow)::PotentialBinding&gt;, llvm::SmallVectorImpl&lt;swift::constraints::Solution&gt;&amp;, swift::FreeTypeVariableBinding) + 1294 at CSSolver.cpp:1078<br>&gt;    frame #3355: 0x000000000199cdef swift`swift::constraints::ConstraintSystem::solveSimplified(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 879 at CSSolver.cpp:1551<br>&gt;    frame #3356: 0x000000000199b7c0 swift`swift::constraints::ConstraintSystem::solveRec(this=0x00007fffffff82e8, solutions=0x00007fffffff7660, allowFreeTypeVariables=Disallow) + 608 at CSSolver.cpp:1256<br>&gt; <br>&gt; The bottom of the stack is<br>&gt; <br>&gt; frame #3391: 0x00000000017d21d9 swift`swift::TypeChecker::solveForExpression(this=0x00007fffffff97e0, expr=0x00007fffffff8fe0, dc=0x0000000007ead5c0, convertType=Type @ 0x00007fffffff7518, allowFreeTypeVariables=Disallow, listener=0x00007fffffff8f50, cs=0x00007fffffff82e8, viable=0x00007fffffff7660, options=(Storage = 16)) + 665 at TypeCheckConstraints.cpp:1154<br>&gt;    frame #3392: 0x00000000017d4ae7 swift`swift::TypeChecker::typeCheckExpression(this=0x00007fffffff97e0, expr=0x00007fffffff8fe0, dc=0x0000000007ead5c0, convertType=Type @ 0x00007fffffff8e48, convertTypePurpose=CTP_Unused, options=(Storage = 16), listener=0x00007fffffff8f50) + 711 at TypeCheckConstraints.cpp:1304<br>&gt;    frame #3393: 0x00000000017d61f5 swift`swift::TypeChecker::typeCheckBinding(this=0x00007fffffff97e0, pattern=0x00007fffffff8fe8, initializer=0x00007fffffff8fe0, DC=0x0000000007ead5c0) + 261 at TypeCheckConstraints.cpp:1624<br>&gt;    frame #3394: 0x00000000017d64cd swift`swift::TypeChecker::typeCheckPatternBinding(this=0x00007fffffff97e0, PBD=0x0000000007ed3fe8, patternNumber=0) + 237 at TypeCheckConstraints.cpp:1674<br>&gt;    frame #3395: 0x0000000001809eb1 swift`validatePatternBindingDecl(tc=0x00007fffffff97e0, binding=0x0000000007ed3fe8, entryNumber=0) + 1025 at TypeCheckDecl.cpp:1214<br>&gt;    frame #3396: 0x00000000018126b3 swift`(anonymous namespace)::DeclChecker::visitPatternBindingDecl(this=0x00007fffffff93b0, PBD=0x0000000007ed3fe8) + 83 at TypeCheckDecl.cpp:2842<br>&gt;    frame #3397: 0x00000000018117ac swift`swift::ASTVisitor&lt;(anonymous namespace)::DeclChecker, void, void, void, void, void, void&gt;::visit(this=0x00007fffffff93b0, D=0x0000000007ed3fe8) + 140 at DeclNodes.def:91<br>&gt;    frame #3398: 0x00000000018076f7 swift`(anonymous namespace)::DeclChecker::visit(this=0x00007fffffff93b0, decl=0x0000000007ed3fe8) + 39 at TypeCheckDecl.cpp:2672<br>&gt;    frame #3399: 0x0000000001807650 swift`swift::TypeChecker::typeCheckDecl(this=0x00007fffffff97e0, D=0x0000000007ed3fe8, isFirstPass=false) + 160 at TypeCheckDecl.cpp:5561<br>&gt;    frame #3400: 0x00000000018ca5ce swift`(anonymous namespace)::StmtChecker::visitBraceStmt(this=0x00007fffffff9600, BS=0x0000000007ed4038) + 1166 at TypeCheckStmt.cpp:1078<br>&gt;    frame #3401: 0x00000000018c9f0b swift`swift::ASTVisitor&lt;(anonymous namespace)::StmtChecker, void, swift::Stmt*, void, void, void, void&gt;::visit(this=0x00007fffffff9600, S=0x0000000007ed4038) + 91 at StmtNodes.def:43<br>&gt;    frame #3402: 0x00000000018c99fa swift`bool (anonymous namespace)::StmtChecker::typeCheckStmt&lt;swift::BraceStmt&gt;(this=0x00007fffffff9600, S=0x00007fffffff9668) + 42 at TypeCheckStmt.cpp:325<br>&gt;    frame #3403: 0x00000000018c98e4 swift`swift::TypeChecker::typeCheckTopLevelCodeDecl(this=0x00007fffffff97e0, TLCD=0x0000000007ead590) + 132 at TypeCheckStmt.cpp:1405<br>&gt;    frame #3404: 0x00000000017b1524 swift`swift::performTypeChecking(SF=0x0000000007ead380, TLC=0x00007fffffffa068, Options=(Storage = 5), StartElem=0) + 900 at TypeChecker.cpp:585<br>&gt;    frame #3405: 0x0000000001515e08 swift`swift::CompilerInstance::performSema(this=0x00007fffffffb680) + 5048 at Frontend.cpp:464<br>&gt;    frame #3406: 0x0000000000c5e42c swift`performCompile(Instance=0x00007fffffffb680, Invocation=0x00007fffffffb250, Args=ArrayRef&lt;const char *&gt; @ 0x00007fffffffad50, ReturnValue=0x00007fffffffaf34) + 1500 at frontend_main.cpp:666<br>&gt;    frame #3407: 0x0000000000c5da75 swift`frontend_main(Args=ArrayRef&lt;const char *&gt; @ 0x00007fffffffc188, Argv0=&quot;/home/jon/tmp/swift/swift/install/bin/swift&quot;, MainAddr=0x0000000000c4c010) + 2981 at frontend_main.cpp:1117<br>&gt;    frame #3408: 0x0000000000c4cc3e swift`main(argc_=10, argv_=0x00007fffffffdba8) + 3054 at driver.cpp:156<br>&gt;    frame #3409: 0x00007ffff6375ec5 libc.so.6`__libc_start_main(main=(swift`main at driver.cpp:107), argc=10, argv=0x00007fffffffdba8, init=&lt;unavailable&gt;, fini=&lt;unavailable&gt;, rtld_fini=&lt;unavailable&gt;, stack_end=0x00007fffffffdb98) + 245 at libc-start.c:287<br>&gt;    frame #3410: 0x0000000000c4bf44 swift`_start + 41<br>&gt; <br>&gt; This crash is on linux using swift 2.2 @ c9e72b3a9290a78d. I haven&#39;t tried the swift-2.2-RELEASE tag, but it will probably have the same behavior as my current git checkout is pretty close (in terms of commits) to the release tag. Curiously on osx the native swift binary does not have a problem with this file.<br>&gt; <br>&gt; My own code built on top of the swift codebase on osx does crash, however. I am currently investigating what differences there are between how I invoke the swift type checker and how the native swiftc does it.<br>&gt; <br>&gt; --<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
