<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c354b21edb9ba56fe6b42950e08195fa?s=50"></div><header><strong>[Pitch] Change custom operator rules to reserve operators for future use?</strong> from <string>Jonathan Hull</string> &lt;jhull at gbis.com&gt;<p>June 30, 2016 at 06:00:00am</p></header><div class="content"><p>I don’t like the idea (which I have seen in several different pitches recently) of breaking things now so that some theoretical future feature might be possible.  Much better, I think, to wait until we have a concrete proposal and than break things then if necessary.  Otherwise we will just leave a trail of half-broken things in the wake of features which never quite happen (or which happen in a different form than we originally thought).<br></p><p>I do realize that Swift 3 is being thought of as the “Last chance to break things” on a massive scale, but that doesn’t mean that we should break things for breaking’s sake.  I am sure there will be a few small breaking changes with every release, and I would put this sort of thing in that category.  The things which NEED to happen this release are things like the grand renaming, the new collection model, and shuffling around the standard library… because those will affect everyone’s code.<br></p><p>This will affect a much smaller subset.  It will probably break one of my frameworks (which is used in 3 different projects), but it will not break the majority of my work.  The grand renaming will affect every single project I have… and those types of changes are the ones we need to avoid post Swift 3…<br></p><p>Thanks,<br>Jon<br></p><p>&gt; Hi all,<br>&gt; <br>&gt; Would there be any interest in a proposal to tighten the custom operator<br>&gt; naming rules in order to reserve operators for future language features?<br>&gt; This would be a source-breaking change, so it would fit the Swift 3<br>&gt; timeline.<br>&gt; <br>&gt; The advantages of doing so:<br>&gt; <br>&gt; - Future features benefit from more aesthetic and easier-to-use syntax if<br>&gt; they don&#39;t have to work around potential custom operator collisions. There<br>&gt; is a pretty big list of potential features that could benefit from such<br>&gt; syntax: Rust-style ownership/borrow-checking, variadic generics, a future<br>&gt; return of the tuple splat, sugar for boxing value types to give them<br>&gt; identity, etc.<br>&gt; <br>&gt; The disadvantages of doing so:<br>&gt; <br>&gt; - Developers who want to define custom operators (please distinguish this<br>&gt; from operator overloading, which would not be affected) will have a<br>&gt; slightly narrower space of options to choose from.<br>&gt; <br>&gt; I personally don&#39;t feel all that broken up about potentially breaking<br>&gt; custom operator code in order to reserve room for future feature<br>&gt; development, especially since custom operators should be used sparingly to<br>&gt; begin with.<br>&gt; <br>&gt; If people think this is a good idea, it would also be useful to figure out<br>&gt; exactly what sorts of operators we&#39;d want to reserve for future use, as<br>&gt; part of hammering out a formal proposal.<br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Best,<br>&gt; Austin<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/3b8ee154/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
