<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94f42debb7aa6b1715d75346a588aad1?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Rex Fenley</string> &lt;rex at remind101.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>Hey swift lldb team!<br></p><p>I tried building the LLDB target from within Xcode. However, I get the<br>following error during compilation:<br></p><p>subprocess.CalledProcessError: Command &#39;[&#39;python&#39;, &#39;/Users/Rex/Documents/<br>projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;,<br>&#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/<br>Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39;<br>returned non-zero exit status 1<br></p><p>And much further up I see<br></p><p>warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to<br>src/*.in.cc will not affect your build.<br></p><p>and<br></p><p>error: unknown setting: cmark-cmake-options<br></p><p>How may I fix this/these issues to build and run lldb from Xcode?<br></p><p>Thanks :)<br></p><p>-- <br></p><p>Rex Fenley  |  IOS DEVELOPER<br></p><p>Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;<br> |  FOLLOW<br>US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&lt;https://www.facebook.com/remindhq&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/a55d06b6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 1:41 PM, Rex Fenley via swift-lldb-dev &lt;swift-lldb-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hey swift lldb team!<br>&gt; <br>&gt; I tried building the LLDB target from within Xcode. However, I get the following error during compilation:<br>&gt; subprocess.CalledProcessError: Command &#39;[&#39;python&#39;, &#39;/Users/Rex/Documents/projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;, &#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39; returned non-zero exit status 1<br>&gt; <br></p><p>That message indicates that the LLVM/clang/Swift build portion of the Xcode-driven build failed.  There should be actual failure content from build-script somewhere above the ‘exit status 1’ portion.  You might need to go to your build log (the Report Navigator, right-most speech-bubble-like icon from the left pane of Xcode).  There should be a build log that details everything the Xcode build did, of which running the build-script is one stage.<br></p><p>Just to verify, what Xcode scheme and/or configuration are you building?  It should be the ‘desktop’ scheme, which will default to the DebugClang (or maybe Debug) configuration.<br>&gt; And much further up I see<br>&gt; <br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to src/*.in.cc will not affect your build.<br>&gt; <br>&gt; <br>&gt; and<br>&gt; <br>&gt; error: unknown setting: cmark-cmake-options<br>&gt; <br>&gt; How may I fix this/these issues to build and run lldb from Xcode?<br>&gt; <br>&gt; Thanks :)<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt; <br>&gt; <br>&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US &lt;https://www.facebook.com/remindhq&gt;_______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/7f1ac7eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October  5, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 1:50 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 1:41 PM, Rex Fenley via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hey swift lldb team!<br>&gt;&gt; <br>&gt;&gt; I tried building the LLDB target from within Xcode. However, I get the following error during compilation:<br>&gt;&gt; subprocess.CalledProcessError: Command &#39;[&#39;python&#39;, &#39;/Users/Rex/Documents/projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;, &#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39; returned non-zero exit status 1<br>&gt;&gt; <br>&gt; <br>&gt; That message indicates that the LLVM/clang/Swift build portion of the Xcode-driven build failed.  There should be actual failure content from build-script somewhere above the ‘exit status 1’ portion.  You might need to go to your build log (the Report Navigator, right-most speech-bubble-like icon from the left pane of Xcode).  There should be a build log that details everything the Xcode build did, of which running the build-script is one stage.<br>&gt; <br>&gt; Just to verify, what Xcode scheme and/or configuration are you building?  It should be the ‘desktop’ scheme, which will default to the DebugClang (or maybe Debug) configuration.<br></p><p>The other thing that might be the issue may be the state of the llvm, clang, swift and cmark repositories.  If your original check-out was via lldb, then it will automatically do a git clone of the relevant dependent projects for you.  However, it will not update them.  So, if you allowed the lldb build to sync those, then did a refresh of lldb much later, and didn’t manually update the llvm, clang, swift or cmark directory, you will have an out-of-sync composite source tree.<br></p><p>For the Xcode-driven build, the source layout looks like:<br>lldb/<br>lldb/llvm<br>lldb/llvm/tools/clang<br>lldb/llvm/tools/cmark<br>lldb/llvm/tools/swift<br></p><p>There will be symlinks in the lldb/ directory to the clang and swift directories.<br></p><p>You’ll want to make sure you update all of those at roughly the same time.  That might be a good place to start if this sounds like it might be your scenario.<br>&gt;&gt; And much further up I see<br>&gt;&gt; <br>&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to src/*.in.cc &lt;http://in.cc/&gt; will not affect your build.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; and<br>&gt;&gt; <br>&gt;&gt; error: unknown setting: cmark-cmake-options<br>&gt;&gt; <br>&gt;&gt; How may I fix this/these issues to build and run lldb from Xcode?<br>&gt;&gt; <br>&gt;&gt; Thanks :)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US &lt;https://www.facebook.com/remindhq&gt;_______________________________________________<br>&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/5cb481a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94f42debb7aa6b1715d75346a588aad1?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Rex Fenley</string> &lt;rex at remind101.com&gt;<p>October  5, 2016 at 02:00:00pm</p></header><div class="content"><p>Hey Todd, thanks for the info!<br></p><p>I was attempting to build from the LLDM scheme. The only errors were the<br>two I provided, I&#39;ll post more information at the bottom. When trying the<br>&quot;desktop&quot; scheme I get the following:<br></p><p>&quot;debugserver&quot; isn&#39;t code signed but requires entitlements. It is not<br>possible to add entitlements to a binary without signing it.<br></p><p><br>I don&#39;t know if syncing is the issue, I simply git cloned swift-lldb from<br>github and went to the tag &quot;*swift-3.0-RELEASE&quot;* and built.<br></p><p>more info from LLDB scheme errors:<br></p><p>bootstrapping ninja...<br></p><p>warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to<br>src/*.in.cc will not affect your build.<br></p><p>wrote build.ninja.<br></p><p>bootstrap complete.  rebuilding...<br></p><p>+ popd<br></p><p>+ env<br>HOST_VARIABLE_macosx_x86_64__SWIFT_BENCHMARK_TARGETS=swift-benchmark-macosx-x86_64<br>HOST_VARIABLE_macosx_x86_64__SWIFT_RUN_BENCHMARK_TARGETS=check-swift-benchmark-macosx-x86_64<br>&#39;HOST_VARIABLE_macosx_x86_64__SWIFT_SDKS=IOS IOS_SIMULATOR OSX TVOS<br>TVOS_SIMULATOR WATCHOS WATCHOS_SIMULATOR&#39;<br>HOST_VARIABLE_macosx_x86_64__SWIFT_STDLIB_TARGETS=swift-test-stdlib-macosx-x86_64<br>HOST_VARIABLE_macosx_x86_64__SWIFT_TEST_TARGETS= caffeinate<br>/Users/Rex/Documents/projects/swift-lldb/swift/utils/build-script-impl<br>--workspace /Users/Rex/Documents/projects/swift-lldb --build-dir<br>/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert<br>--install-prefix<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr<br>--host-target macosx-x86_64 --stdlib-deployment-targets &#39;macosx-x86_64<br>iphonesimulator-i386 iphonesimulator-x86_64 appletvsimulator-x86_64<br>watchsimulator-i386 iphoneos-armv7 iphoneos-armv7s iphoneos-arm64<br>appletvos-arm64 watchos-armv7k&#39; --host-cc<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang<br>--host-cxx<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++<br>--darwin-xcrun-toolchain default --darwin-deployment-version-osx=10.9<br>--darwin-deployment-version-ios=7.0 --darwin-deployment-version-tvos=9.0<br>--darwin-deployment-version-watchos=2.0 --cmake /usr/local/bin/cmake<br>--cmark-build-type RelWithDebInfo --llvm-build-type RelWithDebInfo<br>--swift-build-type RelWithDebInfo --swift-stdlib-build-type RelWithDebInfo<br>--lldb-build-type RelWithDebInfo --foundation-build-type RelWithDebInfo<br>--libdispatch-build-type RelWithDebInfo --xctest-build-type RelWithDebInfo<br>--swift-enable-assertions true --swift-stdlib-enable-assertions true<br>--swift-analyze-code-coverage false --cmake-generator Ninja --build-jobs 8<br>&#39;--common-cmake-options=-G Ninja<br>-DCMAKE_C_COMPILER:PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang<br>-DCMAKE_CXX_COMPILER:PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++<br>-DCMAKE_MAKE_PROGRAM=/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert/ninja-build/ninja&#39;<br>--build-args=-j8 --cmark-cmake-options=<br>&#39;--llvm-cmake-options=-DLLVM_ENABLE_ASSERTIONS=TRUE<br>-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64;PowerPC;SystemZ&#39;<br>--swift-cmake-options= --build-stdlib-deployment-targets all<br>--ninja-bin=/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert/ninja-build/ninja<br>--skip-build-benchmarks --skip-build-foundation --skip-build-xctest<br>--skip-build-lldb --skip-build-llbuild --skip-build-libdispatch<br>--skip-build-swiftpm --skip-build-playgroundlogger<br>--skip-build-playgroundsupport --build-swift-dynamic-stdlib<br>--build-swift-dynamic-sdk-overlay --skip-build-ios-device<br>--skip-build-ios-simulator --skip-build-tvos-device<br>--skip-build-tvos-simulator --skip-build-watchos-device<br>--skip-build-watchos-simulator --skip-build-android --skip-test-swift<br>--skip-test-cmark --skip-test-lldb --skip-test-llbuild --skip-test-swiftpm<br>--skip-test-xctest --skip-test-foundation --skip-test-libdispatch<br>--skip-test-playgroundlogger --skip-test-playgroundsupport<br>--skip-test-linux --skip-test-freebsd --skip-test-cygwin --skip-test-osx<br>--skip-test-ios-host --skip-test-ios-simulator --skip-test-tvos-host<br>--skip-test-tvos-simulator --skip-test-watchos-host<br>--skip-test-watchos-simulator --skip-test-android-host<br>--skip-test-benchmarks --skip-test-optimized --android-deploy-device-path<br>/data/local/tmp --toolchain-prefix<br>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain<br>--install-destdir=/Users/Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64<br>--llvm-lit-args=-sv<br></p><p>error: unknown setting: cmark-cmake-options<br></p><p><br>On Wed, Oct 5, 2016 at 1:58 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 5, 2016, at 1:50 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Oct 5, 2016, at 1:41 PM, Rex Fenley via swift-lldb-dev &lt;<br>&gt; swift-lldb-dev at swift.org&gt; wrote:<br>&gt;<br>&gt; Hey swift lldb team!<br>&gt;<br>&gt; I tried building the LLDB target from within Xcode. However, I get the<br>&gt; following error during compilation:<br>&gt;<br>&gt; subprocess.CalledProcessError: Command &#39;[&#39;python&#39;,<br>&gt; &#39;/Users/Rex/Documents/projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;,<br>&gt; &#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/<br>&gt; Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39;<br>&gt; returned non-zero exit status 1<br>&gt;<br>&gt;<br>&gt; That message indicates that the LLVM/clang/Swift build portion of the<br>&gt; Xcode-driven build failed.  There should be actual failure content from<br>&gt; build-script somewhere above the ‘exit status 1’ portion.  You might need<br>&gt; to go to your build log (the Report Navigator, right-most<br>&gt; speech-bubble-like icon from the left pane of Xcode).  There should be a<br>&gt; build log that details everything the Xcode build did, of which running the<br>&gt; build-script is one stage.<br>&gt;<br>&gt; Just to verify, what Xcode scheme and/or configuration are you building?<br>&gt; It should be the ‘desktop’ scheme, which will default to the DebugClang (or<br>&gt; maybe Debug) configuration.<br>&gt;<br>&gt;<br>&gt; The other thing that might be the issue may be the state of the llvm,<br>&gt; clang, swift and cmark repositories.  If your original check-out was via<br>&gt; lldb, then it will automatically do a git clone of the relevant dependent<br>&gt; projects for you.  However, it will not update them.  So, if you allowed<br>&gt; the lldb build to sync those, then did a refresh of lldb much later, and<br>&gt; didn’t manually update the llvm, clang, swift or cmark directory, you will<br>&gt; have an out-of-sync composite source tree.<br>&gt;<br>&gt; For the Xcode-driven build, the source layout looks like:<br>&gt; lldb/<br>&gt; lldb/llvm<br>&gt; lldb/llvm/tools/clang<br>&gt; lldb/llvm/tools/cmark<br>&gt; lldb/llvm/tools/swift<br>&gt;<br>&gt; There will be symlinks in the lldb/ directory to the clang and swift<br>&gt; directories.<br>&gt;<br>&gt; You’ll want to make sure you update all of those at roughly the same<br>&gt; time.  That might be a good place to start if this sounds like it might be<br>&gt; your scenario.<br>&gt;<br>&gt; And much further up I see<br>&gt;<br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt; to src/*.in.cc will not affect your build.<br>&gt;<br>&gt; and<br>&gt;<br>&gt; error: unknown setting: cmark-cmake-options<br>&gt;<br>&gt; How may I fix this/these issues to build and run lldb from Xcode?<br>&gt;<br>&gt; Thanks :)<br>&gt;<br>&gt; --<br>&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt;<br>&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |<br>&gt;  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&gt; &lt;https://www.facebook.com/remindhq&gt;<br>&gt; _______________________________________________<br>&gt; swift-lldb-dev mailing list<br>&gt; swift-lldb-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Rex Fenley  |  IOS DEVELOPER<br></p><p>Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;<br> |  FOLLOW<br>US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&lt;https://www.facebook.com/remindhq&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/673d2449/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d7a1a861cc623f3b4616902e71b9ec40?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Todd Fiala</string> &lt;tfiala at apple.com&gt;<p>October  5, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 5, 2016, at 2:36 PM, Rex Fenley &lt;rex at remind101.com&gt; wrote:<br>&gt; <br>&gt; Hey Todd, thanks for the info!<br>&gt; <br>&gt; I was attempting to build from the LLDM scheme. The only errors were the two I provided, I&#39;ll post more information at the bottom. When trying the &quot;desktop&quot; scheme I get the following:<br></p><p>Okay - switch to the desktop scheme; otherwise, you’ll be missing some components.  (That is not particularly well documented - the LLDB scheme is literally for the LLDB.framework, but not everything).<br>&gt; &quot;debugserver&quot; isn&#39;t code signed but requires entitlements. It is not possible to add entitlements to a binary without signing it.<br>&gt; <br>&gt; <br></p><p>You have a couple options there.<br></p><p>1. If you follow the docs in lldb/docs/code-signing.txt, your debugserver will be usable regardless of that message.<br></p><p>2. [Preferred] Alternatively, you can set the Xcode build variable DEBUGSERVER_USE_FROM_SYSTEM=1, either via an xcodebuild command line, or by setting it directly in your Xcode settings.  It’s not enough for it to be an environment variable set.  If you go with this, the debugserver will be copied from your Xcode into the built LLDB, which will then be an official Apple-signed debugserver.  Unless you are changing debugserver, that is generally the way to go.  A fair amount of the Swift CI runs in this configuration.  (Although not everything, as we really do change debugserver and want to test those changes.)<br></p><p>The xcodebuild line with that set would be:<br>$ cd your/lldb/source/root<br>$ xcodebuild -scheme desktop DEBUGSERVER_USE_FROM_SYSTEM=1<br></p><p>Let me know if that gets you further.<br></p><p>&gt; <br>&gt; I don&#39;t know if syncing is the issue, I simply git cloned swift-lldb from github and went to the tag &quot;swift-3.0-RELEASE&quot; and built.<br>&gt; <br>&gt; more info from LLDB scheme errors:<br>&gt; bootstrapping ninja...<br>&gt; <br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to src/*.in.cc &lt;http://in.cc/&gt; will not affect your build.<br>&gt; <br>&gt; wrote build.ninja.<br>&gt; <br>&gt; bootstrap complete.  rebuilding...<br>&gt; <br>&gt; + popd<br>&gt; <br>&gt; + env HOST_VARIABLE_macosx_x86_64__SWIFT_BENCHMARK_TARGETS=swift-benchmark-macosx-x86_64 HOST_VARIABLE_macosx_x86_64__SWIFT_RUN_BENCHMARK_TARGETS=check-swift-benchmark-macosx-x86_64 &#39;HOST_VARIABLE_macosx_x86_64__SWIFT_SDKS=IOS IOS_SIMULATOR OSX TVOS TVOS_SIMULATOR WATCHOS WATCHOS_SIMULATOR&#39; HOST_VARIABLE_macosx_x86_64__SWIFT_STDLIB_TARGETS=swift-test-stdlib-macosx-x86_64 HOST_VARIABLE_macosx_x86_64__SWIFT_TEST_TARGETS= caffeinate /Users/Rex/Documents/projects/swift-lldb/swift/utils/build-script-impl --workspace /Users/Rex/Documents/projects/swift-lldb --build-dir /Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert --install-prefix /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr --host-target macosx-x86_64 --stdlib-deployment-targets &#39;macosx-x86_64 iphonesimulator-i386 iphonesimulator-x86_64 appletvsimulator-x86_64 watchsimulator-i386 iphoneos-armv7 iphoneos-armv7s iphoneos-arm64 appletvos-arm64 watchos-armv7k&#39; --host-cc /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang --host-cxx /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ --darwin-xcrun-toolchain default --darwin-deployment-version-osx=10.9 --darwin-deployment-version-ios=7.0 --darwin-deployment-version-tvos=9.0 --darwin-deployment-version-watchos=2.0 --cmake /usr/local/bin/cmake --cmark-build-type RelWithDebInfo --llvm-build-type RelWithDebInfo --swift-build-type RelWithDebInfo --swift-stdlib-build-type RelWithDebInfo --lldb-build-type RelWithDebInfo --foundation-build-type RelWithDebInfo --libdispatch-build-type RelWithDebInfo --xctest-build-type RelWithDebInfo --swift-enable-assertions true --swift-stdlib-enable-assertions true --swift-analyze-code-coverage false --cmake-generator Ninja --build-jobs 8 &#39;--common-cmake-options=-G Ninja -DCMAKE_C_COMPILER:PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -DCMAKE_CXX_COMPILER:PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -DCMAKE_MAKE_PROGRAM=/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert/ninja-build/ninja&#39; --build-args=-j8 --cmark-cmake-options= &#39;--llvm-cmake-options=-DLLVM_ENABLE_ASSERTIONS=TRUE -DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64;PowerPC;SystemZ&#39; --swift-cmake-options= --build-stdlib-deployment-targets all --ninja-bin=/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert/ninja-build/ninja --skip-build-benchmarks --skip-build-foundation --skip-build-xctest --skip-build-lldb --skip-build-llbuild --skip-build-libdispatch --skip-build-swiftpm --skip-build-playgroundlogger --skip-build-playgroundsupport --build-swift-dynamic-stdlib --build-swift-dynamic-sdk-overlay --skip-build-ios-device --skip-build-ios-simulator --skip-build-tvos-device --skip-build-tvos-simulator --skip-build-watchos-device --skip-build-watchos-simulator --skip-build-android --skip-test-swift --skip-test-cmark --skip-test-lldb --skip-test-llbuild --skip-test-swiftpm --skip-test-xctest --skip-test-foundation --skip-test-libdispatch --skip-test-playgroundlogger --skip-test-playgroundsupport --skip-test-linux --skip-test-freebsd --skip-test-cygwin --skip-test-osx --skip-test-ios-host --skip-test-ios-simulator --skip-test-tvos-host --skip-test-tvos-simulator --skip-test-watchos-host --skip-test-watchos-simulator --skip-test-android-host --skip-test-benchmarks --skip-test-optimized --android-deploy-device-path /data/local/tmp --toolchain-prefix /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain --install-destdir=/Users/Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64 --llvm-lit-args=-sv<br>&gt; <br>&gt; error: unknown setting: cmark-cmake-options<br>&gt; <br>&gt; <br></p><p>Two more things to check.<br></p><p>1. Are you using a very recent version of cmake?  I’d suggest going with the latest one available (should be at least 3.6.x).<br></p><p>2. Blow away your lldb/llvm-build directory.  You may have a stale cmake setup.  We’ve had a few usage issues with cmake where our build isn’t properly handling modifications to the cmake files in a stable way.  The net result is you can get cmake ninja setups that get confused.<br></p><p>Otherwise, you may need to ping the swift-dev list, since this is a failure in the LLVM/clang/Swift build step as built with build-script from Swift.<br></p><p>All the same, let me know if you get further with any of these.<br></p><p>-Todd<br></p><p>&gt; <br>&gt; On Wed, Oct 5, 2016 at 1:58 PM, Todd Fiala &lt;tfiala at apple.com &lt;mailto:tfiala at apple.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Oct 5, 2016, at 1:50 PM, Todd Fiala &lt;tfiala at apple.com &lt;mailto:tfiala at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 5, 2016, at 1:41 PM, Rex Fenley via swift-lldb-dev &lt;swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hey swift lldb team!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tried building the LLDB target from within Xcode. However, I get the following error during compilation:<br>&gt;&gt;&gt; subprocess.CalledProcessError: Command &#39;[&#39;python&#39;, &#39;/Users/Rex/Documents/projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;, &#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39; returned non-zero exit status 1<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That message indicates that the LLVM/clang/Swift build portion of the Xcode-driven build failed.  There should be actual failure content from build-script somewhere above the ‘exit status 1’ portion.  You might need to go to your build log (the Report Navigator, right-most speech-bubble-like icon from the left pane of Xcode).  There should be a build log that details everything the Xcode build did, of which running the build-script is one stage.<br>&gt;&gt; <br>&gt;&gt; Just to verify, what Xcode scheme and/or configuration are you building?  It should be the ‘desktop’ scheme, which will default to the DebugClang (or maybe Debug) configuration.<br>&gt; <br>&gt; The other thing that might be the issue may be the state of the llvm, clang, swift and cmark repositories.  If your original check-out was via lldb, then it will automatically do a git clone of the relevant dependent projects for you.  However, it will not update them.  So, if you allowed the lldb build to sync those, then did a refresh of lldb much later, and didn’t manually update the llvm, clang, swift or cmark directory, you will have an out-of-sync composite source tree.<br>&gt; <br>&gt; For the Xcode-driven build, the source layout looks like:<br>&gt; lldb/<br>&gt; lldb/llvm<br>&gt; lldb/llvm/tools/clang<br>&gt; lldb/llvm/tools/cmark<br>&gt; lldb/llvm/tools/swift<br>&gt; <br>&gt; There will be symlinks in the lldb/ directory to the clang and swift directories.<br>&gt; <br>&gt; You’ll want to make sure you update all of those at roughly the same time.  That might be a good place to start if this sounds like it might be your scenario.<br>&gt;&gt;&gt; And much further up I see<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes to src/*.in.cc &lt;http://in.cc/&gt; will not affect your build.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; error: unknown setting: cmark-cmake-options<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How may I fix this/these issues to build and run lldb from Xcode?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks :)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US &lt;https://www.facebook.com/remindhq&gt;_______________________________________________<br>&gt;&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt;&gt; swift-lldb-dev at swift.org &lt;mailto:swift-lldb-dev at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev &lt;https://lists.swift.org/mailman/listinfo/swift-lldb-dev&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt; <br>&gt; <br>&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US &lt;https://www.facebook.com/remindhq&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/bbe007ee/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/94f42debb7aa6b1715d75346a588aad1?s=50"></div><header><strong>Building and running swift-lldb from Xcode not working :(</strong> from <string>Rex Fenley</string> &lt;rex at remind101.com&gt;<p>October  5, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;m using the most recent cmake. I also blew away the lldb directory and<br>tried to rebuild but still ended up with &quot;error: unknown setting:<br>cmark-cmake-options&quot; when building desktop :(<br></p><p>On Wed, Oct 5, 2016 at 2:48 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Oct 5, 2016, at 2:36 PM, Rex Fenley &lt;rex at remind101.com&gt; wrote:<br>&gt;<br>&gt; Hey Todd, thanks for the info!<br>&gt;<br>&gt; I was attempting to build from the LLDM scheme. The only errors were the<br>&gt; two I provided, I&#39;ll post more information at the bottom. When trying the<br>&gt; &quot;desktop&quot; scheme I get the following:<br>&gt;<br>&gt;<br>&gt; Okay - switch to the desktop scheme; otherwise, you’ll be missing some<br>&gt; components.  (That is not particularly well documented - the LLDB scheme is<br>&gt; literally for the LLDB.framework, but not everything).<br>&gt;<br>&gt; &quot;debugserver&quot; isn&#39;t code signed but requires entitlements. It is not<br>&gt; possible to add entitlements to a binary without signing it.<br>&gt;<br>&gt;<br>&gt; You have a couple options there.<br>&gt;<br>&gt; 1. If you follow the docs in lldb/docs/code-signing.txt, your debugserver<br>&gt; will be usable regardless of that message.<br>&gt;<br>&gt; 2. [Preferred] Alternatively, you can set the Xcode build variable<br>&gt; DEBUGSERVER_USE_FROM_SYSTEM=1, either via an xcodebuild command line, or by<br>&gt; setting it directly in your Xcode settings.  It’s not enough for it to be<br>&gt; an environment variable set.  If you go with this, the debugserver will be<br>&gt; copied from your Xcode into the built LLDB, which will then be an official<br>&gt; Apple-signed debugserver.  Unless you are changing debugserver, that is<br>&gt; generally the way to go.  A fair amount of the Swift CI runs in this<br>&gt; configuration.  (Although not everything, as we really do change<br>&gt; debugserver and want to test those changes.)<br>&gt;<br>&gt; The xcodebuild line with that set would be:<br>&gt; $ cd your/lldb/source/root<br>&gt; $ xcodebuild -scheme desktop DEBUGSERVER_USE_FROM_SYSTEM=1<br>&gt;<br>&gt; Let me know if that gets you further.<br>&gt;<br>&gt;<br>&gt; I don&#39;t know if syncing is the issue, I simply git cloned swift-lldb from<br>&gt; github and went to the tag &quot;*swift-3.0-RELEASE&quot;* and built.<br>&gt;<br>&gt; more info from LLDB scheme errors:<br>&gt;<br>&gt; bootstrapping ninja...<br>&gt;<br>&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt; to src/*.in.cc will not affect your build.<br>&gt;<br>&gt; wrote build.ninja.<br>&gt;<br>&gt; bootstrap complete.  rebuilding...<br>&gt;<br>&gt; + popd<br>&gt;<br>&gt; + env HOST_VARIABLE_macosx_x86_64__SWIFT_BENCHMARK_TARGETS=swift-benchmark-macosx-x86_64<br>&gt; HOST_VARIABLE_macosx_x86_64__SWIFT_RUN_BENCHMARK_TARGETS=<br>&gt; check-swift-benchmark-macosx-x86_64 &#39;HOST_VARIABLE_macosx_x86_64__SWIFT_SDKS=IOS<br>&gt; IOS_SIMULATOR OSX TVOS TVOS_SIMULATOR WATCHOS WATCHOS_SIMULATOR&#39;<br>&gt; HOST_VARIABLE_macosx_x86_64__SWIFT_STDLIB_TARGETS=swift-test-stdlib-macosx-x86_64<br>&gt; HOST_VARIABLE_macosx_x86_64__SWIFT_TEST_TARGETS= caffeinate<br>&gt; /Users/Rex/Documents/projects/swift-lldb/swift/utils/build-script-impl<br>&gt; --workspace /Users/Rex/Documents/projects/swift-lldb --build-dir<br>&gt; /Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-RelWithDebInfoAssert<br>&gt; --install-prefix /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr<br>&gt; --host-target macosx-x86_64 --stdlib-deployment-targets &#39;macosx-x86_64<br>&gt; iphonesimulator-i386 iphonesimulator-x86_64 appletvsimulator-x86_64<br>&gt; watchsimulator-i386 iphoneos-armv7 iphoneos-armv7s iphoneos-arm64<br>&gt; appletvos-arm64 watchos-armv7k&#39; --host-cc /Applications/Xcode.app/<br>&gt; Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang<br>&gt; --host-cxx /Applications/Xcode.app/Contents/Developer/Toolchains/<br>&gt; XcodeDefault.xctoolchain/usr/bin/clang++ --darwin-xcrun-toolchain default<br>&gt; --darwin-deployment-version-osx=10.9 --darwin-deployment-version-ios=7.0<br>&gt; --darwin-deployment-version-tvos=9.0 --darwin-deployment-version-watchos=2.0<br>&gt; --cmake /usr/local/bin/cmake --cmark-build-type RelWithDebInfo<br>&gt; --llvm-build-type RelWithDebInfo --swift-build-type RelWithDebInfo<br>&gt; --swift-stdlib-build-type RelWithDebInfo --lldb-build-type RelWithDebInfo<br>&gt; --foundation-build-type RelWithDebInfo --libdispatch-build-type<br>&gt; RelWithDebInfo --xctest-build-type RelWithDebInfo --swift-enable-assertions<br>&gt; true --swift-stdlib-enable-assertions true --swift-analyze-code-coverage<br>&gt; false --cmake-generator Ninja --build-jobs 8 &#39;--common-cmake-options=-G<br>&gt; Ninja -DCMAKE_C_COMPILER:PATH=/Applications/Xcode.app/<br>&gt; Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang<br>&gt; -DCMAKE_CXX_COMPILER:PATH=/Applications/Xcode.app/<br>&gt; Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++<br>&gt; -DCMAKE_MAKE_PROGRAM=/Users/Rex/Documents/projects/swift-<br>&gt; lldb/llvm-build/Ninja-RelWithDebInfoAssert/ninja-build/ninja&#39;<br>&gt; --build-args=-j8 --cmark-cmake-options= &#39;--llvm-cmake-options=-DLLVM_ENABLE_ASSERTIONS=TRUE<br>&gt; -DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64;PowerPC;SystemZ&#39;<br>&gt; --swift-cmake-options= --build-stdlib-deployment-targets all<br>&gt; --ninja-bin=/Users/Rex/Documents/projects/swift-lldb/llvm-build/Ninja-<br>&gt; RelWithDebInfoAssert/ninja-build/ninja --skip-build-benchmarks<br>&gt; --skip-build-foundation --skip-build-xctest --skip-build-lldb<br>&gt; --skip-build-llbuild --skip-build-libdispatch --skip-build-swiftpm<br>&gt; --skip-build-playgroundlogger --skip-build-playgroundsupport<br>&gt; --build-swift-dynamic-stdlib --build-swift-dynamic-sdk-overlay<br>&gt; --skip-build-ios-device --skip-build-ios-simulator --skip-build-tvos-device<br>&gt; --skip-build-tvos-simulator --skip-build-watchos-device<br>&gt; --skip-build-watchos-simulator --skip-build-android --skip-test-swift<br>&gt; --skip-test-cmark --skip-test-lldb --skip-test-llbuild --skip-test-swiftpm<br>&gt; --skip-test-xctest --skip-test-foundation --skip-test-libdispatch<br>&gt; --skip-test-playgroundlogger --skip-test-playgroundsupport<br>&gt; --skip-test-linux --skip-test-freebsd --skip-test-cygwin --skip-test-osx<br>&gt; --skip-test-ios-host --skip-test-ios-simulator --skip-test-tvos-host<br>&gt; --skip-test-tvos-simulator --skip-test-watchos-host<br>&gt; --skip-test-watchos-simulator --skip-test-android-host<br>&gt; --skip-test-benchmarks --skip-test-optimized --android-deploy-device-path<br>&gt; /data/local/tmp --toolchain-prefix /Applications/Xcode.app/<br>&gt; Contents/Developer/Toolchains/XcodeDefault.xctoolchain<br>&gt; --install-destdir=/Users/Rex/Documents/projects/swift-lldb/<br>&gt; llvm-build/ReleaseAssert/swift-macosx-x86_64 --llvm-lit-args=-sv<br>&gt;<br>&gt; error: unknown setting: cmark-cmake-options<br>&gt;<br>&gt;<br>&gt; Two more things to check.<br>&gt;<br>&gt; 1. Are you using a very recent version of cmake?  I’d suggest going with<br>&gt; the latest one available (should be at least 3.6.x).<br>&gt;<br>&gt; 2. Blow away your lldb/llvm-build directory.  You may have a stale cmake<br>&gt; setup.  We’ve had a few usage issues with cmake where our build isn’t<br>&gt; properly handling modifications to the cmake files in a stable way.  The<br>&gt; net result is you can get cmake ninja setups that get confused.<br>&gt;<br>&gt; Otherwise, you may need to ping the swift-dev list, since this is a<br>&gt; failure in the LLVM/clang/Swift build step as built with build-script from<br>&gt; Swift.<br>&gt;<br>&gt; All the same, let me know if you get further with any of these.<br>&gt;<br>&gt; -Todd<br>&gt;<br>&gt;<br>&gt; On Wed, Oct 5, 2016 at 1:58 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 5, 2016, at 1:50 PM, Todd Fiala &lt;tfiala at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Oct 5, 2016, at 1:41 PM, Rex Fenley via swift-lldb-dev &lt;<br>&gt;&gt; swift-lldb-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hey swift lldb team!<br>&gt;&gt;<br>&gt;&gt; I tried building the LLDB target from within Xcode. However, I get the<br>&gt;&gt; following error during compilation:<br>&gt;&gt;<br>&gt;&gt; subprocess.CalledProcessError: Command &#39;[&#39;python&#39;,<br>&gt;&gt; &#39;/Users/Rex/Documents/projects/swift-lldb/llvm/tools/swift/utils/build-script&#39;,<br>&gt;&gt; &#39;--preset=LLDB_Swift_ReleaseAssert&#39;, &#39;swift_install_destdir=/Users/<br>&gt;&gt; Rex/Documents/projects/swift-lldb/llvm-build/ReleaseAssert/swift-macosx-x86_64&#39;]&#39;<br>&gt;&gt; returned non-zero exit status 1<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; That message indicates that the LLVM/clang/Swift build portion of the<br>&gt;&gt; Xcode-driven build failed.  There should be actual failure content from<br>&gt;&gt; build-script somewhere above the ‘exit status 1’ portion.  You might need<br>&gt;&gt; to go to your build log (the Report Navigator, right-most<br>&gt;&gt; speech-bubble-like icon from the left pane of Xcode).  There should be a<br>&gt;&gt; build log that details everything the Xcode build did, of which running the<br>&gt;&gt; build-script is one stage.<br>&gt;&gt;<br>&gt;&gt; Just to verify, what Xcode scheme and/or configuration are you building?<br>&gt;&gt; It should be the ‘desktop’ scheme, which will default to the DebugClang (or<br>&gt;&gt; maybe Debug) configuration.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; The other thing that might be the issue may be the state of the llvm,<br>&gt;&gt; clang, swift and cmark repositories.  If your original check-out was via<br>&gt;&gt; lldb, then it will automatically do a git clone of the relevant dependent<br>&gt;&gt; projects for you.  However, it will not update them.  So, if you allowed<br>&gt;&gt; the lldb build to sync those, then did a refresh of lldb much later, and<br>&gt;&gt; didn’t manually update the llvm, clang, swift or cmark directory, you will<br>&gt;&gt; have an out-of-sync composite source tree.<br>&gt;&gt;<br>&gt;&gt; For the Xcode-driven build, the source layout looks like:<br>&gt;&gt; lldb/<br>&gt;&gt; lldb/llvm<br>&gt;&gt; lldb/llvm/tools/clang<br>&gt;&gt; lldb/llvm/tools/cmark<br>&gt;&gt; lldb/llvm/tools/swift<br>&gt;&gt;<br>&gt;&gt; There will be symlinks in the lldb/ directory to the clang and swift<br>&gt;&gt; directories.<br>&gt;&gt;<br>&gt;&gt; You’ll want to make sure you update all of those at roughly the same<br>&gt;&gt; time.  That might be a good place to start if this sounds like it might be<br>&gt;&gt; your scenario.<br>&gt;&gt;<br>&gt;&gt; And much further up I see<br>&gt;&gt;<br>&gt;&gt; warning: A compatible version of re2c (&gt;= 0.11.3) was not found; changes<br>&gt;&gt; to src/*.in.cc will not affect your build.<br>&gt;&gt;<br>&gt;&gt; and<br>&gt;&gt;<br>&gt;&gt; error: unknown setting: cmark-cmake-options<br>&gt;&gt;<br>&gt;&gt; How may I fix this/these issues to build and run lldb from Xcode?<br>&gt;&gt;<br>&gt;&gt; Thanks :)<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt;&gt;<br>&gt;&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;<br>&gt;&gt;  |  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&gt;&gt; &lt;https://www.facebook.com/remindhq&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-lldb-dev mailing list<br>&gt;&gt; swift-lldb-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-lldb-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Rex Fenley  |  IOS DEVELOPER<br>&gt;<br>&gt; Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;  |<br>&gt;  FOLLOW US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&gt; &lt;https://www.facebook.com/remindhq&gt;<br>&gt;<br>&gt;<br>&gt;<br></p><p><br>-- <br></p><p>Rex Fenley  |  IOS DEVELOPER<br></p><p>Remind.com &lt;https://www.remind.com/&gt; |  BLOG &lt;http://blog.remind.com/&gt;<br> |  FOLLOW<br>US &lt;https://twitter.com/remindhq&gt;  |  LIKE US<br>&lt;https://www.facebook.com/remindhq&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-lldb-dev/attachments/20161005/fc5c1566/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
