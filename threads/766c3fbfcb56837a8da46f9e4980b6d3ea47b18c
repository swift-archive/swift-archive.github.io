<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3f09471be1d1840497288f9219fabea1?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;matthew at daviesgeek.com&gt;<p>December  9, 2015 at 09:00:00pm</p></header><div class="content"><p>I am using the Swift build tool &amp; package manager. I&#39;m trying to figure out<br>how to instantiate a class from a string. For instance, in PHP I can do:<br></p><p>$instance = new $className<br></p><p>I can (in the iOS &amp; OS X runtimes) use &quot;NSClassFromString&quot;, but this is<br>unavailable in the Swift build tool. How can I (or can I?) get the same<br>functionality?<br></p><p><br></p><p>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | matthew at daviesgeek.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151209/766cb18c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8ae34e6aaf28c0e1fe929f36897d107e?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Harlan Haskins</string> &lt;harlan at harlanhaskins.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br></p><p>You might want to look into a better way of doing that you’re trying to do.<br></p><p>— Harlan<br></p><p>&gt; On Dec 10, 2015, at 12:42 AM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I am using the Swift build tool &amp; package manager. I&#39;m trying to figure out how to instantiate a class from a string. For instance, in PHP I can do:<br>&gt; <br>&gt; $instance = new $className<br>&gt; <br>&gt; I can (in the iOS &amp; OS X runtimes) use &quot;NSClassFromString&quot;, but this is unavailable in the Swift build tool. How can I (or can I?) get the same functionality?<br>&gt; <br>&gt; <br>&gt; <br>&gt; Matthew Davies<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | matthew at daviesgeek.com &lt;mailto:matthew at daviesgeek.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/ca25a100/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br></p><p>It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br></p><p>&gt; You might want to look into a better way of doing that you’re trying to do.<br></p><p>I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>	http://inessential.com/swiftdiary<br>	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br></p><p>The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/c2a6c979/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/26b79a145193358c02392e186dccaaf2?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Jan Neumüller</string> &lt;nasan at slayers.de&gt;<p>December 10, 2015 at 06:00:00pm</p></header><div class="content"><p>Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br></p><p>Jan<br></p><p>&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt; <br>&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt; <br>&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt; <br>&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt; 	http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt;<br>&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str &lt;http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str&gt;<br>&gt; <br>&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt; <br>&gt; —Jens<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/d56e76a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 09:00:00am</p></header><div class="content"><p>I don&#39;t really like the idea of a factory function, but unfortunately that<br>might be the only way to do it :( However, due to my specific use case, I<br>don&#39;t think a factory function will work. I&#39;m working on a framework that<br>will need to both instantiate the class from a string (or class type)<br>*and* call<br>methods dynamically on it. Which, I&#39;m not sure I can do in the build tools<br>that are provided in the open source package. Foundation hasn&#39;t been fully<br>implemented and is missing a lot of the methods that would allow this to<br>work.<br></p><p>@Jens thanks for that blog post. I&#39;ll have to make sure I check back to see<br>what his solution is for it.<br></p><p><br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>wrote:<br></p><p>&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt; don’t infect Swift with it.<br>&gt;<br>&gt; Jan<br>&gt;<br>&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt; classnames (it’s inherently unsafe anyway).<br>&gt;<br>&gt;<br>&gt; It’s not unsafe if you specify a base class/protocol that the loaded class<br>&gt; must conform to.<br>&gt;<br>&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;<br>&gt;<br>&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it.<br>&gt; This kind of dynamism is often the best tool for the job, and a lot of<br>&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt; at Omni]:<br>&gt; http://inessential.com/swiftdiary<br>&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;<br>&gt; The workaround I’d suggest is a factory function that contains a switch<br>&gt; statement that matches class names and returns newly initialized instances.<br>&gt;<br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/b0eb1093/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>Note that you can define a protocol which will allow your framework to instantiate the type, and to call methods on instances of that type. If you can structure your code in this fashion, it can be very elegant in that it doesn&#39;t require factory functions and it is  type safe.<br></p><p>For example:<br>--<br>struct GraphableDescription { }<br></p><p>protocol Graphable {<br>    /// Construct a graphable item from a description.<br>    init(description: GraphableDescription)<br></p><p>    func graph()<br>}<br></p><p>// Example framework method.<br>func graphItem(description: GraphableDescription, graphable: Graphable.Type) {<br>    // Instantiate the graphable.<br>    let item = graphable.init(description: description)<br></p><p>    // Graph it.<br>    item.graph()<br>}<br></p><p>// Example Graphable client.<br>struct Circle: Graphable {<br>    init(description: GraphableDescription) { }<br></p><p>    func graph() { }<br>}<br></p><p>// Example framework client.<br>func foo() {<br>    graphItem(GraphableDescription(), graphable: Circle.self)<br>}<br>--<br></p><p> - Daniel<br></p><p>&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I don&#39;t really like the idea of a factory function, but unfortunately that might be the only way to do it :( However, due to my specific use case, I don&#39;t think a factory function will work. I&#39;m working on a framework that will need to both instantiate the class from a string (or class type) and call methods dynamically on it. Which, I&#39;m not sure I can do in the build tools that are provided in the open source package. Foundation hasn&#39;t been fully implemented and is missing a lot of the methods that would allow this to work.<br>&gt; <br>&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to see what his solution is for it.<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; Matthew Davies<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br>&gt; <br>&gt; Jan<br>&gt; <br>&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt;&gt; <br>&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt;&gt; <br>&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;&gt; <br>&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt;&gt; 	http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt;<br>&gt;&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str &lt;http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str&gt;<br>&gt;&gt; <br>&gt;&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt;&gt; <br>&gt;&gt; —Jens<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/d88917c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>Ooh okay. I think that should work for my purposes. Thanks.<br></p><p>Somewhat related to this, how would I then call a method dynamically on an<br>instance of the class, after instantiating it?<br></p><p>---<br>class Graph {<br>  func call(method: String) {<br>    // Something goes here<br>  }<br></p><p>  func redraw() -&gt; String {<br>    return &quot;Redraws&quot;<br>  }<br>}<br></p><p>let inst = Graph()<br>inst.call(&quot;redraw&quot;)<br>---<br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; Note that you can define a protocol which will allow your framework to<br>&gt; instantiate the type, and to call methods on instances of that type. If you<br>&gt; can structure your code in this fashion, it can be very elegant in that it<br>&gt; doesn&#39;t require factory functions and it is  type safe.<br>&gt;<br>&gt; For example:<br>&gt; --<br>&gt; struct GraphableDescription { }<br>&gt;<br>&gt; protocol Graphable {<br>&gt;     /// Construct a graphable item from a description.<br>&gt;     init(description: GraphableDescription)<br>&gt;<br>&gt;     func graph()<br>&gt; }<br>&gt;<br>&gt; // Example framework method.<br>&gt; func graphItem(description: GraphableDescription, graphable:<br>&gt; Graphable.Type) {<br>&gt;     // Instantiate the graphable.<br>&gt;     let item = graphable.init(description: description)<br>&gt;<br>&gt;     // Graph it.<br>&gt;     item.graph()<br>&gt; }<br>&gt;<br>&gt; // Example Graphable client.<br>&gt; struct Circle: Graphable {<br>&gt;     init(description: GraphableDescription) { }<br>&gt;<br>&gt;     func graph() { }<br>&gt; }<br>&gt;<br>&gt; // Example framework client.<br>&gt; func foo() {<br>&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt; }<br>&gt; --<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; I don&#39;t really like the idea of a factory function, but unfortunately that<br>&gt; might be the only way to do it :( However, due to my specific use case, I<br>&gt; don&#39;t think a factory function will work. I&#39;m working on a framework that<br>&gt; will need to both instantiate the class from a string (or class type)<br>&gt; *and* call methods dynamically on it. Which, I&#39;m not sure I can do in the<br>&gt; build tools that are provided in the open source package. Foundation hasn&#39;t<br>&gt; been fully implemented and is missing a lot of the methods that would allow<br>&gt; this to work.<br>&gt;<br>&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to<br>&gt; see what his solution is for it.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; *Matthew Davies*<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt; daviesgeek.com<br>&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt;&gt; don’t infect Swift with it.<br>&gt;&gt;<br>&gt;&gt; Jan<br>&gt;&gt;<br>&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt;&gt; classnames (it’s inherently unsafe anyway).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded<br>&gt;&gt; class must conform to.<br>&gt;&gt;<br>&gt;&gt; You might want to look into a better way of doing that you’re trying to<br>&gt;&gt; do.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it.<br>&gt;&gt; This kind of dynamism is often the best tool for the job, and a lot of<br>&gt;&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt;&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt;&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt;&gt; at Omni]:<br>&gt;&gt; http://inessential.com/swiftdiary<br>&gt;&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;<br>&gt;&gt; The workaround I’d suggest is a factory function that contains a switch<br>&gt;&gt; statement that matches class names and returns newly initialized instances.<br>&gt;&gt;<br>&gt;&gt; —Jens<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/b9ccadeb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7452b650d9bd0dfeecb6b9830f0d892?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Dan Stenmark</string> &lt;daniel.j.stenmark at gmail.com&gt;<p>December 10, 2015 at 10:00:00am</p></header><div class="content"><p>NSSelectorFromString() is still available in Swift, and you should be able to use the result of that in performSelector, though I’m hesitant to support this approach as it flies in the face of the safety Swift tries to enforce.  I’m curious about your use case here; are you trying to create some kind of dynamic proxy for a remote object ala NSXPCConnection?<br></p><p>Dan<br></p><p>&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt; <br>&gt; Somewhat related to this, how would I then call a method dynamically on an instance of the class, after instantiating it?<br>&gt; <br>&gt; ---<br>&gt; class Graph {<br>&gt;   func call(method: String) {<br>&gt;     // Something goes here<br>&gt;   }<br>&gt; <br>&gt;   func redraw() -&gt; String {<br>&gt;     return &quot;Redraws&quot;<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let inst = Graph()<br>&gt; inst.call(&quot;redraw&quot;)<br>&gt; ---<br>&gt; <br>&gt; <br>&gt; Matthew Davies<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt; Note that you can define a protocol which will allow your framework to instantiate the type, and to call methods on instances of that type. If you can structure your code in this fashion, it can be very elegant in that it doesn&#39;t require factory functions and it is  type safe.<br>&gt; <br>&gt; For example:<br>&gt; --<br>&gt; struct GraphableDescription { }<br>&gt; <br>&gt; protocol Graphable {<br>&gt;     /// Construct a graphable item from a description.<br>&gt;     init(description: GraphableDescription)<br>&gt; <br>&gt;     func graph()<br>&gt; }<br>&gt; <br>&gt; // Example framework method.<br>&gt; func graphItem(description: GraphableDescription, graphable: Graphable.Type) {<br>&gt;     // Instantiate the graphable.<br>&gt;     let item = graphable.init(description: description)<br>&gt; <br>&gt;     // Graph it.<br>&gt;     item.graph()<br>&gt; }<br>&gt; <br>&gt; // Example Graphable client.<br>&gt; struct Circle: Graphable {<br>&gt;     init(description: GraphableDescription) { }<br>&gt; <br>&gt;     func graph() { }<br>&gt; }<br>&gt; <br>&gt; // Example framework client.<br>&gt; func foo() {<br>&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt; }<br>&gt; --<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately that might be the only way to do it :( However, due to my specific use case, I don&#39;t think a factory function will work. I&#39;m working on a framework that will need to both instantiate the class from a string (or class type) and call methods dynamically on it. Which, I&#39;m not sure I can do in the build tools that are provided in the open source package. Foundation hasn&#39;t been fully implemented and is missing a lot of the methods that would allow this to work.<br>&gt;&gt; <br>&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to see what his solution is for it.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Matthew Davies<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br>&gt;&gt; <br>&gt;&gt; Jan<br>&gt;&gt; <br>&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt;&gt;&gt; 	http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt;<br>&gt;&gt;&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str &lt;http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/3db54535/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 12:00:00pm</p></header><div class="content"><p>I&#39;m building a URL router in which I&#39;d like to pass a controller and a<br>method. I don&#39;t want to instantiate all the controllers up front and pass<br>the methods in as closures, nor do I want old controller instances still<br>kept around. If there&#39;s a better way, I&#39;m definitely open to any<br>suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;daniel.j.stenmark at gmail.com&gt;<br>wrote:<br></p><p>&gt; NSSelectorFromString() is still available in Swift, and you should be able<br>&gt; to use the result of that in performSelector, though I’m hesitant to<br>&gt; support this approach as it flies in the face of the safety Swift tries to<br>&gt; enforce.  I’m curious about your use case here; are you trying to create<br>&gt; some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;<br>&gt; Dan<br>&gt;<br>&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;<br>&gt; Somewhat related to this, how would I then call a method dynamically on an<br>&gt; instance of the class, after instantiating it?<br>&gt;<br>&gt; ---<br>&gt; class Graph {<br>&gt;   func call(method: String) {<br>&gt;     // Something goes here<br>&gt;   }<br>&gt;<br>&gt;   func redraw() -&gt; String {<br>&gt;     return &quot;Redraws&quot;<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; let inst = Graph()<br>&gt; inst.call(&quot;redraw&quot;)<br>&gt; ---<br>&gt;<br>&gt;<br>&gt; *Matthew Davies*<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt; daviesgeek.com<br>&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Note that you can define a protocol which will allow your framework to<br>&gt;&gt; instantiate the type, and to call methods on instances of that type. If you<br>&gt;&gt; can structure your code in this fashion, it can be very elegant in that it<br>&gt;&gt; doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;<br>&gt;&gt; For example:<br>&gt;&gt; --<br>&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;<br>&gt;&gt; protocol Graphable {<br>&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;<br>&gt;&gt;     func graph()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // Example framework method.<br>&gt;&gt; func graphItem(description: GraphableDescription, graphable:<br>&gt;&gt; Graphable.Type) {<br>&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;<br>&gt;&gt;     // Graph it.<br>&gt;&gt;     item.graph()<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // Example Graphable client.<br>&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;<br>&gt;&gt;     func graph() { }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; // Example framework client.<br>&gt;&gt; func foo() {<br>&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt; }<br>&gt;&gt; --<br>&gt;&gt;<br>&gt;&gt;  - Daniel<br>&gt;&gt;<br>&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately<br>&gt;&gt; that might be the only way to do it :( However, due to my specific use<br>&gt;&gt; case, I don&#39;t think a factory function will work. I&#39;m working on a<br>&gt;&gt; framework that will need to both instantiate the class from a string (or<br>&gt;&gt; class type) *and* call methods dynamically on it. Which, I&#39;m not sure I<br>&gt;&gt; can do in the build tools that are provided in the open source package.<br>&gt;&gt; Foundation hasn&#39;t been fully implemented and is missing a lot of the<br>&gt;&gt; methods that would allow this to work.<br>&gt;&gt;<br>&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to<br>&gt;&gt; see what his solution is for it.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; *Matthew Davies*<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt; daviesgeek.com<br>&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt;&gt;&gt; don’t infect Swift with it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt;&gt;&gt; classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded<br>&gt;&gt;&gt; class must conform to.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to<br>&gt;&gt;&gt; do.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it.<br>&gt;&gt;&gt; This kind of dynamism is often the best tool for the job, and a lot of<br>&gt;&gt;&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt;&gt;&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt;&gt;&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt;&gt;&gt; at Omni]:<br>&gt;&gt;&gt; http://inessential.com/swiftdiary<br>&gt;&gt;&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch<br>&gt;&gt;&gt; statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/4f7d0cfa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>December 10, 2015 at 12:00:00pm</p></header><div class="content"><p>You have the protocol conformance, why can’t you simply call the method directly?<br></p><p>&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a method. I don&#39;t want to instantiate all the controllers up front and pass the methods in as closures, nor do I want old controller instances still kept around. If there&#39;s a better way, I&#39;m definitely open to any suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt; <br>&gt; <br>&gt; Matthew Davies<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;daniel.j.stenmark at gmail.com &lt;mailto:daniel.j.stenmark at gmail.com&gt;&gt; wrote:<br>&gt; NSSelectorFromString() is still available in Swift, and you should be able to use the result of that in performSelector, though I’m hesitant to support this approach as it flies in the face of the safety Swift tries to enforce.  I’m curious about your use case here; are you trying to create some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt; <br>&gt; Dan<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt; <br>&gt;&gt; Somewhat related to this, how would I then call a method dynamically on an instance of the class, after instantiating it?<br>&gt;&gt; <br>&gt;&gt; ---<br>&gt;&gt; class Graph {<br>&gt;&gt;   func call(method: String) {<br>&gt;&gt;     // Something goes here<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let inst = Graph()<br>&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt; ---<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Matthew Davies<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; Note that you can define a protocol which will allow your framework to instantiate the type, and to call methods on instances of that type. If you can structure your code in this fashion, it can be very elegant in that it doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt; <br>&gt;&gt; For example:<br>&gt;&gt; --<br>&gt;&gt; struct GraphableDescription { }<br>&gt;&gt; <br>&gt;&gt; protocol Graphable {<br>&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt; <br>&gt;&gt;     func graph()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Example framework method.<br>&gt;&gt; func graphItem(description: GraphableDescription, graphable: Graphable.Type) {<br>&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt; <br>&gt;&gt;     // Graph it.<br>&gt;&gt;     item.graph()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Example Graphable client.<br>&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt; <br>&gt;&gt;     func graph() { }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // Example framework client.<br>&gt;&gt; func foo() {<br>&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt; }<br>&gt;&gt; --<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately that might be the only way to do it :( However, due to my specific use case, I don&#39;t think a factory function will work. I&#39;m working on a framework that will need to both instantiate the class from a string (or class type) and call methods dynamically on it. Which, I&#39;m not sure I can do in the build tools that are provided in the open source package. Foundation hasn&#39;t been fully implemented and is missing a lot of the methods that would allow this to work.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to see what his solution is for it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Matthew Davies<br>&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Jan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt;&gt;&gt;&gt; 	http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt;<br>&gt;&gt;&gt;&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str &lt;http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/669936a8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 01:00:00pm</p></header><div class="content"><p>Yes I have the protoco<br>​l​<br>, but the problem is that I would want to be able to call a method on the<br>class that isn&#39;t necessarily defined in the protocol.<br></p><p>I.e., I would like to be able to do something like this<br>​:​<br></p><p><br></p><p>​---​<br></p><p>protocol Controller {<br>  init()<br>}<br></p><p>class MainController : Controller {<br></p><p>  required init() {}<br></p><p>  func index() -&gt; String {<br>    return &quot;This is the index&quot;<br>  }<br>}<br></p><p>class Router {<br>  func get(url: String, ctrl: Controller.Type, method: String) {<br>    let inst = ctrl.init()<br>*    // Run the method that is passed in here*<br>  }<br>}<br></p><p>let router = Router()<br>router.get(&quot;/&quot;, ctrl: MainController.self, method: &quot;index&quot;)<br>​---​<br></p><p>Does that make sense as to what I&#39;m trying to accomplish? As I said, I&#39;m<br>open to suggestions. I&#39;m relatively new to Swift&#39;s design patterns, so I<br>may be thinking about this in completely the wrong way…<br></p><p><br>On Thu, Dec 10, 2015 at 12:48 David Owens II &lt;david at owensd.io&gt; wrote:<br></p><p>&gt; You have the protocol conformance, why can’t you simply call the method<br>&gt; directly?<br>&gt;<br>&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a<br>&gt; method. I don&#39;t want to instantiate all the controllers up front and pass<br>&gt; the methods in as closures, nor do I want old controller instances still<br>&gt; kept around. If there&#39;s a better way, I&#39;m definitely open to any<br>&gt; suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt;<br>&gt;<br>&gt; *Matthew Davies*<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt; daviesgeek.com<br>&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;<br>&gt; daniel.j.stenmark at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; NSSelectorFromString() is still available in Swift, and you should be<br>&gt;&gt; able to use the result of that in performSelector, though I’m hesitant to<br>&gt;&gt; support this approach as it flies in the face of the safety Swift tries to<br>&gt;&gt; enforce.  I’m curious about your use case here; are you trying to create<br>&gt;&gt; some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;&gt;<br>&gt;&gt; Dan<br>&gt;&gt;<br>&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt;<br>&gt;&gt; Somewhat related to this, how would I then call a method dynamically on<br>&gt;&gt; an instance of the class, after instantiating it?<br>&gt;&gt;<br>&gt;&gt; ---<br>&gt;&gt; class Graph {<br>&gt;&gt;   func call(method: String) {<br>&gt;&gt;     // Something goes here<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; let inst = Graph()<br>&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt; ---<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; *Matthew Davies*<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt; daviesgeek.com<br>&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt;&gt;  wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Note that you can define a protocol which will allow your framework to<br>&gt;&gt;&gt; instantiate the type, and to call methods on instances of that type. If you<br>&gt;&gt;&gt; can structure your code in this fashion, it can be very elegant in that it<br>&gt;&gt;&gt; doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; protocol Graphable {<br>&gt;&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example framework method.<br>&gt;&gt;&gt; func graphItem(description: GraphableDescription, graphable:<br>&gt;&gt;&gt; Graphable.Type) {<br>&gt;&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Graph it.<br>&gt;&gt;&gt;     item.graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example Graphable client.<br>&gt;&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func graph() { }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example framework client.<br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately<br>&gt;&gt;&gt; that might be the only way to do it :( However, due to my specific use<br>&gt;&gt;&gt; case, I don&#39;t think a factory function will work. I&#39;m working on a<br>&gt;&gt;&gt; framework that will need to both instantiate the class from a string (or<br>&gt;&gt;&gt; class type) *and* call methods dynamically on it. Which, I&#39;m not sure I<br>&gt;&gt;&gt; can do in the build tools that are provided in the open source package.<br>&gt;&gt;&gt; Foundation hasn&#39;t been fully implemented and is missing a lot of the<br>&gt;&gt;&gt; methods that would allow this to work.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to<br>&gt;&gt;&gt; see what his solution is for it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Matthew Davies*<br>&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt;&gt; daviesgeek.com<br>&gt;&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt;&gt;   &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt;&gt;&gt;&gt; don’t infect Swift with it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt;&gt;&gt;&gt; classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded<br>&gt;&gt;&gt;&gt; class must conform to.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to<br>&gt;&gt;&gt;&gt; do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it.<br>&gt;&gt;&gt;&gt; This kind of dynamism is often the best tool for the job, and a lot of<br>&gt;&gt;&gt;&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt;&gt;&gt;&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt;&gt;&gt;&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt;&gt;&gt;&gt; at Omni]:<br>&gt;&gt;&gt;&gt; http://inessential.com/swiftdiary<br>&gt;&gt;&gt;&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch<br>&gt;&gt;&gt;&gt; statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/6aaa756b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 1:01 PM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt;   func get(url: String, ctrl: Controller.Type, method: String) {<br>&gt;     let inst = ctrl.init()<br>&gt;     // Run the method that is passed in here<br>&gt;   }<br></p><p>Since HTTP only has a handful of standard methods/verbs, you can just define a Swift method for each one in your protocol (get, put, delete, etc.) and use a switch statement on the `method` parameter to dispatch to the right one.<br></p><p>This is a case where you wouldn’t want to use dynamic lookup anyway, since the method name you’d be looking up and calling would be chosen by the remote client. That’s the sort of thing that’s just begging to be exploited (I.e. someone opens a TCP socket and sends “getWithoutCheckingAuth /admin/secretdata.txt HTTP/1.1”…)<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/de1bdf2f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>I could do that, and that would work, but I figured out a way of doing<br>this.<br></p><p>import Foundation<br></p><p>protocol Controller {<br>init()<br>}<br></p><p>class Main : Controller {<br>required init() {}<br>func index() -&gt; String {<br>return &quot;INDEX&quot;<br>}<br>}<br></p><p>let inst = Main()<br>let method = Main.index<br>method(inst)<br></p><p>func run&lt;T&gt;(ctrl: Controller.Type, method: (T -&gt; () -&gt; String)) {<br>let inst = ctrl.init()<br>let handler = method(inst as! T)<br>print(handler())<br>}<br></p><p>I&#39;ve posted the source code for the router here:<br>https://github.com/daviesgeek/swiftrouter<br>It&#39;s very much incomplete, so keep that in mind when you&#39;re looking at it.<br>The relevant code is here:<br>https://github.com/daviesgeek/swiftrouter/blob/master/Sources/Router.swift#L19<br></p><p>Thanks so much for everyone&#39;s help!<br></p><p><br></p><p>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 3:25 PM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Dec 10, 2015, at 1:01 PM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt;   func get(url: String, ctrl: Controller.Type, method: String) {<br>&gt;     let inst = ctrl.init()<br>&gt; *    // Run the method that is passed in here*<br>&gt;   }<br>&gt;<br>&gt;<br>&gt; Since HTTP only has a handful of standard methods/verbs, you can just<br>&gt; define a Swift method for each one in your protocol (get, put, delete,<br>&gt; etc.) and use a switch statement on the `method` parameter to dispatch to<br>&gt; the right one.<br>&gt;<br>&gt; This is a case where you wouldn’t want to use dynamic lookup anyway, since<br>&gt; the method name you’d be looking up and calling would be chosen by the<br>&gt; remote client. That’s the sort of thing that’s just begging to be exploited<br>&gt; (I.e. someone opens a TCP socket and sends “getWithoutCheckingAuth<br>&gt; /admin/secretdata.txt HTTP/1.1”…)<br>&gt;<br>&gt; —Jens<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/40d4ad49/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>&gt; On Dec 10, 2015, at 1:01 PM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes I have the protoco​l​, but the problem is that I would want to be able to call a method on the class that isn&#39;t necessarily defined in the protocol. <br></p><p>You should only call methods that are defined in the protocol, and you should extend the protocol as necessary. You can always have instances conform to additional protocols and use conditional casts, if necessary.<br></p><p>The value of this approach is that it is statically type safe, and users of your framework can easily tell what methods they need to implement to work with it.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; I.e., I would like to be able to do something like this​:​<br>&gt; <br>&gt; <br>&gt; ​---​<br>&gt; <br>&gt; protocol Controller {<br>&gt;   init()<br>&gt; }<br>&gt; <br>&gt; class MainController : Controller {<br>&gt; <br>&gt;   required init() {}<br>&gt; <br>&gt;   func index() -&gt; String {<br>&gt;     return &quot;This is the index&quot;<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; class Router {<br>&gt;   func get(url: String, ctrl: Controller.Type, method: String) {<br>&gt;     let inst = ctrl.init()<br>&gt;     // Run the method that is passed in here<br>&gt;   }<br>&gt; }<br>&gt; <br>&gt; let router = Router()<br>&gt; router.get(&quot;/&quot;, ctrl: MainController.self, method: &quot;index&quot;)<br>&gt; ​---​<br>&gt; <br>&gt; Does that make sense as to what I&#39;m trying to accomplish? As I said, I&#39;m open to suggestions. I&#39;m relatively new to Swift&#39;s design patterns, so I may be thinking about this in completely the wrong way…<br>&gt; <br>&gt; <br>&gt; On Thu, Dec 10, 2015 at 12:48 David Owens II &lt;david at owensd.io &lt;mailto:david at owensd.io&gt;&gt; wrote:<br>&gt; You have the protocol conformance, why can’t you simply call the method directly?<br>&gt; <br>&gt;&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a method. I don&#39;t want to instantiate all the controllers up front and pass the methods in as closures, nor do I want old controller instances still kept around. If there&#39;s a better way, I&#39;m definitely open to any suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Matthew Davies<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;daniel.j.stenmark at gmail.com &lt;mailto:daniel.j.stenmark at gmail.com&gt;&gt; wrote:<br>&gt;&gt; NSSelectorFromString() is still available in Swift, and you should be able to use the result of that in performSelector, though I’m hesitant to support this approach as it flies in the face of the safety Swift tries to enforce.  I’m curious about your use case here; are you trying to create some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;&gt; <br>&gt;&gt; Dan<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Somewhat related to this, how would I then call a method dynamically on an instance of the class, after instantiating it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; class Graph {<br>&gt;&gt;&gt;   func call(method: String) {<br>&gt;&gt;&gt;     // Something goes here<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let inst = Graph()<br>&gt;&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Matthew Davies<br>&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Note that you can define a protocol which will allow your framework to instantiate the type, and to call methods on instances of that type. If you can structure your code in this fashion, it can be very elegant in that it doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; protocol Graphable {<br>&gt;&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Example framework method.<br>&gt;&gt;&gt; func graphItem(description: GraphableDescription, graphable: Graphable.Type) {<br>&gt;&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // Graph it.<br>&gt;&gt;&gt;     item.graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Example Graphable client.<br>&gt;&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     func graph() { }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Example framework client.<br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately that might be the only way to do it :( However, due to my specific use case, I don&#39;t think a factory function will work. I&#39;m working on a framework that will need to both instantiate the class from a string (or class type) and call methods dynamically on it. Which, I&#39;m not sure I can do in the build tools that are provided in the open source package. Foundation hasn&#39;t been fully implemented and is missing a lot of the methods that would allow this to work.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to see what his solution is for it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Matthew Davies<br>&gt;&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt;&gt; 209-225-3246 &lt;tel:209-225.3246&gt; | 209-202-3284 &lt;tel:209-202-3284&gt; | daviesgeek at gmail.com &lt;mailto:daviesgeek at gmail.com&gt; | daviesgeek.com &lt;https://daviesgeek.com/&gt;<br>&gt;&gt;&gt;&gt;  &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt;&gt;&gt;&gt;&gt; 	http://inessential.com/swiftdiary &lt;http://inessential.com/swiftdiary&gt;<br>&gt;&gt;&gt;&gt;&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str &lt;http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/92e7ece8/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 03:00:00pm</p></header><div class="content"><p>You&#39;re right. I should be using a class instead…<br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 3:47 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Dec 10, 2015, at 1:01 PM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; Yes I have the protoco<br>&gt; ​l​<br>&gt; , but the problem is that I would want to be able to call a method on the<br>&gt; class that isn&#39;t necessarily defined in the protocol.<br>&gt;<br>&gt;<br>&gt; You should only call methods that are defined in the protocol, and you<br>&gt; should extend the protocol as necessary. You can always have instances<br>&gt; conform to additional protocols and use conditional casts, if necessary.<br>&gt;<br>&gt; The value of this approach is that it is statically type safe, and users<br>&gt; of your framework can easily tell what methods they need to implement to<br>&gt; work with it.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt;<br>&gt; I.e., I would like to be able to do something like this<br>&gt; ​:​<br>&gt;<br>&gt;<br>&gt;<br>&gt; ​---​<br>&gt;<br>&gt; protocol Controller {<br>&gt;   init()<br>&gt; }<br>&gt;<br>&gt; class MainController : Controller {<br>&gt;<br>&gt;   required init() {}<br>&gt;<br>&gt;   func index() -&gt; String {<br>&gt;     return &quot;This is the index&quot;<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; class Router {<br>&gt;   func get(url: String, ctrl: Controller.Type, method: String) {<br>&gt;     let inst = ctrl.init()<br>&gt; *    // Run the method that is passed in here*<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; let router = Router()<br>&gt; router.get(&quot;/&quot;, ctrl: MainController.self, method: &quot;index&quot;)<br>&gt; ​---​<br>&gt;<br>&gt; Does that make sense as to what I&#39;m trying to accomplish? As I said, I&#39;m<br>&gt; open to suggestions. I&#39;m relatively new to Swift&#39;s design patterns, so I<br>&gt; may be thinking about this in completely the wrong way…<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 12:48 David Owens II &lt;david at owensd.io&gt; wrote:<br>&gt;<br>&gt;&gt; You have the protocol conformance, why can’t you simply call the method<br>&gt;&gt; directly?<br>&gt;&gt;<br>&gt;&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a<br>&gt;&gt; method. I don&#39;t want to instantiate all the controllers up front and pass<br>&gt;&gt; the methods in as closures, nor do I want old controller instances still<br>&gt;&gt; kept around. If there&#39;s a better way, I&#39;m definitely open to any<br>&gt;&gt; suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; *Matthew Davies*<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt; daviesgeek.com<br>&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;<br>&gt;&gt; daniel.j.stenmark at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; NSSelectorFromString() is still available in Swift, and you should be<br>&gt;&gt;&gt; able to use the result of that in performSelector, though I’m hesitant to<br>&gt;&gt;&gt; support this approach as it flies in the face of the safety Swift tries to<br>&gt;&gt;&gt; enforce.  I’m curious about your use case here; are you trying to create<br>&gt;&gt;&gt; some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Dan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Somewhat related to this, how would I then call a method dynamically on<br>&gt;&gt;&gt; an instance of the class, after instantiating it?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; class Graph {<br>&gt;&gt;&gt;   func call(method: String) {<br>&gt;&gt;&gt;     // Something goes here<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; let inst = Graph()<br>&gt;&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Matthew Davies*<br>&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt;&gt; daviesgeek.com<br>&gt;&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt;&gt;   &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com<br>&gt;&gt;&gt; &gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Note that you can define a protocol which will allow your framework to<br>&gt;&gt;&gt;&gt; instantiate the type, and to call methods on instances of that type. If you<br>&gt;&gt;&gt;&gt; can structure your code in this fashion, it can be very elegant in that it<br>&gt;&gt;&gt;&gt; doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; protocol Graphable {<br>&gt;&gt;&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     func graph()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; // Example framework method.<br>&gt;&gt;&gt;&gt; func graphItem(description: GraphableDescription, graphable:<br>&gt;&gt;&gt;&gt; Graphable.Type) {<br>&gt;&gt;&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     // Graph it.<br>&gt;&gt;&gt;&gt;     item.graph()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; // Example Graphable client.<br>&gt;&gt;&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     func graph() { }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; // Example framework client.<br>&gt;&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately<br>&gt;&gt;&gt;&gt; that might be the only way to do it :( However, due to my specific use<br>&gt;&gt;&gt;&gt; case, I don&#39;t think a factory function will work. I&#39;m working on a<br>&gt;&gt;&gt;&gt; framework that will need to both instantiate the class from a string (or<br>&gt;&gt;&gt;&gt; class type) *and* call methods dynamically on it. Which, I&#39;m not sure<br>&gt;&gt;&gt;&gt; I can do in the build tools that are provided in the open source package.<br>&gt;&gt;&gt;&gt; Foundation hasn&#39;t been fully implemented and is missing a lot of the<br>&gt;&gt;&gt;&gt; methods that would allow this to work.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to<br>&gt;&gt;&gt;&gt; see what his solution is for it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; *Matthew Davies*<br>&gt;&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt;&gt;&gt; daviesgeek.com<br>&gt;&gt;&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;<br>&gt;&gt;&gt;&gt; &lt;http://us.linkedin.com/in/daviesgeek&gt;  &lt;http://twitter.com/daviesgeek&gt;<br>&gt;&gt;&gt;&gt;   &lt;http://daviesgeek.com/feed.xml&gt;   &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt;&gt;&gt;&gt;&gt; don’t infect Swift with it.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt;&gt;&gt;&gt;&gt; classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded<br>&gt;&gt;&gt;&gt;&gt; class must conform to.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying<br>&gt;&gt;&gt;&gt;&gt; to do.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase<br>&gt;&gt;&gt;&gt;&gt; it. This kind of dynamism is often the best tool for the job, and a lot of<br>&gt;&gt;&gt;&gt;&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt;&gt;&gt;&gt;&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt;&gt;&gt;&gt;&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt;&gt;&gt;&gt;&gt; at Omni]:<br>&gt;&gt;&gt;&gt;&gt; http://inessential.com/swiftdiary<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a<br>&gt;&gt;&gt;&gt;&gt; switch statement that matches class names and returns newly initialized<br>&gt;&gt;&gt;&gt;&gt; instances.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/287f3fbc/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 10, 2015 at 01:00:00pm</p></header><div class="content"><p>For URL routing, I would currently suggest generating code at compile time. Someday you might be able to replace this with a macro-based DSL, but for now, I don&#39;t see a better option. <br></p><p>On the bright side, this does mean you&#39;ll have actual machine code doing your routing, which might be faster than a more dynamic system. <br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a method. I don&#39;t want to instantiate all the controllers up front and pass the methods in as closures, nor do I want old controller instances still kept around. If there&#39;s a better way, I&#39;m definitely open to any suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt; <br>&gt; <br>&gt; Matthew Davies<br>&gt; Junior Developer, GeoStrategies<br>&gt; Director of Photography, OffBlock Films<br>&gt; 209-225-3246 | 209-202-3284 | daviesgeek at gmail.com | daviesgeek.com<br>&gt;      <br>&gt; <br>&gt; <br>&gt;&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;daniel.j.stenmark at gmail.com&gt; wrote:<br>&gt;&gt; NSSelectorFromString() is still available in Swift, and you should be able to use the result of that in performSelector, though I’m hesitant to support this approach as it flies in the face of the safety Swift tries to enforce.  I’m curious about your use case here; are you trying to create some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;&gt; <br>&gt;&gt; Dan<br>&gt;&gt; <br>&gt;&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Somewhat related to this, how would I then call a method dynamically on an instance of the class, after instantiating it?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; class Graph {<br>&gt;&gt;&gt;   func call(method: String) {<br>&gt;&gt;&gt;     // Something goes here<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;&gt;   }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let inst = Graph()<br>&gt;&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt;&gt; ---<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Matthew Davies<br>&gt;&gt;&gt; Junior Developer, GeoStrategies<br>&gt;&gt;&gt; Director of Photography, OffBlock Films<br>&gt;&gt;&gt; 209-225-3246 | 209-202-3284 | daviesgeek at gmail.com | daviesgeek.com<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt;&gt;&gt;&gt; Note that you can define a protocol which will allow your framework to instantiate the type, and to call methods on instances of that type. If you can structure your code in this fashion, it can be very elegant in that it doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; protocol Graphable {<br>&gt;&gt;&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func graph()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Example framework method.<br>&gt;&gt;&gt;&gt; func graphItem(description: GraphableDescription, graphable: Graphable.Type) {<br>&gt;&gt;&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // Graph it.<br>&gt;&gt;&gt;&gt;     item.graph()<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Example Graphable client.<br>&gt;&gt;&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     func graph() { }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Example framework client.<br>&gt;&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately that might be the only way to do it :( However, due to my specific use case, I don&#39;t think a factory function will work. I&#39;m working on a framework that will need to both instantiate the class from a string (or class type) and call methods dynamically on it. Which, I&#39;m not sure I can do in the build tools that are provided in the open source package. Foundation hasn&#39;t been fully implemented and is missing a lot of the methods that would allow this to work.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to see what his solution is for it.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Matthew Davies<br>&gt;&gt;&gt;&gt;&gt; Junior Developer, GeoStrategies<br>&gt;&gt;&gt;&gt;&gt; Director of Photography, OffBlock Films<br>&gt;&gt;&gt;&gt;&gt; 209-225-3246 | 209-202-3284 | daviesgeek at gmail.com | daviesgeek.com<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java - don’t infect Swift with it.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded class must conform to.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to do.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it. This kind of dynamism is often the best tool for the job, and a lot of Cocoa developers are frustrated by its absence in Swift. For example, there’s a series of blog posts from earlier this year by the highly respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently at Omni]:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	http://inessential.com/swiftdiary<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/6a214c58/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 09:00:00pm</p></header><div class="content"><p>Can you clarify a bit on that? So, what you&#39;re saying is to generate<br>routing code based off the DSL router I&#39;ve written?<br>On Thu, Dec 10, 2015 at 13:52 Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; For URL routing, I would currently suggest generating code at compile<br>&gt; time. Someday you might be able to replace this with a macro-based DSL, but<br>&gt; for now, I don&#39;t see a better option.<br>&gt;<br>&gt; On the bright side, this does mean you&#39;ll have actual machine code doing<br>&gt; your routing, which might be faster than a more dynamic system.<br>&gt;<br>&gt; Sent from my iPad<br>&gt;<br>&gt; On Dec 10, 2015, at 12:22 PM, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a<br>&gt; method. I don&#39;t want to instantiate all the controllers up front and pass<br>&gt; the methods in as closures, nor do I want old controller instances still<br>&gt; kept around. If there&#39;s a better way, I&#39;m definitely open to any<br>&gt; suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt;<br>&gt;<br>&gt; *Matthew Davies*<br>&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt; daviesgeek.com<br>&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Dec 10, 2015 at 10:47 AM, Dan Stenmark &lt;<br>&gt; daniel.j.stenmark at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; NSSelectorFromString() is still available in Swift, and you should be<br>&gt;&gt; able to use the result of that in performSelector, though I’m hesitant to<br>&gt;&gt; support this approach as it flies in the face of the safety Swift tries to<br>&gt;&gt; enforce.  I’m curious about your use case here; are you trying to create<br>&gt;&gt; some kind of dynamic proxy for a remote object ala NSXPCConnection?<br>&gt;&gt;<br>&gt;&gt; Dan<br>&gt;&gt;<br>&gt;&gt; On Dec 10, 2015, at 10:33 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Ooh okay. I think that should work for my purposes. Thanks.<br>&gt;&gt;<br>&gt;&gt; Somewhat related to this, how would I then call a method dynamically on<br>&gt;&gt; an instance of the class, after instantiating it?<br>&gt;&gt;<br>&gt;&gt; ---<br>&gt;&gt; class Graph {<br>&gt;&gt;   func call(method: String) {<br>&gt;&gt;     // Something goes here<br>&gt;&gt;   }<br>&gt;&gt;<br>&gt;&gt;   func redraw() -&gt; String {<br>&gt;&gt;     return &quot;Redraws&quot;<br>&gt;&gt;   }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; let inst = Graph()<br>&gt;&gt; inst.call(&quot;redraw&quot;)<br>&gt;&gt; ---<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; *Matthew Davies*<br>&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt; daviesgeek.com<br>&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt; &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Dec 10, 2015 at 10:18 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt;&gt;  wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Note that you can define a protocol which will allow your framework to<br>&gt;&gt;&gt; instantiate the type, and to call methods on instances of that type. If you<br>&gt;&gt;&gt; can structure your code in this fashion, it can be very elegant in that it<br>&gt;&gt;&gt; doesn&#39;t require factory functions and it is  type safe.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; struct GraphableDescription { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; protocol Graphable {<br>&gt;&gt;&gt;     /// Construct a graphable item from a description.<br>&gt;&gt;&gt;     init(description: GraphableDescription)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example framework method.<br>&gt;&gt;&gt; func graphItem(description: GraphableDescription, graphable:<br>&gt;&gt;&gt; Graphable.Type) {<br>&gt;&gt;&gt;     // Instantiate the graphable.<br>&gt;&gt;&gt;     let item = graphable.init(description: description)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     // Graph it.<br>&gt;&gt;&gt;     item.graph()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example Graphable client.<br>&gt;&gt;&gt; struct Circle: Graphable {<br>&gt;&gt;&gt;     init(description: GraphableDescription) { }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     func graph() { }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; // Example framework client.<br>&gt;&gt;&gt; func foo() {<br>&gt;&gt;&gt;     graphItem(GraphableDescription(), graphable: Circle.self)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Dec 10, 2015, at 9:59 AM, Matthew Davies via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t really like the idea of a factory function, but unfortunately<br>&gt;&gt;&gt; that might be the only way to do it :( However, due to my specific use<br>&gt;&gt;&gt; case, I don&#39;t think a factory function will work. I&#39;m working on a<br>&gt;&gt;&gt; framework that will need to both instantiate the class from a string (or<br>&gt;&gt;&gt; class type) *and* call methods dynamically on it. Which, I&#39;m not sure I<br>&gt;&gt;&gt; can do in the build tools that are provided in the open source package.<br>&gt;&gt;&gt; Foundation hasn&#39;t been fully implemented and is missing a lot of the<br>&gt;&gt;&gt; methods that would allow this to work.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; @Jens thanks for that blog post. I&#39;ll have to make sure I check back to<br>&gt;&gt;&gt; see what his solution is for it.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; *Matthew Davies*<br>&gt;&gt;&gt; Junior Developer, GeoStrategies &lt;http://geostrategies.com/&gt;<br>&gt;&gt;&gt; Director of Photography, OffBlock Films &lt;http://offblockfilms.com/&gt;<br>&gt;&gt;&gt; 209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>&gt;&gt;&gt; daviesgeek.com<br>&gt;&gt;&gt; &lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&gt;&gt;&gt;   &lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&gt;&gt;&gt; &lt;http://github.com/daviesgeek&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Dec 10, 2015 at 9:30 AM, Jan Neumüller &lt;swift-users at swift.org&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Please no factory madness in Swift. This stuff is bad enough in Java -<br>&gt;&gt;&gt;&gt; don’t infect Swift with it.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Jan<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 10.12.2015, at 18:23, Jens Alfke via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Dec 10, 2015, at 7:26 AM, Harlan Haskins via swift-users &lt;<br>&gt;&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; IIRC this isn’t possible because there’s no Runtime to query for<br>&gt;&gt;&gt;&gt; classnames (it’s inherently unsafe anyway).<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It’s not unsafe if you specify a base class/protocol that the loaded<br>&gt;&gt;&gt;&gt; class must conform to.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; You might want to look into a better way of doing that you’re trying to<br>&gt;&gt;&gt;&gt; do.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I disagree with “a better way” — “a workaround” is how I’d rephrase it.<br>&gt;&gt;&gt;&gt; This kind of dynamism is often the best tool for the job, and a lot of<br>&gt;&gt;&gt;&gt; Cocoa developers are frustrated by its absence in Swift. For example,<br>&gt;&gt;&gt;&gt; there’s a series of blog posts from earlier this year by the highly<br>&gt;&gt;&gt;&gt; respected Brent Simmons [NetNewsWire, MarsEdit, Glassboard, etc., currently<br>&gt;&gt;&gt;&gt; at Omni]:<br>&gt;&gt;&gt;&gt; http://inessential.com/swiftdiary<br>&gt;&gt;&gt;&gt; http://inessential.com/2015/07/20/swift_diary_1_class_or_struct_from_str<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The workaround I’d suggest is a factory function that contains a switch<br>&gt;&gt;&gt;&gt; statement that matches class names and returns newly initialized instances.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; —Jens<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/937e3005/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>(Sorry for the repeat, Matthew.)<br></p><p>&gt; Can you clarify a bit on that? So, what you&#39;re saying is to generate routing code based off the DSL router I&#39;ve written?<br></p><p>Yes, unless you can modify your DSL so you can directly provide your controller classes, you’ll probably need to generate code.<br></p><p>By “provide your controller classes”, I mean that you could make a routes file which looked something like this (this routing syntax is loosely inspired by Rails):<br></p><p>	import MyFramework.Router<br>	<br>	// UsersController.self is an instance which represents the UsersController class.<br>	// It’s of type UsersController.Type, which might (for instance) be a subtype of WebController.Type, etc.<br>	Router.root.resources(UsersController.self, path: “users”) { users in<br>		users.resources(PostsController.self, path: “posts”) { posts in<br>			// PostsController.comments is a way to retrieve a closure which calls PostsController’s comments() instance method.<br>			// You use it by saying something like `myClosure(myControllerInstance)(arg1, arg2, etc)`.<br>			posts.get(PostsController.comments, path: “comments”)<br>		}<br>		users.resources(CommentsController.self, path: “comments”)<br>	}<br></p><p>Note that in all cases you pass instances, not names, to your routing APIs. This allows you to write code that can work with any compatible class or method without any danger of trying to use a class or method that doesn’t exist.<br></p><p>But using this approach limits the flexibility of your routing DSL’s design. For instance, you can’t just take the string “users” and infer that you should use UsersController. If you want that sort of more sophisticated behavior, you’re going to need to generate Swift code instead.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 10, 2015 at 04:00:00pm</p></header><div class="content"><p>Okay I&#39;ll have to dig more into using that sort of syntax.<br></p><p>And no problem ;)<br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Thu, Dec 10, 2015 at 4:12 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt;<br>wrote:<br></p><p>&gt; (Sorry for the repeat, Matthew.)<br>&gt;<br>&gt; &gt; Can you clarify a bit on that? So, what you&#39;re saying is to generate<br>&gt; routing code based off the DSL router I&#39;ve written?<br>&gt;<br>&gt; Yes, unless you can modify your DSL so you can directly provide your<br>&gt; controller classes, you’ll probably need to generate code.<br>&gt;<br>&gt; By “provide your controller classes”, I mean that you could make a routes<br>&gt; file which looked something like this (this routing syntax is loosely<br>&gt; inspired by Rails):<br>&gt;<br>&gt;         import MyFramework.Router<br>&gt;<br>&gt;         // UsersController.self is an instance which represents the<br>&gt; UsersController class.<br>&gt;         // It’s of type UsersController.Type, which might (for instance)<br>&gt; be a subtype of WebController.Type, etc.<br>&gt;         Router.root.resources(UsersController.self, path: “users”) { users<br>&gt; in<br>&gt;                 users.resources(PostsController.self, path: “posts”) {<br>&gt; posts in<br>&gt;                         // PostsController.comments is a way to retrieve a<br>&gt; closure which calls PostsController’s comments() instance method.<br>&gt;                         // You use it by saying something like<br>&gt; `myClosure(myControllerInstance)(arg1, arg2, etc)`.<br>&gt;                         posts.get(PostsController.comments, path:<br>&gt; “comments”)<br>&gt;                 }<br>&gt;                 users.resources(CommentsController.self, path: “comments”)<br>&gt;         }<br>&gt;<br>&gt; Note that in all cases you pass instances, not names, to your routing<br>&gt; APIs. This allows you to write code that can work with any compatible class<br>&gt; or method without any danger of trying to use a class or method that<br>&gt; doesn’t exist.<br>&gt;<br>&gt; But using this approach limits the flexibility of your routing DSL’s<br>&gt; design. For instance, you can’t just take the string “users” and infer that<br>&gt; you should use UsersController. If you want that sort of more sophisticated<br>&gt; behavior, you’re going to need to generate Swift code instead.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151210/e6ecdf4f/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>December 11, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On 10 Dec 2015, at 20:22, Matthew Davies via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a method. I don&#39;t want to instantiate all the controllers up front and pass the methods in as closures, nor do I want old controller instances still kept around. If there&#39;s a better way, I&#39;m definitely open to any suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br></p><p>The way I would do this is to define my controller interface with a protocol and then have a dictionary of the following type:<br></p><p>	[String: (Request) throws -&gt; Controller]<br></p><p>where Controller is the protocol and Request is the HTTP request.<br></p><p>So you have a dictionary of URLs to functions (or closures) that create instances that conform to the Controller protocol. The closure takes a parameter of the HTTP request so it has the option of choosing the returned instance based on the method or headers or parameters in the request.<br></p><p>In my implementation, I took the path part of the URL and if it was in the dictionary it would use the returned closure to create the controller. If it wasn’t there, I chopped off the last path part and tried again and so on until I was left with “/“ which always maps to a controller.<br></p><p>The closure is allowed to throw so I could put something like this in for a path<br></p><p>    { _ in throw HTTPError(404) }<br></p><p>which would be handled further up the call chain by generating a 404 response.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0b5ae01969bf4657b8fc2651d165c05b?s=50"></div><header><strong>Instantiate Swift class from string</strong> from <string>Matthew Davies</string> &lt;daviesgeek at gmail.com&gt;<p>December 11, 2015 at 10:00:00am</p></header><div class="content"><p>The problem is still, how would I call the controller method? I still can&#39;t<br>instantiate a new instance of the controller and call a given method on the<br>instance.<br></p><p>I was able to partially get this working, but I realized that I still can&#39;t<br>instantiate a new controller on each request. I can&#39;t figure out a good way<br>to store the class method<br></p><p><br>*Matthew Davies*<br>Junior Developer, GeoStrategies &lt;http://geostrategies.com&gt;<br>Director of Photography, OffBlock Films &lt;http://offblockfilms.com&gt;<br>209-225-3246 &lt;209-225.3246&gt; | 209-202-3284 | daviesgeek at gmail.com |<br>daviesgeek.com<br>&lt;http://facebook.com/daviesgeek&gt;  &lt;http://us.linkedin.com/in/daviesgeek&gt;<br>&lt;http://twitter.com/daviesgeek&gt;  &lt;http://daviesgeek.com/feed.xml&gt;<br>&lt;http://github.com/daviesgeek&gt;<br></p><p><br>On Fri, Dec 11, 2015 at 8:14 AM, Jeremy Pereira &lt;<br>jeremy.j.pereira at googlemail.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On 10 Dec 2015, at 20:22, Matthew Davies via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I&#39;m building a URL router in which I&#39;d like to pass a controller and a<br>&gt; method. I don&#39;t want to instantiate all the controllers up front and pass<br>&gt; the methods in as closures, nor do I want old controller instances still<br>&gt; kept around. If there&#39;s a better way, I&#39;m definitely open to any<br>&gt; suggestions. I&#39;m still learning the &quot;Swift&quot; way to do things.<br>&gt;<br>&gt; The way I would do this is to define my controller interface with a<br>&gt; protocol and then have a dictionary of the following type:<br>&gt;<br>&gt;         [String: (Request) throws -&gt; Controller]<br>&gt;<br>&gt; where Controller is the protocol and Request is the HTTP request.<br>&gt;<br>&gt; So you have a dictionary of URLs to functions (or closures) that create<br>&gt; instances that conform to the Controller protocol. The closure takes a<br>&gt; parameter of the HTTP request so it has the option of choosing the returned<br>&gt; instance based on the method or headers or parameters in the request.<br>&gt;<br>&gt; In my implementation, I took the path part of the URL and if it was in the<br>&gt; dictionary it would use the returned closure to create the controller. If<br>&gt; it wasn’t there, I chopped off the last path part and tried again and so on<br>&gt; until I was left with “/“ which always maps to a controller.<br>&gt;<br>&gt; The closure is allowed to throw so I could put something like this in for<br>&gt; a path<br>&gt;<br>&gt;     { _ in throw HTTPError(404) }<br>&gt;<br>&gt; which would be handled further up the call chain by generating a 404<br>&gt; response.<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151211/18e9fdac/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
