<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/87d7231478c8dfbd8989a9c8ee443b3d?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Kenny Wyland</string> &lt;specialk at gmail.com&gt;<p>June 21, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;m new to the list and I just searched through the archives as best I<br>could to see if someone else had already brought this up, but I didn&#39;t find<br>anything. Forgive me if this horse has been beaten.<br></p><p>I find that typing \(var) is very disruptive to my typing flow. The more I<br>code in Swift, the more I like it, but every time I&#39;m coding and then have<br>to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s<br>minor, but it isn&#39;t a key combination that flows quickly.<br></p><p>I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps<br>@() to go along with other uses of @ throughout the language.<br></p><p>A shifted key, like $ or @, followed by another shifted key like (, allows<br>for a much faster flow and they are much closer to the home keys than \<br>which is nearly as far from home keys as possible (and awkward).<br></p><p>Thoughts?<br></p><p>Kenny Wyland<br>InADayDevelopment.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/2da645ec/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fda162b7805f56b22d58a90236a3583a?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jonathan Cotton</string> &lt;joncotton at icloud.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>I&#39;d support $() as is in use by other languages, including Kotlin, as mentioned it seems less disruptive and more inline with the tokenised parameters that are already supported in closures.<br></p><p>&gt; On 21 Jun 2016, at 21:43, Kenny Wyland via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;m new to the list and I just searched through the archives as best I could to see if someone else had already brought this up, but I didn&#39;t find anything. Forgive me if this horse has been beaten.<br>&gt; <br>&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt; <br>&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br>&gt; <br>&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br>&gt; <br>&gt; Thoughts?<br>&gt; <br>&gt; Kenny Wyland<br>&gt; InADayDevelopment.com<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00464d59365595ecaebd19b44de312fa?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Gwynne Raskind</string> &lt;gwynne at darkrainfall.org&gt;<p>June 21, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 15:48, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d support $() as is in use by other languages, including Kotlin, as mentioned it seems less disruptive and more inline with the tokenised parameters that are already supported in closures.<br>&gt; <br>&gt;&gt; On 21 Jun 2016, at 21:43, Kenny Wyland via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi all,<br>&gt;&gt; <br>&gt;&gt; I&#39;m new to the list and I just searched through the archives as best I could to see if someone else had already brought this up, but I didn&#39;t find anything. Forgive me if this horse has been beaten.<br>&gt;&gt; <br>&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; <br>&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br>&gt;&gt; <br>&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; Kenny Wyland<br>&gt;&gt; InADayDevelopment.com &lt;http://inadaydevelopment.com/&gt;<br></p><p>I have to disagree - The \ syntax is consistent with other string escape sequences (\n etc.) and reads naturally to me in that regard. Additionally, the \ is very visually distinctive in a string, much moreso than the &quot;traditional&quot; $ variable marker. Almost every language I’ve seen using $ for interpolation in strings is doing so because it also uses it as a variable prefix in non-string contexts. To top it off, using $ instead would, for me, just add yet another language for which I have to remember &quot;does the $ go inside or outside the name delimiter braces/brackets/whatever?&quot;, &quot;is it parenthesis, braces, brackets, or some other delimiter for variable names?&quot;, &quot;what kind of expressions can I use in this context?&quot;, &quot;can I use interpolation without any delimiters for simple cases?&quot;, etc. See also PHP, Perl, ten flavors of shell scripts, JavaScript, JSP/ASP, XPath, and so forth. The \() syntax is unique to Swift and therefore very easy to remember.<br></p><p>I also don’t see that Swift carries an expectation of being able to use a syntax which is traditionally confined to interpreted/scripting languages, and even there $ is by no means ubiquitous. Here are just a few counterexamples among various languages:<br></p><p>- C (printf formats)<br>- C++ (stream modifiers)<br>- Objective-C (NSString formats)<br>- C# ($, but with the unusual syntax $&quot;blah {foo} blah&quot;)<br>- Lua (printf formats and language hacks)<br>- Python (printf formats with trailing &quot;% (tuple)&quot; syntax)<br>- Ruby (&quot;#{}&quot;)<br>- Java (printf formats)<br></p><p>There’s an obvious pattern in these example, which brings to something I _would_ like to see for string interpolation in Swift: Better control over the precise representation of the data. I’m sure the topic has been done to death many times before, but I haven’t found any solid information at a quick search, so I apologize if this is all old hat.<br></p><p>Anyway - Creating, configuring, and invoking various Formatter types in order to present data in the proper fashion is an option, and a preferable one when the data is intended for user consumption (especially to get the maximum support from localization). But for logging, debugging, parsing of textual formats, writing textual formats, etc., I almost always want a traditional C/POSIX/ISO representation as easily provided by printf()-style specifiers. 99% of the time when I want to do an number-to-string (integer or otherwise) conversion especially, I’m being specific about the appearance of the number.<br></p><p>For example, for a hex representation of sockaddr_in.sin_addr.s_addr, I would in other languages write &quot;printf(&quot;0x%08x&quot;, address.sin_addr.s_addr);&quot;, or &quot;%02hhu&quot; times four to get dotted-decimal notation. (Ignoring for the moment the existence of inet_ntop() for the sake of the example :). In Swift, I currently have to make a call to printf(), fprintf(), dprintf(), NSString(format:), asprintf() (with a wrapper to deal with getting a Swift.String from allocated memory), etc. A configured NumberFormatter instance is a great deal more code - even NumberFormatter.localizedString(from: foo, number: .decimal) is very verbose, and that *still* doesn’t yield the same level of format control!).<br></p><p>And to top it off, these still carry the traditional problem of printf() formats - separation between the format specifier and the data that format applies to. I’m sure most of us have at one time or another written a printf() with enough arguments that it was easy to lose track of them and end up being very grateful for the existence of -Werror=format (and frustrated that __attribute__((format(..))) is as limited as it is :).<br></p><p>I’m not sure exactly what form support for formatted data in interpolated strings would take in Swift, but it’s certainly one of the things I find myself actively missing on a regular basis, and I do have some ideas on how to go about it, if it isn’t already under discussion/development.<br></p><p>-- Gwynne Raskind<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/68b5637a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 21, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 21 Jun 2016, at 22:49, Gwynne Raskind via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 15:48, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;d support $() as is in use by other languages, including Kotlin, as mentioned it seems less disruptive and more inline with the tokenised parameters that are already supported in closures.<br>&gt;&gt; <br>&gt;&gt;&gt; On 21 Jun 2016, at 21:43, Kenny Wyland via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m new to the list and I just searched through the archives as best I could to see if someone else had already brought this up, but I didn&#39;t find anything. Forgive me if this horse has been beaten.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Kenny Wyland<br>&gt;&gt;&gt; InADayDevelopment.com &lt;http://inadaydevelopment.com/&gt;<br>&gt; <br>&gt; I have to disagree - The \ syntax is consistent with other string escape sequences (\n etc.) and reads naturally to me in that regard. Additionally, the \ is very visually distinctive in a string, much moreso than the &quot;traditional&quot; $ variable marker. Almost every language I’ve seen using $ for interpolation in strings is doing so because it also uses it as a variable prefix in non-string contexts. To top it off, using $ instead would, for me, just add yet another language for which I have to remember &quot;does the $ go inside or outside the name delimiter braces/brackets/whatever?&quot;, &quot;is it parenthesis, braces, brackets, or some other delimiter for variable names?&quot;, &quot;what kind of expressions can I use in this context?&quot;, &quot;can I use interpolation without any delimiters for simple cases?&quot;, etc. See also PHP, Perl, ten flavors of shell scripts, JavaScript, JSP/ASP, XPath, and so forth. The \() syntax is unique to Swift and therefore very easy to remember.<br></p><p>I agree with this; Swift’s only other dollar sign use is for closure shorthand variables, which is technically a non-string context but I assume you mean on *all* variables. Anyway, I think \() is actually a good way to do this, as it’s unambiguous, and not something you’re likely to type by mistake, since you don’t need to escape the brackets for any other purpose. The way I think of it is as an escape from the string, which is IMO more logical than a variable inside a string which dollar notation brings to mind (for me at least).<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/8b802552/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>An argument could be made that the &#39;\&#39; character is used to escape and when you are doing string interpolation/printing you are clearly doing an operation more similar to bash&#39;s use of &#39;$&#39; to extract the value of a variable than escaping.<br></p><p>The need to logically separate escaping from parameter value extraction/string interpolation is IMHO grounds for this change alone.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 21 Jun 2016, at 23:35, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On 21 Jun 2016, at 22:49, Gwynne Raskind via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 15:48, Jonathan Cotton via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;d support $() as is in use by other languages, including Kotlin, as mentioned it seems less disruptive and more inline with the tokenised parameters that are already supported in closures.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 21 Jun 2016, at 21:43, Kenny Wyland via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi all,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m new to the list and I just searched through the archives as best I could to see if someone else had already brought this up, but I didn&#39;t find anything. Forgive me if this horse has been beaten.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Kenny Wyland<br>&gt;&gt;&gt;&gt; InADayDevelopment.com<br>&gt;&gt; <br>&gt;&gt; I have to disagree - The \ syntax is consistent with other string escape sequences (\n etc.) and reads naturally to me in that regard. Additionally, the \ is very visually distinctive in a string, much moreso than the &quot;traditional&quot; $ variable marker. Almost every language I’ve seen using $ for interpolation in strings is doing so because it also uses it as a variable prefix in non-string contexts. To top it off, using $ instead would, for me, just add yet another language for which I have to remember &quot;does the $ go inside or outside the name delimiter braces/brackets/whatever?&quot;, &quot;is it parenthesis, braces, brackets, or some other delimiter for variable names?&quot;, &quot;what kind of expressions can I use in this context?&quot;, &quot;can I use interpolation without any delimiters for simple cases?&quot;, etc. See also PHP, Perl, ten flavors of shell scripts, JavaScript, JSP/ASP, XPath, and so forth. The \() syntax is unique to Swift and therefore very easy to remember.<br>&gt; <br>&gt; I agree with this; Swift’s only other dollar sign use is for closure shorthand variables, which is technically a non-string context but I assume you mean on *all* variables. Anyway, I think \() is actually a good way to do this, as it’s unambiguous, and not something you’re likely to type by mistake, since you don’t need to escape the brackets for any other purpose. The way I think of it is as an escape from the string, which is IMO more logical than a variable inside a string which dollar notation brings to mind (for me at least).<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/5aba83c7/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>June 22, 2016 at 09:00:00am</p></header><div class="content"><p>I&#39;ll stick with Gwynne here. Each language has its syntax for<br>interpolating string and as such I don&#39;t see a reason to change this.<br>As for formatting, I agree it is an issue but we have to remember that<br>inside \() we have code that can do pretty much everything one may<br>need. You may even add a formatting function to String or Int in order<br>to produce the result you need (even simplifying the calls to<br>NumberFormatter - I myself have a whole library of &quot;shortcuts&quot; I add<br>to every project).<br></p><p>L<br></p><p>On 21 June 2016 at 18:49, Gwynne Raskind via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; On Jun 21, 2016, at 15:48, Jonathan Cotton via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I&#39;d support $() as is in use by other languages, including Kotlin, as<br>&gt; mentioned it seems less disruptive and more inline with the tokenised<br>&gt; parameters that are already supported in closures.<br>&gt;<br>&gt; On 21 Jun 2016, at 21:43, Kenny Wyland via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi all,<br>&gt;<br>&gt; I&#39;m new to the list and I just searched through the archives as best I could<br>&gt; to see if someone else had already brought this up, but I didn&#39;t find<br>&gt; anything. Forgive me if this horse has been beaten.<br>&gt;<br>&gt; I find that typing \(var) is very disruptive to my typing flow. The more I<br>&gt; code in Swift, the more I like it, but every time I&#39;m coding and then have<br>&gt; to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor,<br>&gt; but it isn&#39;t a key combination that flows quickly.<br>&gt;<br>&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps<br>&gt; @() to go along with other uses of @ throughout the language.<br>&gt;<br>&gt; A shifted key, like $ or @, followed by another shifted key like (, allows<br>&gt; for a much faster flow and they are much closer to the home keys than \<br>&gt; which is nearly as far from home keys as possible (and awkward).<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; Kenny Wyland<br>&gt; InADayDevelopment.com<br>&gt;<br>&gt;<br>&gt; I have to disagree - The \ syntax is consistent with other string escape<br>&gt; sequences (\n etc.) and reads naturally to me in that regard. Additionally,<br>&gt; the \ is very visually distinctive in a string, much moreso than the<br>&gt; &quot;traditional&quot; $ variable marker. Almost every language I’ve seen using $ for<br>&gt; interpolation in strings is doing so because it also uses it as a variable<br>&gt; prefix in non-string contexts. To top it off, using $ instead would, for me,<br>&gt; just add yet another language for which I have to remember &quot;does the $ go<br>&gt; inside or outside the name delimiter braces/brackets/whatever?&quot;, &quot;is it<br>&gt; parenthesis, braces, brackets, or some other delimiter for variable names?&quot;,<br>&gt; &quot;what kind of expressions can I use in this context?&quot;, &quot;can I use<br>&gt; interpolation without any delimiters for simple cases?&quot;, etc. See also PHP,<br>&gt; Perl, ten flavors of shell scripts, JavaScript, JSP/ASP, XPath, and so<br>&gt; forth. The \() syntax is unique to Swift and therefore very easy to<br>&gt; remember.<br>&gt;<br>&gt; I also don’t see that Swift carries an expectation of being able to use a<br>&gt; syntax which is traditionally confined to interpreted/scripting languages,<br>&gt; and even there $ is by no means ubiquitous. Here are just a few<br>&gt; counterexamples among various languages:<br>&gt;<br>&gt; - C (printf formats)<br>&gt; - C++ (stream modifiers)<br>&gt; - Objective-C (NSString formats)<br>&gt; - C# ($, but with the unusual syntax $&quot;blah {foo} blah&quot;)<br>&gt; - Lua (printf formats and language hacks)<br>&gt; - Python (printf formats with trailing &quot;% (tuple)&quot; syntax)<br>&gt; - Ruby (&quot;#{}&quot;)<br>&gt; - Java (printf formats)<br>&gt;<br>&gt; There’s an obvious pattern in these example, which brings to something I<br>&gt; _would_ like to see for string interpolation in Swift: Better control over<br>&gt; the precise representation of the data. I’m sure the topic has been done to<br>&gt; death many times before, but I haven’t found any solid information at a<br>&gt; quick search, so I apologize if this is all old hat.<br>&gt;<br>&gt; Anyway - Creating, configuring, and invoking various Formatter types in<br>&gt; order to present data in the proper fashion is an option, and a preferable<br>&gt; one when the data is intended for user consumption (especially to get the<br>&gt; maximum support from localization). But for logging, debugging, parsing of<br>&gt; textual formats, writing textual formats, etc., I almost always want a<br>&gt; traditional C/POSIX/ISO representation as easily provided by printf()-style<br>&gt; specifiers. 99% of the time when I want to do an number-to-string (integer<br>&gt; or otherwise) conversion especially, I’m being specific about the appearance<br>&gt; of the number.<br>&gt;<br>&gt; For example, for a hex representation of sockaddr_in.sin_addr.s_addr, I<br>&gt; would in other languages write &quot;printf(&quot;0x%08x&quot;, address.sin_addr.s_addr);&quot;,<br>&gt; or &quot;%02hhu&quot; times four to get dotted-decimal notation. (Ignoring for the<br>&gt; moment the existence of inet_ntop() for the sake of the example :). In<br>&gt; Swift, I currently have to make a call to printf(), fprintf(), dprintf(),<br>&gt; NSString(format:), asprintf() (with a wrapper to deal with getting a<br>&gt; Swift.String from allocated memory), etc. A configured NumberFormatter<br>&gt; instance is a great deal more code - even<br>&gt; NumberFormatter.localizedString(from: foo, number: .decimal) is very<br>&gt; verbose, and that *still* doesn’t yield the same level of format control!).<br>&gt;<br>&gt; And to top it off, these still carry the traditional problem of printf()<br>&gt; formats - separation between the format specifier and the data that format<br>&gt; applies to. I’m sure most of us have at one time or another written a<br>&gt; printf() with enough arguments that it was easy to lose track of them and<br>&gt; end up being very grateful for the existence of -Werror=format (and<br>&gt; frustrated that __attribute__((format(..))) is as limited as it is :).<br>&gt;<br>&gt; I’m not sure exactly what form support for formatted data in interpolated<br>&gt; strings would take in Swift, but it’s certainly one of the things I find<br>&gt; myself actively missing on a regular basis, and I do have some ideas on how<br>&gt; to go about it, if it isn’t already under discussion/development.<br>&gt;<br>&gt; -- Gwynne Raskind<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 21, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt; <br>&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br></p><p>Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br></p><p>&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br></p><p><br>I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36f3ec204630839e54fb68c6979e5f78?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Daniel Resnick</string> &lt;danielzresnick at gmail.com&gt;<p>June 21, 2016 at 04:00:00pm</p></header><div class="content"><p>I also disagree for the same reasons that Gwynne and Brent mentioned: I<br>find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string<br>escaping syntax.<br></p><p>On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more<br>&gt; I code in Swift, the more I like it, but every time I&#39;m coding and then<br>&gt; have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s<br>&gt; minor, but it isn&#39;t a key combination that flows quickly.<br>&gt; &gt;<br>&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or<br>&gt; perhaps @() to go along with other uses of @ throughout the language.<br>&gt;<br>&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I<br>&gt; immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third<br>&gt; character (besides \ and &quot;) to mean something special in a string literal,<br>&gt; it reuses one of the existing ones. There&#39;s no need to escape a character<br>&gt; you wouldn&#39;t otherwise have to touch, or to think of another character as<br>&gt; &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\`<br>&gt; indicating a special construct and then `()` delimiting an expression, just<br>&gt; as they do elsewhere in the language. It&#39;s an elegant solution to a problem<br>&gt; traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;<br>&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (,<br>&gt; allows for a much faster flow and they are much closer to the home keys<br>&gt; than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;<br>&gt;<br>&gt; I don&#39;t have any trouble typing it personally. If you find yourself<br>&gt; accidentally typing `\9` or `|(`, we could probably offer an error for the<br>&gt; former or warning for the latter with a fix-it. But if you&#39;re complaining<br>&gt; that it takes a tiny fraction of a second longer to type than `$(` would,<br>&gt; then honestly, I just can&#39;t bring myself to care. Swift optimizes for code<br>&gt; reading. If we wanted to optimize for code typing instead, we&#39;d have a very<br>&gt; different style.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/14ca9f29/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>On Tue, Jun 21, 2016 at 5:10 PM, Daniel Resnick via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I<br>&gt; find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string<br>&gt; escaping syntax.<br>&gt;<br></p><p>Those are persuasive arguments. Consistency with other string escaping<br>syntax is a huge plus. Moreover, now that I think about it, \r or \n isn&#39;t<br>really a bother to type. The \( combination takes a little getting used to,<br>but it&#39;s not absurdly terrible. I suppose we could consider \{} or even \[]<br>instead of \() to alleviate the reach.<br></p><p><br></p><p>&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The<br>&gt;&gt; more I code in Swift, the more I like it, but every time I&#39;m coding and<br>&gt;&gt; then have to hiccup while typing \ then ( causes me to be annoyed. I know,<br>&gt;&gt; it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or<br>&gt;&gt; perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;<br>&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I<br>&gt;&gt; immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third<br>&gt;&gt; character (besides \ and &quot;) to mean something special in a string literal,<br>&gt;&gt; it reuses one of the existing ones. There&#39;s no need to escape a character<br>&gt;&gt; you wouldn&#39;t otherwise have to touch, or to think of another character as<br>&gt;&gt; &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\`<br>&gt;&gt; indicating a special construct and then `()` delimiting an expression, just<br>&gt;&gt; as they do elsewhere in the language. It&#39;s an elegant solution to a problem<br>&gt;&gt; traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;<br>&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (,<br>&gt;&gt; allows for a much faster flow and they are much closer to the home keys<br>&gt;&gt; than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself<br>&gt;&gt; accidentally typing `\9` or `|(`, we could probably offer an error for the<br>&gt;&gt; former or warning for the latter with a fix-it. But if you&#39;re complaining<br>&gt;&gt; that it takes a tiny fraction of a second longer to type than `$(` would,<br>&gt;&gt; then honestly, I just can&#39;t bring myself to care. Swift optimizes for code<br>&gt;&gt; reading. If we wanted to optimize for code typing instead, we&#39;d have a very<br>&gt;&gt; different style.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/24c2cce2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>June 21, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 15:26, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Tue, Jun 21, 2016 at 5:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt; <br>&gt; Those are persuasive arguments. Consistency with other string escaping syntax is a huge plus. Moreover, now that I think about it, \r or \n isn&#39;t really a bother to type. The \( combination takes a little getting used to, but it&#39;s not absurdly terrible. I suppose we could consider \{} or even \[] instead of \() to alleviate the reach.<br></p><p>Gwynne and Brent indeed hit on the logic for the original design: backslash is already an escape character in strings. The parentheses () over another kind of delimiter were originally to match calls (string interpolation once generated direct calls to String initializers), but even without that it’s still something that’s used with expressions, while curly braces {} are used for general code blocks and square brackets [] are used with collections.<br></p><p>I’m strongly in favor of keeping things the way they are, both because I like it a fair bit and because it’d be another source-breaking change that would be very hard to migrate.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/0a9d5087/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>June 21, 2016 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jun 21, 2016, at 5:51 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 15:26, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 21, 2016 at 5:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt; <br>&gt;&gt; Those are persuasive arguments. Consistency with other string escaping syntax is a huge plus. Moreover, now that I think about it, \r or \n isn&#39;t really a bother to type. The \( combination takes a little getting used to, but it&#39;s not absurdly terrible. I suppose we could consider \{} or even \[] instead of \() to alleviate the reach.<br>&gt; <br>&gt; Gwynne and Brent indeed hit on the logic for the original design: backslash is already an escape character in strings. The parentheses () over another kind of delimiter were originally to match calls (string interpolation once generated direct calls to String initializers), but even without that it’s still something that’s used with expressions, while curly braces {} are used for general code blocks and square brackets [] are used with collections.<br>&gt; <br>&gt; I’m strongly in favor of keeping things the way they are, both because I like it a fair bit and because it’d be another source-breaking change that would be very hard to migrate.<br></p><p>+1.  I really liked this when I Swift was first released.  Using the existing escape character makes perfect sense.  We&#39;ve made enough breaking changes for what are arguably aesthetic preferences.  The bar should be higher going forward and I really don&#39;t think this makes the cut.<br></p><p>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/984e1443/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 21, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 3:51 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 15:26, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 21, 2016 at 5:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt; <br>&gt;&gt; Those are persuasive arguments. Consistency with other string escaping syntax is a huge plus. Moreover, now that I think about it, \r or \n isn&#39;t really a bother to type. The \( combination takes a little getting used to, but it&#39;s not absurdly terrible. I suppose we could consider \{} or even \[] instead of \() to alleviate the reach.<br>&gt; <br>&gt; Gwynne and Brent indeed hit on the logic for the original design: backslash is already an escape character in strings. The parentheses () over another kind of delimiter were originally to match calls (string interpolation once generated direct calls to String initializers), but even without that it’s still something that’s used with expressions, while curly braces {} are used for general code blocks and square brackets [] are used with collections.<br>&gt; <br>&gt; I’m strongly in favor of keeping things the way they are, both because I like it a fair bit and because it’d be another source-breaking change that would be very hard to migrate.<br></p><p>I completely agree with Jordan.<br></p><p>This is a classical bikeshed, and any new design would have to be extremely compelling, because it would have to overcome the advantage of the \() approach: that it is compatible with the use of \ as the escape character for other things.  It would be really unfortunate to have to start escaping $ or whatever other character you would pick.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/d330087b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>June 21, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jun 21, 2016, at 17:26, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br></p><p>&gt; The \( combination takes a little getting used to, but it&#39;s not absurdly terrible. I suppose we could consider \{} or even \[] instead of \() to alleviate the reach.<br></p><p>\{} is kinda nice because it mirrors the closure syntax.<br></p><p>- Dave Sweeris<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 07:00:00pm</p></header><div class="content"><p>Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br></p><p>I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br></p><p>Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br></p><p>I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br></p><p>I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br></p><p>Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br></p><p>Brandon<br></p><p><br></p><p>&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt; <br>&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt; &gt;<br>&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt; <br>&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt; <br>&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt; <br>&gt; <br>&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt; <br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/be04a101/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 22, 2016 at 01:00:00am</p></header><div class="content"><p>I’m not saying its necessarily *easy* to type, but I think its good enough to warrant the elegance of having only one escaping character instead of multiple.<br></p><p>&gt; On 22 Jun 2016, at 01:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt; <br>&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/ &lt;https://www.patrick-wied.at/projects/heatmap-keyboard/&gt;<br>&gt; <br>&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt; <br>&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt; <br>&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt; <br>&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt; <br>&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt; <br>&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/a56d2bfc/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Actually… we can go pretty scientific on this sort of thing and heat map<br>&gt; keyboard usage to get a better picture of how “usable” this is.<br>&gt;<br>&gt; I pasted a file that contains seven \’s in it and heat mapped it at<br>&gt; https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;<br>&gt; Even *with* several \’s throughout my source file the majority of my key<br>&gt; presses take place much closer to the $ key than the \ key.<br>&gt;<br>&gt; I think we can all argue about what is clearer or not, but I think for the<br>&gt; majority of us, the \ key is quite inconvenient compared to the keys around<br>&gt; where we type the most.<br>&gt;<br>&gt; I also ran several of iOS 10’s sample code through the heat map and<br>&gt; continue to get pretty similar results: the \ is much further from the<br>&gt; hottest part of the keyboard than the ones closer to where your hand<br>&gt; usually rests.<br>&gt;<br>&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy<br>&gt; to type when there are far more usable alternatives.<br>&gt;<br></p><p>I&#39;m rather unpersuaded by this line of argument. The keyboard is only so<br>big; it&#39;s a stretch to say that any key is less than absolutely usable.<br>Moreover, \ is next the delete key, which I presume you use frequently and<br>find no difficulty in reaching.<br></p><p>You know what *is* unusable though? Try finding the $ key on an<br>international keyboard.<br></p><p><br>&gt; Brandon<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I<br>&gt; find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string<br>&gt; escaping syntax.<br>&gt;<br>&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The<br>&gt;&gt; more I code in Swift, the more I like it, but every time I&#39;m coding and<br>&gt;&gt; then have to hiccup while typing \ then ( causes me to be annoyed. I know,<br>&gt;&gt; it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or<br>&gt;&gt; perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;<br>&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I<br>&gt;&gt; immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third<br>&gt;&gt; character (besides \ and &quot;) to mean something special in a string literal,<br>&gt;&gt; it reuses one of the existing ones. There&#39;s no need to escape a character<br>&gt;&gt; you wouldn&#39;t otherwise have to touch, or to think of another character as<br>&gt;&gt; &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\`<br>&gt;&gt; indicating a special construct and then `()` delimiting an expression, just<br>&gt;&gt; as they do elsewhere in the language. It&#39;s an elegant solution to a problem<br>&gt;&gt; traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;<br>&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (,<br>&gt;&gt; allows for a much faster flow and they are much closer to the home keys<br>&gt;&gt; than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself<br>&gt;&gt; accidentally typing `\9` or `|(`, we could probably offer an error for the<br>&gt;&gt; former or warning for the latter with a fix-it. But if you&#39;re complaining<br>&gt;&gt; that it takes a tiny fraction of a second longer to type than `$(` would,<br>&gt;&gt; then honestly, I just can&#39;t bring myself to care. Swift optimizes for code<br>&gt;&gt; reading. If we wanted to optimize for code typing instead, we&#39;d have a very<br>&gt;&gt; different style.<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/1252d4be/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 07:00:00pm</p></header><div class="content"><p>How can it be unpersuasive? I can *show* you that keys that are easier to type/reach exist for a large majority of user’s.<br></p><p>I am not saying it is a good idea or not to replace \, but to pretend that there isn’t an inconvenience there is unfair when every other part of the language is put under a magnifying glass for the sake of grammar, newbie friendliness, or this or that, etc...<br></p><p>This is measurable…it just depends on whether it bothers people or not enough. Most other things are based on opinion, but this *can* be based on numbers and usability.<br>This is something used by everyone. The usability cost is there and it is real. Just because “well it is easy for me to type” does not mean that it is ideal. It also doesn’t mean that the current choice is the wrong choice either. But it still is important to discuss while we can.<br></p><p>And yes a keyboard IS only so big, but the range to that bigness can be pretty… big.<br></p><p>Also, $ is not the only option. There are still far easier keys to type than \.<br></p><p>Brandon<br></p><p>&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt; <br>&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/ &lt;https://www.patrick-wied.at/projects/heatmap-keyboard/&gt;<br>&gt; <br>&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt; <br>&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt; <br>&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt; <br>&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt; <br>&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so big; it&#39;s a stretch to say that any key is less than absolutely usable. Moreover, \ is next the delete key, which I presume you use frequently and find no difficulty in reaching.<br>&gt; <br>&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt;  <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt; <br>&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt; <br>&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/bfffc5ff/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 21, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br></p><p>And that, for me, is motivation in a nutshell. Swift won&#39;t always be used on OS X, where it&#39;s easy to set up Keyboard prefs to substitute (dollar) with $. <br></p><p>I did a search for &quot;which symbol keys appear on most international keyboards&quot; but didn&#39;t get very far. Surely this is something to bring into the discussion if it exists?<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 07:00:00pm</p></header><div class="content"><p>Unfortunately I know nothing about international keyboards.<br></p><p>But surely someone could heat map their international keyboards?<br></p><p>I don&#39;t want to take this to ridiculous levels, but I hope I am making somewhat of a point here. Maybe not =/<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>On Jun 21, 2016, at 7:38 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br></p><p>&gt;&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt; <br>&gt; And that, for me, is motivation in a nutshell. Swift won&#39;t always be used on OS X, where it&#39;s easy to set up Keyboard prefs to substitute (dollar) with $. <br>&gt; <br>&gt; I did a search for &quot;which symbol keys appear on most international keyboards&quot; but didn&#39;t get very far. Surely this is something to bring into the discussion if it exists?<br>&gt; <br>&gt; -- E<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>On Tue, Jun 21, 2016 at 6:25 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br></p><p>&gt; How can it be unpersuasive? I can *show* you that keys that are easier to<br>&gt; type/reach exist for a large majority of user’s.<br>&gt;<br></p><p>As I pointed out, your results are flawed because there are two keys<br>frequently reached for in the vicinity of \ which are excluded from your<br>analysis. Those keys are delete/backspace and return/enter.<br></p><p><br>&gt;<br>&gt; I am not saying it is a good idea or not to replace \, but to pretend that<br>&gt; there isn’t an inconvenience there is unfair when every other part of the<br>&gt; language is put under a magnifying glass for the sake of grammar, newbie<br>&gt; friendliness, or this or that, etc...<br>&gt;<br>&gt;<br>We&#39;ve discussed why it&#39;s sensible grammar; there is no argument to be made<br>here about whether pressing one labeled key or another is friendlier to a<br>beginner.<br></p><p><br>&gt; This is *measurable*…it just depends on whether it bothers people or not<br>&gt; enough. Most other things are based on opinion, but this *can* be based on<br>&gt; numbers and usability.<br>&gt;<br></p><p>See above; you measured wrong...<br></p><p><br>&gt; This is *something used by everyone*. The usability cost is there and it<br>&gt; is real. Just because “well it is easy for me to type” does not mean that<br>&gt; it is ideal. It also doesn’t mean that the current choice is the wrong<br>&gt; choice either. But it still is important to discuss while we can.<br>&gt;<br>&gt; And yes a keyboard IS only so big, but the range to that bigness can be<br>&gt; pretty… big.<br>&gt;<br>&gt; Also, $ is not the only option. There are still far easier keys to type<br>&gt; than \.<br>&gt; Brandon<br>&gt;<br>&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map<br>&gt;&gt; keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;<br>&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at<br>&gt;&gt; https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;<br>&gt;&gt; Even *with* several \’s throughout my source file the majority of my key<br>&gt;&gt; presses take place much closer to the $ key than the \ key.<br>&gt;&gt;<br>&gt;&gt; I think we can all argue about what is clearer or not, but I think for<br>&gt;&gt; the majority of us, the \ key is quite inconvenient compared to the keys<br>&gt;&gt; around where we type the most.<br>&gt;&gt;<br>&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and<br>&gt;&gt; continue to get pretty similar results: the \ is much further from the<br>&gt;&gt; hottest part of the keyboard than the ones closer to where your hand<br>&gt;&gt; usually rests.<br>&gt;&gt;<br>&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy<br>&gt;&gt; to type when there are far more usable alternatives.<br>&gt;&gt;<br>&gt;<br>&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so<br>&gt; big; it&#39;s a stretch to say that any key is less than absolutely usable.<br>&gt; Moreover, \ is next the delete key, which I presume you use frequently and<br>&gt; find no difficulty in reaching.<br>&gt;<br>&gt; You know what *is* unusable though? Try finding the $ key on an<br>&gt; international keyboard.<br>&gt;<br>&gt;<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I<br>&gt;&gt; find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string<br>&gt;&gt; escaping syntax.<br>&gt;&gt;<br>&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The<br>&gt;&gt;&gt; more I code in Swift, the more I like it, but every time I&#39;m coding and<br>&gt;&gt;&gt; then have to hiccup while typing \ then ( causes me to be annoyed. I know,<br>&gt;&gt;&gt; it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or<br>&gt;&gt;&gt; perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I<br>&gt;&gt;&gt; immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third<br>&gt;&gt;&gt; character (besides \ and &quot;) to mean something special in a string literal,<br>&gt;&gt;&gt; it reuses one of the existing ones. There&#39;s no need to escape a character<br>&gt;&gt;&gt; you wouldn&#39;t otherwise have to touch, or to think of another character as<br>&gt;&gt;&gt; &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\`<br>&gt;&gt;&gt; indicating a special construct and then `()` delimiting an expression, just<br>&gt;&gt;&gt; as they do elsewhere in the language. It&#39;s an elegant solution to a problem<br>&gt;&gt;&gt; traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (,<br>&gt;&gt;&gt; allows for a much faster flow and they are much closer to the home keys<br>&gt;&gt;&gt; than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself<br>&gt;&gt;&gt; accidentally typing `\9` or `|(`, we could probably offer an error for the<br>&gt;&gt;&gt; former or warning for the latter with a fix-it. But if you&#39;re complaining<br>&gt;&gt;&gt; that it takes a tiny fraction of a second longer to type than `$(` would,<br>&gt;&gt;&gt; then honestly, I just can&#39;t bring myself to care. Swift optimizes for code<br>&gt;&gt;&gt; reading. If we wanted to optimize for code typing instead, we&#39;d have a very<br>&gt;&gt;&gt; different style.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/68f38817/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/835a02e14abc997b2c9c9a65f1d70732?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Andrey Fidrya</string> &lt;af at zabiyaka.com&gt;<p>June 22, 2016 at 02:00:00am</p></header><div class="content"><p>I think that introducing another escape character is not a good idea.<br>\() is consistent with \r \n etc.<br></p><p>And I&#39;m not sure if $ is easier to type. &#39;\&#39; is a single keypress and is located<br>near Backspace &amp; Enter.<br></p><p>$ is SHIFT+4 and is harder to type without looking at the keyboard.<br></p><p>Andrey<br></p><p><br>&gt; On 22 Jun 2016, at 02:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; How can it be unpersuasive? I can *show* you that keys that are easier to type/reach exist for a large majority of user’s.<br>&gt; <br>&gt; I am not saying it is a good idea or not to replace \, but to pretend that there isn’t an inconvenience there is unfair when every other part of the language is put under a magnifying glass for the sake of grammar, newbie friendliness, or this or that, etc...<br>&gt; <br>&gt; This is measurable…it just depends on whether it bothers people or not enough. Most other things are based on opinion, but this *can* be based on numbers and usability.<br>&gt; This is something used by everyone. The usability cost is there and it is real. Just because “well it is easy for me to type” does not mean that it is ideal. It also doesn’t mean that the current choice is the wrong choice either. But it still is important to discuss while we can.<br>&gt; <br>&gt; And yes a keyboard IS only so big, but the range to that bigness can be pretty… big.<br>&gt; <br>&gt; Also, $ is not the only option. There are still far easier keys to type than \.<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt; <br>&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/ &lt;https://www.patrick-wied.at/projects/heatmap-keyboard/&gt;<br>&gt;&gt; <br>&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt; <br>&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt; <br>&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt; <br>&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt; <br>&gt;&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so big; it&#39;s a stretch to say that any key is less than absolutely usable. Moreover, \ is next the delete key, which I presume you use frequently and find no difficulty in reaching.<br>&gt;&gt; <br>&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt;&gt;  <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/3b2303a4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 07:00:00pm</p></header><div class="content"><p>You&#39;re going to be holding shift for the parens anyways so it might be easier to type instead of not pressing and then pressing shift<br></p><p>Brandon <br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 21, 2016, at 7:47 PM, Andrey Fidrya &lt;af at zabiyaka.com&gt; wrote:<br>&gt; <br>&gt; I think that introducing another escape character is not a good idea.<br>&gt; \() is consistent with \r \n etc.<br>&gt; <br>&gt; And I&#39;m not sure if $ is easier to type. &#39;\&#39; is a single keypress and is located<br>&gt; near Backspace &amp; Enter.<br>&gt; <br>&gt; $ is SHIFT+4 and is harder to type without looking at the keyboard.<br>&gt; <br>&gt; Andrey<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 02:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How can it be unpersuasive? I can *show* you that keys that are easier to type/reach exist for a large majority of user’s.<br>&gt;&gt; <br>&gt;&gt; I am not saying it is a good idea or not to replace \, but to pretend that there isn’t an inconvenience there is unfair when every other part of the language is put under a magnifying glass for the sake of grammar, newbie friendliness, or this or that, etc...<br>&gt;&gt; <br>&gt;&gt; This is measurable…it just depends on whether it bothers people or not enough. Most other things are based on opinion, but this *can* be based on numbers and usability.<br>&gt;&gt; This is something used by everyone. The usability cost is there and it is real. Just because “well it is easy for me to type” does not mean that it is ideal. It also doesn’t mean that the current choice is the wrong choice either. But it still is important to discuss while we can.<br>&gt;&gt; <br>&gt;&gt; And yes a keyboard IS only so big, but the range to that bigness can be pretty… big.<br>&gt;&gt; <br>&gt;&gt; Also, $ is not the only option. There are still far easier keys to type than \.<br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so big; it&#39;s a stretch to say that any key is less than absolutely usable. Moreover, \ is next the delete key, which I presume you use frequently and find no difficulty in reaching.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/34fed665/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 21, 2016 at 06:00:00pm</p></header><div class="content"><p>The situation is very different on an iPad. I don&#39;t think this argument is a good enough reason either. It will differ based on locale, accessibility technology, device, personal key shortcuts, etc. <br></p><p>l8r<br>Sean <br></p><p>Sent from my iPhone<br></p><p>&gt; On Jun 21, 2016, at 6:52 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; You&#39;re going to be holding shift for the parens anyways so it might be easier to type instead of not pressing and then pressing shift<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt; Sent from my iPad<br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 7:47 PM, Andrey Fidrya &lt;af at zabiyaka.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think that introducing another escape character is not a good idea.<br>&gt;&gt; \() is consistent with \r \n etc.<br>&gt;&gt; <br>&gt;&gt; And I&#39;m not sure if $ is easier to type. &#39;\&#39; is a single keypress and is located<br>&gt;&gt; near Backspace &amp; Enter.<br>&gt;&gt; <br>&gt;&gt; $ is SHIFT+4 and is harder to type without looking at the keyboard.<br>&gt;&gt; <br>&gt;&gt; Andrey<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jun 2016, at 02:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How can it be unpersuasive? I can *show* you that keys that are easier to type/reach exist for a large majority of user’s.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am not saying it is a good idea or not to replace \, but to pretend that there isn’t an inconvenience there is unfair when every other part of the language is put under a magnifying glass for the sake of grammar, newbie friendliness, or this or that, etc...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This is measurable…it just depends on whether it bothers people or not enough. Most other things are based on opinion, but this *can* be based on numbers and usability.<br>&gt;&gt;&gt; This is something used by everyone. The usability cost is there and it is real. Just because “well it is easy for me to type” does not mean that it is ideal. It also doesn’t mean that the current choice is the wrong choice either. But it still is important to discuss while we can.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And yes a keyboard IS only so big, but the range to that bigness can be pretty… big.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Also, $ is not the only option. There are still far easier keys to type than \.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so big; it&#39;s a stretch to say that any key is less than absolutely usable. Moreover, \ is next the delete key, which I presume you use frequently and find no difficulty in reaching.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/6637a78e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 21, 2016 at 08:00:00pm</p></header><div class="content"><p>I agree, but is this why \ was chosen?<br></p><p>Brandon<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 21, 2016, at 7:58 PM, Sean Heber &lt;sean at fifthace.com&gt; wrote:<br>&gt; <br>&gt; The situation is very different on an iPad. I don&#39;t think this argument is a good enough reason either. It will differ based on locale, accessibility technology, device, personal key shortcuts, etc. <br>&gt; <br>&gt; l8r<br>&gt; Sean <br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 6:52 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You&#39;re going to be holding shift for the parens anyways so it might be easier to type instead of not pressing and then pressing shift<br>&gt;&gt; <br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt; Sent from my iPad<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 7:47 PM, Andrey Fidrya &lt;af at zabiyaka.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that introducing another escape character is not a good idea.<br>&gt;&gt;&gt; \() is consistent with \r \n etc.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And I&#39;m not sure if $ is easier to type. &#39;\&#39; is a single keypress and is located<br>&gt;&gt;&gt; near Backspace &amp; Enter.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; $ is SHIFT+4 and is harder to type without looking at the keyboard.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Andrey<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 22 Jun 2016, at 02:25, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How can it be unpersuasive? I can *show* you that keys that are easier to type/reach exist for a large majority of user’s.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I am not saying it is a good idea or not to replace \, but to pretend that there isn’t an inconvenience there is unfair when every other part of the language is put under a magnifying glass for the sake of grammar, newbie friendliness, or this or that, etc...<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This is measurable…it just depends on whether it bothers people or not enough. Most other things are based on opinion, but this *can* be based on numbers and usability.<br>&gt;&gt;&gt;&gt; This is something used by everyone. The usability cost is there and it is real. Just because “well it is easy for me to type” does not mean that it is ideal. It also doesn’t mean that the current choice is the wrong choice either. But it still is important to discuss while we can.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And yes a keyboard IS only so big, but the range to that bigness can be pretty… big.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Also, $ is not the only option. There are still far easier keys to type than \.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 7:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 6:08 PM, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so big; it&#39;s a stretch to say that any key is less than absolutely usable. Moreover, \ is next the delete key, which I presume you use frequently and find no difficulty in reaching.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You know what *is* unusable though? Try finding the $ key on an international keyboard.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160621/6272d77e/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ec5a599777854c540fd102ef4691fe10?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Rimantas Liubertas</string> &lt;rimantas at gmail.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 22, 2016 at 2:15 AM, Xiaodi Wu via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &lt;…&gt;<br>&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only so<br>&gt; big; it&#39;s a stretch to say that any key is less than absolutely usable.<br>&gt; Moreover, \ is next the delete key, which I presume you use frequently and<br>&gt; find no difficulty in reaching.<br>&gt;<br></p><p>Also keyboards are different so one&#39;s heatmap does not match other&#39;s. \()<br>is perfectly fine, no need to change.<br></p><p>r.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/6a14a4d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece26013937d335fef29571cddbee114?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Nick Moore</string> &lt;nick at nickmoore.net&gt;<p>June 22, 2016 at 10:00:00am</p></header><div class="content"><p>There are many handy utilities for string-snippet replacement. For<br>example, TextExpander can be configure to replace \\ with \(), putting<br>the insertion point between the parens. I&#39;m sure people can come up with<br>other solutions to suit their workflow, if typing it straight out is<br>uncomfortable.<br> <br>I don&#39;t think a language should be optimised for typing but for reading<br>and logical consistency.<br> <br>-Nick<br>(This is my first post to the list. but I have been reading it for a<br>long time.)<br> <br>On Wed, Jun 22, 2016, at 09:44 AM, Rimantas Liubertas via swift-evolution wrote:<br>&gt;<br>&gt;<br>&gt; On Wed, Jun 22, 2016 at 2:15 AM, Xiaodi Wu via swift-evolution &lt;swift-<br>&gt; evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &lt;…&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;m rather unpersuaded by this line of argument. The keyboard is only<br>&gt;&gt; so big; it&#39;s a stretch to say that any key is less than absolutely<br>&gt;&gt; usable. Moreover, \ is next the delete key, which I presume you use<br>&gt;&gt; frequently and find no difficulty in reaching.<br>&gt;<br>&gt; Also keyboards are different so one&#39;s heatmap does not match other&#39;s.<br>&gt; \() is perfectly fine, no need to change.<br>&gt;<br>&gt; r.<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br> <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/db3b89aa/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 22, 2016 at 04:00:00pm</p></header><div class="content"><p>I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br></p><p>“\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br></p><p>Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br></p><p>*The* escape character for strings is “\”. Please let’s not introduce a second one.<br></p><p><br>&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt; <br>&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt; <br>&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt; <br>&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt; <br>&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt; <br>&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt; <br>&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt; <br>&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt; <br>&gt;&gt; &gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 22, 2016 at 11:00:00am</p></header><div class="content"><p>My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br></p><p>Brandon<br></p><p>&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt; <br>&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt; <br>&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt; <br>&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt; <br>&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt; <br>&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt; <br>&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt; <br>&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt; <br>&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 22, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br></p><p><br>Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br></p><p><br>&gt; <br>&gt; Brandon<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt; <br>&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt; <br>&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt; <br>&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 22, 2016 at 12:00:00pm</p></header><div class="content"><p>No it shows where your hand frequently is also<br></p><p>Brandon<br></p><p>&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt; <br>&gt; <br>&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 22, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; No it shows where your hand frequently is also<br></p><p>And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”. <br></p><p>&gt; <br>&gt; Brandon<br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>June 22, 2016 at 12:00:00pm</p></header><div class="content"><p>I really don’t understand why we are wasting everyone’s time debating this.<br></p><p>Yes I think there is a correlation. Yes this is precisely why I posted the heat map.<br></p><p>Of course \ is not needed a lot, but when it is, *it is inconvenient for *some* people*. I am not making this up. You can cite several other users from this very thread.<br></p><p>I tried showing that it is quite distant on the keyboard from where the user’s hands rest. I tried showing that there are other keys at their finger tips where their hand is usually resting.<br></p><p>1. Do I know every international keyboard layout? No.<br>2. Are we pretending that \ was picked because it was easier for international users? If I am wrong, I would love to hear more…else let’s not pretend that \ was the optimal key for all.<br></p><p>Like I have said repeatedly…I don’t care if \ is removed. At this point we are wasting other people’s time. I have just tried to be a voice for those that find it awkward and inconvenient. I tried not to base this just on opinion but on some *evidence*, but apparently that isn’t sufficient enough for some.<br></p><p>Brandon<br></p><p><br>&gt; On Jun 22, 2016, at 12:20 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; No it shows where your hand frequently is also<br>&gt; <br>&gt; And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>June 22, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Le 22 juin 2016 à 12:27, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I really don’t understand why we are wasting everyone’s time debating this.<br>&gt; <br>&gt; Yes I think there is a correlation. Yes this is precisely why I posted the heat map.<br>&gt; <br>&gt; Of course \ is not needed a lot, but when it is, *it is inconvenient for *some* people*. I am not making this up. You can cite several other users from this very thread.<br>&gt; <br>&gt; I tried showing that it is quite distant on the keyboard from where the user’s hands rest. I tried showing that there are other keys at their finger tips where their hand is usually resting.<br>&gt; <br>&gt; 1. Do I know every international keyboard layout? No.<br>&gt; 2. Are we pretending that \ was picked because it was easier for international users? If I am wrong, I would love to hear more…else let’s not pretend that \ was the optimal key for all.<br></p><p>The same that a good sentinel value is one that is invalid. A good escape character is one that is rarely used. If as suggested $() or @() is used, one would have, unless extra look ahead magic is added to the parser, would have to write string like &quot;0.99\$&quot; and &quot;swift-evolution\@swift.org&quot;; that&#39;s assuming only \() is changed and not all escaping. Using @ or $ for all escaping is so ugly to me, that I cannot write an sample of what it would look like.<br></p><p>One could of course argue that the look ahead is tiny, but escaping in the rare case that &quot;$(&quot; need to be displayed one would have to use &quot;\$(&quot;; so some $ need escaping, whic can be seen as inconsistent and confusing.<br></p><p>So sticking to &#39;\&#39; looks like a good idea.<br></p><p>Dany<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>June 23, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 22 Jun 2016, at 17:27, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Of course \ is not needed a lot but when it is, *it is inconvenient for *some* people*. I am not making this up. You can cite several other users from this very thread.<br></p><p>That’s the point. Convenient key stroke sequences should be used for things you need a lot before things you don’t use a lot. <br></p><p>&gt; <br>&gt; I tried showing that it is quite distant on the keyboard from where the user’s hands rest. I tried showing that there are other keys at their finger tips where their hand is usually resting.<br>&gt; <br>&gt; 1. Do I know every international keyboard layout? No.<br>&gt; 2. Are we pretending that \ was picked because it was easier for international users? If I am wrong, I would love to hear more…else let’s not pretend that \ was the optimal key for all.<br></p><p>No, it was picked because it is the escape character for strings. The escape character(s) for strings need to be few in number (one is ideal IMO) and characters that you aren’t likely to need to type in a string as literals. $ is a particularly bad choice due to its popularity as a currency symbol.<br></p><p>&gt; <br>&gt; Like I have said repeatedly…I don’t care if \ is removed. At this point we are wasting other people’s time. I have just tried to be a voice for those that find it awkward and inconvenient.<br></p><p>I would challenge the claim that on a US keyboard or a British keyboard, the \ key is inconvenient to type. In both cases, you don’t even have to press the shift key. If you are a touch typist (I’m not), it’s a slight stretch for the right hand, but no more so than the return key or backspace (I use backspace *a lot*).<br></p><p>However, I do find the \( *combination* a little awkward but this is because of the way I normally type the (, but I would find having to type \$ every time I wanted a dollar sign intensely annoying because it is so unnecessary.<br></p><p><br>&gt; I tried not to base this just on opinion but on some *evidence*, but apparently that isn’t sufficient enough for some.<br></p><p>And I was just trying to point out that the evidence you presented does not show what you think it does. If you present evidence, I’m allowed to dispute it aren’t I?<br></p><p>&gt; <br>&gt; Brandon<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 22, 2016, at 12:20 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No it shows where your hand frequently is also<br>&gt;&gt; <br>&gt;&gt; And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/063adc064d3d040fcbfba0265019aecd?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>James Hillhouse</string> &lt;jdhillhouse4 at icloud.com&gt;<p>June 23, 2016 at 03:00:00pm</p></header><div class="content"><p>I’m going to register a -1 on this proposal. I appreciate the work that went into it, but I just don’t think any advantages for the developer community as a whole weight enough to warrant the change.<br></p><p>&gt; On Jun 23, 2016, at 4:41 AM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 22 Jun 2016, at 17:27, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Of course \ is not needed a lot but when it is, *it is inconvenient for *some* people*. I am not making this up. You can cite several other users from this very thread.<br>&gt; <br>&gt; That’s the point. Convenient key stroke sequences should be used for things you need a lot before things you don’t use a lot. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; I tried showing that it is quite distant on the keyboard from where the user’s hands rest. I tried showing that there are other keys at their finger tips where their hand is usually resting.<br>&gt;&gt; <br>&gt;&gt; 1. Do I know every international keyboard layout? No.<br>&gt;&gt; 2. Are we pretending that \ was picked because it was easier for international users? If I am wrong, I would love to hear more…else let’s not pretend that \ was the optimal key for all.<br>&gt; <br>&gt; No, it was picked because it is the escape character for strings. The escape character(s) for strings need to be few in number (one is ideal IMO) and characters that you aren’t likely to need to type in a string as literals. $ is a particularly bad choice due to its popularity as a currency symbol.<br></p><p>Changing this would add more syntax, make layers in usage where one character now exist, and does so without offering a large material advantage, imho.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Like I have said repeatedly…I don’t care if \ is removed. At this point we are wasting other people’s time. I have just tried to be a voice for those that find it awkward and inconvenient.<br>&gt; <br>&gt; I would challenge the claim that on a US keyboard or a British keyboard, the \ key is inconvenient to type. In both cases, you don’t even have to press the shift key. If you are a touch typist (I’m not), it’s a slight stretch for the right hand, but no more so than the return key or backspace (I use backspace *a lot*).<br></p><p>Compared to typing Obj-C&#39; [], which was when was tired “=“ “delete” or “]” “\”, Swift in general, including \(), is a breeze. <br></p><p>&gt; <br>&gt; However, I do find the \( *combination* a little awkward but this is because of the way I normally type the (, but I would find having to type \$ every time I wanted a dollar sign intensely annoying because it is so unnecessary.<br>&gt; <br>&gt; <br>&gt;&gt; I tried not to base this just on opinion but on some *evidence*, but apparently that isn’t sufficient enough for some.<br>&gt; <br>&gt; And I was just trying to point out that the evidence you presented does not show what you think it does. If you present evidence, I’m allowed to dispute it aren’t I?<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 22, 2016, at 12:20 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No it shows where your hand frequently is also<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>June 26, 2016 at 08:00:00pm</p></header><div class="content"><p>I prefer &quot;\&quot; as the consistent escape character in Swift. It&#39;s used in many programming languages and (I find it) easy to skim over. <br></p><p>- David<br></p><p>&gt; On 23 Jun 2016, at 22:21, James Hillhouse via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’m going to register a -1 on this proposal. I appreciate the work that went into it, but I just don’t think any advantages for the developer community as a whole weight enough to warrant the change.<br>&gt; <br>&gt;&gt; On Jun 23, 2016, at 4:41 AM, Jeremy Pereira via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jun 2016, at 17:27, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Of course \ is not needed a lot but when it is, *it is inconvenient for *some* people*. I am not making this up. You can cite several other users from this very thread.<br>&gt;&gt; <br>&gt;&gt; That’s the point. Convenient key stroke sequences should be used for things you need a lot before things you don’t use a lot. <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I tried showing that it is quite distant on the keyboard from where the user’s hands rest. I tried showing that there are other keys at their finger tips where their hand is usually resting.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Do I know every international keyboard layout? No.<br>&gt;&gt;&gt; 2. Are we pretending that \ was picked because it was easier for international users? If I am wrong, I would love to hear more…else let’s not pretend that \ was the optimal key for all.<br>&gt;&gt; <br>&gt;&gt; No, it was picked because it is the escape character for strings. The escape character(s) for strings need to be few in number (one is ideal IMO) and characters that you aren’t likely to need to type in a string as literals. $ is a particularly bad choice due to its popularity as a currency symbol.<br>&gt; <br>&gt; Changing this would add more syntax, make layers in usage where one character now exist, and does so without offering a large material advantage, imho.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Like I have said repeatedly…I don’t care if \ is removed. At this point we are wasting other people’s time. I have just tried to be a voice for those that find it awkward and inconvenient.<br>&gt;&gt; <br>&gt;&gt; I would challenge the claim that on a US keyboard or a British keyboard, the \ key is inconvenient to type. In both cases, you don’t even have to press the shift key. If you are a touch typist (I’m not), it’s a slight stretch for the right hand, but no more so than the return key or backspace (I use backspace *a lot*).<br>&gt; <br>&gt; Compared to typing Obj-C&#39; [], which was when was tired “=“ “delete” or “]” “\”, Swift in general, including \(), is a breeze. <br>&gt; <br>&gt;&gt; <br>&gt;&gt; However, I do find the \( *combination* a little awkward but this is because of the way I normally type the (, but I would find having to type \$ every time I wanted a dollar sign intensely annoying because it is so unnecessary.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; I tried not to base this just on opinion but on some *evidence*, but apparently that isn’t sufficient enough for some.<br>&gt;&gt; <br>&gt;&gt; And I was just trying to point out that the evidence you presented does not show what you think it does. If you present evidence, I’m allowed to dispute it aren’t I?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 12:20 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; No it shows where your hand frequently is also<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160626/3ddc4f22/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 22, 2016 at 06:00:00pm</p></header><div class="content"><p>This also depends on the keyboard layout you have. I mean looking at the English keyboard layout the \ character is presented and easily accessible with just a single tap.<br></p><p>For me it’s always been a problem, this is not a strong argument for changing that behavior but it would ease at least my workflow.<br></p><p>Shift + CMD + 7 == \ for my German keyboard layout.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 22. Juni 2016 um 18:21:10, Jeremy Pereira via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p><br>&gt; On 22 Jun 2016, at 17:02, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;  <br>&gt; No it shows where your hand frequently is also<br></p><p>And you don’t think there is a correlation between where the frequently pressed keys are and where your hands are? If you were needing to press the \ key a lot, there would be a hotspot over it. Then you could say “look, I need to press this key a lot and it’s miles away from the other hotspot”.  <br></p><p>&gt;  <br>&gt; Brandon<br>&gt;  <br>&gt;&gt; On Jun 22, 2016, at 12:01 PM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt; On 22 Jun 2016, at 16:41, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; My point was not to argue for the removal of \. My point was that there is a measurable way to test the usability of such a key<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt; Your heat map doesn’t test the usability of a key, it tests the frequency with which it was pressed. The fact that there was no coloured blob on the backslash key just means you don’t use it very often.<br>&gt;&gt;  <br>&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; On Jun 22, 2016, at 11:30 AM, Jeremy Pereira &lt;jeremy.j.pereira at googlemail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; I find it somewhat disturbing that we are now trying to base language design around the layout of a US English keyboard.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; “\” on my keyboard (British Macbook Pro Retina) is right next to the return key. It’s also much closer to the parentheses characters than $ is and (if you assume we are going to replace parentheses with braces as was suggested upthread) right next to the brace keys.  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Anyway, your heat map evidence actually negates the argument. If it was a frequently used key, it would have a hot spot of its own. It’s not (I tried it on some random samples of my own code), so that implies it is not a key that is used very often, which further implies it *should* be a little out of the way.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; *The* escape character for strings is “\”. Please let’s not introduce a second one.<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; On 22 Jun 2016, at 00:08, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Actually… we can go pretty scientific on this sort of thing and heat map keyboard usage to get a better picture of how “usable” this is.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I pasted a file that contains seven \’s in it and heat mapped it at https://www.patrick-wied.at/projects/heatmap-keyboard/<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Even *with* several \’s throughout my source file the majority of my key presses take place much closer to the $ key than the \ key.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I think we can all argue about what is clearer or not, but I think for the majority of us, the \ key is quite inconvenient compared to the keys around where we type the most.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; I also ran several of iOS 10’s sample code through the heat map and continue to get pretty similar results: the \ is much further from the hottest part of the keyboard than the ones closer to where your hand usually rests.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Maybe this is flawed, but I think it is hard to argue that the \ is easy to type when there are far more usable alternatives.<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jun 21, 2016, at 6:10 PM, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Jun 21, 2016 at 3:55 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward).<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt;&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;  <br>&gt;&gt;  <br>&gt;  <br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/0588fede/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/936f3d68882a1b33b775076c6b7603dd?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Wahlstedt Jyrki</string> &lt;jwa at wahlstedt.fi&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 22.6.2016, at 1.10, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br></p><p>+1<br></p><p>I’m using Finnish keyboard, for \ the key combination is opt-shift-7, then () are shift-8 and shift-9, so very easy. Actually, using @ (opt-2) or $ (opt-4) would be harder, because one would have to switch hands, using opt with right hand and then using left hand for shift for () or opt-shift for {}.<br>The code is written once, but read maybe thousands of times, so readability is immensely more important.<br></p><p>!<br>! Jyrki Wahlstedt<br>!	http://www.wahlstedt.fi/jyrki/ &lt;http://www.wahlstedt.fi/jyrki/&gt; Twitter: @jyrkiw<br>!<br>! Our life is no dream; but it ought to become one and perhaps will.<br>! <br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/bad9da1a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2d2cede3b8cb07314df0b1e2e24a559?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Wahlstedt Jyrki</string> &lt;jyrki.wahlstedt at wahlstedt.fi&gt;<p>June 22, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On 22.6.2016, at 1.10, Daniel Resnick via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I also disagree for the same reasons that Gwynne and Brent mentioned: I find &#39;\(...)&#39; easy to read, fine to type, and consistent with other string escaping syntax.<br></p><p>+1<br></p><p>I’m using Finnish keyboard, for \ the key combination is opt-shift-7, then () are shift-8 and shift-9, so very easy. Actually, using @ (opt-2) or $ (opt-4) would be harder, because one would have to switch hands, using opt with right hand and then using left hand for shift for () or opt-shift for {}.<br>The code is written once, but read maybe thousands of times, so readability is immensely more important.<br></p><p>!<br>! Jyrki Wahlstedt<br>!	http://www.wahlstedt.fi/jyrki/ Twitter: @jyrkiw<br>!<br>! Our life is no dream; but it ought to become one and perhaps will.<br>! <br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160622/fddf2bb3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>June 22, 2016 at 12:00:00am</p></header><div class="content"><p>Entirely agree. \ makes total sense as the one-and-only escaping character. I also have no trouble typing it.<br></p><p>&gt; On 21 Jun 2016, at 23:55, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; I find that typing \(var) is very disruptive to my typing flow. The more I code in Swift, the more I like it, but every time I&#39;m coding and then have to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;&gt; <br>&gt;&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps @() to go along with other uses of @ throughout the language. <br>&gt; <br>&gt; Even though I&#39;m used to Perl&#39;s and Ruby&#39;s interpolation syntaxes, I immediately liked `\(…)`. It&#39;s parsimonious: Rather than taking a third character (besides \ and &quot;) to mean something special in a string literal, it reuses one of the existing ones. There&#39;s no need to escape a character you wouldn&#39;t otherwise have to touch, or to think of another character as &quot;magical&quot; in a string. It fits nicely with the rest of the syntax, with `\` indicating a special construct and then `()` delimiting an expression, just as they do elsewhere in the language. It&#39;s an elegant solution to a problem traditionally solved inelegantly. It&#39;s very Swifty in that way.<br>&gt; <br>&gt;&gt; A shifted key, like $ or @, followed by another shifted key like (, allows for a much faster flow and they are much closer to the home keys than \ which is nearly as far from home keys as possible (and awkward). <br>&gt; <br>&gt; <br>&gt; I don&#39;t have any trouble typing it personally. If you find yourself accidentally typing `\9` or `|(`, we could probably offer an error for the former or warning for the latter with a fix-it. But if you&#39;re complaining that it takes a tiny fraction of a second longer to type than `$(` would, then honestly, I just can&#39;t bring myself to care. Swift optimizes for code reading. If we wanted to optimize for code typing instead, we&#39;d have a very different style.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e2303da56647c283b6d8e58d5831faca?s=50"></div><header><strong>Thoughts on replacing \() with $() or some other symbol</strong> from <string>Joseph Bell</string> &lt;joe at iachieved.it&gt;<p>June 26, 2016 at 01:00:00pm</p></header><div class="content"><p>Like others that have already responded, I would vote -1 to this proposal<br>based on evaluating the question &quot;Is the problem being addressed<br>significant enough to warrant a change to Swift?&quot;  My answer to that would<br>be no.  While it is indeed different from other languages there is no<br>relative difficulty in typing \( vs. any other sequence.<br></p><p>Thank you though for the time and thought put into writing up the<br>proposal.  It&#39;s this level of participation from the community and ability<br>to share thoughts and ideas in a public forum that has made open source<br>Swift so attractive to many.<br></p><p>On Tue, Jun 21, 2016 at 3:43 PM, Kenny Wyland via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hi all,<br>&gt;<br>&gt; I&#39;m new to the list and I just searched through the archives as best I<br>&gt; could to see if someone else had already brought this up, but I didn&#39;t find<br>&gt; anything. Forgive me if this horse has been beaten.<br>&gt;<br>&gt; I find that typing \(var) is very disruptive to my typing flow. The more I<br>&gt; code in Swift, the more I like it, but every time I&#39;m coding and then have<br>&gt; to hiccup while typing \ then ( causes me to be annoyed. I know, it&#39;s<br>&gt; minor, but it isn&#39;t a key combination that flows quickly.<br>&gt;<br>&gt; I would much rather have $() or perhaps ${} (like Groovy lang) or perhaps<br>&gt; @() to go along with other uses of @ throughout the language.<br>&gt;<br>&gt; A shifted key, like $ or @, followed by another shifted key like (, allows<br>&gt; for a much faster flow and they are much closer to the home keys than \<br>&gt; which is nearly as far from home keys as possible (and awkward).<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; Kenny Wyland<br>&gt; InADayDevelopment.com<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p><p><br>-- <br>Joseph Bell<br>http://dev.iachieved.it/iachievedit/<br>@iachievedit<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160626/f1218186/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
