<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e96699446cb6b3304b2c12370b429892?s=50"></div><header><strong>Multiple protocols variable - automatic class-type inference</strong> from <string>Jakub Skotnicki</string> &lt;jakubskot at gmail.com&gt;<p>July  4, 2016 at 12:00:00am</p></header><div class="content"><p>Hi,<br></p><p>I would like to make a proposal for automatic class-type inference for a<br>variable which conforms to multiple protocols. I have not seen any similar<br>proposals on swift-evolution &lt;https://github.com/apple/swift-evolution&gt;<br>site, also these in the rejected section, that is why I am mailing it to<br>discuss.<br></p><p>What is it about? (picture below - code with explanations):<br></p><p>[image: Obraz w treści 1]<br></p><p>Conclusion:<br>Multiple protocols constant variable should have its properties mutable if<br>at least one of the protocols is a class-protocol. Firstly, this solves a<br>problem of changing this variable to mutable (with var keyword), which can<br>simply be undesirable, and currently leads to a paradox warning if done on<br>a method parameter. Secondly, it solves a problem of changing specified<br>protocols to class-protocols in order to modify any properties or use<br>mutating function on such variables, which could be an unwanted constrain<br>or it is simply impossible in cases where specified protocols iare also<br>implemented by non-class types.<br></p><p>I believe it has no impact on existing code. It will simply start to work.<br></p><p>Please let me know what you think about it.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/4d0ba461/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: swift.png<br>Type: image/png<br>Size: 227332 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160704/4d0ba461/attachment-0001.png&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Multiple protocols variable - automatic class-type inference</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  5, 2016 at 05:00:00pm</p></header><div class="content"><p>These feel like bugs in the compiler. I&#39;d suggest filing a bug report at http://bugs.swift.org &lt;http://bugs.swift.org/&gt; if others don&#39;t think there is more to it...<br></p><p>&gt; On Jul 4, 2016, at 12:47 AM, Jakub Skotnicki via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I would like to make a proposal for automatic class-type inference for a variable which conforms to multiple protocols. I have not seen any similar proposals on swift-evolution &lt;https://github.com/apple/swift-evolution&gt; site, also these in the rejected section, that is why I am mailing it to discuss. <br>&gt; <br>&gt; What is it about? (picture below - code with explanations):<br>&gt; <br>&gt; &lt;swift.png&gt;<br>&gt; <br>&gt; Conclusion:<br>&gt; Multiple protocols constant variable should have its properties mutable if at least one of the protocols is a class-protocol. Firstly, this solves a problem of changing this variable to mutable (with var keyword), which can simply be undesirable, and currently leads to a paradox warning if done on a method parameter. Secondly, it solves a problem of changing specified protocols to class-protocols in order to modify any properties or use mutating function on such variables, which could be an unwanted constrain or it is simply impossible in cases where specified protocols iare also implemented by non-class types.<br>&gt; <br>&gt; I believe it has no impact on existing code. It will simply start to work.<br>&gt; <br>&gt; Please let me know what you think about it.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/61215dd7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Multiple protocols variable - automatic class-type inference</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  5, 2016 at 10:00:00am</p></header><div class="content"><p>The case with testVar4 and testVar5 is not exactly a bug—the default implementation of a mutating protocol requirement can reassign &#39;self&#39; even if the dynamic type turns out to be a class. (I&#39;m not sure that&#39;s a good feature, but it is the current behavior of Swift 3.) I agree that we should resolve the contradiction at the end somehow, though.<br></p><p>Jordan<br></p><p><br>&gt; On Jul 5, 2016, at 8:39, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; These feel like bugs in the compiler. I&#39;d suggest filing a bug report at http://bugs.swift.org &lt;http://bugs.swift.org/&gt; if others don&#39;t think there is more to it...<br>&gt; <br>&gt;&gt; On Jul 4, 2016, at 12:47 AM, Jakub Skotnicki via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I would like to make a proposal for automatic class-type inference for a variable which conforms to multiple protocols. I have not seen any similar proposals on swift-evolution &lt;https://github.com/apple/swift-evolution&gt; site, also these in the rejected section, that is why I am mailing it to discuss. <br>&gt;&gt; <br>&gt;&gt; What is it about? (picture below - code with explanations):<br>&gt;&gt; <br>&gt;&gt; &lt;swift.png&gt;<br>&gt;&gt; <br>&gt;&gt; Conclusion:<br>&gt;&gt; Multiple protocols constant variable should have its properties mutable if at least one of the protocols is a class-protocol. Firstly, this solves a problem of changing this variable to mutable (with var keyword), which can simply be undesirable, and currently leads to a paradox warning if done on a method parameter. Secondly, it solves a problem of changing specified protocols to class-protocols in order to modify any properties or use mutating function on such variables, which could be an unwanted constrain or it is simply impossible in cases where specified protocols iare also implemented by non-class types.<br>&gt;&gt; <br>&gt;&gt; I believe it has no impact on existing code. It will simply start to work.<br>&gt;&gt; <br>&gt;&gt; Please let me know what you think about it.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/dcae7d92/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e96699446cb6b3304b2c12370b429892?s=50"></div><header><strong>Multiple protocols variable - automatic class-type inference</strong> from <string>Jakub Skotnicki</string> &lt;jakubskot at gmail.com&gt;<p>July 18, 2016 at 10:00:00pm</p></header><div class="content"><p>Thanks for replies, here is the use of proposed mutating function - still<br>does not work.<br></p><p>Moreover it produces weird error in 1.1A - I think it is because of<br>mutating keyword which cannot be used in class-protocols, but still testVar<br>is a class instance, so it should not matter - but if I understand you<br>correctly Jordan, it works in Swift 3, so no worries here?<br></p><p><br>Below - I understand this is a &quot;let&quot; constant, but still it should be<br>inferred that testVar4 and testVar5 are class instances because they<br>implement ClassProtocol and AnyObject protocol accordingly.<br>The same goes for function parameters, and now it even crashes the source<br>editor when uncommenting the last line.<br></p><p><br>So is this resolved in Swift 3?<br></p><p><br>2016-07-05 19:54 GMT+02:00 Jordan Rose &lt;jordan_rose at apple.com&gt;:<br></p><p>&gt; The case with testVar4 and testVar5 is not exactly a bug—the default<br>&gt; implementation of a mutating protocol requirement can reassign &#39;self&#39; even<br>&gt; if the dynamic type turns out to be a class. (I&#39;m not sure *that&#39;s* a<br>&gt; good feature, but it is the current behavior of Swift 3.) I agree that we<br>&gt; should resolve the contradiction at the end somehow, though.<br>&gt;<br>&gt; Jordan<br>&gt;<br>&gt;<br>&gt; On Jul 5, 2016, at 8:39, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; These feel like bugs in the compiler. I&#39;d suggest filing a bug report at<br>&gt; http://bugs.swift.org if others don&#39;t think there is more to it...<br>&gt;<br>&gt; On Jul 4, 2016, at 12:47 AM, Jakub Skotnicki via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Hi,<br>&gt;<br>&gt; I would like to make a proposal for automatic class-type inference for a<br>&gt; variable which conforms to multiple protocols. I have not seen any similar<br>&gt; proposals on swift-evolution &lt;https://github.com/apple/swift-evolution&gt;<br>&gt; site, also these in the rejected section, that is why I am mailing it to<br>&gt; discuss.<br>&gt;<br>&gt; What is it about? (picture below - code with explanations):<br>&gt;<br>&gt; &lt;swift.png&gt;<br>&gt;<br>&gt; Conclusion:<br>&gt; Multiple protocols constant variable should have its properties mutable if<br>&gt; at least one of the protocols is a class-protocol. Firstly, this solves a<br>&gt; problem of changing this variable to mutable (with var keyword), which can<br>&gt; simply be undesirable, and currently leads to a paradox warning if done on<br>&gt; a method parameter. Secondly, it solves a problem of changing specified<br>&gt; protocols to class-protocols in order to modify any properties or use<br>&gt; mutating function on such variables, which could be an unwanted constrain<br>&gt; or it is simply impossible in cases where specified protocols iare also<br>&gt; implemented by non-class types.<br>&gt;<br>&gt; I believe it has no impact on existing code. It will simply start to work.<br>&gt;<br>&gt; Please let me know what you think about it.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/c42fe7fc/attachment-0001.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: swift_mutating.png<br>Type: image/png<br>Size: 114252 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/c42fe7fc/attachment-0002.png&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: swift_mutating2.png<br>Type: image/png<br>Size: 192490 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160718/c42fe7fc/attachment-0003.png&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
