<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/86f0b76b19fe3a655fdaa6c8bd1f9f1e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Roth Michaels</string> &lt;roth at rothmichaels.us&gt;<p>June 14, 2016 at 06:00:00pm</p></header><div class="content"><p>On Sun, Jun 12 2016 at 02:01:17 AM, Andrey Fidrya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Nil coalescing operator has very low precedence and it&#39;s very easy to forget the parentheses.<br>&gt; It&#39;s tempting to write something like this:<br>&gt;<br>&gt; let result = v1 ?? 0 + v2 ?? 0<br>&gt;<br>&gt; Which will resolve to<br>&gt;<br>&gt; let result = v1 ?? (0 + v2 ?? 0)<br></p><p>This is how I would expected the operator to work.<br></p><p>&gt; This seems to be a source of errors in other languages as well, for example:<br>&gt; http://www.codeproject.com/Tips/721145/Beware-The-null-coalescing-operator-is-low-in-the<br>&gt;<br>&gt; I propose to consider raising it&#39;s precedence or requiring parentheses if ?? is used with multiple statements.<br></p><p>I like the idea of requiring parenthesis (or at least having a warning)<br>on ambiguous lines with two `??`.<br></p><p>--<br>Roth<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/835a02e14abc997b2c9c9a65f1d70732?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Andrey Fidrya</string> &lt;af at zabiyaka.com&gt;<p>June 15, 2016 at 01:00:00am</p></header><div class="content"><p>I&#39;ve given it some more thought... Even expressions with single ?? can be confusing.<br>For example:<br></p><p>1)<br></p><p>let z = a ?? x + y + z<br></p><p>Actually it&#39;s<br>let z = a ?? (x + y + z)<br></p><p>But can be mistakenly interpreted as<br>let z = (a ?? x) + y + z<br></p><p>2) Same problem with ?:<br></p><p>let z = a ? b : c + x + y<br></p><p>It&#39;s<br>let z = a ? b : (c + x + y)<br></p><p>Not<br>let z = (a ? b : c) + x + y<br></p><p>Possibly warnings should be shown in both these cases. Or is it too extreme?<br></p><p>--<br>Andrey Fidrya<br></p><p><br></p><p>&gt; On 15 Jun 2016, at 01:08, Roth Michaels via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Sun, Jun 12 2016 at 02:01:17 AM, Andrey Fidrya via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Nil coalescing operator has very low precedence and it&#39;s very easy to forget the parentheses.<br>&gt;&gt; It&#39;s tempting to write something like this:<br>&gt;&gt; <br>&gt;&gt; let result = v1 ?? 0 + v2 ?? 0<br>&gt;&gt; <br>&gt;&gt; Which will resolve to<br>&gt;&gt; <br>&gt;&gt; let result = v1 ?? (0 + v2 ?? 0)<br>&gt; <br>&gt; This is how I would expected the operator to work.<br>&gt; <br>&gt;&gt; This seems to be a source of errors in other languages as well, for example:<br>&gt;&gt; http://www.codeproject.com/Tips/721145/Beware-The-null-coalescing-operator-is-low-in-the<br>&gt;&gt; <br>&gt;&gt; I propose to consider raising it&#39;s precedence or requiring parentheses if ?? is used with multiple statements.<br>&gt; <br>&gt; I like the idea of requiring parenthesis (or at least having a warning)<br>&gt; on ambiguous lines with two `??`.<br>&gt; <br>&gt; --<br>&gt; Roth<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/e3e41995/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 14, 2016 at 11:00:00pm</p></header><div class="content"><p>This is an orthogonal issue to the first that you identified. The first has<br>to do with the associativity of the operator, the second has to do with the<br>precedence of the operator.<br></p><p>I think there&#39;s sufficient confusion about the first that it&#39;s worth<br>addressing. However, with respect to precedence, at the end of the day<br>every operator has to have a precedence. Since ?? and ?: have no<br>counterparts in math, there&#39;s no reason that a new user would know whether<br>the precedence is higher or lower than that of arithmetic operators. It&#39;s<br>simply listed in a table.<br></p><p>I don&#39;t know that it&#39;s feasible to warn on every use of operators with<br>mixed precedence. Doing so would effectively do away with the concept of<br>precedence at all, since everything would have to be grouped by parentheses<br>in order to avoid warnings. (The core team has been pretty clear that there<br>will be no &#39;optional&#39; warnings, and in certain organizations warnings are<br>regarded as errors.)<br>On Tue, Jun 14, 2016 at 17:50 Andrey Fidrya via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I&#39;ve given it some more thought... Even expressions with single ?? can be<br>&gt; confusing.<br>&gt; For example:<br>&gt;<br>&gt; 1)<br>&gt;<br>&gt; let z = a ?? x + y + z<br>&gt;<br>&gt; Actually it&#39;s<br>&gt; let z = a ?? (x + y + z)<br>&gt;<br>&gt; But can be mistakenly interpreted as<br>&gt; let z = (a ?? x) + y + z<br>&gt;<br>&gt; 2) Same problem with ?:<br>&gt;<br>&gt; let z = a ? b : c + x + y<br>&gt;<br>&gt; It&#39;s<br>&gt; let z = a ? b : (c + x + y)<br>&gt;<br>&gt; Not<br>&gt; let z = (a ? b : c) + x + y<br>&gt;<br>&gt; Possibly warnings should be shown in both these cases. Or is it too<br>&gt; extreme?<br>&gt;<br>&gt; --<br>&gt; Andrey Fidrya<br>&gt;<br>&gt;<br>&gt;<br>&gt; On 15 Jun 2016, at 01:08, Roth Michaels via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Sun, Jun 12 2016 at 02:01:17 AM, Andrey Fidrya via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Nil coalescing operator has very low precedence and it&#39;s very easy to<br>&gt; forget the parentheses.<br>&gt; It&#39;s tempting to write something like this:<br>&gt;<br>&gt; let result = v1 ?? 0 + v2 ?? 0<br>&gt;<br>&gt; Which will resolve to<br>&gt;<br>&gt; let result = v1 ?? (0 + v2 ?? 0)<br>&gt;<br>&gt;<br>&gt; This is how I would expected the operator to work.<br>&gt;<br>&gt; This seems to be a source of errors in other languages as well, for<br>&gt; example:<br>&gt;<br>&gt; http://www.codeproject.com/Tips/721145/Beware-The-null-coalescing-operator-is-low-in-the<br>&gt;<br>&gt; I propose to consider raising it&#39;s precedence or requiring parentheses if<br>&gt; ?? is used with multiple statements.<br>&gt;<br>&gt;<br>&gt; I like the idea of requiring parenthesis (or at least having a warning)<br>&gt; on ambiguous lines with two `??`.<br>&gt;<br>&gt; --<br>&gt; Roth<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160614/6ea49e88/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I don&#39;t know that it&#39;s feasible to warn on every use of operators with mixed precedence. Doing so would effectively do away with the concept of precedence at all, since everything would have to be grouped by parentheses in order to avoid warnings. (The core team has been pretty clear that there will be no &#39;optional&#39; warnings, and in certain organizations warnings are regarded as errors.)<br></p><p>Personally I’m against precedence entirely, as I’m terrible at remembering the order and even if I could I’d still see myself making tons of mistakes, as a result I use parenthesis in all but the simplest statements just to be absolutely clear. The problem with precedence is that while it lets the compiler choose a logical order to process expressions, you can never be sure that it’s actually the order the user intended.<br></p><p>Still, I may be in the minority, not sure, maybe other people are happier with math operator precedence than I am. However, I think that effectively forcing parenthesis on ?? and ?: may be okay; most of the time these are used in simple, non-ambiguous cases (either on their own, or with an assignment), so parenthesis shouldn’t be needed, but anywhere they’re within larger statements I think it makes sense to encourage parenthesis use so the compiler can be certain it isn’t guessing at your meaning. I mean it’s kind of like forcing a defensive coding style, but that’s not necessarily a bad thing; I’ve learned from experience that I suck at operator precedence and instead of wasting time looking it up to be sure, hurling a bunch of parenthesis in place not only clarifies my intent, but avoids the problem entirely, I wish more people would do it, as I still run into cases in other people’s code where it takes some time to figure out meaning (usually because these operator precedence obsessed monsters don’t leave comments either ;)<br></p><p>Increasing the precedence won’t help IMO, as it remains just as possible for a user to make a mistake, plus we run the risk of changing the result of currently correct code that works fine with the current precedence but will suddenly give different results if evaluated sooner.<br></p><p>So yeah, I think recommending parenthesis is a good compromise, and good style to encourage when using these operators in more complex cases, not just for avoiding mistakes but also to make the code more readable for others.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 for all of your opinions. I also believe that wrong assumption on <br>precedence is a reason of big number of errors. More, I believe precedence <br>in complex expressions can confuse not less than removed ++/-- operators <br>(or requirement to explicit type conversions for different integers types <br>in expression) and it will be Swifty way to prevent this kind of confusion <br>also in the language.<br></p><p>On 15.06.2016 11:31, Haravikk via swift-evolution wrote:<br>&gt;<br>&gt;&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote: I don&#39;t know that it&#39;s feasible to<br>&gt;&gt; warn on every use of operators with mixed precedence. Doing so would<br>&gt;&gt; effectively do away with the concept of precedence at all, since<br>&gt;&gt; everything would have to be grouped by parentheses in order to avoid<br>&gt;&gt; warnings. (The core team has been pretty clear that there will be no<br>&gt;&gt; &#39;optional&#39; warnings, and in certain organizations warnings are<br>&gt;&gt; regarded as errors.)<br>&gt;<br>&gt; Personally I’m against precedence entirely, as I’m terrible at<br>&gt; remembering the order and even if I could I’d still see myself making<br>&gt; tons of mistakes, as a result I use parenthesis in all but the simplest<br>&gt; statements just to be absolutely clear. The problem with precedence is<br>&gt; that while it lets the compiler choose a logical order to process<br>&gt; expressions, you can never be sure that it’s actually the order the user<br>&gt; intended.<br>&gt;<br>&gt; Still, I may be in the minority, not sure, maybe other people are<br>&gt; happier with math operator precedence than I am. However, I think that<br>&gt; effectively forcing parenthesis on ?? and ?: may be okay; most of the<br>&gt; time these are used in simple, non-ambiguous cases (either on their own,<br>&gt; or with an assignment), so parenthesis shouldn’t be needed, but anywhere<br>&gt; they’re within larger statements I think it makes sense to encourage<br>&gt; parenthesis use so the compiler can be certain it isn’t guessing at your<br>&gt; meaning. I mean it’s kind of like forcing a defensive coding style, but<br>&gt; that’s not necessarily a bad thing; I’ve learned from experience that I<br>&gt; suck at operator precedence and instead of wasting time looking it up to<br>&gt; be sure, hurling a bunch of parenthesis in place not only clarifies my<br>&gt; intent, but avoids the problem entirely, I wish more people would do it,<br>&gt; as I still run into cases in other people’s code where it takes some<br>&gt; time to figure out meaning (usually because these operator precedence<br>&gt; obsessed monsters don’t leave comments either ;)<br>&gt;<br>&gt; Increasing the precedence won’t help IMO, as it remains just as possible<br>&gt; for a user to make a mistake, plus we run the risk of changing the<br>&gt; result of currently correct code that works fine with the current<br>&gt; precedence but will suddenly give different results if evaluated<br>&gt; sooner.<br>&gt;<br>&gt; So yeah, I think recommending parenthesis is a good compromise, and good<br>&gt; style to encourage when using these operators in more complex cases, not<br>&gt; just for avoiding mistakes but also to make the code more readable for<br>&gt; others. _______________________________________________ swift-evolution<br>&gt; mailing list swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I don&#39;t know that it&#39;s feasible to warn on every use of operators with mixed precedence. Doing so would effectively do away with the concept of precedence at all, since everything would have to be grouped by parentheses in order to avoid warnings. (The core team has been pretty clear that there will be no &#39;optional&#39; warnings, and in certain organizations warnings are regarded as errors.)<br></p><p>Personally I’m against precedence entirely, as I’m terrible at remembering the order and even if I could I’d still see myself making tons of mistakes, as a result I use parenthesis in all but the simplest statements just to be absolutely clear. The problem with precedence is that while it lets the compiler choose a logical order to process expressions, you can never be sure that it’s actually the order the user intended.<br></p><p>Still, I may be in the minority, not sure, maybe other people are happier with math operator precedence than I am. However, I think that effectively forcing parenthesis on ?? and ?: may be okay; most of the time these are used in simple, non-ambiguous cases (either on their own, or with an assignment), so parenthesis shouldn’t be needed, but anywhere they’re within larger statements I think it makes sense to encourage parenthesis use so the compiler can be certain it isn’t guessing at your meaning. I mean it’s kind of like forcing a defensive coding style, but that’s not necessarily a bad thing; I’ve learned from experience that I suck at operator precedence and instead of wasting time looking it up to be sure, hurling a bunch of parenthesis in place not only clarifies my intent, but avoids the problem entirely, I wish more people would do it, as I still run into cases in other people’s code where it takes some time to figure out meaning (usually because these operator precedence obsessed monsters don’t leave comments either ;)<br></p><p>Increasing the precedence won’t help IMO, as it remains just as possible for a user to make a mistake, plus we run the risk of changing the result of currently correct code that works fine with the current precedence but will suddenly give different results if evaluated sooner.<br></p><p>So yeah, I think recommending parenthesis is a good compromise, and good style to encourage when using these operators in more complex cases, not just for avoiding mistakes but also to make the code more readable for others.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>June 15, 2016 at 06:00:00am</p></header><div class="content"><p>I agree, precedence should be left for math operations that are known by all. Since this is not a normal operation, it should be left up to the developer to tell the computer what to do. The computer should not assume for you how to handle complex operations next to a nil coalescing operator.<br></p><p>I am intrigued with the idea of explaining to the developer what the order of their current code will run. Almost like a hint or warning. If there was a feature in Xcode that explained the order of operations for a given line of code, this would help the developer choose where to put parenthesis. But, I don’t believe we should suggest where the parenthesis go (this becomes another assumption on how they want their code to be). Misaligned assumptions can frustrate the developer and slow down their coding or confuse them more.<br></p><p>What does everyone think about adding a visual explanation with the order of operations in a formula.<br></p><p>Example:<br></p><p>var a = b + c * d / e<br></p><p>Visual Hint (maybe popup like Quick Help or something simpler)<br></p><p>var a = (b + ((c * d) / e))<br></p><p>Or<br></p><p>var x = c * d<br>var y = x / e<br>var z = b + y<br></p><p>Some way to quickly represent the order to inform a developer of the current order. <br></p><p>I believe there needs to be more communication between the developer and the computer. An open dialog about what the developer is trying to tell the computer to do. If the computer says “this is what I think you are telling me to do”, the developer then can decide if they wrote the correct line of code.<br></p><p>Thanks,<br>Jo<br></p><p>&gt; On Jun 15, 2016, at 4:31 AM, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I don&#39;t know that it&#39;s feasible to warn on every use of operators with mixed precedence. Doing so would effectively do away with the concept of precedence at all, since everything would have to be grouped by parentheses in order to avoid warnings. (The core team has been pretty clear that there will be no &#39;optional&#39; warnings, and in certain organizations warnings are regarded as errors.)<br>&gt; <br>&gt; Personally I’m against precedence entirely, as I’m terrible at remembering the order and even if I could I’d still see myself making tons of mistakes, as a result I use parenthesis in all but the simplest statements just to be absolutely clear. The problem with precedence is that while it lets the compiler choose a logical order to process expressions, you can never be sure that it’s actually the order the user intended.<br>&gt; <br>&gt; Still, I may be in the minority, not sure, maybe other people are happier with math operator precedence than I am. However, I think that effectively forcing parenthesis on ?? and ?: may be okay; most of the time these are used in simple, non-ambiguous cases (either on their own, or with an assignment), so parenthesis shouldn’t be needed, but anywhere they’re within larger statements I think it makes sense to encourage parenthesis use so the compiler can be certain it isn’t guessing at your meaning. I mean it’s kind of like forcing a defensive coding style, but that’s not necessarily a bad thing; I’ve learned from experience that I suck at operator precedence and instead of wasting time looking it up to be sure, hurling a bunch of parenthesis in place not only clarifies my intent, but avoids the problem entirely, I wish more people would do it, as I still run into cases in other people’s code where it takes some time to figure out meaning (usually because these operator precedence obsessed monsters don’t leave comments either ;)<br>&gt; <br>&gt; Increasing the precedence won’t help IMO, as it remains just as possible for a user to make a mistake, plus we run the risk of changing the result of currently correct code that works fine with the current precedence but will suddenly give different results if evaluated sooner.<br>&gt; <br>&gt; So yeah, I think recommending parenthesis is a good compromise, and good style to encourage when using these operators in more complex cases, not just for avoiding mistakes but also to make the code more readable for others.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/c06924d2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 03:00:00pm</p></header><div class="content"><p>I believe we should not take into account any IDE features when discussing <br>the *language*. One will write Swift script code in vim on linux, other <br>will read in web browser on github etc.<br>And more, as I understand, in this mailing list we have no opportunity to <br>move any IDE-related idea forward.<br></p><p>Although personally I support requirement of parenthesis for complex cases <br>(because IMO no personal style preferences can justify the very possible <br>bugs/errors in such expressions. if not for the one who wrote the code, <br>then most likely for one who is reading the code), and I do believe such <br>feature will increase the quality of Swift result code and reduce number of <br>possible errors... core team was clear that they will not accept such kind <br>of proposals. The solution they suggest to solve such kind of problems - <br>use lints and other 3rd party source checking tools.<br></p><p>On 15.06.2016 13:35, Jo Albright via swift-evolution wrote:<br>&gt; I agree, precedence should be left for math operations that are known by<br>&gt; all. Since this is not a normal operation, it should be left up to the<br>&gt; developer to tell the computer what to do. The computer should not assume<br>&gt; for you how to handle complex operations next to a nil coalescing operator.<br>&gt;<br>&gt; I am intrigued with the idea of explaining to the developer what the order<br>&gt; of their current code will run. Almost like a hint or warning. If there was<br>&gt; a feature in Xcode that explained the order of operations for a given line<br>&gt; of code, this would help the developer choose where to put parenthesis.<br>&gt; But, I don’t believe we should suggest where the parenthesis go (this<br>&gt; becomes another assumption on how they want their code to be). Misaligned<br>&gt; assumptions can frustrate the developer and slow down their coding or<br>&gt; confuse them more.<br>&gt;<br>&gt; What does everyone think about adding a visual explanation with the order<br>&gt; of operations in a formula.<br>&gt;<br>&gt; Example:<br>&gt;<br>&gt; var a = b + c * d / e<br>&gt;<br>&gt; Visual Hint (maybe popup like Quick Help or something simpler)<br>&gt;<br>&gt; var a = (b + ((c * d) / e))<br>&gt;<br>&gt; Or<br>&gt;<br>&gt; var x = c * d<br>&gt; var y = x / e<br>&gt; var z = b + y<br>&gt;<br>&gt; Some way to quickly represent the order to inform a developer of the<br>&gt; current order.<br>&gt;<br>&gt; *I believe there needs to be more communication between the developer and<br>&gt; the computer. An open dialog about what the developer is trying to tell the<br>&gt; computer to do. If the computer says “this is what I think you are telling<br>&gt; me to do”, the developer then can decide if they wrote the correct line of<br>&gt; code.*<br>&gt;<br>&gt; Thanks,<br>&gt; Jo<br>&gt;<br>&gt;&gt; On Jun 15, 2016, at 4:31 AM, Haravikk via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; I don&#39;t know that it&#39;s feasible to warn on every use of operators with<br>&gt;&gt;&gt; mixed precedence. Doing so would effectively do away with the concept of<br>&gt;&gt;&gt; precedence at all, since everything would have to be grouped by<br>&gt;&gt;&gt; parentheses in order to avoid warnings. (The core team has been pretty<br>&gt;&gt;&gt; clear that there will be no &#39;optional&#39; warnings, and in certain<br>&gt;&gt;&gt; organizations warnings are regarded as errors.)<br>&gt;&gt;<br>&gt;&gt; Personally I’m against precedence entirely, as I’m terrible at<br>&gt;&gt; remembering the order and even if I could I’d still see myself making<br>&gt;&gt; tons of mistakes, as a result I use parenthesis in all but the simplest<br>&gt;&gt; statements just to be absolutely clear. The problem with precedence is<br>&gt;&gt; that while it lets the compiler choose a logical order to process<br>&gt;&gt; expressions, you can never be sure that it’s actually the order the user<br>&gt;&gt; intended.<br>&gt;&gt;<br>&gt;&gt; Still, I may be in the minority, not sure, maybe other people are happier<br>&gt;&gt; with math operator precedence than I am. However, I think that<br>&gt;&gt; effectively forcing parenthesis on ?? and ?: may be okay; most of the<br>&gt;&gt; time these are used in simple, non-ambiguous cases (either on their own,<br>&gt;&gt; or with an assignment), so parenthesis shouldn’t be needed, but anywhere<br>&gt;&gt; they’re within larger statements I think it makes sense to encourage<br>&gt;&gt; parenthesis use so the compiler can be certain it isn’t guessing at your<br>&gt;&gt; meaning. I mean it’s kind of like forcing a defensive coding style, but<br>&gt;&gt; that’s not necessarily a bad thing; I’ve learned from experience that I<br>&gt;&gt; suck at operator precedence and instead of wasting time looking it up to<br>&gt;&gt; be sure, hurling a bunch of parenthesis in place not only clarifies my<br>&gt;&gt; intent, but avoids the problem entirely, I wish more people would do it,<br>&gt;&gt; as I still run into cases in other people’s code where it takes some time<br>&gt;&gt; to figure out meaning (usually because these operator precedence obsessed<br>&gt;&gt; monsters don’t leave comments either ;)<br>&gt;&gt;<br>&gt;&gt; Increasing the precedence won’t help IMO, as it remains just as possible<br>&gt;&gt; for a user to make a mistake, plus we run the risk of changing the result<br>&gt;&gt; of currently correct code that works fine with the current precedence but<br>&gt;&gt; will suddenly give different results if evaluated sooner.<br>&gt;&gt;<br>&gt;&gt; So yeah, I think recommending parenthesis is a good compromise, and good<br>&gt;&gt; style to encourage when using these operators in more complex cases, not<br>&gt;&gt; just for avoiding mistakes but also to make the code more readable for<br>&gt;&gt; others.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June 15, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 15, 2016, at 7:21 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I believe we should not take into account any IDE features when discussing the *language*. One will write Swift script code in vim on linux, other will read in web browser on github etc.<br></p><p>Unrelated to anything else in this discussion, I just wanted to respond to this and say that I’m totally opposed to this line of thinking. If we continue to design languages that must accommodate the lowest common denominator in terms of tooling, we’ll never advance anything in meaningful ways. Tooling is super important and it is mostly terrible. It could be so much better. We don’t have much (any?) influence over Xcode via swift-evolution, but if the language evolves in ways where smarter, better, more advanced IDEs are the best way to use it, then Xcode will adapt and if Xcode adapts and proves a better workflow, then other tools will also adapt and everyone in any language on all platforms will eventually benefit from that exploration.<br></p><p>l8r<br>Sean<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 10:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 9:19 AM, Sean Heber via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 15, 2016, at 7:21 AM, Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I believe we should not take into account any IDE features when<br>&gt; discussing the *language*. One will write Swift script code in vim on<br>&gt; linux, other will read in web browser on github etc.<br>&gt;<br>&gt; Unrelated to anything else in this discussion, I just wanted to respond to<br>&gt; this and say that I’m totally opposed to this line of thinking. If we<br>&gt; continue to design languages that must accommodate the lowest common<br>&gt; denominator in terms of tooling, we’ll never advance anything in meaningful<br>&gt; ways. Tooling is super important and it is mostly terrible. It could be so<br>&gt; much better.<br></p><p><br>I believe the core team has pointed out in the past that in fact decisions<br>here *should* acknowledge the existence of the whole ecosystem of tools.<br></p><p><br>&gt; We don’t have much (any?) influence over Xcode via swift-evolution,<br></p><p><br>Actually, IIUC, anything in the Swift open source project is fair game<br>here, and SourceKit (which supports IDE features for Swift) is indeed part<br>of the open source project.<br></p><p><br>&gt; but if the language evolves in ways where smarter, better, more advanced<br>&gt; IDEs are the best way to use it, then Xcode will adapt and if Xcode adapts<br>&gt; and proves a better workflow, then other tools will also adapt and everyone<br>&gt; in any language on all platforms will eventually benefit from that<br>&gt; exploration.<br>&gt;<br>&gt; l8r<br>&gt; Sean<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/e3ef10d1/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 06:00:00pm</p></header><div class="content"><p>On 15.06.2016 17:19, Sean Heber wrote:<br>&gt;<br>&gt;&gt; On Jun 15, 2016, at 7:21 AM, Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I believe we should not take into account any IDE features when<br>&gt;&gt; discussing the *language*. One will write Swift script code in vim on<br>&gt;&gt; linux, other will read in web browser on github etc.<br>&gt;<br>&gt; Unrelated to anything else in this discussion, I just wanted to respond<br>&gt; to this and say that I’m totally opposed to this line of thinking. If we<br>&gt; continue to design languages that must accommodate the lowest common<br>&gt; denominator in terms of tooling, we’ll never advance anything in<br>&gt; meaningful ways. Tooling is super important and it is mostly terrible.<br>&gt; It could be so much better. We don’t have much (any?) influence over<br>&gt; Xcode via swift-evolution, but if the language evolves in ways where<br>&gt; smarter, better, more advanced IDEs are the best way to use it, then<br>&gt; Xcode will adapt and if Xcode adapts and proves a better workflow, then<br>&gt; other tools will also adapt and everyone in any language on all<br>&gt; platforms will eventually benefit from that exploration.<br></p><p>Well, of course I support improvement of tools &amp; IDEs in all the ways that <br>can help developer. But I&#39;m against suggestions to solve some problem *in <br>languge* by introducing some feature in *IDE*(especially in only one IDE - <br>XCode), like the suggestion to solve ambiguity with order of processing in <br>complex expression by *only* showing some hints in XCode.<br>I.e. I&#39;m voting to solve problem in language itself first, and then(or if <br>can&#39;t be solved) in IDE.<br></p><p>&gt;<br>&gt; l8r Sean<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 11:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 10:51 AM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 15.06.2016 17:19, Sean Heber wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 15, 2016, at 7:21 AM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I believe we should not take into account any IDE features when<br>&gt;&gt;&gt; discussing the *language*. One will write Swift script code in vim on<br>&gt;&gt;&gt; linux, other will read in web browser on github etc.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Unrelated to anything else in this discussion, I just wanted to respond<br>&gt;&gt; to this and say that I’m totally opposed to this line of thinking. If we<br>&gt;&gt; continue to design languages that must accommodate the lowest common<br>&gt;&gt; denominator in terms of tooling, we’ll never advance anything in<br>&gt;&gt; meaningful ways. Tooling is super important and it is mostly terrible.<br>&gt;&gt; It could be so much better. We don’t have much (any?) influence over<br>&gt;&gt; Xcode via swift-evolution, but if the language evolves in ways where<br>&gt;&gt; smarter, better, more advanced IDEs are the best way to use it, then<br>&gt;&gt; Xcode will adapt and if Xcode adapts and proves a better workflow, then<br>&gt;&gt; other tools will also adapt and everyone in any language on all<br>&gt;&gt; platforms will eventually benefit from that exploration.<br>&gt;&gt;<br>&gt;<br>&gt; Well, of course I support improvement of tools &amp; IDEs in all the ways that<br>&gt; can help developer. But I&#39;m against suggestions to solve some problem *in<br>&gt; languge* by introducing some feature in *IDE*(especially in only one IDE -<br>&gt; XCode), like the suggestion to solve ambiguity with order of processing in<br>&gt; complex expression by *only* showing some hints in XCode.<br>&gt; I.e. I&#39;m voting to solve problem in language itself first, and then(or if<br>&gt; can&#39;t be solved) in IDE.<br></p><p><br>I think the counterpoint to be made here is that if a satisfying solution<br>to the problem can be found through better tooling, then arguably the<br>problem lies with tooling and not with the language itself.<br></p><p><br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt; l8r Sean<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/bdb3dfeb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June 15, 2016 at 08:00:00pm</p></header><div class="content"><p>On 15.06.2016 19:00, Xiaodi Wu wrote:<br>&gt; On Wed, Jun 15, 2016 at 10:51 AM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     On 15.06.2016 17:19, Sean Heber wrote:<br>&gt;<br>&gt;<br>&gt;             On Jun 15, 2016, at 7:21 AM, Vladimir.S via swift-evolution<br>&gt;             &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;             wrote:<br>&gt;<br>&gt;             I believe we should not take into account any IDE features when<br>&gt;             discussing the *language*. One will write Swift script code in<br>&gt;             vim on<br>&gt;             linux, other will read in web browser on github etc.<br>&gt;<br>&gt;<br>&gt;         Unrelated to anything else in this discussion, I just wanted to respond<br>&gt;         to this and say that I’m totally opposed to this line of thinking.<br>&gt;         If we<br>&gt;         continue to design languages that must accommodate the lowest common<br>&gt;         denominator in terms of tooling, we’ll never advance anything in<br>&gt;         meaningful ways. Tooling is super important and it is mostly terrible.<br>&gt;         It could be so much better. We don’t have much (any?) influence over<br>&gt;         Xcode via swift-evolution, but if the language evolves in ways where<br>&gt;         smarter, better, more advanced IDEs are the best way to use it, then<br>&gt;         Xcode will adapt and if Xcode adapts and proves a better workflow, then<br>&gt;         other tools will also adapt and everyone in any language on all<br>&gt;         platforms will eventually benefit from that exploration.<br>&gt;<br>&gt;<br>&gt;     Well, of course I support improvement of tools &amp; IDEs in all the ways<br>&gt;     that can help developer. But I&#39;m against suggestions to solve some<br>&gt;     problem *in languge* by introducing some feature in *IDE*(especially in<br>&gt;     only one IDE - XCode), like the suggestion to solve ambiguity with<br>&gt;     order of processing in complex expression by *only* showing some hints<br>&gt;     in XCode.<br>&gt;     I.e. I&#39;m voting to solve problem in language itself first, and then(or<br>&gt;     if can&#39;t be solved) in IDE.<br>&gt;<br>&gt;<br>&gt; I think the counterpoint to be made here is that if a satisfying solution<br>&gt; to the problem can be found through better tooling, then arguably the<br>&gt; problem lies with tooling and not with the language itself.<br></p><p>Yes, probably. But I do believe the language itself is a first class <br>citizen, tools are just helpers. You need to have the same coding features <br>on any platform/editor/IDE where you write Swift code. You should not be <br>able to easily write complex expressions just because of super-smart helper <br>in XCode but be without help on Linux platform. Tool can exist for example <br>only for XCode but absent for other platform you are coding on also. IMO <br>You just can&#39;t depend on tools in the question of language features. This <br>is my strong opinion.<br></p><p>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;         l8r Sean<br>&gt;<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Nil coalescing operator precedence</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June 15, 2016 at 08:00:00am</p></header><div class="content"><p>On Wed, Jun 15, 2016 at 5:35 AM, Jo Albright &lt;me at jo2.co&gt; wrote:<br></p><p>&gt; I agree, precedence should be left for math operations that are known by<br>&gt; all.<br>&gt;<br></p><p>Practically, this is largely the case, in that stdlib operators are more or<br>less restricted to math operations. Previously, I raised the issue of<br>bitwise operators and was told that their precedence had been intentionally<br>rationalized to parallel the more familiar math operations; moreover, Swift<br>already forces parentheses when bitwise operators are used in combinations<br>with some other operators that are ambiguous. Other than those, the<br>operators that are not really related to arithmetic are the range (... and<br>..&lt;), nil coalescing (??), and ternary (?:) operators. (And assignment<br>operators, but those are special.)<br></p><p><br>&gt; Since this is not a normal operation, it should be left up to the<br>&gt; developer to tell the computer what to do. The computer should not assume<br>&gt; for you how to handle complex operations next to a nil coalescing operator.<br>&gt;<br></p><p>In this case, regarding non-arithmetic operators, all of these are actually<br>lower precedence than the arithmetic ones. That&#39;s a teachable rule, and<br>also largely holds true for other languages in the C family as well.<br></p><p><br>&gt; I am intrigued with the idea of explaining to the developer what the order<br>&gt; of their current code will run. Almost like a hint or warning. If there was<br>&gt; a feature in Xcode that explained the order of operations for a given line<br>&gt; of code, this would help the developer choose where to put parenthesis.<br>&gt; But, I don’t believe we should suggest where the parenthesis go (this<br>&gt; becomes another assumption on how they want their code to be). Misaligned<br>&gt; assumptions can frustrate the developer and slow down their coding or<br>&gt; confuse them more.<br>&gt;<br>&gt; What does everyone think about adding a visual explanation with the order<br>&gt; of operations in a formula.<br>&gt;<br>&gt; Example:<br>&gt;<br>&gt; var a = b + c * d / e<br>&gt;<br>&gt; Visual Hint (maybe popup like Quick Help or something simpler)<br>&gt;<br>&gt; var a = (b + ((c * d) / e))<br>&gt;<br>&gt; Or<br>&gt;<br>&gt; var x = c * d<br>&gt; var y = x / e<br>&gt; var z = b + y<br>&gt;<br>&gt; Some way to quickly represent the order to inform a developer of the<br>&gt; current order.<br>&gt;<br>&gt; *I believe there needs to be more communication between the developer and<br>&gt; the computer. An open dialog about what the developer is trying to tell the<br>&gt; computer to do. If the computer says “this is what I think you are telling<br>&gt; me to do”, the developer then can decide if they wrote the correct line of<br>&gt; code.*<br>&gt;<br>&gt; Thanks,<br>&gt; Jo<br>&gt;<br>&gt; On Jun 15, 2016, at 4:31 AM, Haravikk via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On 15 Jun 2016, at 00:21, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; I don&#39;t know that it&#39;s feasible to warn on every use of operators with<br>&gt; mixed precedence. Doing so would effectively do away with the concept of<br>&gt; precedence at all, since everything would have to be grouped by parentheses<br>&gt; in order to avoid warnings. (The core team has been pretty clear that there<br>&gt; will be no &#39;optional&#39; warnings, and in certain organizations warnings are<br>&gt; regarded as errors.)<br>&gt;<br>&gt;<br>&gt; Personally I’m against precedence entirely, as I’m terrible at remembering<br>&gt; the order and even if I could I’d still see myself making tons of mistakes,<br>&gt; as a result I use parenthesis in all but the simplest statements just to be<br>&gt; absolutely clear. The problem with precedence is that while it lets the<br>&gt; compiler choose a logical order to process expressions, you can never be<br>&gt; sure that it’s actually the order the user intended.<br>&gt;<br>&gt; Still, I may be in the minority, not sure, maybe other people are happier<br>&gt; with math operator precedence than I am. However, I think that effectively<br>&gt; forcing parenthesis on ?? and ?: may be okay; most of the time these are<br>&gt; used in simple, non-ambiguous cases (either on their own, or with an<br>&gt; assignment), so parenthesis shouldn’t be needed, but anywhere they’re<br>&gt; within larger statements I think it makes sense to encourage parenthesis<br>&gt; use so the compiler can be certain it isn’t guessing at your meaning. I<br>&gt; mean it’s kind of like forcing a defensive coding style, but that’s not<br>&gt; necessarily a bad thing; I’ve learned from experience that I suck at<br>&gt; operator precedence and instead of wasting time looking it up to be sure,<br>&gt; hurling a bunch of parenthesis in place not only clarifies my intent, but<br>&gt; avoids the problem entirely, I wish more people would do it, as I still run<br>&gt; into cases in other people’s code where it takes some time to figure out<br>&gt; meaning (usually because these operator precedence obsessed monsters don’t<br>&gt; leave comments either ;)<br>&gt;<br>&gt; Increasing the precedence won’t help IMO, as it remains just as possible<br>&gt; for a user to make a mistake, plus we run the risk of changing the result<br>&gt; of currently correct code that works fine with the current precedence but<br>&gt; will suddenly give different results if evaluated sooner.<br>&gt;<br>&gt; So yeah, I think recommending parenthesis is a good compromise, and good<br>&gt; style to encourage when using these operators in more complex cases, not<br>&gt; just for avoiding mistakes but also to make the code more readable for<br>&gt; others.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160615/011b7c58/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
