<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Overriding computed properties with let constants?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>April 23, 2016 at 09:00:00pm</p></header><div class="content"><p>I already see the problem here:<br></p><p>class A { var x: Int { return 42 } }<br>class B: A { override let x = 7 } // assume that will work<br>class C: B { override var x: Int { /* wait this wont work anymore */ } }<br></p><p>You won’t be able to override an immutable constant.<br></p><p>I don’t like such a change.<br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 23. April 2016 bei 21:19:27, Roman Zhikharevich via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I think, it could be a good idea to make computed properties overridable with let constants.<br></p><p>Something like this:<br></p><p>class Parent {<br>    var x: Int {<br>        let x = 42<br>        /*<br>         * Compute x...<br>         */<br>        return x<br>    }<br>}<br></p><p>class Child: Parent {<br>    /*<br>     * Sometimes you need to override computed properties with simple constants.<br>     * This is currently done like this.<br>     */<br>    //override var x: Int {return 7}<br>    <br>    /*<br>     * But this looks neater.<br>     * Currently this gives &quot;error: cannot override with a stored property &#39;x&#39;&quot;.<br>     */<br>    override let x = 7<br>}<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/5529a3aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Overriding computed properties with let constants?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 23, 2016 at 03:00:00pm</p></header><div class="content"><p>I’m not sure if I like it, but declaring it as a let could disallow subclasses from overriding it, just like any other let.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Apr 23, 2016, at 2:30 PM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I already see the problem here:<br>&gt; <br>&gt; class A { var x: Int { return 42 } }<br>&gt; class B: A { override let x = 7 } // assume that will work<br>&gt; class C: B { override var x: Int { /* wait this wont work anymore */ } }<br>&gt; <br>&gt; You won’t be able to override an immutable constant.<br>&gt; <br>&gt; I don’t like such a change.<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 23. April 2016 bei 21:19:27, Roman Zhikharevich via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; I think, it could be a good idea to make computed properties overridable with let constants.<br>&gt;&gt; <br>&gt;&gt; Something like this:<br>&gt;&gt; <br>&gt;&gt; class Parent {<br>&gt;&gt;     var x: Int {<br>&gt;&gt;         let x = 42<br>&gt;&gt;         /*<br>&gt;&gt;          * Compute x...<br>&gt;&gt;          */<br>&gt;&gt;         return x<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Child: Parent {<br>&gt;&gt;     /*<br>&gt;&gt;      * Sometimes you need to override computed properties with simple constants.<br>&gt;&gt;      * This is currently done like this.<br>&gt;&gt;      */<br>&gt;&gt;     //override var x: Int {return 7}<br>&gt;&gt;     <br>&gt;&gt;     /*<br>&gt;&gt;      * But this looks neater.<br>&gt;&gt;      * Currently this gives &quot;error: cannot override with a stored property &#39;x&#39;&quot;.<br>&gt;&gt;      */<br>&gt;&gt;     override let x = 7<br>&gt;&gt; }<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/e4cc68ef/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Overriding computed properties with let constants?</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>April 23, 2016 at 10:00:00pm</p></header><div class="content"><p>I don’t think using a let constant should prevent a further sub-class from overriding again, that’s what the final keyword should be for.<br></p><p>It would still need to be implemented like this behind the scenes though:<br></p><p>    override var x:Int { return 7 }<br></p><p>By the same token you could also allow var to implicitly create something like the following:<br></p><p>    private var _x = 7<br>    override private(set) var x:Int {<br>        get { return _x }<br>        set { _x = newValue }<br>    }<br></p><p>I’m not sure what my preference is though; while being able to do overrides with stored property-like syntax might be convenient and tidy in some cases, it’s probably better to force developers to use explicitly computed properties to be clear what’s really going on to make it actually work.<br></p><p>&gt; On 23 Apr 2016, at 20:30, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I already see the problem here:<br>&gt; <br>&gt; class A { var x: Int { return 42 } }<br>&gt; class B: A { override let x = 7 } // assume that will work<br>&gt; class C: B { override var x: Int { /* wait this wont work anymore */ } }<br>&gt; <br>&gt; You won’t be able to override an immutable constant.<br>&gt; <br>&gt; I don’t like such a change.<br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 23. April 2016 bei 21:19:27, Roman Zhikharevich via swift-evolution (swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;) schrieb:<br>&gt; <br>&gt;&gt; I think, it could be a good idea to make computed properties overridable with let constants.<br>&gt;&gt; <br>&gt;&gt; Something like this:<br>&gt;&gt; <br>&gt;&gt; class Parent {<br>&gt;&gt;     var x: Int {<br>&gt;&gt;         let x = 42<br>&gt;&gt;         /*<br>&gt;&gt;          * Compute x...<br>&gt;&gt;          */<br>&gt;&gt;         return x<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; class Child: Parent {<br>&gt;&gt;     /*<br>&gt;&gt;      * Sometimes you need to override computed properties with simple constants.<br>&gt;&gt;      * This is currently done like this.<br>&gt;&gt;      */<br>&gt;&gt;     //override var x: Int {return 7}<br>&gt;&gt;     <br>&gt;&gt;     /*<br>&gt;&gt;      * But this looks neater.<br>&gt;&gt;      * Currently this gives &quot;error: cannot override with a stored property &#39;x&#39;&quot;.<br>&gt;&gt;      */<br>&gt;&gt;     override let x = 7<br>&gt;&gt; }<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/a490deca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Overriding computed properties with let constants?</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>April 23, 2016 at 04:00:00pm</p></header><div class="content"><p>Oh, yeah, good point about &quot;final&quot;.<br></p><p>Would there be a performance difference between &quot;override var x: Int {return 7}&quot; and &quot;override let x = 7&quot;?<br></p><p>Sent from my iPhone<br></p><p>&gt; On Apr 23, 2016, at 16:06, Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I don’t think using a let constant should prevent a further sub-class from overriding again, that’s what the final keyword should be for.<br>&gt; <br>&gt; It would still need to be implemented like this behind the scenes though:<br>&gt; <br>&gt;     override var x:Int { return 7 }<br>&gt; <br>&gt; By the same token you could also allow var to implicitly create something like the following:<br>&gt; <br>&gt;     private var _x = 7<br>&gt;     override private(set) var x:Int {<br>&gt;         get { return _x }<br>&gt;         set { _x = newValue }<br>&gt;     }<br>&gt; <br>&gt; I’m not sure what my preference is though; while being able to do overrides with stored property-like syntax might be convenient and tidy in some cases, it’s probably better to force developers to use explicitly computed properties to be clear what’s really going on to make it actually work.<br>&gt; <br>&gt;&gt; On 23 Apr 2016, at 20:30, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I already see the problem here:<br>&gt;&gt; <br>&gt;&gt; class A { var x: Int { return 42 } }<br>&gt;&gt; class B: A { override let x = 7 } // assume that will work<br>&gt;&gt; class C: B { override var x: Int { /* wait this wont work anymore */ } }<br>&gt;&gt; <br>&gt;&gt; You won’t be able to override an immutable constant.<br>&gt;&gt; <br>&gt;&gt; I don’t like such a change.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; Am 23. April 2016 bei 21:19:27, Roman Zhikharevich via swift-evolution (swift-evolution at swift.org) schrieb:<br>&gt;&gt; <br>&gt;&gt;&gt; I think, it could be a good idea to make computed properties overridable with let constants.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Something like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Parent {<br>&gt;&gt;&gt;     var x: Int {<br>&gt;&gt;&gt;         let x = 42<br>&gt;&gt;&gt;         /*<br>&gt;&gt;&gt;          * Compute x...<br>&gt;&gt;&gt;          */<br>&gt;&gt;&gt;         return x<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class Child: Parent {<br>&gt;&gt;&gt;     /*<br>&gt;&gt;&gt;      * Sometimes you need to override computed properties with simple constants.<br>&gt;&gt;&gt;      * This is currently done like this.<br>&gt;&gt;&gt;      */<br>&gt;&gt;&gt;     //override var x: Int {return 7}<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;     /*<br>&gt;&gt;&gt;      * But this looks neater.<br>&gt;&gt;&gt;      * Currently this gives &quot;error: cannot override with a stored property &#39;x&#39;&quot;.<br>&gt;&gt;&gt;      */<br>&gt;&gt;&gt;     override let x = 7<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/bb3a9677/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
