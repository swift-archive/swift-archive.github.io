<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 30, 2016 at 11:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06e1007412a9c7c2dc41297c9cf99a5d?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Shawn Erickson</string> &lt;shawnce at gmail.com&gt;<p>July  1, 2016 at 06:00:00am</p></header><div class="content"><p>Nice and swifty, +1<br></p><p>This is a nice addition to the standard library that removes a common<br>reason C libraries had to be imported.<br></p><p>On Thu, Jun 30, 2016 at 11:02 PM Chris Lattner &lt;clattner at apple.com&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot;<br>&gt; begins now and runs through July 5. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/45c70e0d/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5818a8a9211c31af95d6db8974457683?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Joseph Lord</string> &lt;joseph at human-friendly.com&gt;<p>July  1, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>It is an improvement but would it be even better if the return type was Int (or possibly type inferred to Int16 etc.). If a float is really desired it can be initialised from the Int (or it could even infer float result is required). <br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, reduces reliance on C APIs. API also clearer about semantics. <br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read and a quick look at earlier discussion linked from proposal. <br></p><p>Joseph<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 07:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 7:44 AM, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;&gt; <br>&gt;&gt;   * What is your evaluation of the proposal?<br>&gt; <br>&gt; It is an improvement but would it be even better if the return type was Int (or possibly type inferred to Int16 etc.). If a float is really desired it can be initialised from the Int (or it could even infer float result is required). <br></p><p>This is a common thought, but it&#39;s precisely backwards from a numerics and pragmatics perspective.  The result is always representable as `Self`, and generally not representable in any fixed-width integer type.  If you have the version that produces `Self`, getting an integer falls out trivially:<br></p><p>	let y = Int(x.rounded(.up))				[1]<br></p><p>But if you only have the version that produces an integer result, you’re stuck with a much more complex workaround when you actually need the result as `Self` (which is more common than you think).  In the best case scenario, where `Int` is bigger than the significand of `Self`, it’s not *too* bad, but still requires at least a conditional and two conversions.  In the bad scenario, a floating-point type whose significand doesn’t fit in `Int`, you end up needing to write all the rounding logic yourself.<br></p><p>The idea of also having a set of Integer inits that round has been mentioned once or twice in the past:<br></p><p>	let y = Int(roundedUp: x)<br></p><p>I’m not sure if that’s really any cleaner than [1], but it could certainly be considered as another proposal.<br></p><p>– Steve<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On 1 Jul 2016, at 13:44, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;   https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;&gt; <br>&gt;&gt;   * What is your evaluation of the proposal?<br>&gt; <br>&gt; It is an improvement but would it be even better if the return type was Int (or possibly type inferred to Int16 etc.). If a float is really desired it can be initialised from the Int (or it could even infer float result is required). <br>&gt; <br>&gt;&gt;   * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, reduces reliance on C APIs. API also clearer about semantics. <br>&gt; <br>&gt;&gt;   * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes<br>&gt; <br>&gt;&gt;   * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;   * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Quick read and a quick look at earlier discussion linked from proposal. <br>&gt; <br>&gt; Joseph<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>We could perhaps change the existing Int(FloatingPoint) initialisers to take a RoundingRule with a default argument. Currently I believe they are equivalent to floor, but that’s a documentation comment and isn’t explicit in the API itself.<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 1:14 PM, Karl via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 1 Jul 2016, at 13:44, Joseph Lord via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; It is an improvement but would it be even better if the return type was Int (or possibly type inferred to Int16 etc.). If a float is really desired it can be initialised from the Int (or it could even infer float result is required). <br>&gt;&gt; <br>&gt;&gt;&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; Yes, reduces reliance on C APIs. API also clearer about semantics. <br>&gt;&gt; <br>&gt;&gt;&gt;  * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; Yes<br>&gt;&gt; <br>&gt;&gt;&gt;  * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; Quick read and a quick look at earlier discussion linked from proposal. <br>&gt;&gt; <br>&gt;&gt; Joseph<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; We could perhaps change the existing Int(FloatingPoint) initialisers to take a RoundingRule with a default argument. Currently I believe they are equivalent to floor, but that’s a documentation comment and isn’t explicit in the API itself.<br></p><p>trunc( ), not floor (matching the behavior of C-family conversions to integer).<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/566528c7f7c28c35c0c646d415943612?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Taras Zakharko</string> &lt;taras.zakharko at uzh.ch&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>In principle +1, but I’d prefer if the proposal also included rounding with a specified precision. I.e.<br></p><p>func rounded(_ rule: RoundingRule = toNearestOrAwayFromZero, decimalPlaces digits: Int = 0) -&gt; Self<br></p><p><br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>yes<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>yes<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>yes. I like how the proposal accounts for the rounding rule. However, what is missing is rounding with specified precision<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>glance<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/50b48d7f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On 1 Jul 2016, at 14:13, Taras Zakharko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; In principle +1, but I’d prefer if the proposal also included rounding with a specified precision. I.e.<br>&gt; <br>&gt; func rounded(_ rule: RoundingRule = toNearestOrAwayFromZero, decimalPlaces digits: Int = 0) -&gt; Self<br>&gt; <br></p><p>Rounding with specified precision was discussed, but excluded from the proposal. It could be mentioned in the Alternatives Considered why it&#39;s not part of this proposal. <br></p><p>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; yes<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; yes<br>&gt; <br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; yes. I like how the proposal accounts for the rounding rule. However, what is missing is rounding with specified precision<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; glance<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/48a86a76/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>July  1, 2016 at 11:00:00am</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+ 1<br>        * Is the problem being addressed significant enough to warrant a<br>change to Swift?<br>Yes<br>        * Does this proposal fit well with the feel and direction of Swift?<br>Yes.<br>        * If you have used other languages or libraries with a similar<br>feature, how do you feel that this proposal compares to those?<br>        * How much effort did you put into your review? A glance, a quick<br>reading, or an in-depth study?<br>Quick reading<br></p><p>On Fri, Jul 1, 2016 at 2:02 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot;<br>&gt; begins now and runs through July 5. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/f3160e45/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>[Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md&gt; ]<br></p><p>Just wondering, why no &#39;awayFromZero&#39; case?<br></p><p>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/d20f702e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 1:11 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md&gt; ]<br>&gt; <br>&gt; Just wondering, why no &#39;awayFromZero&#39; case?<br></p><p>It’s not defined or required by IEEE 754.  The others are.  I wouldn’t be opposed to adding some other rounding modes, but the IEEE 754 set is as good as any as a starting point.<br></p><p>– Steve<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/e1b423c2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 10:13, Stephen Canon &lt;scanon at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 1:11 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md&gt; ]<br>&gt;&gt; <br>&gt;&gt; Just wondering, why no &#39;awayFromZero&#39; case?<br>&gt; <br>&gt; It’s not defined or required by IEEE 754.  The others are.  I wouldn’t be opposed to adding some other rounding modes, but the IEEE 754 set is as good as any as a starting point.<br></p><p>Next time I will search first: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160627/022697.html. Thanks, Steve.<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/423d7ff5/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>July  1, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 11:13 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 1:11 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md&gt; ]<br>&gt;&gt; <br>&gt;&gt; Just wondering, why no &#39;awayFromZero&#39; case?<br>&gt; <br>&gt; It’s not defined or required by IEEE 754.  The others are.  I wouldn’t be opposed to adding some other rounding modes, but the IEEE 754 set is as good as any as a starting point.<br></p><p>I&#39;m  hearing a lot of &quot;Wouldn&#39;t it be nice if&quot;s, for items falling outside IEEE 754. Could we have a native Math module that offered such niceties under a separate umbrella proposal? Would it be too cluttery to allow things like Double.tau, etc via a Math.Double extension or however that might work?<br></p><p>-- E, who abides by Canon law<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/1a04f04f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>Given that 2 * pi is always as precise as pi itself, I really can&#39;t<br>understand the clamor for such a constant in the stdlib. It can be defined<br>both correctly and trivially by anyone who wants it.<br>On Fri, Jul 1, 2016 at 12:21 Erica Sadun via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 1, 2016, at 11:13 AM, Stephen Canon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Jul 1, 2016, at 1:11 PM, Jordan Rose via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; [Proposal:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt;  ]<br>&gt;<br>&gt; Just wondering, why no &#39;awayFromZero&#39; case?<br>&gt;<br>&gt;<br>&gt; It’s not defined or required by IEEE 754.  The others are.  I wouldn’t be<br>&gt; opposed to adding some other rounding modes, but the IEEE 754 set is as<br>&gt; good as any as a starting point.<br>&gt;<br>&gt;<br>&gt; I&#39;m  hearing a lot of &quot;Wouldn&#39;t it be nice if&quot;s, for items falling outside<br>&gt; IEEE 754. Could we have a native Math module that offered such niceties<br>&gt; under a separate umbrella proposal? Would it be too cluttery to allow<br>&gt; things like Double.tau, etc via a Math.Double extension or however that<br>&gt; might work?<br>&gt;<br>&gt; -- E, who abides by Canon law<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/73698bbd/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 1:20 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 11:13 AM, Stephen Canon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 1, 2016, at 1:11 PM, Jordan Rose via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [Proposal: https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md&gt; ]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Just wondering, why no &#39;awayFromZero&#39; case?<br>&gt;&gt; <br>&gt;&gt; It’s not defined or required by IEEE 754.  The others are.  I wouldn’t be opposed to adding some other rounding modes, but the IEEE 754 set is as good as any as a starting point.<br>&gt; <br>&gt; I&#39;m  hearing a lot of &quot;Wouldn&#39;t it be nice if&quot;s, for items falling outside IEEE 754. Could we have a native Math module that offered such niceties under a separate umbrella proposal? Would it be too cluttery to allow things like Double.tau, etc via a Math.Double extension or however that might work?<br></p><p>I expect we will at some point in the future!<br></p><p>For constants specifically, while I would still want to keep them out of the top-level namespace on the types, I think it would make a lot of sense to have something like Double.Constant.xxx which could swallow pretty much anything that there’s a reasonable argument to justify.<br></p><p>We also wouldn’t want these to be a requirement of FloatingPoint, unless there were default implementations to *compute* all of them to full precision, to avoid placing too high of a burden on folks who want to conform to the protocol.<br></p><p>That would be pretty solidly in the “post swift 3” pile, however.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/5f4f2541/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>Sent from my iPad<br>&gt; On 1 Jul 2016, at 08:02, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>+1. Small, simple, and &quot;Swifty&quot;<br></p><p>Regarding the proposal itself (as opposed to the proposed solution):<br>Rounding to a specific precision (e.g. 2 decimals) was discussed prior to the proposal and could be mentioned under Alternatives Considered with an explanation of why it was excluded form the proposal.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, probably. It&#39;s a small change for a small problem<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. The proposed solution feels more at home in Swift than what&#39;s currently there and fits the general direction of preferring member functions over free functions.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;ve used the floor and ceil functions in various C based languages. Those fit in with the style of C, and these fit in with the style and naming conventions of Swift.<br></p><p>I&#39;ve also used Math.Round in Visual Basic a long time ago (don&#39;t judge me). It allows for two rounding modes (AwayFromZero and ToEven (bankers rounding)). I had to look that up because I didn&#39;t remember how it actually worked.<br></p><p>In each case (including this proposal) I feel that the various solutions feel right at home in their various contexts.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal. Skimmed the discussion.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9db7e0c3d3ce86e2bf80675a61fbc49c?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>James Berry</string> &lt;jberry at rogueorbit.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>+1. These additions are appreciated and well thought out.<br></p><p><br>&gt; On Jun 30, 2016, at 11:02 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0113: Add integral rounding functions to FloatingPoint&quot; begins now and runs through July 5. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0113-rounding-functions-on-floatingpoint.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>yes. They ease the burden on usage of swift.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>y<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>They depart from the well-known and common floor() and ceil(), which may be confusing to some users. On balance, however, I believe these approach taken is cleaner and should be adopted.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the mailing list discussion and carefully read the proposal a number of times.<br></p><p>James<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0113: Add integral rounding functions to FloatingPoint</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July  2, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>Looks good to me.<br></p><p>`RoundingRule.toNearestOrEven` is a fine name, but I would like the documentation to mention the term &quot;bankers&#39; rounding&quot;, a traditional term which Foundation uses for the same algorithm. (Actually, it might be a good idea to talk to the Foundation guys and see if you can get them to implement `toNearestOrEven` and then replace `NSDecimalNumber.RoundingMode` with `Swift.RoundingRule` in their Swift APIs. This would undoubtedly require some coordination of raw values and so on.)<br></p><p>On this question:<br></p><p>&gt;&gt; …although we may consider suppressing the imported, global-level C functions, or perhaps automatically migrating them to the new instance-method calls.<br></p><p>I would suggest that we suppress the C functions and replace them with generic versions which take a FloatingPoint parameter and call through to `rounded(_:)`. If people want to use the terms of art here, there&#39;s no strong reason to fight them on it.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes; we want to cover all of IEEE 754, and this is a piece of that.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. This is a very elegant way to handle rounding.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I can&#39;t believe how many languages have slavishly copied C without trying to improve on it.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick reading, a little bit of research on Decimal&#39;s rounding support.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
