<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b35b44357e4cca3a1de39ba1199c9ab5?s=50"></div><header><strong>multi-line string literals.</strong> from <string>ted van gaalen</string> &lt;tedvgiosdev at gmail.com&gt;<p>May  7, 2016 at 01:00:00pm</p></header><div class="content"><p>hello,<br>Have read all? conversations about this subject...<br></p><p>Would you all be so kind to take a look at what I suggested<br>and wrote appr. a week ago? (data lines) <br>This is with using:<br>        \@   for verbatim as-is character data  <br>and<br>        \\ for character data with processing of \ escaped chars and \(var)<br></p><p>The advantage of what I describe is that apart from that a data line starts with<br>  \@   or  \\<br>No delimiters involved at the start and end of a pack of data lines,<br>which, if I have seen this correctly, is nowhere the case with the other suggestions<br>here.<br>    --------------<br>In the meantime I&#39;ve seen and read more about FP. Some nice and even humoristic videos about this subject. This brought me a different and more nuanced impression<br>about functional programming and how I can use it.. This contrasts highly with the view of some more or less fanatic individuals, (biasing my impressions)which believe they take part in a holy war, rolling with tanks all over the programing landscape. They spoil it all like people with extreme views tend to do in all aspects on our beautiful blue planet. In any case I was relieved, feeling a lot better and seeing how it can be succesfully integrated into Swift makes me feel more relaxed about most chances and enhancements that can make Swift a very unique and state of the art language. It can be harmonious with OOP as well, which is great. It could be that both forms melt together easily. So, it is sometimes not so easy to keep an open mind, as we are all subjective beings, instinctively defensive against new things...to go beyond what we are &quot;certain&quot; of.. <br>Kind Regards, TedvG<br>no more time now . moving boxes..physical container objects :o}<br>www.ravelnotes.com<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/cd9260b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  7, 2016 at 06:00:00am</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160507/70f6e29e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>multi-line string literals.</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May  7, 2016 at 03:00:00pm</p></header><div class="content"><p>I have a simple working prototype where the following just works<br></p><p>Let v = _&quot; &quot;key&quot;: &quot;value&quot; &quot;_<br></p><p>I am working on adding <br></p><p>Let v =<br>   /* this is a template */<br>   _&quot; &quot;key&quot;: &quot;value&quot; &quot;_<br></p><p>Let v @string_literal(json) = <br>   /* this is a template */<br>   _&quot; &quot;key&quot;: &quot;value&quot; &quot;_<br></p><p>This strikes me as far less intrusive on the current compiler structure<br>Regards<br>(From mobile)<br></p><p>On May 7, 2016, at 3:48 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; Would you all be so kind to take a look at what I suggested<br>&gt;&gt; and wrote appr. a week ago? (data lines) <br>&gt;&gt; This is with using:<br>&gt;&gt;        \@   for verbatim as-is character data  <br>&gt;&gt; and<br>&gt;&gt;        \\ for character data with processing of \ escaped chars and \(var)<br>&gt;&gt; <br>&gt;&gt; The advantage of what I describe is that apart from that a data line starts with<br>&gt;&gt;  \@   or  \\<br>&gt;&gt; No delimiters involved at the start and end of a pack of data lines,<br>&gt;&gt; which, if I have seen this correctly, is nowhere the case with the other suggestions<br>&gt;&gt; here.<br>&gt; <br>&gt; I addressed suggestions of that type in the third draft of the proposal (although the precise example I used was using `&quot;` as the data line marker):<br>&gt; <br>&gt; ### Don&#39;t require the end quote<br>&gt; <br>&gt; Since each line is marked with a continuation quote, in theory, the end <br>&gt; quote is redundant; the string could simply end after the last line <br>&gt; with a continuation quote.<br>&gt; <br>&gt; ```<br>&gt; // Something like:<br>&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;           &quot;&lt;catalog&gt;<br>&gt;           &quot;	&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;           &quot;		&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;           &quot;	&lt;/book&gt;<br>&gt;           &quot;&lt;/catalog&gt;<br>&gt; ```<br>&gt; <br>&gt; Alternatively, the `M` modifier could be left out (which would require <br>&gt; quotes on that line to be escaped), or a different <br>&gt; character or character sequence could be used. There was a fair bit of <br>&gt; bikeshedding on this; in some cases, a single post suggested several <br>&gt; syntaxes with slightly different semantics (such as different escaping <br>&gt; rules). Some marked the first and/or last line differently from the <br>&gt; other lines. What they all have in common is that the beginning of each <br>&gt; line is marked in some way, but the end is not, even at the end of the <br>&gt; literal.<br>&gt; <br>&gt; Because there is no end delimiter—only a start-of-line marker—these <br>&gt; designs may not require you to escape quotes; thus, they could <br>&gt; potentially obviate the need for an alternate delimiter feature as <br>&gt; well. Depending on the design, however, many of them have issues:<br>&gt; <br>&gt; * In most designs, it is possible to create a single-line string with <br>&gt;  the feature, but the resulting code tends to be ugly and awkward.<br>&gt; <br>&gt; * If the last line is marked the same as the others and the user forgets <br>&gt;  the marker on a line, the compiler has no way to notice, except by <br>&gt;  diagnosing errors caused by treating a line of a string literal as <br>&gt;  code. Since some lines of string content will be valid code (such as <br>&gt;  blank lines or C-style comments), these mistakes may pass unnoticed.<br>&gt; <br>&gt; * If the last line is marked the same as the others, then commenting <br>&gt;  out a line of a string literal, inserting a blank line in the middle <br>&gt;  of a string literal, or just in general inserting some sort of valid <br>&gt;  Swift code in the middle of a string literal would break the literal <br>&gt;  in half, once again potentially forming syntactically valid but <br>&gt;  incorrect Swift code.<br>&gt; <br>&gt; * Generally, the more these constructs work to avoid the above <br>&gt;  problems, the uglier and less quote-like they end up looking, and <br>&gt;  the more complex they will be for the parser.<br>&gt; <br>&gt; Finally, all approaches share one fundamental issue.<br>&gt; <br>&gt; String literals are expressions, and so they ought to have a syntax <br>&gt; which can be nested inside other expressions. Line-oriented features <br>&gt; like these don&#39;t work well as expressions, because you normally place <br>&gt; several expressions on a single line, nesting them inside one another. <br>&gt; Thus, these features may be awkward to use in any but the simplest <br>&gt; ways.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May  7, 2016 at 06:00:00pm</p></header><div class="content"><p>It seems to me like this would take care of what is needed 99% of the time. <br></p><p>I&#39;ve seen many who don&#39;t favor continuation quotes. <br></p><p>The other option could be triple quote &quot;&quot;&quot; and make the continuation quote optional. Not using the continuation quote would require the closing triple quote &quot;&quot;&quot;<br></p><p>&gt; On May 7, 2016, at 9:48 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; ```<br>&gt; // Something like:<br>&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;           &quot;&lt;catalog&gt;<br>&gt;           &quot;	&lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;           &quot;		&lt;author&gt;\(author)&lt;/author&gt;<br>&gt;           &quot;	&lt;/book&gt;<br>&gt;           &quot;&lt;/catalog&gt;<br>&gt; ```<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>multi-line string literals.</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>May  8, 2016 at 01:00:00am</p></header><div class="content"><p>Regards<br>(From mobile)<br></p><p>&gt; On May 8, 2016, at 12:49 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; It seems to me like this would take care of what is needed 99% of the time. <br>&gt; <br>&gt; I&#39;ve seen many who don&#39;t favor continuation quotes. <br>&gt; <br>&gt; The other option could be triple quote &quot;&quot;&quot; and make the continuation quote optional. Not using the continuation quote would require the closing triple quote &quot;&quot;&quot;<br>&gt; <br></p><p>For having built a prototype, I&#39;ve come to realize that there are more alternatives. <br></p><p>This is some of my own tests:<br>https://gist.github.com/lmihalkovic/718d1b8f2ae6f7f6ba2ef8da07b64c1c<br></p><p>The idea of these M/e or any other similar prefix remind me of my perl days (there were a lot of these), and IMO have little to do with the rest of Swift. <br></p><p>&gt;&gt; On May 7, 2016, at 9:48 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; // Something like:<br>&gt;&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;          &quot;&lt;catalog&gt;<br>&gt;&gt;          &quot;    &lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;          &quot;        &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;          &quot;    &lt;/book&gt;<br>&gt;&gt;          &quot;&lt;/catalog&gt;<br>&gt;&gt; ```<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b1fc4ed1ed8e138ef0a87fd3e91c83a4?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Ricardo Parada</string> &lt;rparada at mac.com&gt;<p>May  8, 2016 at 05:00:00pm</p></header><div class="content"><p>The _&quot; and &quot;_  are a good alternative I think. <br></p><p>For some reason the underscore bothers me: it doesn&#39;t look as good aesthetically as others, and because it is already used for a couple of other things in Swift (to make large numbers readable and as a placeholder to discard a value). <br></p><p>By the way has the backtick or triple backtick been considered?<br></p><p><br></p><p>&gt; On May 7, 2016, at 7:24 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Regards<br>&gt; (From mobile)<br>&gt; <br>&gt;&gt; On May 8, 2016, at 12:49 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; It seems to me like this would take care of what is needed 99% of the time. <br>&gt;&gt; <br>&gt;&gt; I&#39;ve seen many who don&#39;t favor continuation quotes. <br>&gt;&gt; <br>&gt;&gt; The other option could be triple quote &quot;&quot;&quot; and make the continuation quote optional. Not using the continuation quote would require the closing triple quote &quot;&quot;&quot;<br>&gt; <br>&gt; For having built a prototype, I&#39;ve come to realize that there are more alternatives. <br>&gt; <br>&gt; This is some of my own tests:<br>&gt; https://gist.github.com/lmihalkovic/718d1b8f2ae6f7f6ba2ef8da07b64c1c<br>&gt; <br>&gt; The idea of these M/e or any other similar prefix remind me of my perl days (there were a lot of these), and IMO have little to do with the rest of Swift. <br>&gt; <br>&gt;&gt;&gt; On May 7, 2016, at 9:48 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; // Something like:<br>&gt;&gt;&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;&gt;         &quot;&lt;catalog&gt;<br>&gt;&gt;&gt;         &quot;    &lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;&gt;         &quot;        &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;         &quot;    &lt;/book&gt;<br>&gt;&gt;&gt;         &quot;&lt;/catalog&gt;<br>&gt;&gt;&gt; ```<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>May  8, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; By the way has the backtick or triple backtick been considered?<br></p><p>Backticks already have a meaning—they &quot;quote&quot; an identifier which would otherwise be taken as a keyword. <br></p><p>-- <br>Brent Royal-Gordon<br>Sent from my iPhone<br></p><p>&gt; On May 8, 2016, at 2:58 PM, Ricardo Parada &lt;rparada at mac.com&gt; wrote:<br>&gt; <br>&gt; The _&quot; and &quot;_  are a good alternative I think. <br>&gt; <br>&gt; For some reason the underscore bothers me: it doesn&#39;t look as good aesthetically as others, and because it is already used for a couple of other things in Swift (to make large numbers readable and as a placeholder to discard a value). <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; On May 7, 2016, at 7:24 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt;&gt; On May 8, 2016, at 12:49 AM, Ricardo Parada via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems to me like this would take care of what is needed 99% of the time. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;ve seen many who don&#39;t favor continuation quotes. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The other option could be triple quote &quot;&quot;&quot; and make the continuation quote optional. Not using the continuation quote would require the closing triple quote &quot;&quot;&quot;<br>&gt;&gt; <br>&gt;&gt; For having built a prototype, I&#39;ve come to realize that there are more alternatives. <br>&gt;&gt; <br>&gt;&gt; This is some of my own tests:<br>&gt;&gt; https://gist.github.com/lmihalkovic/718d1b8f2ae6f7f6ba2ef8da07b64c1c<br>&gt;&gt; <br>&gt;&gt; The idea of these M/e or any other similar prefix remind me of my perl days (there were a lot of these), and IMO have little to do with the rest of Swift. <br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On May 7, 2016, at 9:48 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; // Something like:<br>&gt;&gt;&gt;&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;&gt;&gt;        &quot;&lt;catalog&gt;<br>&gt;&gt;&gt;&gt;        &quot;    &lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;&gt;&gt;        &quot;        &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;&gt;        &quot;    &lt;/book&gt;<br>&gt;&gt;&gt;&gt;        &quot;&lt;/catalog&gt;<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160508/8b3b3eb4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>multi-line string literals.</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>May  9, 2016 at 10:00:00am</p></header><div class="content"><p>Btw, in c# we have @ to drop escapes:<br>@&quot;c:\Docs\Source\a.txt&quot;  // rather than &quot;c:\\Docs\\Source\\a.txt&quot;<br>@&quot;&quot;&quot;Ahoy!&quot;&quot; cried the captain.&quot; // &quot;Ahoy!&quot; cried the captain.<br></p><p>and(!) also as &#39;marker&#39; that allows to use keywords as identifiers:<br>class @class<br>{<br>    public static void @static(bool @bool) {..}<br>..<br>}<br></p><p>so, probably it is OK to have backtick also as &#39;special&#39; string marker in <br>Swift ?<br>`abc &quot;def&quot; \(hahaha /// \total-10`<br></p><p>Also, wanted to drop some alternatives:<br>* what  about single quote? like<br>&#39;abc &quot;def&quot; \(hahaha /// \total-10&#39;<br>(if single quote appear in text - it should be doubled, so<br>&#39;example &#39;&#39; - is a &quot;single&quot; quote&#39;<br></p><p>* what about @ like in c# for string literals just to say &quot;do not process <br>escapes&quot; (double quotes should be doubled) :<br>@&quot;this just text \( \t \n but with &quot;&quot;double quotes&quot;&quot;&quot;<br></p><p>* what about $&quot;..&quot;$ to mark a sting as-is, without escapes, without <br>interpolation, allows double quote without escaping(putting twice)? Yes, &quot;$ <br>combination will not be allowed inside of such string.<br></p><p><br>On 09.05.2016 1:13, Brent Royal-Gordon via swift-evolution wrote:<br>&gt;&gt; By the way has the backtick or triple backtick been considered?<br>&gt;<br>&gt; Backticks already have a meaning—they &quot;quote&quot; an identifier which would<br>&gt; otherwise be taken as a keyword.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On May 8, 2016, at 2:58 PM, Ricardo Parada &lt;rparada at mac.com<br>&gt; &lt;mailto:rparada at mac.com&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; The _&quot; and &quot;_  are a good alternative I think.<br>&gt;&gt;<br>&gt;&gt; For some reason the underscore bothers me: it doesn&#39;t look as good<br>&gt;&gt; aesthetically as others, and because it is already used for a couple of<br>&gt;&gt; other things in Swift (to make large numbers readable and as a<br>&gt;&gt; placeholder to discard a value).<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On May 7, 2016, at 7:24 PM, L. Mihalkovic &lt;laurent.mihalkovic at gmail.com<br>&gt;&gt;&gt; &lt;mailto:laurent.mihalkovic at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Regards<br>&gt;&gt;&gt; (From mobile)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On May 8, 2016, at 12:49 AM, Ricardo Parada via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It seems to me like this would take care of what is needed 99% of the<br>&gt;&gt;&gt;&gt; time.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I&#39;ve seen many who don&#39;t favor continuation quotes.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; The other option could be triple quote &quot;&quot;&quot; and make the continuation<br>&gt;&gt;&gt;&gt; quote optional. Not using the continuation quote would require the<br>&gt;&gt;&gt;&gt; closing triple quote &quot;&quot;&quot;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For having built a prototype, I&#39;ve come to realize that there are more<br>&gt;&gt;&gt; alternatives.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is some of my own tests:<br>&gt;&gt;&gt; https://gist.github.com/lmihalkovic/718d1b8f2ae6f7f6ba2ef8da07b64c1c<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The idea of these M/e or any other similar prefix remind me of my perl<br>&gt;&gt;&gt; days (there were a lot of these), and IMO have little to do with the<br>&gt;&gt;&gt; rest of Swift.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On May 7, 2016, at 9:48 AM, Brent Royal-Gordon via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt; // Something like:<br>&gt;&gt;&gt;&gt;&gt; let xml = M&quot;&lt;?xml version=&quot;1.0&quot;?&gt;<br>&gt;&gt;&gt;&gt;&gt;        &quot;&lt;catalog&gt;<br>&gt;&gt;&gt;&gt;&gt;        &quot;    &lt;book id=&quot;bk101&quot; empty=&quot;&quot;&gt;<br>&gt;&gt;&gt;&gt;&gt;        &quot;        &lt;author&gt;\(author)&lt;/author&gt;<br>&gt;&gt;&gt;&gt;&gt;        &quot;    &lt;/book&gt;<br>&gt;&gt;&gt;&gt;&gt;        &quot;&lt;/catalog&gt;<br>&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
