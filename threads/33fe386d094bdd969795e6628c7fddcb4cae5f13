<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bec901e49831834ec4a6f4b86ff1f9b5?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Ramakrishna Mallireddy</string> &lt;ramakrishna.malli at gmail.com&gt;<p>April 29, 2016 at 11:00:00am</p></header><div class="content"><p>I have these precompiled module files generated every-time I run the swift<br>compiler.<br></p><p>_Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>CFNetwork-1UTIO6DPB9R5P.pcm<br>CoreFoundation-CF8BGN41VJ11.pcm<br>CoreGraphics-3SDFP08OX46EF.pcm<br>CoreImage-3SDFP08OX46EF.pcm<br>Darwin-4F8STAM1KXDF.pcm<br>Foundation-2LQ7EQYFLQOP.pcm<br>...etc<br></p><p>How can I make the swift compiler to use these cache rather than compiling<br>the libraries again.<br></p><p>Thanks<br>Ramakrishna<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160429/33fe5f13/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April 29, 2016 at 08:00:00am</p></header><div class="content"><p>Clang will cache these automatically, can you give more details on exactly what you are seeing?<br></p><p> - Daniel<br></p><p>&gt; On Apr 28, 2016, at 10:50 PM, Ramakrishna Mallireddy via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I have these precompiled module files generated every-time I run the swift compiler.<br>&gt; <br>&gt; _Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>&gt; CFNetwork-1UTIO6DPB9R5P.pcm<br>&gt; CoreFoundation-CF8BGN41VJ11.pcm<br>&gt; CoreGraphics-3SDFP08OX46EF.pcm<br>&gt; CoreImage-3SDFP08OX46EF.pcm<br>&gt; Darwin-4F8STAM1KXDF.pcm<br>&gt; Foundation-2LQ7EQYFLQOP.pcm<br>&gt; ...etc<br>&gt; <br>&gt; How can I make the swift compiler to use these cache rather than compiling the libraries again.<br>&gt; <br>&gt; Thanks<br>&gt; Ramakrishna<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bec901e49831834ec4a6f4b86ff1f9b5?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Ramakrishna Mallireddy</string> &lt;ramakrishna.malli at gmail.com&gt;<p>April 30, 2016 at 02:00:00am</p></header><div class="content"><p>Every-time I run swift frontend the clang creates a new cachedir with<br>modulecache path hash(on every run the hash value is different for the same<br>input string) as the name of the dir and generates default cocoa framework<br>pcm files inside it.<br></p><p>I am using the swift front-end c++ api&#39;s to compile a simple swift file.<br>If I set the -fdisable-module-hash, then pcm files are generated without<br>the hash as required under the ModuleCache Dir.<br>so problem is solved as clang now see the existing pcm files, but now I hit<br>the next hurdle.<br></p><p>Now the pcm files are there in the cache, when I run the frontend again, I<br>assume clang will load the AST from the pcm files but clang *ReadAST *returns<br>with *ASTReader::OutOfDate *and as usual it calls *compileAndLoadModule *which<br>I want to avoid in the first place*.*<br></p><p>Call to *CLang*::*CompilerInstance*::*ModuleManager*-&gt;*ReadAST*<br>(ModuleFileName,<br></p><p>                                   serialization::MK_ImplicitModule,<br></p><p>                                   ImportLoc, ARRFlags) return with<br>*ASTReader::OutOfDate*<br></p><p>as *ReadASTCore*(FileName, Type, ImportLoc,  /*ImportedBy=*/nullptr,<br>Loaded, 0, 0, 0, ClientLoadCapabilities) returns with *OutOfDate.*<br></p><p>These files are generated just few minutes ago, how can it be OutOfDate I<br>don&#39;t have any idea.<br></p><p>File* modules.timestamp* under the ModuleCache Dir is 0 bytes.<br></p><p>Thanks<br></p><p>Ramakrishna<br></p><p>On Fri, Apr 29, 2016 at 9:15 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; Clang will cache these automatically, can you give more details on exactly<br>&gt; what you are seeing?<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; &gt; On Apr 28, 2016, at 10:50 PM, Ramakrishna Mallireddy via swift-users &lt;<br>&gt; swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I have these precompiled module files generated every-time I run the<br>&gt; swift compiler.<br>&gt; &gt;<br>&gt; &gt; _Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>&gt; &gt; CFNetwork-1UTIO6DPB9R5P.pcm<br>&gt; &gt; CoreFoundation-CF8BGN41VJ11.pcm<br>&gt; &gt; CoreGraphics-3SDFP08OX46EF.pcm<br>&gt; &gt; CoreImage-3SDFP08OX46EF.pcm<br>&gt; &gt; Darwin-4F8STAM1KXDF.pcm<br>&gt; &gt; Foundation-2LQ7EQYFLQOP.pcm<br>&gt; &gt; ...etc<br>&gt; &gt;<br>&gt; &gt; How can I make the swift compiler to use these cache rather than<br>&gt; compiling the libraries again.<br>&gt; &gt;<br>&gt; &gt; Thanks<br>&gt; &gt; Ramakrishna<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160430/db36293f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>April 29, 2016 at 09:00:00pm</p></header><div class="content"><p>If the hash value of the module is different then most likely something else is going on -- are you passing any special flags or defines as part of the compiler command? If you run the same command from swiftc on the command line do you see the same behavior?<br></p><p> - Daniel<br></p><p>&gt; On Apr 29, 2016, at 2:08 PM, Ramakrishna Mallireddy &lt;ramakrishna.malli at gmail.com&gt; wrote:<br>&gt; <br>&gt; Every-time I run swift frontend the clang creates a new cachedir with modulecache path hash(on every run the hash value is different for the same input string) as the name of the dir and generates default cocoa framework pcm files inside it.<br>&gt; <br>&gt; I am using the swift front-end c++ api&#39;s to compile a simple swift file.<br>&gt; If I set the -fdisable-module-hash, then pcm files are generated without the hash as required under the ModuleCache Dir.<br>&gt; so problem is solved as clang now see the existing pcm files, but now I hit the next hurdle.<br>&gt; <br>&gt; Now the pcm files are there in the cache, when I run the frontend again, I assume clang will load the AST from the pcm files but clang ReadAST returns with ASTReader::OutOfDate and as usual it calls compileAndLoadModule which I want to avoid in the first place.<br>&gt; <br>&gt; Call to CLang::CompilerInstance::ModuleManager-&gt;ReadAST(ModuleFileName,<br>&gt;                                    serialization::MK_ImplicitModule,<br>&gt; <br>&gt;                                    ImportLoc, ARRFlags) return with ASTReader::OutOfDate<br>&gt; <br>&gt; as ReadASTCore(FileName, Type, ImportLoc,  /*ImportedBy=*/nullptr, Loaded, 0, 0, 0, ClientLoadCapabilities) returns with OutOfDate.<br>&gt; <br>&gt; These files are generated just few minutes ago, how can it be OutOfDate I don&#39;t have any idea.<br>&gt; <br>&gt; File modules.timestamp under the ModuleCache Dir is 0 bytes.<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; Ramakrishna<br>&gt; <br>&gt; <br>&gt; On Fri, Apr 29, 2016 at 9:15 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt; Clang will cache these automatically, can you give more details on exactly what you are seeing?<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt; &gt; On Apr 28, 2016, at 10:50 PM, Ramakrishna Mallireddy via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I have these precompiled module files generated every-time I run the swift compiler.<br>&gt; &gt;<br>&gt; &gt; _Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>&gt; &gt; CFNetwork-1UTIO6DPB9R5P.pcm<br>&gt; &gt; CoreFoundation-CF8BGN41VJ11.pcm<br>&gt; &gt; CoreGraphics-3SDFP08OX46EF.pcm<br>&gt; &gt; CoreImage-3SDFP08OX46EF.pcm<br>&gt; &gt; Darwin-4F8STAM1KXDF.pcm<br>&gt; &gt; Foundation-2LQ7EQYFLQOP.pcm<br>&gt; &gt; ...etc<br>&gt; &gt;<br>&gt; &gt; How can I make the swift compiler to use these cache rather than compiling the libraries again.<br>&gt; &gt;<br>&gt; &gt; Thanks<br>&gt; &gt; Ramakrishna<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160429/c46d5061/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bec901e49831834ec4a6f4b86ff1f9b5?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Ramakrishna Mallireddy</string> &lt;ramakrishna.malli at gmail.com&gt;<p>April 30, 2016 at 03:00:00pm</p></header><div class="content"><p>No, it doesn&#39;t happen. The same flags works fine with swiftc when using<br>from command line.<br></p><p>swiftc xcode project generated from Ninja have the same issue as I have i.e<br>hash value is different for each run.<br></p><p>LLVMTest.app is my application that is linked with swift-clang, swift-llvm<br>&amp; swift-2.2.release libraries.<br></p><p>Following are the commandline arguments that I am using.<br></p><p>const char *argv[] = {sourceFilePath, &quot;-target&quot;, &quot;arm64-apple-ios8.0&quot;,<br>&quot;-module-cache-path&quot;, [moduleCache cStringUsingEncoding:NSUTF8StringEncoding],<br>&quot;-sdk&quot;, sdkpath, &quot;-emit-ir&quot;, &quot;-parse-as-library&quot;, &quot;-Onone&quot;, &quot;-o&quot;,<br>[destFilePath cStringUsingEncoding:NSUTF8StringEncoding]};<br></p><p>The swift front-end entry call.<br></p><p>frontend_main(llvm::ArrayRef&lt;const char *&gt;(argv, 13), &quot;LLVMTest&quot;, (void *)(<br>intptr_t)&quot;&quot;);<br></p><p>On Sat, Apr 30, 2016 at 9:35 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>wrote:<br></p><p>&gt; If the hash value of the module is different then most likely something<br>&gt; else is going on -- are you passing any special flags or defines as part of<br>&gt; the compiler command? If you run the same command from swiftc on the<br>&gt; command line do you see the same behavior?<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Apr 29, 2016, at 2:08 PM, Ramakrishna Mallireddy &lt;<br>&gt; ramakrishna.malli at gmail.com&gt; wrote:<br>&gt;<br>&gt; Every-time I run swift frontend the clang creates a new cachedir with<br>&gt; modulecache path hash(on every run the hash value is different for the same<br>&gt; input string) as the name of the dir and generates default cocoa framework<br>&gt; pcm files inside it.<br>&gt;<br>&gt; I am using the swift front-end c++ api&#39;s to compile a simple swift file.<br>&gt; If I set the -fdisable-module-hash, then pcm files are generated without<br>&gt; the hash as required under the ModuleCache Dir.<br>&gt; so problem is solved as clang now see the existing pcm files, but now I<br>&gt; hit the next hurdle.<br>&gt;<br>&gt; Now the pcm files are there in the cache, when I run the frontend again, I<br>&gt; assume clang will load the AST from the pcm files but clang *ReadAST *returns<br>&gt; with *ASTReader::OutOfDate *and as usual it calls *compileAndLoadModule *which<br>&gt; I want to avoid in the first place*.*<br>&gt;<br>&gt; Call to *CLang*::*CompilerInstance*::*ModuleManager*-&gt;*ReadAST*<br>&gt; (ModuleFileName,<br>&gt;<br>&gt;                                    serialization::MK_ImplicitModule,<br>&gt;<br>&gt;                                    ImportLoc, ARRFlags) return with<br>&gt; *ASTReader::OutOfDate*<br>&gt;<br>&gt; as *ReadASTCore*(FileName, Type, ImportLoc,  /*ImportedBy=*/nullptr,<br>&gt; Loaded, 0, 0, 0, ClientLoadCapabilities) returns with *OutOfDate.*<br>&gt;<br>&gt; These files are generated just few minutes ago, how can it be OutOfDate I<br>&gt; don&#39;t have any idea.<br>&gt;<br>&gt; File* modules.timestamp* under the ModuleCache Dir is 0 bytes.<br>&gt;<br>&gt; Thanks<br>&gt;<br>&gt; Ramakrishna<br>&gt;<br>&gt; On Fri, Apr 29, 2016 at 9:15 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; Clang will cache these automatically, can you give more details on<br>&gt;&gt; exactly what you are seeing?<br>&gt;&gt;<br>&gt;&gt;  - Daniel<br>&gt;&gt;<br>&gt;&gt; &gt; On Apr 28, 2016, at 10:50 PM, Ramakrishna Mallireddy via swift-users &lt;<br>&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I have these precompiled module files generated every-time I run the<br>&gt;&gt; swift compiler.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>&gt;&gt; &gt; CFNetwork-1UTIO6DPB9R5P.pcm<br>&gt;&gt; &gt; CoreFoundation-CF8BGN41VJ11.pcm<br>&gt;&gt; &gt; CoreGraphics-3SDFP08OX46EF.pcm<br>&gt;&gt; &gt; CoreImage-3SDFP08OX46EF.pcm<br>&gt;&gt; &gt; Darwin-4F8STAM1KXDF.pcm<br>&gt;&gt; &gt; Foundation-2LQ7EQYFLQOP.pcm<br>&gt;&gt; &gt; ...etc<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; How can I make the swift compiler to use these cache rather than<br>&gt;&gt; compiling the libraries again.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thanks<br>&gt;&gt; &gt; Ramakrishna<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160430/80db76e9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bec901e49831834ec4a6f4b86ff1f9b5?s=50"></div><header><strong>make swift compiler to use the precompiled module files</strong> from <string>Ramakrishna Mallireddy</string> &lt;ramakrishna.malli at gmail.com&gt;<p>May  4, 2016 at 09:00:00am</p></header><div class="content"><p>I found the the reason behind the odd behaviour, It&#39;s actually normal in my<br>case as my<br>*hsOpts*.*ResourceDir* path keeps on changing on every run during Debug<br>build/run process under Xcode.<br></p><p>*hsOpts*.*ResourceDir *path refers to a bundle inside my app. This is the<br>reason why I observe normal as odd behaviour.<br></p><p>It behaves normally, if I run the app directly on the simulator/device<br>irrespective of build configuration[*Debug*/*Release*].<br></p><p>Thanks Daniel for point to the commandline swiftc. I was able to find this<br>only by running swiftc with lldb &amp; my app in Xcode simultaneously, and<br>keeping a Breakpoint at *Clang*::*CompilerInvocation*::*getModuleHash*()<br>method.<br></p><p>cheers<br>RK<br></p><p>On Sat, Apr 30, 2016 at 3:02 PM, Ramakrishna Mallireddy &lt;<br>ramakrishna.malli at gmail.com&gt; wrote:<br></p><p>&gt; No, it doesn&#39;t happen. The same flags works fine with swiftc when using<br>&gt; from command line.<br>&gt;<br>&gt; swiftc xcode project generated from Ninja have the same issue as I have<br>&gt; i.e hash value is different for each run.<br>&gt;<br>&gt; LLVMTest.app is my application that is linked with swift-clang, swift-llvm<br>&gt; &amp; swift-2.2.release libraries.<br>&gt;<br>&gt; Following are the commandline arguments that I am using.<br>&gt;<br>&gt; const char *argv[] = {sourceFilePath, &quot;-target&quot;, &quot;arm64-apple-ios8.0&quot;,<br>&gt; &quot;-module-cache-path&quot;, [moduleCache cStringUsingEncoding:<br>&gt; NSUTF8StringEncoding], &quot;-sdk&quot;, sdkpath, &quot;-emit-ir&quot;, &quot;-parse-as-library&quot;,<br>&gt; &quot;-Onone&quot;, &quot;-o&quot;, [destFilePath cStringUsingEncoding:NSUTF8StringEncoding]};<br>&gt;<br>&gt; The swift front-end entry call.<br>&gt;<br>&gt; frontend_main(llvm::ArrayRef&lt;const char *&gt;(argv, 13), &quot;LLVMTest&quot;, (void<br>&gt; *)(intptr_t)&quot;&quot;);<br>&gt;<br>&gt; On Sat, Apr 30, 2016 at 9:35 AM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; If the hash value of the module is different then most likely something<br>&gt;&gt; else is going on -- are you passing any special flags or defines as part of<br>&gt;&gt; the compiler command? If you run the same command from swiftc on the<br>&gt;&gt; command line do you see the same behavior?<br>&gt;&gt;<br>&gt;&gt;  - Daniel<br>&gt;&gt;<br>&gt;&gt; On Apr 29, 2016, at 2:08 PM, Ramakrishna Mallireddy &lt;<br>&gt;&gt; ramakrishna.malli at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Every-time I run swift frontend the clang creates a new cachedir with<br>&gt;&gt; modulecache path hash(on every run the hash value is different for the same<br>&gt;&gt; input string) as the name of the dir and generates default cocoa framework<br>&gt;&gt; pcm files inside it.<br>&gt;&gt;<br>&gt;&gt; I am using the swift front-end c++ api&#39;s to compile a simple swift file.<br>&gt;&gt; If I set the -fdisable-module-hash, then pcm files are generated without<br>&gt;&gt; the hash as required under the ModuleCache Dir.<br>&gt;&gt; so problem is solved as clang now see the existing pcm files, but now I<br>&gt;&gt; hit the next hurdle.<br>&gt;&gt;<br>&gt;&gt; Now the pcm files are there in the cache, when I run the frontend again,<br>&gt;&gt; I assume clang will load the AST from the pcm files but clang *ReadAST *returns<br>&gt;&gt; with *ASTReader::OutOfDate *and as usual it calls *compileAndLoadModule *which<br>&gt;&gt; I want to avoid in the first place*.*<br>&gt;&gt;<br>&gt;&gt; Call to *CLang*::*CompilerInstance*::*ModuleManager*-&gt;*ReadAST*<br>&gt;&gt; (ModuleFileName,<br>&gt;&gt;<br>&gt;&gt;                                    serialization::MK_ImplicitModule,<br>&gt;&gt;<br>&gt;&gt;                                    ImportLoc, ARRFlags) return with<br>&gt;&gt; *ASTReader::OutOfDate*<br>&gt;&gt;<br>&gt;&gt; as *ReadASTCore*(FileName, Type, ImportLoc,  /*ImportedBy=*/nullptr,<br>&gt;&gt; Loaded, 0, 0, 0, ClientLoadCapabilities) returns with *OutOfDate.*<br>&gt;&gt;<br>&gt;&gt; These files are generated just few minutes ago, how can it be OutOfDate I<br>&gt;&gt; don&#39;t have any idea.<br>&gt;&gt;<br>&gt;&gt; File* modules.timestamp* under the ModuleCache Dir is 0 bytes.<br>&gt;&gt;<br>&gt;&gt; Thanks<br>&gt;&gt;<br>&gt;&gt; Ramakrishna<br>&gt;&gt;<br>&gt;&gt; On Fri, Apr 29, 2016 at 9:15 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; Clang will cache these automatically, can you give more details on<br>&gt;&gt;&gt; exactly what you are seeing?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Apr 28, 2016, at 10:50 PM, Ramakrishna Mallireddy via swift-users &lt;<br>&gt;&gt;&gt; swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; I have these precompiled module files generated every-time I run the<br>&gt;&gt;&gt; swift compiler.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; _Builtin_stddef_max_align_t-1LMTETLX3WNFT.pcm<br>&gt;&gt;&gt; &gt; CFNetwork-1UTIO6DPB9R5P.pcm<br>&gt;&gt;&gt; &gt; CoreFoundation-CF8BGN41VJ11.pcm<br>&gt;&gt;&gt; &gt; CoreGraphics-3SDFP08OX46EF.pcm<br>&gt;&gt;&gt; &gt; CoreImage-3SDFP08OX46EF.pcm<br>&gt;&gt;&gt; &gt; Darwin-4F8STAM1KXDF.pcm<br>&gt;&gt;&gt; &gt; Foundation-2LQ7EQYFLQOP.pcm<br>&gt;&gt;&gt; &gt; ...etc<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; How can I make the swift compiler to use these cache rather than<br>&gt;&gt;&gt; compiling the libraries again.<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Thanks<br>&gt;&gt;&gt; &gt; Ramakrishna<br>&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt; &gt; swift-users mailing list<br>&gt;&gt;&gt; &gt; swift-users at swift.org<br>&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160504/e5b00c28/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
