<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[RFC] New collections model: collections advance indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March  8, 2016 at 09:00:00am</p></header><div class="content"><p>on Tue Mar 08 2016, Károly Lőrentey &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On 2016-03-04 02:00:36 +0000, Dave Abrahams via swift-evolution said:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Thu Mar 03 2016, Dmitri Gribenko &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; On Thu, Mar 3, 2016 at 9:56 AM, plx via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; # Concern: Linearity Baked-In<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Even with this change, I have some concern that the proposed<br>&gt;&gt;&gt;&gt; protocol hierarchy from `Collection` onward feels like it has a<br>&gt;&gt;&gt;&gt; foreseeable lack of generality due to how strongly &quot;linear&quot; the<br>&gt;&gt;&gt;&gt; design wants `Collection` to be.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Is this the right time to raise such concerns (e.g. in-scope for<br>&gt;&gt;&gt;&gt; this discussion)?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We can definitely dive into more details about this.  One thing that I<br>&gt;&gt;&gt; would want to understand is whether this non-linearity concept could<br>&gt;&gt;&gt; be added later without a re-design.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Could you provide more information about the linearity issues that you<br>&gt;&gt;&gt; have in mind?  Are you thinking of something like Segmented Iterators<br>&gt;&gt;&gt; and Hierarchical Algorithms [1]?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [1] http://lafstern.org/matt/segmented.pdf<br>&gt;&gt;<br>&gt;&gt; Awesome paper; everybody should read it ;-)<br>&gt;<br>&gt; Indeed; I just read it, and it has given me Ideas.<br>&gt;<br>&gt; Off-list, I&#39;ve been thinking about implementing a low-level optimization<br>&gt; in stdlib that turns out to be essentially a narrow-minded<br>&gt; implementation of segmented iterators, dedicated to one specific usecase:<br>&gt; copying data out of a collection.<br>&gt;<br>&gt; See e.g. https://github.com/apple/swift/pull/1194#discussion_r55251606<br>&gt; (scroll down to the section about _copyContents; I&#39;m bad at succinct<br>&gt; commenting.)<br></p><p>I really want to handle this in a more general way.  The same principle<br>comes up in so many contexts: b-trees, deques, hash tables, circular<br>buffers, blocking matrix math, ...<br></p><p>That said, having a special-purpose function as an implementation detail<br>of the standard library is fine.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
