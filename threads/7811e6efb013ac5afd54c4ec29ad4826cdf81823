<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>January 14, 2016 at 12:00:00pm</p></header><div class="content"><p>This is a thought from a current problem I am running into (and have ran into in the past).<br></p><p>If you want to write any code using a library, you must have that library imported into the file. Totally cool with this for most cases.<br></p><p>Situation :<br></p><p>Building a third party library that can be used by others to simplify working with server APIs. I want to give the developer an option to use another third party library within mine. However, I don’t want my library to depend on the other library.<br></p><p>Possible Solution :<br></p><p>Add a system that does two things. 1) Checks for a library and if found imports it into file. 2) Checks if library is imported and allows source kit to parse conditional scope.<br></p><p>@importable ThirdPartyLibrary // would check if library is added to project and import it<br></p><p>if #imported(ThirdPartyLibrary) {<br>    <br>    // would check if library is imported before source kit parses scope<br>    <br>    // if library is not imported<br>    // scope would remain unparsed<br>    // scope could be removed as if it were a comment<br>    <br>}<br></p><p>Thanks.<br></p><p>Designer . Developer .  Nerd <br>Jo Albright<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/78111823/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7e9f543f0ffdb7c9a899e628fe76e7f3?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Jacob Bandes-Storch</string> &lt;jtbandes at gmail.com&gt;<p>January 14, 2016 at 08:00:00pm</p></header><div class="content"><p>This seems useful. Concrete syntax–wise, my first thought would be &quot;import?<br>ThirdPartyLibrary&quot;.<br></p><p>On Thu, Jan 14, 2016 at 9:22 AM, Jo Albright via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is a thought from a current problem I am running into (and have ran<br>&gt; into in the past).<br>&gt;<br>&gt; If you want to write any code using a library, you must have that library<br>&gt; imported into the file. Totally cool with this for most cases.<br>&gt;<br>&gt; Situation :<br>&gt;<br>&gt; Building a third party library that can be used by others to simplify<br>&gt; working with server APIs. I want to give the developer an option to use<br>&gt; another third party library within mine. However, I don’t want my library<br>&gt; to depend on the other library.<br>&gt;<br>&gt; Possible Solution :<br>&gt;<br>&gt; Add a system that does two things. 1) Checks for a library and if found<br>&gt; imports it into file. 2) Checks if library is imported and allows source<br>&gt; kit to parse conditional scope.<br>&gt;<br>&gt; @importable ThirdPartyLibrary // would check if library is added to<br>&gt; project and import it<br>&gt;<br>&gt; if #imported(ThirdPartyLibrary) {<br>&gt;<br>&gt;<br>&gt;     // would check if library is imported before source kit parses scope<br>&gt;<br>&gt;     // if library is not imported<br>&gt;     // scope would remain unparsed<br>&gt;     // scope could be removed as if it were a comment<br>&gt;<br>&gt;<br>&gt; }<br>&gt;<br>&gt; Thanks.<br>&gt;<br>&gt; Designer . Developer .  Nerd<br>&gt; Jo Albright<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/871b0f64/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 14, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 14, 2016, at 9:22 AM, Jo Albright via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is a thought from a current problem I am running into (and have ran into in the past).<br>&gt; <br>&gt; If you want to write any code using a library, you must have that library imported into the file. Totally cool with this for most cases.<br>&gt; <br>&gt; Situation :<br>&gt; <br>&gt; Building a third party library that can be used by others to simplify working with server APIs. I want to give the developer an option to use another third party library within mine. However, I don’t want my library to depend on the other library.<br>&gt; <br>&gt; Possible Solution :<br>&gt; <br>&gt; Add a system that does two things. 1) Checks for a library and if found imports it into file. 2) Checks if library is imported and allows source kit to parse conditional scope.<br>&gt; <br>&gt; @importable ThirdPartyLibrary // would check if library is added to project and import it<br>&gt; <br>&gt; if #imported(ThirdPartyLibrary) {<br>&gt;     <br>&gt;     // would check if library is imported before source kit parses scope<br>&gt;     <br>&gt;     // if library is not imported<br>&gt;     // scope would remain unparsed<br>&gt;     // scope could be removed as if it were a comment<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; Thanks.<br></p><p>Interesting idea. Unless I&#39;m misunderstanding something, it seems to me you could kill both birds with one stone. If we add an &#39;importable&#39; predicate to the &#39;#if&#39; language, then you can already use that to conditionalize the import:<br></p><p>#if importable(ThirdPartyLibrary)<br>import ThirdPartyLibrary<br>/* decls that depend on library */<br>#endif<br></p><p>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/452efa97/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>January 15, 2016 at 01:00:00am</p></header><div class="content"><p>&gt; Interesting idea. Unless I&#39;m misunderstanding something, it seems to me you could kill both birds with one stone. If we add an &#39;importable&#39; predicate to the &#39;#if&#39; language, then you can already use that to conditionalize the import:<br>&gt; <br>&gt; #if importable(ThirdPartyLibrary)<br>&gt; import ThirdPartyLibrary<br>&gt; /* decls that depend on library */<br>&gt; #endif<br>&gt; <br>&gt; -Joe<br></p><p><br>I am totally on board with that idea… since you could declare a type outside of the “#if importable” scope and add an extension inside the scope.<br></p><p>Designer . Developer .  Nerd <br>Jo Albright<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/611fb04a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>January 15, 2016 at 02:00:00am</p></header><div class="content"><p>If it&#39;s meant to be included in a library, don&#39;t we need a linkage mechanism that will expose these symbols only if another library is linked in?<br></p><p>Félix<br></p><p>&gt; Le 15 janv. 2016 à 01:43:16, Jo Albright via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt;&gt; Interesting idea. Unless I&#39;m misunderstanding something, it seems to me you could kill both birds with one stone. If we add an &#39;importable&#39; predicate to the &#39;#if&#39; language, then you can already use that to conditionalize the import:<br>&gt;&gt; <br>&gt;&gt; #if importable(ThirdPartyLibrary)<br>&gt;&gt; import ThirdPartyLibrary<br>&gt;&gt; /* decls that depend on library */<br>&gt;&gt; #endif<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt; <br>&gt; <br>&gt; I am totally on board with that idea… since you could declare a type outside of the “#if importable” scope and add an extension inside the scope.<br>&gt; <br>&gt; Designer . Developer .  Nerd <br>&gt; Jo Albright<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/820460a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 15, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Jan 14, 2016, at 11:17 PM, Félix Cloutier &lt;felixcca at yahoo.ca&gt; wrote:<br>&gt; <br>&gt; If it&#39;s meant to be included in a library, don&#39;t we need a linkage mechanism that will expose these symbols only if another library is linked in?<br></p><p>I see, that&#39;s the part I missed. If you wanted these symbols to be conditionally available, that would indeed require a new language, and probably dynamic linker, feature. You could however manage this without any new features, by adding the extensions in a third library dependent on the two base libraries.<br></p><p>-Joe<br></p><p>&gt; Félix<br>&gt; <br>&gt;&gt; Le 15 janv. 2016 à 01:43:16, Jo Albright via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; Interesting idea. Unless I&#39;m misunderstanding something, it seems to me you could kill both birds with one stone. If we add an &#39;importable&#39; predicate to the &#39;#if&#39; language, then you can already use that to conditionalize the import:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; #if importable(ThirdPartyLibrary)<br>&gt;&gt;&gt; import ThirdPartyLibrary<br>&gt;&gt;&gt; /* decls that depend on library */<br>&gt;&gt;&gt; #endif<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I am totally on board with that idea… since you could declare a type outside of the “#if importable” scope and add an extension inside the scope.<br>&gt;&gt; <br>&gt;&gt; Designer . Developer .  Nerd <br>&gt;&gt; Jo Albright<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/6b20fe4d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07fd59204e51d141632898356a6c1d00?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>Jo Albright</string> &lt;me at jo2.co&gt;<p>January 16, 2016 at 12:00:00pm</p></header><div class="content"><p>Sad news. Thanks for looking into it.<br></p><p>Designer . Developer .  Nerd <br>Jo Albright<br></p><p><br>&gt; On Jan 15, 2016, at 2:46 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 14, 2016, at 11:17 PM, Félix Cloutier &lt;felixcca at yahoo.ca &lt;mailto:felixcca at yahoo.ca&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; If it&#39;s meant to be included in a library, don&#39;t we need a linkage mechanism that will expose these symbols only if another library is linked in?<br>&gt; <br>&gt; I see, that&#39;s the part I missed. If you wanted these symbols to be conditionally available, that would indeed require a new language, and probably dynamic linker, feature. You could however manage this without any new features, by adding the extensions in a third library dependent on the two base libraries.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; Félix<br>&gt;&gt; <br>&gt;&gt;&gt; Le 15 janv. 2016 à 01:43:16, Jo Albright via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Interesting idea. Unless I&#39;m misunderstanding something, it seems to me you could kill both birds with one stone. If we add an &#39;importable&#39; predicate to the &#39;#if&#39; language, then you can already use that to conditionalize the import:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; #if importable(ThirdPartyLibrary)<br>&gt;&gt;&gt;&gt; import ThirdPartyLibrary<br>&gt;&gt;&gt;&gt; /* decls that depend on library */<br>&gt;&gt;&gt;&gt; #endif<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am totally on board with that idea… since you could declare a type outside of the “#if importable” scope and add an extension inside the scope.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Designer . Developer .  Nerd <br>&gt;&gt;&gt; Jo Albright<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160116/dd6043df/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Proposal Idea : Library (third party) Importable Checking</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 16, 2016 at 11:00:00am</p></header><div class="content"><p>I would suggest extending the existing @available syntax rather than using #imported. Either way, though, I like it.<br></p><p>&gt; On Jan 14, 2016, at 09:22, Jo Albright via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is a thought from a current problem I am running into (and have ran into in the past).<br>&gt; <br>&gt; If you want to write any code using a library, you must have that library imported into the file. Totally cool with this for most cases.<br>&gt; <br>&gt; Situation :<br>&gt; <br>&gt; Building a third party library that can be used by others to simplify working with server APIs. I want to give the developer an option to use another third party library within mine. However, I don’t want my library to depend on the other library.<br>&gt; <br>&gt; Possible Solution :<br>&gt; <br>&gt; Add a system that does two things. 1) Checks for a library and if found imports it into file. 2) Checks if library is imported and allows source kit to parse conditional scope.<br>&gt; <br>&gt; @importable ThirdPartyLibrary // would check if library is added to project and import it<br>&gt; <br>&gt; if #imported(ThirdPartyLibrary) {<br>&gt;     <br>&gt;     // would check if library is imported before source kit parses scope<br>&gt;     <br>&gt;     // if library is not imported<br>&gt;     // scope would remain unparsed<br>&gt;     // scope could be removed as if it were a comment<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; Thanks.<br>&gt; <br>&gt; Designer . Developer .  Nerd <br>&gt; Jo Albright<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160116/89290530/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
