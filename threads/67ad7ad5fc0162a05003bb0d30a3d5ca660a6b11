<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  7, 2016 at 09:00:00pm</p></header><div class="content"><p>on Sun Feb 07 2016, Matthew Judge &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I think part of where the current guidelines struggle is the ambiguity<br>&gt; of the term &quot;argument label&quot; <br></p><p>There&#39;s nothing ambiguous about it; it&#39;s the thing you write, with a<br>trailing colon, before an argument in an argument list.<br></p><p>&gt; so just for the sake of discussion I&#39;m going to define terms to be<br>&gt; explicit (not saying these are precisely the right terms).<br>&gt;<br>&gt; - External parameter names: names used to refer to parameters at the<br>&gt; use site<br></p><p>But they don&#39;t refer to parameters; they introduce arguments.  <br></p><p>     moveFrom(x, to: y)<br></p><p>“to” introduces an argument. That&#39;s why we&#39;re calling them argument<br>labels.<br></p><p>&gt; a.moveTo(x: 1, y: 2) // external parameter names are &quot;x&quot; and &quot;y&quot;<br>&gt; a.addGestureRecognizer(b) // does not have an external parameter name<br>&gt;<br>&gt; - Argument labels: words used to describe the argument being passed in<br>&gt; a.moveTo(x: 1, y: 2) // argument labels are &quot;x&quot; and &quot;y&quot;<br>&gt; a.addGestureRecognizer(b) // argument label is &quot;GestureRecognizer&quot;<br></p><p>Now you&#39;re redefining “argument label.”  Why?<br></p><p>&gt; Both of these are referred to as &quot;argument labels&quot; in the guidelines<br></p><p>Not unless I made a big mistake.  It is only supposed to mean what you<br>are calling an “external parameter name.”<br></p><p>&gt; and most of the discussion, but they are slightly different (though<br>&gt; overlapping) things. For instance, B.1 refers to &quot;external parameter<br>&gt; names&quot; and B.2 refers to &quot;argument labels&quot;<br></p><p>I think you&#39;ve misread the language there.  Would you mind re-evaluating<br>the rest of what you&#39;re saying here in that light?  I think we need to<br>start from a common understanding.<br></p><p><br>&gt; I think my distinction between these terms makes the guidelines simpler with fewer caveats:<br>&gt;<br>&gt; 1. Prune needless and redundant words from the argument labels<br>&gt; (i.e. remove any word that can be removed without confusing the<br>&gt; semantic intent)<br>&gt; 2. If the method reads as part of a grammatical phrase, prefer to<br>&gt; locate the first argument label as part of the base name instead of as<br>&gt; an external parameter name.<br>&gt; Special Cases/Exceptions:<br>&gt; a. Arguments with a default value should use an external parameter name<br>&gt; b. Arguments with similar semantic importance should be treated the<br>&gt; same (use external parameter names for argument labels or don&#39;t label<br>&gt; any)<br>&gt;<br>&gt; Not saying these are right/perfect, but I do think the distinction of<br>&gt; guidelines for argument labels and external parameter will make the<br>&gt; rules simpler, clearer, and more consistent. <br>&gt;<br>&gt; (Everything below here is applying these rules to each of the examples<br>&gt; used in Dave&#39;s original post.)<br>&gt;<br>&gt; print(x) // Guideline 1 prunes argument label<br>&gt; a.contains(b) // Same<br>&gt; a.mergeWith(b) // Guideline 1 shortens argument label &quot;WithCollection&quot; to &quot;With&quot;<br>&gt; // Guideline 2 moves &quot;With&quot; into the base name<br>&gt;<br>&gt; a.addGestureRecognizer(x)<br>&gt; // Guideline 1 does NOT prune &quot;GestureRecognizer&quot; because it would change the semantic meaning<br>&gt; // Guideline 2 moves it into the base name<br>&gt;<br>&gt; - the following 3 examples from the original are treated the same under these rules, for the same reasons mentioned<br>&gt;&gt;&gt;&gt;&gt;     a.dismiss(b)           // no, unless a is really dismissing b<br>&gt;&gt;&gt;&gt;&gt;     a.dismissAnimated(b)   // no, not grammatical<br>&gt;&gt;&gt;&gt;&gt;     a.dismiss(animated: b) // yes, using a label<br>&gt;<br>&gt; a.encodeWith(b) // Guideline 1 shortens argument label &quot;WithCoder&quot; to &quot;With&quot;<br>&gt; // Guideline 2 says put &quot;With&quot; to the base name<br>&gt;<br>&gt; a.moveFrom(b, to: c) // Only change to the results of Dave&#39;s examples<br>&gt; // Guideline 1 shortens &quot;fromScene&quot; to &quot;from&quot; and &quot;toScene&quot; to &quot;to&quot;<br>&gt; // Exception (b) prevents Guideline 2 from moving &quot;from&quot; into the base name<br>&gt;<br>&gt; * Note that I believe the only change to these guidelines required to<br>&gt; recover the behavior of Dave&#39;s original guidelines is modifying<br>&gt; Exception (b) to language similar to Dave&#39;s A.<br>&gt;<br>&gt; - the following two examples would be covered by Exception (b) as well<br>&gt;&gt;&gt;&gt;&gt;     a.tracksWith(mediaType: b, composer: c)<br>&gt;&gt;&gt;&gt;&gt;     a.moveTo(x: 22, y: 99)<br>&gt;<br>&gt; Sorry for the long email... Hopefully it&#39;s somewhat useful.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February  8, 2016 at 09:00:00am</p></header><div class="content"><p>On Mon, Feb 8, 2016 at 12:45 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Sun Feb 07 2016, Matthew Judge &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; I think part of where the current guidelines struggle is the ambiguity<br>&gt; &gt; of the term &quot;argument label&quot;<br>&gt;<br>&gt; There&#39;s nothing ambiguous about it; it&#39;s the thing you write, with a<br>&gt; trailing colon, before an argument in an argument list.<br>&gt;<br>&gt; &gt; so just for the sake of discussion I&#39;m going to define terms to be<br>&gt; &gt; explicit (not saying these are precisely the right terms).<br>&gt; &gt;<br>&gt; &gt; - External parameter names: names used to refer to parameters at the<br>&gt; &gt; use site<br>&gt;<br>&gt; But they don&#39;t refer to parameters; they introduce arguments.<br>&gt;<br>&gt;      moveFrom(x, to: y)<br>&gt;<br>&gt; “to” introduces an argument. That&#39;s why we&#39;re calling them argument<br>&gt; labels.<br>&gt;<br></p><p>Agreed - I was just trying to distinguish between the two concepts.<br></p><p><br>&gt; &gt; a.moveTo(x: 1, y: 2) // external parameter names are &quot;x&quot; and &quot;y&quot;<br>&gt; &gt; a.addGestureRecognizer(b) // does not have an external parameter name<br>&gt; &gt;<br>&gt; &gt; - Argument labels: words used to describe the argument being passed in<br>&gt; &gt; a.moveTo(x: 1, y: 2) // argument labels are &quot;x&quot; and &quot;y&quot;<br>&gt; &gt; a.addGestureRecognizer(b) // argument label is &quot;GestureRecognizer&quot;<br>&gt;<br>&gt; Now you&#39;re redefining “argument label.”  Why?<br>&gt;<br></p><p><br>I don&#39;t so much want to redefine &quot;argument label&quot; as have a term to<br>describe this concept.<br></p><p><br>&gt;<br>&gt; &gt; Both of these are referred to as &quot;argument labels&quot; in the guidelines<br>&gt;<br>&gt; Not unless I made a big mistake.  It is only supposed to mean what you<br>&gt; are calling an “external parameter name.”<br>&gt;<br></p><p>I was reading this part of B.2: &quot;first argument is part of a prepositional<br>phrase, put the parenthesis immediately after the preposition.&quot; as &quot;move<br>the preposition from the first argument label into the base name&quot; but<br>you&#39;re right, your language doesn&#39;t actually imply that the preposition is<br>part of the argument label. My apologies.<br></p><p><br>&gt;<br>&gt; &gt; and most of the discussion, but they are slightly different (though<br>&gt; &gt; overlapping) things. For instance, B.1 refers to &quot;external parameter<br>&gt; &gt; names&quot; and B.2 refers to &quot;argument labels&quot;<br>&gt;<br>&gt; I think you&#39;ve misread the language there.  Would you mind re-evaluating<br>&gt; the rest of what you&#39;re saying here in that light?  I think we need to<br>&gt; start from a common understanding.<br>&gt;<br></p><p>The key point from the rest of what I&#39;m saying is that the guideline for<br>when to omit words in a method/function name can be more consistently and<br>clearly applied to my redefinition of &quot;argument label&quot;... The reason we<br>keep &quot;gestureRecognizer&quot; is the same regardless of whether it is spelled:<br> a.add(gestureRecognizer: b)<br> a.addGestureRecognizer(b)<br> and the reason we omit the argument label (original definition) in the<br>following are different.<br> anArray.add(b) // Prune &quot;Element&quot; w/o changing semantic meaning<br> a.addGestureRecognizer(b) // Words describing the first argument are<br>already in the base name<br></p><p><br>&gt;<br>&gt;<br>&gt; &gt; I think my distinction between these terms makes the guidelines simpler<br>&gt; with fewer caveats:<br>&gt; &gt;<br>&gt; &gt; 1. Prune needless and redundant words from the argument labels<br>&gt; &gt; (i.e. remove any word that can be removed without confusing the<br>&gt; &gt; semantic intent)<br>&gt; &gt; 2. If the method reads as part of a grammatical phrase, prefer to<br>&gt; &gt; locate the first argument label as part of the base name instead of as<br>&gt; &gt; an external parameter name.<br>&gt; &gt; Special Cases/Exceptions:<br>&gt; &gt; a. Arguments with a default value should use an external parameter name<br>&gt; &gt; b. Arguments with similar semantic importance should be treated the<br>&gt; &gt; same (use external parameter names for argument labels or don&#39;t label<br>&gt; &gt; any)<br>&gt; &gt;<br>&gt; &gt; Not saying these are right/perfect, but I do think the distinction of<br>&gt; &gt; guidelines for argument labels and external parameter will make the<br>&gt; &gt; rules simpler, clearer, and more consistent.<br>&gt; &gt;<br>&gt; &gt; (Everything below here is applying these rules to each of the examples<br>&gt; &gt; used in Dave&#39;s original post.)<br>&gt; &gt;<br>&gt; &gt; print(x) // Guideline 1 prunes argument label<br>&gt; &gt; a.contains(b) // Same<br>&gt; &gt; a.mergeWith(b) // Guideline 1 shortens argument label &quot;WithCollection&quot;<br>&gt; to &quot;With&quot;<br>&gt; &gt; // Guideline 2 moves &quot;With&quot; into the base name<br>&gt; &gt;<br>&gt; &gt; a.addGestureRecognizer(x)<br>&gt; &gt; // Guideline 1 does NOT prune &quot;GestureRecognizer&quot; because it would<br>&gt; change the semantic meaning<br>&gt; &gt; // Guideline 2 moves it into the base name<br>&gt; &gt;<br>&gt; &gt; - the following 3 examples from the original are treated the same under<br>&gt; these rules, for the same reasons mentioned<br>&gt; &gt;&gt;&gt;&gt;&gt;     a.dismiss(b)           // no, unless a is really dismissing b<br>&gt; &gt;&gt;&gt;&gt;&gt;     a.dismissAnimated(b)   // no, not grammatical<br>&gt; &gt;&gt;&gt;&gt;&gt;     a.dismiss(animated: b) // yes, using a label<br>&gt; &gt;<br>&gt; &gt; a.encodeWith(b) // Guideline 1 shortens argument label &quot;WithCoder&quot; to<br>&gt; &quot;With&quot;<br>&gt; &gt; // Guideline 2 says put &quot;With&quot; to the base name<br>&gt; &gt;<br>&gt; &gt; a.moveFrom(b, to: c) // Only change to the results of Dave&#39;s examples<br>&gt; &gt; // Guideline 1 shortens &quot;fromScene&quot; to &quot;from&quot; and &quot;toScene&quot; to &quot;to&quot;<br>&gt; &gt; // Exception (b) prevents Guideline 2 from moving &quot;from&quot; into the base<br>&gt; name<br>&gt; &gt;<br>&gt; &gt; * Note that I believe the only change to these guidelines required to<br>&gt; &gt; recover the behavior of Dave&#39;s original guidelines is modifying<br>&gt; &gt; Exception (b) to language similar to Dave&#39;s A.<br>&gt; &gt;<br>&gt; &gt; - the following two examples would be covered by Exception (b) as well<br>&gt; &gt;&gt;&gt;&gt;&gt;     a.tracksWith(mediaType: b, composer: c)<br>&gt; &gt;&gt;&gt;&gt;&gt;     a.moveTo(x: 22, y: 99)<br>&gt; &gt;<br>&gt; &gt; Sorry for the long email... Hopefully it&#39;s somewhat useful.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/4f56aba0/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
