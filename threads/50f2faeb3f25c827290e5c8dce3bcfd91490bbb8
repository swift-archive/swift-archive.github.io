<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Parse expressions after &#39;as&#39; and &#39;is&#39; instead of just types</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May 19, 2016 at 03:00:00pm</p></header><div class="content"><p>on Mon May 16 2016, Joe Groff &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Currently, we parse a type after &#39;as[?!]&#39; and &#39;is&#39;. This is mostly<br>&gt; what you&#39;d expect, but does lead to problems when an &#39;as&#39; expression<br>&gt; appears as part of a comparison:<br>&gt;<br>&gt; 	20 as Int64 &lt; y as Int64 // error, &#39;&gt;&#39; expected to close generic parameter list Int64&lt;y&gt;<br>&gt;<br>&gt; Looking to the future, many people have also expressed interest in the<br>&gt; ability to do dynamic type checks against metatype values, not only<br>&gt; static types, as in:<br>&gt;<br>&gt; 	class Base {}<br>&gt; 	class DerivedA {}<br>&gt; 	class DerivedB {}<br>&gt;<br>&gt; 	var x: Base.Type = DerivedA<br>&gt;<br>&gt; 	DerivedA() as? x // succeeds<br>&gt; 	DerivedB() as? x // fails<br>&gt;<br>&gt; If we accept<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0090-remove-dot-self.md,<br>&gt; dropping the &#39;.self&#39; requirement to refer to type objects, then I<br>&gt; think we should also change &#39;is&#39; and &#39;as&#39; to parse the expression<br>&gt; grammar on their right-hand side, leaving it up to the normal<br>&gt; expression disambiguation rule to handle angle brackets. This solves<br>&gt; the &#39;20 as Int64 &lt; x&#39; problem, and prepares us to support dynamic<br>&gt; is/as queries in the future. (To be clear, designing dynamic queries<br>&gt; should be its own discussion.) What do you all think?<br></p><p>+1<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
