<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>Good day, Swift package manager development folks.<br></p><p>(There are at least two separate issues being inquired about, but with <br>the same introductory context.)<br></p><p>&quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are <br>agonizingly locked-down environments.  Essentially Swift and all of its <br>dependencies and one&#39;s project&#39;s dependencies must be stuffed into an <br>arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually <br>/app/ ) and build processes performed without any root-user privileges.  <br>One consequence is that one cannot use the OS&#39; package-management system <br>to install dependencies, but one must obtain them and wrestle them into <br>&quot;the hole,&quot; instead.  The strategy seems rather silly.<br></p><p>While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be <br>deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; <br>command, I have come across a few issues.<br></p><p>One issue is that &#39;swift build&#39; wants to do something with the <br>/usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains <br>a hard-coded path to a ///usr/include/complex.h header-file.  As is <br>usually the case, this hard-coded path will only work in a narrow set of <br>environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I <br>have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; <br>command-line arguments, but I do not observe these paths (nor sub-paths) <br>being tried for the complex.h header-file during complication.  I used <br>&#39;strace&#39; to trace the compilation process, including all subprocesses.<br></p><p>Is there some other mechanism to instruct the Swift 3 package manager <br>that its [unfortunately] hard-coded paths are relative to some <br>particular path?  If not, would it be sensible to introduce some logic <br>to specify such a prefix path?<br></p><p>Thank you for your time and attention.<br>-- <br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  8, 2016 at 08:00:00pm</p></header><div class="content"><p>Why do you want the headers inside the app sandbox? Usually they would remain outside.<br></p><p>Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack)? How does it handle the problem you are trying to solve?<br></p><p> - Daniel<br></p><p>&gt; On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Good day, Swift package manager development folks.<br>&gt; <br>&gt; (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt; <br>&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt; <br>&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt; <br>&gt; One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt; <br>&gt; Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt; <br>&gt; Thank you for your time and attention.<br>&gt; -- <br>&gt; <br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; W: https://www.synthetel.com<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>Thank you for your kind response.<br></p><p>As mentioned, there is no choice: If the headers aren&#39;t present in the <br>base image that a particular Cloud provider provides, they can only be <br>present in the application sand-box by one&#39;s own hand.<br></p><p>All Swift build-packs to date and to my knowledge use Swift 2.2 and do <br>not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to develop the <br>next generation.<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt; Why do you want the headers inside the app sandbox? Usually they would remain outside.<br>&gt;<br>&gt; Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack)? How does it handle the problem you are trying to solve?<br>&gt;<br>&gt;   - Daniel<br>&gt;<br>&gt;&gt; On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Good day, Swift package manager development folks.<br>&gt;&gt;<br>&gt;&gt; (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt;&gt;<br>&gt;&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;<br>&gt;&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt;&gt;<br>&gt;&gt; One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt;&gt;<br>&gt;&gt; Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt;&gt;<br>&gt;&gt; Thank you for your time and attention.<br>&gt;&gt; -- <br>&gt;&gt;<br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160608/5d9337f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eb0623e24ffb4072ad81b19959d192f?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Brian Croom</string> &lt;brian.s.croom at gmail.com&gt;<p>June  9, 2016 at 01:00:00am</p></header><div class="content"><p>IBM&#39;s buildpack as well as the ones from which it descends (<br>https://github.com/cloudfoundry-community/swift-buildpack and<br>https://github.com/kylef/heroku-buildpack-swift) are all based around<br>SwiftPM and the `swift build` command. I have not personally experienced<br>the problem you are describing either, although I have not tried pushing<br>any apps using more recent Swift toolchain snapshots.<br></p><p>Can you provide more details about how the error presents itself? Have you<br>tried using any of these other buildpacks with your app code?<br></p><p>Brian<br></p><p>onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt;:<br></p><p>&gt; Thank you for your kind response.<br>&gt;<br>&gt; As mentioned, there is no choice: If the headers aren&#39;t present in the<br>&gt; base image that a particular Cloud provider provides, they can only be<br>&gt; present in the application sand-box by one&#39;s own hand.<br>&gt;<br>&gt; All Swift build-packs to date and to my knowledge use Swift 2.2 and do not<br>&gt; use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to develop the next<br>&gt; generation.<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;<br>&gt; Why do you want the headers inside the app sandbox? Usually they would remain outside.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack)? How does it handle the problem you are trying to solve?<br>&gt;<br>&gt;<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt; wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt; Good day, Swift package manager development folks.<br>&gt;<br>&gt;<br>&gt;<br>&gt; (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt;<br>&gt;<br>&gt;<br>&gt; &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt;<br>&gt;<br>&gt;<br>&gt; While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt;<br>&gt;<br>&gt;<br>&gt; One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt;<br>&gt;<br>&gt;<br>&gt; Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt;<br>&gt;<br>&gt;<br>&gt; Thank you for your time and attention.<br>&gt;<br>&gt; --<br>&gt;<br>&gt;<br>&gt;<br>&gt; Shao Miller<br>&gt;<br>&gt; Synthetel Corporation<br>&gt;<br>&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;<br>&gt; E: swift-build-dev at synthetel.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/3856b9f3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  9, 2016 at 02:00:00am</p></header><div class="content"><p>Thank you for your kind response.<br></p><p>The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc <br>-I/app/.delta/ -v<br></p><p>The /app/.delta/ directory is where Swift and most dependencies have <br>been dumped.  The file /app/.delta/usr/include/complex.h exists. The <br>error is:<br></p><p>&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error: <br>&gt; header &#39;///usr/include/complex.h&#39; not found<br>&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;              ^<br>&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I <br>&gt; /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm <br>&gt; -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br></p><p>Thank you for pointing out that these build-packs are using &#39;swift <br>build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I <br>thought I&#39;d recalled them having derived from the others you&#39;ve <br>mentioned.  I was mistaken.  My command somewhat resembles the IBM <br>Bluemix build-pack command[1], which is:<br>swift build --configuration release -Xcc -fblocks -Xcc <br>-I$BUILD_DIR/.apt/usr/include ...and so on...<br></p><p>I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its <br>subprocesses during the compilation yields only these two instances of <br>&quot;complex&quot;:<br></p><p>&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 <br>&gt; ENOENT (No such file or directory)<br>&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, <br>&gt; 43) = 43<br></p><p>Am I making an obvious mistake?<br></p><p>[1] <br>https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>[2] <br>https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/9/2016 01:15, Brian Croom wrote:<br>&gt; IBM&#39;s buildpack as well as the ones from which it descends <br>&gt; (https://github.com/cloudfoundry-community/swift-buildpack and <br>&gt; https://github.com/kylef/heroku-buildpack-swift) are all based around <br>&gt; SwiftPM and the `swift build` command. I have not personally <br>&gt; experienced the problem you are describing either, although I have not <br>&gt; tried pushing any apps using more recent Swift toolchain snapshots.<br>&gt;<br>&gt; Can you provide more details about how the error presents itself? Have <br>&gt; you tried using any of these other buildpacks with your app code?<br>&gt;<br>&gt; Brian<br>&gt;<br>&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev <br>&gt; &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;<br>&gt;     Thank you for your kind response.<br>&gt;<br>&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;<br>&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;     develop the next generation.<br>&gt;<br>&gt;     Shao Miller<br>&gt;     Synthetel Corporation<br>&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;     E: swift-build-dev at synthetel.com<br>&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;     W: https://www.synthetel.com<br>&gt;<br>&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they would remain outside.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack)? How does it handle the problem you are trying to solve?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;       - Daniel<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt;swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;  wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     -- <br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     W:https://www.synthetel.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eb0623e24ffb4072ad81b19959d192f?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Brian Croom</string> &lt;brian.s.croom at gmail.com&gt;<p>June  9, 2016 at 08:00:00am</p></header><div class="content"><p>What underlying OS is your build process running on? And where are you<br>getting your Swift toolchain?<br></p><p>Within your toolchain is a `glibc.modulemap` which contains hard-coded<br>absolute paths to certain system headers. The failure you are seeing is<br>presumably due to the fact that system headers are not present at those<br>paths. You may have to manually modify the modulemap to point to the actual<br>location of the headers on the system that is performing the build.<br></p><p>This old bug contains some tidbits that may also help you understand what&#39;s<br>going on here: https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br></p><p>Brian<br></p><p>torsdag 9 juni 2016 skrev Shao Miller &lt;swift-build-dev at synthetel.com&gt;:<br></p><p>&gt; Thank you for your kind response.<br>&gt;<br>&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc<br>&gt; -I/app/.delta/ -v<br>&gt;<br>&gt; The /app/.delta/ directory is where Swift and most dependencies have been<br>&gt; dumped.  The file /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;<br>&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error:<br>&gt;&gt; header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;              ^<br>&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I<br>&gt;&gt; /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm<br>&gt;&gt; -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;<br>&gt;<br>&gt; Thank you for pointing out that these build-packs are using &#39;swift<br>&gt; build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I<br>&gt; thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.<br>&gt; I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack<br>&gt; command[1], which is:<br>&gt; swift build --configuration release -Xcc -fblocks -Xcc<br>&gt; -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;<br>&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its<br>&gt; subprocesses during the compilation yields only these two instances of<br>&gt; &quot;complex&quot;:<br>&gt;<br>&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT<br>&gt;&gt; (No such file or directory)<br>&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43) =<br>&gt;&gt; 43<br>&gt;&gt;<br>&gt;<br>&gt; Am I making an obvious mistake?<br>&gt;<br>&gt; [1]<br>&gt; https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt; [2]<br>&gt; https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;<br>&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (<br>&gt;&gt; https://github.com/cloudfoundry-community/swift-buildpack and<br>&gt;&gt; https://github.com/kylef/heroku-buildpack-swift) are all based around<br>&gt;&gt; SwiftPM and the `swift build` command. I have not personally experienced<br>&gt;&gt; the problem you are describing either, although I have not tried pushing<br>&gt;&gt; any apps using more recent Swift toolchain snapshots.<br>&gt;&gt;<br>&gt;&gt; Can you provide more details about how the error presents itself? Have<br>&gt;&gt; you tried using any of these other buildpacks with your app code?<br>&gt;&gt;<br>&gt;&gt; Brian<br>&gt;&gt;<br>&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;     Thank you for your kind response.<br>&gt;&gt;<br>&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt;<br>&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;     develop the next generation.<br>&gt;&gt;<br>&gt;&gt;     Shao Miller<br>&gt;&gt;     Synthetel Corporation<br>&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;     E: swift-build-dev at synthetel.com<br>&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;     W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they<br>&gt;&gt;&gt; would remain outside.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (<br>&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack)? How does it handle the<br>&gt;&gt;&gt; problem you are trying to solve?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;       - Daniel<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt;<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;  wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but<br>&gt;&gt;&gt;&gt; with the same introductory context.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry<br>&gt;&gt;&gt;&gt; are agonizingly locked-down environments.  Essentially Swift and all of its<br>&gt;&gt;&gt;&gt; dependencies and one&#39;s project&#39;s dependencies must be stuffed into an<br>&gt;&gt;&gt;&gt; arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually<br>&gt;&gt;&gt;&gt; /app/ ) and build processes performed without any root-user privileges.<br>&gt;&gt;&gt;&gt; One consequence is that one cannot use the OS&#39; package-management system to<br>&gt;&gt;&gt;&gt; install dependencies, but one must obtain them and wrestle them into &quot;the<br>&gt;&gt;&gt;&gt; hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt;&gt; deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the<br>&gt;&gt;&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a<br>&gt;&gt;&gt;&gt; hard-coded path to a ///usr/include/complex.h header-file.  As is usually<br>&gt;&gt;&gt;&gt; the case, this hard-coded path will only work in a narrow set of<br>&gt;&gt;&gt;&gt; environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have<br>&gt;&gt;&gt;&gt; attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line<br>&gt;&gt;&gt;&gt; arguments, but I do not observe these paths (nor sub-paths) being tried for<br>&gt;&gt;&gt;&gt; the complex.h header-file during complication.  I used &#39;strace&#39; to trace<br>&gt;&gt;&gt;&gt; the compilation process, including all subprocesses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package<br>&gt;&gt;&gt;&gt; manager that its [unfortunately] hard-coded paths are relative to some<br>&gt;&gt;&gt;&gt; particular path?  If not, would it be sensible to introduce some logic to<br>&gt;&gt;&gt;&gt; specify such a prefix path?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     W:https://www.synthetel.com<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/eb946eea/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/17301ad52a677b00a621c39ab052e16d?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Daniel Dunbar</string> &lt;daniel at zuster.org&gt;<p>June  9, 2016 at 08:00:00am</p></header><div class="content"><p>The IBM build pack installs a number of system dependencies which should<br>include those headers, though. You should have the headers rooted at /usr,<br>not try and have them in the app sandbox.<br></p><p> - Daniel<br></p><p>On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt; wrote:<br></p><p>&gt; What underlying OS is your build process running on? And where are you<br>&gt; getting your Swift toolchain?<br>&gt;<br>&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded<br>&gt; absolute paths to certain system headers. The failure you are seeing is<br>&gt; presumably due to the fact that system headers are not present at those<br>&gt; paths. You may have to manually modify the modulemap to point to the actual<br>&gt; location of the headers on the system that is performing the build.<br>&gt;<br>&gt; This old bug contains some tidbits that may also help you understand<br>&gt; what&#39;s going on here:<br>&gt; https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;<br>&gt; Brian<br>&gt;<br>&gt;<br>&gt; torsdag 9 juni 2016 skrev Shao Miller &lt;swift-build-dev at synthetel.com&gt;:<br>&gt;<br>&gt;&gt; Thank you for your kind response.<br>&gt;&gt;<br>&gt;&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc<br>&gt;&gt; -I/app/.delta/ -v<br>&gt;&gt;<br>&gt;&gt; The /app/.delta/ directory is where Swift and most dependencies have been<br>&gt;&gt; dumped.  The file /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;&gt;<br>&gt;&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error:<br>&gt;&gt;&gt; header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;&gt;              ^<br>&gt;&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I<br>&gt;&gt;&gt; /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm<br>&gt;&gt;&gt; -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thank you for pointing out that these build-packs are using &#39;swift<br>&gt;&gt; build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I<br>&gt;&gt; thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.<br>&gt;&gt; I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack<br>&gt;&gt; command[1], which is:<br>&gt;&gt; swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;&gt; -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt;<br>&gt;&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its<br>&gt;&gt; subprocesses during the compilation yields only these two instances of<br>&gt;&gt; &quot;complex&quot;:<br>&gt;&gt;<br>&gt;&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT<br>&gt;&gt;&gt; (No such file or directory)<br>&gt;&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43)<br>&gt;&gt;&gt; = 43<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Am I making an obvious mistake?<br>&gt;&gt;<br>&gt;&gt; [1]<br>&gt;&gt; https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;&gt; [2]<br>&gt;&gt; https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;&gt;<br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;<br>&gt;&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (<br>&gt;&gt;&gt; https://github.com/cloudfoundry-community/swift-buildpack and<br>&gt;&gt;&gt; https://github.com/kylef/heroku-buildpack-swift) are all based around<br>&gt;&gt;&gt; SwiftPM and the `swift build` command. I have not personally experienced<br>&gt;&gt;&gt; the problem you are describing either, although I have not tried pushing<br>&gt;&gt;&gt; any apps using more recent Swift toolchain snapshots.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Can you provide more details about how the error presents itself? Have<br>&gt;&gt;&gt; you tried using any of these other buildpacks with your app code?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Brian<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Thank you for your kind response.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;&gt;     develop the next generation.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;     E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;&gt;     W: https://www.synthetel.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they<br>&gt;&gt;&gt;&gt; would remain outside.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (<br>&gt;&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack)? How does it handle the<br>&gt;&gt;&gt;&gt; problem you are trying to solve?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;       - Daniel<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt;<br>&gt;&gt;&gt;&gt;&gt; swift-build-dev at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but<br>&gt;&gt;&gt;&gt;&gt; with the same introductory context.)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry<br>&gt;&gt;&gt;&gt;&gt; are agonizingly locked-down environments.  Essentially Swift and all of its<br>&gt;&gt;&gt;&gt;&gt; dependencies and one&#39;s project&#39;s dependencies must be stuffed into an<br>&gt;&gt;&gt;&gt;&gt; arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually<br>&gt;&gt;&gt;&gt;&gt; /app/ ) and build processes performed without any root-user privileges.<br>&gt;&gt;&gt;&gt;&gt; One consequence is that one cannot use the OS&#39; package-management system to<br>&gt;&gt;&gt;&gt;&gt; install dependencies, but one must obtain them and wrestle them into &quot;the<br>&gt;&gt;&gt;&gt;&gt; hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to<br>&gt;&gt;&gt;&gt;&gt; be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the<br>&gt;&gt;&gt;&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a<br>&gt;&gt;&gt;&gt;&gt; hard-coded path to a ///usr/include/complex.h header-file.  As is usually<br>&gt;&gt;&gt;&gt;&gt; the case, this hard-coded path will only work in a narrow set of<br>&gt;&gt;&gt;&gt;&gt; environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have<br>&gt;&gt;&gt;&gt;&gt; attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line<br>&gt;&gt;&gt;&gt;&gt; arguments, but I do not observe these paths (nor sub-paths) being tried for<br>&gt;&gt;&gt;&gt;&gt; the complex.h header-file during complication.  I used &#39;strace&#39; to trace<br>&gt;&gt;&gt;&gt;&gt; the compilation process, including all subprocesses.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package<br>&gt;&gt;&gt;&gt;&gt; manager that its [unfortunately] hard-coded paths are relative to some<br>&gt;&gt;&gt;&gt;&gt; particular path?  If not, would it be sensible to introduce some logic to<br>&gt;&gt;&gt;&gt;&gt; specify such a prefix path?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     W:https://www.synthetel.com<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/db601a7a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  9, 2016 at 11:00:00am</p></header><div class="content"><p>Thanks, but let me try to explain for a third time: The build <br>environment provided by CloudFoundry-style providers is locked-down.  <br>You have no choice where things go.  They must all go inside a sandbox.  <br>That means you cannot put headers underneath the /usr/ directory.  There <br>is no way out of the sandbox, as there are no root-user privileges.<br></p><p>This is why I&#39;m asking about whether or not it&#39;s reasonable for Swift to <br>avoid hard-coded paths, or to at least allow a given prefix to be specified.<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt; The IBM build pack installs a number of system dependencies which <br>&gt; should include those headers, though. You should have the headers <br>&gt; rooted at /usr, not try and have them in the app sandbox.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev <br>&gt; &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     What underlying OS is your build process running on? And where are<br>&gt;     you getting your Swift toolchain?<br>&gt;<br>&gt;     Within your toolchain is a `glibc.modulemap` which contains<br>&gt;     hard-coded absolute paths to certain system headers. The failure<br>&gt;     you are seeing is presumably due to the fact that system headers<br>&gt;     are not present at those paths. You may have to manually modify<br>&gt;     the modulemap to point to the actual location of the headers on<br>&gt;     the system that is performing the build.<br>&gt;<br>&gt;     This old bug contains some tidbits that may also help you<br>&gt;     understand what&#39;s going on here:<br>&gt;     https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;<br>&gt;     Brian<br>&gt;<br>&gt;<br>&gt;     torsdag 9 juni 2016 skrev Shao Miller<br>&gt;     &lt;swift-build-dev at synthetel.com<br>&gt;     &lt;mailto:swift-build-dev at synthetel.com&gt;&gt;:<br>&gt;<br>&gt;         Thank you for your kind response.<br>&gt;<br>&gt;         The command I execute is: swift build -Xcc -I/app/.delta/<br>&gt;         -Xswiftc -I/app/.delta/ -v<br>&gt;<br>&gt;         The /app/.delta/ directory is where Swift and most<br>&gt;         dependencies have been dumped.  The file<br>&gt;         /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;<br>&gt;             /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14:<br>&gt;             error: header &#39;///usr/include/complex.h&#39; not found<br>&gt;                   header &quot;///usr/include/complex.h&quot;<br>&gt;                          ^<br>&gt;             &lt;unknown&gt;:0: error: could not build Objective-C module<br>&gt;             &#39;SwiftGlibc&#39;<br>&gt;             error: exit(1): /app/.delta/usr/bin/swiftc<br>&gt;             --driver-mode=swift -I /app/.delta/usr/lib/swift/pm -L<br>&gt;             /app/.delta/usr/lib/swift/pm -lPackageDescription<br>&gt;             /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;<br>&gt;<br>&gt;         Thank you for pointing out that these build-packs are using<br>&gt;         &#39;swift build&#39;.  The two build-packs I&#39;d looked at earlier<br>&gt;         today did not and I thought I&#39;d recalled them having derived<br>&gt;         from the others you&#39;ve mentioned.  I was mistaken.  My command<br>&gt;         somewhat resembles the IBM Bluemix build-pack command[1],<br>&gt;         which is:<br>&gt;         swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;         -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;<br>&gt;         I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and<br>&gt;         all of its subprocesses during the compilation yields only<br>&gt;         these two instances of &quot;complex&quot;:<br>&gt;<br>&gt;             [pid 28678] stat(&quot;///usr/include/complex.h&quot;,<br>&gt;             0x7ffe84061ef0) = -1 ENOENT (No such file or directory)<br>&gt;             [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39;<br>&gt;             not found&quot;, 43) = 43<br>&gt;<br>&gt;<br>&gt;         Am I making an obvious mistake?<br>&gt;<br>&gt;         [1]<br>&gt;         https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;         [2]<br>&gt;         https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;<br>&gt;         Shao Miller<br>&gt;         Synthetel Corporation<br>&gt;         T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729<br>&gt;         &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;         E: swift-build-dev at synthetel.com<br>&gt;         W: https://www.synthetel.com<br>&gt;<br>&gt;         On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;<br>&gt;             IBM&#39;s buildpack as well as the ones from which it descends<br>&gt;             (https://github.com/cloudfoundry-community/swift-buildpack<br>&gt;             and https://github.com/kylef/heroku-buildpack-swift) are<br>&gt;             all based around SwiftPM and the `swift build` command. I<br>&gt;             have not personally experienced the problem you are<br>&gt;             describing either, although I have not tried pushing any<br>&gt;             apps using more recent Swift toolchain snapshots.<br>&gt;<br>&gt;             Can you provide more details about how the error presents<br>&gt;             itself? Have you tried using any of these other buildpacks<br>&gt;             with your app code?<br>&gt;<br>&gt;             Brian<br>&gt;<br>&gt;             onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev<br>&gt;             &lt;swift-build-dev at swift.org<br>&gt;             &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;<br>&gt;                 Thank you for your kind response.<br>&gt;<br>&gt;                 As mentioned, there is no choice: If the headers<br>&gt;             aren&#39;t present in<br>&gt;                 the base image that a particular Cloud provider<br>&gt;             provides, they can<br>&gt;                 only be present in the application sand-box by one&#39;s<br>&gt;             own hand.<br>&gt;<br>&gt;                 All Swift build-packs to date and to my knowledge use<br>&gt;             Swift 2.2<br>&gt;                 and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m<br>&gt;             trying to<br>&gt;                 develop the next generation.<br>&gt;<br>&gt;                 Shao Miller<br>&gt;                 Synthetel Corporation<br>&gt;                 T: +1.9053927729 &lt;tel:%2B1.9053927729&gt;<br>&gt;             &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;                 E: swift-build-dev at synthetel.com<br>&gt;                <br>&gt;             &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;                 W: https://www.synthetel.com<br>&gt;<br>&gt;                 On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;<br>&gt;                     Why do you want the headers inside the app<br>&gt;                 sandbox? Usually they would remain outside.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     Have you looked at IBM&#39;s CloudFoundry build pack<br>&gt;                 (https://github.com/IBM-Swift/swift-buildpack)? How<br>&gt;                 does it handle the problem you are trying to solve?<br>&gt;<br>&gt;<br>&gt;<br>&gt;                       - Daniel<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         On Jun 8, 2016, at 8:03 PM, Shao Miller via<br>&gt;                     swift-build-dev&lt;swift-build-dev at swift.org&gt;<br>&gt;                        <br>&gt;                     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;                     wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         Good day, Swift package manager development folks.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         (There are at least two separate issues being<br>&gt;                     inquired about, but with the same introductory<br>&gt;                     context.)<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         &quot;Cloudy&quot; deployment options derived from or<br>&gt;                     akin to CloudFoundry are agonizingly locked-down<br>&gt;                     environments.  Essentially Swift and all of its<br>&gt;                     dependencies and one&#39;s project&#39;s dependencies must<br>&gt;                     be stuffed into an arbitrary directory (henceforth<br>&gt;                     referred to as &quot;the hole,&quot; but usually /app/ ) and<br>&gt;                     build processes performed without any root-user<br>&gt;                     privileges.  One consequence is that one cannot<br>&gt;                     use the OS&#39; package-management system to install<br>&gt;                     dependencies, but one must obtain them and wrestle<br>&gt;                     them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;                     rather silly.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         While developing a so-called &quot;buildpack&quot; for<br>&gt;                     Swift 3 projects to be deployed via<br>&gt;                     CloudFoundryish options and utilizing the &#39;swift<br>&gt;                     build&#39; command, I have come across a few issues.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         One issue is that &#39;swift build&#39; wants to do<br>&gt;                     something with the<br>&gt;                     /usr/lib/swift/linux/x86_64/glibc.modulemap file,<br>&gt;                     but that file contains a hard-coded path to a<br>&gt;                     ///usr/include/complex.h header-file.  As is<br>&gt;                     usually the case, this hard-coded path will only<br>&gt;                     work in a narrow set of environments, which<br>&gt;                     excludes &quot;the hole&quot; that CloudFoundry provides.  I<br>&gt;                     have attempted to use &#39;-Xcc -I/the/hole&#39; and<br>&gt;                     &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but<br>&gt;                     I do not observe these paths (nor sub-paths) being<br>&gt;                     tried for the complex.h header-file during<br>&gt;                     complication.  I used &#39;strace&#39; to trace the<br>&gt;                     compilation process, including all subprocesses.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         Is there some other mechanism to instruct the<br>&gt;                     Swift 3 package manager that its [unfortunately]<br>&gt;                     hard-coded paths are relative to some particular<br>&gt;                     path?  If not, would it be sensible to introduce<br>&gt;                     some logic to specify such a prefix path?<br>&gt;<br>&gt;<br>&gt;<br>&gt;                         Thank you for your time and attention.<br>&gt;<br>&gt;                         --<br>&gt;<br>&gt;<br>&gt;                         Shao Miller<br>&gt;<br>&gt;                         Synthetel Corporation<br>&gt;<br>&gt;                         T: +1.9053927729 &lt;tel:%2B1.9053927729&gt;<br>&gt;                     &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;<br>&gt;                     E:swift-build-dev at synthetel.com<br>&gt;                        <br>&gt;                     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;<br>&gt;                         W:https://www.synthetel.com<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     _______________________________________________<br>&gt;<br>&gt;                         swift-build-dev mailing list<br>&gt;<br>&gt;                     swift-build-dev at swift.org<br>&gt;                        <br>&gt;                     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;<br>&gt;                     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-build-dev mailing list<br>&gt;     swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/804dba5a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eb0623e24ffb4072ad81b19959d192f?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Brian Croom</string> &lt;brian.s.croom at gmail.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Clang modulemap files currently have a limitation in that they can only use<br>absolute paths for headers. Because the buildpack environment does not<br>allow installing files under /usr, you should look into editing the<br>modulemap to point to the correct location.<br></p><p>I am surprised, though, that a standard libc header like complex.h wouldn&#39;t<br>be available under /usr in your environment already. For example the Cloud<br>Foundry cflinuxfs2 environment provides an Ubuntu image with libc<br>development files already installed, which I would expect to work.<br></p><p>torsdag 9 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt;:<br></p><p>&gt; Thanks, but let me try to explain for a third time: The build environment<br>&gt; provided by CloudFoundry-style providers is locked-down.  You have no<br>&gt; choice where things go.  They must all go inside a sandbox.  That means you<br>&gt; cannot put headers underneath the /usr/ directory.  There is no way out of<br>&gt; the sandbox, as there are no root-user privileges.<br>&gt;<br>&gt; This is why I&#39;m asking about whether or not it&#39;s reasonable for Swift to<br>&gt; avoid hard-coded paths, or to at least allow a given prefix to be specified.<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt;<br>&gt; The IBM build pack installs a number of system dependencies which should<br>&gt; include those headers, though. You should have the headers rooted at /usr,<br>&gt; not try and have them in the app sandbox.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev &lt;<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt; swift-build-dev at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; What underlying OS is your build process running on? And where are you<br>&gt;&gt; getting your Swift toolchain?<br>&gt;&gt;<br>&gt;&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded<br>&gt;&gt; absolute paths to certain system headers. The failure you are seeing is<br>&gt;&gt; presumably due to the fact that system headers are not present at those<br>&gt;&gt; paths. You may have to manually modify the modulemap to point to the actual<br>&gt;&gt; location of the headers on the system that is performing the build.<br>&gt;&gt;<br>&gt;&gt; This old bug contains some tidbits that may also help you understand<br>&gt;&gt; what&#39;s going on here:<br>&gt;&gt; &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;<br>&gt;&gt; https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;&gt;<br>&gt;&gt; Brian<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; torsdag 9 juni 2016 skrev Shao Miller &lt;<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt; swift-build-dev at synthetel.com<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; Thank you for your kind response.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc<br>&gt;&gt;&gt; -I/app/.delta/ -v<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The /app/.delta/ directory is where Swift and most dependencies have<br>&gt;&gt;&gt; been dumped.  The file /app/.delta/usr/include/complex.h exists. The error<br>&gt;&gt;&gt; is:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error:<br>&gt;&gt;&gt;&gt; header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;&gt;&gt;              ^<br>&gt;&gt;&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I<br>&gt;&gt;&gt;&gt; /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm<br>&gt;&gt;&gt;&gt; -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you for pointing out that these build-packs are using &#39;swift<br>&gt;&gt;&gt; build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I<br>&gt;&gt;&gt; thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.<br>&gt;&gt;&gt; I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack<br>&gt;&gt;&gt; command[1], which is:<br>&gt;&gt;&gt; swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;&gt;&gt; -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its<br>&gt;&gt;&gt; subprocesses during the compilation yields only these two instances of<br>&gt;&gt;&gt; &quot;complex&quot;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT<br>&gt;&gt;&gt;&gt; (No such file or directory)<br>&gt;&gt;&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43)<br>&gt;&gt;&gt;&gt; = 43<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am I making an obvious mistake?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [1]<br>&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;&gt;&gt; [2]<br>&gt;&gt;&gt; https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (<br>&gt;&gt;&gt;&gt; https://github.com/cloudfoundry-community/swift-buildpack and<br>&gt;&gt;&gt;&gt; https://github.com/kylef/heroku-buildpack-swift) are all based around<br>&gt;&gt;&gt;&gt; SwiftPM and the `swift build` command. I have not personally experienced<br>&gt;&gt;&gt;&gt; the problem you are describing either, although I have not tried pushing<br>&gt;&gt;&gt;&gt; any apps using more recent Swift toolchain snapshots.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Can you provide more details about how the error presents itself? Have<br>&gt;&gt;&gt;&gt; you tried using any of these other buildpacks with your app code?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Brian<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Thank you for your kind response.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;&gt;&gt;     develop the next generation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;     E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;     W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they<br>&gt;&gt;&gt;&gt;&gt; would remain outside.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (<br>&gt;&gt;&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack)? How does it handle the<br>&gt;&gt;&gt;&gt;&gt; problem you are trying to solve?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;       - Daniel<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but<br>&gt;&gt;&gt;&gt;&gt;&gt; with the same introductory context.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry<br>&gt;&gt;&gt;&gt;&gt;&gt; are agonizingly locked-down environments.  Essentially Swift and all of its<br>&gt;&gt;&gt;&gt;&gt;&gt; dependencies and one&#39;s project&#39;s dependencies must be stuffed into an<br>&gt;&gt;&gt;&gt;&gt;&gt; arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually<br>&gt;&gt;&gt;&gt;&gt;&gt; /app/ ) and build processes performed without any root-user privileges.<br>&gt;&gt;&gt;&gt;&gt;&gt; One consequence is that one cannot use the OS&#39; package-management system to<br>&gt;&gt;&gt;&gt;&gt;&gt; install dependencies, but one must obtain them and wrestle them into &quot;the<br>&gt;&gt;&gt;&gt;&gt;&gt; hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to<br>&gt;&gt;&gt;&gt;&gt;&gt; be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the<br>&gt;&gt;&gt;&gt;&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a<br>&gt;&gt;&gt;&gt;&gt;&gt; hard-coded path to a ///usr/include/complex.h header-file.  As is usually<br>&gt;&gt;&gt;&gt;&gt;&gt; the case, this hard-coded path will only work in a narrow set of<br>&gt;&gt;&gt;&gt;&gt;&gt; environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have<br>&gt;&gt;&gt;&gt;&gt;&gt; attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line<br>&gt;&gt;&gt;&gt;&gt;&gt; arguments, but I do not observe these paths (nor sub-paths) being tried for<br>&gt;&gt;&gt;&gt;&gt;&gt; the complex.h header-file during complication.  I used &#39;strace&#39; to trace<br>&gt;&gt;&gt;&gt;&gt;&gt; the compilation process, including all subprocesses.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package<br>&gt;&gt;&gt;&gt;&gt;&gt; manager that its [unfortunately] hard-coded paths are relative to some<br>&gt;&gt;&gt;&gt;&gt;&gt; particular path?  If not, would it be sensible to introduce some logic to<br>&gt;&gt;&gt;&gt;&gt;&gt; specify such a prefix path?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     W:https://www.synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/7ff237de/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  9, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 9, 2016, at 8:35 AM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Thanks, but let me try to explain for a third time: The build environment provided by CloudFoundry-style providers is locked-down.  You have no choice where things go.  They must all go inside a sandbox.  That means you cannot put headers underneath the /usr/ directory.  There is no way out of the sandbox, as there are no root-user privileges.<br></p><p>You have stated that, but the IBM build pack works, uses CloudFoundry, and it clearly uses apt-get to install things in the system. You haven&#39;t explained how your environment is different yet.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; This is why I&#39;m asking about whether or not it&#39;s reasonable for Swift to avoid hard-coded paths, or to at least allow a given prefix to be specified.<br>&gt; <br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt; E: swift-build-dev at synthetel.com &lt;mailto:swift-build-dev at synthetel.com&gt;<br>&gt; W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt; <br>&gt; On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt;&gt; The IBM build pack installs a number of system dependencies which should include those headers, though. You should have the headers rooted at /usr, not try and have them in the app sandbox.<br>&gt;&gt; <br>&gt;&gt;  - Daniel<br>&gt;&gt; <br>&gt;&gt; On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev &lt; &lt;mailto:swift-build-dev at swift.org&gt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; What underlying OS is your build process running on? And where are you getting your Swift toolchain?<br>&gt;&gt; <br>&gt;&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded absolute paths to certain system headers. The failure you are seeing is presumably due to the fact that system headers are not present at those paths. You may have to manually modify the modulemap to point to the actual location of the headers on the system that is performing the build. <br>&gt;&gt; <br>&gt;&gt; This old bug contains some tidbits that may also help you understand what&#39;s going on here:  &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15 &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;<br>&gt;&gt; <br>&gt;&gt; Brian<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; torsdag 9 juni 2016 skrev Shao Miller &lt; &lt;mailto:swift-build-dev at synthetel.com&gt;swift-build-dev at synthetel.com &lt;mailto:swift-build-dev at synthetel.com&gt;&gt;:<br>&gt;&gt; Thank you for your kind response.<br>&gt;&gt; <br>&gt;&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -v<br>&gt;&gt; <br>&gt;&gt; The /app/.delta/ directory is where Swift and most dependencies have been dumped.  The file /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;&gt; <br>&gt;&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error: header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;              ^<br>&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt; <br>&gt;&gt; Thank you for pointing out that these build-packs are using &#39;swift build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.  I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack command[1], which is:<br>&gt;&gt; swift build --configuration release -Xcc -fblocks -Xcc -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt; <br>&gt;&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its subprocesses during the compilation yields only these two instances of &quot;complex&quot;:<br>&gt;&gt; <br>&gt;&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT (No such file or directory)<br>&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43) = 43<br>&gt;&gt; <br>&gt;&gt; Am I making an obvious mistake?<br>&gt;&gt; <br>&gt;&gt; [1] https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116 &lt;https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116&gt;<br>&gt;&gt; [2] https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz &lt;https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz&gt;<br>&gt;&gt; <br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt; E: swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt; W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt; <br>&gt;&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (https://github.com/cloudfoundry-community/swift-buildpack &lt;https://github.com/cloudfoundry-community/swift-buildpack&gt; and https://github.com/kylef/heroku-buildpack-swift &lt;https://github.com/kylef/heroku-buildpack-swift&gt;) are all based around SwiftPM and the `swift build` command. I have not personally experienced the problem you are describing either, although I have not tried pushing any apps using more recent Swift toolchain snapshots.<br>&gt;&gt; <br>&gt;&gt; Can you provide more details about how the error presents itself? Have you tried using any of these other buildpacks with your app code?<br>&gt;&gt; <br>&gt;&gt; Brian<br>&gt;&gt; <br>&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org &lt;&gt; &lt;mailto:swift-build-dev at swift.org &lt;&gt;&gt;&gt;:<br>&gt;&gt; <br>&gt;&gt;     Thank you for your kind response.<br>&gt;&gt; <br>&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt; <br>&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;     develop the next generation.<br>&gt;&gt; <br>&gt;&gt;     Shao Miller<br>&gt;&gt;     Synthetel Corporation<br>&gt;&gt;     T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;     E: swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;javascript:_e(%7B%7D,&#39;cvml&gt;&#39;,&#39; &lt;&gt;swift-build-dev at synthetel.com &lt;mailto:swift-build-dev at synthetel.com&gt;&#39;);&gt;<br>&gt;&gt;     W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt; <br>&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they would remain outside.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack &lt;https://github.com/IBM-Swift/swift-buildpack&gt;)? How does it handle the problem you are trying to solve?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;       - Daniel<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt; &lt;&gt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;<br>&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;javascript:_e(%7B%7D,&#39;cvml&gt;&#39;,&#39; &lt;&gt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&#39;);&gt;  wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt; <br>&gt;&gt;     -- <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     Shao Miller<br>&gt;&gt; <br>&gt;&gt;     Synthetel Corporation<br>&gt;&gt; <br>&gt;&gt;     T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt; <br>&gt;&gt;     E:swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;javascript:_e(%7B%7D,&#39;cvml&gt;&#39;,&#39; &lt;&gt;swift-build-dev at synthetel.com &lt;mailto:swift-build-dev at synthetel.com&gt;&#39;);&gt;<br>&gt;&gt; <br>&gt;&gt;     W:https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;     _______________________________________________<br>&gt;&gt; <br>&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt; <br>&gt;&gt;     swift-build-dev at swift.org &lt;&gt;<br>&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;javascript:_e(%7B%7D,&#39;cvml&gt;&#39;,&#39; &lt;&gt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&#39;);&gt;<br>&gt;&gt; <br>&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/bc561f49/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3eb0623e24ffb4072ad81b19959d192f?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Brian Croom</string> &lt;brian.s.croom at gmail.com&gt;<p>June  9, 2016 at 12:00:00pm</p></header><div class="content"><p>Note that the IBM buildpack works around the environmental restrictions by<br>configuring apt-get to install packages in subdirectories of the buildpack<br>sandbox, rather than in the standard system directories. This works great,<br>but can still cause issues with components that search for things with<br>absolute paths to the standard directories.<br></p><p>torsdag 9 juni 2016 skrev Daniel Dunbar via swift-build-dev &lt;<br>swift-build-dev at swift.org&gt;:<br></p><p>&gt;<br>&gt; On Jun 9, 2016, at 8:35 AM, Shao Miller via swift-build-dev &lt;<br>&gt; swift-build-dev at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt; Thanks, but let me try to explain for a third time: The build environment<br>&gt; provided by CloudFoundry-style providers is locked-down.  You have no<br>&gt; choice where things go.  They must all go inside a sandbox.  That means you<br>&gt; cannot put headers underneath the /usr/ directory.  There is no way out of<br>&gt; the sandbox, as there are no root-user privileges.<br>&gt;<br>&gt;<br>&gt; You have stated that, but the IBM build pack works, uses CloudFoundry, and<br>&gt; it clearly uses apt-get to install things in the system. You haven&#39;t<br>&gt; explained how your environment is different yet.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt;<br>&gt; This is why I&#39;m asking about whether or not it&#39;s reasonable for Swift to<br>&gt; avoid hard-coded paths, or to at least allow a given prefix to be specified.<br>&gt;<br>&gt; Shao Miller<br>&gt; Synthetel Corporation<br>&gt; T: +1.9053927729<br>&gt; E: swift-build-dev at synthetel.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt; W: https://www.synthetel.com<br>&gt;<br>&gt; On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt;<br>&gt; The IBM build pack installs a number of system dependencies which should<br>&gt; include those headers, though. You should have the headers rooted at /usr,<br>&gt; not try and have them in the app sandbox.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt; On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev &lt;<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt; swift-build-dev at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; What underlying OS is your build process running on? And where are you<br>&gt;&gt; getting your Swift toolchain?<br>&gt;&gt;<br>&gt;&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded<br>&gt;&gt; absolute paths to certain system headers. The failure you are seeing is<br>&gt;&gt; presumably due to the fact that system headers are not present at those<br>&gt;&gt; paths. You may have to manually modify the modulemap to point to the actual<br>&gt;&gt; location of the headers on the system that is performing the build.<br>&gt;&gt;<br>&gt;&gt; This old bug contains some tidbits that may also help you understand<br>&gt;&gt; what&#39;s going on here:<br>&gt;&gt; &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;<br>&gt;&gt; https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;&gt;<br>&gt;&gt; Brian<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; torsdag 9 juni 2016 skrev Shao Miller &lt;<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt; swift-build-dev at synthetel.com<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;&gt; Thank you for your kind response.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc<br>&gt;&gt;&gt; -I/app/.delta/ -v<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; The /app/.delta/ directory is where Swift and most dependencies have<br>&gt;&gt;&gt; been dumped.  The file /app/.delta/usr/include/complex.h exists. The error<br>&gt;&gt;&gt; is:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error:<br>&gt;&gt;&gt;&gt; header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;&gt;&gt;              ^<br>&gt;&gt;&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I<br>&gt;&gt;&gt;&gt; /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm<br>&gt;&gt;&gt;&gt; -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thank you for pointing out that these build-packs are using &#39;swift<br>&gt;&gt;&gt; build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I<br>&gt;&gt;&gt; thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.<br>&gt;&gt;&gt; I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack<br>&gt;&gt;&gt; command[1], which is:<br>&gt;&gt;&gt; swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;&gt;&gt; -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its<br>&gt;&gt;&gt; subprocesses during the compilation yields only these two instances of<br>&gt;&gt;&gt; &quot;complex&quot;:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT<br>&gt;&gt;&gt;&gt; (No such file or directory)<br>&gt;&gt;&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43)<br>&gt;&gt;&gt;&gt; = 43<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am I making an obvious mistake?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; [1]<br>&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;&gt;&gt; [2]<br>&gt;&gt;&gt; https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt; E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt; W: https://www.synthetel.com<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (<br>&gt;&gt;&gt;&gt; https://github.com/cloudfoundry-community/swift-buildpack and<br>&gt;&gt;&gt;&gt; https://github.com/kylef/heroku-buildpack-swift) are all based around<br>&gt;&gt;&gt;&gt; SwiftPM and the `swift build` command. I have not personally experienced<br>&gt;&gt;&gt;&gt; the problem you are describing either, although I have not tried pushing<br>&gt;&gt;&gt;&gt; any apps using more recent Swift toolchain snapshots.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Can you provide more details about how the error presents itself? Have<br>&gt;&gt;&gt;&gt; you tried using any of these other buildpacks with your app code?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Brian<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;<br>&gt;&gt;&gt;&gt; swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Thank you for your kind response.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;&gt;&gt;     develop the next generation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;     E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;     W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they<br>&gt;&gt;&gt;&gt;&gt; would remain outside.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (<br>&gt;&gt;&gt;&gt;&gt; https://github.com/IBM-Swift/swift-buildpack)? How does it handle the<br>&gt;&gt;&gt;&gt;&gt; problem you are trying to solve?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;       - Daniel<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt;<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but<br>&gt;&gt;&gt;&gt;&gt;&gt; with the same introductory context.)<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry<br>&gt;&gt;&gt;&gt;&gt;&gt; are agonizingly locked-down environments.  Essentially Swift and all of its<br>&gt;&gt;&gt;&gt;&gt;&gt; dependencies and one&#39;s project&#39;s dependencies must be stuffed into an<br>&gt;&gt;&gt;&gt;&gt;&gt; arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually<br>&gt;&gt;&gt;&gt;&gt;&gt; /app/ ) and build processes performed without any root-user privileges.<br>&gt;&gt;&gt;&gt;&gt;&gt; One consequence is that one cannot use the OS&#39; package-management system to<br>&gt;&gt;&gt;&gt;&gt;&gt; install dependencies, but one must obtain them and wrestle them into &quot;the<br>&gt;&gt;&gt;&gt;&gt;&gt; hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to<br>&gt;&gt;&gt;&gt;&gt;&gt; be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; command, I have come across a few issues.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the<br>&gt;&gt;&gt;&gt;&gt;&gt; /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a<br>&gt;&gt;&gt;&gt;&gt;&gt; hard-coded path to a ///usr/include/complex.h header-file.  As is usually<br>&gt;&gt;&gt;&gt;&gt;&gt; the case, this hard-coded path will only work in a narrow set of<br>&gt;&gt;&gt;&gt;&gt;&gt; environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have<br>&gt;&gt;&gt;&gt;&gt;&gt; attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line<br>&gt;&gt;&gt;&gt;&gt;&gt; arguments, but I do not observe these paths (nor sub-paths) being tried for<br>&gt;&gt;&gt;&gt;&gt;&gt; the complex.h header-file during complication.  I used &#39;strace&#39; to trace<br>&gt;&gt;&gt;&gt;&gt;&gt; the compilation process, including all subprocesses.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package<br>&gt;&gt;&gt;&gt;&gt;&gt; manager that its [unfortunately] hard-coded paths are relative to some<br>&gt;&gt;&gt;&gt;&gt;&gt; particular path?  If not, would it be sensible to introduce some logic to<br>&gt;&gt;&gt;&gt;&gt;&gt; specify such a prefix path?<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     --<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     W:https://www.synthetel.com<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org<br>&gt;&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-build-dev mailing list<br>&gt; swift-build-dev at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/8cf6f0c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>June  9, 2016 at 09:00:00am</p></header><div class="content"><p>Ah, thanks! That was the missing piece of info and I missed that in the script.<br></p><p>If you truly need to install a full set of headers in a sandboxed location, then the compiler arguments to use to point at that location are the `--sysroot` ones for Clang. I haven&#39;t tried this myself, so YMMV, but something like `-Xcc --sysroot -Xcc /app/.delta` *might* work.<br></p><p> - Daniel<br></p><p>&gt; On Jun 9, 2016, at 9:09 AM, Brian Croom &lt;brian.s.croom at gmail.com&gt; wrote:<br>&gt; <br>&gt; Note that the IBM buildpack works around the environmental restrictions by configuring apt-get to install packages in subdirectories of the buildpack sandbox, rather than in the standard system directories. This works great, but can still cause issues with components that search for things with absolute paths to the standard directories. <br>&gt; <br>&gt; torsdag 9 juni 2016 skrev Daniel Dunbar via swift-build-dev &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt; <br>&gt;&gt; On Jun 9, 2016, at 8:35 AM, Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Thanks, but let me try to explain for a third time: The build environment provided by CloudFoundry-style providers is locked-down.  You have no choice where things go.  They must all go inside a sandbox.  That means you cannot put headers underneath the /usr/ directory.  There is no way out of the sandbox, as there are no root-user privileges.<br>&gt; <br>&gt; You have stated that, but the IBM build pack works, uses CloudFoundry, and it clearly uses apt-get to install things in the system. You haven&#39;t explained how your environment is different yet.<br>&gt; <br>&gt;  - Daniel<br>&gt; <br>&gt;&gt; <br>&gt;&gt; This is why I&#39;m asking about whether or not it&#39;s reasonable for Swift to avoid hard-coded paths, or to at least allow a given prefix to be specified.<br>&gt;&gt; <br>&gt;&gt; Shao Miller<br>&gt;&gt; Synthetel Corporation<br>&gt;&gt; T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt; E: swift-build-dev at synthetel.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt; W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt; <br>&gt;&gt; On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt;&gt;&gt; The IBM build pack installs a number of system dependencies which should include those headers, though. You should have the headers rooted at /usr, not try and have them in the app sandbox.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev &lt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt; What underlying OS is your build process running on? And where are you getting your Swift toolchain?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded absolute paths to certain system headers. The failure you are seeing is presumably due to the fact that system headers are not present at those paths. You may have to manually modify the modulemap to point to the actual location of the headers on the system that is performing the build. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This old bug contains some tidbits that may also help you understand what&#39;s going on here:  &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15 &lt;https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brian<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; torsdag 9 juni 2016 skrev Shao Miller &lt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;swift-build-dev at synthetel.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&gt;:<br>&gt;&gt;&gt; Thank you for your kind response.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc -I/app/.delta/ -v<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The /app/.delta/ directory is where Swift and most dependencies have been dumped.  The file /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14: error: header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;&gt;       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;&gt;              ^<br>&gt;&gt;&gt; &lt;unknown&gt;:0: error: could not build Objective-C module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt; error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift -I /app/.delta/usr/lib/swift/pm -L /app/.delta/usr/lib/swift/pm -lPackageDescription /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you for pointing out that these build-packs are using &#39;swift build&#39;.  The two build-packs I&#39;d looked at earlier today did not and I thought I&#39;d recalled them having derived from the others you&#39;ve mentioned.  I was mistaken.  My command somewhat resembles the IBM Bluemix build-pack command[1], which is:<br>&gt;&gt;&gt; swift build --configuration release -Xcc -fblocks -Xcc -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of its subprocesses during the compilation yields only these two instances of &quot;complex&quot;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) = -1 ENOENT (No such file or directory)<br>&gt;&gt;&gt; [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not found&quot;, 43) = 43<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Am I making an obvious mistake?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; [1] https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116 &lt;https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116&gt;<br>&gt;&gt;&gt; [2] https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz &lt;https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Shao Miller<br>&gt;&gt;&gt; Synthetel Corporation<br>&gt;&gt;&gt; T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt; E: swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt;&gt; W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt;&gt; IBM&#39;s buildpack as well as the ones from which it descends (https://github.com/cloudfoundry-community/swift-buildpack &lt;https://github.com/cloudfoundry-community/swift-buildpack&gt; and https://github.com/kylef/heroku-buildpack-swift &lt;https://github.com/kylef/heroku-buildpack-swift&gt;) are all based around SwiftPM and the `swift build` command. I have not personally experienced the problem you are describing either, although I have not tried pushing any apps using more recent Swift toolchain snapshots.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Can you provide more details about how the error presents itself? Have you tried using any of these other buildpacks with your app code?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brian<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev &lt;swift-build-dev at swift.org &lt;&gt; &lt;mailto:swift-build-dev at swift.org &lt;&gt;&gt;&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Thank you for your kind response.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     As mentioned, there is no choice: If the headers aren&#39;t present in<br>&gt;&gt;&gt;     the base image that a particular Cloud provider provides, they can<br>&gt;&gt;&gt;     only be present in the application sand-box by one&#39;s own hand.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     All Swift build-packs to date and to my knowledge use Swift 2.2<br>&gt;&gt;&gt;     and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m trying to<br>&gt;&gt;&gt;     develop the next generation.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt;     E: swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;&gt;&#39;,&#39; &lt;&gt;swift-build-dev at synthetel.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;     W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;&gt;     Why do you want the headers inside the app sandbox? Usually they would remain outside.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Have you looked at IBM&#39;s CloudFoundry build pack (https://github.com/IBM-Swift/swift-buildpack &lt;https://github.com/IBM-Swift/swift-buildpack&gt;)? How does it handle the problem you are trying to solve?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       - Daniel<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     On Jun 8, 2016, at 8:03 PM, Shao Miller via swift-build-dev&lt; &lt;&gt;swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt;<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;&gt;&#39;,&#39; &lt;&gt;swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;  wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Good day, Swift package manager development folks.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     (There are at least two separate issues being inquired about, but with the same introductory context.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     &quot;Cloudy&quot; deployment options derived from or akin to CloudFoundry are agonizingly locked-down environments.  Essentially Swift and all of its dependencies and one&#39;s project&#39;s dependencies must be stuffed into an arbitrary directory (henceforth referred to as &quot;the hole,&quot; but usually /app/ ) and build processes performed without any root-user privileges.  One consequence is that one cannot use the OS&#39; package-management system to install dependencies, but one must obtain them and wrestle them into &quot;the hole,&quot; instead.  The strategy seems rather silly.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     While developing a so-called &quot;buildpack&quot; for Swift 3 projects to be deployed via CloudFoundryish options and utilizing the &#39;swift build&#39; command, I have come across a few issues.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     One issue is that &#39;swift build&#39; wants to do something with the /usr/lib/swift/linux/x86_64/glibc.modulemap file, but that file contains a hard-coded path to a ///usr/include/complex.h header-file.  As is usually the case, this hard-coded path will only work in a narrow set of environments, which excludes &quot;the hole&quot; that CloudFoundry provides.  I have attempted to use &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39; command-line arguments, but I do not observe these paths (nor sub-paths) being tried for the complex.h header-file during complication.  I used &#39;strace&#39; to trace the compilation process, including all subprocesses.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Is there some other mechanism to instruct the Swift 3 package manager that its [unfortunately] hard-coded paths are relative to some particular path?  If not, would it be sensible to introduce some logic to specify such a prefix path?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Thank you for your time and attention.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     -- <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:%2B1.9053927729&gt; &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     E:swift-build-dev at synthetel.com &lt;&gt;<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;&gt;&#39;,&#39; &lt;&gt;swift-build-dev at synthetel.com &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     W:https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     swift-build-dev at swift.org &lt;&gt;<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml &lt;&gt;&#39;,&#39; &lt;&gt;swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-build-dev mailing list<br>&gt;&gt;&gt; swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-build-dev mailing list<br>&gt;&gt; swift-build-dev at swift.org &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-build-dev &lt;https://lists.swift.org/mailman/listinfo/swift-build-dev&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/363a6e89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>June  9, 2016 at 03:00:00pm</p></header><div class="content"><p>Thank you.  The &#39;swiftc&#39; command doesn&#39;t appear to care about the <br>&#39;--sysroot&#39; parameter with respect to header-paths.  &#39;strace&#39; yields <br>only examination of the absolute paths for the headers.<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/9/2016 12:13, Daniel Dunbar wrote:<br>&gt; Ah, thanks! That was the missing piece of info and I missed that in <br>&gt; the script.<br>&gt;<br>&gt; If you truly need to install a full set of headers in a sandboxed <br>&gt; location, then the compiler arguments to use to point at that location <br>&gt; are the `--sysroot` ones for Clang. I haven&#39;t tried this myself, so <br>&gt; YMMV, but something like `-Xcc --sysroot -Xcc /app/.delta` *might* work.<br>&gt;<br>&gt;  - Daniel<br>&gt;<br>&gt;&gt; On Jun 9, 2016, at 9:09 AM, Brian Croom &lt;brian.s.croom at gmail.com <br>&gt;&gt; &lt;mailto:brian.s.croom at gmail.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Note that the IBM buildpack works around the environmental <br>&gt;&gt; restrictions by configuring apt-get to install packages in <br>&gt;&gt; subdirectories of the buildpack sandbox, rather than in the standard <br>&gt;&gt; system directories. This works great, but can still cause issues with <br>&gt;&gt; components that search for things with absolute paths to the standard <br>&gt;&gt; directories.<br>&gt;&gt;<br>&gt;&gt; torsdag 9 juni 2016 skrev Daniel Dunbar via swift-build-dev <br>&gt;&gt; &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;     On Jun 9, 2016, at 8:35 AM, Shao Miller via swift-build-dev<br>&gt;&gt;&gt;     &lt;swift-build-dev at swift.org<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Thanks, but let me try to explain for a third time: The build<br>&gt;&gt;&gt;     environment provided by CloudFoundry-style providers is<br>&gt;&gt;&gt;     locked-down.  You have no choice where things go.  They must all<br>&gt;&gt;&gt;     go inside a sandbox.  That means you cannot put headers<br>&gt;&gt;&gt;     underneath the /usr/ directory.  There is no way out of the<br>&gt;&gt;&gt;     sandbox, as there are no root-user privileges.<br>&gt;&gt;<br>&gt;&gt;     You have stated that, but the IBM build pack works, uses<br>&gt;&gt;     CloudFoundry, and it clearly uses apt-get to install things in<br>&gt;&gt;     the system. You haven&#39;t explained how your environment is<br>&gt;&gt;     different yet.<br>&gt;&gt;<br>&gt;&gt;      - Daniel<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     This is why I&#39;m asking about whether or not it&#39;s reasonable for<br>&gt;&gt;&gt;     Swift to avoid hard-coded paths, or to at least allow a given<br>&gt;&gt;&gt;     prefix to be specified.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     Shao Miller<br>&gt;&gt;&gt;     Synthetel Corporation<br>&gt;&gt;&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;&gt;&gt;     E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;&gt;&gt;     W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     On 6/9/2016 11:31, Daniel Dunbar wrote:<br>&gt;&gt;&gt;&gt;     The IBM build pack installs a number of system dependencies<br>&gt;&gt;&gt;&gt;     which should include those headers, though. You should have the<br>&gt;&gt;&gt;&gt;     headers rooted at /usr, not try and have them in the app sandbox.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;      - Daniel<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;     On Thu, Jun 9, 2016 at 5:32 AM, Brian Croom via swift-build-dev<br>&gt;&gt;&gt;&gt;     &lt;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         What underlying OS is your build process running on? And<br>&gt;&gt;&gt;&gt;         where are you getting your Swift toolchain?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Within your toolchain is a `glibc.modulemap` which contains<br>&gt;&gt;&gt;&gt;         hard-coded absolute paths to certain system headers. The<br>&gt;&gt;&gt;&gt;         failure you are seeing is presumably due to the fact that<br>&gt;&gt;&gt;&gt;         system headers are not present at those paths. You may have<br>&gt;&gt;&gt;&gt;         to manually modify the modulemap to point to the actual<br>&gt;&gt;&gt;&gt;         location of the headers on the system that is performing<br>&gt;&gt;&gt;&gt;         the build.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         This old bug contains some tidbits that may also help you<br>&gt;&gt;&gt;&gt;         understand what&#39;s going on here:<br>&gt;&gt;&gt;&gt;         https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         Brian<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         torsdag 9 juni 2016 skrev Shao Miller<br>&gt;&gt;&gt;&gt;         &lt;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             Thank you for your kind response.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             The command I execute is: swift build -Xcc<br>&gt;&gt;&gt;&gt;             -I/app/.delta/ -Xswiftc -I/app/.delta/ -v<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             The /app/.delta/ directory is where Swift and most<br>&gt;&gt;&gt;&gt;             dependencies have been dumped.  The file<br>&gt;&gt;&gt;&gt;             /app/.delta/usr/include/complex.h exists. The error is:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14:<br>&gt;&gt;&gt;&gt;                 error: header &#39;///usr/include/complex.h&#39; not found<br>&gt;&gt;&gt;&gt;                       header &quot;///usr/include/complex.h&quot;<br>&gt;&gt;&gt;&gt;                              ^<br>&gt;&gt;&gt;&gt;                 &lt;unknown&gt;:0: error: could not build Objective-C<br>&gt;&gt;&gt;&gt;                 module &#39;SwiftGlibc&#39;<br>&gt;&gt;&gt;&gt;                 error: exit(1): /app/.delta/usr/bin/swiftc<br>&gt;&gt;&gt;&gt;                 --driver-mode=swift -I /app/.delta/usr/lib/swift/pm<br>&gt;&gt;&gt;&gt;                 -L /app/.delta/usr/lib/swift/pm<br>&gt;&gt;&gt;&gt;                 -lPackageDescription<br>&gt;&gt;&gt;&gt;                 /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             Thank you for pointing out that these build-packs are<br>&gt;&gt;&gt;&gt;             using &#39;swift build&#39;.  The two build-packs I&#39;d looked at<br>&gt;&gt;&gt;&gt;             earlier today did not and I thought I&#39;d recalled them<br>&gt;&gt;&gt;&gt;             having derived from the others you&#39;ve mentioned.  I was<br>&gt;&gt;&gt;&gt;             mistaken.  My command somewhat resembles the IBM<br>&gt;&gt;&gt;&gt;             Bluemix build-pack command[1], which is:<br>&gt;&gt;&gt;&gt;             swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;&gt;&gt;&gt;             -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             I am using this[2] Swift. Running &#39;strace&#39; on the BASh<br>&gt;&gt;&gt;&gt;             and all of its subprocesses during the compilation<br>&gt;&gt;&gt;&gt;             yields only these two instances of &quot;complex&quot;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 [pid 28678] stat(&quot;///usr/include/complex.h&quot;,<br>&gt;&gt;&gt;&gt;                 0x7ffe84061ef0) = -1 ENOENT (No such file or directory)<br>&gt;&gt;&gt;&gt;                 [pid 28679] write(2, &quot;header<br>&gt;&gt;&gt;&gt;                 &#39;///usr/include/complex.h&#39; not found&quot;, 43) = 43<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             Am I making an obvious mistake?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             [1]<br>&gt;&gt;&gt;&gt;             https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;&gt;&gt;&gt;             [2]<br>&gt;&gt;&gt;&gt;             https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             Shao Miller<br>&gt;&gt;&gt;&gt;             Synthetel Corporation<br>&gt;&gt;&gt;&gt;             T: +1.9053927729 &lt;tel:%2B1.9053927729&gt;<br>&gt;&gt;&gt;&gt;             &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt;&gt;             E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;             W: https://www.synthetel.com &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;             On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 IBM&#39;s buildpack as well as the ones from which it<br>&gt;&gt;&gt;&gt;                 descends<br>&gt;&gt;&gt;&gt;                 (https://github.com/cloudfoundry-community/swift-buildpack<br>&gt;&gt;&gt;&gt;                 and<br>&gt;&gt;&gt;&gt;                 https://github.com/kylef/heroku-buildpack-swift)<br>&gt;&gt;&gt;&gt;                 are all based around SwiftPM and the `swift build`<br>&gt;&gt;&gt;&gt;                 command. I have not personally experienced the<br>&gt;&gt;&gt;&gt;                 problem you are describing either, although I have<br>&gt;&gt;&gt;&gt;                 not tried pushing any apps using more recent Swift<br>&gt;&gt;&gt;&gt;                 toolchain snapshots.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 Can you provide more details about how the error<br>&gt;&gt;&gt;&gt;                 presents itself? Have you tried using any of these<br>&gt;&gt;&gt;&gt;                 other buildpacks with your app code?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 Brian<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                 onsdag 8 juni 2016 skrev Shao Miller via<br>&gt;&gt;&gt;&gt;                 swift-build-dev &lt;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;                 &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                     Thank you for your kind response.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                     As mentioned, there is no choice: If the<br>&gt;&gt;&gt;&gt;                 headers aren&#39;t present in<br>&gt;&gt;&gt;&gt;                     the base image that a particular Cloud provider<br>&gt;&gt;&gt;&gt;                 provides, they can<br>&gt;&gt;&gt;&gt;                     only be present in the application sand-box by<br>&gt;&gt;&gt;&gt;                 one&#39;s own hand.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                     All Swift build-packs to date and to my<br>&gt;&gt;&gt;&gt;                 knowledge use Swift 2.2<br>&gt;&gt;&gt;&gt;                     and do not use the Swift 3 &#39;swift build&#39;<br>&gt;&gt;&gt;&gt;                 process. I&#39;m trying to<br>&gt;&gt;&gt;&gt;                     develop the next generation.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                     Shao Miller<br>&gt;&gt;&gt;&gt;                     Synthetel Corporation<br>&gt;&gt;&gt;&gt;                     T: +1.9053927729 &lt;tel:%2B1.9053927729&gt;<br>&gt;&gt;&gt;&gt;                 &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt;&gt;                     E: swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;                    <br>&gt;&gt;&gt;&gt;                 &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;                 &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;                     W: https://www.synthetel.com<br>&gt;&gt;&gt;&gt;                 &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                     On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                       Why do you want the headers inside the app<br>&gt;&gt;&gt;&gt;                     sandbox? Usually they would remain outside.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                         Have you looked at IBM&#39;s CloudFoundry build<br>&gt;&gt;&gt;&gt;                     pack<br>&gt;&gt;&gt;&gt;                     (https://github.com/IBM-Swift/swift-buildpack)?<br>&gt;&gt;&gt;&gt;                     How does it handle the problem you are trying<br>&gt;&gt;&gt;&gt;                     to solve?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                           - Daniel<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             On Jun 8, 2016, at 8:03 PM, Shao Miller<br>&gt;&gt;&gt;&gt;                         via<br>&gt;&gt;&gt;&gt;                         swift-build-dev&lt;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&gt;<br>&gt;&gt;&gt;&gt;                            <br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;                         wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             Good day, Swift package manager<br>&gt;&gt;&gt;&gt;                         development folks.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             (There are at least two separate issues<br>&gt;&gt;&gt;&gt;                         being inquired about, but with the same<br>&gt;&gt;&gt;&gt;                         introductory context.)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             &quot;Cloudy&quot; deployment options derived<br>&gt;&gt;&gt;&gt;                         from or akin to CloudFoundry are<br>&gt;&gt;&gt;&gt;                         agonizingly locked-down environments.<br>&gt;&gt;&gt;&gt;                         Essentially Swift and all of its<br>&gt;&gt;&gt;&gt;                         dependencies and one&#39;s project&#39;s<br>&gt;&gt;&gt;&gt;                         dependencies must be stuffed into an<br>&gt;&gt;&gt;&gt;                         arbitrary directory (henceforth referred to<br>&gt;&gt;&gt;&gt;                         as &quot;the hole,&quot; but usually /app/ ) and<br>&gt;&gt;&gt;&gt;                         build processes performed without any<br>&gt;&gt;&gt;&gt;                         root-user privileges. One consequence is<br>&gt;&gt;&gt;&gt;                         that one cannot use the OS&#39;<br>&gt;&gt;&gt;&gt;                         package-management system to install<br>&gt;&gt;&gt;&gt;                         dependencies, but one must obtain them and<br>&gt;&gt;&gt;&gt;                         wrestle them into &quot;the hole,&quot; instead.  The<br>&gt;&gt;&gt;&gt;                         strategy seems rather silly.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             While developing a so-called<br>&gt;&gt;&gt;&gt;                         &quot;buildpack&quot; for Swift 3 projects to be<br>&gt;&gt;&gt;&gt;                         deployed via CloudFoundryish options and<br>&gt;&gt;&gt;&gt;                         utilizing the &#39;swift build&#39; command, I have<br>&gt;&gt;&gt;&gt;                         come across a few issues.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             One issue is that &#39;swift build&#39; wants<br>&gt;&gt;&gt;&gt;                         to do something with the<br>&gt;&gt;&gt;&gt;                         /usr/lib/swift/linux/x86_64/glibc.modulemap<br>&gt;&gt;&gt;&gt;                         file, but that file contains a hard-coded<br>&gt;&gt;&gt;&gt;                         path to a ///usr/include/complex.h<br>&gt;&gt;&gt;&gt;                         header-file.  As is usually the case, this<br>&gt;&gt;&gt;&gt;                         hard-coded path will only work in a narrow<br>&gt;&gt;&gt;&gt;                         set of environments, which excludes &quot;the<br>&gt;&gt;&gt;&gt;                         hole&quot; that CloudFoundry provides.  I have<br>&gt;&gt;&gt;&gt;                         attempted to use &#39;-Xcc -I/the/hole&#39; and<br>&gt;&gt;&gt;&gt;                         &#39;-Xswiftc -I/the/hole&#39; command-line<br>&gt;&gt;&gt;&gt;                         arguments, but I do not observe these paths<br>&gt;&gt;&gt;&gt;                         (nor sub-paths) being tried for the<br>&gt;&gt;&gt;&gt;                         complex.h header-file during complication. <br>&gt;&gt;&gt;&gt;                         I used &#39;strace&#39; to trace the compilation<br>&gt;&gt;&gt;&gt;                         process, including all subprocesses.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             Is there some other mechanism to<br>&gt;&gt;&gt;&gt;                         instruct the Swift 3 package manager that<br>&gt;&gt;&gt;&gt;                         its [unfortunately] hard-coded paths are<br>&gt;&gt;&gt;&gt;                         relative to some particular path?  If not,<br>&gt;&gt;&gt;&gt;                         would it be sensible to introduce some<br>&gt;&gt;&gt;&gt;                         logic to specify such a prefix path?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             Thank you for your time and attention.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             --<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             Shao Miller<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             Synthetel Corporation<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             T: +1.9053927729 &lt;tel:%2B1.9053927729&gt;<br>&gt;&gt;&gt;&gt;                         &lt;tel:+1.9053927729 &lt;tel:%2B1.9053927729&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                         E:swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;                            <br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com<br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             W:https://www.synthetel.com<br>&gt;&gt;&gt;&gt;                         &lt;https://www.synthetel.com/&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                         _______________________________________________<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                             swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                         swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;                            <br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;                         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;&#39;);&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;                         https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;         _______________________________________________<br>&gt;&gt;&gt;&gt;         swift-build-dev mailing list<br>&gt;&gt;&gt;&gt;         swift-build-dev at swift.org<br>&gt;&gt;&gt;&gt;         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     _______________________________________________<br>&gt;&gt;&gt;     swift-build-dev mailing list<br>&gt;&gt;&gt;     swift-build-dev at swift.org<br>&gt;&gt;&gt;     &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;&gt;<br>&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-build-dev/attachments/20160609/aa3e2d61/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/08d92673fdeb9f492e69bd450c5b937a?s=50"></div><header><strong>Hard-Coded Paths in glibc.modulemap</strong> from <string>Shao Miller</string> &lt;swift-build-dev at synthetel.com&gt;<p>July  4, 2016 at 08:00:00pm</p></header><div class="content"><p>Thank you again.<br></p><p>My answers two your two questions are: Ubuntu 14.04.  From here[3].  <br>(Despite having shared this[2] link below, by mistake.)<br></p><p>The CloudFoundry build process is an automated process which involves <br>downloading Swift.  If that automated process then further has to modify <br>portions of Swift source-code to &quot;play nice&quot; with the Cloud Foundry <br>build environment&#39;s [silly] limitations, that is very tedious and means <br>that a &quot;delta&quot; for a specific version of Swift has to be integrated into <br>the automated build process.  I am suggesting that hard-coded paths in <br>Swift source-code is not a good idea and I am hopeful to meet with <br>agreement or with a discovery that I&#39;m missing a key idea for why these <br>paths ought to remain hard-coded.<br></p><p>My two questions are:<br></p><p>On 6/8/2016 23:03, Shao Miller via swift-build-dev wrote:<br>&gt; Is there some other mechanism to instruct the Swift 3 package manager <br>&gt; that its [unfortunately] hard-coded paths are relative to some <br>&gt; particular path?  If not, would it be sensible to introduce some logic <br>&gt; to specify such a prefix path? <br></p><p>[3] <br>https://swift.org/builds/development/ubuntu1404/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu14.04.tar.gz<br></p><p>Shao Miller<br>Synthetel Corporation<br>T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>E: swift-build-dev at synthetel.com<br>W: https://www.synthetel.com<br></p><p>On 6/9/2016 08:32, Brian Croom wrote:<br>&gt; What underlying OS is your build process running on? And where are you <br>&gt; getting your Swift toolchain?<br>&gt;<br>&gt; Within your toolchain is a `glibc.modulemap` which contains hard-coded <br>&gt; absolute paths to certain system headers. The failure you are seeing <br>&gt; is presumably due to the fact that system headers are not present at <br>&gt; those paths. You may have to manually modify the modulemap to point to <br>&gt; the actual location of the headers on the system that is performing <br>&gt; the build.<br>&gt;<br>&gt; This old bug contains some tidbits that may also help you understand <br>&gt; what&#39;s going on here: <br>&gt; https://bugs.swift.org/plugins/servlet/mobile#issue/SR-15<br>&gt;<br>&gt; Brian<br>&gt;<br>&gt; torsdag 9 juni 2016 skrev Shao Miller &lt;swift-build-dev at synthetel.com <br>&gt; &lt;mailto:swift-build-dev at synthetel.com&gt;&gt;:<br>&gt;<br>&gt;     Thank you for your kind response.<br>&gt;<br>&gt;     The command I execute is: swift build -Xcc -I/app/.delta/ -Xswiftc<br>&gt;     -I/app/.delta/ -v<br>&gt;<br>&gt;     The /app/.delta/ directory is where Swift and most dependencies<br>&gt;     have been dumped.  The file /app/.delta/usr/include/complex.h<br>&gt;     exists. The error is:<br>&gt;<br>&gt;         /app/.delta/usr/lib/swift/linux/x86_64/glibc.modulemap:33:14:<br>&gt;         error: header &#39;///usr/include/complex.h&#39; not found<br>&gt;               header &quot;///usr/include/complex.h&quot;<br>&gt;                      ^<br>&gt;         &lt;unknown&gt;:0: error: could not build Objective-C module<br>&gt;         &#39;SwiftGlibc&#39;<br>&gt;         error: exit(1): /app/.delta/usr/bin/swiftc --driver-mode=swift<br>&gt;         -I /app/.delta/usr/lib/swift/pm -L<br>&gt;         /app/.delta/usr/lib/swift/pm -lPackageDescription<br>&gt;         /app/PerfectTemplate/Package.swift -fileno 3<br>&gt;<br>&gt;<br>&gt;     Thank you for pointing out that these build-packs are using &#39;swift<br>&gt;     build&#39;.  The two build-packs I&#39;d looked at earlier today did not<br>&gt;     and I thought I&#39;d recalled them having derived from the others<br>&gt;     you&#39;ve mentioned.  I was mistaken.  My command somewhat resembles<br>&gt;     the IBM Bluemix build-pack command[1], which is:<br>&gt;     swift build --configuration release -Xcc -fblocks -Xcc<br>&gt;     -I$BUILD_DIR/.apt/usr/include ...and so on...<br>&gt;<br>&gt;     I am using this[2] Swift.  Running &#39;strace&#39; on the BASh and all of<br>&gt;     its subprocesses during the compilation yields only these two<br>&gt;     instances of &quot;complex&quot;:<br>&gt;<br>&gt;         [pid 28678] stat(&quot;///usr/include/complex.h&quot;, 0x7ffe84061ef0) =<br>&gt;         -1 ENOENT (No such file or directory)<br>&gt;         [pid 28679] write(2, &quot;header &#39;///usr/include/complex.h&#39; not<br>&gt;         found&quot;, 43) = 43<br>&gt;<br>&gt;<br>&gt;     Am I making an obvious mistake?<br>&gt;<br>&gt;     [1]<br>&gt;     https://github.com/IBM-Swift/swift-buildpack/blob/bluemix-buildpack/bin/compile#L116<br>&gt;     [2]<br>&gt;     https://swift.org/builds/development/ubuntu1510/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a/swift-DEVELOPMENT-SNAPSHOT-2016-05-31-a-ubuntu15.10.tar.gz<br>&gt;<br>&gt;     Shao Miller<br>&gt;     Synthetel Corporation<br>&gt;     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;     E: swift-build-dev at synthetel.com<br>&gt;     W: https://www.synthetel.com<br>&gt;<br>&gt;     On 6/9/2016 01:15, Brian Croom wrote:<br>&gt;<br>&gt;         IBM&#39;s buildpack as well as the ones from which it descends<br>&gt;         (https://github.com/cloudfoundry-community/swift-buildpack and<br>&gt;         https://github.com/kylef/heroku-buildpack-swift) are all based<br>&gt;         around SwiftPM and the `swift build` command. I have not<br>&gt;         personally experienced the problem you are describing either,<br>&gt;         although I have not tried pushing any apps using more recent<br>&gt;         Swift toolchain snapshots.<br>&gt;<br>&gt;         Can you provide more details about how the error presents<br>&gt;         itself? Have you tried using any of these other buildpacks<br>&gt;         with your app code?<br>&gt;<br>&gt;         Brian<br>&gt;<br>&gt;         onsdag 8 juni 2016 skrev Shao Miller via swift-build-dev<br>&gt;         &lt;swift-build-dev at swift.org &lt;mailto:swift-build-dev at swift.org&gt;&gt;:<br>&gt;<br>&gt;             Thank you for your kind response.<br>&gt;<br>&gt;             As mentioned, there is no choice: If the headers aren&#39;t<br>&gt;         present in<br>&gt;             the base image that a particular Cloud provider provides,<br>&gt;         they can<br>&gt;             only be present in the application sand-box by one&#39;s own hand.<br>&gt;<br>&gt;             All Swift build-packs to date and to my knowledge use<br>&gt;         Swift 2.2<br>&gt;             and do not use the Swift 3 &#39;swift build&#39; process.  I&#39;m<br>&gt;         trying to<br>&gt;             develop the next generation.<br>&gt;<br>&gt;             Shao Miller<br>&gt;             Synthetel Corporation<br>&gt;             T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;             E: swift-build-dev at synthetel.com<br>&gt;            <br>&gt;         &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;             W: https://www.synthetel.com<br>&gt;<br>&gt;             On 6/8/2016 23:08, Daniel Dunbar wrote:<br>&gt;<br>&gt;                 Why do you want the headers inside the app sandbox?<br>&gt;             Usually they would remain outside.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                 Have you looked at IBM&#39;s CloudFoundry build pack<br>&gt;             (https://github.com/IBM-Swift/swift-buildpack)? How does<br>&gt;             it handle the problem you are trying to solve?<br>&gt;<br>&gt;<br>&gt;<br>&gt;                   - Daniel<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     On Jun 8, 2016, at 8:03 PM, Shao Miller via<br>&gt;                 swift-build-dev&lt;swift-build-dev at swift.org&gt;<br>&gt;                    <br>&gt;                 &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;                 wrote:<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     Good day, Swift package manager development folks.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     (There are at least two separate issues being<br>&gt;                 inquired about, but with the same introductory context.)<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     &quot;Cloudy&quot; deployment options derived from or akin<br>&gt;                 to CloudFoundry are agonizingly locked-down<br>&gt;                 environments. Essentially Swift and all of its<br>&gt;                 dependencies and one&#39;s project&#39;s dependencies must be<br>&gt;                 stuffed into an arbitrary directory (henceforth<br>&gt;                 referred to as &quot;the hole,&quot; but usually /app/ ) and<br>&gt;                 build processes performed without any root-user<br>&gt;                 privileges.  One consequence is that one cannot use<br>&gt;                 the OS&#39; package-management system to install<br>&gt;                 dependencies, but one must obtain them and wrestle<br>&gt;                 them into &quot;the hole,&quot; instead.  The strategy seems<br>&gt;                 rather silly.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     While developing a so-called &quot;buildpack&quot; for Swift<br>&gt;                 3 projects to be deployed via CloudFoundryish options<br>&gt;                 and utilizing the &#39;swift build&#39; command, I have come<br>&gt;                 across a few issues.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     One issue is that &#39;swift build&#39; wants to do<br>&gt;                 something with the<br>&gt;                 /usr/lib/swift/linux/x86_64/glibc.modulemap file, but<br>&gt;                 that file contains a hard-coded path to a<br>&gt;                 ///usr/include/complex.h header-file.  As is usually<br>&gt;                 the case, this hard-coded path will only work in a<br>&gt;                 narrow set of environments, which excludes &quot;the hole&quot;<br>&gt;                 that CloudFoundry provides.  I have attempted to use<br>&gt;                 &#39;-Xcc -I/the/hole&#39; and &#39;-Xswiftc -I/the/hole&#39;<br>&gt;                 command-line arguments, but I do not observe these<br>&gt;                 paths (nor sub-paths) being tried for the complex.h<br>&gt;                 header-file during complication.  I used &#39;strace&#39; to<br>&gt;                 trace the compilation process, including all subprocesses.<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     Is there some other mechanism to instruct the<br>&gt;                 Swift 3 package manager that its [unfortunately]<br>&gt;                 hard-coded paths are relative to some particular<br>&gt;                 path?  If not, would it be sensible to introduce some<br>&gt;                 logic to specify such a prefix path?<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     Thank you for your time and attention.<br>&gt;<br>&gt;                     --<br>&gt;<br>&gt;<br>&gt;                     Shao Miller<br>&gt;<br>&gt;                     Synthetel Corporation<br>&gt;<br>&gt;                     T: +1.9053927729 &lt;tel:+1.9053927729&gt;<br>&gt;<br>&gt;                 E:swift-build-dev at synthetel.com<br>&gt;                    <br>&gt;                 &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at synthetel.com&#39;);&gt;<br>&gt;<br>&gt;                     W:https://www.synthetel.com<br>&gt;<br>&gt;<br>&gt;<br>&gt;                     _______________________________________________<br>&gt;<br>&gt;                     swift-build-dev mailing list<br>&gt;<br>&gt;                 swift-build-dev at swift.org<br>&gt;                    <br>&gt;                 &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-build-dev at swift.org&#39;);&gt;<br>&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-build-dev<br>&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
