<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0107: UnsafeRawPointer API (binding memory to type)</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  5, 2016 at 08:00:00am</p></header><div class="content"><p>on Mon Jul 04 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is the first version of this proposal which I&#39;ve had time to read. I<br>&gt; like it a lot overall. If I have some more time, I may try pulling the<br>&gt; branch and writing some code with it to see how it feels. (If we could get<br>&gt; a toolchain built from the branch, that might help others review it.)<br>&gt;<br>&gt; Here are a handful of minor comments:<br>&gt;<br>&gt; - Naming: &quot;bindMemory(to:capacity:)&quot;, being &quot;verb-ish&quot;, seems incongruous<br>&gt; with &quot;assumingMemoryBound(to:)&quot; and &quot;withMemoryRebound(to:capacity:_:)&quot;.<br>&gt; How about &quot;bindingMemory(to:capacity:)&quot; ?<br></p><p>That was intentional. It has side-effects in the user model, so it is<br>actually appropriate that it forms an active verb phrase.<br></p><p>&gt; - Would it be possible for &quot;+(UnsafeRawPointer, Int) -&gt; UnsafeRawPointer&quot;<br>&gt; to accept any Integer or FixedWidthInteger, rather than only Int?<br>&gt;<br>&gt; - Why allow/encourage multiple calls to bindMemory on the same RawPointer?<br></p><p>The reason to allow it are:<br></p><p>0. Typed access is faster and we don&#39;t want to relegate important use<br>   cases to untyped access.<br></p><p>1. We want to be able to use a single piece of memory for typed access<br>   to T and then reused for typed access to U as long as it is properly<br>   aligned and the T has been destroyed, without having to return it to<br>   the allocator.<br></p><p>2. We want to support the use of known layout compatibility to safely<br>   deal with type impedance mismatches (like CChar/Int8/UInt8 and<br>   (Double,Double)/Complex) at API boundaries.<br></p><p>I don&#39;t know where you see it encouraged.<br></p><p>&gt; These APIs do a good job of making aliasing explicit by introducing data<br>&gt; dependencies between pointers (you can only use a typed pointer after<br>&gt; obtaining it from a raw pointer, and you can recover the raw pointer for<br>&gt; later use by deinitializing the typed pointer). So, I would think the<br>&gt; guidelines should prefer bindMemory to be used only once on a particular<br>&gt; RawPointer value.<br></p><p>If you stick to the UnsafePointer APIs, that will be the effect.  The<br>use of UnsafeRawPointer is something you only need to get into in<br>specialized circumstances.<br></p><p>&gt; And minor notes about the proposal itself:<br>&gt;<br>&gt; - strideof(Int.self) is used in most examples, but sizeof(Int.self) appears<br>&gt; in one of them (the &quot;normalLifetime()&quot; example).<br>&gt;<br>&gt; - I think there must be a mistake in this example, because pA is already<br>&gt; bound and bindMemory was only defined for untyped RawPointers:<br>&gt;<br>&gt;     func testInitAB() {<br>&gt;       // Get a raw pointer to (A, B).<br>&gt;       let p = initAB()<br>&gt;<br>&gt;       let pA = p.bindMemory(to: A.self, capacity: 1)<br>&gt;       printA(pA)<br>&gt;<br>&gt;       printB((pA + 1).bindMemory(to: B.self, capacity: 1))   //&lt;&lt;&lt; should<br>&gt; this be (p+1) rather than (pA+1)?<br>&gt;     }<br></p><p>Good eye, but it&#39;s not (p + 1).  You actually need to move p by the<br>least value &gt;= MemoryLayout&lt;A&gt;.size that leaves the pointer properly<br>aligned for B.<br></p><p>&gt; Jacob<br>&gt;<br>&gt; On Mon, Jul 4, 2016 at 3:32 PM, Andrew Trick via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jun 28, 2016, at 11:05 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of “SE-0107: UnsafeRawPointer API” begins now and runs through<br>&gt;&gt; July 4, 2016. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I&#39;ve revised the proposal again based on extremely helpful feedback from<br>&gt;&gt; DaveA and Jordan.<br>&gt;&gt;<br>&gt;&gt; This revision expands on the concept of formally binding the memory type<br>&gt;&gt; that I was recently working on with Dmitri. Now we can clearly define pre<br>&gt;&gt; and post conditions on memory operations and pointer casts that can be used<br>&gt;&gt; to prove the type safety. The model is now simpler, more complete, and easy<br>&gt;&gt; to reason about locally. This will help developers reason about correctness<br>&gt;&gt; and make it easy to implement a sanitizer that verifies the type safety of<br>&gt;&gt; UnsafePointer operations.<br>&gt;&gt;<br>&gt;&gt; Adding safety to pointer &quot;casts&quot; made it possible for me to actually<br>&gt;&gt; simplify the allocation and initialization APIs. I think both camps,<br>&gt;&gt; convenience and safety, will be happy.<br>&gt;&gt;<br>&gt;&gt; You can see what changed in this pull request:<br>&gt;&gt; https://github.com/apple/swift-evolution/pull/408<br>&gt;&gt;<br>&gt;&gt; Brief summary:<br>&gt;&gt;<br>&gt;&gt; - Memory is dynamically bound to a single type.<br>&gt;&gt;<br>&gt;&gt; - All typed access to memory, whether via a typed pointer or regular<br>&gt;&gt;   language construct, must be consistent with the memory&#39;s bound type<br>&gt;&gt;   (the access type must be related to the bound type). Typed access<br>&gt;&gt;   includes initialization, assignment, or deinitialization via a typed<br>&gt;&gt;   pointer.<br>&gt;&gt;<br>&gt;&gt; - Memory remains bound after being deinitialized.<br>&gt;&gt;<br>&gt;&gt; - Memory is implicitly bound or rebound to a type by initializing it<br>&gt;&gt;   via a raw pointer.<br>&gt;&gt;<br>&gt;&gt; - A separate API now exists for explicity binding or rebinding memory<br>&gt;&gt;   to a type. This allows binding to be decoupled from initialization<br>&gt;&gt;   for convenience and efficiency. It also supports safe<br>&gt;&gt;   interoperability between APIs that used different, but layout<br>&gt;&gt;   compatible types.<br>&gt;&gt;<br>&gt;&gt; - Using an API that accesses memory as a different type can now be<br>&gt;&gt;   accomplished by rebinding the memory. This effectively changes the<br>&gt;&gt;   type of any initialized values in memory. The compiler is still<br>&gt;&gt;   permitted to assume strict aliasing for accesses on either side of<br>&gt;&gt;   the operation that rebinds memory.<br>&gt;&gt;<br>&gt;&gt; Andy<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
