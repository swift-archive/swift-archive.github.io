<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c450c87df0788b8e1f7a6ca17ea34c7?s=50"></div><header><strong>[Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>Douglas Gregor</string> &lt;dgregor at apple.com&gt;<p>January 12, 2016 at 10:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br></p><p>Thank you,<br>Doug Gregor<br>Review Manager<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution-announce/attachments/20160112/f8a12cff/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4ab486d7597af4cfe0be33a762150848?s=50"></div><header><strong>[Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>Dany St-Amant</string> &lt;dsa.mls at icloud.com&gt;<p>January 14, 2016 at 09:00:00pm</p></header><div class="content"><p>On the key statement of the proposal:<br></p><p>&gt; Like other build configurations, #if swift isn&#39;t line-based - it encloses whole statements or declarations. However, unlike the others, the compiler won&#39;t parse inactive branches guarded by #if swift or emit lex diagnostics, so syntactic differences for other Swift versions can be in the same file.<br>&gt; <br></p><p>I wonder if some structural check should be done nonetheless, like proper balancing of curly braces, and of comment marker (/**/). Neither of these can be overridden (afaik), and their pairing is unlikely to ever change.<br></p><p>The current #if syntax does prevent you from doing what I consider a bad habit that I have seen way too often in C.<br></p><p>#if os(Linux)<br>  if (boolCheck()) {<br>#else<br>  if (optionalBoolCheck() ?? false) {<br>#endif<br>    /* Some code */<br>  }<br></p><p>Main reason why  I hate these unbalanced curly brace, is that it messes up with simple tool like the % to jump to matching brace in vi.<br></p><p>Some may suggest that this fall in the coding style/lint bucket, but I have a feeling that such structural check coud help the parser.<br></p><p>Dany<br></p><p>&gt; Le 12 janv. 2016 à 13:28, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/e0c7f08c/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ca2b61444636352b0092712de201d553?s=50"></div><header><strong>[Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>Dany St-Amant</string> &lt;dstamant at mac.com&gt;<p>January 14, 2016 at 09:00:00pm</p></header><div class="content"><p>On the key statement of the proposal:<br></p><p>&gt; Like other build configurations, #if swift isn&#39;t line-based - it encloses whole statements or declarations. However, unlike the others, the compiler won&#39;t parse inactive branches guarded by #if swift or emit lex diagnostics, so syntactic differences for other Swift versions can be in the same file.<br>&gt; <br></p><p>I wonder if some structural check should be done nonetheless, like proper balancing of curly braces, and of comment marker (/**/). Neither of these can be overridden (afaik), and their pairing is unlikely to ever change.<br></p><p>The current #if syntax does prevent you from doing what I consider a bad habit that I have seen way too often in C.<br></p><p>#if os(Linux)<br>  if (boolCheck()) {<br>#else<br>  if (optionalBoolCheck() ?? false) {<br>#endif<br>    /* Some code */<br>  }<br></p><p>Main reason why  I hate these unbalanced curly brace, is that it messes up with simple tool like the % to jump to matching brace in vi.<br></p><p>Some may suggest that this fall in the coding style/lint bucket, but I have a feeling that such structural check coud help the parser.<br></p><p>Dany<br></p><p><br>&gt; Le 12 janv. 2016 à 13:28, Douglas Gregor via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160114/85e51c27/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>January 15, 2016 at 10:00:00am</p></header><div class="content"><p>I think the proposal addresses a need that we have with Swift, but I think the proposal introduces yet-another-special case solution.<br></p><p>There is already a construct that nearly serves this purpose. I’d rather see those constructs bolstered and unified.<br></p><p>Previous feedback:<br></p><p>The @available() and if #available constructs are not sufficient as they fall under the same limitations that your proposal addresses: they require that the non-valid branch not be parsed. For example, an API that has changes with a new language feature, such as variadic generic arguments, would not be able to be defined.<br></p><p>If we look at the grammar, I don’t see why the grammar for “availability-argument” couldn’t look like this:<br></p><p>    availability-argument: (platform-name | language-name | package-name) version.<br>GRAMMAR OF AN AVAILABILITY CONDITION<br></p><p> &lt;&gt;availability-condition → #available­(­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­)­<br> &lt;&gt;availability-arguments → availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­  availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­,­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­<br> &lt;&gt;availability-argument → platform-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-name&gt;­platform-version &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-version&gt;­<br> &lt;&gt;availability-argument → *­<br> &lt;&gt;platform-name → iOS­  iOSApplicationExtension­<br> &lt;&gt;platform-name → OSX­  OSXApplicationExtension­<br> &lt;&gt;platform-name → watchOS­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br> &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br>I’d further argue that the version argument properly adhere to the semver spec: http://semver.org &lt;http://semver.org/&gt;.<br></p><p>The above change, in addition to the change for the if #available (change to: #if available) statement to not parse the unavailable path would seem to provide the solution you want to have in addition to the solution that many package developers could use as well.<br></p><p>The nice thing is that this could be done in stages:<br></p><p>1. Add support for the language condition and change #if available to not parse the non-valid paths<br>2. Add support for package names<br>3. Add support for proper semver versioning.<br></p><p>The only breaking change is #1 as the else-clause would no longer parse the code today. When/if semver was supported, the version could still take the decimal digits while adding semver support.<br></p><p>-David<br></p><p><br>&gt; On Jan 12, 2016, at 10:28 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md&gt;<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt; <br>&gt; Thank you,<br>&gt; Doug Gregor<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/a90fe04b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>January 15, 2016 at 03:00:00pm</p></header><div class="content"><p>I disagree that these constructs are similar. #available and @available are inherently runtime queries, whereas checking the version of Swift is a compile-time query. An app ships with code for both branches of &quot;if #available&quot;.<br></p><p>Jordan<br></p><p><br>&gt; On Jan 15, 2016, at 10:49, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I think the proposal addresses a need that we have with Swift, but I think the proposal introduces yet-another-special case solution.<br>&gt; <br>&gt; There is already a construct that nearly serves this purpose. I’d rather see those constructs bolstered and unified.<br>&gt; <br>&gt; Previous feedback:<br>&gt; <br>&gt; The @available() and if #available constructs are not sufficient as they fall under the same limitations that your proposal addresses: they require that the non-valid branch not be parsed. For example, an API that has changes with a new language feature, such as variadic generic arguments, would not be able to be defined.<br>&gt; <br>&gt; If we look at the grammar, I don’t see why the grammar for “availability-argument” couldn’t look like this:<br>&gt; <br>&gt;     availability-argument: (platform-name | language-name | package-name) version.<br>&gt; GRAMMAR OF AN AVAILABILITY CONDITION<br>&gt; <br>&gt;  &lt;&gt;availability-condition → #available­(­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­)­<br>&gt;  &lt;&gt;availability-arguments → availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­  availability-argument &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-argument&gt;­,­availability-arguments &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/availability-arguments&gt;­<br>&gt;  &lt;&gt;availability-argument → platform-name &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-name&gt;­platform-version &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/swift/grammar/platform-version&gt;­<br>&gt;  &lt;&gt;availability-argument → *­<br>&gt;  &lt;&gt;platform-name → iOS­  iOSApplicationExtension­<br>&gt;  &lt;&gt;platform-name → OSX­  OSXApplicationExtension­<br>&gt;  &lt;&gt;platform-name → watchOS­<br>&gt;  &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br>&gt;  &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br>&gt;  &lt;&gt;platform-version → decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­.­decimal-digits &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/swift/grammar/decimal-digits&gt;­<br>&gt; I’d further argue that the version argument properly adhere to the semver spec: http://semver.org &lt;http://semver.org/&gt;.<br>&gt; <br>&gt; The above change, in addition to the change for the if #available (change to: #if available) statement to not parse the unavailable path would seem to provide the solution you want to have in addition to the solution that many package developers could use as well.<br>&gt; <br>&gt; The nice thing is that this could be done in stages:<br>&gt; <br>&gt; 1. Add support for the language condition and change #if available to not parse the non-valid paths<br>&gt; 2. Add support for package names<br>&gt; 3. Add support for proper semver versioning.<br>&gt; <br>&gt; The only breaking change is #1 as the else-clause would no longer parse the code today. When/if semver was supported, the version could still take the decimal digits while adding semver support.<br>&gt; <br>&gt; -David<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 12, 2016, at 10:28 AM, Douglas Gregor &lt;dgregor at apple.com &lt;mailto:dgregor at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md&gt;<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; Doug Gregor<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt; swift-evolution-announce at swift.org &lt;mailto:swift-evolution-announce at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce &lt;https://lists.swift.org/mailman/listinfo/swift-evolution-announce&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/bb456822/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/012bc4c5e7b0c2829fff88611143c108?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0020 Swift Language Version Build Configuration</strong> from <string>David Owens II</string> &lt;david at owensd.io&gt;<p>January 15, 2016 at 06:00:00pm</p></header><div class="content"><p>They are similar in that they are trying to restrict codeflow based on external conditions. <br></p><p>Today we have #if os(), #if arch(), plus the ability to set build configuration identifiers. And now there is a new proposal to add #if swift(). <br></p><p>Keep the #available() and @available() runtime versions. What I&#39;m saying is add #if available() as a compile-time version and generalize the current uses of the #if usages (these could happen migration steps and don&#39;t need to necessarily happen all at once). <br></p><p>When packages start working, it&#39;s very easy to see use cases where we want to do the same thing based on package name and version. Build configurations identifiers aren&#39;t sufficient for it (version comparison, for instance). So instead needing to propose another construct, #if package(), is there a way to generalize the pattern we are already seeing that could still fit in the scope of this proposal? I think so. <br></p><p>Sent from my iPhone<br></p><p>&gt; On Jan 15, 2016, at 3:35 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; I disagree that these constructs are similar. #available and @available are inherently runtime queries, whereas checking the version of Swift is a compile-time query. An app ships with code for both branches of &quot;if #available&quot;.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 15, 2016, at 10:49, David Owens II via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I think the proposal addresses a need that we have with Swift, but I think the proposal introduces yet-another-special case solution.<br>&gt;&gt; <br>&gt;&gt; There is already a construct that nearly serves this purpose. I’d rather see those constructs bolstered and unified.<br>&gt;&gt; <br>&gt;&gt; Previous feedback:<br>&gt;&gt; <br>&gt;&gt; The @available() and if #available constructs are not sufficient as they fall under the same limitations that your proposal addresses: they require that the non-valid branch not be parsed. For example, an API that has changes with a new language feature, such as variadic generic arguments, would not be able to be defined.<br>&gt;&gt; <br>&gt;&gt; If we look at the grammar, I don’t see why the grammar for “availability-argument” couldn’t look like this:<br>&gt;&gt; <br>&gt;&gt;     availability-argument: (platform-name | language-name | package-name) version.<br>&gt;&gt; GRAMMAR OF AN AVAILABILITY CONDITION<br>&gt;&gt; <br>&gt;&gt; availability-condition → #available­(­availability-arguments­)­<br>&gt;&gt; availability-arguments → availability-argument­  availability-argument­,­availability-arguments­<br>&gt;&gt; availability-argument → platform-name­platform-version­<br>&gt;&gt; availability-argument → *­<br>&gt;&gt; platform-name → iOS­  iOSApplicationExtension­<br>&gt;&gt; platform-name → OSX­  OSXApplicationExtension­<br>&gt;&gt; platform-name → watchOS­<br>&gt;&gt; platform-version → decimal-digits­<br>&gt;&gt; platform-version → decimal-digits­.­decimal-digits­<br>&gt;&gt; platform-version → decimal-digits­.­decimal-digits­.­decimal-digits­<br>&gt;&gt; I’d further argue that the version argument properly adhere to the semver spec: http://semver.org.<br>&gt;&gt; <br>&gt;&gt; The above change, in addition to the change for the if #available (change to: #if available) statement to not parse the unavailable path would seem to provide the solution you want to have in addition to the solution that many package developers could use as well.<br>&gt;&gt; <br>&gt;&gt; The nice thing is that this could be done in stages:<br>&gt;&gt; <br>&gt;&gt; 1. Add support for the language condition and change #if available to not parse the non-valid paths<br>&gt;&gt; 2. Add support for package names<br>&gt;&gt; 3. Add support for proper semver versioning.<br>&gt;&gt; <br>&gt;&gt; The only breaking change is #1 as the else-clause would no longer parse the code today. When/if semver was supported, the version could still take the decimal digits while adding semver support.<br>&gt;&gt; <br>&gt;&gt; -David<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jan 12, 2016, at 10:28 AM, Douglas Gregor &lt;dgregor at apple.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of SE-0020 &quot;Swift Language Version Build Configuration” begins now and runs through January 17th. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; Doug Gregor<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution-announce mailing list<br>&gt;&gt;&gt; swift-evolution-announce at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160115/5e030bdf/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
