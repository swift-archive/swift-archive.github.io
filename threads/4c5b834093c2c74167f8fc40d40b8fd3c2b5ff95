<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>March 31, 2016 at 12:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160331/4c5bff95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 31, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Mar 31 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br></p><p>&gt; Am 30. März 2016 um 17:48 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;<br>&gt;     on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;<br>&gt;                 Am 30.03.2016 um 16:49 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;<br>&gt;                         on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;<br>&gt;                         That&#39;s certainly an improvement, but why &quot;formIntersection&quot; instead of<br>&gt;<br>&gt;                         &quot;intersect&quot; (in analogy to &quot;subtract&quot;)?<br>&gt;<br>&gt;             1. Consistency with union, which is more closely related than subtract.<br>&gt;<br>&gt;     I&#39;d prefer consistency with the verb rule here<br>&gt;<br>&gt;     Which rule is that? As far as I can tell, this is consistent with all<br>&gt;     the rules.<br>&gt;<br>&gt; &quot;Those with side-effects should read as imperative verb phrases&quot;<br></p><p>“form &lt;some-noun-phrase&gt;” is an imperative verb phrase.<br></p><p>&gt; I expect a common verb to be chosen over an awkward, constructed one,<br>&gt; although I have to admit that the verb &quot;intersect&quot; is used only very<br>&gt; seldom if at all in set theory or geometry.  Therefore you might have<br>&gt; a point with &quot;intersect&quot; having the wrong implication, but see below.<br>&gt;<br>&gt;         (using formXXX only as last resort).<br>&gt;<br>&gt;     Though I prefer not to, you can look at this as a last resort if you<br>&gt;     like; the alternative you&#39;re proposing has the wrong implication, so it<br>&gt;     is not a candidate. It would be like using “remainder” as a verb for<br>&gt;     integers. Yes, it&#39;s a legitimate verb, but it means the wrong thing<br>&gt;     (see retail).<br>&gt;<br>&gt;                 2. &quot;Intersect&quot; actually has the wrong meaning as an imperative. If you<br>&gt;<br>&gt;             tell set A to intersect set B, and then ask whether A intersects B<br>&gt;<br>&gt;             (!A.isDisjoint(with: B)), you would expect an answer of true.<br>&gt;<br>&gt;     Sorry, but I do not agree. With that reasoning I would have to expect<br>&gt;<br>&gt;     a.intersection(b) to be not empty.<br>&gt;<br>&gt;     Yes, that&#39;s exactly what I&#39;m saying. If you tell A to intersect B,<br>&gt;     presumably when the call completes, A intersects B (i.e. has a non-empty<br>&gt;     intersection). That would imply an implementation like, e.g.<br>&gt;<br>&gt; With a.intersection(b) I meant to extend your reasoning to the<br>&gt; non-mutating method. <br>&gt;<br>&gt; You surely do not expect the intersection of a and b to be non-empty<br>&gt; when calling the non-mutating method? <br></p><p>No I do not.<br></p><p>&gt; Then why should you expect that in the mutating case?  <br></p><p>for the same reason that <br></p><p>    shape1.encloses(shape2)<br></p><p>might return true or false but<br></p><p>    shape1.enclose(shape2)<br></p><p>has to change shape1 so it encloses shape2.<br></p><p>&gt; Is it because the noun implies a current state whereas the verb should<br>&gt; be read as a command demanding to create a certain state? (I&#39;m not a<br>&gt; native speaker, so please bear with me)<br></p><p>I think that&#39;s a pretty good explanation.<br></p><p>HTH,<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>SetAlgebra naming update</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April  1, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; Am 31.03.2016 um 19:53 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; on Thu Mar 31 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Am 30. März 2016 um 17:48 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt; <br>&gt;&gt;    on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;                Am 30.03.2016 um 16:49 schrieb Dave Abrahams &lt;dabrahams at apple.com&gt;:<br>&gt;&gt; <br>&gt;&gt;                        on Wed Mar 30 2016, Thorsten Seitz &lt;tseitz42-AT-icloud.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;                        That&#39;s certainly an improvement, but why &quot;formIntersection&quot; instead of<br>&gt;&gt; <br>&gt;&gt;                        &quot;intersect&quot; (in analogy to &quot;subtract&quot;)?<br>&gt;&gt; <br>&gt;&gt;            1. Consistency with union, which is more closely related than subtract.<br>&gt;&gt; <br>&gt;&gt;    I&#39;d prefer consistency with the verb rule here<br>&gt;&gt; <br>&gt;&gt;    Which rule is that? As far as I can tell, this is consistent with all<br>&gt;&gt;    the rules.<br>&gt;&gt; <br>&gt;&gt; &quot;Those with side-effects should read as imperative verb phrases&quot;<br>&gt; <br>&gt; “form &lt;some-noun-phrase&gt;” is an imperative verb phrase.<br>&gt; <br>&gt;&gt; I expect a common verb to be chosen over an awkward, constructed one,<br>&gt;&gt; although I have to admit that the verb &quot;intersect&quot; is used only very<br>&gt;&gt; seldom if at all in set theory or geometry.  Therefore you might have<br>&gt;&gt; a point with &quot;intersect&quot; having the wrong implication, but see below.<br>&gt;&gt; <br>&gt;&gt;        (using formXXX only as last resort).<br>&gt;&gt; <br>&gt;&gt;    Though I prefer not to, you can look at this as a last resort if you<br>&gt;&gt;    like; the alternative you&#39;re proposing has the wrong implication, so it<br>&gt;&gt;    is not a candidate. It would be like using “remainder” as a verb for<br>&gt;&gt;    integers. Yes, it&#39;s a legitimate verb, but it means the wrong thing<br>&gt;&gt;    (see retail).<br>&gt;&gt; <br>&gt;&gt;                2. &quot;Intersect&quot; actually has the wrong meaning as an imperative. If you<br>&gt;&gt; <br>&gt;&gt;            tell set A to intersect set B, and then ask whether A intersects B<br>&gt;&gt; <br>&gt;&gt;            (!A.isDisjoint(with: B)), you would expect an answer of true.<br>&gt;&gt; <br>&gt;&gt;    Sorry, but I do not agree. With that reasoning I would have to expect<br>&gt;&gt; <br>&gt;&gt;    a.intersection(b) to be not empty.<br>&gt;&gt; <br>&gt;&gt;    Yes, that&#39;s exactly what I&#39;m saying. If you tell A to intersect B,<br>&gt;&gt;    presumably when the call completes, A intersects B (i.e. has a non-empty<br>&gt;&gt;    intersection). That would imply an implementation like, e.g.<br>&gt;&gt; <br>&gt;&gt; With a.intersection(b) I meant to extend your reasoning to the<br>&gt;&gt; non-mutating method. <br>&gt;&gt; <br>&gt;&gt; You surely do not expect the intersection of a and b to be non-empty<br>&gt;&gt; when calling the non-mutating method? <br>&gt; <br>&gt; No I do not.<br>&gt; <br>&gt;&gt; Then why should you expect that in the mutating case?  <br>&gt; <br>&gt; for the same reason that <br>&gt; <br>&gt;    shape1.encloses(shape2)<br>&gt; <br>&gt; might return true or false but<br>&gt; <br>&gt;    shape1.enclose(shape2)<br>&gt; <br>&gt; has to change shape1 so it encloses shape2.<br></p><p>Thanks! That&#39;s a very good example!<br></p><p>-Thorsten <br></p><p>&gt;&gt; Is it because the noun implies a current state whereas the verb should<br>&gt;&gt; be read as a command demanding to create a certain state? (I&#39;m not a<br>&gt;&gt; native speaker, so please bear with me)<br>&gt; <br>&gt; I think that&#39;s a pretty good explanation.<br>&gt; <br>&gt; HTH,<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
