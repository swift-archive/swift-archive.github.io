<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;<br>&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt; &quot;identical&quot;, so it ought to return `true`.<br></p><p>It ought to do whatever IEEE-754 specifies that its total ordering test<br>does.  That is, IEEE-754 gets to decide whether the difference between<br>+0 and -0 is “essential” to IEEE-754 floating point types, or not.<br></p><p>&gt;<br>&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt; &gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt; &gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt; &gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt; &gt;&gt;&gt;&gt; benefit.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt; &gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt; &gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt; &gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt; &gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; &gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt; &gt;&gt; it with ===.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt; &gt; &lt;=&gt;,<br>&gt;&gt; &gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt; &gt; customization.<br>&gt;&gt; <br>&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt; <br>&gt;&gt;   /// Two references are identical if they refer to the same<br>&gt;&gt;   /// instance.<br>&gt;&gt;   ///<br>&gt;&gt;   /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;   ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;   func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;     ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   /// Supports testing that two values of `Self` are identical<br>&gt;&gt;   ///<br>&gt;&gt;   /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;   /// type can document that specific observable characteristics<br>&gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt;&gt;   /// guarantee.<br>&gt;&gt;   ///<br>&gt;&gt;   /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;   ///   instances.<br>&gt;&gt;   /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;   ///   forwards to `===`.<br>&gt;&gt;   /// - Note: Types that require domain-specific `==`<br>&gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt;&gt;   ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;   ///   which will be used in contexts where the static type is<br>&gt;&gt;   ///   known to the compiler.<br>&gt;&gt;   /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;   ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt;&gt;   ///   `==`.<br>&gt;&gt;   protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;     func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   /// Default definition of `==` for Identifiable types.<br>&gt;&gt;   func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;     return lhs === rhs<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   /// Conforming types have a default total ordering.<br>&gt;&gt;   ///<br>&gt;&gt;   /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;   /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;   /// type can document that specific observable characteristics<br>&gt;&gt;   /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;   /// thus not to be considered as part of the interchangeability<br>&gt;&gt;   /// guarantee.<br>&gt;&gt;   ///<br>&gt;&gt;   /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;   ///   instances.<br>&gt;&gt;   /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;   ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;   ///   iff `a === b`.<br>&gt;&gt; <br>&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;  <br>&gt;&gt;   /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;   ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;   /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;   ///   implementations with different semantics (e.g. floating<br>&gt;&gt;   ///   point) should define more-specific overloads of those<br>&gt;&gt;   ///   operators, which will be used in contexts where the<br>&gt;&gt;   ///   static type is known to the compiler.<br>&gt;&gt;   /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;   ///   comparison operators to compare conforming instances;<br>&gt;&gt;   ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;   ///   and will be unaffected by more specific overloads of<br>&gt;&gt;   ///   the other operators.<br>&gt;&gt;   protocol Comparable : Identifiable {<br>&gt;&gt;     func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt;   /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;   extension Comparable {<br>&gt;&gt;     static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;       return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;     }<br>&gt;&gt;     static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;       return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;     }<br>&gt;&gt;     static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;       return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;     }<br>&gt;&gt;     static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;       return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;     }<br>&gt;&gt;   }<br>&gt;&gt; <br>&gt;&gt; &gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt; &gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt; &gt; areSame === again™!<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; --<br>&gt;&gt; &gt;&gt; Dave<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>&quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>- [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate)<br></p><p>Sounds like `===` should not return `true` for zeros of different signs, then.<br></p><p>&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; <br>&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt; <br>&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/91c8cb7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 08:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt; distinguishes between different representations of NaNs and between the<br>&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt; - [Wikipedia](<br>&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt; )<br>&gt;<br>&gt; Sounds like `===` should not return `true` for zeros of different signs,<br>&gt; then.<br>&gt;<br></p><p>Fair enough; the result of that will be, as Pyry noted above, that:<br></p><p>```<br>[-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>```<br></p><p>On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;<br>&gt;<br>&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;<br>&gt;<br>&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;<br>&gt;<br>&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;<br>&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; on Thu Jul 21 2016, Duan<br>&gt;<br>&gt;<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt; think this is about identity.<br>&gt;<br>&gt; I like areEquivalent() but there may be better names.<br>&gt;<br>&gt;<br>&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt; benefit.<br>&gt;<br>&gt;<br>&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt; users<br>&gt; won’t make this leap on their own and get the same initial impression as I<br>&gt; did.<br>&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt; wouldn&#39;t hurt here IMO :)<br>&gt;<br>&gt;<br>&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt; it with ===.<br>&gt;<br>&gt;<br>&gt; To spell this out (because I had to think about it for a second): === will<br>&gt; be derived from<br>&gt; &lt;=&gt;,<br>&gt; but also becomes default implementation for ==, which remains open for<br>&gt; customization.<br>&gt;<br>&gt;<br>&gt; I was imagining roughly this (untested):<br>&gt;<br>&gt;  /// Two references are identical if they refer to the same<br>&gt;  /// instance.<br>&gt;  ///<br>&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;  }<br>&gt;<br>&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;  ///<br>&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;  /// type can document that specific observable characteristics<br>&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;  /// guarantee.<br>&gt;  ///<br>&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;  ///   instances.<br>&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;  ///   forwards to `===`.<br>&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;  ///   which will be used in contexts where the static type is<br>&gt;  ///   known to the compiler.<br>&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;  ///   `==`.<br>&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;  }<br>&gt;<br>&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;    return lhs === rhs<br>&gt;  }<br>&gt;<br>&gt;  /// Conforming types have a default total ordering.<br>&gt;  ///<br>&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;  /// type can document that specific observable characteristics<br>&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;  /// guarantee.<br>&gt;  ///<br>&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;  ///   instances.<br>&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;  ///   iff `a === b`.<br>&gt;<br>&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but<br>&gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign<br>&gt; of zero (so +0 = −0)&quot;.<br>&gt;<br>&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;  ///   point) should define more-specific overloads of those<br>&gt;  ///   operators, which will be used in contexts where the<br>&gt;  ///   static type is known to the compiler.<br>&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;  ///   comparison operators to compare conforming instances;<br>&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;  ///   the other operators.<br>&gt;  protocol Comparable : Identifiable {<br>&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;  }<br>&gt;<br>&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;  extension Comparable {<br>&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;    }<br>&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;    }<br>&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;    }<br>&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;    }<br>&gt;  }<br>&gt;<br>&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt; “opportunities” to define<br>&gt; equality. The must be few, if any, use cases for this.<br>&gt;<br>&gt; Would love to see if anyone on the list can give us an example. Otherwise<br>&gt; we should make<br>&gt; areSame === again™!<br>&gt;<br>&gt;<br>&gt; Daniel Duan<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt; &lt;xiaodi.wu at gmail.com<br>&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt; wrote:<br>&gt;<br>&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt; future need not guarantee the same semantics?<br>&gt;<br>&gt;<br>&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;<br>&gt;<br>&gt; Nit: I think the more common term in stdlib would be<br>&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;<br>&gt;<br>&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt; swift-evolution<br>&gt; &lt;swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; wrote:<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt; proposal to clean up the semantics of ordering relations in the<br>&gt; standard library.  We have a draft that you can get as a gist.<br>&gt; Any feedback you might have about this proposal helps - though<br>&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;<br>&gt; Cheers,<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/a5f8951e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt; <br>&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt; <br>&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt; <br>&gt; ```<br>&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt; ```<br></p><p>Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br></p><p>It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br></p><p>&gt; <br>&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt; <br>&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/a2cb01da/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt; <br>&gt; ```<br>&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt; ```<br></p><p>Well, ummm, that&#39;s unfortunate. This would be extremely surprising behavior, and I could easily see this causing bugs. Users would have to be very careful to write:<br>```<br>[-0.0, 1.0, .nan, 0.0].firstIndex(where: { $0 == 0 })<br>```<br></p><p>This might be a deal-breaker… unless:<br></p><p>&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br></p><p>That seems like a reasonable workaround. I wish it weren&#39;t necessary though. Feels like we must have a flawed design. (Or IEEE does :P)<br></p><p>&gt; On Jul 22, 2016, at 6:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt; <br>&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt; <br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt; <br>&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt; <br>&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/3b66aaf7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:02 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt; <br>&gt; Well, ummm, that&#39;s unfortunate. This would be extremely surprising behavior, and I could easily see this causing bugs. Users would have to be very careful to write:<br>&gt; ```<br>&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(where: { $0 == 0 })<br>&gt; ```<br>&gt; <br>&gt; This might be a deal-breaker… unless:<br>&gt; <br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt; <br>&gt; That seems like a reasonable workaround. I wish it weren&#39;t necessary though. Feels like we must have a flawed design. (Or IEEE does :P)<br></p><p>I think it’s inherent in floating point representation of numbers.  They certainly aren’t perfect but rather a pragmatic engineering tradeoff.<br></p><p>&gt; <br>&gt;&gt; On Jul 22, 2016, at 6:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt;&gt; <br>&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/7429378b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; - [Wikipedia](<br>&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt; )<br>&gt;&gt;<br>&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs,<br>&gt;&gt; then.<br>&gt;&gt;<br>&gt;<br>&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;<br>&gt; ```<br>&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt; ```<br>&gt;<br>&gt;<br>&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt; to resolve this problem?<br>&gt;<br>&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt; generic algorithms and still provide the expected behavior for floating<br>&gt; point values.<br>&gt;<br></p><p>Well, what I&#39;m trying to say is that generic algorithms such as<br>`index(of:)` require only an equivalence relation. For floating point<br>types, there are three ways to slice it:<br></p><p>1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>constrained to do]<br>2. NaN == NaN, +0 == -0, and the same number encoded different ways compare<br>equal<br>3. NaN == NaN, +0 != -0, and the same number encoded different ways compare<br>not equal<br></p><p>Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>behaved like #2 for FloatingPoint types, then generic algorithms work just<br>fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>then we&#39;ve got problems.<br></p><p><br></p><p>&gt;<br>&gt;<br>&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; think this is about identity.<br>&gt;&gt;<br>&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt; benefit.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt; consider<br>&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt; users<br>&gt;&gt; won’t make this leap on their own and get the same initial impression as<br>&gt;&gt; I did.<br>&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt; it with ===.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt; will be derived from<br>&gt;&gt; &lt;=&gt;,<br>&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt; customization.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;<br>&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;  /// instance.<br>&gt;&gt;  ///<br>&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;  ///<br>&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;  /// guarantee.<br>&gt;&gt;  ///<br>&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;  ///   instances.<br>&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;  ///   `==`.<br>&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;    return lhs === rhs<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;  ///<br>&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;  /// guarantee.<br>&gt;&gt;  ///<br>&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;  ///   instances.<br>&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;<br>&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but<br>&gt;&gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign<br>&gt;&gt; of zero (so +0 = −0)&quot;.<br>&gt;&gt;<br>&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;  ///   the other operators.<br>&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;  extension Comparable {<br>&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;    }<br>&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;    }<br>&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;    }<br>&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt;<br>&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt; “opportunities” to define<br>&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;<br>&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise<br>&gt;&gt; we should make<br>&gt;&gt; areSame === again™!<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Daniel Duan<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt;<br>&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; Hello Swift Community,<br>&gt;&gt;<br>&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;<br>&gt;&gt; Cheers,<br>&gt;&gt;<br>&gt;&gt; ~Robert Widmann<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/2b10724b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt; <br>&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt; <br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt; <br>&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt; <br>&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt; <br>&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt; <br>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt; <br>&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br></p><p>And if we don’t then we’re back to 3 different concepts of equality.  There is definitely a tradeoff no matter what we choose.<br></p><p>&gt; <br>&gt;  <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/c13487f6/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs,<br>&gt;&gt;&gt; then.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt; to resolve this problem?<br>&gt;&gt;<br>&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt; point values.<br>&gt;&gt;<br>&gt;<br>&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt; types, there are three ways to slice it:<br>&gt;<br>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt; constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt; compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt; compare not equal<br>&gt;<br>&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt; then we&#39;ve got problems.<br>&gt;<br>&gt;<br>&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;<br></p><p>If some types have three concepts of equality, each with their particular<br>use, why must we eliminate one of them?<br></p><p><br>&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt; consider<br>&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt;&gt; users<br>&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as<br>&gt;&gt;&gt; I did.<br>&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but<br>&gt;&gt;&gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign<br>&gt;&gt;&gt; of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/bbfc6611/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt;&gt; <br>&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt;&gt; <br>&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt;&gt; <br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt;&gt; <br>&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br>&gt; <br>&gt; And if we don’t then we’re back to 3 different concepts of equality.  There is definitely a tradeoff no matter what we choose.<br>&gt; <br>&gt; If some types have three concepts of equality, each with their particular use, why must we eliminate one of them?<br></p><p>This isn’t about eliminating concepts of equality for a type.  They can have 42 if they want.  <br></p><p>This is about the right way to define the semantics of specific protocols.  It says nothing about additional notions of equality a type may have available.<br></p><p>The difficulty is finding a design for the protocols that makes sense with floating point types because we want them to be able to conform to the protocols.<br></p><p>&gt;  <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/619075b5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt;  wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt;&gt; point values.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;<br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt;&gt; constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; compare not equal<br>&gt;&gt;<br>&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt;<br>&gt;<br>&gt; If some types have three concepts of equality, each with their particular<br>&gt; use, why must we eliminate one of them?<br>&gt;<br>&gt;<br>&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt; have 42 if they want.<br>&gt;<br>&gt; This is about the right way to define the semantics of specific<br>&gt; protocols.  It says nothing about additional notions of equality a type may<br>&gt; have available.<br>&gt;<br>&gt; The difficulty is finding a design for the protocols that makes sense with<br>&gt; floating point types because we want them to be able to conform to the<br>&gt; protocols.<br>&gt;<br></p><p><br>Agreed. My argument is that if a Comparable can define its own `===`, still<br>supplying a valid equivalence relation but not being constrained by a<br>contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>with floating point types.<br></p><p>On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the<br>&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/a9dd93d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:15 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br>&gt;&gt; <br>&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.  There is definitely a tradeoff no matter what we choose.<br>&gt;&gt; <br>&gt;&gt; If some types have three concepts of equality, each with their particular use, why must we eliminate one of them?<br>&gt; <br>&gt; This isn’t about eliminating concepts of equality for a type.  They can have 42 if they want.  <br>&gt; <br>&gt; This is about the right way to define the semantics of specific protocols.  It says nothing about additional notions of equality a type may have available.<br>&gt; <br>&gt; The difficulty is finding a design for the protocols that makes sense with floating point types because we want them to be able to conform to the protocols.<br>&gt; <br>&gt; <br>&gt; Agreed. My argument is that if a Comparable can define its own `===`, still supplying a valid equivalence relation but not being constrained by a contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go with floating point types.<br></p><p>At the expense of `===` that introduces a new concept of floating point identity as well as the burden of a more complex design for the protocols.  <br></p><p>How does generic code decide when to use `===` and when to use `&lt;=&gt;` and what the implications of that choice are for arbitrary types?<br></p><p>&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/584f784b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt;&gt;  wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt;&gt;&gt; point values.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt;&gt;&gt; constrained to do]<br>&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt;&gt; compare equal<br>&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt;&gt; compare not equal<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; If some types have three concepts of equality, each with their particular<br>&gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt; have 42 if they want.<br>&gt;&gt;<br>&gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt; protocols.  It says nothing about additional notions of equality a type may<br>&gt;&gt; have available.<br>&gt;&gt;<br>&gt;&gt; The difficulty is finding a design for the protocols that makes sense with<br>&gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt; protocols.<br>&gt;&gt;<br>&gt;<br>&gt; Agreed. My argument is that if a Comparable can define its own `===`, still<br>&gt; supplying a valid equivalence relation but not being constrained by a<br>&gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt; with floating point types.<br></p><p>How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>and === would be implemented, and describe what it would mean for<br>algorithms?<br></p><p>&gt;<br>&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the<br>&gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com<br>&gt; &gt;<br>&gt; &gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt; matthew at anandabits.com&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt; matthew at anandabits.com&gt;<br>&gt; &gt;&gt;&gt;  wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt; the<br>&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; ```<br>&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt; &gt;&gt;&gt;&gt; ```<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt; algorithms<br>&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required<br>&gt; by<br>&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt; floating<br>&gt; &gt;&gt;&gt;&gt; point values.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt; are<br>&gt; &gt;&gt;&gt; constrained to do]<br>&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt; &gt;&gt;&gt; compare equal<br>&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt; &gt;&gt;&gt; compare not equal<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt; just<br>&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt; time,<br>&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; If some types have three concepts of equality, each with their<br>&gt; particular<br>&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt; &gt;&gt; have 42 if they want.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a type<br>&gt; may<br>&gt; &gt;&gt; have available.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt; with<br>&gt; &gt;&gt; floating point types because we want them to be able to conform to the<br>&gt; &gt;&gt; protocols.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt; still<br>&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt; &gt; with floating point types.<br>&gt;<br>&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt; and === would be implemented, and describe what it would mean for<br>&gt; algorithms?<br>&gt;<br></p><p>Right. I&#39;m not married to this solution anymore, but I do think it could<br>work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>Namely:<br></p><p>`a === b` if `(a &lt;=&gt; b) == .same`<br></p><p>But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>.same`. That is, two identical values may be ordered in a total ordering<br>based on *inessential* qualities.<br>Generic algorithms that need to produce a stable ordering of elements will<br>use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>Wouldn&#39;t that work?<br></p><p>&gt;<br>&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt; test<br>&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt; between<br>&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt; name.<br>&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt; most<br>&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt; bikesheding<br>&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt; collapse<br>&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt; for<br>&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt; ignore the<br>&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have<br>&gt; 3<br>&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/061ca4b0/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>This seems reasonable to me. I don&#39;t see why `===` has to do a total order comparison when we already have another operator, `&lt;=&gt;`, that does that.<br></p><p>&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt; &gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt;&gt;  wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt; &gt;&gt;&gt;&gt; point values.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt;&gt; &gt;&gt;&gt; constrained to do]<br>&gt;&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare equal<br>&gt;&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare not equal<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt;&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt;&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; If some types have three concepts of equality, each with their particular<br>&gt;&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt; &gt;&gt; have 42 if they want.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a type may<br>&gt;&gt; &gt;&gt; have available.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes sense with<br>&gt;&gt; &gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt; &gt;&gt; protocols.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`, still<br>&gt;&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt; &gt; with floating point types.<br>&gt;&gt; <br>&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt; algorithms?<br>&gt; <br>&gt; Right. I&#39;m not married to this solution anymore, but I do think it could work. There would still be a relationship required between `===` and `&lt;=&gt;`. Namely:<br>&gt; <br>&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; <br>&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) != .same`. That is, two identical values may be ordered in a total ordering based on *inessential* qualities.<br>&gt; Generic algorithms that need to produce a stable ordering of elements will use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity. Wouldn&#39;t that work?<br>&gt; <br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/53e64cb0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:38 PM, &lt;jaden.geller at gmail.com&gt; wrote:<br></p><p>&gt; This seems reasonable to me. I don&#39;t see why `===` has to do a total order<br>&gt; comparison when we already have another operator, `&lt;=&gt;`, that does that.<br>&gt;<br></p><p>I take it back. It wouldn&#39;t solve the issue that generic `&lt;` would still<br>behave in surprising ways, where two equal floating point values<br>represented differently might be less than each other or greater than each<br>other. I think what we really want is all identity and comparison divorced<br>from IEEE totalOrder.<br></p><p><br>&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;<br>&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt; &gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt;&gt;  wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt;&gt; algorithms<br>&gt;&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics<br>&gt;&gt; required by<br>&gt;&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt;&gt; floating<br>&gt;&gt; &gt;&gt;&gt;&gt; point values.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; constrained to do]<br>&gt;&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare equal<br>&gt;&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare not equal<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt;&gt; just<br>&gt;&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt;&gt; time,<br>&gt;&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; If some types have three concepts of equality, each with their<br>&gt;&gt; particular<br>&gt;&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt; &gt;&gt; have 42 if they want.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a<br>&gt;&gt; type may<br>&gt;&gt; &gt;&gt; have available.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt;&gt; with<br>&gt;&gt; &gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt; &gt;&gt; protocols.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt;&gt; still<br>&gt;&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt; &gt; with floating point types.<br>&gt;&gt;<br>&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt; algorithms?<br>&gt;&gt;<br>&gt;<br>&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt; work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>&gt; Namely:<br>&gt;<br>&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;<br>&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt; based on *inessential* qualities.<br>&gt; Generic algorithms that need to produce a stable ordering of elements will<br>&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>&gt; Wouldn&#39;t that work?<br>&gt;<br>&gt; &gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t<br>&gt;&gt; return<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt;&gt; test<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt;&gt; between<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt; &lt;http://daniel-at-duan.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt;&gt; But<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt; name.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt;&gt; real<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt; most<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt;&gt; impression<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt; bikesheding<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt; collapse<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second):<br>&gt;&gt; ===<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt;&gt; for<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; ignore the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users<br>&gt;&gt; have 3<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/c71a1de0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jul 22, 2016 at 9:38 PM, &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt;<br>&gt;&gt; This seems reasonable to me. I don&#39;t see why `===` has to do a total order<br>&gt;&gt; comparison when we already have another operator, `&lt;=&gt;`, that does that.<br>&gt;&gt;<br>&gt;<br>&gt; I take it back. It wouldn&#39;t solve the issue that generic `&lt;` would<br>&gt; still behave in surprising ways, where two equal floating point values<br>&gt; represented differently might be less than each other or greater than<br>&gt; each other.<br></p><p>I wonder if that&#39;s really a problem.  What generic algorithm are you<br>going to run on a collection of floats where it *would* be problematic?<br>Hmm, stableSort would not necessarily preserve the order of zeros in the<br>original collection if it contained both positive and negative zeros.<br></p><p>&gt; I think what we really want is all identity and comparison divorced<br>&gt; from IEEE totalOrder.<br></p><p>That might work.  Thanks for thinking this problem through; keep it up!<br></p><p>&gt;&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt; &gt; wrote:<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;  wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt;&gt;&gt; the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt;&gt;&gt; algorithms<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics<br>&gt;&gt;&gt; required by<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt;&gt;&gt; floating<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; point values.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt;&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt;&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt;&gt;&gt; are<br>&gt;&gt;&gt; &gt;&gt;&gt; constrained to do]<br>&gt;&gt;&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt;&gt; &gt;&gt;&gt; compare equal<br>&gt;&gt;&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt;&gt; &gt;&gt;&gt; compare not equal<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt;&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt;&gt;&gt; just<br>&gt;&gt;&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt;&gt;&gt; time,<br>&gt;&gt;&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt;&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; If some types have three concepts of equality, each with their<br>&gt;&gt;&gt; particular<br>&gt;&gt;&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt;&gt; &gt;&gt; have 42 if they want.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt;&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a<br>&gt;&gt;&gt; type may<br>&gt;&gt;&gt; &gt;&gt; have available.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt;&gt;&gt; with<br>&gt;&gt;&gt; &gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt;&gt; &gt;&gt; protocols.<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt;&gt;&gt; still<br>&gt;&gt;&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt;&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt;&gt; &gt; with floating point types.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt;&gt; algorithms?<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt;&gt; work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>&gt;&gt; Namely:<br>&gt;&gt;<br>&gt;&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;<br>&gt;&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>&gt;&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt;&gt; based on *inessential* qualities.<br>&gt;&gt; Generic algorithms that need to produce a stable ordering of elements will<br>&gt;&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>&gt;&gt; Wouldn&#39;t that work?<br>&gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt;&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t<br>&gt;&gt;&gt; return<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt;&gt;&gt; test<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt;&gt;&gt; between<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt; &lt;http://daniel-at-duan.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt;&gt;&gt; But<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt;&gt; name.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt;&gt;&gt; real<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt;&gt; most<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt;&gt;&gt; impression<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt;&gt; bikesheding<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt;&gt; collapse<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second):<br>&gt;&gt;&gt; ===<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt;&gt;&gt; for<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt; ignore the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users<br>&gt;&gt;&gt; have 3<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt; &gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br></p><p>&gt;<br>&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;<br>&gt; &gt; On Fri, Jul 22, 2016 at 9:38 PM, &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; This seems reasonable to me. I don&#39;t see why `===` has to do a total<br>&gt; order<br>&gt; &gt;&gt; comparison when we already have another operator, `&lt;=&gt;`, that does that.<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I take it back. It wouldn&#39;t solve the issue that generic `&lt;` would<br>&gt; &gt; still behave in surprising ways, where two equal floating point values<br>&gt; &gt; represented differently might be less than each other or greater than<br>&gt; &gt; each other.<br>&gt;<br>&gt; I wonder if that&#39;s really a problem.  What generic algorithm are you<br>&gt; going to run on a collection of floats where it *would* be problematic?<br>&gt;<br></p><p>I don&#39;t think they exist currently in stdlib, but any algorithm where<br>you&#39;re taking a subsequence prefix from a sorted collection up to a given<br>value might return a chunk of values that equal the value but compare<br>less-than (&quot;ascending&quot;).<br></p><p><br>&gt; Hmm, stableSort would not necessarily preserve the order of zeros in the<br>&gt; original collection if it contained both positive and negative zeros.<br>&gt;<br>&gt; &gt; I think what we really want is all identity and comparison divorced<br>&gt; &gt; from IEEE totalOrder.<br>&gt;<br>&gt; That might work.  Thanks for thinking this problem through; keep it up!<br>&gt;<br>&gt; &gt;&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;<br>&gt; &gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt; &gt;&gt;&gt; &gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt; &gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt; &gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;  wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution<br>&gt; &lt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and<br>&gt; between<br>&gt; &gt;&gt;&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above,<br>&gt; that:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt; &gt;&gt;&gt; algorithms<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics<br>&gt; &gt;&gt;&gt; required by<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt; &gt;&gt;&gt; floating<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; point values.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating<br>&gt; point<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison<br>&gt; operators<br>&gt; &gt;&gt;&gt; are<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; constrained to do]<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; compare equal<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; compare not equal<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if<br>&gt; `===`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms<br>&gt; work<br>&gt; &gt;&gt;&gt; just<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all<br>&gt; the<br>&gt; &gt;&gt;&gt; time,<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of<br>&gt; equality.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; If some types have three concepts of equality, each with their<br>&gt; &gt;&gt;&gt; particular<br>&gt; &gt;&gt;&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They<br>&gt; can<br>&gt; &gt;&gt;&gt; &gt;&gt; have 42 if they want.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt; &gt;&gt;&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a<br>&gt; &gt;&gt;&gt; type may<br>&gt; &gt;&gt;&gt; &gt;&gt; have available.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes<br>&gt; sense<br>&gt; &gt;&gt;&gt; with<br>&gt; &gt;&gt;&gt; &gt;&gt; floating point types because we want them to be able to conform to<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt; protocols.<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt; &gt;&gt;&gt; still<br>&gt; &gt;&gt;&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt; &gt;&gt;&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good<br>&gt; to go<br>&gt; &gt;&gt;&gt; &gt; with floating point types.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt; &gt;&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt; &gt;&gt;&gt; algorithms?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt; &gt;&gt; work. There would still be a relationship required between `===` and<br>&gt; `&lt;=&gt;`.<br>&gt; &gt;&gt; Namely:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b)<br>&gt; !=<br>&gt; &gt;&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt; &gt;&gt; based on *inessential* qualities.<br>&gt; &gt;&gt; Generic algorithms that need to produce a stable ordering of elements<br>&gt; will<br>&gt; &gt;&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for<br>&gt; identity.<br>&gt; &gt;&gt; Wouldn&#39;t that work?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; &gt;<br>&gt; &gt;&gt;&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) ==<br>&gt; .same`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t<br>&gt; &gt;&gt;&gt; return<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison.<br>&gt; They&#39;re<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total<br>&gt; ordering<br>&gt; &gt;&gt;&gt; test<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt; &gt;&gt;&gt; between<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or<br>&gt; not.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via<br>&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt; &gt;&gt;&gt; &lt;http://daniel-at-duan.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt; &gt;&gt;&gt; But<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt; &gt;&gt;&gt; name.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt; &gt;&gt;&gt; real<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we<br>&gt; don’t<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear<br>&gt; is<br>&gt; &gt;&gt;&gt; most<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt; &gt;&gt;&gt; impression<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt; &gt;&gt;&gt; bikesheding<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt; &gt;&gt;&gt; collapse<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second):<br>&gt; &gt;&gt;&gt; ===<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains<br>&gt; open<br>&gt; &gt;&gt;&gt; for<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) ==<br>&gt; .same`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt; &gt;&gt;&gt; ignore the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users<br>&gt; &gt;&gt;&gt; have 3<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==`<br>&gt; is<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in<br>&gt; the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different<br>&gt; things.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context<br>&gt; (independent<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the<br>&gt; gist.<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Dave<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;<br>&gt;<br>&gt; --<br>&gt; Dave<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/da7c10c8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 22, 2016 at 11:00:00pm</p></header><div class="content"><p>What if you wanted to filter such that you keep values less than some element that happens to be positive zero; might that keep around any negative zeros? Seems problematic.<br></p><p>&gt; On Jul 22, 2016, at 7:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:38 PM, &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems reasonable to me. I don&#39;t see why `===` has to do a total order<br>&gt;&gt;&gt; comparison when we already have another operator, `&lt;=&gt;`, that does that.<br>&gt;&gt; <br>&gt;&gt; I take it back. It wouldn&#39;t solve the issue that generic `&lt;` would<br>&gt;&gt; still behave in surprising ways, where two equal floating point values<br>&gt;&gt; represented differently might be less than each other or greater than<br>&gt;&gt; each other.<br>&gt; <br>&gt; I wonder if that&#39;s really a problem.  What generic algorithm are you<br>&gt; going to run on a collection of floats where it *would* be problematic?<br>&gt; Hmm, stableSort would not necessarily preserve the order of zeros in the<br>&gt; original collection if it contained both positive and negative zeros.<br>&gt; <br>&gt;&gt; I think what we really want is all identity and comparison divorced<br>&gt;&gt; from IEEE totalOrder.<br>&gt; <br>&gt; That might work.  Thanks for thinking this problem through; keep it up!<br>&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt;&gt;&gt;&gt; algorithms<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics<br>&gt;&gt;&gt;&gt; required by<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt;&gt;&gt;&gt; floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; point values.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt;&gt;&gt;&gt; are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; constrained to do]<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare equal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare not equal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt;&gt;&gt;&gt; just<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt;&gt;&gt;&gt; time,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; If some types have three concepts of equality, each with their<br>&gt;&gt;&gt;&gt; particular<br>&gt;&gt;&gt;&gt;&gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt;&gt;&gt;&gt;&gt; have 42 if they want.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt;&gt;&gt;&gt;&gt; protocols.  It says nothing about additional notions of equality a<br>&gt;&gt;&gt;&gt; type may<br>&gt;&gt;&gt;&gt;&gt;&gt; have available.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt;&gt;&gt;&gt; with<br>&gt;&gt;&gt;&gt;&gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt;&gt;&gt;&gt;&gt; protocols.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt;&gt;&gt;&gt; still<br>&gt;&gt;&gt;&gt;&gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt;&gt;&gt;&gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt;&gt;&gt;&gt; with floating point types.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt;&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt;&gt;&gt; algorithms?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt;&gt;&gt; work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>&gt;&gt;&gt; Namely:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>&gt;&gt;&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt;&gt;&gt; based on *inessential* qualities.<br>&gt;&gt;&gt; Generic algorithms that need to produce a stable ordering of elements will<br>&gt;&gt;&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>&gt;&gt;&gt; Wouldn&#39;t that work?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t<br>&gt;&gt;&gt;&gt; return<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt;&gt;&gt;&gt; test<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt;&gt;&gt;&gt; between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt;&gt;&gt;&gt; But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt;&gt;&gt; name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt;&gt;&gt;&gt; real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt;&gt;&gt; most<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt;&gt;&gt;&gt; impression<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt;&gt;&gt; bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt;&gt;&gt; collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second):<br>&gt;&gt;&gt;&gt; ===<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt;&gt;&gt;&gt; for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt; ignore the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users<br>&gt;&gt;&gt;&gt; have 3<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 23, 2016 at 11:00:00am</p></header><div class="content"><p>on Fri Jul 22 2016, jaden.geller-AT-gmail.com wrote:<br></p><p>&gt; What if you wanted to filter such that you keep values less than some<br>&gt; element that happens to be positive zero; might that keep around any<br>&gt; negative zeros? Seems problematic.<br></p><p>I agree.<br></p><p>&gt;&gt; On Jul 22, 2016, at 7:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:38 PM, &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This seems reasonable to me. I don&#39;t see why `===` has to do a total order<br>&gt;&gt;&gt;&gt; comparison when we already have another operator, `&lt;=&gt;`, that does that.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I take it back. It wouldn&#39;t solve the issue that generic `&lt;` would<br>&gt;&gt;&gt; still behave in surprising ways, where two equal floating point values<br>&gt;&gt;&gt; represented differently might be less than each other or greater than<br>&gt;&gt;&gt; each other.<br>&gt;&gt; <br>&gt;&gt; I wonder if that&#39;s really a problem.  What generic algorithm are you<br>&gt;&gt; going to run on a collection of floats where it *would* be problematic?<br>&gt;&gt; Hmm, stableSort would not necessarily preserve the order of zeros in the<br>&gt;&gt; original collection if it contained both positive and negative zeros.<br>&gt;&gt; <br>&gt;&gt;&gt; I think what we really want is all identity and comparison divorced<br>&gt;&gt;&gt; from IEEE totalOrder.<br>&gt;&gt; <br>&gt;&gt; That might work.  Thanks for thinking this problem through; keep it up!<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 7:35 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt;&gt;&gt;&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt;&gt;&gt;&gt;&gt; the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt;&gt;&gt;&gt;&gt; algorithms<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics<br>&gt;&gt;&gt;&gt;&gt; required by<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt;&gt;&gt;&gt;&gt; floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; point values.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt;&gt;&gt;&gt;&gt; are<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; constrained to do]<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare equal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare not equal<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt;&gt;&gt;&gt;&gt; just<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt;&gt;&gt;&gt;&gt; time,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; If some types have three concepts of equality, each with their<br>&gt;&gt;&gt;&gt;&gt; particular<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; have 42 if they want.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocols.  It says nothing about additional notions of equality a<br>&gt;&gt;&gt;&gt;&gt; type may<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; have available.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt;&gt;&gt;&gt;&gt; with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocols.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt;&gt;&gt;&gt;&gt; still<br>&gt;&gt;&gt;&gt;&gt;&gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt;&gt;&gt;&gt;&gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt;&gt;&gt;&gt;&gt; with floating point types.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt;&gt;&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt;&gt;&gt;&gt; algorithms?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt;&gt;&gt;&gt; work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt; Namely:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>&gt;&gt;&gt;&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt;&gt;&gt;&gt; based on *inessential* qualities.<br>&gt;&gt;&gt;&gt; Generic algorithms that need to produce a stable ordering of elements will<br>&gt;&gt;&gt;&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>&gt;&gt;&gt;&gt; Wouldn&#39;t that work?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t<br>&gt;&gt;&gt;&gt;&gt; return<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt;&gt;&gt;&gt;&gt; test<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt;&gt;&gt;&gt;&gt; between<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.<br>&gt;&gt;&gt;&gt;&gt; But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt;&gt;&gt;&gt; name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no<br>&gt;&gt;&gt;&gt;&gt; real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt;&gt;&gt;&gt; most<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial<br>&gt;&gt;&gt;&gt;&gt; impression<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt;&gt;&gt;&gt; bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt;&gt;&gt;&gt; collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second):<br>&gt;&gt;&gt;&gt;&gt; ===<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt;&gt;&gt;&gt;&gt; for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt; ignore the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;     return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;   }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users<br>&gt;&gt;&gt;&gt;&gt; have 3<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br></p><p>&gt; On Fri, Jul 22, 2016 at 9:28 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; on Fri Jul 22 2016, Xiaodi Wu &lt;xiaodi.wu-AT-gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; &gt; On Fri, Jul 22, 2016 at 9:13 PM, Matthew Johnson &lt;matthew at anandabits.com<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Jul 22, 2016, at 9:10 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Fri, Jul 22, 2016 at 9:08 PM, Matthew Johnson &lt;<br>&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Jul 22, 2016, at 9:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;<br>&gt;&gt; matthew at anandabits.com&gt;<br>&gt;&gt; &gt;&gt;&gt;  wrote:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; )<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; &gt;&gt;&gt;&gt; ```<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Maybe we need floating point specific implementations of some<br>&gt;&gt; algorithms<br>&gt;&gt; &gt;&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required<br>&gt;&gt; by<br>&gt;&gt; &gt;&gt;&gt;&gt; generic algorithms and still provide the expected behavior for<br>&gt;&gt; floating<br>&gt;&gt; &gt;&gt;&gt;&gt; point values.<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt; &gt;&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt; &gt;&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators<br>&gt;&gt; are<br>&gt;&gt; &gt;&gt;&gt; constrained to do]<br>&gt;&gt; &gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare equal<br>&gt;&gt; &gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; &gt;&gt;&gt; compare not equal<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt; &gt;&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work<br>&gt;&gt; just<br>&gt;&gt; &gt;&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the<br>&gt;&gt; time,<br>&gt;&gt; &gt;&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; And if we don’t then we’re back to 3 different concepts of equality.<br>&gt;&gt; &gt;&gt;&gt; There is definitely a tradeoff no matter what we choose.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; If some types have three concepts of equality, each with their<br>&gt;&gt; particular<br>&gt;&gt; &gt;&gt; use, why must we eliminate one of them?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This isn’t about eliminating concepts of equality for a type.  They can<br>&gt;&gt; &gt;&gt; have 42 if they want.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; This is about the right way to define the semantics of specific<br>&gt;&gt; &gt;&gt; protocols.  It says nothing about additional notions of equality a type<br>&gt;&gt; may<br>&gt;&gt; &gt;&gt; have available.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; The difficulty is finding a design for the protocols that makes sense<br>&gt;&gt; with<br>&gt;&gt; &gt;&gt; floating point types because we want them to be able to conform to the<br>&gt;&gt; &gt;&gt; protocols.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Agreed. My argument is that if a Comparable can define its own `===`,<br>&gt;&gt; still<br>&gt;&gt; &gt; supplying a valid equivalence relation but not being constrained by a<br>&gt;&gt; &gt; contract that `(a &lt;=&gt; b) == .same` iff `a === b`, then we are good to go<br>&gt;&gt; &gt; with floating point types.<br>&gt;&gt;<br>&gt;&gt; How would that work?  Can you spell out the implications, show how &lt;=&gt;<br>&gt;&gt; and === would be implemented, and describe what it would mean for<br>&gt;&gt; algorithms?<br>&gt;&gt;<br>&gt;<br>&gt; Right. I&#39;m not married to this solution anymore, but I do think it could<br>&gt; work. There would still be a relationship required between `===` and `&lt;=&gt;`.<br>&gt; Namely:<br>&gt;<br>&gt; `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;<br>&gt; But for some values a and b, it is permitted that `a === b &amp;&amp; (a &lt;=&gt; b) !=<br>&gt; .same`. That is, two identical values may be ordered in a total ordering<br>&gt; based on *inessential* qualities.<br>&gt; Generic algorithms that need to produce a stable ordering of elements will<br>&gt; use `&lt;=&gt;`. Those such as `index(of:)` will use `===` to test for identity.<br>&gt; Wouldn&#39;t that work?<br></p><p>It might, actually!  That&#39;s pretty interesting.<br></p><p>&gt;&gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering<br>&gt;&gt; test<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference<br>&gt;&gt; between<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better<br>&gt;&gt; name.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; consider<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is<br>&gt;&gt; most<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; users<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated<br>&gt;&gt; bikesheding<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should<br>&gt;&gt; collapse<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open<br>&gt;&gt; for<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt; ignore the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have<br>&gt;&gt; 3<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; Dave<br>&gt;&gt;<br></p><p>-- <br>Dave<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br></p><p>Though it seems super confusing that a language have THREE ways to compare values, that does almost seem necessary here. Do we actually need an operator that performs #3? I understand that that is equality under total ordering, but couldn&#39;t users just write `(a &lt;=&gt; b) == .same` if they want that?<br></p><p>&gt; On Jul 22, 2016, at 7:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt; <br>&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt; <br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt; <br>&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt; <br>&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt; <br>&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt; <br>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt; <br>&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br>&gt; <br>&gt;  <br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/9c466706/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:09 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt;<br>wrote:<br></p><p>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt; constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt; compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt; compare not equal<br>&gt;<br>&gt;<br>&gt; Though it seems super confusing that a language have THREE ways to compare<br>&gt; values, that does almost seem necessary here. Do we actually need an<br>&gt; operator that performs #3? I understand that that is equality under total<br>&gt; ordering, but couldn&#39;t users just write `(a &lt;=&gt; b) == .same` if they want<br>&gt; that?<br>&gt;<br></p><p>For floating point types, I think `===` shouldn&#39;t be #3. From a practical<br>standpoint, no one ever wants that definition unless they are ordering<br>things. Whereas you&#39;d want #2 for things like `.index(of:)` and #1 for the<br>traditional comparison operators.<br></p><p><br>&gt;<br>&gt; On Jul 22, 2016, at 7:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt; )<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs,<br>&gt;&gt;&gt; then.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt; to resolve this problem?<br>&gt;&gt;<br>&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt; point values.<br>&gt;&gt;<br>&gt;<br>&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt; types, there are three ways to slice it:<br>&gt;<br>&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt; constrained to do]<br>&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt; compare equal<br>&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt; compare not equal<br>&gt;<br>&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt; then we&#39;ve got problems.<br>&gt;<br>&gt;<br>&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt; consider<br>&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt;&gt; users<br>&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as<br>&gt;&gt;&gt; I did.<br>&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but<br>&gt;&gt;&gt; not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign<br>&gt;&gt;&gt; of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;    }<br>&gt;&gt;&gt;  }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/e17f49eb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:12 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 9:09 PM, Jaden Geller &lt;jaden.geller at gmail.com &lt;mailto:jaden.geller at gmail.com&gt;&gt; wrote:<br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt; <br>&gt; <br>&gt; Though it seems super confusing that a language have THREE ways to compare values, that does almost seem necessary here. Do we actually need an operator that performs #3? I understand that that is equality under total ordering, but couldn&#39;t users just write `(a &lt;=&gt; b) == .same` if they want that?<br>&gt; <br>&gt; For floating point types, I think `===` shouldn&#39;t be #3. From a practical standpoint, no one ever wants that definition unless they are ordering things. Whereas you&#39;d want #2 for things like `.index(of:)` and #1 for the traditional comparison operators.<br></p><p>However, we have to introduce a new notion of identity for floating point types if `===` isn’t #3.  Floating points are tricky enough already.  Is that really a good thing?<br></p><p>Further, it encodes three separate meanings of equality in the protocols.  We should avoid that if we can.<br></p><p>It feels like maybe the right solution is floating point specific algorithm overloads.  It doesn’t seem like too big a surprise that this is the case when you really dig into the details.<br></p><p>&gt;  <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 7:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt;&gt; <br>&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt;&gt; <br>&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt;&gt; <br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt;&gt; <br>&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/e354a381/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 9:19 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>wrote:<br></p><p>&gt;<br>&gt; On Jul 22, 2016, at 9:12 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 9:09 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt;<br>&gt; wrote:<br>&gt;<br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt;&gt; constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; compare not equal<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Though it seems super confusing that a language have THREE ways to<br>&gt;&gt; compare values, that does almost seem necessary here. Do we actually need<br>&gt;&gt; an operator that performs #3? I understand that that is equality under<br>&gt;&gt; total ordering, but couldn&#39;t users just write `(a &lt;=&gt; b) == .same` if they<br>&gt;&gt; want that?<br>&gt;&gt;<br>&gt;<br>&gt; For floating point types, I think `===` shouldn&#39;t be #3. From a practical<br>&gt; standpoint, no one ever wants that definition unless they are ordering<br>&gt; things. Whereas you&#39;d want #2 for things like `.index(of:)` and #1 for the<br>&gt; traditional comparison operators.<br>&gt;<br>&gt;<br>&gt; However, we have to introduce a new notion of identity for floating point<br>&gt; types if `===` isn’t #3.  Floating points are tricky enough already.  Is<br>&gt; that really a good thing?<br>&gt;<br>&gt; Further, it encodes three separate meanings of equality in the protocols.<br>&gt; We should avoid that if we can.<br>&gt;<br>&gt; It feels like maybe the right solution is floating point specific<br>&gt; algorithm overloads.  It doesn’t seem like too big a surprise that this is<br>&gt; the case when you really dig into the details.<br>&gt;<br></p><p><br>I see what you&#39;re getting at here. But I like your other alternative<br>better, which is to define identity in a generically useful way for<br>floating point types, and preserve IEEE semantics in its own method for<br>floating point types.<br></p><p>On Jul 22, 2016, at 7:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com&gt;<br>&gt;&gt;  wrote:<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;<br>&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also<br>&gt;&gt;&gt;&gt; distinguishes between different representations of NaNs and between the<br>&gt;&gt;&gt;&gt; same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt; - [Wikipedia](<br>&gt;&gt;&gt;&gt; https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate<br>&gt;&gt;&gt;&gt; )<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different<br>&gt;&gt;&gt;&gt; signs, then.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms<br>&gt;&gt;&gt; to resolve this problem?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by<br>&gt;&gt;&gt; generic algorithms and still provide the expected behavior for floating<br>&gt;&gt;&gt; point values.<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as<br>&gt;&gt; `index(of:)` require only an equivalence relation. For floating point<br>&gt;&gt; types, there are three ways to slice it:<br>&gt;&gt;<br>&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are<br>&gt;&gt; constrained to do]<br>&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways<br>&gt;&gt; compare equal<br>&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways<br>&gt;&gt; compare not equal<br>&gt;&gt;<br>&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===`<br>&gt;&gt; behaved like #2 for FloatingPoint types, then generic algorithms work just<br>&gt;&gt; fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time,<br>&gt;&gt; then we&#39;ve got problems.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org<br>&gt;&gt;&gt;&gt; &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t<br>&gt;&gt;&gt;&gt; consider<br>&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most<br>&gt;&gt;&gt;&gt; users<br>&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression<br>&gt;&gt;&gt;&gt; as I did.<br>&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): ===<br>&gt;&gt;&gt;&gt; will be derived from<br>&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the<br>&gt;&gt;&gt;&gt; sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3<br>&gt;&gt;&gt;&gt; “opportunities” to define<br>&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example.<br>&gt;&gt;&gt;&gt; Otherwise we should make<br>&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/8c4ce424/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Draft][Proposal] Formalized Ordering</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 22, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jul 22, 2016, at 9:20 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Fri, Jul 22, 2016 at 9:19 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 9:12 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 9:09 PM, Jaden Geller &lt;jaden.geller at gmail.com &lt;mailto:jaden.geller at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Though it seems super confusing that a language have THREE ways to compare values, that does almost seem necessary here. Do we actually need an operator that performs #3? I understand that that is equality under total ordering, but couldn&#39;t users just write `(a &lt;=&gt; b) == .same` if they want that?<br>&gt;&gt; <br>&gt;&gt; For floating point types, I think `===` shouldn&#39;t be #3. From a practical standpoint, no one ever wants that definition unless they are ordering things. Whereas you&#39;d want #2 for things like `.index(of:)` and #1 for the traditional comparison operators.<br>&gt; <br>&gt; However, we have to introduce a new notion of identity for floating point types if `===` isn’t #3.  Floating points are tricky enough already.  Is that really a good thing?<br>&gt; <br>&gt; Further, it encodes three separate meanings of equality in the protocols.  We should avoid that if we can.<br>&gt; <br>&gt; It feels like maybe the right solution is floating point specific algorithm overloads.  It doesn’t seem like too big a surprise that this is the case when you really dig into the details.<br>&gt; <br>&gt; <br>&gt; I see what you&#39;re getting at here. But I like your other alternative better, which is to define identity in a generically useful way for floating point types, and preserve IEEE semantics in its own method for floating point types.<br></p><p>That wasn’t actually my idea - it was yours! :)  <br></p><p>&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 7:04 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:57 PM, Matthew Johnson &lt;matthew at anandabits.com &lt;mailto:matthew at anandabits.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 8:54 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:52 PM, Jaden Geller via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; &quot;The totalOrder predicate will order these cases, and it also distinguishes between different representations of NaNs and between the same decimal floating point number encoded in different ways.&quot;<br>&gt;&gt;&gt;&gt; - [Wikipedia](https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate &lt;https://en.wikipedia.org/wiki/IEEE_floating_point#Total-ordering_predicate&gt;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sounds like `===` should not return `true` for zeros of different signs, then.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Fair enough; the result of that will be, as Pyry noted above, that:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt;&gt; [-0.0, 1.0, .nan, 0.0].firstIndex(of: 0.0) //=&gt; 3, not 0<br>&gt;&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Maybe we need floating point specific implementations of some algorithms to resolve this problem?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It doesn’t seem like there is a way to provide the semantics required by generic algorithms and still provide the expected behavior for floating point values.  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Well, what I&#39;m trying to say is that generic algorithms such as `index(of:)` require only an equivalence relation. For floating point types, there are three ways to slice it:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. NaN != NaN and +0 == -0 [what the traditional comparison operators are constrained to do]<br>&gt;&gt;&gt; 2. NaN == NaN, +0 == -0, and the same number encoded different ways compare equal<br>&gt;&gt;&gt; 3. NaN == NaN, +0 != -0, and the same number encoded different ways compare not equal<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Both #2 and #3 can fall out of valid equivalence relations; if `===` behaved like #2 for FloatingPoint types, then generic algorithms work just fine. If we insist on using a total ordering defined by `&lt;=&gt;` all the time, then we&#39;ve got problems.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:48 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Jaden Geller &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t see why both `(+0) === (-0)` and `(+0) &lt;=&gt; (-0)` can&#39;t return<br>&gt;&gt;&gt;&gt;&gt;&gt; `true` and `.same`, respectively. This doesn&#39;t break the total<br>&gt;&gt;&gt;&gt;&gt;&gt; ordering of values. `===` doesn&#39;t do raw memory comparison. They&#39;re<br>&gt;&gt;&gt;&gt;&gt;&gt; &quot;identical&quot;, so it ought to return `true`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; It ought to do whatever IEEE-754 specifies that its total ordering test<br>&gt;&gt;&gt;&gt;&gt; does.  That is, IEEE-754 gets to decide whether the difference between<br>&gt;&gt;&gt;&gt;&gt; +0 and -0 is “essential” to IEEE-754 floating point types, or not.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 6:37 PM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 8:20 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan &lt;daniel-AT-duan.org &lt;http://daniel-at-duan.org/&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:00 PM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Fri Jul 22 2016, Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 11:05 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; on Thu Jul 21 2016, Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Great proposal. I want to second that areSame may mislead user to<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; think this is about identity.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like areEquivalent() but there may be better names.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It really *is* about identity as I posted in a previous message.  But<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; that doesn&#39;t change the fact that areEquivalent might be a better name.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s one of the things we considered; it just seemed long for no real<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; benefit.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; If the addresses of the arguments aren’t being used, then we don’t consider<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; them part of their *identity*. I can follow this logic. My fear is most users<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; won’t make this leap on their own and get the same initial impression as I did.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It&#39;s entirely possible this fear is unfounded. Some educated bikesheding<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wouldn&#39;t hurt here IMO :)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Well, it&#39;s still a very real question whether we ought to have the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; additional API surface implied by areSame, or wether we should collapse<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; it with ===.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; To spell this out (because I had to think about it for a second): === will be derived from<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;=&gt;,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; but also becomes default implementation for ==, which remains open for<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; customization.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I was imagining roughly this (untested):<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Two references are identical if they refer to the same<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// instance.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Classes with a more-refined notion of “identical”<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   should conform to `Identifiable` and implement `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  func ===(lhs: AnyObject, rhs: AnyObject) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    ObjectIdentifier(lhs) == ObjectIdentifier(rhs)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Supports testing that two values of `Self` are identical<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a === b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `===` induces an equivalence relation over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain an `==` operator that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   forwards to `===`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `==`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define a more-specific overload of `==`,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   which will be used in contexts where the static type is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code should usually use `==` to compare<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   conforming instances; that will always dispatch to `===`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   `==`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  protocol Identifiable { // née Equatable name is negotiable<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    func ===(_: Self, _: aSelf) -&gt; Bool<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Default definition of `==` for Identifiable types.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  func ==&lt;T: Identifiable&gt;(lhs: T, rhs: T) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    return lhs === rhs<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Conforming types have a default total ordering.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// If `a` and `b` are of type `Self`, `a &lt;=&gt; b` means that<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// `a` and `b` are interchangeable in most code.  A conforming<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// type can document that specific observable characteristics<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// (such as the `capacity` of an `Array`) are inessential and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// thus not to be considered as part of the interchangeability<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// guarantee.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: `&lt;=&gt;` induces a total ordering over<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   instances.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Requires: the semantics of `&lt;=&gt;` are  consistent with<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   those of `===`.  That is, `(a &lt;=&gt; b) == .equivalent`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   iff `a === b`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; For floating point, I&#39;d hope that `a === b` if `(a &lt;=&gt; b) == .same` *but not iff*. This is to satisfy IEEE 754: &quot;Comparisons shall ignore the sign of zero (so +0 = −0)&quot;.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: conforming types will gain `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators defined in terms of `&lt;=&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Types that require domain-specific `&lt;`, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   implementations with different semantics (e.g. floating<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   point) should define more-specific overloads of those<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   operators, which will be used in contexts where the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   static type is known to the compiler.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// - Note: Generic code can freely use `&lt;=&gt;` or the traditional<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   comparison operators to compare conforming instances;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   the result will always be supplied by `&lt;=&gt;`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   and will be unaffected by more specific overloads of<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ///   the other operators.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  protocol Comparable : Identifiable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    func &lt;=&gt; (lhs: Self, rhs: Self) -&gt; Ordering<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  /// Default implementations of `&lt;`, `&lt;=`, `&gt;`, and `&gt;=`.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  extension Comparable {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &lt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .ascending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (lhs &lt;=&gt; rhs) == .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    static func &gt;=(lhs: Self, rhs: Self) -&gt; Bool {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      return (rhs &lt;=&gt; lhs) != .descending<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;  }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I like this idea. If we keep === as a separate thing, now users have 3 “opportunities” to define<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; equality. The must be few, if any, use cases for this.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Would love to see if anyone on the list can give us an example. Otherwise we should make<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; areSame === again™!<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:32 PM, Robert Widmann via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 21, 2016, at 6:19 PM, Xiaodi Wu<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com &lt;mailto:xiaodi.wu at gmail.com&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This is nice. Is `areSame()` being proposed because static `==` is<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the status quo and you&#39;re trying to make the point that `==` in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; future need not guarantee the same semantics?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yep!  Equivalence and equality are strictly very different things.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Nit: I think the more common term in stdlib would be<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; `areEquivalent()`. Do you think `same` in that context (independent<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; of the word &quot;ordering&quot;) might erroneously suggest identity?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; There is room for improvement here.  Keep ‘em coming.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Thu, Jul 21, 2016 at 8:11 PM, Robert Widmann via<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift Community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Harlan Haskins, Jaden Geller, and I have been working on a<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; proposal to clean up the semantics of ordering relations in the<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; standard library.  We have a draft that you can get as a gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Any feedback you might have about this proposal helps - though<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; please keeps your comments on Swift-Evolution and not on the gist.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cheers,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/1a5838ec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
