<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Re : [Post Swift 3] [Proposal] Introducing `group` mechanism</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 30, 2016 at 12:00:00pm</p></header><div class="content"><p>--  <br>Adrian Zubarev<br>Sent with Airmail  <br></p><p>Am 30. Juni 2016 um 12:13:10, Adrian Zubarev (adrian.zubarev at devandartist.com(mailto:adrian.zubarev at devandartist.com)) schrieb:<br></p><p>&gt;  <br>&gt; We *could* remove the group keyword, but there is a problem with that. It becomes really strange when you&#39;ll try nesting labeled groups.  <br>&gt;  <br>&gt; ```seift  <br>&gt; public {<br>&gt; labelName {<br>&gt;  <br>&gt; func member() {}  <br>&gt; }<br>&gt; }<br>&gt; ```<br>&gt;  <br>&gt; It is an interesting suggestion to use extensions that way, but how would you nest and create diffrent label pathes with extensions?  <br>&gt;  <br>&gt; We also cannot nest extensions (yet) and when it comes to conformances the access modier is not allowed on extensions. That is one of my points to remove this behavior from extensions and have equal access contol on extensions like on classes etc.!<br>&gt;  <br>&gt; --  <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail  <br>&gt;  <br>&gt; Am 30. Juni 2016 um 12:04:59, Haravikk (swift-evolution at haravikk.me(mailto:swift-evolution at haravikk.me)) schrieb:<br>&gt;  <br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt; &gt; On 29 Jun 2016, at 22:41, David Sweeris via swift-evolution &lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt; wrote:  <br>&gt; &gt; &gt; Speaking of C++, is the “group” keyword even necessary? To borrow your own example from earlier, it seems like we could just as easily say this:  <br>&gt; &gt; &gt; public struct A {<br>&gt; &gt; &gt; public { // all public<br>&gt; &gt; &gt; func member1() {}<br>&gt; &gt; &gt; func member2() {}<br>&gt; &gt; &gt; func member3() {}<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; public labelName {// all public, accessible under `foo.lableName`<br>&gt; &gt; &gt; func member4() {}<br>&gt; &gt; &gt; func member5() {}<br>&gt; &gt; &gt; func member6() {}<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; }<br>&gt; &gt; &gt; (which is not C++’s syntax, I know… the comment just got me thinking about it is all)<br>&gt; &gt; &gt;  <br>&gt; &gt; &gt; - Dave Sweeris  <br>&gt; &gt; This form is interesting, but personally when it comes to grouping I&#39;ve become a huge fan of using focused extensions, meaning my type declarations are usually nothing but the bare minimum definition for stored properties and required constructors, everything else goes into the most relevant extension.  <br>&gt; &gt;  <br>&gt; &gt; As such it seems to me like this feature request could be handled by two features; named extensions, and access modifiers on extensions, so I could do something like so:  <br>&gt; &gt;  <br>&gt; &gt; public struct A { … }  <br>&gt; &gt;  <br>&gt; &gt; // My awesome labelName implementation  <br>&gt; &gt; public extension A.labelName {<br>&gt; &gt;  <br>&gt; &gt;  <br>&gt; &gt; func member4() { … }<br>&gt; &gt; func member5() { … }  <br>&gt; &gt; func member6() { … }<br>&gt; &gt; }<br>&gt; &gt;  <br>&gt; &gt; Here the public modifier changes the default for functions without a modifier of their own, purely for convenience (as they can still be overridden if I need a private method to implement them) and the label lets me organise them under the parent type. Multiple such extensions could be specified for the same label, with their own default access and/or type constraints.  <br>&gt; &gt;  <br>&gt; &gt; So yeah, grouping is handy, but I think that extensions already provide a good way to achieve this, and it would make more sense to focus any additions onto them. <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/795e9317/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Post Swift 3] [Proposal] Introducing `group` mechanism</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>June 30, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On 30 Jun 2016, at 11:22, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; It is an interesting suggestion to use extensions that way, but how would you nest and create diffrent label pathes with extensions? <br>&gt; <br>&gt; We also cannot nest extensions (yet) and when it comes to conformances the access modier is not allowed on extensions. That is one of my points to remove this behavior from extensions and have equal access contol on extensions like on classes etc.!<br></p><p>How about just allowing more periods in the naming? Like so:<br></p><p>	struct A {}<br>	public extension A.foo {<br>		func someMethod() { … } // a.foo.someMethod()<br>	}<br>	private extension A.foo.bar {<br>		func someHiddenMethod() { … } // a.foo.bar.someHiddenMethod() <br>	}<br></p><p>	// Alternatively:<br>	extension A {<br>		public func foo.someMethod() { … }<br>		private func foo.bar.someHiddenMethod() { … }<br>	}<br></p><p>I suppose it lacks the kind of visual hierarchy that grouping within the type could achieve, but at the same time such grouping could get unwieldy quickly due to implementation details growing the vertical height until the structure becomes unclear. This is why I&#39;d favour extensions personally. There could still be call for both though, as a balance such as simple properties and methods declared hierarchically within the type, vs large methods moved out into extensions, letting us mix and match however we like. I do think that the extension one should be considered though, as it&#39;s a recommended way to handle code structure in Swift I think, or at least I&#39;m addicted to using it ;)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/0ca142a0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Post Swift 3] [Proposal] Introducing `group` mechanism</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>June 30, 2016 at 10:00:00pm</p></header><div class="content"><p>How about adding attributes on extensions (just bikeshedding), because to me it’s not clear if you’re creating a class/static access label or for an instance of that type?<br></p><p>Nesting extensions would become useful for the sake of access labels.<br></p><p>struct A {<br>     <br>    public extension Self.foo {<br>        func someMethod() { … } // a.foo.someMethod()<br>    }    <br>     <br>    private extension Self.foo.bar {<br>        func someHiddenMethod() { … } // a.foo.bar.someHiddenMethod()  <br>    }<br>}<br></p><p>// Or<br>struct A {<br>     <br>    public extension self foo {<br>        func someMethod() { … } // a.foo.someMethod()<br>    }    <br>     <br>    private extension self.foo bar {<br>        func someHiddenMethod() { … } // a.foo.bar.someHiddenMethod()  <br>    }<br>}<br>The only problem I have with extensions, that they don’t read that well and personally I don’t like the default access modifier on them (not how its done right now).<br></p><p>Thank you for providing new ideas. :)<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 30. Juni 2016 um 21:57:37, Haravikk (swift-evolution at haravikk.me) schrieb:<br></p><p>struct A {}<br>public extension A.foo {<br>func someMethod() { … } // a.foo.someMethod()<br>}<br>private extension A.foo.bar {<br>func someHiddenMethod() { … } // a.foo.bar.someHiddenMethod() <br>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/34224d99/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
