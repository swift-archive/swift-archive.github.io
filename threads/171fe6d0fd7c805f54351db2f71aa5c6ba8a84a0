<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 10:00:00am</p></header><div class="content"><p>on Thu Feb 11 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; To do a complete evaluation also need to think about<br>&gt;&gt; what applying the guidelines will do to your own code.<br>&gt;<br>&gt; You’re right! I extracted the list of method definitions from my app and looked through it.<br>&gt;<br>&gt; The overwhelming majority of my methods either take no arguments, or<br>&gt; start with a verb and make a phrase where the first parameter doesn’t<br>&gt; require a label (rule B1).<br>&gt;<br>&gt; Some methods I noticed (I don’t know if this is useful for you, but if<br>&gt; it is then here you go):<br>&gt;<br>&gt; 	private func setHandoffState(hash hash: String, fallbackURL: String, title: String? = nil, searchable: Bool) {<br>&gt;<br>&gt; This seems OK to me, but I’m not entirely sure if the guidelines<br>&gt; suggest I _should_ put a preposition there, i.e.<br>&gt;<br>&gt; 	setHandoffStateFor(hash: a, fallbackURL: b, …)<br>&gt;<br>&gt; I don’t think I should — I don’t see how “for” adds to clarity here,<br></p><p>Me neither, but it&#39;s hard to tell what this method is supposed to mean.<br>Maybe you could explain (or show a beautifully crafted doc comment<br>(BCDC) per<br>&lt;https://swift.org/documentation/api-design-guidelines/#write-doc-comment&gt;<br>;-)<br></p><p>&gt; but I want to make sure if I interpret the proposed guidelines right.<br>&gt;<br>&gt; 	func actionForCommand(command: UIKeyCommand) -&gt; String? {<br>&gt;<br>&gt; This should become “actionFor(command: c)” — which isn’t an obvious<br></p><p>That looks like a call, in which case the API above doesn&#39;t allow an<br>argument label.  (I think this kind of confusion is probably the<br>strongest reason for changing the default---I see it come up over and<br>over).<br></p><p>&gt; win, but I certainly don’t mind it.<br></p><p>according to where we&#39;re currently headed (prepositions inside the<br>parens), it would be:<br></p><p>    func action(for command: UIKeyCommand) -&gt; String? {<br></p><p>&gt; 	private func createAttribute(tag: SecItemAttr, _ data: NSString?) -&gt; SecKeychainAttribute? {<br>&gt;<br>&gt; Forgive my barbaric removal of external labels. <br></p><p>Nit: “argument labels,” please. <br></p><p>&gt; It should be `createAttribute(tag: t, data: d)`. <br></p><p>Again that looks like a call, so for the above declaration it would be<br></p><p>      createAttribute(t, d)<br></p><p>&gt; Alternatively, it could be `attributeFor(tag: t, data: d)` — I could<br>&gt; go either way.<br></p><p>Why “for?” Can you explain the semantics of this method (or show a BCDC)?<br></p><p>&gt; (adding to my thoughts on the later proposal of moving preposition<br>&gt; inside parens, the symmetry in param labels would likely be broken<br>&gt; here, because it doesn’t seem necessary to add “for”/“with” when I go<br>&gt; with “createAttribute”, but for the noun-only version it would have to<br>&gt; be “attribute(forTag: t, data: d)”.)<br>&gt;<br>&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;<br>&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and<br>&gt; `attachmentFor(fileURL:)`. <br></p><p>again, the latest draft puts prepositions inside the parens.  But<br>without the BCDC it&#39;s pretty hard to tell whether these are good names.<br></p><p>&gt; This seems like a win, since related methods for different data types<br>&gt; are grouped more tightly together. (I could also — like you suggested<br>&gt; about not optimizing for method families — make an enum, but it would<br>&gt; be overkill since it’s not API for public consumption. I should mark<br>&gt; those as private.)<br></p><p>I&#39;m not trying to say “method families are bad.”  I&#39;m just saying I<br>don&#39;t want to build the guidelines around them if possible.<br></p><p>&gt; 	private func messageCell(label label: String) -&gt; MessageCell {<br>&gt; 	private func cellForTask(task: Task, enabled: Bool = true) -&gt; TaskCell {<br>&gt;<br>&gt; Hm, those are inconsistent. I could go with `cellFor(message:)` and<br></p><p>don&#39;t you mean cellFor(label:) ?<br></p><p>&gt; <br>&gt; `cellFor(task:)`, which would be consistent with the guidelines. OTOH,<br>&gt; since they return different types, I liked that they had different<br>&gt; names… `taskCellFor(task:)` is redundant. Perhaps `taskCellFor(_:)`<br>&gt; and `messageCellFor(_:)`.<br>&gt;<br>&gt; 	func generate(fill: Double, text: String) -&gt; CLKComplicationTemplate {<br>&gt;<br>&gt; `templateFor(fill:, text:)`<br>&gt;<br>&gt; 	func update(from old: TaskCommentRowModel?, to new: TaskCommentRowModel) {<br>&gt;<br>&gt; That’s the, IMO rare, circumstance where the preposition *does* make sense to go inside the parens.<br>&gt;<br>&gt; * * *<br>&gt;<br>&gt; I mentioned this in some other post before, but I also found a bunch<br>&gt; of methods where the first parameter should be labeled, but isn’t,<br>&gt; because without an easy shortcut like the old #param, I was just too<br>&gt; lazy to do The Right Thing.<br>&gt;<br>&gt; PS. If someone wanted to do the same thing and review methods in their<br>&gt; project, here’s the quick&amp;dirty Ruby script for this:<br>&gt; https://gist.github.com/radex/b425c73afde84d88e4ca<br>&gt; &lt;https://gist.github.com/radex/b425c73afde84d88e4ca&gt;<br>&gt;<br>&gt; HTH,<br>&gt; — Radek<br>&gt;<br>&gt;&gt; On 08 Feb 2016, at 21:55, Dave Abrahams via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Mon Feb 08 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Dave,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; First of all, thank you for enduring our nitpicks and complaints and<br>&gt;&gt;&gt; continuing to explore the subject :) I think we’re all better off for<br>&gt;&gt;&gt; it, and getting closer to the solution with each iteration.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You asked:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;&gt;  all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;&gt;  which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And I think, by this standard, the guidelines you proposed seem to be<br>&gt;&gt;&gt; a success. Looking through Doug’s diffs, I see a lot of method names<br>&gt;&gt;&gt; that I don’t *love*, but I couldn’t find something I would hate.<br>&gt;&gt; <br>&gt;&gt; That&#39;s great news!  Keep in mind, though, that Doug&#39;s results are just<br>&gt;&gt; the result of trying to approximate application of the guidelines by<br>&gt;&gt; using heuristics.  To do a complete evaluation also need to think about<br>&gt;&gt; what applying the guidelines will do to your own code.<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 11, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt;&gt; 	private func setHandoffState(hash hash: String, fallbackURL: String, title: String? = nil, searchable: Bool) {<br>&gt;&gt; <br>&gt;&gt; This seems OK to me, but I’m not entirely sure if the guidelines<br>&gt;&gt; suggest I _should_ put a preposition there, i.e.<br>&gt;&gt; <br>&gt;&gt; 	setHandoffStateFor(hash: a, fallbackURL: b, …)<br>&gt;&gt; <br>&gt;&gt; I don’t think I should — I don’t see how “for” adds to clarity here,<br>&gt; <br>&gt; Me neither, but it&#39;s hard to tell what this method is supposed to mean.<br>&gt; Maybe you could explain (or show a beautifully crafted doc comment<br>&gt; (BCDC) per<br>&gt; &lt;https://swift.org/documentation/api-design-guidelines/#write-doc-comment &lt;https://swift.org/documentation/api-design-guidelines/#write-doc-comment&gt;&gt;<br>&gt; ;-)<br></p><p>Ahh, but I’m missing BCDCs in many of these places ;)<br></p><p>This is a helper that essentially makes a NSUserActivity from passed parameters and calls `becomeCurrent` on it. (Pretty much changes application-global state.) (Not the most elegant solution, I know.)<br></p><p>&gt; <br>&gt;&gt; but I want to make sure if I interpret the proposed guidelines right.<br>&gt;&gt; <br>&gt;&gt; 	func actionForCommand(command: UIKeyCommand) -&gt; String? {<br>&gt;&gt; <br>&gt;&gt; This should become “actionFor(command: c)” — which isn’t an obvious<br>&gt; <br>&gt; That looks like a call, in which case the API above doesn&#39;t allow an<br>&gt; argument label.<br></p><p>I’m sorry — I got confused — what do you mean here?<br></p><p>&gt;  (I think this kind of confusion is probably the<br>&gt; strongest reason for changing the default---I see it come up over and<br>&gt; over).<br>&gt; <br>&gt;&gt; win, but I certainly don’t mind it.<br>&gt; <br>&gt; according to where we&#39;re currently headed (prepositions inside the<br>&gt; parens), it would be:<br>&gt; <br>&gt;    func action(for command: UIKeyCommand) -&gt; String? {<br>&gt; <br>&gt;&gt; 	private func createAttribute(tag: SecItemAttr, _ data: NSString?) -&gt; SecKeychainAttribute? {<br>&gt;&gt; <br>&gt;&gt; Forgive my barbaric removal of external labels. <br>&gt; <br>&gt; Nit: “argument labels,” please. <br></p><p>Noted.<br></p><p>&gt; <br>&gt;&gt; It should be `createAttribute(tag: t, data: d)`. <br>&gt; <br>&gt; Again that looks like a call, so for the above declaration it would be<br>&gt; <br>&gt;      createAttribute(t, d)<br>&gt; <br>&gt;&gt; Alternatively, it could be `attributeFor(tag: t, data: d)` — I could<br>&gt;&gt; go either way.<br>&gt; <br>&gt; Why “for?” Can you explain the semantics of this method (or show a BCDC)?<br></p><p>This is a initializer-like helper method that instantiates a SecKeychainAttribute from passed parameters.<br></p><p>&gt; <br>&gt;&gt; (adding to my thoughts on the later proposal of moving preposition<br>&gt;&gt; inside parens, the symmetry in param labels would likely be broken<br>&gt;&gt; here, because it doesn’t seem necessary to add “for”/“with” when I go<br>&gt;&gt; with “createAttribute”, but for the noun-only version it would have to<br>&gt;&gt; be “attribute(forTag: t, data: d)”.)<br>&gt;&gt; <br>&gt;&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt;&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt;&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;&gt; <br>&gt;&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and<br>&gt;&gt; `attachmentFor(fileURL:)`. <br>&gt; <br>&gt; again, the latest draft puts prepositions inside the parens.<br></p><p>Q: For the previous example you suggested the latest draft would be `action(for:)`. Given these methods take one of three different parameter types, and the names mostly just repeat type information, should they all be `attachment(for:)`? Or `attachment(forImage:)` etc? The third method is trickier because it takes an NSURL, but there is an assumption this is a _file_ (i.e. device-local) URL.<br></p><p>&gt;  But<br>&gt; without the BCDC it&#39;s pretty hard to tell whether these are good names.<br></p><p>Also an initializer-like helper method that transforms passed parameters into an Attachment.<br></p><p>&gt; <br>&gt;&gt; This seems like a win, since related methods for different data types<br>&gt;&gt; are grouped more tightly together. (I could also — like you suggested<br>&gt;&gt; about not optimizing for method families — make an enum, but it would<br>&gt;&gt; be overkill since it’s not API for public consumption. I should mark<br>&gt;&gt; those as private.)<br>&gt; <br>&gt; I&#39;m not trying to say “method families are bad.”  I&#39;m just saying I<br>&gt; don&#39;t want to build the guidelines around them if possible.<br>&gt; <br>&gt;&gt; 	private func messageCell(label label: String) -&gt; MessageCell {<br>&gt;&gt; 	private func cellForTask(task: Task, enabled: Bool = true) -&gt; TaskCell {<br>&gt;&gt; <br>&gt;&gt; Hm, those are inconsistent. I could go with `cellFor(message:)` and<br>&gt; <br>&gt; don&#39;t you mean cellFor(label:) ?<br>&gt; <br>&gt;&gt; <br>&gt;&gt; `cellFor(task:)`, which would be consistent with the guidelines. OTOH,<br>&gt;&gt; since they return different types, I liked that they had different<br>&gt;&gt; names… `taskCellFor(task:)` is redundant. Perhaps `taskCellFor(_:)`<br>&gt;&gt; and `messageCellFor(_:)`.<br>&gt;&gt; <br>&gt;&gt; 	func generate(fill: Double, text: String) -&gt; CLKComplicationTemplate {<br>&gt;&gt; <br>&gt;&gt; `templateFor(fill:, text:)`<br>&gt;&gt; <br>&gt;&gt; 	func update(from old: TaskCommentRowModel?, to new: TaskCommentRowModel) {<br>&gt;&gt; <br>&gt;&gt; That’s the, IMO rare, circumstance where the preposition *does* make sense to go inside the parens.<br>&gt;&gt; <br>&gt;&gt; * * *<br>&gt;&gt; <br>&gt;&gt; I mentioned this in some other post before, but I also found a bunch<br>&gt;&gt; of methods where the first parameter should be labeled, but isn’t,<br>&gt;&gt; because without an easy shortcut like the old #param, I was just too<br>&gt;&gt; lazy to do The Right Thing.<br>&gt;&gt; <br>&gt;&gt; PS. If someone wanted to do the same thing and review methods in their<br>&gt;&gt; project, here’s the quick&amp;dirty Ruby script for this:<br>&gt;&gt; https://gist.github.com/radex/b425c73afde84d88e4ca<br>&gt;&gt; &lt;https://gist.github.com/radex/b425c73afde84d88e4ca &lt;https://gist.github.com/radex/b425c73afde84d88e4ca&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; HTH,<br>&gt;&gt; — Radek<br>&gt;&gt; <br>&gt;&gt;&gt; On 08 Feb 2016, at 21:55, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Mon Feb 08 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dave,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; First of all, thank you for enduring our nitpicks and complaints and<br>&gt;&gt;&gt;&gt; continuing to explore the subject :) I think we’re all better off for<br>&gt;&gt;&gt;&gt; it, and getting closer to the solution with each iteration.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; You asked:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;&gt;&gt; all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;&gt;&gt; which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; And I think, by this standard, the guidelines you proposed seem to be<br>&gt;&gt;&gt;&gt; a success. Looking through Doug’s diffs, I see a lot of method names<br>&gt;&gt;&gt;&gt; that I don’t *love*, but I couldn’t find something I would hate.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That&#39;s great news!  Keep in mind, though, that Doug&#39;s results are just<br>&gt;&gt;&gt; the result of trying to approximate application of the guidelines by<br>&gt;&gt;&gt; using heuristics.  To do a complete evaluation also need to think about<br>&gt;&gt;&gt; what applying the guidelines will do to your own code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160211/11d89357/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 11, 2016 at 03:00:00pm</p></header><div class="content"><p>on Thu Feb 11 2016, Radosław Pietruszewski &lt;radexpl-AT-gmail.com&gt; wrote:<br></p><p>&gt;&gt;&gt; 	private func setHandoffState(hash hash: String, fallbackURL: String, title: String? = nil, searchable: Bool) {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems OK to me, but I’m not entirely sure if the guidelines<br>&gt;&gt;&gt; suggest I _should_ put a preposition there, i.e.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	setHandoffStateFor(hash: a, fallbackURL: b, …)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t think I should — I don’t see how “for” adds to clarity here,<br>&gt;&gt; <br>&gt;&gt; Me neither, but it&#39;s hard to tell what this method is supposed to mean.<br>&gt;&gt; Maybe you could explain (or show a beautifully crafted doc comment<br>&gt;&gt; (BCDC) per<br>&gt;&gt; &lt;https://swift.org/documentation/api-design-guidelines/#write-doc-comment<br>&gt;&gt; &lt;https://swift.org/documentation/api-design-guidelines/#write-doc-comment&gt;&gt;<br>&gt;&gt; ;-)<br>&gt;<br>&gt; Ahh, but I’m missing BCDCs in many of these places ;)<br>&gt;<br>&gt; This is a helper that essentially makes a NSUserActivity from passed<br>&gt; parameters and calls `becomeCurrent` on it. (Pretty much changes<br>&gt; application-global state.) (Not the most elegant solution, I know.)<br></p><p>I don&#39;t know whether it&#39;s elegant, but given how you described it, I<br>would probably call it something like:<br></p><p>   createCurrentActivity(hash: a, fallbackURL: b, …)<br>&gt;&gt; <br>&gt;&gt;&gt; but I want to make sure if I interpret the proposed guidelines right.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func actionForCommand(command: UIKeyCommand) -&gt; String? {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This should become “actionFor(command: c)” — which isn’t an obvious<br>&gt;&gt; <br>&gt;&gt; That looks like a call, in which case the API above doesn&#39;t allow an<br>&gt;&gt; argument label.<br>&gt;<br>&gt; I’m sorry — I got confused — what do you mean here?<br></p><p>Sorry, I didn&#39;t notice that you both transitioned from declaring<br>(actionForCommand(_)) to calling (actionFor(command:)) *and* changed the<br>API at the same time.<br></p><p>So, I would say the guidelines say the call should look like:<br></p><p>    b.action(for: c)<br></p><p>&gt;&gt;  (I think this kind of confusion is probably the<br>&gt;&gt; strongest reason for changing the default---I see it come up over and<br>&gt;&gt; over).<br>&gt;&gt; <br>&gt;&gt;&gt; win, but I certainly don’t mind it.<br>&gt;&gt; <br>&gt;&gt; according to where we&#39;re currently headed (prepositions inside the<br>&gt;&gt; parens), it would be:<br>&gt;&gt; <br>&gt;&gt;    func action(for command: UIKeyCommand) -&gt; String? {<br>&gt;&gt; <br>&gt;&gt;&gt; 	private func createAttribute(tag: SecItemAttr, _ data: NSString?) -&gt; SecKeychainAttribute? {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Forgive my barbaric removal of external labels. <br>&gt;&gt; <br>&gt;&gt; Nit: “argument labels,” please. <br>&gt;<br>&gt; Noted.<br>&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; It should be `createAttribute(tag: t, data: d)`. <br>&gt;&gt; <br>&gt;&gt; Again that looks like a call, so for the above declaration it would be<br>&gt;&gt; <br>&gt;&gt;      createAttribute(t, d)<br>&gt;&gt; <br>&gt;&gt;&gt; Alternatively, it could be `attributeFor(tag: t, data: d)` — I could<br>&gt;&gt;&gt; go either way.<br>&gt;&gt; <br>&gt;&gt; Why “for?” Can you explain the semantics of this method (or show a BCDC)?<br>&gt;<br>&gt; This is a initializer-like helper method that instantiates a<br>&gt; SecKeychainAttribute from passed parameters.<br></p><p>If it&#39;s a factory, I think guidelines prescribe the call should look like:<br></p><p>   makeAttribute(tag: t, data: d)<br></p><p>&gt;&gt;&gt; (adding to my thoughts on the later proposal of moving preposition<br>&gt;&gt;&gt; inside parens, the symmetry in param labels would likely be broken<br>&gt;&gt;&gt; here, because it doesn’t seem necessary to add “for”/“with” when I go<br>&gt;&gt;&gt; with “createAttribute”, but for the noun-only version it would have to<br>&gt;&gt;&gt; be “attribute(forTag: t, data: d)”.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func attachmentForImage(image: UIImage) throws -&gt; Attachment {<br>&gt;&gt;&gt; 	func attachmentForData(data: NSData) -&gt; Attachment {<br>&gt;&gt;&gt; 	func attachmentForFileURL(url: NSURL) throws -&gt; Attachment {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This should be `attachmentFor(image:)`, `attachmentFor(data:)`, and<br>&gt;&gt;&gt; `attachmentFor(fileURL:)`. <br>&gt;&gt; <br>&gt;&gt; again, the latest draft puts prepositions inside the parens.<br>&gt;<br>&gt; Q: For the previous example you suggested the latest draft would be<br>&gt; `action(for:)`. Given these methods take one of three different<br>&gt; parameter types, and the names mostly just repeat type information,<br>&gt; should they all be `attachment(for:)`? Or `attachment(forImage:)` etc?<br>&gt; The third method is trickier because it takes an NSURL, but there is<br>&gt; an assumption this is a _file_ (i.e. device-local) URL.<br>&gt;<br>&gt;&gt;  But without the BCDC it&#39;s pretty hard to tell whether these are good<br>&gt;&gt; names.<br>&gt;<br>&gt; Also an initializer-like helper method that transforms passed<br>&gt; parameters into an Attachment.<br></p><p>Oh, definitely “makeAttachment(x)” at the call site, then, if you can&#39;t<br>just do this with an Attachment initializer!<br></p><p>&gt;&gt;&gt; This seems like a win, since related methods for different data types<br>&gt;&gt;&gt; are grouped more tightly together. (I could also — like you suggested<br>&gt;&gt;&gt; about not optimizing for method families — make an enum, but it would<br>&gt;&gt;&gt; be overkill since it’s not API for public consumption. I should mark<br>&gt;&gt;&gt; those as private.)<br>&gt;&gt; <br>&gt;&gt; I&#39;m not trying to say “method families are bad.”  I&#39;m just saying I<br>&gt;&gt; don&#39;t want to build the guidelines around them if possible.<br>&gt;&gt; <br>&gt;&gt;&gt; 	private func messageCell(label label: String) -&gt; MessageCell {<br>&gt;&gt;&gt; 	private func cellForTask(task: Task, enabled: Bool = true) -&gt; TaskCell {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hm, those are inconsistent. I could go with `cellFor(message:)` and<br>&gt;&gt; <br>&gt;&gt; don&#39;t you mean cellFor(label:) ?<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `cellFor(task:)`, which would be consistent with the guidelines. OTOH,<br>&gt;&gt;&gt; since they return different types, I liked that they had different<br>&gt;&gt;&gt; names… `taskCellFor(task:)` is redundant. Perhaps `taskCellFor(_:)`<br>&gt;&gt;&gt; and `messageCellFor(_:)`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func generate(fill: Double, text: String) -&gt; CLKComplicationTemplate {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; `templateFor(fill:, text:)`<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	func update(from old: TaskCommentRowModel?, to new: TaskCommentRowModel) {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s the, IMO rare, circumstance where the preposition *does* make sense to go inside the parens.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * * *<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I mentioned this in some other post before, but I also found a bunch<br>&gt;&gt;&gt; of methods where the first parameter should be labeled, but isn’t,<br>&gt;&gt;&gt; because without an easy shortcut like the old #param, I was just too<br>&gt;&gt;&gt; lazy to do The Right Thing.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; PS. If someone wanted to do the same thing and review methods in their<br>&gt;&gt;&gt; project, here’s the quick&amp;dirty Ruby script for this:<br>&gt;&gt;&gt; https://gist.github.com/radex/b425c73afde84d88e4ca<br>&gt;&gt;&gt; &lt;https://gist.github.com/radex/b425c73afde84d88e4ca &lt;https://gist.github.com/radex/b425c73afde84d88e4ca&gt;&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; HTH,<br>&gt;&gt;&gt; — Radek<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 08 Feb 2016, at 21:55, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; on Mon Feb 08 2016, Radosław Pietruszewski &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dave,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; First of all, thank you for enduring our nitpicks and complaints and<br>&gt;&gt;&gt;&gt;&gt; continuing to explore the subject :) I think we’re all better off for<br>&gt;&gt;&gt;&gt;&gt; it, and getting closer to the solution with each iteration.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; You asked:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. I&#39;m not expecting these guidelines to make everybody optimally happy,<br>&gt;&gt;&gt;&gt;&gt;&gt; all the time, but they shouldn&#39;t be harmful.  Are there any cases for<br>&gt;&gt;&gt;&gt;&gt;&gt; which they produce results you couldn&#39;t live with?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; And I think, by this standard, the guidelines you proposed seem to be<br>&gt;&gt;&gt;&gt;&gt; a success. Looking through Doug’s diffs, I see a lot of method names<br>&gt;&gt;&gt;&gt;&gt; that I don’t *love*, but I couldn’t find something I would hate.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; That&#39;s great news!  Keep in mind, though, that Doug&#39;s results are just<br>&gt;&gt;&gt;&gt; the result of trying to approximate application of the guidelines by<br>&gt;&gt;&gt;&gt; using heuristics.  To do a complete evaluation also need to think about<br>&gt;&gt;&gt;&gt; what applying the guidelines will do to your own code.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February 13, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;&gt;&gt;&gt; but I want to make sure if I interpret the proposed guidelines right.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	func actionForCommand(command: UIKeyCommand) -&gt; String? {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This should become “actionFor(command: c)” — which isn’t an obvious<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That looks like a call, in which case the API above doesn&#39;t allow an<br>&gt;&gt;&gt; argument label.<br>&gt;&gt; <br>&gt;&gt; I’m sorry — I got confused — what do you mean here?<br>&gt; <br>&gt; Sorry, I didn&#39;t notice that you both transitioned from declaring<br>&gt; (actionForCommand(_)) to calling (actionFor(command:)) *and* changed the<br>&gt; API at the same time.<br>&gt; <br>&gt; So, I would say the guidelines say the call should look like:<br>&gt; <br>&gt;    b.action(for: c)<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It should be `createAttribute(tag: t, data: d)`. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Again that looks like a call, so for the above declaration it would be<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     createAttribute(t, d)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Alternatively, it could be `attributeFor(tag: t, data: d)` — I could<br>&gt;&gt;&gt;&gt; go either way.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Why “for?” Can you explain the semantics of this method (or show a BCDC)?<br>&gt;&gt; <br>&gt;&gt; This is a initializer-like helper method that instantiates a<br>&gt;&gt; SecKeychainAttribute from passed parameters.<br>&gt; <br>&gt; If it&#39;s a factory, I think guidelines prescribe the call should look like:<br>&gt; <br>&gt;   makeAttribute(tag: t, data: d)<br></p><p>So that’s interesting, because there’s a difference in convention between a factory/initializer-like function:<br></p><p>	makeFoo(this:, that:)<br></p><p>and a getter/finder-like function:<br></p><p>	foo(withThis:, that:)<br></p><p>I think that (in particular the difference in the treatment of argument labels) is the part that makes me most uncomfortable about the latest draft. Perhaps it isn’t such a big deal, since you usually don’t see the two next to each other, and as was noted, most finder-like functions only come with a single parameter, while initializers and factory methods very commonly have many parameters...<br></p><p>Best,<br>— Radek<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160213/87c76129/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
