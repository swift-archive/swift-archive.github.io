<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b852c5986959201d1f8eca105491072?s=50"></div><header><strong>Proposal: Local identifier for the newValue in didSet and willSet blocks</strong> from <string>Eric Miller</string> &lt;hi at simple.gy&gt;<p>August 26, 2016 at 12:00:00pm</p></header><div class="content"><p>Just an idea.<br></p><p>I use didSet a lot, and it&#39;d be nice to have a generic way to access the<br>newValue.<br></p><p>For UI modes:<br></p><p>var anonymousUserMode = false { didSet {<br>  if oldValue == anonymousUserMode { return }<br>  renderLoginOverlay(show: anonymousUserMode)<br>}}<br></p><p>For animated display strings:<br></p><p>var errorMessage: String? = nil { didSet {<br>  if oldValue == errorMessage { return }<br>  errorLabel.text = errorMessage<br>  // Do some sliding or hiding based on the new value<br>}}<br></p><p>Has the idea of using $0 / $1 or oldValue / newValue been considered?<br></p><p>I&#39;d like to be able to write this as:<br></p><p>var anonymousUserMode = false { didSet {<br>  if oldValue == newValue { return }<br>  renderLoginOverlay(show: newValue)<br>}}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160826/5b0487ce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Proposal: Local identifier for the newValue in didSet and willSet blocks</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>August 27, 2016 at 08:00:00am</p></header><div class="content"><p>The newValue is already set in the property, so you just use that property. I don&#39;t see much benefit in having &quot;newValue&quot; instead of just accessing it:<br></p><p>var anonymousUserMode = false {<br>	didSet {<br>		if oldValue == self.anonymousUserMode {<br>			return <br>		}<br>		<br>		renderLoginOverlay(show: newValue)<br>	}<br>}<br></p><p>And the same goes for willSet, where you have newValue, but not &quot;oldValue&quot;, since oldValue is still in the stored property...<br></p><p>&gt; On Aug 26, 2016, at 8:20 PM, Eric Miller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Just an idea.<br>&gt; <br>&gt; I use didSet a lot, and it&#39;d be nice to have a generic way to access the newValue.<br>&gt; <br>&gt; For UI modes:<br>&gt; <br>&gt; var anonymousUserMode = false { didSet {<br>&gt;   if oldValue == anonymousUserMode { return }<br>&gt;   renderLoginOverlay(show: anonymousUserMode)<br>&gt; }}<br>&gt; <br>&gt; For animated display strings:<br>&gt; <br>&gt; var errorMessage: String? = nil { didSet {<br>&gt;   if oldValue == errorMessage { return }<br>&gt;   errorLabel.text = errorMessage<br>&gt;   // Do some sliding or hiding based on the new value<br>&gt; }}<br>&gt; <br>&gt; Has the idea of using $0 / $1 or oldValue / newValue been considered?<br>&gt; <br>&gt; I&#39;d like to be able to write this as:<br>&gt; <br>&gt; var anonymousUserMode = false { didSet {<br>&gt;   if oldValue == newValue { return }<br>&gt;   renderLoginOverlay(show: newValue)<br>&gt; }}<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>Proposal: Local identifier for the newValue in didSet and willSet blocks</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>August 27, 2016 at 11:00:00am</p></header><div class="content"><p>I believe this is just a ‘nice to have’ shortcut. I wouldn’t mind to have this:<br></p><p>willSet(newValue, oldValue)<br>didSet(newValue, oldValue)<br>$0 for newValue and $1 for oldValue<br>It’s nothing for phase one, so we’ll have to defer this until next year where we’ll start talking about sugar/additional features for Swift 4.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 27. August 2016 um 08:47:38, Charlie Monroe via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>The newValue is already set in the property, so you just use that property. I don&#39;t see much benefit in having &quot;newValue&quot; instead of just accessing it:<br></p><p>var anonymousUserMode = false {<br>didSet {<br>if oldValue == self.anonymousUserMode {<br>return  <br>}<br></p><p>renderLoginOverlay(show: newValue)<br>}<br>}<br></p><p>And the same goes for willSet, where you have newValue, but not &quot;oldValue&quot;, since oldValue is still in the stored property...<br></p><p>&gt; On Aug 26, 2016, at 8:20 PM, Eric Miller via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;  <br>&gt; Just an idea.<br>&gt;  <br>&gt; I use didSet a lot, and it&#39;d be nice to have a generic way to access the newValue.<br>&gt;  <br>&gt; For UI modes:<br>&gt;  <br>&gt; var anonymousUserMode = false { didSet {<br>&gt; if oldValue == anonymousUserMode { return }<br>&gt; renderLoginOverlay(show: anonymousUserMode)<br>&gt; }}<br>&gt;  <br>&gt; For animated display strings:<br>&gt;  <br>&gt; var errorMessage: String? = nil { didSet {<br>&gt; if oldValue == errorMessage { return }<br>&gt; errorLabel.text = errorMessage<br>&gt; // Do some sliding or hiding based on the new value<br>&gt; }}<br>&gt;  <br>&gt; Has the idea of using $0 / $1 or oldValue / newValue been considered?<br>&gt;  <br>&gt; I&#39;d like to be able to write this as:<br>&gt;  <br>&gt; var anonymousUserMode = false { didSet {<br>&gt; if oldValue == newValue { return }<br>&gt; renderLoginOverlay(show: newValue)<br>&gt; }}<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160827/77494234/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1b852c5986959201d1f8eca105491072?s=50"></div><header><strong>Proposal: Local identifier for the newValue in didSet and willSet blocks</strong> from <string>Eric Miller</string> &lt;hi at simple.gy&gt;<p>August 27, 2016 at 03:00:00pm</p></header><div class="content"><p>The benefit I see is that the logic internal to didSet blocks is often<br>pretty generic in terms of how it deals with old VS new.<br></p><p>Eg:<br>* always bail if they match<br>* always render the new value<br>* always animate from the old value to the new value<br></p><p>The internal logic may repeat these names a lot, and it is unconcerned with<br>the often lengthy or descriptive name that may be exposed to the outside<br>world.<br></p><p>Often I rename the property, and have to rename 3 or 4 places inside the<br>didSet which should in my view be unnecessary.<br></p><p>Conceptually this is similar to the benefit of having different internal<br>and external parameter names for functions. In this case we have a great<br>default internal parameter name available.<br></p><p>I&#39;m not sure whether some good examples or some other form of reasoning<br>best advances my point.<br></p><p>I&#39;ll try a sort of philosophical approach though. Why not have not didSet<br>and willSet always both have newValue and oldValue, since keeping the API<br>the same removes something the developer has to think about. In this way we<br>actually simplify the language, since all change observing blocks have the<br>same preconfigured variables available.<br>On Sat, Aug 27, 2016 at 12:47 AM Charlie Monroe &lt;charlie at charliemonroe.net&gt;<br>wrote:<br></p><p>&gt; The newValue is already set in the property, so you just use that<br>&gt; property. I don&#39;t see much benefit in having &quot;newValue&quot; instead of just<br>&gt; accessing it:<br>&gt;<br>&gt; var anonymousUserMode = false {<br>&gt;         didSet {<br>&gt;                 if oldValue == self.anonymousUserMode {<br>&gt;                         return<br>&gt;                 }<br>&gt;<br>&gt;                 renderLoginOverlay(show: newValue)<br>&gt;         }<br>&gt; }<br>&gt;<br>&gt; And the same goes for willSet, where you have newValue, but not<br>&gt; &quot;oldValue&quot;, since oldValue is still in the stored property...<br>&gt;<br>&gt; &gt; On Aug 26, 2016, at 8:20 PM, Eric Miller via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Just an idea.<br>&gt; &gt;<br>&gt; &gt; I use didSet a lot, and it&#39;d be nice to have a generic way to access the<br>&gt; newValue.<br>&gt; &gt;<br>&gt; &gt; For UI modes:<br>&gt; &gt;<br>&gt; &gt; var anonymousUserMode = false { didSet {<br>&gt; &gt;   if oldValue == anonymousUserMode { return }<br>&gt; &gt;   renderLoginOverlay(show: anonymousUserMode)<br>&gt; &gt; }}<br>&gt; &gt;<br>&gt; &gt; For animated display strings:<br>&gt; &gt;<br>&gt; &gt; var errorMessage: String? = nil { didSet {<br>&gt; &gt;   if oldValue == errorMessage { return }<br>&gt; &gt;   errorLabel.text = errorMessage<br>&gt; &gt;   // Do some sliding or hiding based on the new value<br>&gt; &gt; }}<br>&gt; &gt;<br>&gt; &gt; Has the idea of using $0 / $1 or oldValue / newValue been considered?<br>&gt; &gt;<br>&gt; &gt; I&#39;d like to be able to write this as:<br>&gt; &gt;<br>&gt; &gt; var anonymousUserMode = false { didSet {<br>&gt; &gt;   if oldValue == newValue { return }<br>&gt; &gt;   renderLoginOverlay(show: newValue)<br>&gt; &gt; }}<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160827/cfc7e868/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
