<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b470e0e8b1493968544fb4a9062f4aa3?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Louis D&#39;hauwe</string> &lt;louisdhauwe at silverfox.be&gt;<p>October 17, 2016 at 10:00:00pm</p></header><div class="content"><p>Regarding the removeLast() function on Collection:<br></p><p>The current implementation &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L228&gt; is:<br>@discardableResult<br>public mutating func removeLast() -&gt; Iterator.Element {<br> 	let element = last!<br>	self = self[startIndex..&lt;index(before: endIndex)]<br>	return element<br>}<br></p><p>This makes it so that if you call removeLast() on an empty collection you get a fatal error.<br>(&quot;fatal error: can&#39;t remove last element from an empty collection&quot;)<br></p><p>The documentation for removeLast() &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L220&gt; even has this noted:<br>&quot;The collection must not be empty.&quot;.<br></p><p>Surely you could just remove the explicit unwrapping of &#39;last&#39; and add a guard statement? <br></p><p>As such:<br>@discardableResult<br>public mutating func removeLast() -&gt; Iterator.Element? {<br> 	guard let element = last else {<br>		return nil<br>	}<br>	self = self[startIndex..&lt;index(before: endIndex)]<br>	return element<br>}<br></p><p>It sure seems more &quot;Swifty&quot; to alert at compile time that removing the last item of a collection might fail, and make it return nil as a result.<br></p><p>– Louis D&#39;hauwe<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/fdaa2a65/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>October 17, 2016 at 01:00:00pm</p></header><div class="content"><p>You can use popLast, that does exactly that: https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213&gt;<br></p><p>Max<br></p><p>&gt; On Oct 17, 2016, at 1:14 PM, Louis D&#39;hauwe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Regarding the removeLast() function on Collection:<br>&gt; <br>&gt; The current implementation &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L228&gt; is:<br>&gt; @discardableResult<br>&gt; public mutating func removeLast() -&gt; Iterator.Element {<br>&gt;  	let element = last!<br>&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt; 	return element<br>&gt; }<br>&gt; <br>&gt; This makes it so that if you call removeLast() on an empty collection you get a fatal error.<br>&gt; (&quot;fatal error: can&#39;t remove last element from an empty collection&quot;)<br>&gt; <br>&gt; The documentation for removeLast() &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L220&gt; even has this noted:<br>&gt; &quot;The collection must not be empty.&quot;.<br>&gt; <br>&gt; Surely you could just remove the explicit unwrapping of &#39;last&#39; and add a guard statement? <br>&gt; <br>&gt; As such:<br>&gt; @discardableResult<br>&gt; public mutating func removeLast() -&gt; Iterator.Element? {<br>&gt;  	guard let element = last else {<br>&gt; 		return nil<br>&gt; 	}<br>&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt; 	return element<br>&gt; }<br>&gt; <br>&gt; It sure seems more &quot;Swifty&quot; to alert at compile time that removing the last item of a collection might fail, and make it return nil as a result.<br>&gt; <br>&gt; – Louis D&#39;hauwe<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/4713ea7f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b470e0e8b1493968544fb4a9062f4aa3?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Louis D&#39;hauwe</string> &lt;louisdhauwe at silverfox.be&gt;<p>October 17, 2016 at 11:00:00pm</p></header><div class="content"><p>I see, the really issue I&#39;m trying to bring up is that removeLast() can easily fail (and result in a fatal error).<br>And unless you read the documentation, that&#39;s not very obvious.<br></p><p>Maybe another approach would be to make removeLast() throw an exception if the collection is empty?<br>That way you can use &quot;try&quot; to safely remove the last item of a collection.<br></p><p>The reasoning behind this is that right now, to safely use removeLast(), you pretty much have to do something like this:<br>if !collection.isEmpty {<br>	collection.removeLast()<br>}<br></p><p>Having this method throw would allow to change the above to:<br>try collection.removeLast()<br></p><p>– Louis D&#39;hauwe<br></p><p>&gt; On 17 Oct 2016, at 22:52, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt; <br>&gt; You can use popLast, that does exactly that: https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213&gt;<br>&gt; <br>&gt; Max<br>&gt; <br>&gt;&gt; On Oct 17, 2016, at 1:14 PM, Louis D&#39;hauwe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Regarding the removeLast() function on Collection:<br>&gt;&gt; <br>&gt;&gt; The current implementation &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L228&gt; is:<br>&gt;&gt; @discardableResult<br>&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element {<br>&gt;&gt;  	let element = last!<br>&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt; 	return element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This makes it so that if you call removeLast() on an empty collection you get a fatal error.<br>&gt;&gt; (&quot;fatal error: can&#39;t remove last element from an empty collection&quot;)<br>&gt;&gt; <br>&gt;&gt; The documentation for removeLast() &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L220&gt; even has this noted:<br>&gt;&gt; &quot;The collection must not be empty.&quot;.<br>&gt;&gt; <br>&gt;&gt; Surely you could just remove the explicit unwrapping of &#39;last&#39; and add a guard statement? <br>&gt;&gt; <br>&gt;&gt; As such:<br>&gt;&gt; @discardableResult<br>&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element? {<br>&gt;&gt;  	guard let element = last else {<br>&gt;&gt; 		return nil<br>&gt;&gt; 	}<br>&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt; 	return element<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; It sure seems more &quot;Swifty&quot; to alert at compile time that removing the last item of a collection might fail, and make it return nil as a result.<br>&gt;&gt; <br>&gt;&gt; – Louis D&#39;hauwe<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/7db7577c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>October 17, 2016 at 02:00:00pm</p></header><div class="content"><p>Hi Louis,<br></p><p>I believe, sometimes there are situations where you know for sure that your collection is not empty. Maybe you are already in the context where the check has been performed. In these cases there is no reason you’d have to pay the price of an emptiness check once again.<br></p><p>Perhaps, it should be documented better, as in “popLast should generally be preferred since it is safer to use. You should only opt for the removeLast if you are certain the collection is not empty and performance is an issue”.<br></p><p>If you agree, mind sending us a pull request with such a documentation change?<br></p><p>Thanks!<br>Max<br></p><p>&gt; On Oct 17, 2016, at 2:19 PM, Louis D&#39;hauwe &lt;louisdhauwe at silverfox.be&gt; wrote:<br>&gt; <br>&gt; I see, the really issue I&#39;m trying to bring up is that removeLast() can easily fail (and result in a fatal error).<br>&gt; And unless you read the documentation, that&#39;s not very obvious.<br>&gt; <br>&gt; Maybe another approach would be to make removeLast() throw an exception if the collection is empty?<br>&gt; That way you can use &quot;try&quot; to safely remove the last item of a collection.<br>&gt; <br>&gt; The reasoning behind this is that right now, to safely use removeLast(), you pretty much have to do something like this:<br>&gt; if !collection.isEmpty {<br>&gt; 	collection.removeLast()<br>&gt; }<br>&gt; <br>&gt; Having this method throw would allow to change the above to:<br>&gt; try collection.removeLast()<br>&gt; <br>&gt; – Louis D&#39;hauwe<br>&gt; <br>&gt;&gt; On 17 Oct 2016, at 22:52, Max Moiseev &lt;moiseev at apple.com &lt;mailto:moiseev at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; You can use popLast, that does exactly that: https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213&gt;<br>&gt;&gt; <br>&gt;&gt; Max<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 17, 2016, at 1:14 PM, Louis D&#39;hauwe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Regarding the removeLast() function on Collection:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The current implementation &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L228&gt; is:<br>&gt;&gt;&gt; @discardableResult<br>&gt;&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element {<br>&gt;&gt;&gt;  	let element = last!<br>&gt;&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt;&gt; 	return element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This makes it so that if you call removeLast() on an empty collection you get a fatal error.<br>&gt;&gt;&gt; (&quot;fatal error: can&#39;t remove last element from an empty collection&quot;)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The documentation for removeLast() &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L220&gt; even has this noted:<br>&gt;&gt;&gt; &quot;The collection must not be empty.&quot;.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Surely you could just remove the explicit unwrapping of &#39;last&#39; and add a guard statement? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As such:<br>&gt;&gt;&gt; @discardableResult<br>&gt;&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element? {<br>&gt;&gt;&gt;  	guard let element = last else {<br>&gt;&gt;&gt; 		return nil<br>&gt;&gt;&gt; 	}<br>&gt;&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt;&gt; 	return element<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It sure seems more &quot;Swifty&quot; to alert at compile time that removing the last item of a collection might fail, and make it return nil as a result.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; – Louis D&#39;hauwe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/6a1aa5f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b470e0e8b1493968544fb4a9062f4aa3?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Louis D&#39;hauwe</string> &lt;louisdhauwe at silverfox.be&gt;<p>October 17, 2016 at 11:00:00pm</p></header><div class="content"><p>I understand, pull request has been made. <br>https://github.com/apple/swift/pull/5333 &lt;https://github.com/apple/swift/pull/5333&gt;<br></p><p>&gt; On 17 Oct 2016, at 23:20, Max Moiseev &lt;moiseev at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Louis,<br>&gt; <br>&gt; I believe, sometimes there are situations where you know for sure that your collection is not empty. Maybe you are already in the context where the check has been performed. In these cases there is no reason you’d have to pay the price of an emptiness check once again.<br>&gt; <br>&gt; Perhaps, it should be documented better, as in “popLast should generally be preferred since it is safer to use. You should only opt for the removeLast if you are certain the collection is not empty and performance is an issue”.<br>&gt; <br>&gt; If you agree, mind sending us a pull request with such a documentation change?<br>&gt; <br>&gt; Thanks!<br>&gt; Max<br>&gt; <br>&gt;&gt; On Oct 17, 2016, at 2:19 PM, Louis D&#39;hauwe &lt;louisdhauwe at silverfox.be &lt;mailto:louisdhauwe at silverfox.be&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I see, the really issue I&#39;m trying to bring up is that removeLast() can easily fail (and result in a fatal error).<br>&gt;&gt; And unless you read the documentation, that&#39;s not very obvious.<br>&gt;&gt; <br>&gt;&gt; Maybe another approach would be to make removeLast() throw an exception if the collection is empty?<br>&gt;&gt; That way you can use &quot;try&quot; to safely remove the last item of a collection.<br>&gt;&gt; <br>&gt;&gt; The reasoning behind this is that right now, to safely use removeLast(), you pretty much have to do something like this:<br>&gt;&gt; if !collection.isEmpty {<br>&gt;&gt; 	collection.removeLast()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Having this method throw would allow to change the above to:<br>&gt;&gt; try collection.removeLast()<br>&gt;&gt; <br>&gt;&gt; – Louis D&#39;hauwe<br>&gt;&gt; <br>&gt;&gt;&gt; On 17 Oct 2016, at 22:52, Max Moiseev &lt;moiseev at apple.com &lt;mailto:moiseev at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can use popLast, that does exactly that: https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213 &lt;https://github.com/apple/swift/blob/master/stdlib/public/core/BidirectionalCollection.swift#L213&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Max<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 17, 2016, at 1:14 PM, Louis D&#39;hauwe via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Regarding the removeLast() function on Collection:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The current implementation &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L228&gt; is:<br>&gt;&gt;&gt;&gt; @discardableResult<br>&gt;&gt;&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element {<br>&gt;&gt;&gt;&gt;  	let element = last!<br>&gt;&gt;&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt;&gt;&gt; 	return element<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This makes it so that if you call removeLast() on an empty collection you get a fatal error.<br>&gt;&gt;&gt;&gt; (&quot;fatal error: can&#39;t remove last element from an empty collection&quot;)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The documentation for removeLast() &lt;https://github.com/apple/swift/blob/c3b7709a7c4789f1ad7249d357f69509fb8be731/stdlib/public/core/BidirectionalCollection.swift#L220&gt; even has this noted:<br>&gt;&gt;&gt;&gt; &quot;The collection must not be empty.&quot;.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Surely you could just remove the explicit unwrapping of &#39;last&#39; and add a guard statement? <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As such:<br>&gt;&gt;&gt;&gt; @discardableResult<br>&gt;&gt;&gt;&gt; public mutating func removeLast() -&gt; Iterator.Element? {<br>&gt;&gt;&gt;&gt;  	guard let element = last else {<br>&gt;&gt;&gt;&gt; 		return nil<br>&gt;&gt;&gt;&gt; 	}<br>&gt;&gt;&gt;&gt; 	self = self[startIndex..&lt;index(before: endIndex)]<br>&gt;&gt;&gt;&gt; 	return element<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It sure seems more &quot;Swifty&quot; to alert at compile time that removing the last item of a collection might fail, and make it return nil as a result.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; – Louis D&#39;hauwe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/c82cf866/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0f5f87c6d6b2f41c3ac647171eb30e34?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Jean-Daniel</string> &lt;dev at xenonium.com&gt;<p>October 18, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; Le 17 oct. 2016 à 23:20, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hi Louis,<br>&gt; <br>&gt; I believe, sometimes there are situations where you know for sure that your collection is not empty. Maybe you are already in the context where the check has been performed. In these cases there is no reason you’d have to pay the price of an emptiness check once again.<br></p><p>You have to pay the price anyway, as the check has to be performed to decide if the software should abort.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c53218a6524f4d644b6a75a4441ea631?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Max Moiseev</string> &lt;moiseev at apple.com&gt;<p>October 18, 2016 at 03:00:00pm</p></header><div class="content"><p>Yes, if the author of the collection you’re using performs the check in `removeLast`, but they don’t have to.<br></p><p>&gt; On Oct 18, 2016, at 1:28 PM, Jean-Daniel &lt;dev at xenonium.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; Le 17 oct. 2016 à 23:20, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt; Hi Louis,<br>&gt;&gt; <br>&gt;&gt; I believe, sometimes there are situations where you know for sure that your collection is not empty. Maybe you are already in the context where the check has been performed. In these cases there is no reason you’d have to pay the price of an emptiness check once again.<br>&gt; <br>&gt; You have to pay the price anyway, as the check has to be performed to decide if the software should abort.<br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6b81089e81d6bb1e14b5adb746725de1?s=50"></div><header><strong>Why doesn&#39;t removeLast() on Collection return an optional?</strong> from <string>Alexis</string> &lt;abeingessner at apple.com&gt;<p>October 20, 2016 at 11:00:00am</p></header><div class="content"><p>I’m fairly confident the author of the collection has to make those checks for memory-safety, but in theory there’s wins in only doing the check once, and as early as possible. Smaller values to pass, and less checks. <br></p><p>This is definitely micro-micro-optimization, though. Unlikely to matter for most cases.<br></p><p>&gt; On Oct 18, 2016, at 6:00 PM, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yes, if the author of the collection you’re using performs the check in `removeLast`, but they don’t have to.<br>&gt; <br>&gt;&gt; On Oct 18, 2016, at 1:28 PM, Jean-Daniel &lt;dev at xenonium.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; Le 17 oct. 2016 à 23:20, Max Moiseev via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi Louis,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I believe, sometimes there are situations where you know for sure that your collection is not empty. Maybe you are already in the context where the check has been performed. In these cases there is no reason you’d have to pay the price of an emptiness check once again.<br>&gt;&gt; <br>&gt;&gt; You have to pay the price anyway, as the check has to be performed to decide if the software should abort.<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161020/880e1aae/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
