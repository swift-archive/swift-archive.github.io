<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>January 14, 2016 at 09:00:00am</p></header><div class="content"><p>Hi All,<br></p><p>Orlando (included in the to line) and I have been looking at using the gold linker in the swift toolchain.  Orlando is really the lead on this project, I’m mostly just doing the plumbing.<br></p><p>The open questions I have are the following:<br></p><p>1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br></p><p>2. Should the swift toolchain support the selection of linkers on the command line, and if so, what’s the default?<br></p><p>3. If a command-line switch for swift is not desired, should a switch in the build process select the supported linker?<br></p><p>4. Can it be assumed that gold will exist in user installations?<br></p><p>For some additional context, we’re investigating the use of gold because on armv6/v7 and aarch64 platforms the standard linker has bugs that require the &quot;big hammer,” as Dmitri called it, of -Bsymbolic to work around them.  It would be nice to solve these issues a better way.<br></p><p>Thoughts, Ideas, Flames, etc?<br>- Will<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/91c88f3ed8bc9a8164f281098c03059b?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>Davide Italiano</string> &lt;dccitaliano at gmail.com&gt;<p>January 14, 2016 at 10:00:00am</p></header><div class="content"><p>On Thu, Jan 14, 2016 at 9:54 AM, William Dillon via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; Hi All,<br>&gt;<br>&gt; Orlando (included in the to line) and I have been looking at using the gold linker in the swift toolchain.  Orlando is really the lead on this project, I’m mostly just doing the plumbing.<br>&gt;<br>&gt; The open questions I have are the following:<br>&gt;<br>&gt; 1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br>&gt;<br></p><p>I can&#39;t speak for the project, but I can speak for myself.<br>My naive understanding is that swift uses two linkers because &#39;INSERT<br>AFTER&#39; linker script directive isn&#39;t supported (in gold). I read a lot about<br>that -- and I felt like the gold developers didn&#39;t care about adding<br>this command as it&#39;s mainly of use for the default linker script<br>shipped with ld.bfd.<br>They also provided an alternative way to obtain the same semantics<br>without providing an additional directive. Other than that, I don&#39;t<br>know any other reasons why gold shouldn&#39;t be used.<br></p><p>&gt; 2. Should the swift toolchain support the selection of linkers on the command line, and if so, what’s the default?<br>&gt;<br></p><p>If you mean something like -fuse-ld for clang, I&#39;d like to see that<br>happen (if not supported already). As lld developer I found that very<br>useful and I hope to be able to link swift and swiftc-generated<br>executables using lld, so, yes.<br></p><p>&gt; 3. If a command-line switch for swift is not desired, should a switch in the build process select the supported linker?<br>&gt;<br>&gt; 4. Can it be assumed that gold will exist in user installations?<br>&gt;<br>&gt; For some additional context, we’re investigating the use of gold because on armv6/v7 and aarch64 platforms the standard linker has bugs that require the &quot;big hammer,” as Dmitri called it, of -Bsymbolic to work around them.  It would be nice to solve these issues a better way.<br>&gt;<br>&gt; Thoughts, Ideas, Flames, etc?<br>&gt; - Will<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>January 14, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;&gt; <br>&gt;&gt; 1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br>&gt;&gt; <br>&gt; <br>&gt; I can&#39;t speak for the project, but I can speak for myself.<br>&gt; My naive understanding is that swift uses two linkers because &#39;INSERT<br>&gt; AFTER&#39; linker script directive isn&#39;t supported (in gold). I read a lot about<br>&gt; that -- and I felt like the gold developers didn&#39;t care about adding<br>&gt; this command as it&#39;s mainly of use for the default linker script<br>&gt; shipped with ld.bfd.<br>&gt; They also provided an alternative way to obtain the same semantics<br>&gt; without providing an additional directive. Other than that, I don&#39;t<br>&gt; know any other reasons why gold shouldn&#39;t be used.<br>&gt; <br></p><p>That’s right, AFAIK.  Orlando developed a system using two assembler files that bookend the objects during link to achieve the same result as the ld script.  Additionally, this method works with BFD, so swift.ld can be discarded entirely.<br></p><p>&gt;&gt; 2. Should the swift toolchain support the selection of linkers on the command line, and if so, what’s the default?<br>&gt;&gt; <br>&gt; <br>&gt; If you mean something like -fuse-ld for clang, I&#39;d like to see that<br>&gt; happen (if not supported already). As lld developer I found that very<br>&gt; useful and I hope to be able to link swift and swiftc-generated<br>&gt; executables using lld, so, yes.<br>&gt; <br></p><p>That is the expectation, yes.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>January 14, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 14, 2016, at 11:07 AM, William Dillon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I can&#39;t speak for the project, but I can speak for myself.<br>&gt;&gt; My naive understanding is that swift uses two linkers because &#39;INSERT<br>&gt;&gt; AFTER&#39; linker script directive isn&#39;t supported (in gold). I read a lot about<br>&gt;&gt; that -- and I felt like the gold developers didn&#39;t care about adding<br>&gt;&gt; this command as it&#39;s mainly of use for the default linker script<br>&gt;&gt; shipped with ld.bfd.<br>&gt;&gt; They also provided an alternative way to obtain the same semantics<br>&gt;&gt; without providing an additional directive. Other than that, I don&#39;t<br>&gt;&gt; know any other reasons why gold shouldn&#39;t be used.<br>&gt;&gt; <br>&gt; <br>&gt; That’s right, AFAIK.  Orlando developed a system using two assembler files that bookend the objects during link to achieve the same result as the ld script.  Additionally, this method works with BFD, so swift.ld can be discarded entirely.<br></p><p>That sounds like a great improvement. Supporting gold for the entire build process would be great. Any idea if the assembler input would also work on FreeBSD or other platforms?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>January 14, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On Jan 14, 2016, at 9:19 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; On Jan 14, 2016, at 11:07 AM, William Dillon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can&#39;t speak for the project, but I can speak for myself.<br>&gt;&gt;&gt; My naive understanding is that swift uses two linkers because &#39;INSERT<br>&gt;&gt;&gt; AFTER&#39; linker script directive isn&#39;t supported (in gold). I read a lot about<br>&gt;&gt;&gt; that -- and I felt like the gold developers didn&#39;t care about adding<br>&gt;&gt;&gt; this command as it&#39;s mainly of use for the default linker script<br>&gt;&gt;&gt; shipped with ld.bfd.<br>&gt;&gt;&gt; They also provided an alternative way to obtain the same semantics<br>&gt;&gt;&gt; without providing an additional directive. Other than that, I don&#39;t<br>&gt;&gt;&gt; know any other reasons why gold shouldn&#39;t be used.<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; That’s right, AFAIK.  Orlando developed a system using two assembler files that bookend the objects during link to achieve the same result as the ld script.  Additionally, this method works with BFD, so swift.ld can be discarded entirely.<br>&gt; <br>&gt; That sounds like a great improvement. Supporting gold for the entire build process would be great. Any idea if the assembler input would also work on FreeBSD or other platforms?<br>&gt; <br></p><p>Yes, as long as you’re using clang, it should work in FreeBSD.  Darwin doesn’t require this at all AFAIK.  So, that would support Linux, FreeBSD, and Darwin, all without swift.ld.<br></p><p>- Will<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160114/bc7d5080/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ed6cb17c056398e79b4360376ffa916e?s=50"></div><header><strong>[RFC] Moving to gold linker</strong> from <string>William Dillon</string> &lt;wdillon at coas.oregonstate.edu&gt;<p>January 18, 2016 at 09:00:00pm</p></header><div class="content"><p>Thanks for the input about the gold linker so far, everyone.<br></p><p>I have a few follow-up questions.<br></p><p>First up is whether there is any desire to keep swift.ld at all.  I believe that I’ll be able to use the same object files using the binutils linker, so the mechanics in place for gold will function in both cases.  I don’t know if there is another compelling reason for keeping it.  Thoughts?<br></p><p>Second, Orlando believes that it’s possible to use C++ to generate the object files rather that assembler.  This would make these source files much more portable and easier to maintain.  There is a catch, however. In the assembler version there is no runtime impact at all; the C++ version requires a subtraction at load time.  The cost is pretty minimal, but it’s worth considering.  Changing from one implementation to another is very simple.<br></p><p>Finally, tying in the discussion of multi-architecture/multi-sdk cross compilation on linux, I noticed that swift.ld is copied to a 2-d array of SDKs and Architectures.  Considering that effory this effort (may?) not support a functional use case anyway, is it desirable to keep this behavior?  It would certainly simplify the generation of the object files.  I’ve already done the work, so it’s not that I’m trying to avoid it. ;)<br></p><p>Thanks again for your comments and thoughts,<br>- Will<br></p><p>&gt; On Jan 14, 2016, at 9:26 PM, William Dillon via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jan 14, 2016, at 9:19 PM, Joe Groff &lt;jgroff at apple.com &lt;mailto:jgroff at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Jan 14, 2016, at 11:07 AM, William Dillon via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 1. Is moving to or supporting Gold within the swift toolchain (not building swift itself) a goal, non-goal, or not desired?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can&#39;t speak for the project, but I can speak for myself.<br>&gt;&gt;&gt;&gt; My naive understanding is that swift uses two linkers because &#39;INSERT<br>&gt;&gt;&gt;&gt; AFTER&#39; linker script directive isn&#39;t supported (in gold). I read a lot about<br>&gt;&gt;&gt;&gt; that -- and I felt like the gold developers didn&#39;t care about adding<br>&gt;&gt;&gt;&gt; this command as it&#39;s mainly of use for the default linker script<br>&gt;&gt;&gt;&gt; shipped with ld.bfd.<br>&gt;&gt;&gt;&gt; They also provided an alternative way to obtain the same semantics<br>&gt;&gt;&gt;&gt; without providing an additional directive. Other than that, I don&#39;t<br>&gt;&gt;&gt;&gt; know any other reasons why gold shouldn&#39;t be used.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That’s right, AFAIK.  Orlando developed a system using two assembler files that bookend the objects during link to achieve the same result as the ld script.  Additionally, this method works with BFD, so swift.ld can be discarded entirely.<br>&gt;&gt; <br>&gt;&gt; That sounds like a great improvement. Supporting gold for the entire build process would be great. Any idea if the assembler input would also work on FreeBSD or other platforms?<br>&gt;&gt; <br>&gt; <br>&gt; Yes, as long as you’re using clang, it should work in FreeBSD.  Darwin doesn’t require this at all AFAIK.  So, that would support Linux, FreeBSD, and Darwin, all without swift.ld.<br>&gt; <br>&gt; - Will<br>&gt;  _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev &lt;https://lists.swift.org/mailman/listinfo/swift-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160118/85381fab/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 1428 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160118/85381fab/attachment.p7s&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
