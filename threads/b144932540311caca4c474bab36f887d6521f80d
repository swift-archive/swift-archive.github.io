<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bd4126f4ba4ae7f00a2b1e605797a326?s=50"></div><header><strong>Customized Inline Init Closure</strong> from <string>Weston Catron</string> &lt;wcatron at catrondevelopment.com&gt;<p>August 30, 2016 at 09:00:00am</p></header><div class="content"><p>Jo-<br></p><p>Sorry for such a delayed response. $0 is interesting, is this a common language concept elsewhere? I would still push for using the variable name or possibly a new keyword (this, self2, it), which is really just a more expressive $0. Or don’t keep self and just stick with the limitation of having to pass through any necessary information in the scope. In javascript it is common, albeit redundant/ugly, to do something like:<br></p><p>```<br>var that = this; <br>$(…).each(function() { <br>    this.foo(that) <br>});<br>```<br></p><p>$0 is sort of an implied ` let $0 = self; ` before each closure.<br></p><p>Alternatively although this is sort of reverting back to a more verbose style we could specifically give our scope.<br></p><p>```<br>let me = person (name: “Weston”, dob: ..., that: self) {<br>    self.name = name;<br>    self.age = that.getAgeSinceDOB(dob);<br>    self.gender = that.calculateGender();<br>}<br>```<br>However I do not like this.<br></p><p>What do you think about a key word to replace $0 that is more expressive and easy to understand for new programmers? Or do you think recasting self only when necessary would be logical?<br></p><p>Weston<br></p><p><br>&gt; Here is another option. Attached is a playground I was messing around with. There are some weird bugs I was noticing, but don’t quite know if they are important enough to submit (comment out line 54 to see).<br>&gt; <br>&gt; I actually like using the $0 so as to allow access to self if using within another type (ex: view controller code below).<br>&gt; <br>&gt; Please respond with any potential issues with the code I have written.<br>&gt; <br>&gt; - Jo<br>&gt; <br>&gt; <br>&gt; <br>&gt; protocol ClosureInit { init() }<br>&gt; <br>&gt; extension ClosureInit {<br>&gt; <br>&gt; init(@noescape b: inout Self -&gt;Void) { self.init(); b(&amp;self) }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; struct Person: ClosureInit {<br>&gt; <br>&gt; enum GenderType: String { case Male, Female }<br>&gt; <br>&gt; var age: Int = 0<br>&gt; var gender: GenderType?<br>&gt; var name: String?<br>&gt; <br>&gt; }<br>&gt; <br>&gt; let me = Person {<br>&gt; <br>&gt; $0.name = &quot;Jo&quot;<br>&gt; $0.age = 32<br>&gt; $0.gender = .Male<br>&gt; <br>&gt; }<br>&gt; <br>&gt; me.age // 32<br>&gt; <br>&gt; extension Array: ClosureInit { }<br>&gt; <br>&gt; let randomIntArray = [Int] {<br>&gt; <br>&gt; for _ in 0...10 {<br>&gt; <br>&gt; $0.append(Int(arc4random_uniform(100)))<br>&gt; <br>&gt; }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; randomIntArray<br>&gt; <br>&gt; let personArray = [Person] {<br>&gt; <br>&gt; for _ in 0...8 {<br>&gt; <br>&gt; $0.append(Person {<br>&gt; <br>&gt; $0.age = Int(arc4random_uniform(100))<br>&gt; $0.gender = Int(arc4random_uniform(100)) % 2 == 0 ? .Male : .Female // comment this line out to see error<br>&gt; <br>&gt; <br>&gt; })<br>&gt; <br>&gt; }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; personArray<br>&gt; <br>&gt; extension UIView: ClosureInit { }<br>&gt; <br>&gt; class ViewController: UIViewController {<br>&gt; <br>&gt; override func viewDidLoad() {<br>&gt; super.viewDidLoad()<br>&gt; <br>&gt; UILabel {<br>&gt; <br>&gt; $0.text = &quot;This is Awesome!&quot;<br>&gt; $0.textColor = UIColor.cyanColor()<br>&gt; $0.frame = CGRect(x: 20, y: 20, width: view.frame.width - 40, height: 40)<br>&gt; view.addSubview($0)<br>&gt; <br>&gt; }<br>&gt; <br>&gt; view.addSubview(UIButton {<br>&gt; <br>&gt; $0.setTitle(&quot;Submit&quot;, forState: .Normal)<br>&gt; $0.frame = CGRect(x: 20, y: 60, width: view.frame.width - 40, height: 40)<br>&gt; <br>&gt; })<br>&gt; <br>&gt; <br>&gt; }<br>&gt; <br>&gt; }<br>&gt; <br>&gt; let vc = ViewController()<br>&gt; <br>&gt; vc.loadViewIfNeeded()<br>&gt; <br>&gt; vc.view.subviews<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
