<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Standard operator precedence</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 15, 2016 at 11:00:00am</p></header><div class="content"><p>on Mon Feb 15 2016, Jordan Rose &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; A boolean is not a single bit of data in Swift, in the same way that<br>&gt; &quot;someIntegerValue &amp; 1&quot; cannot be used as a condition. There is a<br>&gt; bijection between boolean values and integers with one bit set or<br>&gt; cleared, but they are not the same type.<br>&gt;<br>&gt; (You can&#39;t use &#39;&amp;&#39; on a Bool either, only &#39;&amp;&amp;&#39;. That does mean Swift<br>&gt; has no non-short-circuiting boolean AND operation, but so far we<br>&gt; haven&#39;t needed one.)<br></p><p>I don&#39;t know if that&#39;s strictly true, Jordan.  At least once upon a<br>time, the performance team was fond of replacing &amp;&amp; with &amp; for<br>performance reasons (to avoid branches).  I hope our optimizer has since<br>learned to do this for itself in all the cases that matter, though ;-)<br></p><p>&gt; Jordan<br>&gt;<br>&gt;&gt; On Feb 15, 2016, at 11:17, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Yes, but not enough to claim limited resources needed for pressing<br>&gt;&gt; matters. It&#39;s not a feature anyone would clamor for, more a product<br>&gt;&gt; of the foolish consistency hobgoblin. Rationale: it is possible in<br>&gt;&gt; JavaScript (for instance) to evaluate true * true, but not in<br>&gt;&gt; Swift. [I&#39;m aware that implicit casting is taking place in<br>&gt;&gt; JavaScript, and that the return type isn&#39;t a Boolean.] It comes into<br>&gt;&gt; play in exactly one scenario I can think of:<br>&gt;&gt; <br>&gt;&gt; Student: &quot;Why is &amp; a multiplicative operation?&quot;<br>&gt;&gt; Teacher: &quot;Well, because for two bits A and B, A &amp; B == A * B.&quot;<br>&gt;&gt; Student: &quot;That&#39;s interesting, let me try it with the only type I<br>&gt;&gt; know that represents a single bit of data.&quot;<br>&gt;&gt; [At this point the student should, IMO, be able to actually evaluate A * B where A and B are booleans.]<br>&gt;&gt; <br>&gt;&gt; Analogous rationale for defining &amp;+ and &amp;- on booleans.<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 15, 2016 at 12:20 PM Chris Lattner<br>&gt;&gt; &lt;clattner at apple.com<br>&gt;&gt; &lt;mailto:clattner at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; On Feb 14, 2016, at 10:25 AM, Xiaodi Wu<br>&gt;&gt;&gt; &lt;xiaodi.wu at gmail.com<br>&gt;&gt;&gt; &lt;mailto:xiaodi.wu at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some further study has been helpful. Am I close to the mark in answering my own question?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Further reading shows that Swift&#39;s rationalized operator<br>&gt;&gt;&gt; precedence levels broadly align with those of Erlang and<br>&gt;&gt;&gt; Go. (However, those languages also seem to lack documentation on<br>&gt;&gt;&gt; how they arrived at this set of precedence levels.)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - It is quite evident why &lt;&lt; is considered exponentiative.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - Dennis Ritchie has explained<br>&gt;&gt;&gt; &lt;http://www.lysator.liu.se/c/dmr-on-or.html<br>&gt;&gt;&gt; &lt;http://www.lysator.liu.se/c/dmr-on-or.html&gt;&gt; why &amp; has lower<br>&gt;&gt;&gt; precedence than == in C, and why in hindsight that is better off<br>&gt;&gt;&gt; changed. This change has been implemented in Swift/Go/Erlang and<br>&gt;&gt;&gt; also in other languages like Python.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - &amp; is considered multiplicative because for two bits A and B, A &amp; B == A * B.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - ^ and | should have equal precedence to - and +, respectively, by analogous reasoning.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; - It also happens to be rational for &amp; to have higher precedence than | by analogy with &amp;&amp; and ||.<br>&gt;&gt; <br>&gt;&gt; Yep, this is all right.<br>&gt;&gt; <br>&gt;&gt;&gt; It&#39;s a bit of a bummer, if this line of reasoning was indeed used<br>&gt;&gt;&gt; in arriving at these operator precedence levels, that Swift will<br>&gt;&gt;&gt; not allow evaluation of true * true (etc.) without casting. I would<br>&gt;&gt;&gt; expect true &amp; true == true * true.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Iâ€™m not sure what you mean here.  You want multiplication defined on booleans?<br>&gt;&gt; <br>&gt;&gt; -Chris<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
