<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2ac7b85ab3215a33f7d0017d186c00de?s=50"></div><header><strong>Two-for-Tuesday: Resettable Properties</strong> from <string>Patterson, Jason</string> &lt;jason.patterson at wsj.com&gt;<p>March 15, 2016 at 09:00:00am</p></header><div class="content"><p>Hi all,<br></p><p>Recently I noticed how `null_resettable` Objective-C properties were<br>imported into Swift. To recap, a `null_resettable` property in<br>Objective-C indicates that the getter returns a nonnull value, while<br>the setter is nullable:<br></p><p>&gt; @property (nonatomic, nonnull, null_resettable) NSString *name;<br>&gt;<br>&gt; foo.name = @&quot;Bar&quot;;<br>&gt; foo.name = nil; // &quot;resets&quot; the property<br></p><p>Currently these are imported as implicitly unwrapped optionals (var<br>name: String!), which is the same as if they were `null_unspecified`.<br>I believe this can be improved.<br></p><p>I&#39;ve drafted a proposal that would improve how these are imported. In<br>a nutshell, Swift would add an extra &quot;reset&quot; method to the imported<br>interface which would allow users to explicitly reset the property by<br>name. (The above example would be imported as `var name: String; func<br>resetName()`.) This would improve readability and allow the getter to<br>return a non-optional value.<br></p><p>That proposal is here:<br></p><p>https://github.com/patters/swift-evolution/blob/master/proposals/0000-importing-null_resettable.md<br></p><p>However, I then wondered if this feature of Objective-C would be<br>advantageous to bring to Swift. The thought there is to allow Swift to<br>declare a property getter as a non-optional type, while allowing the<br>setter to take an optional type. While a syntactical change has more<br>cost to Swift, the benefit may outweigh that.<br></p><p>There were a few ideas here but I ultimately settled on a new `set?`<br>operator. The proposal then details the usage and ramifications of<br>such a change. For example, the getter would continue to return `T`<br>while the type of `newValue` available in the setter becomes a `T?`.<br>There&#39;s a corresponding change to willSet clauses.<br></p><p>That proposal is here:<br></p><p>https://github.com/patters/swift-evolution/blob/master/proposals/0000-resettable-properties.md<br></p><p>I think that both of these solve the problem in two different ways and<br>submit both for your discussion and consideration.<br></p><p>Thanks!<br></p><p><br>Jason Patterson<br>@patters<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>Two-for-Tuesday: Resettable Properties</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>March 15, 2016 at 12:00:00pm</p></header><div class="content"><p>Resettable properties are one of the use cases for property behaviors &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0030-property-behavior-decls.md&gt;  There was still dissent the last time it was brought to review, so a new version is expected in the Swift 3 window.<br></p><p>Félix<br></p><p>&gt; Le 15 mars 2016 à 09:49:21, Patterson, Jason via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; Recently I noticed how `null_resettable` Objective-C properties were<br>&gt; imported into Swift. To recap, a `null_resettable` property in<br>&gt; Objective-C indicates that the getter returns a nonnull value, while<br>&gt; the setter is nullable:<br>&gt; <br>&gt;&gt; @property (nonatomic, nonnull, null_resettable) NSString *name;<br>&gt;&gt; <br>&gt;&gt; foo.name = @&quot;Bar&quot;;<br>&gt;&gt; foo.name = nil; // &quot;resets&quot; the property<br>&gt; <br>&gt; Currently these are imported as implicitly unwrapped optionals (var<br>&gt; name: String!), which is the same as if they were `null_unspecified`.<br>&gt; I believe this can be improved.<br>&gt; <br>&gt; I&#39;ve drafted a proposal that would improve how these are imported. In<br>&gt; a nutshell, Swift would add an extra &quot;reset&quot; method to the imported<br>&gt; interface which would allow users to explicitly reset the property by<br>&gt; name. (The above example would be imported as `var name: String; func<br>&gt; resetName()`.) This would improve readability and allow the getter to<br>&gt; return a non-optional value.<br>&gt; <br>&gt; That proposal is here:<br>&gt; <br>&gt; https://github.com/patters/swift-evolution/blob/master/proposals/0000-importing-null_resettable.md<br>&gt; <br>&gt; However, I then wondered if this feature of Objective-C would be<br>&gt; advantageous to bring to Swift. The thought there is to allow Swift to<br>&gt; declare a property getter as a non-optional type, while allowing the<br>&gt; setter to take an optional type. While a syntactical change has more<br>&gt; cost to Swift, the benefit may outweigh that.<br>&gt; <br>&gt; There were a few ideas here but I ultimately settled on a new `set?`<br>&gt; operator. The proposal then details the usage and ramifications of<br>&gt; such a change. For example, the getter would continue to return `T`<br>&gt; while the type of `newValue` available in the setter becomes a `T?`.<br>&gt; There&#39;s a corresponding change to willSet clauses.<br>&gt; <br>&gt; That proposal is here:<br>&gt; <br>&gt; https://github.com/patters/swift-evolution/blob/master/proposals/0000-resettable-properties.md<br>&gt; <br>&gt; I think that both of these solve the problem in two different ways and<br>&gt; submit both for your discussion and consideration.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; <br>&gt; Jason Patterson<br>&gt; @patters<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160315/fa5ad472/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/283bdc6ec76dd4d16b7a8234222e55d4?s=50"></div><header><strong>Two-for-Tuesday: Resettable Properties</strong> from <string>Michel Fortin</string> &lt;michel.fortin at michelf.ca&gt;<p>March 17, 2016 at 09:00:00am</p></header><div class="content"><p>Le 15 mars 2016 à 9:49, Patterson, Jason via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br></p><p>&gt; There were a few ideas here but I ultimately settled on a new `set?`<br>&gt; operator. The proposal then details the usage and ramifications of<br>&gt; such a change. For example, the getter would continue to return `T`<br>&gt; while the type of `newValue` available in the setter becomes a `T?`.<br>&gt; There&#39;s a corresponding change to willSet clauses.<br></p><p>That proposal is well-written and the syntax is simple to understand.<br></p><p>I think I like this better than the out-of-band `reset` proposed as part of property behaviors. I&#39;ve never been a fan of those out of band functions.<br></p><p>-- <br>Michel Fortin<br>https://michelf.ca<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
