<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 14, 2016 at 10:00:00am</p></header><div class="content"><p>Is the intention that NSURLSession should be implemented by wrapping libcurl?<br></p><p>https://curl.haxx.se<br></p><p>If so, I&#39;m tempted to take a stab at this.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 14, 2016 at 07:00:00am</p></header><div class="content"><p>I dont think we had an intention set forth for how that was to be implemented; honestly it was a bit of a “we dont know how this should be done for linux yet” when the initial API drafts were posted. That being said NSURLSession and friends are definitely pretty important areas in Foundation (hence why the placeholder implementations are there).<br></p><p>libcurl is readily available for linux (but we would need to alter our dependencies list for apt-get) and also is shipped for Darwin targets as well. so in spirit it might be a decent place to start.<br></p><p>There are a few places that might need some research on how to approach an implementation:<br></p><p>1) Can curl’s APIs interface with run loops?<br></p><p>2) Can curl’s API provide a reasonable implementation to back other APIs? NSURLCache, NSURLRequest, NSURLResponse, even older APIs like NSURLConnection?<br></p><p>3) How would the background downloading part of NSURLSession be handled? Would it just elide that feature?<br></p><p>4) Can it handle the delegation protocols for all events? If not, can the events be synthesized?<br></p><p>&gt; On Mar 14, 2016, at 2:05 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Is the intention that NSURLSession should be implemented by wrapping libcurl?<br>&gt; <br>&gt; https://curl.haxx.se<br>&gt; <br>&gt; If so, I&#39;m tempted to take a stab at this.<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 14, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On 14 Mar 2016, at 15:36, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; I dont think we had an intention set forth for how that was to be implemented; honestly it was a bit of a “we dont know how this should be done for linux yet” when the initial API drafts were posted. That being said NSURLSession and friends are definitely pretty important areas in Foundation (hence why the placeholder implementations are there).<br>&gt; <br>&gt; libcurl is readily available for linux (but we would need to alter our dependencies list for apt-get) and also is shipped for Darwin targets as well. so in spirit it might be a decent place to start.<br>&gt; <br>&gt; There are a few places that might need some research on how to approach an implementation:<br>&gt; <br>&gt; 1) Can curl’s APIs interface with run loops?<br></p><p>It interfaces very nicely with libdispatch -- is that an option?<br></p><p>&gt; 2) Can curl’s API provide a reasonable implementation to back other APIs? NSURLCache, NSURLRequest, NSURLResponse, even older APIs like NSURLConnection?<br></p><p>As for NSURLRequest and NSURLResponse: These will need some &#39;glue&#39; but should work nicely with libcurl&#39;s interface.<br></p><p>NSURLConnection is a bit of an oddball due it it&#39;s ties to NSRunLoop -- but it can certainly be made to work with libcurl.<br></p><p>NSURLCache: libcurl does not do any caching, and as a result the interaction with NSURLCache should be relatively straight forward.<br></p><p>libcurl&#39;s COOKIELIST should be able to interact with NSHTTPCookieStorage:<br>https://curl.haxx.se/libcurl/c/CURLOPT_COOKIELIST.html<br></p><p>&gt; 3) How would the background downloading part of NSURLSession be handled? Would it just elide that feature?<br></p><p>I would elide that for now. To support this, we&#39;d need an independent daemon to do the downloading. That&#39;s quite a project on its own.<br></p><p>&gt; 4) Can it handle the delegation protocols for all events? If not, can the events be synthesized?<br></p><p>It appears that this should work nicely. libcurl provides callbacks as headers are parsed.<br></p><p>One main pinpoint will be SSL / TLS support. That&#39;ll depend entirely on how libcurl is compiled and will not be able to pick up TLSMinimumSupportedProtocol / TLSMaximumSupportedProtocol. Also interaction with the NSURLAuthenticationChallenge and TLS remains a question. libcurl does provide a hook for this, but it&#39;s not trivial since the code will have to interact with the underlying TLS implementation.<br></p><p><br>Any implementation will depend on NSOperation / NSOperationQueue -- and those will in turn to some extend depend on libdispatch being available.<br></p><p>And once libdispatch is available, it makes sense to use it for libcurl, too.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 8:50 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 14 Mar 2016, at 15:36, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I dont think we had an intention set forth for how that was to be implemented; honestly it was a bit of a “we dont know how this should be done for linux yet” when the initial API drafts were posted. That being said NSURLSession and friends are definitely pretty important areas in Foundation (hence why the placeholder implementations are there).<br>&gt;&gt; <br>&gt;&gt; libcurl is readily available for linux (but we would need to alter our dependencies list for apt-get) and also is shipped for Darwin targets as well. so in spirit it might be a decent place to start.<br>&gt;&gt; <br>&gt;&gt; There are a few places that might need some research on how to approach an implementation:<br>&gt;&gt; <br>&gt;&gt; 1) Can curl’s APIs interface with run loops?<br>&gt; <br>&gt; It interfaces very nicely with libdispatch -- is that an option?<br></p><p>We have not yet fully integrated libdispatch support on linux yet. It is very close and hopefully should be integrated soon.<br></p><p>&gt; <br>&gt;&gt; 2) Can curl’s API provide a reasonable implementation to back other APIs? NSURLCache, NSURLRequest, NSURLResponse, even older APIs like NSURLConnection?<br>&gt; <br>&gt; As for NSURLRequest and NSURLResponse: These will need some &#39;glue&#39; but should work nicely with libcurl&#39;s interface.<br>&gt; <br>&gt; NSURLConnection is a bit of an oddball due it it&#39;s ties to NSRunLoop -- but it can certainly be made to work with libcurl.<br>&gt; <br>&gt; NSURLCache: libcurl does not do any caching, and as a result the interaction with NSURLCache should be relatively straight forward.<br>&gt; <br>&gt; libcurl&#39;s COOKIELIST should be able to interact with NSHTTPCookieStorage:<br>&gt; https://curl.haxx.se/libcurl/c/CURLOPT_COOKIELIST.html<br>&gt; <br>&gt;&gt; 3) How would the background downloading part of NSURLSession be handled? Would it just elide that feature?<br>&gt; <br>&gt; I would elide that for now. To support this, we&#39;d need an independent daemon to do the downloading. That&#39;s quite a project on its own.<br></p><p>That is a fair assertion; perhaps as a decent implementation in the interim a dedicated thread for sessions could be set aside to simulate a different process. That way when someone decides to pick up the torch and factor it out to a daemon it wont be a huge disruption.<br></p><p>&gt; <br>&gt;&gt; 4) Can it handle the delegation protocols for all events? If not, can the events be synthesized?<br>&gt; <br>&gt; It appears that this should work nicely. libcurl provides callbacks as headers are parsed.<br>&gt; <br>&gt; One main pinpoint will be SSL / TLS support. That&#39;ll depend entirely on how libcurl is compiled and will not be able to pick up TLSMinimumSupportedProtocol / TLSMaximumSupportedProtocol. Also interaction with the NSURLAuthenticationChallenge and TLS remains a question. libcurl does provide a hook for this, but it&#39;s not trivial since the code will have to interact with the underlying TLS implementation.<br>&gt; <br>&gt; <br>&gt; Any implementation will depend on NSOperation / NSOperationQueue -- and those will in turn to some extend depend on libdispatch being available.<br></p><p>NSOQ requires dispatch to be implemented properly so that has been on hold.<br></p><p>&gt; <br>&gt; And once libdispatch is available, it makes sense to use it for libcurl, too.<br>&gt; <br>&gt; /Daniel<br>&gt; <br></p><p>Overall I think this might be a decent place to start; and it seems to be a sensible approach. Integrating it for linux builds might be held up a bit until we can get libdispatch fully integrated.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 14, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On 14 Mar 2016, at 17:43, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; [...]<br>&gt; <br>&gt; Overall I think this might be a decent place to start; and it seems to be a sensible approach. Integrating it for linux builds might be held up a bit until we can get libdispatch fully integrated.<br></p><p><br>I have three questions:<br></p><p><br>(1) What would be a reasonable way to add tests? Should I add an in-process HTTP server. Something along the lines of<br></p><p>https://github.com/danieleggert/HTTPServer/blob/feature/swift2/HTTPServer/SocketServer.swift<br></p><p><br></p><p>(2) How would I go about pulling in libcurl? I could add<br></p><p>#include &lt;curl/curl.h&gt;<br></p><p>to ForSwiftFoundationOnly.h -- but I&#39;d also need to add helpers for variadic function like so:<br></p><p><br>static inline CURLcode curl_easy_setopt_ptr(CURL *_Nonnull curl, CURLoption option, void *_Nullable a) {<br>    return curl_easy_setopt(curl, option, a);<br>}<br>static inline CURLcode curl_easy_setopt_int(CURL *_Nonnull curl, CURLoption option, int a) {<br>    return curl_easy_setopt(curl, option, a);<br>}<br>static inline CURLcode curl_easy_setopt_wc(CURL *_Nonnull curl, CURLoption option, size_t(*_Nullable a)(char *_Nonnull, size_t, size_t, void *_Nullable)) {<br>    return curl_easy_setopt(curl, option, a);<br>}<br></p><p>where should these go?<br></p><p><br></p><p>(3) Is it ok for me to split the libcurl specific code into a separate file, or should I try to keep everything inside NSURLSession.swift?<br></p><p>/Daniel<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/dd370d16eb0bf6b4052d690975b7b72a?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Robert Stephen Thompson</string> &lt;robert.thompson at willowtreeapps.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>Just a couple of tips based on my experience wrapping libxml2 for NSXMLDocument:<br>1. You’ll need to actually import and link libcurl with CoreFoundation instead of trying to make a libcurl module.modulemap and importing it directly. This is because if you do it that way, you’ll have to add libcurl as a dependency _throughout_ the Swift build process, and it would all be pretty disruptive (and difficult to do).<br>2. As a consequence of 1., you’ll need to wrap every function you call from libcurl in a new CoreFoundation API. See CFXMLInterface.h and CFXMLInterface.c for what I mean. Of course, this also gives you the opportunity to add nullability annotations, wrap things in CFString, CFError, CFArray, etc, so it’s not just busy-work for getting around the build system, heh. Just depends on how much C you want to write, you could just straight wrap the libcurl functions and do everything in Swift, but at the very least nullability annotations are a win here.<br></p><p>Thanks,<br>Robert Thompson<br>Software Engineer<br>WillowTree, Inc.®<br>willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br></p><p>&gt; On Mar 14, 2016, at 11:50 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 14 Mar 2016, at 15:36, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I dont think we had an intention set forth for how that was to be implemented; honestly it was a bit of a “we dont know how this should be done for linux yet” when the initial API drafts were posted. That being said NSURLSession and friends are definitely pretty important areas in Foundation (hence why the placeholder implementations are there).<br>&gt;&gt; <br>&gt;&gt; libcurl is readily available for linux (but we would need to alter our dependencies list for apt-get) and also is shipped for Darwin targets as well. so in spirit it might be a decent place to start.<br>&gt;&gt; <br>&gt;&gt; There are a few places that might need some research on how to approach an implementation:<br>&gt;&gt; <br>&gt;&gt; 1) Can curl’s APIs interface with run loops?<br>&gt; <br>&gt; It interfaces very nicely with libdispatch -- is that an option?<br>&gt; <br>&gt;&gt; 2) Can curl’s API provide a reasonable implementation to back other APIs? NSURLCache, NSURLRequest, NSURLResponse, even older APIs like NSURLConnection?<br>&gt; <br>&gt; As for NSURLRequest and NSURLResponse: These will need some &#39;glue&#39; but should work nicely with libcurl&#39;s interface.<br>&gt; <br>&gt; NSURLConnection is a bit of an oddball due it it&#39;s ties to NSRunLoop -- but it can certainly be made to work with libcurl.<br>&gt; <br>&gt; NSURLCache: libcurl does not do any caching, and as a result the interaction with NSURLCache should be relatively straight forward.<br>&gt; <br>&gt; libcurl&#39;s COOKIELIST should be able to interact with NSHTTPCookieStorage:<br>&gt; https://curl.haxx.se/libcurl/c/CURLOPT_COOKIELIST.html<br>&gt; <br>&gt;&gt; 3) How would the background downloading part of NSURLSession be handled? Would it just elide that feature?<br>&gt; <br>&gt; I would elide that for now. To support this, we&#39;d need an independent daemon to do the downloading. That&#39;s quite a project on its own.<br>&gt; <br>&gt;&gt; 4) Can it handle the delegation protocols for all events? If not, can the events be synthesized?<br>&gt; <br>&gt; It appears that this should work nicely. libcurl provides callbacks as headers are parsed.<br>&gt; <br>&gt; One main pinpoint will be SSL / TLS support. That&#39;ll depend entirely on how libcurl is compiled and will not be able to pick up TLSMinimumSupportedProtocol / TLSMaximumSupportedProtocol. Also interaction with the NSURLAuthenticationChallenge and TLS remains a question. libcurl does provide a hook for this, but it&#39;s not trivial since the code will have to interact with the underlying TLS implementation.<br>&gt; <br>&gt; <br>&gt; Any implementation will depend on NSOperation / NSOperationQueue -- and those will in turn to some extend depend on libdispatch being available.<br>&gt; <br>&gt; And once libdispatch is available, it makes sense to use it for libcurl, too.<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160314/ed962d1d/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160314/ed962d1d/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 14, 2016 at 10:00:00am</p></header><div class="content"><p>Absolutely on point: I think it would be reasonable to make a new type to handle the interface layer _CFURLSession etc; that way some of the simple interfaces can be kept in C to the libcurl layer.<br></p><p>Testing is very important; however the major consideration I would suggest to take into account is try to keep it as simple as possible. Networking is hard to get right and verification is important. If at all possible eliminate as many variables as you can. It might be reasonable to spawn a small process off to deal with the server side of things if you don’t want to assume the network itself is something that needs to be tested.<br></p><p>As many tests that can be self contained as possible would be best. But it might be safe to assume that swift.org &lt;http://swift.org/&gt; is up.<br></p><p><br>&gt; On Mar 14, 2016, at 10:29 AM, Robert Stephen Thompson via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Just a couple of tips based on my experience wrapping libxml2 for NSXMLDocument:<br>&gt; 1. You’ll need to actually import and link libcurl with CoreFoundation instead of trying to make a libcurl module.modulemap and importing it directly. This is because if you do it that way, you’ll have to add libcurl as a dependency _throughout_ the Swift build process, and it would all be pretty disruptive (and difficult to do).<br>&gt; 2. As a consequence of 1., you’ll need to wrap every function you call from libcurl in a new CoreFoundation API. See CFXMLInterface.h and CFXMLInterface.c for what I mean. Of course, this also gives you the opportunity to add nullability annotations, wrap things in CFString, CFError, CFArray, etc, so it’s not just busy-work for getting around the build system, heh. Just depends on how much C you want to write, you could just straight wrap the libcurl functions and do everything in Swift, but at the very least nullability annotations are a win here.<br>&gt; <br>&gt; Thanks,<br>&gt; Robert Thompson<br>&gt; Software Engineer<br>&gt; WillowTree, Inc.®<br>&gt; willowtreeapps.com &lt;http://willowtreeapps.com/&gt;<br>&gt; <br>&gt;&gt; On Mar 14, 2016, at 11:50 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 14 Mar 2016, at 15:36, Philippe Hausler &lt;phausler at apple.com &lt;mailto:phausler at apple.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I dont think we had an intention set forth for how that was to be implemented; honestly it was a bit of a “we dont know how this should be done for linux yet” when the initial API drafts were posted. That being said NSURLSession and friends are definitely pretty important areas in Foundation (hence why the placeholder implementations are there).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; libcurl is readily available for linux (but we would need to alter our dependencies list for apt-get) and also is shipped for Darwin targets as well. so in spirit it might be a decent place to start.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; There are a few places that might need some research on how to approach an implementation:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1) Can curl’s APIs interface with run loops?<br>&gt;&gt; <br>&gt;&gt; It interfaces very nicely with libdispatch -- is that an option?<br>&gt;&gt; <br>&gt;&gt;&gt; 2) Can curl’s API provide a reasonable implementation to back other APIs? NSURLCache, NSURLRequest, NSURLResponse, even older APIs like NSURLConnection?<br>&gt;&gt; <br>&gt;&gt; As for NSURLRequest and NSURLResponse: These will need some &#39;glue&#39; but should work nicely with libcurl&#39;s interface.<br>&gt;&gt; <br>&gt;&gt; NSURLConnection is a bit of an oddball due it it&#39;s ties to NSRunLoop -- but it can certainly be made to work with libcurl.<br>&gt;&gt; <br>&gt;&gt; NSURLCache: libcurl does not do any caching, and as a result the interaction with NSURLCache should be relatively straight forward.<br>&gt;&gt; <br>&gt;&gt; libcurl&#39;s COOKIELIST should be able to interact with NSHTTPCookieStorage:<br>&gt;&gt; https://curl.haxx.se/libcurl/c/CURLOPT_COOKIELIST.html &lt;https://curl.haxx.se/libcurl/c/CURLOPT_COOKIELIST.html&gt;<br>&gt;&gt; <br>&gt;&gt;&gt; 3) How would the background downloading part of NSURLSession be handled? Would it just elide that feature?<br>&gt;&gt; <br>&gt;&gt; I would elide that for now. To support this, we&#39;d need an independent daemon to do the downloading. That&#39;s quite a project on its own.<br>&gt;&gt; <br>&gt;&gt;&gt; 4) Can it handle the delegation protocols for all events? If not, can the events be synthesized?<br>&gt;&gt; <br>&gt;&gt; It appears that this should work nicely. libcurl provides callbacks as headers are parsed.<br>&gt;&gt; <br>&gt;&gt; One main pinpoint will be SSL / TLS support. That&#39;ll depend entirely on how libcurl is compiled and will not be able to pick up TLSMinimumSupportedProtocol / TLSMaximumSupportedProtocol. Also interaction with the NSURLAuthenticationChallenge and TLS remains a question. libcurl does provide a hook for this, but it&#39;s not trivial since the code will have to interact with the underlying TLS implementation.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Any implementation will depend on NSOperation / NSOperationQueue -- and those will in turn to some extend depend on libdispatch being available.<br>&gt;&gt; <br>&gt;&gt; And once libdispatch is available, it makes sense to use it for libcurl, too.<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160314/67dc5bce/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 15, 2016 at 10:00:00am</p></header><div class="content"><p>Is it ok for me to split the libcurl specific code inside Foundation into a separate file, say NSURLSession+curl.swift ? Or should I try to keep everything inside NSURLSession.swift ?<br></p><p>If I go for a separate file, I&#39;d be able to differentiate between internal and private for the helpers. I&#39;ll end up close to 1000 lines of code for this. Having these inside NSURLSession.swift is a bit overwhelming.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 15, 2016 at 07:00:00am</p></header><div class="content"><p>That seems pretty reasonable to me, I guess the only thing to watch out for is private vs internal.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 15, 2016, at 2:44 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt; <br>&gt; Is it ok for me to split the libcurl specific code inside Foundation into a separate file, say NSURLSession+curl.swift ? Or should I try to keep everything inside NSURLSession.swift ?<br>&gt; <br>&gt; If I go for a separate file, I&#39;d be able to differentiate between internal and private for the helpers. I&#39;ll end up close to 1000 lines of code for this. Having these inside NSURLSession.swift is a bit overwhelming.<br>&gt; <br>&gt; /Daniel<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 17, 2016 at 08:00:00pm</p></header><div class="content"><p>I’ve made good progress on this. I’ll try to get something that’s merge-able within the next week. It won’t be 100% complete by any means, but should hopefully (A) cover the most common use cases, and (B) be a solid basis for the remaining functionality.<br></p><p>/Daniel<br></p><p><br>&gt; On 15 Mar 2016, at 15:12, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; That seems pretty reasonable to me, I guess the only thing to watch out for is private vs internal.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt;&gt; On Mar 15, 2016, at 2:44 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Is it ok for me to split the libcurl specific code inside Foundation into a separate file, say NSURLSession+curl.swift ? Or should I try to keep everything inside NSURLSession.swift ?<br>&gt;&gt; <br>&gt;&gt; If I go for a separate file, I&#39;d be able to differentiate between internal and private for the helpers. I&#39;ll end up close to 1000 lines of code for this. Having these inside NSURLSession.swift is a bit overwhelming.<br>&gt;&gt; <br>&gt;&gt; /Daniel<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>March 17, 2016 at 12:00:00pm</p></header><div class="content"><p>Awesome, thanks for taking this on!<br></p><p>- Tony<br></p><p>&gt; On Mar 17, 2016, at 12:33 PM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve made good progress on this. I’ll try to get something that’s merge-able within the next week. It won’t be 100% complete by any means, but should hopefully (A) cover the most common use cases, and (B) be a solid basis for the remaining functionality.<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; <br>&gt;&gt; On 15 Mar 2016, at 15:12, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That seems pretty reasonable to me, I guess the only thing to watch out for is private vs internal.<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 15, 2016, at 2:44 AM, Daniel Eggert &lt;danieleggert at me.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is it ok for me to split the libcurl specific code inside Foundation into a separate file, say NSURLSession+curl.swift ? Or should I try to keep everything inside NSURLSession.swift ?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If I go for a separate file, I&#39;d be able to differentiate between internal and private for the helpers. I&#39;ll end up close to 1000 lines of code for this. Having these inside NSURLSession.swift is a bit overwhelming.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /Daniel<br>&gt;&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 23, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 14 Mar 2016, at 18:29, Robert Stephen Thompson &lt;robert.thompson at willowtreeapps.com&gt; wrote:<br>&gt; <br>&gt; Just a couple of tips based on my experience wrapping libxml2 for NSXMLDocument:<br>&gt; 1. You’ll need to actually import and link libcurl with CoreFoundation instead of trying to make a libcurl module.modulemap and importing it directly. This is because if you do it that way, you’ll have to add libcurl as a dependency _throughout_ the Swift build process, and it would all be pretty disruptive (and difficult to do).<br>&gt; 2. As a consequence of 1., you’ll need to wrap every function you call from libcurl in a new CoreFoundation API. See CFXMLInterface.h and CFXMLInterface.c for what I mean. Of course, this also gives you the opportunity to add nullability annotations, wrap things in CFString, CFError, CFArray, etc, so it’s not just busy-work for getting around the build system, heh. Just depends on how much C you want to write, you could just straight wrap the libcurl functions and do everything in Swift, but at the very least nullability annotations are a win here.<br></p><p><br>I just looked at this, and libxml2 is being linked against by SwiftFoundation, and NOT by CoreFoundation -- on Darwin.<br></p><p>Is the correct approach to do what&#39;s been done with libxml2, or should I instead have CoreFoundation link against libcurl?<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/00f9939846257c9db8ddc42ce61ec6d1?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Philippe Hausler</string> &lt;phausler at apple.com&gt;<p>March 23, 2016 at 06:00:00am</p></header><div class="content"><p>The swift-corelibs-foundation version of CF is a static library that is being built into the Foundation product dynamic library so the linkage for libxml2 and anything else should be on that.<br></p><p>The layout of how linking works for the Darwin version is different because of how we split the layers. NSXMLParser is based on libxml2 in objc. It just does not need a CF abstraction/thunks to convert types.<br></p><p>Sent from my iPhone<br></p><p>&gt; On Mar 23, 2016, at 4:07 AM, Daniel Eggert via swift-corelibs-dev &lt;swift-corelibs-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On 14 Mar 2016, at 18:29, Robert Stephen Thompson &lt;robert.thompson at willowtreeapps.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Just a couple of tips based on my experience wrapping libxml2 for NSXMLDocument:<br>&gt;&gt; 1. You’ll need to actually import and link libcurl with CoreFoundation instead of trying to make a libcurl module.modulemap and importing it directly. This is because if you do it that way, you’ll have to add libcurl as a dependency _throughout_ the Swift build process, and it would all be pretty disruptive (and difficult to do).<br>&gt;&gt; 2. As a consequence of 1., you’ll need to wrap every function you call from libcurl in a new CoreFoundation API. See CFXMLInterface.h and CFXMLInterface.c for what I mean. Of course, this also gives you the opportunity to add nullability annotations, wrap things in CFString, CFError, CFArray, etc, so it’s not just busy-work for getting around the build system, heh. Just depends on how much C you want to write, you could just straight wrap the libcurl functions and do everything in Swift, but at the very least nullability annotations are a win here.<br>&gt; <br>&gt; <br>&gt; I just looked at this, and libxml2 is being linked against by SwiftFoundation, and NOT by CoreFoundation -- on Darwin.<br>&gt; <br>&gt; Is the correct approach to do what&#39;s been done with libxml2, or should I instead have CoreFoundation link against libcurl?<br>&gt; <br>&gt; /Daniel<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 23, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 23 Mar 2016, at 14:44, Philippe Hausler &lt;phausler at apple.com&gt; wrote:<br>&gt; <br>&gt; The swift-corelibs-foundation version of CF is a static library that is being built into the Foundation product dynamic library so the linkage for libxml2 and anything else should be on that.<br>&gt; <br>&gt; The layout of how linking works for the Darwin version is different because of how we split the layers. NSXMLParser is based on libxml2 in objc. It just does not need a CF abstraction/thunks to convert types.<br></p><p>Looking at the swift-corelibs-foundation Xcode project, the &quot;Link Binary With Libraries&quot; is empty for the CoreFoundation target, while it contains libxml2 for the SwiftFoundation target.<br></p><p>I&#39;d do the same for libcurl.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 23, 2016 at 06:00:00pm</p></header><div class="content"><p>I&#39;ve created this pull request in an attempt to get more feedback on my approach. I hope this is in line with the contribution guidelines.<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/299<br></p><p>This is will work-in-progress and marked as such.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>March 30, 2016 at 08:00:00pm</p></header><div class="content"><p>Changes since last week:<br></p><p>NSURLSessionDataTask (i.e. GET requests) now work with callbacks and with completion handler.<br></p><p>Debug output is enabled by environment variables.<br></p><p>Handling a few common error scenarios to return the corresponding NSError.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/79cd2bdc2074f4e69eac60743fe785fc?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Daniel Eggert</string> &lt;danieleggert at me.com&gt;<p>April  4, 2016 at 08:00:00pm</p></header><div class="content"><p>I won&#39;t be able to put too many more hours into this after next week.<br></p><p>https://github.com/apple/swift-corelibs-foundation/pull/299<br></p><p>Feedback is very welcome.<br></p><p>The tests show what&#39;s working, and there are &quot;TODO:&quot; markers throughout the code where applicable.<br></p><p>/Daniel<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c6761b86fcf674411c42ea5d32bbf6e5?s=50"></div><header><strong>NSURLSession &amp; libcurl</strong> from <string>Pushkar N Kulkarni</string> &lt;pushkar.nk at in.ibm.com&gt;<p>April 18, 2016 at 06:00:00pm</p></header><div class="content"><p>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160418/0b216d66/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
