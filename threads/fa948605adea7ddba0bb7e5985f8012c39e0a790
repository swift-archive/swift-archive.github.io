<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>January 29, 2016 at 11:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Modernizing Swift&#39;s Debugging Identifiers&quot; begins now and runs through February 2nd. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c40db4457ab2c91a0d8006da31b177c6?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Trent Nadeau</string> &lt;tanadeau at gmail.com&gt;<p>January 29, 2016 at 02:00:00pm</p></header><div class="content"><p>Proposal:<br>https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br></p><p>   - What is your evaluation of the proposal?<br>   - +1. This change makes the language more consistent in symbology and<br>      naming.<br>   - Is the problem being addressed significant enough to warrant a change<br>   to Swift?<br>   - Yes, consistency is important.<br>   - Does this proposal fit well with the feel and direction of Swift?<br>   - Yes<br>   - If you have you used other languages or libraries with a similar<br>   feature, how do you feel that this proposal compares to those?<br>   - Besides C/C++ from which the current names are based, I&#39;ve used Rust,<br>      which has vary similar naming to this proposal (line!, column!,<br>file!). The<br>      exclamation point suffix there is for a macro expanded by the compiler,<br>      similar to the # prefix in Swift.<br>   - How much effort did you put into your review? A glance, a quick<br>   reading, or an in-depth study?<br>   - I&#39;ve read and been involved in the swift-evolution thread from the<br>      beginning.<br></p><p><br>On Fri, Jan 29, 2016 at 2:31 PM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Modernizing Swift&#39;s Debugging Identifiers&quot; begins now and<br>&gt; runs through February 2nd. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Trent Nadeau<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/3beec16a/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>January 29, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>I&#39;m +1 on this. In my opinion it aligns well with other static compiler directives such as `#selector`, `#available`, #if`.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, those identifiers are used often when debugging (especially logging).<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>Definetely yes. It removes yet another C artifact which cannot be justified in any way except of familiarity. Also, `#`-prefixed keywords fit well with other compiler expressions (this argument was mentioned in the proposal itself).<br></p><p>&gt; If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Obviously, in C family languages. As C family libraries and frameworks tend to name their basic constants using `__SCREAMING_SNAKE_CASE__` format so that `__FILE__` fits well among them, it is not the case in Swift.<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 29.01.2016, o godz. 20:31:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Modernizing Swift&#39;s Debugging Identifiers&quot; begins now and runs through February 2nd. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/04f6ae44/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>January 29, 2016 at 11:00:00am</p></header><div class="content"><p>Same here<br>&gt; On Jan 29, 2016, at 11:49, Adrian Kashivskyy via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; What is your evaluation of the proposal?<br>&gt; <br>&gt; I&#39;m +1 on this. In my opinion it aligns well with other static compiler directives such as `#selector`, `#available`, #if`.<br>&gt; <br>&gt;&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, those identifiers are used often when debugging (especially logging).<br>&gt; <br>&gt;&gt; Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Definetely yes. It removes yet another C artifact which cannot be justified in any way except of familiarity. Also, `#`-prefixed keywords fit well with other compiler expressions (this argument was mentioned in the proposal itself).<br>&gt; <br>&gt;&gt; If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Obviously, in C family languages. As C family libraries and frameworks tend to name their basic constants using `__SCREAMING_SNAKE_CASE__` format so that `__FILE__` fits well among them, it is not the case in Swift.<br>&gt; <br>&gt; Pozdrawiam – Regards,<br>&gt; Adrian Kashivskyy<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/e3fdd2af/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 29, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; 	* What is your evaluation of the proposal?<br></p><p>+1. Seems like a good idea. But I do want to know why the proposal is leaving __FUNCTION__ alone instead of converting it to #function. All the other screaming snake case identifiers are being renamed, why not __FUNCTION__? I didn&#39;t read the original swift-evolution threads, was there some pushback against using the token #function? If so, it would be a good idea to include that in the proposal.<br></p><p>I&#39;d also suggest for the ambiguity with the existing #line directive that maybe the existing directive should be renamed to #setline, since that&#39;s really what it&#39;s doing.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yeah, the screaming snake case identifiers are an odd wart on the language.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>C has precedent for __FOO__ identifiers, which is why those make sense there. But other languages that don&#39;t have the __FOO__ precedent don&#39;t typically use __FILE__, __LINE__, e.g. for their equivalent functionality. For example, Rust uses the compiler-implemented macros file!(), line!(), etc. for this functionality. It makes sense for Swift to use e.g. #file for the same reasons that Rust uses file!().<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading of the proposal.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 1:16 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt; <br>&gt; +1. Seems like a good idea. But I do want to know why the proposal is leaving __FUNCTION__ alone instead of converting it to #function. All the other screaming snake case identifiers are being renamed, why not __FUNCTION__? I didn&#39;t read the original swift-evolution threads, was there some pushback against using the token #function? If so, it would be a good idea to include that in the proposal.<br></p><p>Function could be dropped, because it&#39;s picked up through #symbol. This is also why the proposal doesn&#39;t introduce #module, #type, etc the way earlier drafts discussed.<br></p><p>&gt; I&#39;d also suggest for the ambiguity with the existing #line directive that maybe the existing directive should be renamed to #setline, since that&#39;s really what it&#39;s doing.<br>&gt; <br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yeah, the screaming snake case identifiers are an odd wart on the language.<br>&gt; <br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; Yes.<br>&gt; <br>&gt;&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; C has precedent for __FOO__ identifiers, which is why those make sense there. But other languages that don&#39;t have the __FOO__ precedent don&#39;t typically use __FILE__, __LINE__, e.g. for their equivalent functionality. For example, Rust uses the compiler-implemented macros file!(), line!(), etc. for this functionality. It makes sense for Swift to use e.g. #file for the same reasons that Rust uses file!().<br>&gt; <br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; A quick reading of the proposal.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jan 29, 2016, at 12:25 PM, Erica Sadun wrote:<br>&gt; Function could be dropped, because it&#39;s picked up through #symbol. This is also why the proposal doesn&#39;t introduce #module, #type, etc the way earlier drafts discussed.<br></p><p>So you&#39;re expecting another proposal to introduce #symbol and to be accepted for the same Swift release?<br></p><p>I&#39;d think it makes more sense to have this proposal replace __FUNCTION__ with #function for now, and then a separate proposal that introduces #symbol would override that to remove #function entirely. If both proposals make it into the same Swift release then we&#39;d never actually have #function at all, but by doing it this way, if the #symbol proposal doesn&#39;t make it into the same release, or is rejected, then we&#39;d end up with #function instead of leaving __FUNCTION__ around as the lone screaming snake case identifier.<br></p><p>-Kevin Ballard<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 3:06 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jan 29, 2016, at 12:25 PM, Erica Sadun wrote:<br>&gt;&gt; Function could be dropped, because it&#39;s picked up through #symbol. This is also why the proposal doesn&#39;t introduce #module, #type, etc the way earlier drafts discussed.<br>&gt; <br>&gt; So you&#39;re expecting another proposal to introduce #symbol and to be accepted for the same Swift release?<br>&gt; <br>&gt; I&#39;d think it makes more sense to have this proposal replace __FUNCTION__ with #function for now, and then a separate proposal that introduces #symbol would override that to remove #function entirely. If both proposals make it into the same Swift release then we&#39;d never actually have #function at all, but by doing it this way, if the #symbol proposal doesn&#39;t make it into the same release, or is rejected, then we&#39;d end up with #function instead of leaving __FUNCTION__ around as the lone screaming snake case identifier.<br></p><p>+1.  At least one of the two should be accepted as part of this proposal.<br></p><p>&gt; <br>&gt; -Kevin Ballard<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>+1 from me as I prefer to say octothorpe to sharp or pound and I don&#39;t like snakes! :-) Seriously though the proposed solution is easier on the eyes when you encounter them.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>January 29, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Jan 29, 2016, at 2:06 PM, Kevin Ballard &lt;kevin at sb.org&gt; wrote:<br>&gt; <br>&gt; On Fri, Jan 29, 2016, at 12:25 PM, Erica Sadun wrote:<br>&gt;&gt; Function could be dropped, because it&#39;s picked up through #symbol. This is also why the proposal doesn&#39;t introduce #module, #type, etc the way earlier drafts discussed.<br>&gt; <br>&gt; So you&#39;re expecting another proposal to introduce #symbol and to be accepted for the same Swift release?<br>&gt; <br>&gt; I&#39;d think it makes more sense to have this proposal replace __FUNCTION__ with #function for now, and then a separate proposal that introduces #symbol would override that to remove #function entirely. If both proposals make it into the same Swift release then we&#39;d never actually have #function at all, but by doing it this way, if the #symbol proposal doesn&#39;t make it into the same release, or is rejected, then we&#39;d end up with #function instead of leaving __FUNCTION__ around as the lone screaming snake case identifier.<br>&gt; <br>&gt; -Kevin Ballard<br></p><p>The choice of #symbol and/or #function are both included in the detailed design for this proposal. <br>I do not intend to propose again to introduce #symbol.<br></p><p>-- Erica<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>January 29, 2016 at 02:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>+1.  I really like the idea of using octothorpe for compiler-supported expressions.<br></p><p>I would like to see either #file and / or #symbol included.<br></p><p>I also like Kevin’s idea of renaming the existing #line to #setline.  That reduces potential confusion while giving the existing feature a better name.<br></p><p>Even better would be the #sourcelocation<br></p><p>	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, it improves overall consistency of the language and removes the shouty legacy from C.<br></p><p>	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I followed the original thread, read the proposal, and also previous reviews.<br></p><p>&gt; On Jan 29, 2016, at 1:31 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Modernizing Swift&#39;s Debugging Identifiers&quot; begins now and runs through February 2nd. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution-announce mailing list<br>&gt; swift-evolution-announce at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution-announce<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4a300fb6ff17dc07df9be5e863e0c98a?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Nate Birkholz</string> &lt;nbirkholz at gmail.com&gt;<p>January 29, 2016 at 01:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br>+1, I like the idea and the implemntation.<br></p><p>* Is the problem being addressed significant enough to warrant a change to<br>Swift?<br>Yes, it helps make the language more cohesive.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br>Absolutely. It brings the syntax in line with the language at large.<br></p><p>* If you have you used other languages or libraries with a similar feature,<br>how do you feel that this proposal compares to those?<br>I feel it is less jarring to read.<br></p><p>* How much effort did you put into your review? A glance, a quick reading,<br>or an in-depth study?<br>A quick reading fo the fianl proposal but I followed the discussion closely.<br></p><p><br>On Fri, Jan 29, 2016 at 11:31 AM, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;Modernizing Swift&#39;s Debugging Identifiers&quot; begins now and<br>&gt; runs through February 2nd. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and, eventually, determine the direction of<br>&gt; Swift. When writing your review, here are some questions you might want to<br>&gt; answer in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have you used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p><br></p><p>-- <br>Nate Birkholz<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160129/01335889/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>January 29, 2016 at 03:00:00pm</p></header><div class="content"><p>I am mostly concerned by the ambiguity of the new #line _identifier_ with the existing #line _directive_. As the proposal mentions, the two can be syntactically disambiguated by constraining the #line directive to column 1. Aesthetically, using the same #ident syntax for identifiers that grammatically behave like literals and for compiler directives that trigger an action during compilation seems a little inconsistent to me.<br></p><p>Like the __LINE__ identifier the #line directive inherited its syntax from the C preprocessor. In the case of the #line directive, there is value in using this inherited syntax because it is compatible with many preprocessing tools and code generators that output this format. If we change the syntax of the #line directive, we’re no longer compatible with these tools.<br></p><p><br>&gt; 	* What is your evaluation of the proposal?<br>I support the variant of the proposal that renames the __LINE__ identifier to #linenumber.<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>N/A<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Yes<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>A quick reading.<br></p><p>-- adrian<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d04f3c48ab68a1dd3e712dcab04004ce?s=50"></div><header><strong>[Review] SE-0028 Modernizing Swift&#39;s Debugging Identifiers (__LINE__, etc)</strong> from <string>Curt Clifton</string> &lt;curt at omnigroup.com&gt;<p>January 30, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md<br></p><p>&gt;    * What is your evaluation of the proposal?<br></p><p>I am in favor of the proposal. <br></p><p>As far as the detailed design decisions, I&#39;m in favor of adding including #symbol and #function.<br></p><p>I continue to prefer #sourcelocation and a SourceLocation type as the right design ultimately, but think the current proposal is a sensible first step towards normalization (and may prove sufficient in practice).<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. <br></p><p>Normalizing the syntax of compiler magic reduces the complexity of the language and allows users to learn to associate octothorp with a set of expressions/operations. That ultimately makes discovery easier as well. E.g., I know what section of the docs to look at to find the thing I recall exists but don&#39;t know how to spell.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt;    * If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>The current snake case was natural from a C/Obj-C background. Obj-C adds `_cmd` to the mix. The proposed octothorp-prefixed expressions provides similar expressiveness with a Swiftier syntax.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I skim the original subthread in the review of SE-0022. I read and participated in the full thread workshopping the draft of the current proposal. I read the current proposal a couple of times to be sure I didn&#39;t miss anything.<br></p><p>Cheers, <br></p><p>Curt<br>------------------------- <br>Curt Clifton, PhD <br>Software Developer <br>The Omni Group <br>www.curtclifton.net<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
