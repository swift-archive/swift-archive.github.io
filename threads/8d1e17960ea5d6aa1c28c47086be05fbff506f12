<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf40be92f231a15e81512b93a3cd0136?s=50"></div><header><strong>Thoughts on &quot;Fully eliminate implicit bridging conversions from Swift&quot;</strong> from <string>simon gladman</string> &lt;sgladman at gmail.com&gt;<p>May 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Apologies for arriving a little late to the party and I hope this is a<br>suitable forum to discuss this subject. I&#39;ve spent some time over the last<br>few days moving a large Core Image project to Swift 3.0 and come across<br>some side effects which I think are related to proposal SE-0072, *Fully<br>eliminate implicit bridging conversions from Swift*.<br></p><p>First off, rightly or wrongly, I&#39;ve always typed the scalar parameters of<br>my subclassed *CIFilters* as *CGFloat*. It makes working with *CIVectors*<br>and *CGRects* cleaner and feels more &quot;Swifty&quot; than using *NSNumber*.<br>However, moving to Swift 3.0, using anything apart from an *NSNumber*<br>breaks. For example:<br></p><p>        let radius: CGFloat = 25<br></p><p><br></p><p>        let blur = CIFilter(<br></p><p>            name: &quot;CIGaussianBlur&quot;,<br></p><p>            withInputParameters: [kCIInputRadiusKey: radius])<br></p><p>The same with passing arguments to a *CIKernel*, *CIWarpKernel* or<br>*CIColorKernel*:<br></p><p>        kernel.apply(<br></p><p>            withExtent: CGRect(x: 0, y: 0, width: 100, height: 100),<br></p><p>            arguments: [radius])<br></p><p>Secondly, the attributes property of a filter (of type *[String: AnyObject]*)<br>which I&#39;d normally code along the lines of:<br></p><p>    override var attributes: [String : AnyObject]<br></p><p>    {<br></p><p>        return [<br></p><p>            &quot;inputImage&quot;: [<br></p><p>                 kCIAttributeIdentity: 0,<br></p><p>                 kCIAttributeClass: &quot;CIImage&quot;,<br></p><p>                 kCIAttributeDisplayName: &quot;Image&quot;,<br></p><p>                 kCIAttributeType: kCIAttributeTypeScalar]<br></p><p>        ]<br></p><p>    }<br></p><p>...fails to compile. kCIAttributeTypeScalar is of type *String* and needs<br>to be cast to *NSString* and the dictionary itself needs to be cast to<br>*AnyObject*:<br></p><p>    override var attributes: [String : AnyObject]<br></p><p>    {<br></p><p>        return [<br></p><p>            &quot;inputImage&quot;: [<br></p><p>                 kCIAttributeIdentity: 0,<br></p><p>                 kCIAttributeClass: &quot;CIImage&quot;,<br></p><p>                 kCIAttributeDisplayName: &quot;Image&quot;,<br></p><p>                 kCIAttributeType: kCIAttributeTypeScalar as NSString] as<br>AnyObject<br></p><p>        ]<br></p><p>    }<br></p><p>It seems awkward to me that the constant supplied by Core Image to describe<br>an attribute&#39;s type needs to be cast to another type to get it working.<br></p><p>Are these changes just something that we&#39;ll need to live with? Are they<br>still in flux? Have I totally misunderstood everything and there&#39;s a more<br>elegant solution?<br></p><p>Any thoughts would be greatly appreciated!<br></p><p>Simon<br></p><p><br>Simon Gladman     +44 7973 669691<br></p><p>Blog: http://flexmonkey.blogspot.co.uk<br>GitHub: https://github.com/FlexMonkey<br>Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/8d1e6f12/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Thoughts on &quot;Fully eliminate implicit bridging conversions from Swift&quot;</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>May 24, 2016 at 06:00:00pm</p></header><div class="content"><p>What error do you get (i.e. why doesn&#39;t it compile)?<br></p><p>Have you tried this?<br></p><p>let result: [String : AnyObject] = [<br>	&quot;inputImage&quot;: [<br>		kCIAttributeIdentity: 0,<br>		kCIAttributeClass: &quot;CIImage&quot;,<br>		kCIAttributeDisplayName: &quot;Image&quot;,<br>		kCIAttributeType: kCIAttributeTypeScalar<br>	]<br>]<br>return result<br></p><p>Charlie<br></p><p>&gt; On May 24, 2016, at 6:07 PM, simon gladman via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Apologies for arriving a little late to the party and I hope this is a suitable forum to discuss this subject. I&#39;ve spent some time over the last few days moving a large Core Image project to Swift 3.0 and come across some side effects which I think are related to proposal SE-0072, Fully eliminate implicit bridging conversions from Swift.<br>&gt; <br>&gt; First off, rightly or wrongly, I&#39;ve always typed the scalar parameters of my subclassed CIFilters as CGFloat. It makes working with CIVectors and CGRects cleaner and feels more &quot;Swifty&quot; than using NSNumber. However, moving to Swift 3.0, using anything apart from an NSNumber breaks. For example:<br>&gt; <br>&gt;         let radius: CGFloat = 25<br>&gt;         <br>&gt;         let blur = CIFilter(<br>&gt;             name: &quot;CIGaussianBlur&quot;,<br>&gt;             withInputParameters: [kCIInputRadiusKey: radius])<br>&gt; <br>&gt; The same with passing arguments to a CIKernel, CIWarpKernel or CIColorKernel:<br>&gt; <br>&gt;         kernel.apply(<br>&gt;             withExtent: CGRect(x: 0, y: 0, width: 100, height: 100),<br>&gt;             arguments: [radius])<br>&gt; <br>&gt; Secondly, the attributes property of a filter (of type [String: AnyObject]) which I&#39;d normally code along the lines of:<br>&gt; <br>&gt;     override var attributes: [String : AnyObject]<br>&gt;     {<br>&gt;         return [<br>&gt;             &quot;inputImage&quot;: [<br>&gt;                  kCIAttributeIdentity: 0,<br>&gt;                  kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                  kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                  kCIAttributeType: kCIAttributeTypeScalar]<br>&gt;         ]<br>&gt;     }<br>&gt; <br>&gt; ...fails to compile. kCIAttributeTypeScalar is of type String and needs to be cast to NSString and the dictionary itself needs to be cast to AnyObject:<br>&gt; <br>&gt;     override var attributes: [String : AnyObject]<br>&gt;     {<br>&gt;         return [<br>&gt;             &quot;inputImage&quot;: [<br>&gt;                  kCIAttributeIdentity: 0,<br>&gt;                  kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                  kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                  kCIAttributeType: kCIAttributeTypeScalar as NSString] as AnyObject<br>&gt;         ]<br>&gt;     }<br>&gt; <br>&gt; It seems awkward to me that the constant supplied by Core Image to describe an attribute&#39;s type needs to be cast to another type to get it working. <br>&gt; <br>&gt; Are these changes just something that we&#39;ll need to live with? Are they still in flux? Have I totally misunderstood everything and there&#39;s a more elegant solution?<br>&gt; <br>&gt; Any thoughts would be greatly appreciated!<br>&gt; <br>&gt; Simon<br>&gt; <br>&gt; <br>&gt; Simon Gladman     +44 7973 669691 &lt;tel:%2B44%207973%20669691&gt;<br>&gt; <br>&gt; Blog: http://flexmonkey.blogspot.co.uk &lt;http://flexmonkey.blogspot.co.uk/&gt;<br>&gt; GitHub: https://github.com/FlexMonkey &lt;https://github.com/FlexMonkey&gt;<br>&gt; Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/3134ecbb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cf40be92f231a15e81512b93a3cd0136?s=50"></div><header><strong>Thoughts on &quot;Fully eliminate implicit bridging conversions from Swift&quot;</strong> from <string>simon gladman</string> &lt;sgladman at gmail.com&gt;<p>May 24, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>The error is get is &quot;*Contextual type &#39;AnyObject&#39; cannot be used with<br>dictionary literal*&quot; - and I get the same issue with your approach.<br></p><p>With the CGFloat, I get &quot;*Value of type &#39;CGFloat&#39; does not conform to<br>expected dictionary value type &#39;AnyObject&#39;*&#39;&quot;.<br></p><p>Simon<br></p><p><br></p><p>Simon Gladman     +44 7973 669691<br></p><p>Blog: http://flexmonkey.blogspot.co.uk<br>GitHub: https://github.com/FlexMonkey<br>Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br></p><p><br>On 24 May 2016 at 17:18, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br></p><p>&gt; What error do you get (i.e. why doesn&#39;t it compile)?<br>&gt;<br>&gt; Have you tried this?<br>&gt;<br>&gt; let result: [String : AnyObject] = [<br>&gt; &quot;inputImage&quot;: [<br>&gt; kCIAttributeIdentity: 0,<br>&gt; kCIAttributeClass: &quot;CIImage&quot;,<br>&gt; kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt; kCIAttributeType: kCIAttributeTypeScalar<br>&gt; ]<br>&gt; ]<br>&gt; return result<br>&gt;<br>&gt; Charlie<br>&gt;<br>&gt; On May 24, 2016, at 6:07 PM, simon gladman via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; Apologies for arriving a little late to the party and I hope this is a<br>&gt; suitable forum to discuss this subject. I&#39;ve spent some time over the last<br>&gt; few days moving a large Core Image project to Swift 3.0 and come across<br>&gt; some side effects which I think are related to proposal SE-0072, *Fully<br>&gt; eliminate implicit bridging conversions from Swift*.<br>&gt;<br>&gt; First off, rightly or wrongly, I&#39;ve always typed the scalar parameters of<br>&gt; my subclassed *CIFilters* as *CGFloat*. It makes working with *CIVectors*<br>&gt; and *CGRects* cleaner and feels more &quot;Swifty&quot; than using *NSNumber*.<br>&gt; However, moving to Swift 3.0, using anything apart from an *NSNumber*<br>&gt; breaks. For example:<br>&gt;<br>&gt;         let radius: CGFloat = 25<br>&gt;<br>&gt;<br>&gt;         let blur = CIFilter(<br>&gt;             name: &quot;CIGaussianBlur&quot;,<br>&gt;             withInputParameters: [kCIInputRadiusKey: radius])<br>&gt;<br>&gt; The same with passing arguments to a *CIKernel*, *CIWarpKernel* or<br>&gt; *CIColorKernel*:<br>&gt;<br>&gt;         kernel.apply(<br>&gt;             withExtent: CGRect(x: 0, y: 0, width: 100, height: 100),<br>&gt;             arguments: [radius])<br>&gt;<br>&gt; Secondly, the attributes property of a filter (of type *[String:<br>&gt; AnyObject]*) which I&#39;d normally code along the lines of:<br>&gt;<br>&gt;     override var attributes: [String : AnyObject]<br>&gt;     {<br>&gt;         return [<br>&gt;             &quot;inputImage&quot;: [<br>&gt;                  kCIAttributeIdentity: 0,<br>&gt;                  kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                  kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                  kCIAttributeType: kCIAttributeTypeScalar]<br>&gt;         ]<br>&gt;     }<br>&gt;<br>&gt; ...fails to compile. kCIAttributeTypeScalar is of type *String* and needs<br>&gt; to be cast to *NSString* and the dictionary itself needs to be cast to<br>&gt; *AnyObject*:<br>&gt;<br>&gt;     override var attributes: [String : AnyObject]<br>&gt;     {<br>&gt;         return [<br>&gt;             &quot;inputImage&quot;: [<br>&gt;                  kCIAttributeIdentity: 0,<br>&gt;                  kCIAttributeClass: &quot;CIImage&quot;,<br>&gt;                  kCIAttributeDisplayName: &quot;Image&quot;,<br>&gt;                  kCIAttributeType: kCIAttributeTypeScalar as NSString] as<br>&gt; AnyObject<br>&gt;         ]<br>&gt;     }<br>&gt;<br>&gt; It seems awkward to me that the constant supplied by Core Image to<br>&gt; describe an attribute&#39;s type needs to be cast to another type to get it<br>&gt; working.<br>&gt;<br>&gt; Are these changes just something that we&#39;ll need to live with? Are they<br>&gt; still in flux? Have I totally misunderstood everything and there&#39;s a more<br>&gt; elegant solution?<br>&gt;<br>&gt; Any thoughts would be greatly appreciated!<br>&gt;<br>&gt; Simon<br>&gt;<br>&gt;<br>&gt; Simon Gladman     +44 7973 669691<br>&gt;<br>&gt; Blog: http://flexmonkey.blogspot.co.uk<br>&gt; GitHub: https://github.com/FlexMonkey<br>&gt; Twitter: @FlexMonkey &lt;https://twitter.com/FlexMonkey&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160524/f43ad9b3/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
