<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4c9c44262e8b58b758a3876b9d29c095?s=50"></div><header><strong>Proposal: Package Manager Version Pinning</strong> from <string>Georgios Moschovitis</string> &lt;george.moschovitis at icloud.com&gt;<p>October 16, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; In Swift, we have pretty consistently tried to choose the &quot;right&quot; answer to make the resulting language consistent and beautiful.<br>&gt; I&#39;m perfectly happy to have a discussion about the naming, but I would like it to be driven by what we believe the &quot;right&quot; answer is, not simply by deference to existing solutions.<br></p><p>+100<br></p><p>Moreover, after your explanation, `lock` feels wrong to me too.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/14f382feb5f0dd3d3700edf8d6156aa9?s=50"></div><header><strong>Proposal: Package Manager Version Pinning</strong> from <string>Jay Abbott</string> &lt;jay at abbott.me.uk&gt;<p>October 17, 2016 at 02:00:00am</p></header><div class="content"><p>I like the core idea here, but I feel that it could potentially prevent<br>teams updating, through focus on other things and general<br>laziness/ignorance to what&#39;s going on with external dependencies. Although<br>this gives me a separate idea...<br></p><p>How about an additional feature that can be run manually if desired, or<br>more likely run as a daily/overnight job on CI. I&#39;m not entirely sure what<br>the command would be or how it would work exactly, but the general idea<br>would be:<br></p><p>* Build a list of dependencies that can potentially be updated (from the<br>entire dependency graph).<br>* For each updatable dependency in the list {<br>    * Keep all the other pins as-they-were and fetch the updated dependency.<br>    * Build the project and run its tests.<br>    * Keep track of which ones worked and which ones failed.<br>}<br>* If there are updatable dependencies that build successfully, and all<br>(your project) tests still pass - this can to be reported to the<br>development team.<br></p><p>This way, teams could use pinning and automate checking for compatible<br>updates. Also package owners could potentially be notified (with explicit<br>consent of their users) if they broke compatibility in what should have<br>been a compatible release. I realise that not everything going on here is<br>inside the remit of a package manager, but the package manager could<br>provide functionality to help with such things, a bit like git-bisect. Then<br>again, the SPM community proposal seems to cast quite a wide potential<br>remit.<br></p><p>An additional cool feature would be some mechanism to allow notifications<br>to the package owner if what they have released as compatible (according to<br>the version) actually isn&#39;t. Explicit opt-in from users for this one of<br>course, with options for what information to include. Maybe swift.org could<br>host this for package owners, and usage stats for them too?<br></p><p>On Sun, 16 Oct 2016 at 18:06 Georgios Moschovitis via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; In Swift, we have pretty consistently tried to choose the &quot;right&quot; answer<br>to make the resulting language consistent and beautiful.<br>&gt; I&#39;m perfectly happy to have a discussion about the naming, but I would<br>like it to be driven by what we believe the &quot;right&quot; answer is, not simply<br>by deference to existing solutions.<br></p><p>+100<br></p><p>Moreover, after your explanation, `lock` feels wrong to me too.<br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161017/2a51248f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>Proposal: Package Manager Version Pinning</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>October 16, 2016 at 09:00:00pm</p></header><div class="content"><p>Hi Jay,<br></p><p>&gt; On Oct 16, 2016, at 7:14 PM, Jay Abbott &lt;jay at abbott.me.uk&gt; wrote:<br>&gt; <br>&gt; <br>&gt; I like the core idea here, but I feel that it could potentially prevent teams updating, through focus on other things and general laziness/ignorance to what&#39;s going on with external dependencies. Although this gives me a separate idea...<br></p><p>I hope to tackle this through features which will help notify you when new versions you could upgrade to are available. I hope the default practice in the ecosystem will then become to heed those notifications and update.<br></p><p>&gt; How about an additional feature that can be run manually if desired, or more likely run as a daily/overnight job on CI. I&#39;m not entirely sure what the command would be or how it would work exactly, but the general idea would be:<br>&gt; <br>&gt; * Build a list of dependencies that can potentially be updated (from the entire dependency graph).<br>&gt; * For each updatable dependency in the list {<br>&gt;     * Keep all the other pins as-they-were and fetch the updated dependency.<br>&gt;     * Build the project and run its tests.<br>&gt;     * Keep track of which ones worked and which ones failed.<br>&gt; }<br>&gt; * If there are updatable dependencies that build successfully, and all (your project) tests still pass - this can to be reported to the development team.<br>&gt; <br>&gt; This way, teams could use pinning and automate checking for compatible updates. Also package owners could potentially be notified (with explicit consent of their users) if they broke compatibility in what should have been a compatible release. I realise that not everything going on here is inside the remit of a package manager, but the package manager could provide functionality to help with such things, a bit like git-bisect. Then again, the SPM community proposal seems to cast quite a wide potential remit.<br>&gt; <br>&gt; An additional cool feature would be some mechanism to allow notifications to the package owner if what they have released as compatible (according to the version) actually isn&#39;t. Explicit opt-in from users for this one of course, with options for what information to include. Maybe swift.org &lt;http://swift.org/&gt; could host this for package owners, and usage stats for them too?<br></p><p>Both of the features you propose make a lot of sense to me, and are things I definitely would like to see us do in time.<br></p><p>For now, though, I see this feature as a &quot;building block&quot; towards those directions. Others can build on top of this feature to create automated systems like the ones you describe, I don&#39;t think we need to try and tackle everything ourselves in the initial proposal.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; On Sun, 16 Oct 2016 at 18:06 Georgios Moschovitis via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt; In Swift, we have pretty consistently tried to choose the &quot;right&quot; answer to make the resulting language consistent and beautiful.<br>&gt; &gt; I&#39;m perfectly happy to have a discussion about the naming, but I would like it to be driven by what we believe the &quot;right&quot; answer is, not simply by deference to existing solutions.<br>&gt; <br>&gt; +100<br>&gt; <br>&gt; Moreover, after your explanation, `lock` feels wrong to me too.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161016/46311866/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
