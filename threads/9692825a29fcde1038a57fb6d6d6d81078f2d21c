<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0735d3bf1d76c0385258ac7a2a22d6fe?s=50"></div><header><strong>An Alternative for Extensibility Modifiers</strong> from <string>Károly Lőrentey</string> &lt;karoly at lorentey.hu&gt;<p>July 12, 2016 at 12:00:00pm</p></header><div class="content"><p>On 2016-07-12 09:12:36 +0000, Jonathan Hull via swift-evolution said:<br></p><p>&gt; With all the controversy around proposal 0117, I thought I would take a <br>&gt; stab at an alternative approach that attempts to balance the concerns <br>&gt; of both sides of the argument.  I don’t know that it would be <br>&gt; everyone&#39;s first choice, but I think/hope it would be acceptable to the <br>&gt; vast majority.<br>&gt; <br>&gt; Take a look here and let me know if you think it is worth flushing out:<br>&gt; https://gist.github.com/jonhull/a5ac84a16b7a0ffc0c00747998f390d9<br>&gt; <br>&gt; <br>&gt; The basic idea (for those who hate clicking links) is to create 3 <br>&gt; levels of extensibility:<br>&gt; 	• Open -  The class or method is open to be extended through <br>&gt; subclassing/override.<br>&gt; 	• Sealed - Attempting to subclass/override the class/method will <br>&gt; result in a compiler error saying that it is not intended to be <br>&gt; extended. Using the ‘unsafe&#39; keyword will allow compilation.<br>&gt; 	• Final - The class or method can not be subclassed/overridden. <br>&gt; Attempting to do so will result in a compiler error.<br>&gt; <br>&gt; These would be orthogonal to access modifiers.  Thus you would write <br>&gt; ‘public open’, which is admittedly two words… but together they are <br>&gt; actually shorter than the single ‘subclassable’ keyword<br>&gt; <br>&gt; You can also specify different levels of extensibility at different <br>&gt; levels of visibility (e.g. ‘public final internal(open)’)<br>&gt; <br>&gt; The default would be ‘sealed internal(open)’ which means it is publicly <br>&gt; sealed, but open within the defining module.  This is similar to the <br>&gt; default of 0117, except it allows overriding using the ‘unsafe’ keyword <br>&gt; (where the user explicitly acknowledges that subclassing/overriding is <br>&gt; not supported by the API).<br></p><p>It seems to me adding such an escape hatch makes the entire point of <br>the proposal moot.<br></p><p>If I say a class I define is internal or private, you have no business <br>poking at it from an external module; if I say my class is sealed or <br>final, you have no business subclassing it from an external module. <br>Swift provides no escape hatch that exposes internal components of a <br>module; I don&#39;t see why subclassibility requirements should be treated <br>otherwise.<br></p><p>Note that most popular OOP languages provide well-known patterns for <br>creating sealed but public classes, where only the author is able to <br>create subclasses. These patterns typically involve hiding class <br>constructors from external modules. If Swift was changed to support <br>sealed classes the same way, would you then propose a language feature <br>to defeat access modifiers?<br></p><p>&gt; Thus, we lose some compiler optimizations in the default case (vs <br>&gt; 0117), but these can easily be regained by explicitly marking parts of <br>&gt; the API as final.  The semantic meaning of the 0117 default is kept, <br>&gt; with an escape hatch for problematic API.  Thoughtful framework writers <br>&gt; would go through and mark API as either ‘public open’ or ‘public <br>&gt; final’.  Less thoughtful framework authors would still get feedback <br>&gt; asking them to do so, since nobody likes having the word ‘unsafe’ in <br>&gt; their code when they don’t have to.<br>&gt; <br>&gt; This design feels much Swiftier™ to me because it has opt-out safety <br>&gt; and opt-in risk.  It protects you from accidentally causing trouble, <br>&gt; but gets out of your way when you tell it you know what you are doing.<br></p><p><br>-- <br>Károly<br>@lorentey<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
