<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] `Int.init(ObjectIdentifier)` and `UInt.init(ObjectIdentifier)` should have a `bitPattern:` label</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July 15, 2016 at 02:00:00pm</p></header><div class="content"><p>on Fri Jul 15 2016, Arnold Schwaighofer &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is probably uncontroversial.<br>&gt;<br>&gt; PR: https://github.com/apple/swift-evolution/pull/434<br></p><p>+1<br></p><p>&gt;&gt; On Jul 13, 2016, at 4:39 PM, Arnold Schwaighofer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Int.init(ObjectIdentifier) and UInt.init(ObjectIdentifier) should have a &#39;bitPattern:’ label to make it clear at the use site that we interpret the value as a bit pattern.<br>&gt;&gt; <br>&gt;&gt; In Swift we have ObjectIdentifier values which uniquely identify a class instance or metatype. They are implemented as a struct which holds the value of the reference to the instance or metatype as a raw pointer.<br>&gt;&gt; <br>&gt;&gt;  /// A unique identifier for a class instance or metatype.<br>&gt;&gt;  public struct ObjectIdentifier : Hashable, Comparable {<br>&gt;&gt;    internal let _value: Builtin.RawPointer<br>&gt;&gt;    ...<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We have constructors for Int and Uint that capture this value. These constructors don’t have an argument label.<br>&gt;&gt; <br>&gt;&gt;  extension UInt {<br>&gt;&gt;    /// Create a `UInt` that captures the full value of `objectID`.<br>&gt;&gt;    public init(_ objectID: ObjectIdentifier) {<br>&gt;&gt;      self.init(Builtin.ptrtoint_Word(objectID._value))<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt;  extension Int {<br>&gt;&gt;    /// Create an `Int` that captures the full value of `objectID`.<br>&gt;&gt;    public init(_ objectID: ObjectIdentifier) {<br>&gt;&gt;      self.init(bitPattern: UInt(objectID))<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; This proposals suggest adding a label ‘bitPattern’ to the constructor: Int.init(bitPattern: ObjectIdentifier).<br>&gt;&gt; <br>&gt;&gt;  extension UInt {<br>&gt;&gt;    /// Create a `UInt` that captures the full value of `objectID`.<br>&gt;&gt;    public init(bitPattern objectID: ObjectIdentifier) {<br>&gt;&gt;      self.init(Builtin.ptrtoint_Word(objectID._value))<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt;  extension Int {<br>&gt;&gt;    /// Create an `Int` that captures the full value of `objectID`.<br>&gt;&gt;    public init(bitPattern objectID: ObjectIdentifier) {<br>&gt;&gt;      self.init(bitPattern: UInt(objectID))<br>&gt;&gt;    }<br>&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Motivation<br>&gt;&gt; ==========<br>&gt;&gt; <br>&gt;&gt; Adding a label ‘bitPattern’ to the constructors makes it clear that we interpret the pointer value as a bit pattern at the use site. It is similar to what we do in other APIs, for example in &quot;UInt(bitPattern: UnsafePointer&lt;Void&gt;(value)))&quot;<br>&gt;&gt; <br>&gt;&gt; Impact on existing code<br>&gt;&gt; =======================<br>&gt;&gt; <br>&gt;&gt; Existing code will have to add the bitPattern label.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Alternatives<br>&gt;&gt; ============<br>&gt;&gt; <br>&gt;&gt; Leave as is.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
