<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Notification.Name</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 29, 2016 at 07:00:00pm</p></header><div class="content"><p>Not 100% sure this belongs here, but I&#39;ll bite.<br></p><p>The new `Notification.Name` type is a beautiful application of SE-0033 &quot;Import Objective-C Constants as Swift Types&quot;[1] which removes a lot of boilerplate. However,  I think it puts the resulting constants in the wrong place. They all get piled into `Notification.Name`, resulting in:<br></p><p>	Notification.Name.NSSystemTimeZoneDidChange<br>	Notification.Name.NSThreadWillExit<br>	Notification.Name.NSURLCredentialStorageChanged<br>	Notification.Name.NSUbiquityIdentityDidChange<br>	Notification.Name.NSUndoManagerCheckpoint<br></p><p>I think these would be a lot better off as:<br></p><p>	TimeZone.systemTimeZoneDidChange<br>	Thread.willExit<br>	URLCredentialStorage.changed<br>	FileManager.ubiquityIdentityDidChange<br>	UndoManager.checkpoint<br></p><p>Most of these could probably be inferred by prefix matching, but some, like `TimeZone.systemTimeZoneDidChange` and `FileManager.ubiquityIdentityDidChange`, would probably have to be done manually. There might even be a few which have no natural attachment point, though I can&#39;t think of any off the top of my head.<br></p><p>To be clear, I don&#39;t think we want this behavior on all `swift_wrapper` types. For instance, the specified behavior is probably appropriate for `HKQuantityTypeIdentifier` and `NSErrorDomain`, the primary examples in SE-0033. But `Notification.Name` is a slightly different use from what we imagined for this feature, and I think it needs a slightly different behavior.<br></p><p>So, what&#39;s the best way to pursue fixing this issue?<br></p><p>1. A new proposal, perhaps introducing `swift_wrapper(struct,prefix_matched)`?<br></p><p>2. An amendment to SE-0033?<br></p><p>3. A radar filed with the Foundation team?<br></p><p>4. A blizzard of radars filed with *every* framework team?<br></p><p>5. Deferral to post-Swift 3?<br></p><p><br></p><p>[1] https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>Notification.Name</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>June 30, 2016 at 05:00:00pm</p></header><div class="content"><p>[Cc: Michael Ilseman]<br></p><p>&gt; On 30 Jun 2016, at 03:13, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Not 100% sure this belongs here, but I&#39;ll bite.<br>&gt; <br>&gt; The new `Notification.Name` type is a beautiful application of SE-0033 &quot;Import Objective-C Constants as Swift Types&quot;[1] which removes a lot of boilerplate. However,  I think it puts the resulting constants in the wrong place. They all get piled into `Notification.Name`, resulting in:<br>&gt; <br>&gt; 	Notification.Name.NSSystemTimeZoneDidChange<br>&gt; 	Notification.Name.NSThreadWillExit<br>&gt; 	Notification.Name.NSURLCredentialStorageChanged<br>&gt; 	Notification.Name.NSUbiquityIdentityDidChange<br>&gt; 	Notification.Name.NSUndoManagerCheckpoint<br>&gt; <br>&gt; I think these would be a lot better off as:<br>&gt; <br>&gt; 	TimeZone.systemTimeZoneDidChange<br>&gt; 	Thread.willExit<br>&gt; 	URLCredentialStorage.changed<br>&gt; 	FileManager.ubiquityIdentityDidChange<br>&gt; 	UndoManager.checkpoint<br>&gt; <br>&gt; Most of these could probably be inferred by prefix matching, but some, like `TimeZone.systemTimeZoneDidChange` and `FileManager.ubiquityIdentityDidChange`, would probably have to be done manually. There might even be a few which have no natural attachment point, though I can&#39;t think of any off the top of my head.<br></p><p>Is this another case where SE-0033 and SE-0044 can work together?<br>&lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/19946&gt;<br></p><p>For example, in &lt;Foundation/NSTimeZone.h&gt; by adding the `swift_name` attribute:<br></p><p>	FOUNDATION_EXPORT NSNotificationName const NSSystemTimeZoneDidChangeNotification<br>	NS_SWIFT_NAME(TimeZone.systemTimeZoneDidChange);<br></p><p>The constant should hopefully be imported into Swift as:<br></p><p>	extension TimeZone {<br>	    public static let systemTimeZoneDidChange: NSNotification.Name<br>	}<br></p><p>-- Ben<br></p><p>&gt; To be clear, I don&#39;t think we want this behavior on all `swift_wrapper` types. For instance, the specified behavior is probably appropriate for `HKQuantityTypeIdentifier` and `NSErrorDomain`, the primary examples in SE-0033. But `Notification.Name` is a slightly different use from what we imagined for this feature, and I think it needs a slightly different behavior.<br>&gt; <br>&gt; So, what&#39;s the best way to pursue fixing this issue?<br>&gt; <br>&gt; 1. A new proposal, perhaps introducing `swift_wrapper(struct,prefix_matched)`?<br>&gt; <br>&gt; 2. An amendment to SE-0033?<br>&gt; <br>&gt; 3. A radar filed with the Foundation team?<br>&gt; <br>&gt; 4. A blizzard of radars filed with *every* framework team?<br>&gt; <br>&gt; 5. Deferral to post-Swift 3?<br>&gt; <br>&gt; <br>&gt; <br>&gt; [1] https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8dfc6932943f38e7a7de48be3194f13c?s=50"></div><header><strong>Notification.Name</strong> from <string>Michael Ilseman</string> &lt;milseman at apple.com&gt;<p>June 30, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jun 30, 2016, at 9:10 AM, Ben Rimmington &lt;me at benrimmington.com&gt; wrote:<br>&gt; <br>&gt; [Cc: Michael Ilseman]<br>&gt; <br>&gt;&gt; On 30 Jun 2016, at 03:13, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Not 100% sure this belongs here, but I&#39;ll bite.<br>&gt;&gt; <br>&gt;&gt; The new `Notification.Name` type is a beautiful application of SE-0033 &quot;Import Objective-C Constants as Swift Types&quot;[1] which removes a lot of boilerplate. However,  I think it puts the resulting constants in the wrong place. They all get piled into `Notification.Name`, resulting in:<br>&gt;&gt; <br>&gt;&gt; 	Notification.Name.NSSystemTimeZoneDidChange<br>&gt;&gt; 	Notification.Name.NSThreadWillExit<br>&gt;&gt; 	Notification.Name.NSURLCredentialStorageChanged<br>&gt;&gt; 	Notification.Name.NSUbiquityIdentityDidChange<br>&gt;&gt; 	Notification.Name.NSUndoManagerCheckpoint<br>&gt;&gt; <br>&gt;&gt; I think these would be a lot better off as:<br>&gt;&gt; <br>&gt;&gt; 	TimeZone.systemTimeZoneDidChange<br>&gt;&gt; 	Thread.willExit<br>&gt;&gt; 	URLCredentialStorage.changed<br>&gt;&gt; 	FileManager.ubiquityIdentityDidChange<br>&gt;&gt; 	UndoManager.checkpoint<br>&gt;&gt; <br>&gt;&gt; Most of these could probably be inferred by prefix matching, but some, like `TimeZone.systemTimeZoneDidChange` and `FileManager.ubiquityIdentityDidChange`, would probably have to be done manually. There might even be a few which have no natural attachment point, though I can&#39;t think of any off the top of my head.<br>&gt; <br>&gt; Is this another case where SE-0033 and SE-0044 can work together?<br>&gt; &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/19946 &lt;http://article.gmane.org/gmane.comp.lang.swift.evolution/19946&gt;&gt;<br>&gt; <br>&gt; For example, in &lt;Foundation/NSTimeZone.h&gt; by adding the `swift_name` attribute:<br>&gt; <br>&gt; 	FOUNDATION_EXPORT NSNotificationName const NSSystemTimeZoneDidChangeNotification<br>&gt; 	NS_SWIFT_NAME(TimeZone.systemTimeZoneDidChange);<br>&gt; <br>&gt; The constant should hopefully be imported into Swift as:<br>&gt; <br>&gt; 	extension TimeZone {<br>&gt; 	    public static let systemTimeZoneDidChange: NSNotification.Name<br>&gt; 	}<br>&gt; <br></p><p>That is certainly in the spirit of SE-0044, and anything that is “typified” from SE-0033 is valid host for import-as-member. There are a few bugs in that interaction that I’m currently working out (e.g. with opaque pointers), but I think it’s reasonable to allow users of swift_name to choose a host that is different from NSNotification. If your example doesn’t work, please file a JIRA.<br></p><p>&gt; -- Ben<br>&gt; <br>&gt;&gt; To be clear, I don&#39;t think we want this behavior on all `swift_wrapper` types. For instance, the specified behavior is probably appropriate for `HKQuantityTypeIdentifier` and `NSErrorDomain`, the primary examples in SE-0033. But `Notification.Name` is a slightly different use from what we imagined for this feature, and I think it needs a slightly different behavior.<br>&gt;&gt; <br>&gt;&gt; So, what&#39;s the best way to pursue fixing this issue?<br>&gt;&gt; <br>&gt;&gt; 1. A new proposal, perhaps introducing `swift_wrapper(struct,prefix_matched)`?<br>&gt;&gt; <br>&gt;&gt; 2. An amendment to SE-0033?<br>&gt;&gt; <br>&gt;&gt; 3. A radar filed with the Foundation team?<br>&gt;&gt; <br>&gt;&gt; 4. A blizzard of radars filed with *every* framework team?<br>&gt;&gt; <br>&gt;&gt; 5. Deferral to post-Swift 3?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; [1] https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160630/f3a21d03/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>Notification.Name</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>July  5, 2016 at 03:00:00pm</p></header><div class="content"><p>Hi Brent,<br></p><p>In general, I agree with your idea that the scope of the name of these things is with the type it’s used for. The type of it is of course Notification.Name.<br></p><p>One thing we did in the short term to make this feature even remotely possible was to add an importer rule: global const NSStrings that end in ‘Notification’ are imported as Notification.Name.something — otherwise everyone would have to either cast these, or we’d have to audit the whole SDK to add an attribute to each one.<br></p><p>I think we can probably do a better job of putting these where they belong with a combination of setting the attribute and using either API notes or the NS_SWIFT_NAME macro to get them into the right scope. Probably the only real way to accomplish this is to file radars on each relevant framework (including Foundation itself).<br></p><p>Thanks,<br>- Tony<br></p><p>&gt; On Jun 29, 2016, at 7:13 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Not 100% sure this belongs here, but I&#39;ll bite.<br>&gt; <br>&gt; The new `Notification.Name` type is a beautiful application of SE-0033 &quot;Import Objective-C Constants as Swift Types&quot;[1] which removes a lot of boilerplate. However,  I think it puts the resulting constants in the wrong place. They all get piled into `Notification.Name`, resulting in:<br>&gt; <br>&gt; 	Notification.Name.NSSystemTimeZoneDidChange<br>&gt; 	Notification.Name.NSThreadWillExit<br>&gt; 	Notification.Name.NSURLCredentialStorageChanged<br>&gt; 	Notification.Name.NSUbiquityIdentityDidChange<br>&gt; 	Notification.Name.NSUndoManagerCheckpoint<br>&gt; <br>&gt; I think these would be a lot better off as:<br>&gt; <br>&gt; 	TimeZone.systemTimeZoneDidChange<br>&gt; 	Thread.willExit<br>&gt; 	URLCredentialStorage.changed<br>&gt; 	FileManager.ubiquityIdentityDidChange<br>&gt; 	UndoManager.checkpoint<br>&gt; <br>&gt; Most of these could probably be inferred by prefix matching, but some, like `TimeZone.systemTimeZoneDidChange` and `FileManager.ubiquityIdentityDidChange`, would probably have to be done manually. There might even be a few which have no natural attachment point, though I can&#39;t think of any off the top of my head.<br>&gt; <br>&gt; To be clear, I don&#39;t think we want this behavior on all `swift_wrapper` types. For instance, the specified behavior is probably appropriate for `HKQuantityTypeIdentifier` and `NSErrorDomain`, the primary examples in SE-0033. But `Notification.Name` is a slightly different use from what we imagined for this feature, and I think it needs a slightly different behavior.<br>&gt; <br>&gt; So, what&#39;s the best way to pursue fixing this issue?<br>&gt; <br>&gt; 1. A new proposal, perhaps introducing `swift_wrapper(struct,prefix_matched)`?<br>&gt; <br>&gt; 2. An amendment to SE-0033?<br>&gt; <br>&gt; 3. A radar filed with the Foundation team?<br>&gt; <br>&gt; 4. A blizzard of radars filed with *every* framework team?<br>&gt; <br>&gt; 5. Deferral to post-Swift 3?<br>&gt; <br>&gt; <br>&gt; <br>&gt; [1] https://github.com/apple/swift-evolution/blob/master/proposals/0033-import-objc-constants.md<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/5e2d639c/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
