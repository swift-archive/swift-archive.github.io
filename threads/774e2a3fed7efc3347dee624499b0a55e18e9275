<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  8, 2016 at 05:00:00am</p></header><div class="content"><p>on Mon Feb 08 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I agree that positioning the preposition depending on whether a<br>&gt; default value is present is unfortunate, but I don&#39;t agree that it<br>&gt; would complicate the rules significantly as it just adds a very simple<br>&gt; special case for one rule.<br></p><p>Heh, but then people will really demand a special case for move(from: a,<br>to: b)<br></p><p><br>&gt; Is the problem that it complicates API evolvement significant enough<br>&gt; to outweigh the advantage of this rule?<br></p><p>That&#39;s one problem.  I think we should also be concerned about rules<br>that create a feeling of non-uniformity and un-predictability across<br>code.  For example, you don&#39;t want to see something like this:<br></p><p>       removeAllBricks(having: .CrackleGlazeFinish)<br></p><p>       removeAllBeamsHaving(.RottenWood)<br></p><p>&gt; Closure arguments with default values won&#39;t profit from it if written<br>&gt; as trailing closure, of course.<br>&gt;<br>&gt; No good idea how to remedy that (trailing argument label?? probably not).<br></p><p>I think that&#39;s a whole &#39;nother bag o&#39; worms, and, yes, some language<br>syntax might be needed.  IOW, the issue goes beyond mere guidelines.<br></p><p>&gt; -Thorsten<br>&gt;<br>&gt; Am 08. Februar 2016 um 12:47 schrieb Matthew Judge via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;     Agree that basing the preposition location on whether there is a default value is<br>&gt;     unfortunate. The problem is &quot;Zone&quot; is not redundant/needless when calling it with the<br>&gt;     default value.<br>&gt;<br>&gt;     copyWith()<br>&gt;<br>&gt;     If I were asking &quot;what zone?&quot; Ok it&#39;s the default zone, but I&#39;m just asking &quot;with what?&quot;<br>&gt;<br>&gt;         On Feb 7, 2016, at 10:48, Dave Abrahams via swift-evolution<br>&gt;         &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;         on Sat Feb 06 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                 On Feb 6, 2016, at 10:08 PM, Dave Abrahams via swift-evolution<br>&gt;                 &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                     on Sat Feb 06 2016, Thorsten Seitz<br>&gt;                     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                     So the preposition should move into the argument label if the argument is<br>&gt;                     optional?<br>&gt;<br>&gt;                     copy(withZone: zone = nil)<br>&gt;<br>&gt;                 That&#39;s a good idea.<br>&gt;<br>&gt;             It seems unfortunate that the placement of the preposition should<br>&gt;<br>&gt;             change depending on whether there is a default argument or not,<br>&gt;<br>&gt;             especially since it is reasonable to imagine that an API evolves to<br>&gt;<br>&gt;             gain a default argument later on.<br>&gt;<br>&gt;         You&#39;re right; it would complicate the rules significantly, too.<br>&gt;<br>&gt;             - Doug<br>&gt;<br>&gt;                     -Thorsten<br>&gt;<br>&gt;                         Am 06.02.2016 um 14:45 schrieb Matthew Judge via swift-evolution<br>&gt;<br>&gt;                         &lt;swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;                         Very first method<br>&gt;<br>&gt;                         copyWith(zone: Zone = nil)<br>&gt;<br>&gt;                         can be called as<br>&gt;<br>&gt;                         copyWith()<br>&gt;<br>&gt;                         I&#39;m assuming this is still something we don&#39;t want right?<br>&gt;<br>&gt;                             On Feb 6, 2016, at 02:16, Douglas Gregor via swift-evolution<br>&gt;<br>&gt;                             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;                                 On Feb 5, 2016, at 1:32 PM, Dave Abrahams via swift-evolution<br>&gt;<br>&gt;                                 &lt;swift-evolution at swift.org&gt;<br>&gt;                                 wrote:<br>&gt;<br>&gt;                                 Given all the awesome feedback I&#39;ve gotten on this thread, I<br>&gt;                                 went back<br>&gt;<br>&gt;                                 to the drawing board and came up with something new; I think<br>&gt;                                 this one<br>&gt;<br>&gt;                                 works. The previously-stated goals still apply:<br>&gt;<br>&gt;                                 [snip goals]<br>&gt;<br>&gt;                                 P.S. Doug is presently working on generating new importer<br>&gt;                                 results, based<br>&gt;<br>&gt;                                 on these guidelines, for your perusal. They should be ready<br>&gt;                                 soon.<br>&gt;<br>&gt;                             Here’s a link:<br>&gt;<br>&gt;                             https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt;<br>&gt;                             Feedback welcome!<br>&gt;<br>&gt;                             - Doug<br>&gt;<br>&gt;                             _______________________________________________<br>&gt;<br>&gt;                             swift-evolution mailing list<br>&gt;<br>&gt;                             swift-evolution at swift.org<br>&gt;<br>&gt;                             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;                         _______________________________________________<br>&gt;<br>&gt;                         swift-evolution mailing list<br>&gt;<br>&gt;                         swift-evolution at swift.org<br>&gt;<br>&gt;                         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;                     _______________________________________________<br>&gt;<br>&gt;                     swift-evolution mailing list<br>&gt;<br>&gt;                     swift-evolution at swift.org<br>&gt;<br>&gt;                     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;                 --<br>&gt;<br>&gt;                 -Dave<br>&gt;<br>&gt;                 _______________________________________________<br>&gt;<br>&gt;                 swift-evolution mailing list<br>&gt;<br>&gt;                 swift-evolution at swift.org<br>&gt;<br>&gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;             _______________________________________________<br>&gt;<br>&gt;             swift-evolution mailing list<br>&gt;<br>&gt;             swift-evolution at swift.org<br>&gt;<br>&gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;         --<br>&gt;<br>&gt;         -Dave<br>&gt;<br>&gt;         _______________________________________________<br>&gt;<br>&gt;         swift-evolution mailing list<br>&gt;<br>&gt;         swift-evolution at swift.org<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-evolution mailing list<br>&gt;     swift-evolution at swift.org<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>February  8, 2016 at 10:00:00am</p></header><div class="content"><p>On Mon, Feb 8, 2016 at 5:23 AM, Dave Abrahams via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; on Mon Feb 08 2016, Thorsten Seitz &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt; I agree that positioning the preposition depending on whether a<br>&gt; &gt; default value is present is unfortunate, but I don&#39;t agree that it<br>&gt; &gt; would complicate the rules significantly as it just adds a very simple<br>&gt; &gt; special case for one rule.<br>&gt;<br>&gt; Heh, but then people will really demand a special case for move(from: a,<br>&gt; to: b)<br>&gt;<br>&gt;<br>&gt; &gt; Is the problem that it complicates API evolvement significant enough<br>&gt; &gt; to outweigh the advantage of this rule?<br>&gt;<br>&gt; That&#39;s one problem.  I think we should also be concerned about rules<br>&gt; that create a feeling of non-uniformity and un-predictability across<br>&gt; code.  For example, you don&#39;t want to see something like this:<br>&gt;<br>&gt;        removeAllBricks(having: .CrackleGlazeFinish)<br>&gt;<br>&gt;        removeAllBeamsHaving(.RottenWood)<br>&gt;<br>&gt;<br>I just thought of another point in favor of prepositions going inside<br>parentheses: verbs that take an optional indirect object, expressed as an<br>overload.<br></p><p>protocol Message {<br>  // Stores the whole message<br>  func store(toCoreDataEntity tableName: String)<br>  func store(toUserDefaults key: String)<br></p><p>  // Stores only a single field within the message<br>  func store(field: String, toCoreDataEntity tableName: String)<br>  func store(field: String, toUserDefaults key: String)<br>}<br></p><p>protocol RenderLayer {<br>  // Moves the whole layer<br>  func move(toDOMElement element: DOMElement, edge: Edge)<br></p><p>  // Moves an element within the render layer<br>  func move(elementWithID id: String, toDOMElement element, edge: Edge)<br>  func move(element element: DOMElement, toDOMElement element, edge: Edge)<br>}<br></p><p>With preposition-inside-parentheses, there&#39;s a nice symmetry between these<br>API calls:<br></p><p>move(toDOMElement: table, edge: .Bottom)   // Whole layer<br>move(elementWithID: &quot;#nav&quot;, toDOMElement: table, edge: .Bottom)  // Just<br>one element<br></p><p>With preposition-outside-parentheses, they become pretty awkward:<br></p><p>moveTo(DOMElement: table, edge: .Bottom)<br>move(elementWithID: &quot;#nav&quot;, toDOMElement: table, edge: .Bottom) // Why<br>different base name?<br>moveTo(DOMElement: table, edge: .Bottom, elementWithID: &quot;#nav&quot;) // What&#39;s<br>getting moved?<br>moveTo(DOMElement: table, edge: .Bottom, onlyTheElementWithID: &quot;#nav&quot;) //<br>Works, but wordy<br></p><p>None of this is what I&#39;d consider a deal-breaker, and I know the review<br>period has ended, but if a decision hasn&#39;t been made yet and you&#39;re on the<br>fence, please consider. :-)<br></p><p><br>&gt; &gt; Closure arguments with default values won&#39;t profit from it if written<br>&gt; &gt; as trailing closure, of course.<br>&gt; &gt;<br>&gt; &gt; No good idea how to remedy that (trailing argument label?? probably not).<br>&gt;<br>&gt; I think that&#39;s a whole &#39;nother bag o&#39; worms, and, yes, some language<br>&gt; syntax might be needed.  IOW, the issue goes beyond mere guidelines.<br>&gt;<br>&gt; &gt; -Thorsten<br>&gt; &gt;<br>&gt; &gt; Am 08. Februar 2016 um 12:47 schrieb Matthew Judge via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt;     Agree that basing the preposition location on whether there is a<br>&gt; default value is<br>&gt; &gt;     unfortunate. The problem is &quot;Zone&quot; is not redundant/needless when<br>&gt; calling it with the<br>&gt; &gt;     default value.<br>&gt; &gt;<br>&gt; &gt;     copyWith()<br>&gt; &gt;<br>&gt; &gt;     If I were asking &quot;what zone?&quot; Ok it&#39;s the default zone, but I&#39;m just<br>&gt; asking &quot;with what?&quot;<br>&gt; &gt;<br>&gt; &gt;         On Feb 7, 2016, at 10:48, Dave Abrahams via swift-evolution<br>&gt; &gt;         &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;         on Sat Feb 06 2016, Douglas Gregor &lt;swift-evolution at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;                 On Feb 6, 2016, at 10:08 PM, Dave Abrahams via<br>&gt; swift-evolution<br>&gt; &gt;                 &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;                     on Sat Feb 06 2016, Thorsten Seitz<br>&gt; &gt;                     &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;                     So the preposition should move into the argument<br>&gt; label if the argument is<br>&gt; &gt;                     optional?<br>&gt; &gt;<br>&gt; &gt;                     copy(withZone: zone = nil)<br>&gt; &gt;<br>&gt; &gt;                 That&#39;s a good idea.<br>&gt; &gt;<br>&gt; &gt;             It seems unfortunate that the placement of the preposition<br>&gt; should<br>&gt; &gt;<br>&gt; &gt;             change depending on whether there is a default argument or<br>&gt; not,<br>&gt; &gt;<br>&gt; &gt;             especially since it is reasonable to imagine that an API<br>&gt; evolves to<br>&gt; &gt;<br>&gt; &gt;             gain a default argument later on.<br>&gt; &gt;<br>&gt; &gt;         You&#39;re right; it would complicate the rules significantly, too.<br>&gt; &gt;<br>&gt; &gt;             - Doug<br>&gt; &gt;<br>&gt; &gt;                     -Thorsten<br>&gt; &gt;<br>&gt; &gt;                         Am 06.02.2016 um 14:45 schrieb Matthew Judge via<br>&gt; swift-evolution<br>&gt; &gt;<br>&gt; &gt;                         &lt;swift-evolution at swift.org&gt;:<br>&gt; &gt;<br>&gt; &gt;                         Very first method<br>&gt; &gt;<br>&gt; &gt;                         copyWith(zone: Zone = nil)<br>&gt; &gt;<br>&gt; &gt;                         can be called as<br>&gt; &gt;<br>&gt; &gt;                         copyWith()<br>&gt; &gt;<br>&gt; &gt;                         I&#39;m assuming this is still something we don&#39;t<br>&gt; want right?<br>&gt; &gt;<br>&gt; &gt;                             On Feb 6, 2016, at 02:16, Douglas Gregor via<br>&gt; swift-evolution<br>&gt; &gt;<br>&gt; &gt;                             &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;                                 On Feb 5, 2016, at 1:32 PM, Dave<br>&gt; Abrahams via swift-evolution<br>&gt; &gt;<br>&gt; &gt;                                 &lt;swift-evolution at swift.org&gt;<br>&gt; &gt;                                 wrote:<br>&gt; &gt;<br>&gt; &gt;                                 Given all the awesome feedback I&#39;ve<br>&gt; gotten on this thread, I<br>&gt; &gt;                                 went back<br>&gt; &gt;<br>&gt; &gt;                                 to the drawing board and came up with<br>&gt; something new; I think<br>&gt; &gt;                                 this one<br>&gt; &gt;<br>&gt; &gt;                                 works. The previously-stated goals still<br>&gt; apply:<br>&gt; &gt;<br>&gt; &gt;                                 [snip goals]<br>&gt; &gt;<br>&gt; &gt;                                 P.S. Doug is presently working on<br>&gt; generating new importer<br>&gt; &gt;                                 results, based<br>&gt; &gt;<br>&gt; &gt;                                 on these guidelines, for your perusal.<br>&gt; They should be ready<br>&gt; &gt;                                 soon.<br>&gt; &gt;<br>&gt; &gt;                             Here’s a link:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://github.com/apple/swift-3-api-guidelines-review/pull/10/files<br>&gt; &gt;<br>&gt; &gt;                             Feedback welcome!<br>&gt; &gt;<br>&gt; &gt;                             - Doug<br>&gt; &gt;<br>&gt; &gt;<br>&gt;  _______________________________________________<br>&gt; &gt;<br>&gt; &gt;                             swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;                             swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;                         _______________________________________________<br>&gt; &gt;<br>&gt; &gt;                         swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;                         swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;                     _______________________________________________<br>&gt; &gt;<br>&gt; &gt;                     swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;                     swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;                 --<br>&gt; &gt;<br>&gt; &gt;                 -Dave<br>&gt; &gt;<br>&gt; &gt;                 _______________________________________________<br>&gt; &gt;<br>&gt; &gt;                 swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;                 swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;                 https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;             _______________________________________________<br>&gt; &gt;<br>&gt; &gt;             swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;             swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;             https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;         --<br>&gt; &gt;<br>&gt; &gt;         -Dave<br>&gt; &gt;<br>&gt; &gt;         _______________________________________________<br>&gt; &gt;<br>&gt; &gt;         swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt;         swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;     _______________________________________________<br>&gt; &gt;     swift-evolution mailing list<br>&gt; &gt;     swift-evolution at swift.org<br>&gt; &gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; --<br>&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/7639fc43/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February  8, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Feb 08 2016, Jonathan Tang &lt;jonathan.d.tang-AT-gmail.com&gt; wrote:<br></p><p>&gt; None of this is what I&#39;d consider a deal-breaker, and I know the review<br>&gt; period has ended, but if a decision hasn&#39;t been made yet and you&#39;re on the<br>&gt; fence, please consider. :-)<br></p><p>Thanks for your insight, Jonathan.  Yes, the review period is formally<br>over but we&#39;ve now entered the “what, exactly, do we do with the results<br>of this discussion?” phase.  More discussion is certainly welcome at any<br>time.<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3c7cb249ce19b175407544b7d2cd8477?s=50"></div><header><strong>When to use argument labels, part DEUX</strong> from <string>Mila Schultz</string> &lt;mila.schultz at gmail.com&gt;<p>February  8, 2016 at 11:00:00am</p></header><div class="content"><p>The current set of rules are causing methods with completion handlers to be imported inconsistently. Sometimes the method name includes With, but sometimes it does not. <br></p><p>For example,<br></p><p>// no With<br> -  func exportAsynchronouslyWithCompletionHandler(handler: () -&gt; Void)<br> +  func exportAsynchronously(completionHandler handler: () -&gt; Void) <br></p><p>// yes With<br> -  func determineCompatibleFileTypesWithCompletionHandler(handler: ([String]) -&gt; Void)<br> +  func determineCompatibleFileTypesWith(completionHandler handler: ([String]) -&gt; Void)<br></p><p>// no With<br> -  func finishWritingWithCompletionHandler(handler: () -&gt; Void)<br> +  func finishWriting(completionHandler handler: () -&gt; Void)<br></p><p>// no and yes With<br> -  func savePresentedItemChangesWithCompletionHandler(completionHandler: (Error?) -&gt; Void)<br> -  func accommodatePresentedItemDeletionWithCompletionHandler(completionHandler: (Error?) -&gt; Void)<br> +  func savePresentedItemChanges(completionHandler completionHandler: (Error?) -&gt; Void)<br> +  func accommodatePresentedItemDeletionWith(completionHandler completionHandler: (Error?) -&gt; Void)<br></p><p>Perhaps eliminating “with” before parentheses in these cases is the way to go, especially since many completion handlers are good candidates to have default values, as suggested by the Guidelines:<br></p><p>extension Document {<br>  func close(completionHandler completion: ((Bool) -&gt; Void)? = nil)<br>}<br></p><p>My apologies if this is irrelevant or has already been discussed!<br></p><p>Mila<br></p><p>&gt; On Feb 8, 2016, at 10:31 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 08 2016, Jonathan Tang &lt;jonathan.d.tang-AT-gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; None of this is what I&#39;d consider a deal-breaker, and I know the review<br>&gt;&gt; period has ended, but if a decision hasn&#39;t been made yet and you&#39;re on the<br>&gt;&gt; fence, please consider. :-)<br>&gt; <br>&gt; Thanks for your insight, Jonathan.  Yes, the review period is formally<br>&gt; over but we&#39;ve now entered the “what, exactly, do we do with the results<br>&gt; of this discussion?” phase.  More discussion is certainly welcome at any<br>&gt; time.<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
