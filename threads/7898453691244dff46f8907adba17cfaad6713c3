<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Hello.<br></p><p>I think this was discussed before somewhere and I do not know what the<br>conclusion was, but since we have this in the documentation:<br></p><p>func addSubview(_ view: UIView)<br></p><p>And we have to write this:<br></p><p>func addSubview(view: UIView)<br></p><p><br>Why we can not stay with the first one that is more consistent? The impact<br>is to replace declarations like:<br></p><p><br>func myMethod(something something: AnyObject)<br></p><p>With<br></p><p>func myMethod(something: AnyObject)<br></p><p><br>And replace:<br></p><p>func myOtherMethod(something: AnyObject)<br></p><p>With<br></p><p>func myOtherMethod(_ somethings: AnyObject)<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/789813c3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d0659d0725d0f35fa2b7d2cd23631502?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Vanderlei Martinelli</string> &lt;vmartinelli at alecrim.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>The “send” button was pressed before I finish the message, I’m sorry.<br></p><p>Continuing:<br></p><p>With<br></p><p>func myOtherMethod(_ something: AnyObject)<br></p><p><br>Regards,<br></p><p>-Van<br></p><p>On Mon, Feb 8, 2016 at 7:54 PM, Vanderlei Martinelli &lt;<br>vmartinelli at alecrim.com&gt; wrote:<br></p><p>&gt; Hello.<br>&gt;<br>&gt; I think this was discussed before somewhere and I do not know what the<br>&gt; conclusion was, but since we have this in the documentation:<br>&gt;<br>&gt; func addSubview(_ view: UIView)<br>&gt;<br>&gt; And we have to write this:<br>&gt;<br>&gt; func addSubview(view: UIView)<br>&gt;<br>&gt;<br>&gt; Why we can not stay with the first one that is more consistent? The impact<br>&gt; is to replace declarations like:<br>&gt;<br>&gt;<br>&gt; func myMethod(something something: AnyObject)<br>&gt;<br>&gt; With<br>&gt;<br>&gt; func myMethod(something: AnyObject)<br>&gt;<br>&gt;<br>&gt; And replace:<br>&gt;<br>&gt; func myOtherMethod(something: AnyObject)<br>&gt;<br>&gt; With<br>&gt;<br>&gt; func myOtherMethod(_ somethings: AnyObject)<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/21224afe/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/10d0339242a000b0b683ed1d5e25a110?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Howard Lovatt</string> &lt;howard.lovatt at gmail.com&gt;<p>February  9, 2016 at 09:00:00am</p></header><div class="content"><p>+1 from me. As an aside: there is a lot of discussion about this sort of<br>thing in the API guideline threads.<br></p><p>On Tuesday, 9 February 2016, Vanderlei Martinelli via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; The “send” button was pressed before I finish the message, I’m sorry.<br>&gt;<br>&gt; Continuing:<br>&gt;<br>&gt; With<br>&gt;<br>&gt; func myOtherMethod(_ something: AnyObject)<br>&gt;<br>&gt;<br>&gt; Regards,<br>&gt;<br>&gt; -Van<br>&gt;<br>&gt; On Mon, Feb 8, 2016 at 7:54 PM, Vanderlei Martinelli &lt;<br>&gt; vmartinelli at alecrim.com<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;vmartinelli at alecrim.com&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Hello.<br>&gt;&gt;<br>&gt;&gt; I think this was discussed before somewhere and I do not know what the<br>&gt;&gt; conclusion was, but since we have this in the documentation:<br>&gt;&gt;<br>&gt;&gt; func addSubview(_ view: UIView)<br>&gt;&gt;<br>&gt;&gt; And we have to write this:<br>&gt;&gt;<br>&gt;&gt; func addSubview(view: UIView)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Why we can not stay with the first one that is more consistent? The<br>&gt;&gt; impact is to replace declarations like:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; func myMethod(something something: AnyObject)<br>&gt;&gt;<br>&gt;&gt; With<br>&gt;&gt;<br>&gt;&gt; func myMethod(something: AnyObject)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; And replace:<br>&gt;&gt;<br>&gt;&gt; func myOtherMethod(something: AnyObject)<br>&gt;&gt;<br>&gt;&gt; With<br>&gt;&gt;<br>&gt;&gt; func myOtherMethod(_ somethings: AnyObject)<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p><p>-- <br>  -- Howard.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160209/aecba056/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  8, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; Why we can not stay with the first one that is more consistent? The impact is to replace declarations like:<br>&gt; <br>&gt; <br>&gt; func myMethod(something something: AnyObject)<br>&gt; <br>&gt; With<br>&gt; <br>&gt; func myMethod(something: AnyObject)<br>&gt; <br>&gt; <br>&gt; And replace:<br>&gt; <br>&gt; func myOtherMethod(something: AnyObject)<br>&gt; <br>&gt; With<br>&gt; <br>&gt; func myOtherMethod(_ somethings: AnyObject)<br></p><p>An alternative might be to always require both names, but offer a shorthand for saying they&#39;re the same. Purely as an illustrative example, this would mess up syntax highlighting, but it follows an English punctuation usage:<br></p><p>	func myMethod(something &quot;: AnyObject) 	// shorthand for `something something:`<br></p><p>This is perhaps a little more realistic, drawing on our convention of magic compiler substitution:<br></p><p>	func myMethod(something #: AnyObject)	// shorthand for `something something:`<br></p><p>(Swift 1, of course, had `#something` for that, but dropped it, apparently because it was arbitrary and became rarely needed when methods and functions got the same parameter labeling rules in Swift 2. Neither of those would be the case now.)<br></p><p>In short, the whole &quot;should we have default labels or not&quot; question can simply go away forever for an extra two characters per parameter. That might be worth it.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  8, 2016 at 05:00:00pm</p></header><div class="content"><p>How often do you find yourself wanting an internal parameter name, but not an external (case 4)? I think it’s very rare.<br></p><p>I doubt that the compiler’s AI will be able to deal with case 2.b, automatically, any time soon. That is okay with me, as long as we can manually type direct objects that would not be clear with only a preposition. <br></p><p>I think these represent the options for parameter names in order of prevalence. Case 3 has obviously never been available in Swift, but can be emulated with generic-sounding internal parameter names. If those types of names were not necessary, I believe all of these “opting” problems would go away. Is that incorrect? <br></p><p>1. Internal is the same as external<br>func function(int: Int) {}<br></p><p>2. External and internal names are different <br>a. func doThing(with int: Int) {}<br>b. func doThing(withGiraffe giraffe: Any) {}<br></p><p>3. No parameter name is needed internally or externally<br>func function(Int)<br></p><p>4. Underscore for external, name for internal<br>func function(_ int: Int) {}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/3437d025/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Sorry, I forgot about this one:<br></p><p>5. An external, but not internal parameter name is needed. I don’t think a colon is useful in these cases.<br>func doThing(with Int) {}<br></p><p>It also could satisfy a protocol requirement, without having to resort to this kind of underscore usage, which should become illegal:<br>func doThing(with _: Int) {}<br></p><p>&gt; On Feb 8, 2016, at 5:32 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com&gt; wrote:<br>&gt; <br>&gt; How often do you find yourself wanting an internal parameter name, but not an external (case 4)? I think it’s very rare.<br>&gt; <br>&gt; I doubt that the compiler’s AI will be able to deal with case 2.b, automatically, any time soon. That is okay with me, as long as we can manually type direct objects that would not be clear with only a preposition. <br>&gt; <br>&gt; I think these represent the options for parameter names in order of prevalence. Case 3 has obviously never been available in Swift, but can be emulated with generic-sounding internal parameter names. If those types of names were not necessary, I believe all of these “opting” problems would go away. Is that incorrect? <br>&gt; <br>&gt; 1. Internal is the same as external<br>&gt; func function(int: Int) {}<br>&gt; <br>&gt; 2. External and internal names are different <br>&gt; a. func doThing(with int: Int) {}<br>&gt; b. func doThing(withGiraffe giraffe: Any) {}<br>&gt; <br>&gt; 3. No parameter name is needed internally or externally<br>&gt; func function(Int)<br>&gt; <br>&gt; 4. Underscore for external, name for internal<br>&gt; func function(_ int: Int) {}<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/7dc83c7e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  8, 2016 at 06:00:00pm</p></header><div class="content"><p>If we decide to allow external names without an internal name, I’m strongly in favor of the “func doThing(with _: Int) {}“ syntax. It makes it crystal clear that we’re purposefully not assigning an internal name to that argument.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 8, 2016, at 16:46, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Sorry, I forgot about this one:<br>&gt; <br>&gt; 5. An external, but not internal parameter name is needed. I don’t think a colon is useful in these cases.<br>&gt; func doThing(with Int) {}<br>&gt; <br>&gt; It also could satisfy a protocol requirement, without having to resort to this kind of underscore usage, which should become illegal:<br>&gt; func doThing(with _: Int) {}<br>&gt; <br>&gt;&gt; On Feb 8, 2016, at 5:32 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com &lt;mailto:mr.jessy at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; How often do you find yourself wanting an internal parameter name, but not an external (case 4)? I think it’s very rare.<br>&gt;&gt; <br>&gt;&gt; I doubt that the compiler’s AI will be able to deal with case 2.b, automatically, any time soon. That is okay with me, as long as we can manually type direct objects that would not be clear with only a preposition. <br>&gt;&gt; <br>&gt;&gt; I think these represent the options for parameter names in order of prevalence. Case 3 has obviously never been available in Swift, but can be emulated with generic-sounding internal parameter names. If those types of names were not necessary, I believe all of these “opting” problems would go away. Is that incorrect? <br>&gt;&gt; <br>&gt;&gt; 1. Internal is the same as external<br>&gt;&gt; func function(int: Int) {}<br>&gt;&gt; <br>&gt;&gt; 2. External and internal names are different <br>&gt;&gt; a. func doThing(with int: Int) {}<br>&gt;&gt; b. func doThing(withGiraffe giraffe: Any) {}<br>&gt;&gt; <br>&gt;&gt; 3. No parameter name is needed internally or externally<br>&gt;&gt; func function(Int)<br>&gt;&gt; <br>&gt;&gt; 4. Underscore for external, name for internal<br>&gt;&gt; func function(_ int: Int) {}<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/44a7db95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>February  8, 2016 at 06:00:00pm</p></header><div class="content"><p>Among other things, this allows a warning or style check equivalent to Clang&#39;s -Wunused-param. You could always give the parameter a dummy name and then assign it to _, but this makes the intent clearer, IMHO, that the parameter is ignored.<br></p><p>On the other hand, it also destroys any way of referring to it in a doc comment, so if you want to say why it&#39;s ignored you&#39;re in trouble.<br></p><p>Jordan<br></p><p><br>&gt; On Feb 8, 2016, at 18:08, Dave via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; If we decide to allow external names without an internal name, I’m strongly in favor of the “func doThing(with _: Int) {}“ syntax. It makes it crystal clear that we’re purposefully not assigning an internal name to that argument.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Feb 8, 2016, at 16:46, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sorry, I forgot about this one:<br>&gt;&gt; <br>&gt;&gt; 5. An external, but not internal parameter name is needed. I don’t think a colon is useful in these cases.<br>&gt;&gt; func doThing(with Int) {}<br>&gt;&gt; <br>&gt;&gt; It also could satisfy a protocol requirement, without having to resort to this kind of underscore usage, which should become illegal:<br>&gt;&gt; func doThing(with _: Int) {}<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 8, 2016, at 5:32 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com &lt;mailto:mr.jessy at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How often do you find yourself wanting an internal parameter name, but not an external (case 4)? I think it’s very rare.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I doubt that the compiler’s AI will be able to deal with case 2.b, automatically, any time soon. That is okay with me, as long as we can manually type direct objects that would not be clear with only a preposition. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think these represent the options for parameter names in order of prevalence. Case 3 has obviously never been available in Swift, but can be emulated with generic-sounding internal parameter names. If those types of names were not necessary, I believe all of these “opting” problems would go away. Is that incorrect? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Internal is the same as external<br>&gt;&gt;&gt; func function(int: Int) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. External and internal names are different <br>&gt;&gt;&gt; a. func doThing(with int: Int) {}<br>&gt;&gt;&gt; b. func doThing(withGiraffe giraffe: Any) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. No parameter name is needed internally or externally<br>&gt;&gt;&gt; func function(Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. Underscore for external, name for internal<br>&gt;&gt;&gt; func function(_ int: Int) {}<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/adaf6e9e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/34b9659227ea084bb09a8ba4a450a162?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Jessy Catterwaul</string> &lt;mr.jessy at gmail.com&gt;<p>February  8, 2016 at 09:00:00pm</p></header><div class="content"><p>I relent. It would be more clear, as with closures, if we are forced to use _, when we don’t use $0.<br></p><p>To reiterate, external names without internal names do currently compile, and probably compile for this use case:<br></p><p>protocol Protocol {<br>   func doThing(with nameNotEnforced: Int)<br>}<br></p><p>struct Satisfier: Protocol {<br>   func doThing(with _: Int) {}<br>}<br></p><p><br>That’s different than what doesn’t yet compile, but ought to, to account for nondescript parameters.<br></p><p>protocol Protocol {<br>   func printGoat(@autoclosure while () -&gt; Bool)<br>}<br></p><p>struct Implementer: Protocol {<br>   func printGoat(@autoclosure while () -&gt; Bool) {<br>      // $0 must be used in this function<br>      while $0() {print(&quot;Goat&quot;)}<br>   }<br>}<br></p><p>Implementer().printGoat(while: swimmingInMoat)<br></p><p><br>&gt; On Feb 8, 2016, at 9:08 PM, davesweeris at mac.com wrote:<br>&gt; <br>&gt; If we decide to allow external names without an internal name, I’m strongly in favor of the “func doThing(with _: Int) {}“ syntax. It makes it crystal clear that we’re purposefully not assigning an internal name to that argument.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Feb 8, 2016, at 16:46, Jessy Catterwaul via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Sorry, I forgot about this one:<br>&gt;&gt; <br>&gt;&gt; 5. An external, but not internal parameter name is needed. I don’t think a colon is useful in these cases.<br>&gt;&gt; func doThing(with Int) {}<br>&gt;&gt; <br>&gt;&gt; It also could satisfy a protocol requirement, without having to resort to this kind of underscore usage, which should become illegal:<br>&gt;&gt; func doThing(with _: Int) {}<br>&gt;&gt; <br>&gt;&gt;&gt; On Feb 8, 2016, at 5:32 PM, Jessy Catterwaul &lt;mr.jessy at gmail.com &lt;mailto:mr.jessy at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; How often do you find yourself wanting an internal parameter name, but not an external (case 4)? I think it’s very rare.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I doubt that the compiler’s AI will be able to deal with case 2.b, automatically, any time soon. That is okay with me, as long as we can manually type direct objects that would not be clear with only a preposition. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think these represent the options for parameter names in order of prevalence. Case 3 has obviously never been available in Swift, but can be emulated with generic-sounding internal parameter names. If those types of names were not necessary, I believe all of these “opting” problems would go away. Is that incorrect? <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. Internal is the same as external<br>&gt;&gt;&gt; func function(int: Int) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. External and internal names are different <br>&gt;&gt;&gt; a. func doThing(with int: Int) {}<br>&gt;&gt;&gt; b. func doThing(withGiraffe giraffe: Any) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. No parameter name is needed internally or externally<br>&gt;&gt;&gt; func function(Int)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. Underscore for external, name for internal<br>&gt;&gt;&gt; func function(_ int: Int) {}<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160208/9f9268ad/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Opt-out for first unnamed parameter instead of opt-in</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  9, 2016 at 12:00:00pm</p></header><div class="content"><p>On Feb 8, 2016, at 1:54 PM, Vanderlei Martinelli via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello.<br>&gt; <br>&gt; I think this was discussed before somewhere and I do not know what the conclusion was, but since we have this in the documentation:<br></p><p>I agree that we should have this discussion, but I think it is imperative that we wait until the naming discussion settles down.  Any decision on the language behavior here will be necessarily shaped by how that works out.<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
