<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Bridging [String] to const char * const *</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>August 18, 2016 at 01:00:00pm</p></header><div class="content"><p>Hi All.<br></p><p>When interfacing with C, Swift does some magic to auto-convert Swift strings to char *. This is great, but passing an array of string pointers gets much more involved. The type translates to UnsafePointer&lt;UnsafePointer&lt;CChar&gt;&gt; in Swift.<br></p><p>So I originally tried to get pointers to the individual strings by using cString(using:), and putting them into an Array, but then I found out that there is nothing holding on to the cStrings, so they go away before they can be used. I finally wound up with this hack:<br></p><p>public extension Array {<br>    public func cStringArray() throws -&gt; ArrayBridge&lt;Element,CChar&gt; {<br>        return try ArrayBridge&lt;Element,CChar&gt;(array:self) {<br>            guard let item = $0 as? String,<br>                  let translated = item.cString(using: .utf8) else {<br>                throw hexdreamsCocoa.Errors.InvalidArgumentError<br>            }<br>            return translated<br>        }<br>    }<br>}<br></p><p>/*<br> We need to have this intermediate object around to hold on to the translated objects, otherwise they will go away.<br> The UnsafePointer won&#39;t hold on to the objects that it&#39;s pointing to.<br> */<br>public struct ArrayBridge&lt;SwiftType,CType&gt; {<br></p><p>    let originals  :[SwiftType]<br>    let translated :[[CType]]<br>    let pointers   :[UnsafePointer&lt;CType&gt;?]<br>    public let pointer    :UnsafePointer&lt;UnsafePointer&lt;CType&gt;?&gt;<br></p><p>    init(array :[SwiftType], transform: (SwiftType) throws -&gt; [CType]) throws {<br>        self.originals = array<br>        self.translated = try array.map(transform)<br></p><p>        var pointers = [UnsafePointer&lt;CType&gt;?]()<br>        for item in translated {<br>            pointers.append(UnsafePointer&lt;CType&gt;(item))<br>        }<br>        pointers.append(nil)<br>        self.pointers = pointers<br>        self.pointer = UnsafePointer(self.pointers)<br>    }<br>}<br></p><p>And then to use it you would do something like<br></p><p>try stringArray.cStringArray().pointer<br></p><p>This all seems pretty ugly. So my question is: Is this the right way to handle this problem? Is there a simpler way? It would be awesome if Swift auto-converted arrays of Strings to const char * const *, since it’s a construct used so much in C.<br></p><p>Thanks!<br></p><p>-Kenny<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Bridging [String] to const char * const *</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>August 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Here&#39;s how we do it for internal testing purposes: withArrayOfCStrings &lt;https://github.com/apple/swift/blob/dfc3933a05264c0c19f7cd43ea0dca351f53ed48/stdlib/private/SwiftPrivate/SwiftPrivate.swift#L68&gt;. The callback is great because you don&#39;t have to worry about lifetimes.<br></p><p>Jordan<br></p><p>&gt; On Aug 18, 2016, at 13:04, Kenny Leung via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi All.<br>&gt; <br>&gt; When interfacing with C, Swift does some magic to auto-convert Swift strings to char *. This is great, but passing an array of string pointers gets much more involved. The type translates to UnsafePointer&lt;UnsafePointer&lt;CChar&gt;&gt; in Swift.<br>&gt; <br>&gt; So I originally tried to get pointers to the individual strings by using cString(using:), and putting them into an Array, but then I found out that there is nothing holding on to the cStrings, so they go away before they can be used. I finally wound up with this hack:<br>&gt; <br>&gt; public extension Array {<br>&gt;    public func cStringArray() throws -&gt; ArrayBridge&lt;Element,CChar&gt; {<br>&gt;        return try ArrayBridge&lt;Element,CChar&gt;(array:self) {<br>&gt;            guard let item = $0 as? String,<br>&gt;                  let translated = item.cString(using: .utf8) else {<br>&gt;                throw hexdreamsCocoa.Errors.InvalidArgumentError<br>&gt;            }<br>&gt;            return translated<br>&gt;        }<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; /*<br>&gt; We need to have this intermediate object around to hold on to the translated objects, otherwise they will go away.<br>&gt; The UnsafePointer won&#39;t hold on to the objects that it&#39;s pointing to.<br>&gt; */<br>&gt; public struct ArrayBridge&lt;SwiftType,CType&gt; {<br>&gt; <br>&gt;    let originals  :[SwiftType]<br>&gt;    let translated :[[CType]]<br>&gt;    let pointers   :[UnsafePointer&lt;CType&gt;?]<br>&gt;    public let pointer    :UnsafePointer&lt;UnsafePointer&lt;CType&gt;?&gt;<br>&gt; <br>&gt;    init(array :[SwiftType], transform: (SwiftType) throws -&gt; [CType]) throws {<br>&gt;        self.originals = array<br>&gt;        self.translated = try array.map(transform)<br>&gt; <br>&gt;        var pointers = [UnsafePointer&lt;CType&gt;?]()<br>&gt;        for item in translated {<br>&gt;            pointers.append(UnsafePointer&lt;CType&gt;(item))<br>&gt;        }<br>&gt;        pointers.append(nil)<br>&gt;        self.pointers = pointers<br>&gt;        self.pointer = UnsafePointer(self.pointers)<br>&gt;    }<br>&gt; }<br>&gt; <br>&gt; And then to use it you would do something like<br>&gt; <br>&gt; try stringArray.cStringArray().pointer<br>&gt; <br>&gt; This all seems pretty ugly. So my question is: Is this the right way to handle this problem? Is there a simpler way? It would be awesome if Swift auto-converted arrays of Strings to const char * const *, since it’s a construct used so much in C.<br>&gt; <br>&gt; Thanks!<br>&gt; <br>&gt; -Kenny<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160818/3dbf3c71/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e01e37acbfad671da1b94a61cf819d82?s=50"></div><header><strong>Bridging [String] to const char * const *</strong> from <string>Kenny Leung</string> &lt;kenny_leung at pobox.com&gt;<p>August 18, 2016 at 02:00:00pm</p></header><div class="content"><p>Thanks! At least it’s good to know there wasn’t something trivial I was missing.<br></p><p>-Kenny<br></p><p><br>&gt; On Aug 18, 2016, at 2:33 PM, Jordan Rose &lt;jordan_rose at apple.com&gt; wrote:<br>&gt; <br>&gt; Here&#39;s how we do it for internal testing purposes: withArrayOfCStrings. The callback is great because you don&#39;t have to worry about lifetimes.<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt;&gt; On Aug 18, 2016, at 13:04, Kenny Leung via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi All.<br>&gt;&gt; <br>&gt;&gt; When interfacing with C, Swift does some magic to auto-convert Swift strings to char *. This is great, but passing an array of string pointers gets much more involved. The type translates to UnsafePointer&lt;UnsafePointer&lt;CChar&gt;&gt; in Swift.<br>&gt;&gt; <br>&gt;&gt; So I originally tried to get pointers to the individual strings by using cString(using:), and putting them into an Array, but then I found out that there is nothing holding on to the cStrings, so they go away before they can be used. I finally wound up with this hack:<br>&gt;&gt; <br>&gt;&gt; public extension Array {<br>&gt;&gt;    public func cStringArray() throws -&gt; ArrayBridge&lt;Element,CChar&gt; {<br>&gt;&gt;        return try ArrayBridge&lt;Element,CChar&gt;(array:self) {<br>&gt;&gt;            guard let item = $0 as? String,<br>&gt;&gt;                  let translated = item.cString(using: .utf8) else {<br>&gt;&gt;                throw hexdreamsCocoa.Errors.InvalidArgumentError<br>&gt;&gt;            }<br>&gt;&gt;            return translated<br>&gt;&gt;        }<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; /*<br>&gt;&gt; We need to have this intermediate object around to hold on to the translated objects, otherwise they will go away.<br>&gt;&gt; The UnsafePointer won&#39;t hold on to the objects that it&#39;s pointing to.<br>&gt;&gt; */<br>&gt;&gt; public struct ArrayBridge&lt;SwiftType,CType&gt; {<br>&gt;&gt; <br>&gt;&gt;    let originals  :[SwiftType]<br>&gt;&gt;    let translated :[[CType]]<br>&gt;&gt;    let pointers   :[UnsafePointer&lt;CType&gt;?]<br>&gt;&gt;    public let pointer    :UnsafePointer&lt;UnsafePointer&lt;CType&gt;?&gt;<br>&gt;&gt; <br>&gt;&gt;    init(array :[SwiftType], transform: (SwiftType) throws -&gt; [CType]) throws {<br>&gt;&gt;        self.originals = array<br>&gt;&gt;        self.translated = try array.map(transform)<br>&gt;&gt; <br>&gt;&gt;        var pointers = [UnsafePointer&lt;CType&gt;?]()<br>&gt;&gt;        for item in translated {<br>&gt;&gt;            pointers.append(UnsafePointer&lt;CType&gt;(item))<br>&gt;&gt;        }<br>&gt;&gt;        pointers.append(nil)<br>&gt;&gt;        self.pointers = pointers<br>&gt;&gt;        self.pointer = UnsafePointer(self.pointers)<br>&gt;&gt;    }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; And then to use it you would do something like<br>&gt;&gt; <br>&gt;&gt; try stringArray.cStringArray().pointer<br>&gt;&gt; <br>&gt;&gt; This all seems pretty ugly. So my question is: Is this the right way to handle this problem? Is there a simpler way? It would be awesome if Swift auto-converted arrays of Strings to const char * const *, since it’s a construct used so much in C.<br>&gt;&gt; <br>&gt;&gt; Thanks!<br>&gt;&gt; <br>&gt;&gt; -Kenny<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
