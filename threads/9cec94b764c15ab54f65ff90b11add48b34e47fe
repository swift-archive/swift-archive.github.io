<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  5, 2016 at 08:00:00am</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  5, 2016 at 06:00:00pm</p></header><div class="content"><p>+1, but I&#39;m not a big fan of the proposed Optional -&gt; NSNull bridging which can cause various hard-to-debug issues with errors &quot;NSNull doesn&#39;t respond to a selector -foo&quot;.<br></p><p>Most APIs that take &quot;id&quot; as an argument usually specify several types that the API accepts (e.g. arrays and dictionaries), but passing in NSNull is not acceptable. I believe this change would create confusion rather than eliminate it as is the goal of this proposal.<br></p><p>&gt; On Jul 5, 2016, at 5:45 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July  5, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 9:06 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1, but I&#39;m not a big fan of the proposed Optional -&gt; NSNull bridging which can cause various hard-to-debug issues with errors &quot;NSNull doesn&#39;t respond to a selector -foo&quot;.<br></p><p>I&#39;m not proposing that particular mapping as part of this proposal, only as a potential future direction. However, these issues should be avoided by dynamic casting type checks. An untyped NSArray that contains NSNulls would come into Swift as an [Any], and would fail to dynamically cast to [Foo]. You&#39;d have to cast it to [Foo?], which would force you to handle the NSNulls as Swift nils.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; Most APIs that take &quot;id&quot; as an argument usually specify several types that the API accepts (e.g. arrays and dictionaries), but passing in NSNull is not acceptable. I believe this change would create confusion rather than eliminate it as is the goal of this proposal.<br>&gt; <br>&gt;&gt; On Jul 5, 2016, at 5:45 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July  5, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; On Jul 5, 2016, at 6:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 5, 2016, at 9:06 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1, but I&#39;m not a big fan of the proposed Optional -&gt; NSNull bridging which can cause various hard-to-debug issues with errors &quot;NSNull doesn&#39;t respond to a selector -foo&quot;.<br>&gt; <br>&gt; I&#39;m not proposing that particular mapping as part of this proposal, only as a potential future direction. However, these issues should be avoided by dynamic casting type checks. An untyped NSArray that contains NSNulls would come into Swift as an [Any], and would fail to dynamically cast to [Foo]. You&#39;d have to cast it to [Foo?], which would force you to handle the NSNulls as Swift nils.<br></p><p>Ok, though my bigger concern was the other way around - passing accidently array of [Foo?] to an ObjC class that takes id as an argument.<br></p><p>But other than this, the proposal will make the code Swiftier and it is definitely the correct direction for Swift in general!<br></p><p>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; <br>&gt;&gt; Most APIs that take &quot;id&quot; as an argument usually specify several types that the API accepts (e.g. arrays and dictionaries), but passing in NSNull is not acceptable. I believe this change would create confusion rather than eliminate it as is the goal of this proposal.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 5, 2016, at 5:45 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/36f3ec204630839e54fb68c6979e5f78?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Daniel Resnick</string> &lt;danielzresnick at gmail.com&gt;<p>July  5, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; What is your evaluation of the proposal?<br>&gt;<br>+1<br></p><p>Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt;<br>Yes. Passing value types to Objective-C APIs taking AnyObject requires<br>creating wrapper classes that store the value types. This change would<br>eliminate that workaround and allow for more flexible and idiomatic code<br>when using Cocoa APIs.<br></p><p>Does this proposal fit well with the feel and direction of Swift?<br>&gt;<br>Yes, now that certain Objective-C types are bridgeable to Swift as value<br>types, this feels like a natural next step.<br></p><p><br>&gt; How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br></p><p>Quick reading.<br></p><p>On Tue, Jul 5, 2016 at 10:45 AM, Charlie Monroe via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jul 5, 2016, at 6:37 PM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Jul 5, 2016, at 9:06 AM, Charlie Monroe via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; +1, but I&#39;m not a big fan of the proposed Optional -&gt; NSNull bridging<br>&gt; which can cause various hard-to-debug issues with errors &quot;NSNull doesn&#39;t<br>&gt; respond to a selector -foo&quot;.<br>&gt; &gt;<br>&gt; &gt; I&#39;m not proposing that particular mapping as part of this proposal, only<br>&gt; as a potential future direction. However, these issues should be avoided by<br>&gt; dynamic casting type checks. An untyped NSArray that contains NSNulls would<br>&gt; come into Swift as an [Any], and would fail to dynamically cast to [Foo].<br>&gt; You&#39;d have to cast it to [Foo?], which would force you to handle the<br>&gt; NSNulls as Swift nils.<br>&gt;<br>&gt; Ok, though my bigger concern was the other way around - passing accidently<br>&gt; array of [Foo?] to an ObjC class that takes id as an argument.<br>&gt;<br>&gt; But other than this, the proposal will make the code Swiftier and it is<br>&gt; definitely the correct direction for Swift in general!<br>&gt;<br>&gt; &gt;<br>&gt; &gt; -Joe<br>&gt; &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Most APIs that take &quot;id&quot; as an argument usually specify several types<br>&gt; that the API accepts (e.g. arrays and dictionaries), but passing in NSNull<br>&gt; is not acceptable. I believe this change would create confusion rather than<br>&gt; eliminate it as is the goal of this proposal.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On Jul 5, 2016, at 5:45 PM, Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Hello Swift community,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot;<br>&gt; begins now and runs through July 11. The proposal is available here:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All<br>&gt; reviews should be sent to the swift-evolution mailing list at<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; What goes into a review?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     * What is your evaluation of the proposal?<br>&gt; &gt;&gt;&gt;     * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt; &gt;&gt;&gt;     * Does this proposal fit well with the feel and direction of Swift?<br>&gt; &gt;&gt;&gt;     * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt; &gt;&gt;&gt;     * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;     https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; Thank you,<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; -Chris Lattner<br>&gt; &gt;&gt;&gt; Review Manager<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160705/f7d2f8f9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c72bd3ba434ad651a5d8d3d79f2d4c49?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Scott James Remnant</string> &lt;scott at netsplit.com&gt;<p>July  6, 2016 at 12:00:00pm</p></header><div class="content"><p>+1<br></p><p>“AnyObject” has always seemed to me to be quite weird in Swift, since it considers classes to be special when compared to value types. Any move to lessen its use gets my vote.<br></p><p><br>A comment on Impact on existing code in the proposal: due to the nature of the bridging, it is still going to be very common in Swift to see this kind of construct:<br></p><p>  let mapOfThings: [String: AnyObject] = [ … ]<br></p><p>Since AnyObject conforms to Any, I don’t think this proposal will break that code, but should it suggest a fixit anyway since the author of the code is conforming to the interface, and not expressing an intent about AnyObjects here.<br></p><p><br>Scott<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July  6, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>+1. I find this to be a solid, well reasoned proposal. <br></p><p>I enjoyed seeing such a detailed Motivation and am looking forward to discussing the Related Proposals and Future Directions mentioned in this one.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes. Interoperability between Objective-C and Swift remains important and we don&#39;t want to be held back from creating the best possible Swift experience.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes. <br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I&#39;m not familiar with (haven&#39;t used) libraries that bridge across languages without exposing the same types with the same naming and behaviors in both languages.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal<br></p><p>- David<br></p><p>&gt; On 5 Jul 2016, at 17:45, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160706/9599caad/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ecb50a99bf3b4cc0249312945dce7115?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Ben Langmuir</string> &lt;blangmuir at apple.com&gt;<p>July  8, 2016 at 11:00:00am</p></header><div class="content"><p>Hey Joe,<br></p><p>I’m +1 on the overall direction, but I have some questions/concerns about the &quot;Ambivalent dynamic casting from Any” section.<br></p><p>1) When you suggest that `x as String` succeeds but `x as NSString` fails, I assume this would only be true *after* SE-0083, since otherwise we’d be violating transitivity of `as` casts?<br></p><p>2) Have you considered the only allowing `as` casts to the bridged type (e.g. String) for values coming from `id` at the language level, but providing some guaranteed optimization that if you immediately convert to the ObjC class type (ie. NSString(x as! String)) we give zero-cost round-tripping? Would that be detectable?  I think making `value as? NSFoo` fail or succeed depending on whether the value came from ObjC  will be a source of subtle bugs.  What if I have multiple sources of values - some from ObjC, some from Swift - and stuff them into an [Any].<br></p><p>Ben<br></p><p>&gt; On Jul 5, 2016, at 8:45 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July 20, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 8, 2016, at 11:19 AM, Ben Langmuir &lt;blangmuir at apple.com&gt; wrote:<br>&gt; <br>&gt; Hey Joe,<br></p><p>Sorry Ben, missed this when you sent it a couple weeks ago.<br></p><p>&gt; I’m +1 on the overall direction, but I have some questions/concerns about the &quot;Ambivalent dynamic casting from Any” section.<br>&gt; <br>&gt; 1) When you suggest that `x as String` succeeds but `x as NSString` fails, I assume this would only be true *after* SE-0083, since otherwise we’d be violating transitivity of `as` casts?<br></p><p>Right. I think we&#39;ll have to subset this part out of the proposal altogether and leave casting as is, though, due to time constraints.<br></p><p>&gt; 2) Have you considered the only allowing `as` casts to the bridged type (e.g. String) for values coming from `id` at the language level, but providing some guaranteed optimization that if you immediately convert to the ObjC class type (ie. NSString(x as! String)) we give zero-cost round-tripping? Would that be detectable?  I think making `value as? NSFoo` fail or succeed depending on whether the value came from ObjC  will be a source of subtle bugs.  What if I have multiple sources of values - some from ObjC, some from Swift - and stuff them into an [Any].<br></p><p>Yeah, John&#39;s looking into that as a general peephole.<br></p><p>-Joe<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Review] SE-0116: Import Objective-C id as Swift Any type</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July 20, 2016 at 01:00:00pm</p></header><div class="content"><p>Thanks for the feedback, everyone. I revised the proposal a bit in light of design, implementation, and scheduling discussions we&#39;ve had in the process of implementation:<br></p><p>https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br></p><p>	• Subset out conditional ambivalent dynamic casting from the proposal. We don&#39;t have time in Swift 3 to implement or evaluate this.<br>	• Move NSObjectProtocol and NSValue/NSNumber bridging to future directions. These can be done additively.<br></p><p>The original revision of the proposal is here:<br></p><p>https://github.com/apple/swift-evolution/blob/b9a0ab5f7db4d3806c7941a07acedc5f0fe36e55/proposals/0116-id-as-any.md<br></p><p>-Joe<br></p><p>&gt; On Jul 5, 2016, at 8:45 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0116: Import Objective-C id as Swift Any type&quot; begins now and runs through July 11. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
