<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/164b40dea124664e59ddbb764d6fde57?s=50"></div><header><strong>SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>Jody Schofield</string> &lt;jodyscho at gmail.com&gt;<p>October 30, 2016 at 08:00:00am</p></header><div class="content"><p>Sorry, I&#39;m sure this has been discussed before, but what the heck???<br></p><p>This feature is killing me. Now I have go add @discardableResult to every<br>function that returns a non-Void or use the ugly syntax `_ =`?<br></p><p>Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to be<br>getting too rigid for the sake of &quot;protecting&quot; me from myself. The safety<br>levels needs to be dialled back some.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161030/aed0cdda/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>October 31, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; On Oct 30, 2016, at 5:49 AM, Jody Schofield via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; Sorry, I&#39;m sure this has been discussed before, but what the heck???<br>&gt; <br>&gt; This feature is killing me. Now I have go add @discardableResult to every function that returns a non-Void or use the ugly syntax `_ =`? <br>&gt; <br>&gt; Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to be getting too rigid for the sake of &quot;protecting&quot; me from myself. The safety levels needs to be dialled back some.<br></p><p>I think we&#39;re generally very comfortable with this rule; forgetting to handle a return value (maybe because you expect the function to be mutating) is a pretty common mistake, and &quot;_ = &quot; seems nicer than the old C equivalent &quot;(void)&quot;.<br></p><p>Do you find yourself writing a lot of functions that return non-void results that you frequently want to ignore?  Maybe there&#39;s some idiom we could do a better job of recognizing.<br></p><p>John.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161031/a3803918/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/164b40dea124664e59ddbb764d6fde57?s=50"></div><header><strong>SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>Jody Schofield</string> &lt;jodyscho at gmail.com&gt;<p>November  1, 2016 at 07:00:00pm</p></header><div class="content"><p>I agree that &quot;_ =&quot; is nicer than &quot;(void)&quot;.<br></p><p>&gt; Do you find yourself writing a lot of functions that return non-void<br>results that you frequently want to ignore?  Maybe there&#39;s some idiom we<br>could do a better job of recognizing.<br></p><p>It really depends on the developer. Some will add return values thinking<br>it&#39;s important to and others don&#39;t. It certainly is obvious around our use<br>of the builders and in our unit tests. I&#39;ll go back and review the unit<br>tests, but I think there are enough valid cases where we don&#39;t care about<br>return values if we are spying, mocking, etc.<br></p><p><br></p><p>On Mon, Oct 31, 2016 at 7:14 PM, John McCall &lt;rjmccall at apple.com&gt; wrote:<br></p><p>&gt; On Oct 30, 2016, at 5:49 AM, Jody Schofield via swift-dev &lt;<br>&gt; swift-dev at swift.org&gt; wrote:<br>&gt; Sorry, I&#39;m sure this has been discussed before, but what the heck???<br>&gt;<br>&gt; This feature is killing me. Now I have go add @discardableResult to every<br>&gt; function that returns a non-Void or use the ugly syntax `_ =`?<br>&gt;<br>&gt; Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to be<br>&gt; getting too rigid for the sake of &quot;protecting&quot; me from myself. The safety<br>&gt; levels needs to be dialled back some.<br>&gt;<br>&gt;<br>&gt; I think we&#39;re generally very comfortable with this rule; forgetting to<br>&gt; handle a return value (maybe because you expect the function to be<br>&gt; mutating) is a pretty common mistake, and &quot;_ = &quot; seems nicer than the old C<br>&gt; equivalent &quot;(void)&quot;.<br>&gt;<br>&gt; Do you find yourself writing a lot of functions that return non-void<br>&gt; results that you frequently want to ignore?  Maybe there&#39;s some idiom we<br>&gt; could do a better job of recognizing.<br>&gt;<br>&gt; John.<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20161101/51c75465/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[swift-dev] SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 30, 2016 at 01:00:00pm</p></header><div class="content"><p>Functions that return values return them for a reason.  Ignoring them is, more likely than not, an oversight that should be corrected, hence @discardableResult.  We&#39;re talking error codes, object lifetime tokens, failure indicators, etc.  All things that result in ignoring critical code paths for the sake of convenience.  If you find yourself executing a lot of side effects and ignoring return values, I would take a look at why.  A lot of times you have control over the API and can eliminate some of these unused return values.  Otherwise, please try to see if the return values of these functions are relevant to the well-being of your program.<br></p><p>~Robert Widmann<br></p><p>2016/10/30 8:49、Jody Schofield via swift-dev &lt;swift-dev at swift.org&gt; のメッセージ:<br></p><p>&gt; Sorry, I&#39;m sure this has been discussed before, but what the heck???<br>&gt; <br>&gt; This feature is killing me. Now I have go add @discardableResult to every function that returns a non-Void or use the ugly syntax `_ =`? <br>&gt; <br>&gt; Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to be getting too rigid for the sake of &quot;protecting&quot; me from myself. The safety levels needs to be dialled back some.<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161030/0ce14d8f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/164b40dea124664e59ddbb764d6fde57?s=50"></div><header><strong>[swift-dev] SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>Jody Schofield</string> &lt;jodyscho at gmail.com&gt;<p>October 30, 2016 at 01:00:00pm</p></header><div class="content"><p>I think assumptions are being made that shouldn&#39;t be. For example I use a lot for design patterns such as the builder. Most of the methods return a reference to self so they can be chained together. The compiler shouldn&#39;t tell me I&#39;m wrong for ignoring those return values. It use to be my decision.<br></p><p>Swift was already a very opinionated language and I can see it&#39;s being taken even further. A mistake in my opinion and one that is certainly making the language more frustrating than pleasurable to use.<br></p><p><br></p><p>&gt; On Oct 30, 2016, at 1:32 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Functions that return values return them for a reason.  Ignoring them is, more likely than not, an oversight that should be corrected, hence @discardableResult.  We&#39;re talking error codes, object lifetime tokens, failure indicators, etc.  All things that result in ignoring critical code paths for the sake of convenience.  If you find yourself executing a lot of side effects and ignoring return values, I would take a look at why.  A lot of times you have control over the API and can eliminate some of these unused return values.  Otherwise, please try to see if the return values of these functions are relevant to the well-being of your program.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/10/30 8:49、Jody Schofield via swift-dev &lt;swift-dev at swift.org&gt; のメッセージ:<br>&gt; <br>&gt;&gt; Sorry, I&#39;m sure this has been discussed before, but what the heck???<br>&gt;&gt; <br>&gt;&gt; This feature is killing me. Now I have go add @discardableResult to every function that returns a non-Void or use the ugly syntax `_ =`? <br>&gt;&gt; <br>&gt;&gt; Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to be getting too rigid for the sake of &quot;protecting&quot; me from myself. The safety levels needs to be dialled back some.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-dev mailing list<br>&gt;&gt; swift-dev at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161030/222ff893/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76eb9711d45c1c9a71c0f24004072a22?s=50"></div><header><strong>[swift-dev] SE-0047 - Defaulting non-Void functions so they warn on unused results</strong> from <string>Zach Waldowski</string> &lt;zach at waldowski.me&gt;<p>October 31, 2016 at 11:00:00am</p></header><div class="content"><p>If you&#39;re engaging in a non-standard design pattern, that you are<br>willfully writing yourself, I really don&#39;t see what the problem is with<br>applying @discardableResult to declarations that need it, just like any<br>of Swift&#39;s other decorators that describe convention and use patterns.<br></p><p>Cheers,<br>  Zach<br></p><p><br>On Sun, Oct 30, 2016, at 01:52 PM, Jody Schofield via swift-evolution wrote:<br>&gt; I think assumptions are being made that shouldn&#39;t be. For example I<br>&gt; use a lot for design patterns such as the builder. Most of the methods<br>&gt; return a reference to self so they can be chained together. The<br>&gt; compiler shouldn&#39;t tell me I&#39;m wrong for ignoring those return values.<br>&gt; It use to be my decision.<br>&gt; Swift was already a very opinionated language and I can see it&#39;s being<br>&gt; taken even further. A mistake in my opinion and one that is certainly<br>&gt; making the language more frustrating than pleasurable to use.<br>&gt;<br>&gt;<br>&gt;<br>&gt; On Oct 30, 2016, at 1:32 PM, Robert Widmann<br>&gt; &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt; Functions that return values return them for a reason.  Ignoring them<br>&gt;&gt; is, more likely than not, an oversight that should be corrected,<br>&gt;&gt; hence @discardableResult.  We&#39;re talking error codes, object lifetime<br>&gt;&gt; tokens, failure indicators, etc.  All things that result in ignoring<br>&gt;&gt; critical code paths for the sake of convenience.  If you find<br>&gt;&gt; yourself executing a lot of side effects and ignoring return values,<br>&gt;&gt; I would take a look at why.  A lot of times you have control over the<br>&gt;&gt; API and can eliminate some of these unused return values.  Otherwise,<br>&gt;&gt; please try to see if the return values of these functions are<br>&gt;&gt; relevant to the well-being of your program.<br>&gt;&gt;<br>&gt;&gt; ~Robert Widmann<br>&gt;&gt;<br>&gt;&gt; 2016/10/30 8:49、Jody Schofield via swift-dev &lt;swift-dev at swift.org&gt;<br>&gt;&gt; のメッセージ:<br>&gt;&gt;&gt; Sorry, I&#39;m sure this has been discussed before, but what the heck???<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; This feature is killing me. Now I have go add @discardableResult to<br>&gt;&gt;&gt; every function that returns a non-Void or use the ugly syntax `_ =`?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Until swift 3 I&#39;ve really enjoyed the new language. Now I find it to<br>&gt;&gt;&gt; be getting too rigid for the sake of &quot;protecting&quot; me from myself.<br>&gt;&gt;&gt; The safety levels needs to be dialled back some.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-dev mailing list<br>&gt;&gt;&gt; swift-dev at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br>&gt; _________________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161031/28edb561/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
