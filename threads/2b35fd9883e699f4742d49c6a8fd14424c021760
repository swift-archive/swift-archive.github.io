<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br></p><p>Hi,<br></p><p>I&#39;m now officially proposal the union type feature for Swift. Please see:<br></p><p><br>https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121 &lt;https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121&gt;<br>Introduction<br></p><p>Add union type grammar, represents the type which is one of other types.<br></p><p>var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br></p><p><br>I would be thankful if someone support this idea and give some advice. Thanks!<br></p><p><br>--<br>Jiannan<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/2b351760/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  1, 2016 at 05:00:00pm</p></header><div class="content"><p>Hi all,<br></p><p>I&#39;m now officially proposal the union type feature for Swift. Please see:<br></p><p><br>https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>Introduction<br></p><p>Add union type grammar, represents the type which is one of other types.<br></p><p>var stringOrURL: String | URL = &quot;https://www.apple.com &lt;https://www.apple.com/&gt;&quot;<br></p><p><br>I would be thankful if someone support this idea and give some advice. Thanks!<br></p><p><br>--<br>Jiannan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/d91be38c/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>what if OneOf&lt;A, A&gt;?<br></p><p>duplicate variable compile warning?<br>I already answered that question:<br></p><p>For example:<br></p><p>typealias ABC = A | B | C<br></p><p>typealias ABCD = ABC | D<br></p><p>we just use an existed type ABC to construct ABCD<br></p><p>But how about generic wrap?<br>Bikeshedding:<br></p><p>// we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt;<br>enum OneOf&lt;...T&gt; {<br></p><p>  ...case $#(T)<br></p><p>  // Bikeshedding variadic enum casses:<br>  // we might need an index to set the value?<br>  init(index: Int, value: T) {<br>       <br>      self = .$index(value)<br>  }<br>}<br></p><p>/// Usage:<br>/// A | B | C == OneOf&lt;A, B, C&gt;<br>func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type {<br>   <br>  // I also use the proposal to remove `.self` magic here<br>  return OneOf&lt;T, U&gt;<br>}<br></p><p>// Here is how to merge OneOf into a single dimension<br>func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type {<br>   <br>  // Copy and merge types into the new `OneOf` type<br>  return OneOf&lt;...T, U&gt;<br>}<br></p><p>func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type {<br>   <br>  // Copy and merge types into the new `OneOf` type<br>  return OneOf&lt;T, ...U&gt;<br>}<br></p><p>func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type {<br>   <br>  // Copy and merge types into the new `OneOf` type<br>  return OneOf&lt;...T, ...U&gt;<br>}<br>Your example will become:<br></p><p>typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt;<br>typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>Mission accomplished.<br></p><p>Again this is not a true union type because String | String != String<br>You’d get a OneOf enum with both first and second case as A. You still can distinguish them by the indexed label.<br></p><p>let test = OneOf&lt;A, A&gt;.init(index: 0, value: A())<br></p><p>switch test {<br>     <br>    case .$1(let value)<br>        // do something<br>             <br>    case .$2(let value)<br>        // do something<br>}<br>Again this is all bikeshedding of variadic generics and variadic enums!<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juli 2016 um 11:08:40, Cao Jiannan via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p><br></p><p>Hi all,<br></p><p>I&#39;m now officially proposal the union type feature for Swift. Please see:<br></p><p><br>https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md<br>Introduction<br></p><p>Add union type grammar, represents the type which is one of other types.<br></p><p>var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br></p><p><br>I would be thankful if someone support this idea and give some advice. Thanks!<br></p><p><br>--<br>Jiannan<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/78aefa38/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>July  1, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 2:08 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; <br>&gt; Hi all,<br>&gt; <br>&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt; <br>&gt; <br>&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md<br>&gt; Introduction<br>&gt; <br>&gt; Add union type grammar, represents the type which is one of other types.<br>&gt; <br>&gt; var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br>&gt; <br>&gt; <br>&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br></p><p>We touch on this in the &quot;commonly proposed&quot; list:<br></p><p>https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md<br></p><p>Disjunctions (logical ORs) in type constraints &lt;https://lists.swift.org/pipermail/swift-evolution-announce/2016-June/000182.html&gt;: These include anonymous union-like types (e.g. (Int | String) for a type that can be inhabited by either an integer or a string). &quot;[This type of constraint is] something that the type system cannot and should not support.&quot;<br></p><p><br>-Joe<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/fbb9497b/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  1, 2016 at 09:00:00pm</p></header><div class="content"><p>I can&#39;t compile your code. I&#39;m really not sure your code will pass the complex generic check 🙃<br></p><p>Union version more complex or generic version?<br>I think union version is more normal.<br>&gt; For example:<br>&gt; <br>&gt; typealias ABC = A | B | C<br>&gt; <br>&gt; typealias ABCD = ABC | D<br>&gt; <br>&gt; we just use an existed type ABC to construct ABCD<br>&gt; <br>&gt; But how about generic wrap?<br>&gt; <br>&gt; Bikeshedding:<br>&gt; <br>&gt; // we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt;<br>&gt; enum OneOf&lt;...T&gt; {<br>&gt; <br>&gt;     ...case $#(T)<br>&gt; <br>&gt;     // Bikeshedding variadic enum casses:<br>&gt;     // we might need an index to set the value?<br>&gt;     init(index: Int, value: T) {<br>&gt; <br>&gt;         self = .$index(value)<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; /// Usage:<br>&gt; /// A | B | C == OneOf&lt;A, B, C&gt;<br>&gt; func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type {<br>&gt; <br>&gt;     // I believe the usage of `type` like this was prposed by Joe Groff<br>&gt;     // I also use the proposal to remove `.self` magic here<br>&gt;     return OneOf&lt;T, U&gt;<br>&gt; }<br>&gt; <br>&gt; // Here is how to merge OneOf into a single dimension<br>&gt; func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type {<br>&gt; <br>&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;     return OneOf&lt;...T, U&gt;<br>&gt; }<br>&gt; <br>&gt; func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type {<br>&gt; <br>&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;     return OneOf&lt;T, ...U&gt;<br>&gt; }<br>&gt; <br>&gt; func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type {<br>&gt; <br>&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;     return OneOf&lt;...T, ...U&gt;<br>&gt; }<br>&gt; Your example will become:<br>&gt; <br>&gt; typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt;<br>&gt; typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>&gt; Mission accomplished.<br>&gt; <br>&gt; <br>&gt;&gt; 在 2016年7月1日，17:06，Cao Jiannan &lt;frogcjn at 163.com&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121 &lt;https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121&gt;<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Add union type grammar, represents the type which is one of other types.<br>&gt;&gt; <br>&gt;&gt; var stringOrURL: String | URL = &quot;https://www.apple.com &lt;https://www.apple.com/&gt;&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Jiannan<br>&gt;&gt; <br>&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/4f46b7b3/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  1, 2016 at 09:00:00pm</p></header><div class="content"><p>what if OneOf&lt;A, A&gt;?<br></p><p>duplicate variable compile warning?<br></p><p>&gt; 在 2016年7月1日，20:59，Adrian Z. &lt;notifications at github.com &lt;mailto:notifications at github.com&gt;&gt; 写道：<br>&gt; <br>&gt; Just one simple thing to add:<br>&gt; <br>&gt; If ...T equals 10 then &lt;...T, U&gt; = 10 + 1 = 11 types<br>&gt; If ...U equals 17 then &lt;T, ...U&gt; = 1 + 17 = 18 types<br>&gt; If ...T equals 20 and ...Uequals 22 then &lt;...T, ...U&gt; = 20 + 22 = 42 types<br>&gt; —<br>&gt; You are receiving this because you were mentioned.<br>&gt; Reply to this email directly, view it on GitHub &lt;https://github.com/apple/swift-evolution/pull/404#issuecomment-229940122&gt;, or mute the thread &lt;https://github.com/notifications/unsubscribe/ABsfmhH9yasaWK8vAs17DGXWHV54QuCkks5qRQ9KgaJpZM4JC7-2&gt;.<br>&gt; <br>&gt;&gt; <br>&gt; <br>&gt;&gt; 在 2016年7月1日，21:33，Cao Jiannan &lt;frogcjn at 163.com&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; I can&#39;t compile your code. I&#39;m really not sure your code will pass the complex generic check 🙃<br>&gt;&gt; <br>&gt;&gt; Union version more complex or generic version?<br>&gt;&gt; I think union version is more normal.<br>&gt;&gt;&gt; For example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias ABC = A | B | C<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias ABCD = ABC | D<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; we just use an existed type ABC to construct ABCD<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But how about generic wrap?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Bikeshedding:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt;<br>&gt;&gt;&gt; enum OneOf&lt;...T&gt; {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     ...case $#(T)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // Bikeshedding variadic enum casses:<br>&gt;&gt;&gt;     // we might need an index to set the value?<br>&gt;&gt;&gt;     init(index: Int, value: T) {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;         self = .$index(value)<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; /// Usage:<br>&gt;&gt;&gt; /// A | B | C == OneOf&lt;A, B, C&gt;<br>&gt;&gt;&gt; func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // I believe the usage of `type` like this was prposed by Joe Groff<br>&gt;&gt;&gt;     // I also use the proposal to remove `.self` magic here<br>&gt;&gt;&gt;     return OneOf&lt;T, U&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Here is how to merge OneOf into a single dimension<br>&gt;&gt;&gt; func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;     return OneOf&lt;...T, U&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;     return OneOf&lt;T, ...U&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;     return OneOf&lt;...T, ...U&gt;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; Your example will become:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt;<br>&gt;&gt;&gt; typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>&gt;&gt;&gt; Mission accomplished.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 在 2016年7月1日，17:06，Cao Jiannan &lt;frogcjn at 163.com &lt;mailto:frogcjn at 163.com&gt;&gt; 写道：<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121 &lt;https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121&gt;<br>&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Add union type grammar, represents the type which is one of other types.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; var stringOrURL: String | URL = &quot;https://www.apple.com &lt;https://www.apple.com/&gt;&quot;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; Jiannan<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/2cde4a84/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>July  1, 2016 at 10:00:00pm</p></header><div class="content"><p>But in the union type design, String == String | String, this is always true<br></p><p>&gt; I already answered that question:<br>&gt; <br>&gt; For example:<br>&gt; <br>&gt; typealias ABC = A | B | C<br>&gt; <br>&gt; typealias ABCD = ABC | D<br>&gt; <br>&gt; we just use an existed type ABC to construct ABCD<br>&gt; <br>&gt; But how about generic wrap?<br>&gt; <br>&gt; Bikeshedding:<br>&gt; <br>&gt; // we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt; enum OneOf&lt;...T&gt; { ...case $#(T) // Bikeshedding variadic enum casses: // we might need an index to set the value? init(index: Int, value: T) { self = .$index(value) } } /// Usage: /// A | B | C == OneOf&lt;A, B, C&gt; func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type { // I also use the proposal to remove `.self` magic here return OneOf&lt;T, U&gt; } // Here is how to merge OneOf into a single dimension func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type { // Copy and merge types into the new `OneOf` type return OneOf&lt;...T, U&gt; } func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type { // Copy and merge types into the new `OneOf` type return OneOf&lt;T, ...U&gt; } func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type { // Copy and merge types into the new `OneOf` type return OneOf&lt;...T, ...U&gt; }<br>&gt; Your example will become:<br>&gt; <br>&gt; typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt; typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>&gt; Mission accomplished.<br>&gt; <br>&gt; Again this is not a true union type because String | String != String<br>&gt; <br>&gt; You’d get a OneOf enum with both first and second case as A. You still can distinguish them by the indexed label.<br>&gt; <br>&gt; let test = OneOf&lt;A, A&gt;.init(index: 0, value: A()) switch test { case .$1(let value) // do something case .$2(let value) // do something }<br>Again this is all bikeshedding of variadic generics and variadic enums!<br></p><p>&gt; 在 2016年7月1日，21:35，Cao Jiannan &lt;frogcjn at 163.com&gt; 写道：<br>&gt; <br>&gt; what if OneOf&lt;A, A&gt;?<br>&gt; <br>&gt; duplicate variable compile warning?<br>&gt; <br>&gt;&gt; 在 2016年7月1日，20:59，Adrian Z. &lt;notifications at github.com &lt;mailto:notifications at github.com&gt;&gt; 写道：<br>&gt;&gt; <br>&gt;&gt; Just one simple thing to add:<br>&gt;&gt; <br>&gt;&gt; If ...T equals 10 then &lt;...T, U&gt; = 10 + 1 = 11 types<br>&gt;&gt; If ...U equals 17 then &lt;T, ...U&gt; = 1 + 17 = 18 types<br>&gt;&gt; If ...T equals 20 and ...Uequals 22 then &lt;...T, ...U&gt; = 20 + 22 = 42 types<br>&gt;&gt; —<br>&gt;&gt; You are receiving this because you were mentioned.<br>&gt;&gt; Reply to this email directly, view it on GitHub &lt;https://github.com/apple/swift-evolution/pull/404#issuecomment-229940122&gt;, or mute the thread &lt;https://github.com/notifications/unsubscribe/ABsfmhH9yasaWK8vAs17DGXWHV54QuCkks5qRQ9KgaJpZM4JC7-2&gt;.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; 在 2016年7月1日，21:33，Cao Jiannan &lt;frogcjn at 163.com &lt;mailto:frogcjn at 163.com&gt;&gt; 写道：<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can&#39;t compile your code. I&#39;m really not sure your code will pass the complex generic check 🙃<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Union version more complex or generic version?<br>&gt;&gt;&gt; I think union version is more normal.<br>&gt;&gt;&gt;&gt; For example:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias ABC = A | B | C<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias ABCD = ABC | D<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; we just use an existed type ABC to construct ABCD<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; But how about generic wrap?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Bikeshedding:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt;<br>&gt;&gt;&gt;&gt; enum OneOf&lt;...T&gt; {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     ...case $#(T)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // Bikeshedding variadic enum casses:<br>&gt;&gt;&gt;&gt;     // we might need an index to set the value?<br>&gt;&gt;&gt;&gt;     init(index: Int, value: T) {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;         self = .$index(value)<br>&gt;&gt;&gt;&gt;     }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; /// Usage:<br>&gt;&gt;&gt;&gt; /// A | B | C == OneOf&lt;A, B, C&gt;<br>&gt;&gt;&gt;&gt; func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // I believe the usage of `type` like this was prposed by Joe Groff<br>&gt;&gt;&gt;&gt;     // I also use the proposal to remove `.self` magic here<br>&gt;&gt;&gt;&gt;     return OneOf&lt;T, U&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Here is how to merge OneOf into a single dimension<br>&gt;&gt;&gt;&gt; func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;&gt;     return OneOf&lt;...T, U&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;&gt;     return OneOf&lt;T, ...U&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;     // Copy and merge types into the new `OneOf` type<br>&gt;&gt;&gt;&gt;     return OneOf&lt;...T, ...U&gt;<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; Your example will become:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt;<br>&gt;&gt;&gt;&gt; typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>&gt;&gt;&gt;&gt; Mission accomplished.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 在 2016年7月1日，17:06，Cao Jiannan &lt;frogcjn at 163.com &lt;mailto:frogcjn at 163.com&gt;&gt; 写道：<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121 &lt;https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121&gt;<br>&gt;&gt;&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Add union type grammar, represents the type which is one of other types.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; var stringOrURL: String | URL = &quot;https://www.apple.com &lt;https://www.apple.com/&gt;&quot;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; Jiannan<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/9010bab3/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>July  1, 2016 at 03:00:00pm</p></header><div class="content"><p>T_T I’ve never said it will compile (the second time now), I’ve said couple of times its just future bikeshedding with variadic generics from the generics manifesto and variadic enum cases that I come up with.<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 1. Juli 2016 um 15:33:41, Cao Jiannan via swift-evolution (swift-evolution at swift.org) schrieb:<br></p><p>I can&#39;t compile your code. I&#39;m really not sure your code will pass the complex generic check 🙃<br></p><p>Union version more complex or generic version?<br>I think union version is more normal.<br>For example:<br></p><p>typealias ABC = A | B | C<br></p><p>typealias ABCD = ABC | D<br></p><p>we just use an existed type ABC to construct ABCD<br></p><p>But how about generic wrap?<br>Bikeshedding:<br></p><p>// we generate the boundary with `A | B` or directly OneOf&lt;A, B&gt;<br>enum OneOf&lt;...T&gt; {<br></p><p>    ...case $#(T)<br></p><p>    // Bikeshedding variadic enum casses:<br>    // we might need an index to set the value?<br>    init(index: Int, value: T) {<br></p><p>        self = .$index(value)<br>    }<br>}<br></p><p>/// Usage:<br>/// A | B | C == OneOf&lt;A, B, C&gt;<br>func |&lt;T, U&gt;(_: T.Type, _: U.Type) -&gt; OneOf&lt;T, U&gt;.Type {<br></p><p>    // I believe the usage of `type` like this was prposed by Joe Groff<br>    // I also use the proposal to remove `.self` magic here<br>    return OneOf&lt;T, U&gt;<br>}<br></p><p>// Here is how to merge OneOf into a single dimension<br>func |&lt;...T, U&gt;(_: OneOf&lt;...T&gt;.Type, _: U.Type) -&gt; OneOf&lt;...T, U&gt;.Type {<br></p><p>    // Copy and merge types into the new `OneOf` type<br>    return OneOf&lt;...T, U&gt;<br>}<br></p><p>func |&lt;T, ...U&gt;(_: T.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;T, ...U&gt;.Type {<br></p><p>    // Copy and merge types into the new `OneOf` type<br>    return OneOf&lt;T, ...U&gt;<br>}<br></p><p>func |&lt;...T, ...U&gt;(_: OneOf&lt;...T&gt;.Type, _: OneOf&lt;...U&gt;.Type) -&gt; OneOf&lt;...T, ...U&gt;.Type {<br></p><p>    // Copy and merge types into the new `OneOf` type<br>    return OneOf&lt;...T, ...U&gt;<br>}<br>Your example will become:<br></p><p>typealias ABC = A | B | C // or OneOf&lt;A, B, C&gt;<br>typealias ABCD = ABC | D // merging lhs OneOf with D to OneOf&lt;A, B, C, D&gt;<br>Mission accomplished.<br></p><p><br>在 2016年7月1日，17:06，Cao Jiannan &lt;frogcjn at 163.com&gt; 写道：<br></p><p>https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md<br></p><p>Hi,<br></p><p>I&#39;m now officially proposal the union type feature for Swift. Please see:<br></p><p><br>https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121<br>Introduction<br></p><p>Add union type grammar, represents the type which is one of other types.<br></p><p>var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br></p><p><br>I would be thankful if someone support this idea and give some advice. Thanks!<br></p><p><br>--<br>Jiannan<br></p><p><br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/58b21248/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July  1, 2016 at 07:00:00pm</p></header><div class="content"><p>@core team: should the be added to the list of common rejections for now or does it stand a chance in the next 2 or 3 versions?<br></p><p>Regards<br>LM<br>(From mobile)<br></p><p>&gt; On Jul 1, 2016, at 11:06 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt; <br>&gt; <br>&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121<br>&gt; Introduction<br>&gt; <br>&gt; Add union type grammar, represents the type which is one of other types.<br>&gt; <br>&gt; var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br>&gt; <br>&gt; <br>&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt; <br>&gt; <br>&gt; --<br>&gt; Jiannan<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/e619d65d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>It’s already on that list. That’s what Joe was quoting from earlier.<br></p><p>Everybody (I hope) understands the “something the type system cannot […] support” part, but if the “should not” bit were expanded a bit so that people would know why it shouldn’t be supported…<br></p><p>The closest I ever saw to a reason was a reply from back in the “Contiguous Variables (A.K.A. Fixed Sized Array Type)” thread (http://article.gmane.org/gmane.comp.lang.swift.evolution/6363)<br></p><p>&gt; Types aren&#39;t just bags of operations, which means that taking the intersection of arbitrary types isn&#39;t meaningful. Similarly, generics aren&#39;t templates to be instantiated, meaning that there has to be a run-time representation of a &quot;value of intersection type&quot;.<br>&gt; <br>&gt; The constructs that carries the right meaning in Swift are protocols, and in theory you could intersect the protocols of the various types. In practice, though, the current model doesn&#39;t have a good way to actually do this, since not all protocols can be used as types of values, and finding the protocol-intersection of N types is a needless amount of extra work for the compiler anyway.<br></p><p>Which, at least to me, isn’t very convincing. In the author’s defense, I don’t think the post was intended to be a rigorous rebuttal of the idea.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Jul 1, 2016, at 12:47 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; @core team: should the be added to the list of common rejections for now or does it stand a chance in the next 2 or 3 versions?<br>&gt; <br>&gt; Regards<br>&gt; LM<br>&gt; (From mobile)<br>&gt; <br>&gt; On Jul 1, 2016, at 11:06 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>&gt;&gt; <br>&gt;&gt; Hi,<br>&gt;&gt; <br>&gt;&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121 &lt;https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121&gt;<br>&gt;&gt; Introduction<br>&gt;&gt; <br>&gt;&gt; Add union type grammar, represents the type which is one of other types.<br>&gt;&gt; <br>&gt;&gt; var stringOrURL: String | URL = &quot;https://www.apple.com &lt;https://www.apple.com/&gt;&quot;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Jiannan<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/6ff64fa9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July  1, 2016 at 02:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>&gt; On Jul 1, 2016, at 1:59 PM, David Sweeris via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; It’s already on that list. That’s what Joe was quoting from earlier.<br>&gt; <br>&gt; Everybody (I hope) understands the “something the type system cannot […] support” part, but if the “should not” bit were expanded a bit so that people would know why it shouldn’t be supported…<br></p><p>I would also find elaboration of the rationale here very interesting (as well as the reason this &quot;cannot&quot; be supported by Swift&#39;s type systems while languages like Ceylon don&#39;t have a problem supporting it).  I know the core team has very good reasons for their position on this but I don&#39;t have a clear understanding of what they are.<br></p><p>I have run into use cases where unions would be the most elegant solution and currently possible solutions require boilerplate.  This makes me wonder why the more elegant solution doesn&#39;t have a future in Swift.<br></p><p>&gt; <br>&gt; The closest I ever saw to a reason was a reply from back in the “Contiguous Variables (A.K.A. Fixed Sized Array Type)” thread (http://article.gmane.org/gmane.comp.lang.swift.evolution/6363)<br>&gt; <br>&gt;&gt; Types aren&#39;t just bags of operations, which means that taking the intersection of arbitrary types isn&#39;t meaningful. Similarly, generics aren&#39;t templates to be instantiated, meaning that there has to be a run-time representation of a &quot;value of intersection type&quot;.<br>&gt;&gt; <br>&gt;&gt; The constructs that carries the right meaning in Swift are protocols, and in theory you could intersect the protocols of the various types. In practice, though, the current model doesn&#39;t have a good way to actually do this, since not all protocols can be used as types of values, and finding the protocol-intersection of N types is a needless amount of extra work for the compiler anyway.<br></p><p>Thanks for digging this up.  It&#39;s interesting to note that the use cases I have run into don&#39;t rely on exposing intersecting operations, only the ability to store a value of one of n types and switch to uncover the underlying value.  I wonder if the rationale for avoiding unions is strictly related to discovering and exposing the intersecting operations of the types.  Maybe a weaker kind of union that doesn&#39;t expose any operations other than casting and pattern matching would be more acceptable.<br></p><p>I agree with the statement that protocols should be used when the goal is to abstract over common operations.<br></p><p>&gt; <br>&gt; Which, at least to me, isn’t very convincing. In the author’s defense, I don’t think the post was intended to be a rigorous rebuttal of the idea.<br>&gt; <br>&gt; - Dave Sweeris<br>&gt; <br>&gt;&gt; On Jul 1, 2016, at 12:47 PM, L. Mihalkovic via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; @core team: should the be added to the list of common rejections for now or does it stand a chance in the next 2 or 3 versions?<br>&gt;&gt; <br>&gt;&gt; Regards<br>&gt;&gt; LM<br>&gt;&gt; (From mobile)<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 1, 2016, at 11:06 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Hi,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; https://github.com/apple/swift/commit/eb7311de065df7ea332cdde8782cb44f9f4a5121<br>&gt;&gt;&gt; Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Add union type grammar, represents the type which is one of other types.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; var stringOrURL: String | URL = &quot;https://www.apple.com&quot;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I would be thankful if someone support this idea and give some advice. Thanks!<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; Jiannan<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/ecd059e2/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Union Type</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July  1, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Jul 1, 2016, at 2:06 AM, Cao Jiannan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md &lt;https://github.com/frogcjn/swift-evolution/blob/master/proposals/xxxx-union-type.md&gt;<br>&gt; <br>&gt; Hi,<br>&gt; <br>&gt; I&#39;m now officially proposal the union type feature for Swift. Please see:<br></p><p>FYI, this is clearly out of scope for Swift 3.  Please wait until Swift 3 is wound down before bringing this up.  Also beware that this topic has come up several times before and there are major semantic problems with it.  Please familiarize yourself with those previous discussions.<br></p><p>-Chris<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160701/a7edd785/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
