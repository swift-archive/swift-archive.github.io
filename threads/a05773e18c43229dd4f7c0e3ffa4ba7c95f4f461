<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0115: Rename Literal Syntax Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>July  2, 2016 at 07:00:00pm</p></header><div class="content"><p>on Sat Jul 02 2016, Riley Testut &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt;&gt; familiar word patterns as an arbiter of success.<br>&gt;<br>&gt; I’m not sure I agree with this statement. I would argue we should most<br>&gt; certainly aim to keep a consistent feel across our naming conventions,<br>&gt; and furthermore, I think familiar word patterns greatly lowers barrier<br>&gt; for entry for newcomers to the language. A big reason for so many of<br>&gt; these renamings is because they don’t feel “Swifty”, and even if that<br>&gt; might not be a good technical reason, I think it’s as valid a reason<br>&gt; as any.<br>&gt;<br>&gt; Following that, “ExpressibleAsIntegerLiteral” feels extremely<br>&gt; un-swifty, and while technically you could argue it follows the Swift<br>&gt; API Guidelines, the fact that it’s the only protocol with the<br>&gt; adjective at the beginning and not the end is a giant red flag to me<br>&gt; (unless I’m missing some).<br></p><p>I disagree fundamentally.  A component whose correct meaning cannot fit<br>sensibly into common word patterns *should* be named differently.  Even<br>if you somehow don&#39;t pay attention to word meanings and you *only* use<br>cues in the “sound” or “feel” of a name, being unlike other names is a<br>sign that it doesn&#39;t mean what you&#39;d assume it does.<br></p><p>Being uniform is not as important as being expressive.<br></p><p>&gt; A final thought: is it really better to have a technically correct<br>&gt; name over one that, while technically incorrect, got its point across<br>&gt; about how it should be used? This might just be me, but I would far<br>&gt; prefer a name that from my interpretation would tell me how to use it,<br>&gt; rather than one that would require me to think about what it actually<br>&gt; means (as we’ve seen from all the confusion about what these protocols<br>&gt; were actually doing).<br></p><p>Code is written more than it&#39;s read.  It&#39;s much more important for<br>someone to be able to read my declaration<br></p><p>   struct Set&lt;T:Hashable&gt; : ExpressibleAsArrayLiteral { ... }<br></p><p>and know what that means, than it is for someone to be able to see the<br>name of a protocol and somehow know “how to use it.”  I can&#39;t actually<br>think of a protocol more complicated than Equatable from which I could<br>reliably guess its proper usage from the name.<br></p><p>&gt; Overall though, I’m glad there is this much debate about the future of<br>&gt; these names, I think it will leave us with the best name (eventually)<br>&gt; :-)<br>&gt;<br>&gt;&gt; On Jul 2, 2016, at 2:53 PM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Sat Jul 02 2016, Riley Testut &lt;rileytestut-AT-gmail.com &lt;http://rileytestut-at-gmail.com/&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; (My bad, accidentally hit send too early). <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That, or we could keep either the Convert or Express forms with<br>&gt;&gt;&gt; &quot;IntegerLiteralConverting&quot; or &quot;IntegerLiteralExpressing&quot;. And if we<br>&gt;&gt;&gt; decide &quot;express&quot; really is the best word to describe what happens, I<br>&gt;&gt;&gt; personally prefer &quot;IntegerLiteralExpressing&quot; to<br>&gt;&gt;&gt; &quot;ExpressibleAsIntegerLiteral&quot;, which doesn&#39;t feel at home with the<br>&gt;&gt;&gt; other Swift protocol names.<br>&gt;&gt; <br>&gt;&gt; It doesn&#39;t matter if it “feels at home” if it has the wrong meaning.<br>&gt;&gt; It&#39;s not that Integer can express an integer literal; It&#39;s that an<br>&gt;&gt; integer literal can express an Integer.<br>&gt;&gt; <br>&gt;&gt; When naming, we need to learn to stop treating the comfortable ring of<br>&gt;&gt; familiar word patterns as an arbiter of success.<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Riley<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 2, 2016, at 10:49 AM, Riley Testut &lt;rileytestut at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I kinda agree that these names still aren&#39;t the best. FWIW, I much<br>&gt;&gt;&gt;&gt; preferred the originals, even if they could be misleading.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What if we changed the names to be verbs instead of adjectives? Something like &quot;IntegerLiteralTransforming&quot;?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 2, 2016, at 10:35 AM, Dave Abrahams via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; on Sat Jul 02 2016, Anton Zhilin &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -1 from me. I suggest to wait until we get generic protocols<br>&gt;&gt;&gt;&gt;&gt;&gt; in Swift 4, then we can use the following:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; protocol From&lt;T&gt; {<br>&gt;&gt;&gt;&gt;&gt;&gt;  init(_ from: T)<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; And deprecate all the weird Convertibles.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Even if we could do that, “From” would never be an appropriate name for<br>&gt;&gt;&gt;&gt;&gt; the ability to express a type as a particular kind of literal.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; -Dave<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; -Dave<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
