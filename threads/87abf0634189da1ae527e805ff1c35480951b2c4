<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>July 19, 2016 at 10:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br></p><p>	https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 20, 2016 at 07:00:00am</p></header><div class="content"><p>I&#39;d personally leave it as is, but am kind of indifferent on the matter.<br></p><p>The subscript is a hybrid between var and func and with the arguments, it always felt more of a function to me, without them, it felt more like a var to me.<br></p><p>The logical thing might be to have double-syntax:<br></p><p>subscript: Int {<br>	get { … }<br>	set { … }<br>}<br></p><p>but with parameters, leave the function model:<br></p><p>subscript(parameter: Int) -&gt; ElementType {<br>	get { … }<br>	set { … }<br>}<br></p><p>But that brings a certain inconsistency to the language...<br></p><p><br>&gt; On Jul 20, 2016, at 7:50 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/15ed660cd9d971062f9dd5084932a698?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>David Rönnqvist</string> &lt;david.ronnqvist at gmail.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>One comment Inline<br></p><p>&gt; On 20 Jul 2016, at 07:58, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;d personally leave it as is, but am kind of indifferent on the matter.<br>&gt; <br>&gt; The subscript is a hybrid between var and func and with the arguments, it always felt more of a function to me, without them, it felt more like a var to me.<br>&gt; <br>&gt; The logical thing might be to have double-syntax:<br>&gt; <br>&gt; subscript: Int {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br></p><p>I&#39;ve never seen a subscript without parameters before and have a hard time imagining what it would be used for. Wouldn&#39;t that be better served with just a property?<br></p><p>&gt; but with parameters, leave the function model:<br>&gt; <br>&gt; subscript(parameter: Int) -&gt; ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; But that brings a certain inconsistency to the language...<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:50 AM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>July 19, 2016 at 11:00:00pm</p></header><div class="content"><p>On Tue, Jul 19, 2016 at 10:50 PM, Chris Lattner via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br></p><p>Weakly against.<br></p><p>The subscript is a crossover between a function and a computed<br>property, and depending how you look at it, you will find either &quot;:&quot;<br>to be a better fit if you argue that they are closer to properties, or<br>that &quot;-&gt;&quot; is better, if you argue that subscripts are closer to<br>functions.  I don&#39;t find either argument to be more convincing that<br>the other, so I don&#39;t see a reason to change this part of the<br>language.<br></p><p>I wouldn&#39;t mind if the change would be made though, but I think by<br>changing subscripts to use colons we would end in the opposite, but<br>totally symmetrical situation compared to what we have now.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 20, 2016 at 06:00:00pm</p></header><div class="content"><p>On 20.07.2016 9:12, Dmitri Gribenko via swift-evolution wrote:<br>&gt; On Tue, Jul 19, 2016 at 10:50 PM, Chris Lattner via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt; Weakly against.<br>&gt;<br>&gt; The subscript is a crossover between a function and a computed<br>&gt; property, and depending how you look at it, you will find either &quot;:&quot;<br>&gt; to be a better fit if you argue that they are closer to properties, or<br>&gt; that &quot;-&gt;&quot; is better, if you argue that subscripts are closer to<br></p><p>Just want to understand this opinion. How subscript could be closer to <br>function(method) than to property?<br>Calling subscript you don&#39;t use `()`<br>Subscript could be assigned to some value, just like property, method <br>couldn&#39;t be.<br>What does `-&gt;` syntax mean for subscript setter? In all other parts of <br>language `-&gt;` means &#39;returns&#39;, i.e. requirement to return some value. Here <br>we have to read this as &#39;returns T but for setter it want to get T&#39;<br>Setter of subscript *does not* return anything.<br></p><p>For me, subscript is *much* more like property with getter/setter, than <br>method from any point of view(declaration or using).<br></p><p>&gt; functions.  I don&#39;t find either argument to be more convincing that<br>&gt; the other, so I don&#39;t see a reason to change this part of the<br>&gt; language.<br>&gt;<br>&gt; I wouldn&#39;t mind if the change would be made though, but I think by<br>&gt; changing subscripts to use colons we would end in the opposite, but<br>&gt; totally symmetrical situation compared to what we have now.<br>&gt;<br>&gt; Dmitri<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July 19, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; What is your evaluation of the proposal?<br></p><p>I&#39;m not in favor of it because I see no tangible benefit, and it feels like we don&#39;t need changes that break source for the sake of breaking source already. I don&#39;t think that it&#39;s worth the effort.<br></p><p>&gt; Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It&#39;s unclear to me that there was a problem in the first place. Saying that the arrow is &quot;very much out of place&quot; seems like a broad exaggeration to me. I&#39;m also not in favor of accessors that throw either, if such a proposal ever comes to light.<br></p><p>&gt; Does this proposal fit well with the feel and direction of Swift?<br></p><p>I&#39;m lukewarm on that one.<br></p><p>&gt; If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>.NET implements indexers (subscripts) as properties. However, it&#39;s a common cause of confusion for people who want to access them using reflection. I agree that subscripts are not &quot;obviously methods&quot;, but the .NET experience leads me to believe that they&#39;re not &quot;obviously properties&quot; either, so I&#39;m fine with subscripts being their own thing.<br></p><p>&gt; How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick glance, read the whole proposal, didn&#39;t look at the discussion very much.<br></p><p>&quot;Named accessors&quot; as presented in the future directions could as well be implemented with the -&gt; syntax for the return type. The biggest differentiating point is &quot;var&quot; instead of &quot;func&quot;. This comment isn&#39;t meant to endorse or disapprove of named accessors, I&#39;m just saying that we can have it independently of whether we change the syntax.<br></p><p>Félix<br></p><p>&gt; Le 19 juil. 2016 à 22:50:37, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160719/b822233f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 20, 2016 at 07:00:00am</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 20 Jul 2016, at 06:50, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt; <br>&gt;    https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt;    * What is your evaluation of the proposal?<br></p><p>I am quite against this change as it changes an understandable albeit some people may not think of it as perfect syntax with a syntax that is IMHO confusing actually. <br></p><p>The -&gt; symbol in much of Swift, especially in methods and method like bits like this one, is clearly understood as specifying what is being returned to the caller while the :  symbol is more prevalently associated with protocol conformance and subclassing for example.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No, as I do not feel there is a problem actually.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>No, the change is unnecessary in my opinion and not an improvement over what the language offers.<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>I do not think any language I have used would mix conformance/subtyping with the syntax for returning arguments.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br></p><p>Followed the e-mail thread and read the proposal.<br></p><p>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt;    https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/7337f762/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>July 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On 20 Jul 2016, Chris Lattner wrote:<br>&gt; <br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I&#39;m mildly in favour because I think (settable) subscripts are more similar to properties than functions. But is this change worth having in Swift 3? I&#39;m a bit surprised it&#39;s discussed this late in the cycle.<br></p><p>Here are some considerations on the topic:<br></p><p>1. If we bring colons in, why not change the parentheses into brackets too? Like so:<br></p><p>    public subscript[index: Int]: Element<br></p><p>2. If we change the arrows into colons but then later choose to make throwing subscripts possible, how could that be still done? Probable answer: by adding the `throws` specifier to the getter or setter as needed.<br></p><p>3. Do we want to address the fact that – unlike functions – subscript arguments currently have implicitly blank external names, i.e. that `subscript(at: Int)` and `subscript(_ at: Int)` are equivalent? I don&#39;t think we do; but if that&#39;s the case then it&#39;s probably a good idea to also make the declaration syntax less alike with functions. So that would be a small argument in favour of SE-0122.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Probably not at this stage. I think this change could be introduced even post-Swift 3, although that would then require maintaining both syntaxes for an extended period of time.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>I think so.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>N/A<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>A quick reading.<br></p><p>— Pyry<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/8370e1b9/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>July 20, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 20 Jul 2016, at 06:50, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I&#39;m leaning towards in favour, but very marginally as to be frank I&#39;m not that bothered either way. The subscript is a definite hybrid of property and function, but then so is a computed property, only the subscript has the possibility of arguments, which makes it slightly more function oriented.<br></p><p>So I don&#39;t know, I&#39;d say the fact that a subscript with setter makes it more like a property overall, but again it&#39;s a very slim difference.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Not really; I don&#39;t think anyone is losing any sleep over having to use function style declaration. It might be a little easier for newbies to use the colon, but I&#39;m not sure as the duality doesn&#39;t make either style a clear winner; really we&#39;d need more information about which people find easier to use.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Both styles are Swifty, this may be very marginally better, but it&#39;s a tough call.<br>&gt; <br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read, it&#39;s pretty straightforward though.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 20, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On Jul 19, 2016, at 10:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>I think the colon has too little visual weight for this role. In a property declaration, the colon sits to the right of an identifier:<br></p><p>	var widgetID: WidgetUUID<br></p><p>But in a subscript, it sits to the right of a long, punctuation-filled, and potentially convoluted parameter list:<br></p><p>	subscript(id widgetID: WidgetUUID): Widget { … }<br></p><p>In this environment, the colon vanishes. Using arrow instead gives us a symbol that not only stands out more, but which is conventionally given spacing on both sides. Both of these assist you in seeing the symbol, helping you visually parse the declaration. It also helps that this symbol is not the same one used at least once and sometimes more often within the parameter list itself.<br></p><p>Thus, we have the current syntax:<br></p><p>	subscript(id widgetID: WidgetUUID) -&gt; Widget { … }<br></p><p>I understand where the impulse comes from, I really do. Looked at as an abstract question, colon is more correct, because there&#39;s no function involved here. But subscript syntax faces many of the same challenges that led to the adoption of the arrow in functions, and I think we have to go where those human factors lead us.<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes, I think proposals on this topic are appropriate.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>No; I think that&#39;s where this proposal falls down. Swift happily emphasizes clarity over purity, and I think arrow is clearer.<br></p><p>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Off the top of my head, I can&#39;t think of one with an analogous issue.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Glance.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 20, 2016 at 05:00:00am</p></header><div class="content"><p>&gt; On Jul 20, 2016, at 5:16 AM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt; 	subscript(id widgetID: WidgetUUID): Widget { … }<br></p><p>Plus, as a minor issue, certain chat clients which shall remain nameless will convert `):` to a graphical smiley. That will make some programmers frown.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>July 20, 2016 at 06:00:00pm</p></header><div class="content"><p>Regards<br>LM<br>(From mobile)<br></p><p>On Jul 20, 2016, at 2:16 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 19, 2016, at 10:50 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    * What is your evaluation of the proposal?<br>&gt; <br>&gt; I think the colon has too little visual weight for this role. In a property declaration, the colon sits to the right of an identifier:<br>&gt; <br>&gt;    var widgetID: WidgetUUID<br>&gt; <br>&gt; But in a subscript, it sits to the right of a long, punctuation-filled, and potentially convoluted parameter list:<br>&gt; <br>&gt;    subscript(id widgetID: WidgetUUID): Widget { … }<br>&gt; <br>&gt; In this environment, the colon vanishes.<br></p><p>You trumpet it like it is a universal truth... I have been back into lots of ts for 2 weeks now and low and behold none of the colons have vanished yet ;-) <br>More seriously, I think u underestimate the way the brain just adapts. None of this is hard to read:<br></p><p>interface Hashable { getHash(): number }<br>Interface Dictionary { [name:string]:string|number }<br>interface T extends Hashable { }<br>class SomeTypeName&lt;Type extends Hashable&gt; {<br>  public getHash():number {<br>    return ...;<br>  }<br>  public type():this {<br>    return Type;<br>  }<br>}<br>function compare&lt;T1 extends T, T2 extends T&gt;(lhs:SomeTypeName&lt;T1&gt;, rhs:SomeTypeName&lt;T2&gt;):boolean {<br>  return lhs.getHash() != rhs.getHash();<br>}<br></p><p>and neither is this:<br></p><p>export function newDataStore&lt;T extends DataStore&lt;U&gt;, U&gt; (ctor: { new (config:DataStoreConfig):T}, config:DataStoreConfig):T {<br>   return new ctor(config)<br>}<br></p><p><br>&gt; Using arrow instead gives us a symbol that not only stands out more, but which is conventionally given spacing on both sides. Both of these assist you in seeing the symbol, helping you visually parse the declaration. It also helps that this symbol is not the same one used at least once and sometimes more often within the parameter list itself.<br>&gt; <br>&gt; Thus, we have the current syntax:<br>&gt; <br>&gt;    subscript(id widgetID: WidgetUUID) -&gt; Widget { … }<br>&gt; <br>&gt; I understand where the impulse comes from, I really do. Looked at as an abstract question, colon is more correct, because there&#39;s no function involved here. But subscript syntax faces many of the same challenges that led to the adoption of the arrow in functions, and I think we have to go where those human factors lead us.<br>&gt; <br>&gt;&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; Yes, I think proposals on this topic are appropriate.<br>&gt; <br>&gt;&gt;    * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; No; I think that&#39;s where this proposal falls down. Swift happily emphasizes clarity over purity, and I think arrow is clearer.<br>&gt; <br>&gt;&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Off the top of my head, I can&#39;t think of one with an analogous issue.<br>&gt; <br>&gt;&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt; <br>&gt; Glance.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 20, 2016 at 05:00:00pm</p></header><div class="content"><p>+1 to clean up the syntax of subscripts. They acts as properties, not <br>methods, so it is natural to express them with `:` and not with `-&gt;`.<br></p><p>Actually, I&#39;d prefer additional change to use [] instead of () in <br>declaration like:<br></p><p>subscript[externalName internalName: ParamType] : ElementType {<br>     get { … }<br>     set { … }<br>}<br></p><p>especially if thinking about &quot;Future directions&quot; and confusion with <br>parameterised accessor syntax(both declared with `()` but first used with <br>`[]` and second with `()`).<br></p><p>On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;<br>&gt; 	* What is your evaluation of the proposal?<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 20, 2016 at 10:00:00am</p></header><div class="content"><p>I’m +0.5 on this. I think it’s very natural to think of subscript as a parameterized property. I&#39;ve felt like I’m doing mental gymnastics to reconcile the signature of the setter, and I think replacing `-&gt;` with `:` might actually make this easier to reason about.<br></p><p>I’m not sure why the style in the proposal differs from that that’s typical in Swift. Usually, there’s no space between the property name and the colon, a la: `subscript(index: Int): Element { … }`. I think the proposal should be updated to reflect typical Swift style unless it’s proposing a deviation here (which seems unlikely given the goal to unify the syntax with property syntax).<br></p><p>&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt; <br>&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt; <br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt; <br>&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt; <br>&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt; <br>&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt; <br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br></p><p>I got to second this suggestion. To me this is an elegant solution. <br></p><p>If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>why not declare it in a special way like the above?<br></p><p>I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br></p><p>subscript[externalName internalName: ParamType] : ElementType {<br>    get { … }<br>    set { … }<br>}<br></p><p>I don’t see another place in the language where [] would make more sense than here: <br>Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br></p><p>&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt; totally symmetrical situation compared to what we have now.<br></p><p><br> <br></p><p>&gt; <br>&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt; <br>&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt; <br>&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/77485ad8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July 20, 2016 at 01:00:00pm</p></header><div class="content"><p>I’ll concur with Jose:<br></p><p>Either replace parens with square brackets so the declaration of a<br>subscript matches its point of use (in which case a colon would be<br>acceptable) or else leave it as it is.<br></p><p>I am (-1) on the proposal as written, (+1) on square brackets for<br>subscripts (with either colon or arrow), and (+0.5) on keeping the status<br>quo.<br></p><p>Nevin<br></p><p><br></p><p>On Wed, Jul 20, 2016 at 1:17 PM, Jose Cheyo Jimenez via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 to clean up the syntax of subscripts. They acts as properties, not<br>&gt; methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;<br>&gt; Actually, I&#39;d prefer additional change to use [] instead of () in<br>&gt; declaration like:<br>&gt;<br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I got to second this suggestion. To me this is an elegant solution.<br>&gt;<br>&gt; If subscripts are so special that Swift decided to give it its own name<br>&gt; (as oppose to just making it two functions),<br>&gt; why not declare it in a special way like the above?<br>&gt;<br>&gt; I think that in addition to replacing -&gt; with : if we replaced () with []<br>&gt; then it would be much clearer that this is not a function or property.<br>&gt;<br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I don’t see another place in the language where [] would make more sense<br>&gt; than here:<br>&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri<br>&gt; Gribenko said down thread -&gt;<br>&gt;<br>&gt; I think by changing subscripts to use colons we would end in the opposite,<br>&gt; but<br>&gt; totally symmetrical situation compared to what we have now.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; especially if thinking about &quot;Future directions&quot; and confusion with<br>&gt; parameterised accessor syntax(both declared with `()` but first used with<br>&gt; `[]` and second with `()`).<br>&gt;<br>&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now<br>&gt; and runs through July 24. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature,<br>&gt; how do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/f9f78641/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 20, 2016 at 02:00:00pm</p></header><div class="content"><p>I like this syntax better. But do you guys think we could remove this<br>&quot;subscript&quot; prefix? Could we actually bring subscripts closer to<br>computed properties by doing something like &quot;var self[externaName<br>internalName : ParamType] : ElemenType&quot;? That could also support the<br>idea of creating named subscripts by replacing self with another name.<br></p><p>L<br></p><p><br>On 20 July 2016 at 14:17, Jose Cheyo Jimenez via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; +1 to clean up the syntax of subscripts. They acts as properties, not<br>&gt; methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;<br>&gt; Actually, I&#39;d prefer additional change to use [] instead of () in<br>&gt; declaration like:<br>&gt;<br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;    get { … }<br>&gt;    set { … }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I got to second this suggestion. To me this is an elegant solution.<br>&gt;<br>&gt; If subscripts are so special that Swift decided to give it its own name (as<br>&gt; oppose to just making it two functions),<br>&gt; why not declare it in a special way like the above?<br>&gt;<br>&gt; I think that in addition to replacing -&gt; with : if we replaced () with []<br>&gt; then it would be much clearer that this is not a function or property.<br>&gt;<br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt;<br>&gt;<br>&gt; I don’t see another place in the language where [] would make more sense<br>&gt; than here:<br>&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko<br>&gt; said down thread -&gt;<br>&gt;<br>&gt; I think by changing subscripts to use colons we would end in the opposite,<br>&gt; but<br>&gt; totally symmetrical situation compared to what we have now.<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; especially if thinking about &quot;Future directions&quot; and confusion with<br>&gt; parameterised accessor syntax(both declared with `()` but first used with<br>&gt; `[]` and second with `()`).<br>&gt;<br>&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now<br>&gt; and runs through July 24. The proposal is available here:<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the review<br>&gt; manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt; * What is your evaluation of the proposal?<br>&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt; Swift?<br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; * If you have used other languages or libraries with a similar feature, how<br>&gt; do you feel that this proposal compares to those?<br>&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt; or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d9dbc0dfeb74eab8dd9bbd9cbd84680?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Jose Cheyo Jimenez</string> &lt;cheyo at masters3d.com&gt;<p>July 20, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Jul 20, 2016, at 10:36 AM, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br>&gt; <br>&gt; I like this syntax better. But do you guys think we could remove this<br>&gt; &quot;subscript&quot; prefix?<br>I like the subscripts to be explicit. <br></p><p>&gt; Could we actually bring subscripts closer to<br>&gt; computed properties by doing something like &quot;var self[externaName<br>&gt; internalName : ParamType] : ElemenType&quot;? That could also support the<br>&gt; idea of creating named subscripts by replacing self with another name.<br></p><p>:) I can already see how this could turn swift into Objc. <br>I don’t think I like that idea. ;( People already abuse subscripts as it is.<br></p><p>&gt; L<br>&gt; <br>&gt; <br>&gt; On 20 July 2016 at 14:17, Jose Cheyo Jimenez via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not<br>&gt;&gt; methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt; <br>&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in<br>&gt;&gt; declaration like:<br>&gt;&gt; <br>&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;   get { … }<br>&gt;&gt;   set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I got to second this suggestion. To me this is an elegant solution.<br>&gt;&gt; <br>&gt;&gt; If subscripts are so special that Swift decided to give it its own name (as<br>&gt;&gt; oppose to just making it two functions),<br>&gt;&gt; why not declare it in a special way like the above?<br>&gt;&gt; <br>&gt;&gt; I think that in addition to replacing -&gt; with : if we replaced () with []<br>&gt;&gt; then it would be much clearer that this is not a function or property.<br>&gt;&gt; <br>&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;    get { … }<br>&gt;&gt;    set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I don’t see another place in the language where [] would make more sense<br>&gt;&gt; than here:<br>&gt;&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko<br>&gt;&gt; said down thread -&gt;<br>&gt;&gt; <br>&gt;&gt; I think by changing subscripts to use colons we would end in the opposite,<br>&gt;&gt; but<br>&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with<br>&gt;&gt; parameterised accessor syntax(both declared with `()` but first used with<br>&gt;&gt; `[]` and second with `()`).<br>&gt;&gt; <br>&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt; <br>&gt;&gt; Hello Swift community,<br>&gt;&gt; <br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now<br>&gt;&gt; and runs through July 24. The proposal is available here:<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt; <br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; or, if you would like to keep your feedback private, directly to the review<br>&gt;&gt; manager.<br>&gt;&gt; <br>&gt;&gt; What goes into a review?<br>&gt;&gt; <br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt; When writing your review, here are some questions you might want to answer<br>&gt;&gt; in your review:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; * Is the problem being addressed significant enough to warrant a change to<br>&gt;&gt; Swift?<br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how<br>&gt;&gt; do you feel that this proposal compares to those?<br>&gt;&gt; * How much effort did you put into your review? A glance, a quick reading,<br>&gt;&gt; or an in-depth study?<br>&gt;&gt; <br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt; <br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt; <br>&gt;&gt; Thank you,<br>&gt;&gt; <br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a5a2cebcb5559ab317c1ce5a5ed9a064?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Garth Snyder</string> &lt;garth at garthsnyder.com&gt;<p>July 20, 2016 at 12:00:00pm</p></header><div class="content"><p>+1<br></p><p>I prefer the current syntax from a subjective and readability perspective.<br></p><p>However, the current notation of -&gt; Type being used to declare an input parameter to set {} just strikes me as weird and wrong. The symbol -&gt; means “returns a” or “yields”. Since we’re declaring a type that might be either inbound or outbound, the neutral : is more appropriate.<br></p><p>I didn’t initially think this was all that important to address, but having considered it more, I agree that it’s a wart worth excising and is worth the disruption for users.<br></p><p>Garth<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/6094e244/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>July 20, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Jul 20, 2016, at 12:58 PM, Garth Snyder via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; However, the current notation of -&gt; Type being used to declare an input parameter to set {} just strikes me as weird and wrong. The symbol -&gt; means “returns a” or “yields”. Since we’re declaring a type that might be either inbound or outbound, the neutral : is more appropriate.<br></p><p>If, as seems likely for lens support, we eventually supported inout functions:<br></p><p>	func foo(x: Int) -&gt; inout String {<br>		get { return myStr }<br>		set { myStr = newValue }<br>	}<br></p><p>Would you feel differently about having `:` on subscript returns? Or would you want to use `:` on inout functions, too?<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>Sent from my iPad<br></p><p>On Jul 20, 2016, at 8:47 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jul 20, 2016, at 12:58 PM, Garth Snyder via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; However, the current notation of -&gt; Type being used to declare an input parameter to set {} just strikes me as weird and wrong. The symbol -&gt; means “returns a” or “yields”. Since we’re declaring a type that might be either inbound or outbound, the neutral : is more appropriate.<br>&gt; <br>&gt; If, as seems likely for lens support, we eventually supported inout functions:<br>&gt; <br>&gt;    func foo(x: Int) -&gt; inout String {<br>&gt;        get { return myStr }<br>&gt;        set { myStr = newValue }<br>&gt;    }<br>&gt; <br>&gt; Would you feel differently about having `:` on subscript returns? Or would you want to use `:` on inout functions, too?<br></p><p>I think this is semantically identical to the idea of named accessors listed as a future direction.<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a5a2cebcb5559ab317c1ce5a5ed9a064?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Garth Snyder</string> &lt;garth at garthsnyder.com&gt;<p>July 20, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; Brent Royal-Gordon: If, as seems likely for lens support, we eventually supported inout functions:<br>&gt; <br>&gt; 	func foo(x: Int) -&gt; inout String {<br>&gt; 		get { return myStr }<br>&gt; 		set { myStr = newValue }<br>&gt; 	}<br>&gt; <br>&gt; Would you feel differently about having `:` on subscript returns? Or would you want to use `:` on inout functions, too?<br></p><p>Since I haven’t used lenses &lt;https://en.wikipedia.org/wiki/Bidirectional_transformation&gt; and had to look them up, I’m really not entitled to an opinion on this. But it’s an interesting question.<br></p><p>To the extent that one conceptualizes lenses as having a “natural&quot; inherent directionality, it seems desirable for the declaration to express that. So at first glance, -&gt; doesn’t seem out of place here.<br></p><p>Garth<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/48589541/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 20, 2016 at 07:00:00pm</p></header><div class="content"><p>* What is your evaluation of the proposal?<br></p><p>-1. <br></p><p>To me, subscripts have always seen more functions than properties for the fact that they can take arbitrary number of arguments. If we were to &quot;clean up&quot; its syntax, I&#39;d rather align it with functions. Something along the lines of<br></p><p>  subscribe(get) func foo(_ x: X) -&gt; Y<br>  subscribe(set) func foo(_ y: Y)<br></p><p> * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>No. More importantly, the change is a regression visually.<br></p><p>* Does this proposal fit well with the feel and direction of Swift?<br></p><p>It&#39;s an attempt of a syntax dress-up.<br></p><p>* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br></p><p> * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br> <br>Quick read of proposal and discussion on ML.<br></p><p>Daniel Duan<br>Sent from my iPhone<br></p><p>&gt; On Jul 20, 2016, at 10:17 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt; <br>&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt;&gt; <br>&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;    get { … }<br>&gt;&gt;    set { … }<br>&gt;&gt; }<br>&gt; <br>&gt; I got to second this suggestion. To me this is an elegant solution. <br>&gt; <br>&gt; If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>&gt; why not declare it in a special way like the above?<br>&gt; <br>&gt; I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br>&gt; <br>&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;     get { … }<br>&gt;     set { … }<br>&gt; }<br>&gt; <br>&gt; I don’t see another place in the language where [] would make more sense than here: <br>&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br>&gt; <br>&gt;&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt; <br>&gt; <br>&gt;  <br>&gt; <br>&gt;&gt; <br>&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt;&gt; <br>&gt;&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/fe88a144/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 20, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br></p><p>This seems irrelevant since Swift already has computed properties which pretend not to be a function.<br></p><p>&gt; On Jul 20, 2016, at 7:13 PM, Duan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; * What is your evaluation of the proposal &lt;x-apple-data-detectors://3&gt;?<br>&gt; <br>&gt; -1. <br>&gt; <br>&gt; To me, subscripts have always seen more functions than properties for the fact that they can take arbitrary number of arguments. If we were to &quot;clean up&quot; its syntax, I&#39;d rather align it with functions. Something along the lines of<br>&gt; <br>&gt;   subscribe(get) func foo(_ x: X) -&gt; Y<br>&gt;   subscribe(set) func foo(_ y: Y)<br>&gt; <br>&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt; <br>&gt; No. More importantly, the change is a regression visually.<br>&gt; <br>&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt; <br>&gt; It&#39;s an attempt of a syntax dress-up.<br>&gt; <br>&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt; <br>&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt; <br>&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;  <br>&gt; Quick read of proposal and discussion on ML.<br>&gt; <br>&gt; Daniel Duan<br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Jul 20, 2016, at 10:17 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;    get { … }<br>&gt;&gt;&gt;    set { … }<br>&gt;&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I got to second this suggestion. To me this is an elegant solution. <br>&gt;&gt; <br>&gt;&gt; If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>&gt;&gt; why not declare it in a special way like the above?<br>&gt;&gt; <br>&gt;&gt; I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br>&gt;&gt; <br>&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;     get { … }<br>&gt;&gt;     set { … }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I don’t see another place in the language where [] would make more sense than here: <br>&gt;&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt;&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  <br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/c422b885/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 20, 2016 at 07:00:00pm</p></header><div class="content"><p>It&#39;s part of the review template :)<br></p><p>Daniel Duan<br>Sent from my iPhone<br></p><p>&gt; On Jul 20, 2016, at 7:23 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt; <br>&gt; This seems irrelevant since Swift already has computed properties which pretend not to be a function.<br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:13 PM, Duan via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; * What is your evaluation of the proposal?<br>&gt;&gt; <br>&gt;&gt; -1. <br>&gt;&gt; <br>&gt;&gt; To me, subscripts have always seen more functions than properties for the fact that they can take arbitrary number of arguments. If we were to &quot;clean up&quot; its syntax, I&#39;d rather align it with functions. Something along the lines of<br>&gt;&gt; <br>&gt;&gt;   subscribe(get) func foo(_ x: X) -&gt; Y<br>&gt;&gt;   subscribe(set) func foo(_ y: Y)<br>&gt;&gt; <br>&gt;&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt; <br>&gt;&gt; No. More importantly, the change is a regression visually.<br>&gt;&gt; <br>&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt; <br>&gt;&gt; It&#39;s an attempt of a syntax dress-up.<br>&gt;&gt; <br>&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt; <br>&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt;&gt; <br>&gt;&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;  <br>&gt;&gt; Quick read of proposal and discussion on ML.<br>&gt;&gt; <br>&gt;&gt; Daniel Duan<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 10:17 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;&gt;    get { … }<br>&gt;&gt;&gt;&gt;    set { … }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I got to second this suggestion. To me this is an elegant solution. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>&gt;&gt;&gt; why not declare it in a special way like the above?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;     get { … }<br>&gt;&gt;&gt;     set { … }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I don’t see another place in the language where [] would make more sense than here: <br>&gt;&gt;&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt;&gt;&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/60019319/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e95942f1fe843f007ef5430b9acff78b?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Jaden Geller</string> &lt;jaden.geller at gmail.com&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>I don&#39;t disagree with discussing other languages. I&#39;m just pointing out that C++ doesn&#39;t have a notion of computed properties, so subscript couldn&#39;t pretend to be a computed property even if it&#39;d like! Python does have a similar construct, but it&#39;s computed properties *also* look like functions (you first define a set_foo() and a get_foo() before making the property) so it is also not relevant.<br></p><p>&gt; On Jul 20, 2016, at 7:24 PM, Duan &lt;daniel at duan.org&gt; wrote:<br>&gt; <br>&gt; It&#39;s part of the review template :)<br>&gt; <br>&gt; Daniel Duan<br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On Jul 20, 2016, at 7:23 PM, Jaden Geller &lt;jaden.geller at gmail.com &lt;mailto:jaden.geller at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt;&gt; <br>&gt;&gt; This seems irrelevant since Swift already has computed properties which pretend not to be a function.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 7:13 PM, Duan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * What is your evaluation of the proposal &lt;x-apple-data-detectors://3&gt;?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To me, subscripts have always seen more functions than properties for the fact that they can take arbitrary number of arguments. If we were to &quot;clean up&quot; its syntax, I&#39;d rather align it with functions. Something along the lines of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;   subscribe(get) func foo(_ x: X) -&gt; Y<br>&gt;&gt;&gt;   subscribe(set) func foo(_ y: Y)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; No. More importantly, the change is a regression visually.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It&#39;s an attempt of a syntax dress-up.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;  <br>&gt;&gt;&gt; Quick read of proposal and discussion on ML.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 20, 2016, at 10:17 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;&gt;&gt;    get { … }<br>&gt;&gt;&gt;&gt;&gt;    set { … }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I got to second this suggestion. To me this is an elegant solution. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>&gt;&gt;&gt;&gt; why not declare it in a special way like the above?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;&gt;     get { … }<br>&gt;&gt;&gt;&gt;     set { … }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I don’t see another place in the language where [] would make more sense than here: <br>&gt;&gt;&gt;&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt;&gt;&gt;&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/c765aef7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 20, 2016 at 08:00:00pm</p></header><div class="content"><p>I think there’s some value to point out these counterparts even when we are trying to do something new. Specifically, how much would we have lost, if we didn’t accept the proposal? By looking at these examples, one might conclude “not much”.<br></p><p>Also, it’s not the main reason I’m against this change.<br></p><p>&gt; On Jul 20, 2016, at 8:06 PM, Jaden Geller &lt;jaden.geller at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t disagree with discussing other languages. I&#39;m just pointing out that C++ doesn&#39;t have a notion of computed properties, so subscript couldn&#39;t pretend to be a computed property even if it&#39;d like! Python does have a similar construct, but it&#39;s computed properties *also* look like functions (you first define a set_foo() and a get_foo() before making the property) so it is also not relevant.<br>&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:24 PM, Duan &lt;daniel at duan.org &lt;mailto:daniel at duan.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It&#39;s part of the review template :)<br>&gt;&gt; <br>&gt;&gt; Daniel Duan<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On Jul 20, 2016, at 7:23 PM, Jaden Geller &lt;jaden.geller at gmail.com &lt;mailto:jaden.geller at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This seems irrelevant since Swift already has computed properties which pretend not to be a function.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 7:13 PM, Duan via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * What is your evaluation of the proposal &lt;x-apple-data-detectors://3&gt;?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; To me, subscripts have always seen more functions than properties for the fact that they can take arbitrary number of arguments. If we were to &quot;clean up&quot; its syntax, I&#39;d rather align it with functions. Something along the lines of<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;   subscribe(get) func foo(_ x: X) -&gt; Y<br>&gt;&gt;&gt;&gt;   subscribe(set) func foo(_ y: Y)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  * Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; No. More importantly, the change is a regression visually.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; It&#39;s an attempt of a syntax dress-up.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Python&#39;s __getitem__() method, C++&#39;s [] operator are some analogous examples. Non -of them pretend not to be a function. The users of these features appear to be satisfied by the decision.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;  * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt; Quick read of proposal and discussion on ML.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Daniel Duan<br>&gt;&gt;&gt;&gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 20, 2016, at 10:17 AM, Jose Cheyo Jimenez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 20, 2016, at 7:51 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; +1 to clean up the syntax of subscripts. They acts as properties, not methods, so it is natural to express them with `:` and not with `-&gt;`.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Actually, I&#39;d prefer additional change to use [] instead of () in declaration like:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;&gt;&gt;&gt;    get { … }<br>&gt;&gt;&gt;&gt;&gt;&gt;    set { … }<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I got to second this suggestion. To me this is an elegant solution. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; If subscripts are so special that Swift decided to give it its own name (as oppose to just making it two functions), <br>&gt;&gt;&gt;&gt;&gt; why not declare it in a special way like the above?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I think that in addition to replacing -&gt; with : if we replaced () with [] then it would be much clearer that this is not a function or property. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; subscript[externalName internalName: ParamType] : ElementType {<br>&gt;&gt;&gt;&gt;&gt;     get { … }<br>&gt;&gt;&gt;&gt;&gt;     set { … }<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I don’t see another place in the language where [] would make more sense than here: <br>&gt;&gt;&gt;&gt;&gt; Otherwise I don’t see  replacing -&gt; with : as a big win like Dmitri Gribenko said down thread -&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I think by changing subscripts to use colons we would end in the opposite, but<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; totally symmetrical situation compared to what we have now.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;  <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; especially if thinking about &quot;Future directions&quot; and confusion with parameterised accessor syntax(both declared with `()` but first used with `[]` and second with `()`).<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On 20.07.2016 8:50, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello Swift community,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; What goes into a review?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; The goal of the review process is to improve the proposal under review through constructive criticism and contribute to the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	* What is your evaluation of the proposal?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	* If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md &lt;https://github.com/apple/swift-evolution/blob/master/process.md&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thank you,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt;&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/29a034d2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 20, 2016 at 12:00:00pm</p></header><div class="content"><p>On 20 July 2016 at 02:50, Chris Lattner via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now and runs through July 24. The proposal is available here:<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br></p><p>I feel a little reluctant to approve this but I&#39;ll have to give my +1<br>just for the sake of consistency. Computed properties already use<br>colons despite being internally just functions just like subscripts<br>and the syntax is almost the same. I agree there may be an issue with<br>readability but so do with computed properties and I didn&#39;t see anyone<br>complaining about that syntax.<br></p><p>&gt;         * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Despite accepting the change, I still don&#39;t think it is significant<br>enough. It is merely a cosmetic change that adds/enhances nothing to<br>the language.<br></p><p>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br></p><p>I&#39;m not sure but it grants a bit more of consistency in its syntax.<br></p><p>&gt;         * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Other languages I worked with make no distinction on how you declare<br>the type of variables, function returns and properties. I&#39;m not saying<br>&quot;drop the arrows&quot; thou.<br></p><p>&gt;         * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Read the proposal and followed the thread discussing it.<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July 20, 2016 at 07:00:00pm</p></header><div class="content"><p>-1 from me. Getter subscipts are closer to functions, where name is<br>`subscript`.<br>Of course, they are called with brackets, but they are still a kind of<br>functions, and when we assign them to function variables, they get type<br>that matches their declaration.<br></p><p>2016-07-20 8:50 GMT+03:00 Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; Hello Swift community,<br>&gt;<br>&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins now<br>&gt; and runs through July 24. The proposal is available here:<br>&gt;<br>&gt;<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;<br>&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt; should be sent to the swift-evolution mailing list at<br>&gt;<br>&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; or, if you would like to keep your feedback private, directly to the<br>&gt; review manager.<br>&gt;<br>&gt; What goes into a review?<br>&gt;<br>&gt; The goal of the review process is to improve the proposal under review<br>&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt; When writing your review, here are some questions you might want to answer<br>&gt; in your review:<br>&gt;<br>&gt;         * What is your evaluation of the proposal?<br>&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt; change to Swift?<br>&gt;         * Does this proposal fit well with the feel and direction of Swift?<br>&gt;         * If you have used other languages or libraries with a similar<br>&gt; feature, how do you feel that this proposal compares to those?<br>&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt; reading, or an in-depth study?<br>&gt;<br>&gt; More information about the Swift evolution process is available at<br>&gt;<br>&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;<br>&gt; Thank you,<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/f7805975/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Review] SE-0122: Use colons for subscript declarations</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 20, 2016 at 12:00:00pm</p></header><div class="content"><p>Anton, I think where people find the current notation problematic is with<br>_setters_, not getters.<br></p><p>On Wed, Jul 20, 2016 at 11:58 AM, Anton Zhilin via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 from me. Getter subscipts are closer to functions, where name is<br>&gt; `subscript`.<br>&gt; Of course, they are called with brackets, but they are still a kind of<br>&gt; functions, and when we assign them to function variables, they get type<br>&gt; that matches their declaration.<br>&gt;<br>&gt; 2016-07-20 8:50 GMT+03:00 Chris Lattner via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt;:<br>&gt;<br>&gt;&gt; Hello Swift community,<br>&gt;&gt;<br>&gt;&gt; The review of &quot;SE-0122: Use colons for subscript declarations &quot; begins<br>&gt;&gt; now and runs through July 24. The proposal is available here:<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0122-use-colons-for-subscript-type-declarations.md<br>&gt;&gt;<br>&gt;&gt; Reviews are an important part of the Swift evolution process. All reviews<br>&gt;&gt; should be sent to the swift-evolution mailing list at<br>&gt;&gt;<br>&gt;&gt;         https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; or, if you would like to keep your feedback private, directly to the<br>&gt;&gt; review manager.<br>&gt;&gt;<br>&gt;&gt; What goes into a review?<br>&gt;&gt;<br>&gt;&gt; The goal of the review process is to improve the proposal under review<br>&gt;&gt; through constructive criticism and contribute to the direction of Swift.<br>&gt;&gt; When writing your review, here are some questions you might want to answer<br>&gt;&gt; in your review:<br>&gt;&gt;<br>&gt;&gt;         * What is your evaluation of the proposal?<br>&gt;&gt;         * Is the problem being addressed significant enough to warrant a<br>&gt;&gt; change to Swift?<br>&gt;&gt;         * Does this proposal fit well with the feel and direction of<br>&gt;&gt; Swift?<br>&gt;&gt;         * If you have used other languages or libraries with a similar<br>&gt;&gt; feature, how do you feel that this proposal compares to those?<br>&gt;&gt;         * How much effort did you put into your review? A glance, a quick<br>&gt;&gt; reading, or an in-depth study?<br>&gt;&gt;<br>&gt;&gt; More information about the Swift evolution process is available at<br>&gt;&gt;<br>&gt;&gt;         https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt;&gt;<br>&gt;&gt; Thank you,<br>&gt;&gt;<br>&gt;&gt; -Chris Lattner<br>&gt;&gt; Review Manager<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160720/d2f3e052/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e841a2a33b72c728c55ff99200275784?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0122: Use colons for subscript declarations</strong> from <string>James Froggatt</string> &lt;james.froggatt at me.com&gt;<p>July 21, 2016 at 11:00:00am</p></header><div class="content"><p>&gt;    * What is your evaluation of the proposal?<br></p><p>I think colons better represent a subscript&#39;s relationship to its type, so in favour.<br>This could also set the precedent for future ‘parameterised accessor’ syntax in Swift, in which case I prefer this cleaner syntax to something like ‘-&gt; inout’.<br></p><p>While there are parallels to functions, as some people have noted, I think the parallel is strictly the parameter list, which will remain either way. The semantic relationship to the type, which should be conveyed by the symbol, is much closer to that of computed properties, which use a colon.<br></p><p>&gt;    * Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>It&#39;s a minor pain point currently, but in the long term sets a precedent for future parameterised accessors.<br></p><p>&gt;    * Does this proposal fit well with the feel and direction of Swift?<br></p><p>It think this defines it, so N/A?<br></p><p>&gt;    * If you have used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Not sure how other languages handle this. This is a decision specifically on Swift&#39;s syntax, so we should go with what makes sense for Swift.<br></p><p>&gt;    * How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>I&#39;ve read it through the proposal a couple of times, and wrote it once.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160721/3f547b5a/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
