<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f45c9108a779695d5ccf44941eea31f0?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Zsolt Szatmári</string> &lt;szatmari.zs at gmail.com&gt;<p>March 23, 2016 at 01:00:00am</p></header><div class="content"><p>Dear All,<br></p><p>  <br></p><p>  The only thing I am really missing right now from Swift is described as<br>following. This works in some other languages, e.g.  F#, Kotlin, and Haskell.<br></p><p>  <br></p><p>  F# example (taken from https://fsharpforfunandprofit.com/posts/correctness-<br>immutability/)<br></p><p>  <br></p><p>let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br></p><p>let alice = {john with FirstName=&quot;Alice&quot;}<br></p><p>  <br></p><p>  Current way to do this in Swift is:<br></p><p>  <br></p><p>let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)  <br>var alice = john  <br>alice.firstName = &quot;Alice&quot;  <br></p><p>  <br></p><p>  This might seem to be a nuance, but it&#39;s more cumbersome (especially if one<br>wants to do this frequently), and we are left with a var at the end.<br></p><p>  Also, this idea rhymes with the current direction of removing var arguments<br>from functions.<br></p><p>  What do You think? Thank You.<br></p><p>  <br></p><p>Zsolt<br></p><p>  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/e9f2a7ef/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>March 23, 2016 at 10:00:00am</p></header><div class="content"><p>I cannot remember any use of such a feature but instead of a language feature there is also a reasonable library solution:<br></p><p>// inspired by the lens idea (of Joe Groff I think)<br>// there is probably a better name<br>func lens&lt;T&gt;(value: T, lensClosure: inout T -&gt; ()) -&gt; T {<br>        var value = value<br>        lensClosure(&amp;value)<br>        return value<br>}<br></p><p>// usage<br>let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>let alice = lens(john) { $0.firstName = &quot;Alice&quot; }<br></p><p><br>Kind regards<br>- Maximilian<br></p><p>&gt; Am 23.03.2016 um 09:06 schrieb Zsolt Szatmári via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Dear All,<br>&gt; <br>&gt;   The only thing I am really missing right now from Swift is described as following. This works in some other languages, e.g.  F#, Kotlin, and Haskell.<br>&gt; <br>&gt;   F# example (taken from https://fsharpforfunandprofit.com/posts/correctness-immutability/)<br>&gt;   <br>&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt; <br>&gt;   Current way to do this in Swift is:<br>&gt;   <br>&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; var alice = john<br>&gt; alice.firstName = &quot;Alice&quot;<br>&gt; <br>&gt;   This might seem to be a nuance, but it&#39;s more cumbersome (especially if one wants to do this frequently), and we are left with a var at the end.<br>&gt;   Also, this idea rhymes with the current direction of removing var arguments from functions.<br>&gt;   What do You think? Thank You.<br>&gt; <br>&gt; Zsolt<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/84984d21/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 23, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt; <br>&gt;   Current way to do this in Swift is:<br>&gt;   <br>&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; var alice = john<br>&gt; alice.firstName = &quot;Alice&quot;<br></p><p>I think this is better modeled in Swift as something like:<br></p><p>	let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>	let alice = with(john) {<br>		$0.firstName = &quot;Alice&quot;<br>	}<br></p><p>`with` would be something like:<br></p><p>	func with&lt;Value&gt;(value: Value, function: Value throws -&gt; Void) rethrows -&gt; Value {<br>		var mutableValue = value<br>		return try function(&amp;mutableValue)<br>	}<br></p><p>This would serve many different purposes:<br></p><p>* If the value is a value type, allows you to return a modified copy<br>* Allows you to customize a value&#39;s properties immediately after initializing it, which many people have asked for<br>* Acts as a `tap` function when the block doesn&#39;t change the value (see &lt;http://ruby-doc.org/core-2.3.0/Object.html#method-i-tap&gt;)<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 23, 2016 at 07:00:00am</p></header><div class="content"><p>I like this.  I’m always annoyed when I need var just because I can’t get all my initialization done with let.<br></p><p>- Will<br></p><p>&gt; On Mar 23, 2016, at 2:32 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt;&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt;&gt; <br>&gt;&gt;  Current way to do this in Swift is:<br>&gt;&gt; <br>&gt;&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt;&gt; var alice = john<br>&gt;&gt; alice.firstName = &quot;Alice&quot;<br>&gt; <br>&gt; I think this is better modeled in Swift as something like:<br>&gt; <br>&gt; 	let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; 	let alice = with(john) {<br>&gt; 		$0.firstName = &quot;Alice&quot;<br>&gt; 	}<br>&gt; <br>&gt; `with` would be something like:<br>&gt; <br>&gt; 	func with&lt;Value&gt;(value: Value, function: Value throws -&gt; Void) rethrows -&gt; Value {<br>&gt; 		var mutableValue = value<br>&gt; 		return try function(&amp;mutableValue)<br>&gt; 	}<br>&gt; <br>&gt; This would serve many different purposes:<br>&gt; <br>&gt; * If the value is a value type, allows you to return a modified copy<br>&gt; * Allows you to customize a value&#39;s properties immediately after initializing it, which many people have asked for<br>&gt; * Acts as a `tap` function when the block doesn&#39;t change the value (see &lt;http://ruby-doc.org/core-2.3.0/Object.html#method-i-tap&gt;)<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>March 23, 2016 at 02:00:00pm</p></header><div class="content"><p>Yeah a way to have a function that mutates a struct return a new copy with<br>that mutation would be awesome ! Rather than mutating in place.<br></p><p>*___________________________________*<br></p><p>*James⎥Head Of CEO*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Wed, Mar 23, 2016 at 2:28 PM, William Dillon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I like this.  I’m always annoyed when I need var just because I can’t get<br>&gt; all my initialization done with let.<br>&gt;<br>&gt; - Will<br>&gt;<br>&gt; &gt; On Mar 23, 2016, at 2:32 AM, Brent Royal-Gordon via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt; &gt;&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  Current way to do this in Swift is:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; &gt;&gt; var alice = john<br>&gt; &gt;&gt; alice.firstName = &quot;Alice&quot;<br>&gt; &gt;<br>&gt; &gt; I think this is better modeled in Swift as something like:<br>&gt; &gt;<br>&gt; &gt;       let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; &gt;       let alice = with(john) {<br>&gt; &gt;               $0.firstName = &quot;Alice&quot;<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; `with` would be something like:<br>&gt; &gt;<br>&gt; &gt;       func with&lt;Value&gt;(value: Value, function: Value throws -&gt; Void)<br>&gt; rethrows -&gt; Value {<br>&gt; &gt;               var mutableValue = value<br>&gt; &gt;               return try function(&amp;mutableValue)<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; This would serve many different purposes:<br>&gt; &gt;<br>&gt; &gt; * If the value is a value type, allows you to return a modified copy<br>&gt; &gt; * Allows you to customize a value&#39;s properties immediately after<br>&gt; initializing it, which many people have asked for<br>&gt; &gt; * Acts as a `tap` function when the block doesn&#39;t change the value (see &lt;<br>&gt; http://ruby-doc.org/core-2.3.0/Object.html#method-i-tap&gt;)<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/d8af8837/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/db5e2fe903111a67076e0a6b97e635dd?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Tyler Cloutier</string> &lt;cloutiertyler at aol.com&gt;<p>March 23, 2016 at 01:00:00pm</p></header><div class="content"><p>I would very much like a standardized way of doing this. I am currently writing a game implementation in a functional style and the syntax for updating fields in pretty clunky. I’d like to avoid having to explicitly use var’s at all to accomplish it.<br></p><p><br>&gt; On Mar 23, 2016, at 7:29 AM, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Yeah a way to have a function that mutates a struct return a new copy with that mutation would be awesome ! Rather than mutating in place.<br>&gt; <br>&gt; ___________________________________<br>&gt; <br>&gt; James⎥Head Of CEO<br>&gt; <br>&gt; james at supmenow.com &lt;mailto:james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com/&gt;<br>&gt; Sup<br>&gt; <br>&gt; Runway East &gt; <br>&gt; <br>&gt; 10 Finsbury Square<br>&gt; <br>&gt; London<br>&gt; <br>&gt;  &gt; EC2A 1AF <br>&gt; <br>&gt; <br>&gt; On Wed, Mar 23, 2016 at 2:28 PM, William Dillon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; I like this.  I’m always annoyed when I need var just because I can’t get all my initialization done with let.<br>&gt; <br>&gt; - Will<br>&gt; <br>&gt; &gt; On Mar 23, 2016, at 2:32 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt; &gt;&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;  Current way to do this in Swift is:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; &gt;&gt; var alice = john<br>&gt; &gt;&gt; alice.firstName = &quot;Alice&quot;<br>&gt; &gt;<br>&gt; &gt; I think this is better modeled in Swift as something like:<br>&gt; &gt;<br>&gt; &gt;       let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; &gt;       let alice = with(john) {<br>&gt; &gt;               $0.firstName = &quot;Alice&quot;<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; `with` would be something like:<br>&gt; &gt;<br>&gt; &gt;       func with&lt;Value&gt;(value: Value, function: Value throws -&gt; Void) rethrows -&gt; Value {<br>&gt; &gt;               var mutableValue = value<br>&gt; &gt;               return try function(&amp;mutableValue)<br>&gt; &gt;       }<br>&gt; &gt;<br>&gt; &gt; This would serve many different purposes:<br>&gt; &gt;<br>&gt; &gt; * If the value is a value type, allows you to return a modified copy<br>&gt; &gt; * Allows you to customize a value&#39;s properties immediately after initializing it, which many people have asked for<br>&gt; &gt; * Acts as a `tap` function when the block doesn&#39;t change the value (see &lt;http://ruby-doc.org/core-2.3.0/Object.html#method-i-tap &lt;http://ruby-doc.org/core-2.3.0/Object.html#method-i-tap&gt;&gt;)<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Brent Royal-Gordon<br>&gt; &gt; Architechies<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160323/cd2af82f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f822334c2f6ebeafd3a41cd44c82a62b?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Andrey Tarantsov</string> &lt;andrey at tarantsov.com&gt;<p>March 24, 2016 at 02:00:00am</p></header><div class="content"><p>&gt; I would very much like a standardized way of doing this.<br></p><p>+1 for a function like with/lens in stdlib.<br></p><p>A.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>March 23, 2016 at 11:00:00pm</p></header><div class="content"><p>+1 for a standardized way of doing this!<br></p><p>R+<br></p><p>Sent from my iPhone<br></p><p>On 23 Mar 2016, at 21:51, Andrey Tarantsov via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; I would very much like a standardized way of doing this.<br>&gt; <br>&gt; +1 for a function like with/lens in stdlib.<br>&gt; <br>&gt; A.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>Could we draft up a proposal :)<br></p><p>*___________________________________*<br></p><p>*James⎥Head Of CEO*<br></p><p>*james at supmenow.com &lt;james at supmenow.com&gt;⎥supmenow.com &lt;http://supmenow.com&gt;*<br></p><p>*Sup*<br></p><p>*Runway East *<br></p><p>*10 Finsbury Square*<br></p><p>*London*<br></p><p>* EC2A 1AF *<br></p><p>On Wed, Mar 23, 2016 at 10:49 PM, Rudolf Adamkovic via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 for a standardized way of doing this!<br>&gt;<br>&gt; R+<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 23 Mar 2016, at 21:51, Andrey Tarantsov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; &gt;&gt; I would very much like a standardized way of doing this.<br>&gt; &gt;<br>&gt; &gt; +1 for a function like with/lens in stdlib.<br>&gt; &gt;<br>&gt; &gt; A.<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/d75533f0/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 24, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 23, 2016, at 3:32 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; let john = {firstName=&quot;John&quot;; lastName=&quot;Doe&quot;}<br>&gt;&gt; let alice = {john with FirstName=&quot;Alice&quot;}<br>&gt;&gt; <br>&gt;&gt;  Current way to do this in Swift is:<br>&gt;&gt; <br>&gt;&gt; let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt;&gt; var alice = john<br>&gt;&gt; alice.firstName = &quot;Alice&quot;<br>&gt; <br>&gt; I think this is better modeled in Swift as something like:<br>&gt; <br>&gt; 	let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt; 	let alice = with(john) {<br>&gt; 		$0.firstName = &quot;Alice&quot;<br>&gt; 	}<br></p><p>You can kind of do this now:<br></p><p>struct Person {<br>    var firstName, lastName: String<br>}<br></p><p>func modify&lt;T&gt;(item: T, update: (inout T) -&gt; Void) -&gt; T {<br>    var this = item<br>    update(&amp;this)<br>    return this<br>}<br></p><p>let carol: Person = modify(john) {<br>    $0.firstName = &quot;Carol&quot;<br>}<br></p><p>print(carol)<br></p><p><br>-- E<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160324/d7ba265d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>March 24, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt;&gt; I think this is better modeled in Swift as something like:<br>&gt;&gt; <br>&gt;&gt; 	let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt;&gt; 	let alice = with(john) {<br>&gt;&gt; 		$0.firstName = &quot;Alice&quot;<br>&gt;&gt; 	}<br>&gt; <br>&gt; You can kind of do this now:<br>&gt; <br>&gt; struct Person {<br>&gt;     var firstName, lastName: String<br>&gt; }<br>&gt; <br>&gt; func modify&lt;T&gt;(item: T, update: (inout T) -&gt; Void) -&gt; T {<br>&gt;     var this = item<br>&gt;     update(&amp;this)<br>&gt;     return this<br>&gt; }<br>&gt; <br>&gt; let carol: Person = modify(john) {<br>&gt;     $0.firstName = &quot;Carol&quot;<br>&gt; }<br>&gt; <br>&gt; print(carol)<br></p><p>You *can* do this now. I&#39;m suggesting it be added to Stdlib.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 24, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Mar 24, 2016, at 3:39 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; I think this is better modeled in Swift as something like:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 	let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt;&gt;&gt; 	let alice = with(john) {<br>&gt;&gt;&gt; 		$0.firstName = &quot;Alice&quot;<br>&gt;&gt;&gt; 	}<br>&gt;&gt; <br>&gt;&gt; You can kind of do this now:<br>&gt;&gt; <br>&gt;&gt; struct Person {<br>&gt;&gt;    var firstName, lastName: String<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; func modify&lt;T&gt;(item: T, update: (inout T) -&gt; Void) -&gt; T {<br>&gt;&gt;    var this = item<br>&gt;&gt;    update(&amp;this)<br>&gt;&gt;    return this<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; let carol: Person = modify(john) {<br>&gt;&gt;    $0.firstName = &quot;Carol&quot;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; print(carol)<br>&gt; <br>&gt; You *can* do this now. I&#39;m suggesting it be added to Stdlib.<br>&gt; <br></p><p>Ah, then that&#39;s a &quot;pass it by Dmitri&quot; kind of thing, isn&#39;t it?<br></p><p>-- E<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>idea: immutable setters for structs and tuples?</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>March 27, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt; Am 24.03.2016 um 22:40 schrieb Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt;&gt; On Mar 24, 2016, at 3:39 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; I think this is better modeled in Swift as something like:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;    let john = (firstName:&quot;John&quot;, lastName:&quot;Doe&quot;)<br>&gt;&gt;&gt;&gt;    let alice = with(john) {<br>&gt;&gt;&gt;&gt;        $0.firstName = &quot;Alice&quot;<br>&gt;&gt;&gt;&gt;    }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; You can kind of do this now:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct Person {<br>&gt;&gt;&gt;   var firstName, lastName: String<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func modify&lt;T&gt;(item: T, update: (inout T) -&gt; Void) -&gt; T {<br>&gt;&gt;&gt;   var this = item<br>&gt;&gt;&gt;   update(&amp;this)<br>&gt;&gt;&gt;   return this<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let carol: Person = modify(john) {<br>&gt;&gt;&gt;   $0.firstName = &quot;Carol&quot;<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; print(carol)<br>&gt;&gt; <br>&gt;&gt; You *can* do this now. I&#39;m suggesting it be added to Stdlib.<br>&gt; <br>&gt; Ah, then that&#39;s a &quot;pass it by Dmitri&quot; kind of thing, isn&#39;t it?<br>&gt; <br>&gt; -- E<br></p><p>I think so. Although there should be a formal proposal.<br>Regarding the new naming conventions shouldn&#39;t it be &quot;modified&quot;?<br></p><p>Kind regards<br>- Maximilian<br></p><p>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
