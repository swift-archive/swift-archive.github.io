<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>SE-0031 and Swift 2</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April 16, 2016 at 05:00:00am</p></header><div class="content"><p>Hello,<br></p><p>I&#39;m writing to complain about SE-0031 and Swift 2 compatibility.  I understand (and agree with!) the change, but the migration between now and 2017 is annoying, hence my complaint.<br></p><p>In snapshot swift-DEVELOPMENT-SNAPSHOT-2016-04-12-a, we started erroring on the old syntax.  That means that this:<br></p><p>    func foo(inout bar: Int) { }<br></p><p>is not legal Swift 3.<br></p><p>...however, the new syntax:<br></p><p>    func foo(bar: inout Int) { }<br></p><p>is not legal Swift 2.  This complicates compiling for both, which several of my projects currently do.<br></p><p>/Further complicating matters/, Swift does not understand line-scoped ifdefs.  So this:<br></p><p>    #if swift(&gt;=3.0)<br>        func foo(bar: inout Int) {<br>    #else<br>        func foo(inout bar: Int) {<br>    #endif<br>        //my<br>            //long<br>            //functon<br>            //definition<br>    }<br></p><p>Is not legal Swift.  The only way I know of is to say:<br></p><p>    #if swift(&gt;=3.0)<br>        func foo(bar: inout Int) {<br>                //my<br>                //long<br>                //functon<br>                //definition<br>        }<br>    #else<br>        func foo(inout bar: Int) {<br>                //my<br>                //long<br>                //functon<br>                //definition<br>        }<br>    #endif<br></p><p>which forces duplication of the entire function definition.<br></p><p>My suggestion would be one or more of the following:<br></p><p>1.  Support both syntaxes in Swift 3 &quot;trunk&quot; (e.g. until Swift 3 is released).<br>2.  Backport the new syntax to Swift 2.2<br>3.  Consider allowing line-scoped ifdefs<br></p><p>Thanks for reading, and sorry to rain on a parade I largely think is Good For Swift ™<br></p><p>Drew<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/3c74ca7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc045f9bdc3bd1885767f2a2ba8af458?s=50"></div><header><strong>SE-0031 and Swift 2</strong> from <string>Jonathan Tang</string> &lt;jonathan.d.tang at gmail.com&gt;<p>April 16, 2016 at 01:00:00pm</p></header><div class="content"><p>FWIW the Python 3 migration found removal of old syntax and introduction of<br>new syntax in the same release to be hugely problematic, and ended up<br>back-porting a lot of Python 2 syntax features into 3.1 &amp; 3.2 to ease the<br>transition.  The problem is that large codebases are very rarely controlled<br>by a single team, and each sub-library usually has their own schedule for<br>update, such that cutting over all at once is not possible.  The approach<br>usually needs to be<br></p><p>1. Introduce the new syntax<br>2. Deprecate the old syntax, with fixits and strong warnings about when<br>it&#39;ll be removed.<br>3. Allow at least one version (and usually a couple) to pass as a<br>transition.<br>4. Remove the old syntax.<br></p><p>Not sure how much of a problem this&#39;ll be for Swift, which has had some<br>pretty clear &quot;things may break with Swift 3&quot; warnings on it.  My own<br>organization is small, and can probably cut over all at once as long as<br>there&#39;s a migration tool.  But I&#39;ve worked in big organizations where<br>upgrading would be a complete non-starter if there&#39;s no transitional syntax<br>that&#39;s compatible with both old and new compilers, and once Swift gets a<br>decent third-party library ecosystem it&#39;d be impractical to ever upgrade<br>until library dependencies were upgraded, and it&#39;d be impractical to<br>upgrade the libraries until all their clients had switched.  Deadlock.<br></p><p>On Sat, Apr 16, 2016 at 3:55 AM, Drew Crawford via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Hello,<br>&gt;<br>&gt; I&#39;m writing to complain about SE-0031 and Swift 2 compatibility.  I<br>&gt; understand (and agree with!) the change, but the migration between now and<br>&gt; 2017 is annoying, hence my complaint.<br>&gt;<br>&gt; In snapshot swift-DEVELOPMENT-SNAPSHOT-2016-04-12-a, we started erroring<br>&gt; on the old syntax.  That means that this:<br>&gt;<br>&gt;     func foo(inout bar: Int) { }<br>&gt;<br>&gt; is not legal Swift 3.<br>&gt;<br>&gt; ...however, the new syntax:<br>&gt;<br>&gt;     func foo(bar: inout Int) { }<br>&gt;<br>&gt; is not legal Swift 2.  This complicates compiling for both, which several<br>&gt; of my projects currently do.<br>&gt;<br>&gt; /*Further complicating matters*/, Swift does not understand line-scoped<br>&gt; ifdefs.  So this:<br>&gt;<br>&gt;     #if swift(&gt;=3.0)<br>&gt;         func foo(bar: inout Int) {<br>&gt;     #else<br>&gt;         func foo(inout bar: Int) {<br>&gt;     #endif<br>&gt;         //my<br>&gt;             //long<br>&gt;             //functon<br>&gt;             //definition<br>&gt;     }<br>&gt;<br>&gt; Is not legal Swift.  The only way I know of is to say:<br>&gt;<br>&gt;     #if swift(&gt;=3.0)<br>&gt;         func foo(bar: inout Int) {<br>&gt;                 //my<br>&gt;                 //long<br>&gt;                 //functon<br>&gt;                 //definition<br>&gt;         }<br>&gt;     #else<br>&gt;         func foo(inout bar: Int) {<br>&gt;                 //my<br>&gt;                 //long<br>&gt;                 //functon<br>&gt;                 //definition<br>&gt;         }<br>&gt;     #endif<br>&gt;<br>&gt; which forces duplication of the entire function definition.<br>&gt;<br>&gt; My suggestion would be one or more of the following:<br>&gt;<br>&gt; 1.  Support both syntaxes in Swift 3 &quot;trunk&quot; (e.g. until Swift 3 is<br>&gt; released).<br>&gt; 2.  Backport the new syntax to Swift 2.2<br>&gt; 3.  Consider allowing line-scoped ifdefs<br>&gt;<br>&gt; Thanks for reading, and sorry to rain on a parade I largely think is Good<br>&gt; For Swift ™<br>&gt;<br>&gt; Drew<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/0bb7e50d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a838c63b9093a77fb88231d65effa3b3?s=50"></div><header><strong>SE-0031 and Swift 2</strong> from <string>Drew Crawford</string> &lt;drew at sealedabstract.com&gt;<p>April 16, 2016 at 04:00:00pm</p></header><div class="content"><p>My stuff is maintained by a single team.  My problem is that Swift 2 is too immature to be usable on Linux, while Swift 3 is considered not production-grade on iOS/OSX.  I have code that compiles for both platforms, and so it needs to support 2+3, 2 for Darwin and 3 for Linux.<br></p><p>I would really like to see a saner way to go about this than duplicating whole function definitions.  Maybe that solution is to backport the new syntax, or to forward-port the old syntax with a warning.<br></p><p><br></p><p>&gt; On Apr 16, 2016, at 3:52 PM, Jonathan Tang &lt;jonathan.d.tang at gmail.com&gt; wrote:<br>&gt; <br>&gt; FWIW the Python 3 migration found removal of old syntax and introduction of new syntax in the same release to be hugely problematic, and ended up back-porting a lot of Python 2 syntax features into 3.1 &amp; 3.2 to ease the transition.  The problem is that large codebases are very rarely controlled by a single team, and each sub-library usually has their own schedule for update, such that cutting over all at once is not possible.  The approach usually needs to be<br>&gt; <br>&gt; 1. Introduce the new syntax<br>&gt; 2. Deprecate the old syntax, with fixits and strong warnings about when it&#39;ll be removed.<br>&gt; 3. Allow at least one version (and usually a couple) to pass as a transition.<br>&gt; 4. Remove the old syntax.<br>&gt; <br>&gt; Not sure how much of a problem this&#39;ll be for Swift, which has had some pretty clear &quot;things may break with Swift 3&quot; warnings on it.  My own organization is small, and can probably cut over all at once as long as there&#39;s a migration tool.  But I&#39;ve worked in big organizations where upgrading would be a complete non-starter if there&#39;s no transitional syntax that&#39;s compatible with both old and new compilers, and once Swift gets a decent third-party library ecosystem it&#39;d be impractical to ever upgrade until library dependencies were upgraded, and it&#39;d be impractical to upgrade the libraries until all their clients had switched.  Deadlock. <br>&gt; <br>&gt; On Sat, Apr 16, 2016 at 3:55 AM, Drew Crawford via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Hello,<br>&gt; <br>&gt; I&#39;m writing to complain about SE-0031 and Swift 2 compatibility.  I understand (and agree with!) the change, but the migration between now and 2017 is annoying, hence my complaint.<br>&gt; <br>&gt; In snapshot swift-DEVELOPMENT-SNAPSHOT-2016-04-12-a, we started erroring on the old syntax.  That means that this:<br>&gt; <br>&gt;     func foo(inout bar: Int) { }<br>&gt; <br>&gt; is not legal Swift 3.<br>&gt; <br>&gt; ...however, the new syntax:<br>&gt; <br>&gt;     func foo(bar: inout Int) { }<br>&gt; <br>&gt; is not legal Swift 2.  This complicates compiling for both, which several of my projects currently do.<br>&gt; <br>&gt; /Further complicating matters/, Swift does not understand line-scoped ifdefs.  So this:<br>&gt; <br>&gt;     #if swift(&gt;=3.0)<br>&gt;         func foo(bar: inout Int) {<br>&gt;     #else<br>&gt;         func foo(inout bar: Int) {<br>&gt;     #endif<br>&gt;         //my<br>&gt;             //long<br>&gt;             //functon<br>&gt;             //definition<br>&gt;     }<br>&gt; <br>&gt; Is not legal Swift.  The only way I know of is to say:<br>&gt; <br>&gt;     #if swift(&gt;=3.0)<br>&gt;         func foo(bar: inout Int) {<br>&gt;                 //my<br>&gt;                 //long<br>&gt;                 //functon<br>&gt;                 //definition<br>&gt;         }<br>&gt;     #else<br>&gt;         func foo(inout bar: Int) {<br>&gt;                 //my<br>&gt;                 //long<br>&gt;                 //functon<br>&gt;                 //definition<br>&gt;         }<br>&gt;     #endif<br>&gt; <br>&gt; which forces duplication of the entire function definition.<br>&gt; <br>&gt; My suggestion would be one or more of the following:<br>&gt; <br>&gt; 1.  Support both syntaxes in Swift 3 &quot;trunk&quot; (e.g. until Swift 3 is released).<br>&gt; 2.  Backport the new syntax to Swift 2.2<br>&gt; 3.  Consider allowing line-scoped ifdefs<br>&gt; <br>&gt; Thanks for reading, and sorry to rain on a parade I largely think is Good For Swift ™<br>&gt; <br>&gt; Drew<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160416/08b87aa4/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
