<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Fwd: [Review] SE-0006 Apply API Guidelines to the Standard Library</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>January 30, 2016 at 03:00:00pm</p></header><div class="content"><p>I&#39;d like to distinguish between concrete types and more abstract ones like protocols. A suffix like &quot;Type&quot; is best what I can think of (now).<br>&gt; <br>There is at least one thread which discusses the use of protocols with associated types as (abstract) generic types.<br></p><p>Pseudo syntax:<br>let collection: CollectionType&lt;Element == Int&gt; = [1, 3]<br></p><p>So a differentiation between concrete and abstract types is preferable in my opinion.<br>This could also be a language feature rather than a convention.<br></p><p>- Maximilian<br></p><p>&gt; <br>&gt; Am 30.01.2016 um 10:53 schrieb Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt;&gt;&gt; I still don’t see why we need a suffix at all, what is unclear about the CollectionType protocol simply being called Collection instead?<br>&gt;&gt; <br>&gt;&gt; They&#39;re attractive nuisances. Someone wants an integer type, sees Integer, tries to use it, and suddenly they&#39;re getting weird errors about Self and associated object requirements. Or they want a boolean variable, see Boolean, and suddenly their one-bit value is wrapped in a 40-byte protocol witness. Nobody is going to mistake Integerlike or Booleanlike for a concrete type and use it accidentally.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
