<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 13, 2016 at 12:00:00pm</p></header><div class="content"><p>on Wed Apr 13 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; Reverse is the best opposite we have of advance, so it makes sense to<br>&gt;&gt; me. <br>&gt;<br>&gt; Oh, I get it.<br>&gt;<br>&gt;&gt; Or we could use retreat. =) There are other pairs of words that work<br>&gt;&gt; as well, like “increment/decrement”. <br>&gt;<br>&gt; Yeah, unfortunately those carry an incorrect implication when the<br>&gt; indices are numbers, because, e.g. the collection might be offsetting<br>&gt; the number by 2 for each position.  One could of course argue that using<br>&gt; numbers that way as indices was a bad design choice.<br>&gt;<br>&gt; I&#39;ll have to think about that idea again.  We considered and rejected it<br>&gt; for a reason, but it might not be a really strong one.  Thanks for<br>&gt; bringing it up.<br></p><p>...and having talked it over at lunch, now I remember why we rejected<br>it: there&#39;s no good way to make a nonmutating version.<br></p><p>  let x = c.incremented(i)   // reads like an assertion about the past<br>  let y = c.incrementing(i)  // reads like it has side-effects and returns c, or<br>                             // a new version of c<br></p><p>APIs where the receiver returns a modified version of an argument don&#39;t<br>lend themselves to verb forms.<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>April 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Apr 13, 2016, at 12:57 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 13 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Reverse is the best opposite we have of advance, so it makes sense to<br>&gt;&gt;&gt; me. <br>&gt;&gt; <br>&gt;&gt; Oh, I get it.<br>&gt;&gt; <br>&gt;&gt;&gt; Or we could use retreat. =) There are other pairs of words that work<br>&gt;&gt;&gt; as well, like “increment/decrement”. <br>&gt;&gt; <br>&gt;&gt; Yeah, unfortunately those carry an incorrect implication when the<br>&gt;&gt; indices are numbers, because, e.g. the collection might be offsetting<br>&gt;&gt; the number by 2 for each position.  One could of course argue that using<br>&gt;&gt; numbers that way as indices was a bad design choice.<br>&gt;&gt; <br>&gt;&gt; I&#39;ll have to think about that idea again.  We considered and rejected it<br>&gt;&gt; for a reason, but it might not be a really strong one.  Thanks for<br>&gt;&gt; bringing it up.<br>&gt; <br>&gt; ...and having talked it over at lunch, now I remember why we rejected<br>&gt; it: there&#39;s no good way to make a nonmutating version.<br>&gt; <br>&gt;  let x = c.incremented(i)   // reads like an assertion about the past<br>&gt;  let y = c.incrementing(i)  // reads like it has side-effects and returns c, or<br>&gt;                             // a new version of c<br>&gt; <br></p><p>In fact, it does return a new version* of c; just like this:<br></p><p>let s2 = myString.appending(“foo”)<br></p><p>*new version: the result is related to the argument<br></p><p>This works out great:<br></p><p>let next = c.incrementing(first)<br>c.increment(&amp;next)<br></p><p>- Tony<br></p><p>&gt; APIs where the receiver returns a modified version of an argument don&#39;t<br>&gt; lend themselves to verb forms.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>[Review] SE-0065 A New Model for Collections and Indices</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>April 18, 2016 at 08:00:00am</p></header><div class="content"><p>The nonmutating forms  successor/predecessor were fine. No need to match them with the mutating ones IMO.<br></p><p>-Thorsten <br></p><p>&gt; Am 13.04.2016 um 21:57 schrieb Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; <br>&gt; on Wed Apr 13 2016, Dave Abrahams &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; Reverse is the best opposite we have of advance, so it makes sense to<br>&gt;&gt;&gt; me.<br>&gt;&gt; <br>&gt;&gt; Oh, I get it.<br>&gt;&gt; <br>&gt;&gt;&gt; Or we could use retreat. =) There are other pairs of words that work<br>&gt;&gt;&gt; as well, like “increment/decrement”.<br>&gt;&gt; <br>&gt;&gt; Yeah, unfortunately those carry an incorrect implication when the<br>&gt;&gt; indices are numbers, because, e.g. the collection might be offsetting<br>&gt;&gt; the number by 2 for each position.  One could of course argue that using<br>&gt;&gt; numbers that way as indices was a bad design choice.<br>&gt;&gt; <br>&gt;&gt; I&#39;ll have to think about that idea again.  We considered and rejected it<br>&gt;&gt; for a reason, but it might not be a really strong one.  Thanks for<br>&gt;&gt; bringing it up.<br>&gt; <br>&gt; ...and having talked it over at lunch, now I remember why we rejected<br>&gt; it: there&#39;s no good way to make a nonmutating version.<br>&gt; <br>&gt;  let x = c.incremented(i)   // reads like an assertion about the past<br>&gt;  let y = c.incrementing(i)  // reads like it has side-effects and returns c, or<br>&gt;                             // a new version of c<br>&gt; <br>&gt; APIs where the receiver returns a modified version of an argument don&#39;t<br>&gt; lend themselves to verb forms.<br>&gt; <br>&gt; -- <br>&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
