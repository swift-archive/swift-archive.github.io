<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  5, 2016 at 03:00:00pm</p></header><div class="content"><p>This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses colon to separate names and values, and sometimes uses equals. It&#39;s vaguely maddening.<br></p><p>What do I mean? Well, our language has this:<br></p><p>	myFunc(foo, bar: baz)<br></p><p>But it also has:<br></p><p>	@available(iOS, introduced=7.0, deprecated=8.0)<br></p><p>You create a dictionary like this:<br></p><p>	let dict = [&quot;key&quot;: &quot;value&quot;]<br></p><p>But you set it like this:<br></p><p>	dict[&quot;key&quot;] = &quot;value&quot;<br></p><p>Is there some principle here? The @available case seems particularly strange to me, because those values read strongly like parameters to me.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4027ca32415d9fecd483292ef8f98b02?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Andrew Bennett</string> &lt;cacoyi at gmail.com&gt;<p>February  6, 2016 at 11:00:00am</p></header><div class="content"><p>Interesting point, I guess &quot;:&quot; in dictionary literals is to make the syntax<br>unambiguous.<br></p><p>This is currently valid swift:<br></p><p>    let x = [a = b]<br></p><p>Its type is: Array&lt;Void&gt;. It seems like the syntax is clearer if the<br>delimiter isn&#39;t a valid operator.<br></p><p>Also there&#39;s a problem with default value syntax:<br></p><p>    func test(a: Int = 123)<br></p><p>This would be hard to read with only &quot;=&quot;:<br></p><p>    func test(a = Int = 123)<br></p><p>Also if the default value was an operator:<br></p><p>    func test(a = Int -&gt; Int = =)<br></p><p>Granted you could change the less commonly used default syntax, but it&#39;s<br>probably syntactically easier to differentiate user-controller delimiters<br>(assignment) and compiler-controller delimiters (:,). The example with<br>assignment in an array illustrates this.<br></p><p>I do agree &#39;@available&#39; though, it seems like it should be &quot;:&quot;<br></p><p>=)<br></p><p><br>On Sat, Feb 6, 2016 at 10:27 AM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses<br>&gt; colon to separate names and values, and sometimes uses equals. It&#39;s vaguely<br>&gt; maddening.<br>&gt;<br>&gt; What do I mean? Well, our language has this:<br>&gt;<br>&gt;         myFunc(foo, bar: baz)<br>&gt;<br>&gt; But it also has:<br>&gt;<br>&gt;         @available(iOS, introduced=7.0, deprecated=8.0)<br>&gt;<br>&gt; You create a dictionary like this:<br>&gt;<br>&gt;         let dict = [&quot;key&quot;: &quot;value&quot;]<br>&gt;<br>&gt; But you set it like this:<br>&gt;<br>&gt;         dict[&quot;key&quot;] = &quot;value&quot;<br>&gt;<br>&gt; Is there some principle here? The @available case seems particularly<br>&gt; strange to me, because those values read strongly like parameters to me.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/b750e83e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>February  6, 2016 at 01:00:00am</p></header><div class="content"><p>If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br></p><p>        myFunc(number = 4, string = 7)<br></p><p>        func myFunc(number: Int, string: String) {}<br></p><p>Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br></p><p>- Maximilian<br></p><p>&gt; Am 06.02.2016 um 01:36 schrieb Andrew Bennett via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; Interesting point, I guess &quot;:&quot; in dictionary literals is to make the syntax unambiguous.<br>&gt; <br>&gt; This is currently valid swift:<br>&gt; <br>&gt;     let x = [a = b]<br>&gt; <br>&gt; Its type is: Array&lt;Void&gt;. It seems like the syntax is clearer if the delimiter isn&#39;t a valid operator.<br>&gt; <br>&gt; Also there&#39;s a problem with default value syntax:<br>&gt; <br>&gt;     func test(a: Int = 123)<br>&gt; <br>&gt; This would be hard to read with only &quot;=&quot;:<br>&gt; <br>&gt;     func test(a = Int = 123)<br>&gt; <br>&gt; Also if the default value was an operator:<br>&gt; <br>&gt;     func test(a = Int -&gt; Int = =)<br>&gt; <br>&gt; Granted you could change the less commonly used default syntax, but it&#39;s probably syntactically easier to differentiate user-controller delimiters (assignment) and compiler-controller delimiters (:,). The example with assignment in an array illustrates this.<br>&gt; <br>&gt; I do agree &#39;@available&#39; though, it seems like it should be &quot;:&quot;<br>&gt; <br>&gt; =)<br>&gt; <br>&gt; <br>&gt;&gt; On Sat, Feb 6, 2016 at 10:27 AM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses colon to separate names and values, and sometimes uses equals. It&#39;s vaguely maddening.<br>&gt;&gt; <br>&gt;&gt; What do I mean? Well, our language has this:<br>&gt;&gt; <br>&gt;&gt;         myFunc(foo, bar: baz)<br>&gt;&gt; <br>&gt;&gt; But it also has:<br>&gt;&gt; <br>&gt;&gt;         @available(iOS, introduced=7.0, deprecated=8.0)<br>&gt;&gt; <br>&gt;&gt; You create a dictionary like this:<br>&gt;&gt; <br>&gt;&gt;         let dict = [&quot;key&quot;: &quot;value&quot;]<br>&gt;&gt; <br>&gt;&gt; But you set it like this:<br>&gt;&gt; <br>&gt;&gt;         dict[&quot;key&quot;] = &quot;value&quot;<br>&gt;&gt; <br>&gt;&gt; Is there some principle here? The @available case seems particularly strange to me, because those values read strongly like parameters to me.<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/68abe976/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  5, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt; <br>&gt;         myFunc(number = 4, string = 7)<br>&gt; <br>&gt;         func myFunc(number: Int, string: String) {}<br>&gt; <br>&gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br></p><p>To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br></p><p>I suppose mainly what I&#39;d like is for attributes to change:<br></p><p>	@available(iOS, introduced: 7.0, deprecated: 8.0)<br></p><p>And *possibly* for dictionary literals to change:<br></p><p>	let dict = [&quot;key&quot; = &quot;value&quot;]	// Also, the shorthand syntax would be [String = String]<br></p><p>Although dictionary literals seem like a relatively high-impact change compared to its value.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4d13105de53a43ce1df97869ca6c140e?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Maximilian Hünenberger</string> &lt;m.huenenberger at me.com&gt;<p>February  6, 2016 at 02:00:00am</p></header><div class="content"><p>Inline<br></p><p>Am 06.02.2016 um 02:07 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br></p><p>&gt;&gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt;&gt; <br>&gt;&gt;        myFunc(number = 4, string = 7)<br>&gt;&gt; <br>&gt;&gt;        func myFunc(number: Int, string: String) {}<br>&gt;&gt; <br>&gt;&gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br>&gt; <br>&gt; To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br>&gt; <br></p><p>I cannot say whether I like &quot;:&quot; in parameter lists or if I&#39;m just used to them...<br></p><p>Though setting parameters doesn&#39;t seem wrong to me. In fact value types get copied to a new parameter which is declared in the function signature.<br></p><p>&gt; I suppose mainly what I&#39;d like is for attributes to change:<br>&gt; <br>&gt;    @available(iOS, introduced: 7.0, deprecated: 8.0)<br>&gt; <br>&gt; And *possibly* for dictionary literals to change:<br>&gt; <br>&gt;    let dict = [&quot;key&quot; = &quot;value&quot;]    // Also, the shorthand syntax would be [String = String]<br>&gt; <br>&gt; Although dictionary literals seem like a relatively high-impact change compared to its value.<br></p><p>Yeah that would be true and also &quot;:&quot; in dictionaries reads to me like a &quot;map this value to another one&quot;. So it would rather be &quot;=&gt;&quot; than &quot;=&quot; which reads like an assignment to the left &quot;&lt;=&quot;.<br></p><p>- Maximilian<br></p><p>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>February  6, 2016 at 11:00:00am</p></header><div class="content"><p>+1 for changing attributes to using colons, as it would make them read more like a function call (albeit one with slightly different rules).<br></p><p>-1 though for changing dictionary literals; personally I think the colon syntax is a lot clearer, especially when the literal is being assigned, as it means there is only a single, clear assignment.<br></p><p>Regarding assigning new values to a dictionary though, I wonder if we might extend the literal syntax to modifying an existing dictionary? For example, I might do something like:<br></p><p>	myDictionary[“foo”: 1, “bar”: 2]	// Add/set new values for foo and bar<br></p><p>As this could be a neater way to replace:<br></p><p>	myDictionary[“foo”] = 1<br>	myDictionary[“bar”] = 2<br></p><p>Essentially we’d have a subscript for setting a single value, and one for setting a dictionary, without the need to do:<br></p><p>	myDictionary[[“foo”: 1, “bar”: 2]]<br></p><p>Since the second braces should be redundant I think. This would allow developers to avoid the use of assignments with dictionaries if they wish.<br></p><p>&gt; On 6 Feb 2016, at 01:22, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Inline<br>&gt; <br>&gt; Am 06.02.2016 um 02:07 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt; <br>&gt;&gt;&gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       myFunc(number = 4, string = 7)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;       func myFunc(number: Int, string: String) {}<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br>&gt;&gt; <br>&gt;&gt; To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br>&gt;&gt; <br>&gt; <br>&gt; I cannot say whether I like &quot;:&quot; in parameter lists or if I&#39;m just used to them...<br>&gt; <br>&gt; Though setting parameters doesn&#39;t seem wrong to me. In fact value types get copied to a new parameter which is declared in the function signature.<br>&gt; <br>&gt;&gt; I suppose mainly what I&#39;d like is for attributes to change:<br>&gt;&gt; <br>&gt;&gt;   @available(iOS, introduced: 7.0, deprecated: 8.0)<br>&gt;&gt; <br>&gt;&gt; And *possibly* for dictionary literals to change:<br>&gt;&gt; <br>&gt;&gt;   let dict = [&quot;key&quot; = &quot;value&quot;]    // Also, the shorthand syntax would be [String = String]<br>&gt;&gt; <br>&gt;&gt; Although dictionary literals seem like a relatively high-impact change compared to its value.<br>&gt; <br>&gt; Yeah that would be true and also &quot;:&quot; in dictionaries reads to me like a &quot;map this value to another one&quot;. So it would rather be &quot;=&gt;&quot; than &quot;=&quot; which reads like an assignment to the left &quot;&lt;=&quot;.<br>&gt; <br>&gt; - Maximilian<br>&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85a454a69ee2cf2ac4b990dc9e87b664?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Thorsten Seitz</string> &lt;tseitz42 at icloud.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; Am 06.02.2016 um 12:18 schrieb Haravikk via swift-evolution &lt;swift-evolution at swift.org&gt;:<br>&gt; <br>&gt; +1 for changing attributes to using colons, as it would make them read more like a function call (albeit one with slightly different rules).<br>&gt; <br>&gt; -1 though for changing dictionary literals; personally I think the colon syntax is a lot clearer, especially when the literal is being assigned, as it means there is only a single, clear assignment.<br></p><p>I agree with Haravikk on both points.<br></p><p>-Thorsten <br></p><p><br>&gt; Regarding assigning new values to a dictionary though, I wonder if we might extend the literal syntax to modifying an existing dictionary? For example, I might do something like:<br>&gt; <br>&gt;    myDictionary[“foo”: 1, “bar”: 2]    // Add/set new values for foo and bar<br>&gt; <br>&gt; As this could be a neater way to replace:<br>&gt; <br>&gt;    myDictionary[“foo”] = 1<br>&gt;    myDictionary[“bar”] = 2<br>&gt; <br>&gt; Essentially we’d have a subscript for setting a single value, and one for setting a dictionary, without the need to do:<br>&gt; <br>&gt;    myDictionary[[“foo”: 1, “bar”: 2]]<br>&gt; <br>&gt; Since the second braces should be redundant I think. This would allow developers to avoid the use of assignments with dictionaries if they wish.<br>&gt; <br>&gt;&gt; On 6 Feb 2016, at 01:22, Maximilian Hünenberger via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Inline<br>&gt;&gt; <br>&gt;&gt; Am 06.02.2016 um 02:07 schrieb Brent Royal-Gordon &lt;brent at architechies.com&gt;:<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      myFunc(number = 4, string = 7)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;      func myFunc(number: Int, string: String) {}<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br>&gt;&gt; <br>&gt;&gt; I cannot say whether I like &quot;:&quot; in parameter lists or if I&#39;m just used to them...<br>&gt;&gt; <br>&gt;&gt; Though setting parameters doesn&#39;t seem wrong to me. In fact value types get copied to a new parameter which is declared in the function signature.<br>&gt;&gt; <br>&gt;&gt;&gt; I suppose mainly what I&#39;d like is for attributes to change:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  @available(iOS, introduced: 7.0, deprecated: 8.0)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; And *possibly* for dictionary literals to change:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  let dict = [&quot;key&quot; = &quot;value&quot;]    // Also, the shorthand syntax would be [String = String]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Although dictionary literals seem like a relatively high-impact change compared to its value.<br>&gt;&gt; <br>&gt;&gt; Yeah that would be true and also &quot;:&quot; in dictionaries reads to me like a &quot;map this value to another one&quot;. So it would rather be &quot;=&gt;&quot; than &quot;=&quot; which reads like an assignment to the left &quot;&lt;=&quot;.<br>&gt;&gt; <br>&gt;&gt; - Maximilian<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/674fead3bfff884c72fa02c35d68f258?s=50"></div><header><strong>Colon vs. equals</strong> from <string>James Campbell</string> &lt;james at supmenow.com&gt;<p>February  6, 2016 at 05:00:00pm</p></header><div class="content"><p>In Ruby there is a special syntax for hash<br>[ &quot;key&quot; =&gt; &quot;value&quot;] which makes it less ambiguous compared to =<br></p><p>Sent from Outlook Mobile<br></p><p><br></p><p><br>On Fri, Feb 5, 2016 at 5:07 PM -0800, &quot;Brent Royal-Gordon via swift-evolution&quot; &lt;swift-evolution at swift.org&gt; wrote:<br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br>&gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt; <br>&gt;         myFunc(number = 4, string = 7)<br>&gt; <br>&gt;         func myFunc(number: Int, string: String) {}<br>&gt; <br>&gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br></p><p>To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br></p><p>I suppose mainly what I&#39;d like is for attributes to change:<br></p><p>	@available(iOS, introduced: 7.0, deprecated: 8.0)<br></p><p>And *possibly* for dictionary literals to change:<br></p><p>	let dict = [&quot;key&quot; = &quot;value&quot;]	// Also, the shorthand syntax would be [String = String]<br></p><p>Although dictionary literals seem like a relatively high-impact change compared to its value.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p><p>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p><br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/01f26668/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3d118cdf2fe31053bc7032466c4da282?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Craig Cruden</string> &lt;ccruden at novafore.com&gt;<p>February  7, 2016 at 12:00:00am</p></header><div class="content"><p>I would prefer a “map” symbol of some sort (Scala uses -&gt; obviously that is Swifts return)…. <br></p><p>Between : or =…. I would stick with :.<br></p><p>The key is not equal to the value it only maps to it.<br></p><p><br>&gt; On 2016-02-07, at 0:38:25, James Campbell via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; In Ruby there is a special syntax for hash<br>&gt; <br>&gt; [ &quot;key&quot; =&gt; &quot;value&quot;] which makes it less ambiguous compared to =<br>&gt; <br>&gt; Sent from Outlook Mobile &lt;https://aka.ms/qtex0l&gt;<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Fri, Feb 5, 2016 at 5:07 PM -0800, &quot;Brent Royal-Gordon via swift-evolution&quot; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt; &gt; If &quot;:&quot; should be replaced by &quot;=&quot; than only at the call site to make it more consistent with variable declaration and initialization:<br>&gt; &gt; <br>&gt; &gt;         myFunc(number = 4, string = 7)<br>&gt; &gt; <br>&gt; &gt;         func myFunc(number: Int, string: String) {}<br>&gt; &gt; <br>&gt; &gt; Although writing &quot;=&quot; instead of &quot;:&quot; in methods in 1.5 years Swift and over 20 years Objective-C would be a huge change.<br>&gt; <br>&gt; To be clear, I like colon in parameter lists; I don&#39;t see passing a parameter as setting something.<br>&gt; <br>&gt; I suppose mainly what I&#39;d like is for attributes to change:<br>&gt; <br>&gt; 	@available(iOS, introduced: 7.0, deprecated: 8.0)<br>&gt; <br>&gt; And *possibly* for dictionary literals to change:<br>&gt; <br>&gt; 	let dict = [&quot;key&quot; = &quot;value&quot;]	// Also, the shorthand syntax would be [String = String]<br>&gt; <br>&gt; Although dictionary literals seem like a relatively high-impact change compared to its value.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/ed264e53/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; In Ruby there is a special syntax for hash<br>&gt; <br>&gt; [ &quot;key&quot; =&gt; &quot;value&quot;] which makes it less ambiguous compared to =<br></p><p>I&#39;m familiar with this in Ruby (and Perl, where it originated), and I think that `:` is strictly superior to `=&gt;`. (When Ruby 2 introduced `a: x` as a shorthand for `:a =&gt; x`, I jumped on it immediately and never looked back.) The *only* reason to change to `=` is to match dictionary assignment; `=&gt;` doesn&#39;t do that.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>February  6, 2016 at 04:00:00pm</p></header><div class="content"><p>&gt;<br>&gt;  let dict = [&quot;key&quot; = &quot;value&quot;]<br></p><p><br>I&#39;m having buyer&#39;s remorse over supporting this. At first glance, it looks<br>like it&#39;s overloading an assignment operator... to a string literal. I know<br>that&#39;s not what&#39;s really going on under the hood, but on a surface level it<br>just looks very ugly :(<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/7ad836f1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>February  6, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Feb 6, 2016, at 6:26 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;  let dict = [&quot;key&quot; = &quot;value&quot;] <br>&gt; <br>&gt; I&#39;m having buyer&#39;s remorse over supporting this. At first glance, it looks like it&#39;s overloading an assignment operator... to a string literal. I know that&#39;s not what&#39;s really going on under the hood, but on a surface level it just looks very ugly :(<br></p><p>If you think that&#39;s ugly, just imagine what it will look like to initialize an empty one.<br></p><p>let foo: [String = Int] = [=]<br></p><p>Charles<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/10d229fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/85c55778d88fe0cd357b60a7a3ad81b3?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Paul Ossenbruggen</string> &lt;possen at gmail.com&gt;<p>February  6, 2016 at 09:00:00pm</p></header><div class="content"><p>I agree the = does not look good in this context. Think of the colon as a very thin equal sign, then there is no issue. :-)<br></p><p>&gt; On Feb 6, 2016, at 4:33 PM, Charles Srstka via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Feb 6, 2016, at 6:26 PM, Charles Constant via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;  let dict = [&quot;key&quot; = &quot;value&quot;] <br>&gt;&gt; <br>&gt;&gt; I&#39;m having buyer&#39;s remorse over supporting this. At first glance, it looks like it&#39;s overloading an assignment operator... to a string literal. I know that&#39;s not what&#39;s really going on under the hood, but on a surface level it just looks very ugly :(<br>&gt; <br>&gt; If you think that&#39;s ugly, just imagine what it will look like to initialize an empty one.<br>&gt; <br>&gt; let foo: [String = Int] = [=]<br>&gt; <br>&gt; Charles<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/b188996d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>February  6, 2016 at 07:00:00pm</p></header><div class="content"><p>Afaics, the equal sign is way more common to assign values to parameters — but as Objective-C and Swift have labels, colon fits better (some labels don&#39;t make good variable names)<br></p><p>&gt; I suppose mainly what I&#39;d like is for attributes to change:<br>&gt; <br>&gt; 	@available(iOS, introduced: 7.0, deprecated: 8.0)<br></p><p>A name, parenthesis, names for parameters except the first… looks very much like a function call, so I agree, colon fits better.<br></p><p>&gt; And *possibly* for dictionary literals to change:<br>&gt; <br>&gt; 	let dict = [&quot;key&quot; = &quot;value&quot;]	// Also, the shorthand syntax would be [String = String]<br></p><p>I think the equal sign should only be used for assignment (as it was decided to keep a C-tradition and not use it for comparison).<br>&quot;Key&quot; and &quot;label&quot; are very similar to me, so I prefer label syntax.<br></p><p>Tino<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e941adb360692446106cebd7f6d2a1a3?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Charles Constant</string> &lt;charles at charlesism.com&gt;<p>February  6, 2016 at 09:00:00am</p></header><div class="content"><p>+0.9 for changing Dict to use &quot;=&quot; for assignment instead of &quot;:&quot;<br></p><p>It&#39;s hard to unreservedly support. It would affect an awful lot of code. It<br>would cause problems porting snippets from other languages. It will confuse<br>programmers who come to Swift from other languages. It would attract the<br>passionate and permanent wrath of a large portion of Swift programmers.<br>And, to my eye, &quot;=&quot; is less well suited, visually, than &quot;:&quot; as a separator,<br>if you&#39;re looking at a tree of data.<br></p><p>On the other hand, it&#39;s a lot Swift-er. It does seem odd, when you step<br>back, to see the &quot;:&quot; used differently in a Dict than in a function argument<br>or a ternary expression. If one were to get use to &quot;=&quot; being used<br>consistently, I suspect anything else would seem backward.<br></p><p>Consistency is important to me, and I would support the change.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/0e6dd1c2/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2861bfeb71de9de58206bb6ae750bc2f?s=50"></div><header><strong>Colon vs. equals</strong> from <string>ilya</string> &lt;ilya.nikokoshev at gmail.com&gt;<p>February  7, 2016 at 08:00:00pm</p></header><div class="content"><p>I know it&#39;s a bit late to the party :) but I have to disagree with the<br>original premise.<br>The colon in the dictionary doesn&#39;t really separate names and values, it<br>separates values and values:<br></p><p>[&quot;something&quot; + &quot;else&quot; : 1 + 2]<br></p><p>is a perfectly valid dictionary that doesn&#39;t read nor write anything by<br>name. In other words, there are no lhs-expressions there and that&#39;s ok.<br></p><p>We use = to rebind the names or, more generally, call setters, and when we<br>do this an lhs-expression is required, well, on the left side of an<br>assignment operator. This is in no way related to what happens with the<br>dictionary.<br></p><p>The situation is different with function parameters. We don&#39;t really pass a<br>dictionary; if we did, we&#39;d use something like myFunc(&quot;&quot;:foo, &quot;bar&quot;: baz)<br>as a syntax.<br></p><p>One can attempt to read the syntax as binding names that the function can<br>use as parameters, but this doesn&#39;t really work either: we only know the<br>parameter&#39;s external names and this binding doesn&#39;t &quot;leak&quot; into the<br>original scope. So if we are thinking about function call as an assignment,<br>then it should be in an extremely short-lived scope contained within a<br>function call. It doesn&#39;t look like this view will bring us any benefits.<br></p><p>I think it&#39;s best to imagine the colon in function calls as simply a third<br>punctuation symbol. We do need to select a simple, readily available symbol<br>that cannot be easily mixed with colon-inside-the-dictionary and<br>regular-assignment-symbol, yet is still instantly recognisable. Reusing the<br>colon is a reasonable compromise, although =&gt; would also work (and I wish<br>it was given serious consideration).<br></p><p>Though I agree that it seems a bit excessive to have a separate syntax for<br>@available&#39;s parameters.<br></p><p>Ilya.<br></p><p><br>On Sat, Feb 6, 2016 at 12:27 AM, Brent Royal-Gordon via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses<br>&gt; colon to separate names and values, and sometimes uses equals. It&#39;s vaguely<br>&gt; maddening.<br>&gt;<br>&gt; What do I mean? Well, our language has this:<br>&gt;<br>&gt;         myFunc(foo, bar: baz)<br>&gt;<br>&gt; But it also has:<br>&gt;<br>&gt;         @available(iOS, introduced=7.0, deprecated=8.0)<br>&gt;<br>&gt; You create a dictionary like this:<br>&gt;<br>&gt;         let dict = [&quot;key&quot;: &quot;value&quot;]<br>&gt;<br>&gt; But you set it like this:<br>&gt;<br>&gt;         dict[&quot;key&quot;] = &quot;value&quot;<br>&gt;<br>&gt; Is there some principle here? The @available case seems particularly<br>&gt; strange to me, because those values read strongly like parameters to me.<br>&gt;<br>&gt; --<br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160207/10a21b91/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February  8, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 5, 2016, at 3:27 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses colon to separate names and values, and sometimes uses equals. It&#39;s vaguely maddening.<br>&gt; <br>&gt; What do I mean? Well, our language has this:<br>&gt; <br>&gt; 	myFunc(foo, bar: baz)<br>&gt; <br>&gt; But it also has:<br>&gt; <br>&gt; 	@available(iOS, introduced=7.0, deprecated=8.0)<br></p><p>As others have pointed out, dictionary literal syntax is structurally different than “call like” syntax.  That said, I tend to agree with you that using colon instead of equals in @available would make sense.<br></p><p>-Chris<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/aeab22e60ba7b7e2bd445775850448d1?s=50"></div><header><strong>Colon vs. equals</strong> from <string>Radosław Pietruszewski</string> &lt;radexpl at gmail.com&gt;<p>February  8, 2016 at 08:00:00pm</p></header><div class="content"><p>My interpretation:<br></p><p>1. “foo: bar” means “foo is bar”<br>2. “foo = bar” means “assign bar to foo”<br></p><p>So (2) should only be used for assignment to variables/constants, and when assigning default values to function parameters. (1) is more versatile and should be used in all other contexts.<br></p><p>IMHO:<br></p><p>&gt; @available(iOS, introduced=7.0, deprecated=8.0)<br></p><p>should be changed to:<br></p><p>   @available(iOS, introduced: 7.0, deprecated: 8.0)<br></p><p>But aside from that, I don’t have beef with the colon being used in different contexts — looks cleaner and nicer than ` = ` to my eyes.<br></p><p>— Radek<br></p><p>&gt; On 06 Feb 2016, at 00:27, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; This is perhaps a bit nitpicky, but I&#39;ve noticed that Swift sometimes uses colon to separate names and values, and sometimes uses equals. It&#39;s vaguely maddening.<br>&gt; <br>&gt; What do I mean? Well, our language has this:<br>&gt; <br>&gt; 	myFunc(foo, bar: baz)<br>&gt; <br>&gt; But it also has:<br>&gt; <br>&gt; 	@available(iOS, introduced=7.0, deprecated=8.0)<br>&gt; <br>&gt; You create a dictionary like this:<br>&gt; <br>&gt; 	let dict = [&quot;key&quot;: &quot;value&quot;]<br>&gt; <br>&gt; But you set it like this:<br>&gt; <br>&gt; 	dict[&quot;key&quot;] = &quot;value&quot;<br>&gt; <br>&gt; Is there some principle here? The @available case seems particularly strange to me, because those values read strongly like parameters to me.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/1f823d615b521ed15f1006b105c77900?s=50"></div><header><strong>Colon vs. equals</strong> from <string>David Sweeris</string> &lt;davesweeris at mac.com&gt;<p>February  8, 2016 at 12:00:00pm</p></header><div class="content"><p>Agreed.<br></p><p>- Dave Sweeris<br></p><p>&gt; On Feb 8, 2016, at 11:56, Radosław Pietruszewski via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My interpretation:<br>&gt; <br>&gt; 1. “foo: bar” means “foo is bar”<br>&gt; 2. “foo = bar” means “assign bar to foo”<br>&gt; <br>&gt; So (2) should only be used for assignment to variables/constants, and when assigning default values to function parameters. (1) is more versatile and should be used in all other contexts.<br>&gt; <br>&gt; IMHO:<br>&gt; <br>&gt;&gt; @available(iOS, introduced=7.0, deprecated=8.0)<br>&gt; <br>&gt; should be changed to:<br>&gt; <br>&gt;  @available(iOS, introduced: 7.0, deprecated: 8.0)<br>&gt; <br>&gt; But aside from that, I don’t have beef with the colon being used in different contexts — looks cleaner and nicer than ` = ` to my eyes.<br>&gt; <br>&gt; — Radek<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
