<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted] SE-0104: Protocol-oriented integers</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>June 30, 2016 at 02:00:00pm</p></header><div class="content"><p>Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br></p><p>Hello Swift Community,<br></p><p>The review of &quot;SE-0104: Protocol-oriented integers&quot; ran from June 22...27. The proposal is *accepted* for Swift 3 with revisions:<br></p><p>The feedback from the community was very positive and contributed a number of improvements to the design of the proposal.  The core team has accepted the proposal, subject to the following changes:<br></p><p> - The “Integer&quot; protocol should be renamed to “BinaryInteger” to be more accurate and avoid confusion between “Int&quot; and “Integer”.<br> - The “FloatingPoint&quot; protocol should conform to the “Arithmetic” protocol.<br> - Rename the “absoluteValue” property to “magnitude”, and sink it down to the “Arithmetic” protocol.<br> - Eliminate the “AbsoluteValuable&quot; protocol, since “abs” can now be defined in terms of “Arithmetic&quot;.<br> - Rename the “signBitIndex&quot; property to &quot;minimumSignedRepresentationBitWidth&quot;.<br> - Add a “popcount&quot; property requirement to the “FixedWidthInteger” protocol.<br> - Change the &quot;countLeadingZeros()&quot; member of concrete types to be a “leadingZeros” property on “FixedWidthInteger”.<br> - Rename &quot;func nthWord(n: Int) -&gt; UInt” to &quot;func word(at: Int) -&gt; UInt”.<br> - Rename the “and”, “or”, and “xor” members of “FixedWidthInteger” to “bitwiseAnd”, “bitwiseOr” and “bitwiseXor”.<br> - Change “doubleWidthMultiply” to be a static member, and add a “doubleWidthDivide” member as its dual.  The latter will return both quotient and remainder of type “Self&quot;. Both are to be added to the &quot;FixedWidthInteger&quot; protocol.<br></p><p>Many thanks to Maxim Moiseev, Dave Abrahams and Dmitri Gribenko for driving this proposal forward, Steve Canon for his important input, and to Maxim Moiseev for driving the implementation work forward.<br></p><p>-Chris Lattner<br>Review Manager<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>[Accepted] SE-0104: Protocol-oriented integers</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>July  2, 2016 at 08:00:00am</p></header><div class="content"><p>I’m glad this was approved, the improvements look substantial!<br></p><p>My one question is why are the bitwise operations (and/or/xor) modeled as<br>member functions rather than operators?<br></p><p><br></p><p>On Thursday, June 30, 2016, Chris Lattner via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md<br>&gt;<br>&gt; Hello Swift Community,<br>&gt;<br>&gt; The review of &quot;SE-0104: Protocol-oriented integers&quot; ran from June 22...27.<br>&gt; The proposal is *accepted* for Swift 3 with revisions:<br>&gt;<br>&gt; The feedback from the community was very positive and contributed a number<br>&gt; of improvements to the design of the proposal.  The core team has accepted<br>&gt; the proposal, subject to the following changes:<br>&gt;<br>&gt;  - The “Integer&quot; protocol should be renamed to “BinaryInteger” to be more<br>&gt; accurate and avoid confusion between “Int&quot; and “Integer”.<br>&gt;  - The “FloatingPoint&quot; protocol should conform to the “Arithmetic”<br>&gt; protocol.<br>&gt;  - Rename the “absoluteValue” property to “magnitude”, and sink it down to<br>&gt; the “Arithmetic” protocol.<br>&gt;  - Eliminate the “AbsoluteValuable&quot; protocol, since “abs” can now be<br>&gt; defined in terms of “Arithmetic&quot;.<br>&gt;  - Rename the “signBitIndex&quot; property to<br>&gt; &quot;minimumSignedRepresentationBitWidth&quot;.<br>&gt;  - Add a “popcount&quot; property requirement to the “FixedWidthInteger”<br>&gt; protocol.<br>&gt;  - Change the &quot;countLeadingZeros()&quot; member of concrete types to be a<br>&gt; “leadingZeros” property on “FixedWidthInteger”.<br>&gt;  - Rename &quot;func nthWord(n: Int) -&gt; UInt” to &quot;func word(at: Int) -&gt; UInt”.<br>&gt;  - Rename the “and”, “or”, and “xor” members of “FixedWidthInteger” to<br>&gt; “bitwiseAnd”, “bitwiseOr” and “bitwiseXor”.<br>&gt;  - Change “doubleWidthMultiply” to be a static member, and add a<br>&gt; “doubleWidthDivide” member as its dual.  The latter will return both<br>&gt; quotient and remainder of type “Self&quot;. Both are to be added to the<br>&gt; &quot;FixedWidthInteger&quot; protocol.<br>&gt;<br>&gt; Many thanks to Maxim Moiseev, Dave Abrahams and Dmitri Gribenko for<br>&gt; driving this proposal forward, Steve Canon for his important input, and to<br>&gt; Maxim Moiseev for driving the implementation work forward.<br>&gt;<br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160702/d68a2c7d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/4b25144c09555e7d5b5e288469e011ef?s=50"></div><header><strong>[Accepted] SE-0104: Protocol-oriented integers</strong> from <string>Félix Cloutier</string> &lt;felixcca at yahoo.ca&gt;<p>July  3, 2016 at 05:00:00pm</p></header><div class="content"><p>My understanding is that we&#39;re trying to avoid directly declaring operator overloads as this pollutes the global namespace and makes operator function lookup slower compared to finding a named function in a named type.<br></p><p>Félix<br></p><p>&gt; Le 2 juil. 2016 à 05:02:20, Nevin Brackett-Rozinsky via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt; <br>&gt; I’m glad this was approved, the improvements look substantial!<br>&gt; <br>&gt; My one question is why are the bitwise operations (and/or/xor) modeled as member functions rather than operators?<br>&gt; <br>&gt; <br>&gt; <br>&gt; On Thursday, June 30, 2016, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; Proposal link: https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md&gt;<br>&gt; <br>&gt; Hello Swift Community,<br>&gt; <br>&gt; The review of &quot;SE-0104: Protocol-oriented integers&quot; ran from June 22...27. The proposal is *accepted* for Swift 3 with revisions:<br>&gt; <br>&gt; The feedback from the community was very positive and contributed a number of improvements to the design of the proposal.  The core team has accepted the proposal, subject to the following changes:<br>&gt; <br>&gt;  - The “Integer&quot; protocol should be renamed to “BinaryInteger” to be more accurate and avoid confusion between “Int&quot; and “Integer”.<br>&gt;  - The “FloatingPoint&quot; protocol should conform to the “Arithmetic” protocol.<br>&gt;  - Rename the “absoluteValue” property to “magnitude”, and sink it down to the “Arithmetic” protocol.<br>&gt;  - Eliminate the “AbsoluteValuable&quot; protocol, since “abs” can now be defined in terms of “Arithmetic&quot;.<br>&gt;  - Rename the “signBitIndex&quot; property to &quot;minimumSignedRepresentationBitWidth&quot;.<br>&gt;  - Add a “popcount&quot; property requirement to the “FixedWidthInteger” protocol.<br>&gt;  - Change the &quot;countLeadingZeros()&quot; member of concrete types to be a “leadingZeros” property on “FixedWidthInteger”.<br>&gt;  - Rename &quot;func nthWord(n: Int) -&gt; UInt” to &quot;func word(at: Int) -&gt; UInt”.<br>&gt;  - Rename the “and”, “or”, and “xor” members of “FixedWidthInteger” to “bitwiseAnd”, “bitwiseOr” and “bitwiseXor”.<br>&gt;  - Change “doubleWidthMultiply” to be a static member, and add a “doubleWidthDivide” member as its dual.  The latter will return both quotient and remainder of type “Self&quot;. Both are to be added to the &quot;FixedWidthInteger&quot; protocol.<br>&gt; <br>&gt; Many thanks to Maxim Moiseev, Dave Abrahams and Dmitri Gribenko for driving this proposal forward, Steve Canon for his important input, and to Maxim Moiseev for driving the implementation work forward.<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Review Manager<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;javascript:;&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/64df2b11/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
