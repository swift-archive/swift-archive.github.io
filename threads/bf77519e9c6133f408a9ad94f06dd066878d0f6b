<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>December  3, 2015 at 06:00:00pm</p></header><div class="content"><p>Hello! This is in reference to<br>https://github.com/apple/swift-corelibs-xctest/pull/3. That pull request<br>contains a commit that attempts to refactor XCTest such that it is more<br>&quot;unit-testable&quot;.<br></p><p>To do so, it gives XCTMain an additional parameter: a list of objects<br>conforming to the Reporter protocol. I think of this as a minimal, corelibs<br>equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because<br>Reporter only defines Reporter.log(), whereas XCTestObserver has one method<br>for each kind of test event (started, failed, finished, etc.).<br></p><p>These reporters are, for now, storied in a global array. In the future, I&#39;d<br>like to discuss moving XCTest to a model in which all tests are<br>(optionally) run in sub-processes, each of which may (optionally) run in<br>parallel. This global array most certainly won&#39;t work for such a change,<br>but for now, I simply want to have regression tests on the project. It&#39;s<br>hard to send pull requests without knowing everything still works!<br></p><p>Besides this approach, which modifies XCTest in order to test it, it may be<br>more prudent to add tests *without* changing XCTest at all. To do so, I<br>could add tests that run programs that call XCTMain(), then verify what&#39;s<br>printed to stdout. This could be done using a Python script (which would go<br>well with the build script, also in Python).<br></p><p>I&#39;d love input on which of these approaches sounds more viable. Other ideas<br>are also, of course, welcome!<br></p><p>- Brian Gesiak<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/bf770f6b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5d9baa679148bd83458d11df12327ce0?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Daniel Dunbar</string> &lt;daniel_dunbar at apple.com&gt;<p>December  3, 2015 at 07:00:00pm</p></header><div class="content"><p>Hi Brian,<br></p><p>&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3 &lt;https://github.com/apple/swift-corelibs-xctest/pull/3&gt;. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable&quot;.<br>&gt; <br>&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).<br>&gt; <br>&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!<br>&gt; <br>&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).<br></p><p>It should be possible to use an out-of-process model that still uses XCTest itself to run the tests. For example, in the package manager we have some tests which spawn the package manager in order to test the end-to-end behavior. Ideally we would only do this for a small number of tests that really need this level of testing, and use unit testing for the rest.<br></p><p>To be more concrete, what I am proposing here is that we have test cases which amount to:<br>--<br>class SomeTestCase : XCSelfTestCase {<br>  func testFailure() {<br>     withTestCase(&quot;Inputs/failing-test.swift&quot;) { results in<br>       ... check the results<br>     }<br>  }<br>}<br>--<br>where &quot;Inputs/failing-test.swift&quot; would be a checked in input file which has some expected behavior, and withTestCase() would be infrastructure (in XCSelfTestCase) which spawns a process to build and run that test, and then capture the output into a results object which could have further assertions run against it.<br></p><p> - Daniel<br></p><p>&gt; <br>&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!<br>&gt; <br>&gt; - Brian Gesiak<br>&gt;  _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/85d05828/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December  3, 2015 at 08:00:00pm</p></header><div class="content"><p>Hi Brian,<br></p><p>&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3 &lt;https://github.com/apple/swift-corelibs-xctest/pull/3&gt;. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable?.<br>&gt; <br></p><p>Cool, thanks for looking into this area.<br></p><p>&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).<br>&gt; <br></p><p>Do you think it?d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself?<br></p><p>The reason I?m asking is that (like Foundation and dispatch), we?re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br></p><p>We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I?d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically.<br></p><p>- Tony<br></p><p>&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!<br>&gt; <br>&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).<br>&gt; <br>&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!<br>&gt; <br>&gt; - Brian Gesiak<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151203/2115085e/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6bab59a4fee6a3c2697717acb34d647c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Mike Ferris</string> &lt;mferris at apple.com&gt;<p>December  4, 2015 at 08:00:00am</p></header><div class="content"><p>One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.<br></p><p>Mike<br></p><p>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; <br>&gt; Hi Brian,<br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;modocache at gmail.com &lt;mailto:modocache at gmail.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3 &lt;https://github.com/apple/swift-corelibs-xctest/pull/3&gt;. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable?.<br>&gt;&gt; <br>&gt; <br>&gt; Cool, thanks for looking into this area.<br>&gt; <br>&gt;&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).<br>&gt;&gt; <br>&gt; <br>&gt; Do you think it?d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself?<br>&gt; <br>&gt; The reason I?m asking is that (like Foundation and dispatch), we?re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br>&gt; <br>&gt; We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I?d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically.<br>&gt; <br>&gt; - Tony<br>&gt; <br>&gt;&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!<br>&gt;&gt; <br>&gt;&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).<br>&gt;&gt; <br>&gt;&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!<br>&gt;&gt; <br>&gt;&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/ebf32781/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>Excellent, thanks for the feedback everyone!<br></p><p>On Thu, Dec 3, 2015 at 10:39 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt; wrote:<br>&gt; It should be possible to use an out-of-process model that still uses XCTest itself to run the tests. For example, in the package manager we have some tests which spawn the package manager in order to test the end-to-end behavior. Ideally we would only do this for a small number of tests that really need this level of testing, and use unit testing for the rest.<br></p><p>I&#39;ll send a pull request with this approach, since I believe it&#39;s the<br>least invasive to the current API while still getting us regression<br>tests for the current implementation. Of course I&#39;d be thrilled if<br>someone beats me to it! :)<br></p><p>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; The reason I?m asking is that (like Foundation and dispatch), we?re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br></p><p>Absolutely agree. Still, once we have regression tests in place, I&#39;d<br>love to start a conversation about whether we could provide a Obj-C<br>XCTest-compatible API layer on top of some more flexible architecture.<br></p><p>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;mferris at apple.com&gt; wrote:<br>&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.<br></p><p>Yes! Very exciting. We&#39;ll need to consider how methods like<br>`-[XCTestObservation testBundleWillStart:]` map to SwiftXCTest,<br>especially considering we don&#39;t use NSBundle at all (which I think is<br>a great thing). I&#39;ll be looking forward to participating in more<br>discussions on this mailing list.<br></p><p>- Brian Gesiak<br></p><p><br>On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;mferris at apple.com&gt; wrote:<br>&gt;<br>&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.<br>&gt;<br>&gt; Mike<br>&gt;<br>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;<br>&gt; Hi Brian,<br>&gt;<br>&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable?.<br>&gt;<br>&gt;<br>&gt; Cool, thanks for looking into this area.<br>&gt;<br>&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).<br>&gt;<br>&gt;<br>&gt; Do you think it?d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself?<br>&gt;<br>&gt; The reason I?m asking is that (like Foundation and dispatch), we?re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br>&gt;<br>&gt; We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I?d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!<br>&gt;<br>&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).<br>&gt;<br>&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6bab59a4fee6a3c2697717acb34d647c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Mike Ferris</string> &lt;mferris at apple.com&gt;<p>December  4, 2015 at 12:00:00pm</p></header><div class="content"><p>Oops. It was pointed out to me that XCTestObserver is deprecated. I get it confused sometimes with its replacement..  What we’d presumably want to pursue adding the the corelibs XCTest is the API from XCTestObservation.h (and associated stuff).<br></p><p>Your same questions about the bundle stuff will still apply, though. On the other hand, perhaps a partial implementation that at least allowed observation starting at the test suites or even just at the test cases would suffice to start things off.<br></p><p><br>Mike<br></p><p>&gt; On Dec 4, 2015, at 9:08 AM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; Excellent, thanks for the feedback everyone!<br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 10:39 PM, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt; wrote:<br>&gt;&gt; It should be possible to use an out-of-process model that still uses XCTest itself to run the tests. For example, in the package manager we have some tests which spawn the package manager in order to test the end-to-end behavior. Ideally we would only do this for a small number of tests that really need this level of testing, and use unit testing for the rest.<br>&gt; <br>&gt; I&#39;ll send a pull request with this approach, since I believe it&#39;s the<br>&gt; least invasive to the current API while still getting us regression<br>&gt; tests for the current implementation. Of course I&#39;d be thrilled if<br>&gt; someone beats me to it! :)<br>&gt; <br>&gt;&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote:<br>&gt;&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br>&gt; <br>&gt; Absolutely agree. Still, once we have regression tests in place, I&#39;d<br>&gt; love to start a conversation about whether we could provide a Obj-C<br>&gt; XCTest-compatible API layer on top of some more flexible architecture.<br>&gt; <br>&gt;&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;mferris at apple.com &lt;mailto:mferris at apple.com&gt;&gt; wrote:<br>&gt;&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.<br>&gt; <br>&gt; Yes! Very exciting. We&#39;ll need to consider how methods like<br>&gt; `-[XCTestObservation testBundleWillStart:]` map to SwiftXCTest,<br>&gt; especially considering we don&#39;t use NSBundle at all (which I think is<br>&gt; a great thing). I&#39;ll be looking forward to participating in more<br>&gt; discussions on this mailing list.<br>&gt; <br>&gt; - Brian Gesiak<br>&gt; <br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;mferris at apple.com &lt;mailto:mferris at apple.com&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.<br>&gt;&gt; <br>&gt;&gt; Mike<br>&gt;&gt; <br>&gt;&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi Brian,<br>&gt;&gt; <br>&gt;&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable”.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Cool, thanks for looking into this area.<br>&gt;&gt; <br>&gt;&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Do you think it’d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself?<br>&gt;&gt; <br>&gt;&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).<br>&gt;&gt; <br>&gt;&gt; We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I’d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically.<br>&gt;&gt; <br>&gt;&gt; - Tony<br>&gt;&gt; <br>&gt;&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!<br>&gt;&gt; <br>&gt;&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).<br>&gt;&gt; <br>&gt;&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!<br>&gt;&gt; <br>&gt;&gt; - Brian Gesiak<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-corelibs-dev mailing list<br>&gt;&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151204/7bc855e0/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>December  7, 2015 at 11:00:00pm</p></header><div class="content"><p>I sent up another attempt for this: https://github.com/apple/swift-corelibs-xctest/pull/10<br>Based on the discussion in that pull request, I&#39;m now exploring using lit to test the XCTest output. <br>Rather than asking contributors to install lit via the Python Package Index, I was considering using the apple/llvm repository&#39;s copy. Contributors would need to have cloned llvm in a specific directory relative to the cloned swift-corelibs-xctest, like so:<br>rootdir/    llvm/    swift-corelibs-xctest/<br>This appears to be a convention in the Swift family of repositories, so I don&#39;t anticipate this to cause confusion among contributors.<br>If anyone has any input on this approach to lit, or on the direction of these changes in general, please let me know! All feedback is greatly appreciated.<br>- Brian Gesiak<br>    _____________________________<br>From: Mike Ferris &lt;mferris at apple.com&gt;<br>Sent: Friday, December 4, 2015 3:42 PM<br>Subject: Re: [swift-corelibs-dev] [xctest] Who tests the tests?<br>To: Brian Gesiak &lt;modocache at gmail.com&gt;<br>Cc: Tony Parker &lt;anthony.parker at apple.com&gt;,  &lt;swift-corelibs-dev at swift.org&gt;, Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br></p><p><br>       Oops. It was pointed out to me that XCTestObserver is deprecated. I get it confused sometimes with its replacement..  What we’d presumably want to pursue adding the the corelibs XCTest is the API from XCTestObservation.h (and associated stuff).     <br>       Your same questions about the bundle stuff will still apply, though. On the other hand, perhaps a partial implementation that at least allowed observation starting at the test suites or even just at the test cases would suffice to start things off.       <br>       <br>       Mike       <br>                  On Dec 4, 2015, at 9:08 AM, Brian Gesiak &lt;      modocache at gmail.com&gt; wrote:          <br>           Excellent, thanks for the feedback everyone!      <br>      <br>      On Thu, Dec 3, 2015 at 10:39 PM, Daniel Dunbar &lt;      daniel_dunbar at apple.com      &gt; wrote:      <br>             It should be possible to use an out-of-process model that still uses XCTest itself to run the tests. For example, in the package manager we have some tests which spawn the package manager in order to test the end-to-end behavior. Ideally we would only do this for a small number of tests that really need this level of testing, and use unit testing for the rest.       <br>            <br>      I&#39;ll send a pull request with this approach, since I believe it&#39;s the      <br>      least invasive to the current API while still getting us regression      <br>      tests for the current implementation. Of course I&#39;d be thrilled if      <br>      someone beats me to it! :)      <br>      <br>             On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;       anthony.parker at apple.com&gt; wrote:       <br>The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).       <br>            <br>      Absolutely agree. Still, once we have regression tests in place, I&#39;d      <br>      love to start a conversation about whether we could provide a Obj-C      <br>      XCTest-compatible API layer on top of some more flexible architecture.      <br>      <br>             On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;       mferris at apple.com&gt; wrote:       <br>One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.       <br>            <br>      Yes! Very exciting. We&#39;ll need to consider how methods like      <br>      `-[XCTestObservation testBundleWillStart:]` map to SwiftXCTest,      <br>      especially considering we don&#39;t use NSBundle at all (which I think is      <br>      a great thing). I&#39;ll be looking forward to participating in more      <br>      discussions on this mailing list.      <br>      <br>      - Brian Gesiak      <br>      <br>      <br>      On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt;      mferris at apple.com      &gt; wrote:      <br>             <br>One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver.       <br>       <br>Mike       <br>       <br>On Dec 3, 2015, at 8:03 PM, Tony Parker &lt;       anthony.parker at apple.com&gt; wrote:       <br>       <br>Hi Brian,       <br>       <br>On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt;       modocache at gmail.com&gt; wrote:       <br>       <br>Hello! This is in reference to        https://github.com/apple/swift-corelibs-xctest/pull/3. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable”.       <br>       <br>       <br>Cool, thanks for looking into this area.       <br>       <br>To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.).       <br>       <br>       <br>Do you think it’d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself?       <br>       <br>The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing).       <br>       <br>We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I’d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically.       <br>       <br>- Tony       <br>       <br>These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works!       <br>       <br>Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python).       <br>       <br>I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome!       <br>       <br>- Brian Gesiak       <br>       <br>       <br>       <br>_______________________________________________       <br>swift-corelibs-dev mailing list       <br>       swift-corelibs-dev at swift.org       <br>       https://lists.swift.org/mailman/listinfo/swift-corelibs-dev                     <br>   <br></p><p><br>  <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151207/83ae8737/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be4c3c3b76631a155e1358db48066692?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Tony Parker</string> &lt;anthony.parker at apple.com&gt;<p>December  7, 2015 at 04:00:00pm</p></header><div class="content"><p>Hi Brian,<br></p><p>&gt; On Dec 7, 2015, at 3:54 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt; <br>&gt; I sent up another attempt for this: https://github.com/apple/swift-corelibs-xctest/pull/10 &lt;https://github.com/apple/swift-corelibs-xctest/pull/10&gt;<br>&gt; <br>&gt; Based on the discussion in that pull request, I&#39;m now exploring using lit to test the XCTest output. <br>&gt; <br>&gt; Rather than asking contributors to install lit via the Python Package Index, I was considering using the apple/llvm repository&#39;s copy. Contributors would need to have cloned llvm in a specific directory relative to the cloned swift-corelibs-xctest, like so:<br>&gt; <br>&gt; rootdir/<br>&gt;     llvm/<br>&gt;     swift-corelibs-xctest/<br>&gt; <br>&gt; This appears to be a convention in the Swift family of repositories, so I don&#39;t anticipate this to cause confusion among contributors.<br>&gt; <br>&gt; If anyone has any input on this approach to lit, or on the direction of these changes in general, please let me know! All feedback is greatly appreciated.<br>&gt; <br></p><p>This is probably a fine approach - swift-corelibs-foundation, for example, assumes that swift-corelibs-xctest is a sibling directory to it when building.<br></p><p>Even if we change our minds later, there’s no doubt that having a starting point is valuable.<br></p><p>- Tony<br></p><p>&gt; - Brian Gesiak<br>&gt; _____________________________<br>&gt; From: Mike Ferris &lt;mferris at apple.com &lt;mailto:mferris at apple.com&gt;&gt;<br>&gt; Sent: Friday, December 4, 2015 3:42 PM<br>&gt; Subject: Re: [swift-corelibs-dev] [xctest] Who tests the tests?<br>&gt; To: Brian Gesiak &lt;modocache at gmail.com &lt;mailto:modocache at gmail.com&gt;&gt;<br>&gt; Cc: Tony Parker &lt;anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt;, &lt;swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt;&gt;, Daniel Dunbar &lt;daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt;&gt;<br>&gt; <br>&gt; <br>&gt; Oops. It was pointed out to me that XCTestObserver is deprecated. I get it confused sometimes with its replacement..  What we’d presumably want to pursue adding the the corelibs XCTest is the API from XCTestObservation.h (and associated stuff).<br>&gt; <br>&gt; Your same questions about the bundle stuff will still apply, though. On the other hand, perhaps a partial implementation that at least allowed observation starting at the test suites or even just at the test cases would suffice to start things off.  <br>&gt; <br>&gt; <br>&gt; Mike<br>&gt; <br>&gt; On Dec 4, 2015, at 9:08 AM, Brian Gesiak &lt; modocache at gmail.com &lt;mailto:modocache at gmail.com&gt;&gt; wrote:<br>&gt; <br>&gt; Excellent, thanks for the feedback everyone! <br>&gt; <br>&gt; On Thu, Dec 3, 2015 at 10:39 PM, Daniel Dunbar &lt; daniel_dunbar at apple.com &lt;mailto:daniel_dunbar at apple.com&gt; &gt; wrote: <br>&gt; It should be possible to use an out-of-process model that still uses XCTest itself to run the tests. For example, in the package manager we have some tests which spawn the package manager in order to test the end-to-end behavior. Ideally we would only do this for a small number of tests that really need this level of testing, and use unit testing for the rest. <br>&gt; <br>&gt; I&#39;ll send a pull request with this approach, since I believe it&#39;s the <br>&gt; least invasive to the current API while still getting us regression <br>&gt; tests for the current implementation. Of course I&#39;d be thrilled if <br>&gt; someone beats me to it! :) <br>&gt; <br>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt; anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote: <br>&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing). <br>&gt; <br>&gt; Absolutely agree. Still, once we have regression tests in place, I&#39;d <br>&gt; love to start a conversation about whether we could provide a Obj-C <br>&gt; XCTest-compatible API layer on top of some more flexible architecture. <br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt; mferris at apple.com &lt;mailto:mferris at apple.com&gt;&gt; wrote: <br>&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver. <br>&gt; <br>&gt; Yes! Very exciting. We&#39;ll need to consider how methods like <br>&gt; `-[XCTestObservation testBundleWillStart:]` map to SwiftXCTest, <br>&gt; especially considering we don&#39;t use NSBundle at all (which I think is <br>&gt; a great thing). I&#39;ll be looking forward to participating in more <br>&gt; discussions on this mailing list. <br>&gt; <br>&gt; - Brian Gesiak <br>&gt; <br>&gt; <br>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt; mferris at apple.com &lt;mailto:mferris at apple.com&gt; &gt; wrote: <br>&gt; <br>&gt; One possible direction to consider which would be more consistent with our goals this year for API-compatibility would be to look into implementing XCTestObserver. <br>&gt; <br>&gt; Mike <br>&gt; <br>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt; anthony.parker at apple.com &lt;mailto:anthony.parker at apple.com&gt;&gt; wrote: <br>&gt; <br>&gt; Hi Brian, <br>&gt; <br>&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt; modocache at gmail.com &lt;mailto:modocache at gmail.com&gt;&gt; wrote: <br>&gt; <br>&gt; Hello! This is in reference to https://github.com/apple/swift-corelibs-xctest/pull/3 &lt;https://github.com/apple/swift-corelibs-xctest/pull/3&gt;. That pull request contains a commit that attempts to refactor XCTest such that it is more &quot;unit-testable”. <br>&gt; <br>&gt; <br>&gt; Cool, thanks for looking into this area. <br>&gt; <br>&gt; To do so, it gives XCTMain an additional parameter: a list of objects conforming to the Reporter protocol. I think of this as a minimal, corelibs equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because Reporter only defines Reporter.log(), whereas XCTestObserver has one method for each kind of test event (started, failed, finished, etc.). <br>&gt; <br>&gt; <br>&gt; Do you think it’d be possible to split out the idea of adding this new API to XCTest from getting some tests for XCTest itself? <br>&gt; <br>&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying to keep the API surface of this XCTest very similar to the one that ships today with Xcode. This will help developers who need to integrate their cross-platform tests into suites that include features that Obj-C XCTest has that we will probably not add to the Swift one (e.g., UI testing). <br>&gt; <br>&gt; We made a concession to language limitations with the XCTMain function, because there is no way to dynamically discover all of the test cases. I’d really like to get rid of it in the long term in favor of something else; maybe a decoration like @testable that we could find automatically. <br>&gt; <br>&gt; - Tony <br>&gt; <br>&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d like to discuss moving XCTest to a model in which all tests are (optionally) run in sub-processes, each of which may (optionally) run in parallel. This global array most certainly won&#39;t work for such a change, but for now, I simply want to have regression tests on the project. It&#39;s hard to send pull requests without knowing everything still works! <br>&gt; <br>&gt; Besides this approach, which modifies XCTest in order to test it, it may be more prudent to add tests *without* changing XCTest at all. To do so, I could add tests that run programs that call XCTMain(), then verify what&#39;s printed to stdout. This could be done using a Python script (which would go well with the build script, also in Python). <br>&gt; <br>&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas are also, of course, welcome! <br>&gt; <br>&gt; - Brian Gesiak <br>&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________ <br>&gt; swift-corelibs-dev mailing list <br>&gt; swift-corelibs-dev at swift.org &lt;mailto:swift-corelibs-dev at swift.org&gt; <br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev &lt;https://lists.swift.org/mailman/listinfo/swift-corelibs-dev&gt;<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20151207/1bd94cf4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f921fa5d507b31ef6984fd3d77ae710c?s=50"></div><header><strong>[xctest] Who tests the tests?</strong> from <string>Brian Gesiak</string> &lt;modocache at gmail.com&gt;<p>December 11, 2015 at 02:00:00am</p></header><div class="content"><p>I&#39;ve submitted https://github.com/apple/swift-corelibs-xctest/pull/14<br>as another attempt at this.<br></p><p>Take a look at the pull request message for details. Turns out I&#39;d<br>overlooked another dependency: nearly all lit tests use FileCheck,<br>which means to run the tests developers will need to specify that<br>file&#39;s location on their PATH.<br></p><p>Feedback welcome as always! Sorry for the churn on the pull request.<br></p><p>- Brian Gesiak<br></p><p><br>On Mon, Dec 7, 2015 at 7:05 PM, Tony Parker &lt;anthony.parker at apple.com&gt; wrote:<br>&gt; Hi Brian,<br>&gt;<br>&gt; On Dec 7, 2015, at 3:54 PM, Brian Gesiak &lt;modocache at gmail.com&gt; wrote:<br>&gt;<br>&gt; I sent up another attempt for this:<br>&gt; https://github.com/apple/swift-corelibs-xctest/pull/10<br>&gt;<br>&gt; Based on the discussion in that pull request, I&#39;m now exploring using lit to<br>&gt; test the XCTest output.<br>&gt;<br>&gt; Rather than asking contributors to install lit via the Python Package Index,<br>&gt; I was considering using the apple/llvm repository&#39;s copy. Contributors would<br>&gt; need to have cloned llvm in a specific directory relative to the cloned<br>&gt; swift-corelibs-xctest, like so:<br>&gt;<br>&gt; rootdir/<br>&gt;     llvm/<br>&gt;     swift-corelibs-xctest/<br>&gt;<br>&gt; This appears to be a convention in the Swift family of repositories, so I<br>&gt; don&#39;t anticipate this to cause confusion among contributors.<br>&gt;<br>&gt; If anyone has any input on this approach to lit, or on the direction of<br>&gt; these changes in general, please let me know! All feedback is greatly<br>&gt; appreciated.<br>&gt;<br>&gt;<br>&gt; This is probably a fine approach - swift-corelibs-foundation, for example,<br>&gt; assumes that swift-corelibs-xctest is a sibling directory to it when<br>&gt; building.<br>&gt;<br>&gt; Even if we change our minds later, there’s no doubt that having a starting<br>&gt; point is valuable.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; - Brian Gesiak<br>&gt; _____________________________<br>&gt; From: Mike Ferris &lt;mferris at apple.com&gt;<br>&gt; Sent: Friday, December 4, 2015 3:42 PM<br>&gt; Subject: Re: [swift-corelibs-dev] [xctest] Who tests the tests?<br>&gt; To: Brian Gesiak &lt;modocache at gmail.com&gt;<br>&gt; Cc: Tony Parker &lt;anthony.parker at apple.com&gt;, &lt;swift-corelibs-dev at swift.org&gt;,<br>&gt; Daniel Dunbar &lt;daniel_dunbar at apple.com&gt;<br>&gt;<br>&gt;<br>&gt; Oops. It was pointed out to me that XCTestObserver is deprecated. I get it<br>&gt; confused sometimes with its replacement..  What we’d presumably want to<br>&gt; pursue adding the the corelibs XCTest is the API from XCTestObservation.h<br>&gt; (and associated stuff).<br>&gt;<br>&gt; Your same questions about the bundle stuff will still apply, though. On the<br>&gt; other hand, perhaps a partial implementation that at least allowed<br>&gt; observation starting at the test suites or even just at the test cases would<br>&gt; suffice to start things off.<br>&gt;<br>&gt;<br>&gt; Mike<br>&gt;<br>&gt; On Dec 4, 2015, at 9:08 AM, Brian Gesiak &lt; modocache at gmail.com&gt; wrote:<br>&gt;<br>&gt; Excellent, thanks for the feedback everyone!<br>&gt;<br>&gt; On Thu, Dec 3, 2015 at 10:39 PM, Daniel Dunbar &lt; daniel_dunbar at apple.com &gt;<br>&gt; wrote:<br>&gt;<br>&gt; It should be possible to use an out-of-process model that still uses XCTest<br>&gt; itself to run the tests. For example, in the package manager we have some<br>&gt; tests which spawn the package manager in order to test the end-to-end<br>&gt; behavior. Ideally we would only do this for a small number of tests that<br>&gt; really need this level of testing, and use unit testing for the rest.<br>&gt;<br>&gt;<br>&gt; I&#39;ll send a pull request with this approach, since I believe it&#39;s the<br>&gt; least invasive to the current API while still getting us regression<br>&gt; tests for the current implementation. Of course I&#39;d be thrilled if<br>&gt; someone beats me to it! :)<br>&gt;<br>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt; anthony.parker at apple.com&gt; wrote:<br>&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying<br>&gt; to keep the API surface of this XCTest very similar to the one that ships<br>&gt; today with Xcode. This will help developers who need to integrate their<br>&gt; cross-platform tests into suites that include features that Obj-C XCTest has<br>&gt; that we will probably not add to the Swift one (e.g., UI testing).<br>&gt;<br>&gt;<br>&gt; Absolutely agree. Still, once we have regression tests in place, I&#39;d<br>&gt; love to start a conversation about whether we could provide a Obj-C<br>&gt; XCTest-compatible API layer on top of some more flexible architecture.<br>&gt;<br>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt; mferris at apple.com&gt; wrote:<br>&gt; One possible direction to consider which would be more consistent with our<br>&gt; goals this year for API-compatibility would be to look into implementing<br>&gt; XCTestObserver.<br>&gt;<br>&gt;<br>&gt; Yes! Very exciting. We&#39;ll need to consider how methods like<br>&gt; `-[XCTestObservation testBundleWillStart:]` map to SwiftXCTest,<br>&gt; especially considering we don&#39;t use NSBundle at all (which I think is<br>&gt; a great thing). I&#39;ll be looking forward to participating in more<br>&gt; discussions on this mailing list.<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt;<br>&gt; On Fri, Dec 4, 2015 at 11:24 AM, Mike Ferris &lt; mferris at apple.com &gt; wrote:<br>&gt;<br>&gt;<br>&gt; One possible direction to consider which would be more consistent with our<br>&gt; goals this year for API-compatibility would be to look into implementing<br>&gt; XCTestObserver.<br>&gt;<br>&gt; Mike<br>&gt;<br>&gt; On Dec 3, 2015, at 8:03 PM, Tony Parker &lt; anthony.parker at apple.com&gt; wrote:<br>&gt;<br>&gt; Hi Brian,<br>&gt;<br>&gt; On Dec 3, 2015, at 3:45 PM, Brian Gesiak &lt; modocache at gmail.com&gt; wrote:<br>&gt;<br>&gt; Hello! This is in reference to<br>&gt; https://github.com/apple/swift-corelibs-xctest/pull/3. That pull request<br>&gt; contains a commit that attempts to refactor XCTest such that it is more<br>&gt; &quot;unit-testable”.<br>&gt;<br>&gt;<br>&gt; Cool, thanks for looking into this area.<br>&gt;<br>&gt; To do so, it gives XCTMain an additional parameter: a list of objects<br>&gt; conforming to the Reporter protocol. I think of this as a minimal, corelibs<br>&gt; equivalent to Apple&#39;s XCTest&#39;s XCTestObserver.h. I say &quot;minimal&quot; because<br>&gt; Reporter only defines Reporter.log(), whereas XCTestObserver has one method<br>&gt; for each kind of test event (started, failed, finished, etc.).<br>&gt;<br>&gt;<br>&gt; Do you think it’d be possible to split out the idea of adding this new API<br>&gt; to XCTest from getting some tests for XCTest itself?<br>&gt;<br>&gt; The reason I’m asking is that (like Foundation and dispatch), we’re trying<br>&gt; to keep the API surface of this XCTest very similar to the one that ships<br>&gt; today with Xcode. This will help developers who need to integrate their<br>&gt; cross-platform tests into suites that include features that Obj-C XCTest has<br>&gt; that we will probably not add to the Swift one (e.g., UI testing).<br>&gt;<br>&gt; We made a concession to language limitations with the XCTMain function,<br>&gt; because there is no way to dynamically discover all of the test cases. I’d<br>&gt; really like to get rid of it in the long term in favor of something else;<br>&gt; maybe a decoration like @testable that we could find automatically.<br>&gt;<br>&gt; - Tony<br>&gt;<br>&gt; These reporters are, for now, storied in a global array. In the future, I&#39;d<br>&gt; like to discuss moving XCTest to a model in which all tests are (optionally)<br>&gt; run in sub-processes, each of which may (optionally) run in parallel. This<br>&gt; global array most certainly won&#39;t work for such a change, but for now, I<br>&gt; simply want to have regression tests on the project. It&#39;s hard to send pull<br>&gt; requests without knowing everything still works!<br>&gt;<br>&gt; Besides this approach, which modifies XCTest in order to test it, it may be<br>&gt; more prudent to add tests *without* changing XCTest at all. To do so, I<br>&gt; could add tests that run programs that call XCTMain(), then verify what&#39;s<br>&gt; printed to stdout. This could be done using a Python script (which would go<br>&gt; well with the build script, also in Python).<br>&gt;<br>&gt; I&#39;d love input on which of these approaches sounds more viable. Other ideas<br>&gt; are also, of course, welcome!<br>&gt;<br>&gt; - Brian Gesiak<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-corelibs-dev mailing list<br>&gt; swift-corelibs-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-corelibs-dev<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
