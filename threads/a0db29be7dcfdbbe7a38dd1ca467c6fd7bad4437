<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Foundation and explicit pointer nullability</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>April  1, 2016 at 09:00:00am</p></header><div class="content"><p>Hey, Philippe, everyone. I&#39;ve been working on implementing SE-0055: Making pointer nullability explicit &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0055-optional-unsafe-pointers.md&gt;, and it&#39;s been going well…but only now am I realizing how much it&#39;s going to affect Foundation, and possibly CF as well. While the nullability of APIs can usually be brought over from the Foundation headers, there are a lot of places where SwiftFoundation isn&#39;t clear about its nullability requirements within its implementation. For example, NSData appears to allow replacing a range of bytes with a {NULL, 0} buffer, but the implementation currently calls directly through to _CFDataReplaceBytes, which does not accept null pointers. (And if it were annotated to, it would then try to memmove from it, which is illegal.) The fix is trivial—just check for the null pointer case (or zero length case) and use an alternate API instead—but there might be quite a few of them.<br></p><p>I&#39;m planning to run through all of Foundation (and XCTest) and get their tests passing using my branch of Swift &lt;https://github.com/apple/swift/pull/1878&gt;, then submit a pull request for review, to be landed in sync with the Swift change. Does that sound like the best plan to you?<br></p><p>Thanks,<br>Jordan<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-corelibs-dev/attachments/20160401/a0db4437/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
