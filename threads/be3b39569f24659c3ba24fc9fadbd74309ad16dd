<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>expression too complex</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>June  6, 2016 at 03:00:00pm</p></header><div class="content"><p>Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br></p><p>I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br></p><p><br>Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br></p><p><br></p><p>The initializer that this code is embedded in is this:<br>public init(axis:T.Vector3Type, angle a:T){<br>    let s=sin(a/2.0)<br>    let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>    let l=v.length()<br>    self.init(v/l)<br>}<br></p><p>I’m running this in a playground, I don’t know if that makes a difference.<br></p><p>I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>expression too complex</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br></p><p>Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt; <br>&gt; <br>&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt; <br>&gt; <br>&gt; <br>&gt; The initializer that this code is embedded in is this:<br>&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;    let s=sin(a/2.0)<br>&gt;    let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;    let l=v.length()<br>&gt;    self.init(v/l)<br>&gt; }<br>&gt; <br>&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt; <br>&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2024f9524b1e51a54c4251abf0c34f50?s=50"></div><header><strong>expression too complex</strong> from <string>Saagar Jha</string> &lt;saagarjha28 at gmail.com&gt;<p>June  6, 2016 at 10:00:00pm</p></header><div class="content"><p>I’ve seen that this tends to happen with operators that are really<br>overloaded-stuff like +, *, etc. The compiler seems to take longer to<br>figure out which function to use.<br></p><p>On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt;<br>&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Is progress being made on the type checker to get the compiler to stop<br>&gt; whinging about the complexity of expressions?<br>&gt;<br>&gt; Yes, a lot of cases work much better in Swift 3. You might give these a<br>&gt; try in a nightly build. Please file a bug if you continue to see this in<br>&gt; Swift 3 though.<br>&gt;<br>&gt; -Joe<br>&gt;<br>&gt; &gt;<br>&gt; &gt; I can’t really trim down the full project to isolate a good test case,<br>&gt; but I’m getting a compiler error on this line of code:<br>&gt; &gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Interestingly, this line compiled fine (everything is the same except<br>&gt; the last list element is moved to the front):<br>&gt; &gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; The initializer that this code is embedded in is this:<br>&gt; &gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt; &gt;    let s=sin(a/2.0)<br>&gt; &gt;    let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt; &gt;    let l=v.length()<br>&gt; &gt;    self.init(v/l)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; I’m running this in a playground, I don’t know if that makes a<br>&gt; difference.<br>&gt; &gt;<br>&gt; &gt; I’m willing to wait a little longer for the complier to do its job if it<br>&gt; means I don’t have to break my code down to one operation per line.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-- <br>-Saagar Jha<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/dd4117c0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>expression too complex</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June  6, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br></p><p>Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br></p><p>-Joe<br></p><p>&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; &gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt; <br>&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt; &gt;<br>&gt; &gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt; &gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt; &gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; The initializer that this code is embedded in is this:<br>&gt; &gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt; &gt;    let s=sin(a/2.0)<br>&gt; &gt;    let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt; &gt;    let l=v.length()<br>&gt; &gt;    self.init(v/l)<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt; &gt;<br>&gt; &gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-users mailing list<br>&gt; &gt; swift-users at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; -- <br>&gt; -Saagar Jha<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>expression too complex</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June  6, 2016 at 04:00:00pm</p></header><div class="content"><p>I&#39;ve seen this happen specifically in collections.<br></p><p>There was one only yesterday that I was helping out with:<br></p><p>http://i.imgur.com/tKh9On6.jpg &lt;http://i.imgur.com/tKh9On6.jpg&gt;<br></p><p>Try doing this with all the String:Closure pairs in the original declaration.<br></p><p>-- E<br></p><p><br></p><p><br>&gt; On Jun 6, 2016, at 4:15 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br>&gt; <br>&gt; Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt;&gt; <br>&gt;&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt;&gt;&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt;&gt;&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The initializer that this code is embedded in is this:<br>&gt;&gt;&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;&gt;&gt;   let s=sin(a/2.0)<br>&gt;&gt;&gt;   let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;   let l=v.length()<br>&gt;&gt;&gt;   self.init(v/l)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; -- <br>&gt;&gt; -Saagar Jha<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160606/9137a016/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/212199c56fae3d6b09dbf788f1c5e313?s=50"></div><header><strong>expression too complex</strong> from <string>G B</string> &lt;g.c.b.at.work at gmail.com&gt;<p>June  6, 2016 at 03:00:00pm</p></header><div class="content"><p>That could be part of it, in my case.  I also have a few protocols and generics sprinkled in to generalize my type across Float and Double (something that I see Swift 3 is improving) and to use the simd types (something that I think still needs work).<br></p><p>Now that you mention the standard library functions, I do have this in my code which could be contributing to the pain in that initializer:<br></p><p><br>//////////////<br>public protocol ScalarMathType : FloatingPointMathType {<br>    func sin() -&gt; Self<br>    func cos() -&gt; Self<br>}<br></p><p>public func sin&lt;T:ScalarMathType&gt; (x:T) -&gt; T {return x.sin()}<br>public func cos&lt;T:ScalarMathType&gt; (x:T) -&gt; T {return x.cos()}<br></p><p>extension Float  : ScalarMathType {<br>    public func sin() -&gt; Float {return Foundation.sin(self)}<br>    public func cos() -&gt; Float {return Foundation.cos(self)}<br>}<br></p><p>extension Double : ScalarMathType {<br>    public func sin() -&gt; Double {return Foundation.sin(self)}<br>    public func cos() -&gt; Double {return Foundation.cos(self)}<br>}<br>/////////////////<br></p><p>It was the best way I could find (hat tip to StackOverflow) to make the code work with with Float or Double.<br></p><p><br>&gt; On Jun 6, 2016, at 15:15 , Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br>&gt; <br>&gt; Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt;&gt; <br>&gt;&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt;&gt;&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt;&gt;&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The initializer that this code is embedded in is this:<br>&gt;&gt;&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;&gt;&gt;   let s=sin(a/2.0)<br>&gt;&gt;&gt;   let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;   let l=v.length()<br>&gt;&gt;&gt;   self.init(v/l)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; -- <br>&gt;&gt; -Saagar Jha<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/424a3f4fec228fa9e2ad948ca70f1791?s=50"></div><header><strong>expression too complex</strong> from <string>davelist at mac.com</string> &lt;davelist at mac.com&gt;<p>June 16, 2016 at 04:00:00pm</p></header><div class="content"><p>Joe, <br></p><p>I had an expression that worked fine with Swift2.2 but Swift3 (Xcode 8 version) complains it&#39;s too complex:<br></p><p>The variables are of type CGPoint and the function returns a Bool.<br></p><p>    return (pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x) &lt; 0.0<br></p><p>Thanks,<br>Dave<br></p><p><br>&gt; On Jun 6, 2016, at 6:15 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br>&gt; <br>&gt; Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br>&gt; <br>&gt; -Joe<br>&gt; <br>&gt;&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt;&gt; <br>&gt;&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt;&gt;&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt;&gt;&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The initializer that this code is embedded in is this:<br>&gt;&gt;&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;&gt;&gt;   let s=sin(a/2.0)<br>&gt;&gt;&gt;   let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;   let l=v.length()<br>&gt;&gt;&gt;   self.init(v/l)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; -- <br>&gt;&gt; -Saagar Jha<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>expression too complex</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>June 16, 2016 at 03:00:00pm</p></header><div class="content"><p>func foo () -&gt; Bool {<br>    return Double((pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x)) &lt; 0.0<br>}<br></p><p>See if that works and then file a bug report?<br></p><p>-- E<br></p><p>&gt; On Jun 16, 2016, at 2:59 PM, Dave Reed via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; Joe, <br>&gt; <br>&gt; I had an expression that worked fine with Swift2.2 but Swift3 (Xcode 8 version) complains it&#39;s too complex:<br>&gt; <br>&gt; The variables are of type CGPoint and the function returns a Bool.<br>&gt; <br>&gt;    return (pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x) &lt; 0.0<br>&gt; <br>&gt; Thanks,<br>&gt; Dave<br>&gt; <br>&gt; <br>&gt;&gt; On Jun 6, 2016, at 6:15 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br>&gt;&gt; <br>&gt;&gt; Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br>&gt;&gt; <br>&gt;&gt; -Joe<br>&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt;&gt;&gt;&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt;&gt;&gt;&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The initializer that this code is embedded in is this:<br>&gt;&gt;&gt;&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;&gt;&gt;&gt;  let s=sin(a/2.0)<br>&gt;&gt;&gt;&gt;  let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;&gt;  let l=v.length()<br>&gt;&gt;&gt;&gt;  self.init(v/l)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160616/7ed5eba0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/424a3f4fec228fa9e2ad948ca70f1791?s=50"></div><header><strong>expression too complex</strong> from <string>davelist at mac.com</string> &lt;davelist at mac.com&gt;<p>June 16, 2016 at 06:00:00pm</p></header><div class="content"><p>Yes, Erica, your version works. I had just split it up into:<br></p><p>   let temp1 = (pt.x - p0.x) * (p1.y - p0.y)<br>   let temp2 = (pt.y - p0.y) * (p1.x - p0.x)<br>   return (temp1 - temp2) &lt; 0.0<br></p><p>which also works.<br></p><p>Filed: SR-1794<br></p><p>Is that where I should also file the CGContext endPage() method not working (I filed it at bugreport.apple.com)?<br></p><p>Thanks,<br>Dave Reed<br></p><p><br>&gt; On Jun 16, 2016, at 5:20 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; func foo () -&gt; Bool {<br>&gt;     return Double((pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x)) &lt; 0.0<br>&gt; }<br>&gt; <br>&gt; See if that works and then file a bug report?<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Jun 16, 2016, at 2:59 PM, Dave Reed via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Joe, <br>&gt;&gt; <br>&gt;&gt; I had an expression that worked fine with Swift2.2 but Swift3 (Xcode 8 version) complains it&#39;s too complex:<br>&gt;&gt; <br>&gt;&gt; The variables are of type CGPoint and the function returns a Bool.<br>&gt;&gt; <br>&gt;&gt;    return (pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x) &lt; 0.0<br>&gt;&gt; <br>&gt;&gt; Thanks,<br>&gt;&gt; Dave<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 6, 2016, at 6:15 PM, Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jun 6, 2016, at 3:13 PM, Saagar Jha &lt;saagarjha28 at gmail.com&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’ve seen that this tends to happen with operators that are really overloaded-stuff like +, *, etc. The compiler seems to take longer to figure out which function to use.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Yeah. The type checker has gotten better about making these situations with lots of overload operators tractable in common cases. Over the remaining course of Swift 3, we&#39;re also looking to rearchitect the standard library so that there are fewer generic global operator overloads, moving the polymorphism into protocol methods instead, which should further reduce the burden on the type checker.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Jun 6, 2016 at 3:09 PM Joe Groff via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jun 6, 2016, at 3:06 PM, G B via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Is progress being made on the type checker to get the compiler to stop whinging about the complexity of expressions?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Yes, a lot of cases work much better in Swift 3. You might give these a try in a nightly build. Please file a bug if you continue to see this in Swift 3 though.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -Joe<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I can’t really trim down the full project to isolate a good test case, but I’m getting a compiler error on this line of code:<br>&gt;&gt;&gt;&gt;&gt; let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Interestingly, this line compiled fine (everything is the same except the last list element is moved to the front):<br>&gt;&gt;&gt;&gt;&gt; let v=T.Vector4Type([cos(a/2.0), axis[0]*s, axis[1]*s, axis[2]*s])<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The initializer that this code is embedded in is this:<br>&gt;&gt;&gt;&gt;&gt; public init(axis:T.Vector3Type, angle a:T){<br>&gt;&gt;&gt;&gt;&gt;  let s=sin(a/2.0)<br>&gt;&gt;&gt;&gt;&gt;  let v=T.Vector4Type([axis[0]*s, axis[1]*s, axis[2]*s, cos(a/2.0)])<br>&gt;&gt;&gt;&gt;&gt;  let l=v.length()<br>&gt;&gt;&gt;&gt;&gt;  self.init(v/l)<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m running this in a playground, I don’t know if that makes a difference.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’m willing to wait a little longer for the complier to do its job if it means I don’t have to break my code down to one operation per line.<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; -Saagar Jha<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-users mailing list<br>&gt;&gt;&gt; swift-users at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>June 17, 2016 at 09:00:00am</p></header><div class="content"><p>I was asked to try out the latest betas of Cocoa to check if a SceneKit bug I reported has been fixed. As part of this I decided to try an update to Swift 3. I&#39;ve run into a number of minor issues, but one has me frustrated. In my menu validate method, I have:<br></p><p>		switch menuItem.action {<br>			case #selector!(showRescale) :<br></p><p>This worked fine in 2.2, but now it complains that it expects a ( after #selector. Removing the ! fixes that problem, but now returns an error that there&#39;s a missing !, which it inserts to cause the original error again. I also tried placing it after the ()&#39;s, and now it complains that it&#39;s expecting the :<br></p><p>Does anyone know the proper Swift 3 syntax for this?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>June 17, 2016 at 11:00:00pm</p></header><div class="content"><p>Can you give more information on the function showRescale, is it function<br>showRescale() or showRescale(a:foo)?<br>Or have you tried case let x where x == #selector(showRescale):<br></p><p>Zhaoxin<br></p><p>On Fri, Jun 17, 2016 at 9:33 PM, Maury Markowitz via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I was asked to try out the latest betas of Cocoa to check if a SceneKit<br>&gt; bug I reported has been fixed. As part of this I decided to try an update<br>&gt; to Swift 3. I&#39;ve run into a number of minor issues, but one has me<br>&gt; frustrated. In my menu validate method, I have:<br>&gt;<br>&gt;                 switch menuItem.action {<br>&gt;                         case #selector!(showRescale) :<br>&gt;<br>&gt; This worked fine in 2.2, but now it complains that it expects a ( after<br>&gt; #selector. Removing the ! fixes that problem, but now returns an error that<br>&gt; there&#39;s a missing !, which it inserts to cause the original error again. I<br>&gt; also tried placing it after the ()&#39;s, and now it complains that it&#39;s<br>&gt; expecting the :<br>&gt;<br>&gt; Does anyone know the proper Swift 3 syntax for this?<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160617/39bc8351/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc8eae356a7d359691154094ae6d56a7?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Marco S Hyman</string> &lt;marc at snafu.org&gt;<p>June 17, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Fri, Jun 17, 2016 at 9:33 PM, Maury Markowitz via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; I was asked to try out the latest betas of Cocoa to check if a SceneKit bug I reported has been fixed. As part of this I decided to try an update to Swift 3. I&#39;ve run into a number of minor issues, but one has me frustrated. In my menu validate method, I have:<br>&gt; <br>&gt;                 switch menuItem.action {<br>&gt;                         case #selector!(showRescale) :<br>&gt; <br>&gt; This worked fine in 2.2, but now it complains that it expects a ( after #selector. Removing the ! fixes that problem, but now returns an error that there&#39;s a missing !, which it inserts to cause the original error again. I also tried placing it after the ()&#39;s, and now it complains that it&#39;s expecting the :<br>&gt; <br>&gt; Does anyone know the proper Swift 3 syntax for this?<br></p><p>This code snippet works for me in a menu validation function...<br></p><p>        guard let action = anItem?.action else { return false }<br>        switch action {<br>        case #selector(showOpenPanel(_:)):<br>            return true<br>        case #selector(save(_:)):<br>            return modified<br>        case #selector(openPreferencesWindow(_:)):<br>            return true<br>        default:<br>            print(&quot;default for item \(anItem)&quot;)<br>        }<br>        return false<br></p><p>I used the guard let... to get around the fact that action selectors are now optionals.<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 17, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; I was asked to try out the latest betas of Cocoa to check if a SceneKit bug I reported has been fixed. As part of this I decided to try an update to Swift 3. I&#39;ve run into a number of minor issues, but one has me frustrated. In my menu validate method, I have:<br>&gt; <br>&gt; 		switch menuItem.action {<br>&gt; 			case #selector!(showRescale) :<br>&gt; <br>&gt; This worked fine in 2.2, but now it complains that it expects a ( after #selector. Removing the ! fixes that problem, but now returns an error that there&#39;s a missing !, which it inserts to cause the original error again. I also tried placing it after the ()&#39;s, and now it complains that it&#39;s expecting the :<br>&gt; <br>&gt; Does anyone know the proper Swift 3 syntax for this?<br></p><p>tl;dr: Write this instead:<br></p><p>	case #selector(showRescale)?:<br></p><p>The explanation:<br></p><p>In Swift 2, Selectors could *always* be nil, even when they weren&#39;t optional. The same was true of UnsafePointer and a few other types, and it wasn&#39;t great. So in Swift 3, we&#39;ve changed these types so they now can only be nil if they&#39;re optional.<br></p><p>Because of this change, the type of `NSMenuItem.action` changed from `Selector` to `Selector?`. That means the patterns in your `switch` statement need to look like:<br></p><p>	case Optional.some(#selector(showRescale)):<br></p><p>Which you can specify in a pattern match (like a case statement) using the convenient trailing-question-mark syntax I showed above:<br></p><p>	case #selector(showRescale)?:<br></p><p>The Swift 3 migrator should have generated this code, so you&#39;ve probably encountered a bug. It would help them if you could create a small example project and file a bug report at &lt;https://bugreport.apple.com/&gt;. (The migrator is closed source.)<br></p><p>Hope this helps,<br>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72853d2b57e37aab89afe61af4f74c62?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Maury Markowitz</string> &lt;maury.markowitz at gmail.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Jun 17, 2016, at 1:31 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; tl;dr: Write this instead:<br>&gt; <br>&gt; 	case #selector(showRescale)?:<br></p><p>Tried that too, it causes another error:<br></p><p>    /Developer/SwiftNEC 3/SwiftNEC/CardViews.swift:139:28: Expected &#39;:&#39; after &#39;case&#39;<br></p><p>Here are the formats I have tried; all fail with various errors:<br></p><p>    case #selector(showRescale):<br>    case #selector(showRescale)?:<br>    case #selector(showRescale)? :<br>    case #selector(showRescale)!:<br>    case #selector(showRescale)! :<br>    case #selector!(showRescale):<br>    case #selector!(showRescale) :<br></p><p>This format, however, did work:<br></p><p>    case Optional.some(#selector(showRescale)):<br></p><p>Optional.some? Urk.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>June 17, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; Tried that too, it causes another error:<br>&gt; <br>&gt;    /Developer/SwiftNEC 3/SwiftNEC/CardViews.swift:139:28: Expected &#39;:&#39; after &#39;case&#39;<br></p><p>Huh, that&#39;s really strange. This syntax, which should be equivalent, causes a compiler crash:<br></p><p>	case (#selector(showRescale))?:<br></p><p>So does the slightly-more-shorthanded version:<br></p><p>	case .some(#selector(showRescale)):<br></p><p>I&#39;d file another bug about this, this time in the Swift open-source bug tracker at &lt;https://bugs.swift.org&gt;.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/84b12bfbce8788f3db802ba8317a4f45?s=50"></div><header><strong>#selector with Swift 3?</strong> from <string>Nathan Day</string> &lt;nathan_day at mac.com&gt;<p>June 19, 2016 at 05:00:00pm</p></header><div class="content"><p>I had a bit of problem getting #selector working with swift 3 I eventual got it to work with your second to last line I think, I&#39;ve had a couple of problems with errors that I can&#39;t fix, type casting mainly, I have often found fixing other errors, even if they come after will make the initial error go away, I have passed it of as beta problems, I still have finished so I don&#39;t know if all my problems can be fixed like this.<br></p><p>Sent from my iPhone<br></p><p>On 18 Jun 2016, at 7:48 AM, Maury Markowitz via swift-users &lt;swift-users at swift.org&gt; wrote:<br></p><p>&gt;&gt; On Jun 17, 2016, at 1:31 PM, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt;&gt; tl;dr: Write this instead:<br>&gt;&gt; <br>&gt;&gt;    case #selector(showRescale)?:<br>&gt; <br>&gt; Tried that too, it causes another error:<br>&gt; <br>&gt;    /Developer/SwiftNEC 3/SwiftNEC/CardViews.swift:139:28: Expected &#39;:&#39; after &#39;case&#39;<br>&gt; <br>&gt; Here are the formats I have tried; all fail with various errors:<br>&gt; <br>&gt;    case #selector(showRescale):<br>&gt;    case #selector(showRescale)?:<br>&gt;    case #selector(showRescale)? :<br>&gt;    case #selector(showRescale)!:<br>&gt;    case #selector(showRescale)! :<br>&gt;    case #selector!(showRescale):<br>&gt;    case #selector!(showRescale) :<br>&gt; <br>&gt; This format, however, did work:<br>&gt; <br>&gt;    case Optional.some(#selector(showRescale)):<br>&gt; <br>&gt; Optional.some? Urk.<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p></div></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>expression too complex</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>June 16, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jun 16, 2016, at 1:59 PM, davelist at mac.com wrote:<br>&gt; <br>&gt; <br>&gt; Joe, <br>&gt; <br>&gt; I had an expression that worked fine with Swift2.2 but Swift3 (Xcode 8 version) complains it&#39;s too complex:<br>&gt; <br>&gt; The variables are of type CGPoint and the function returns a Bool.<br>&gt; <br>&gt;    return (pt.x - p0.x) * (p1.y - p0.y) - (pt.y - p0.y) * (p1.x - p0.x) &lt; 0.0<br></p><p>Thanks for letting us know. If you haven&#39;t yet, would you have time to file a bug report? cc&#39;ing Joe Pamer in case he has any ideas here.<br></p><p>-Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
