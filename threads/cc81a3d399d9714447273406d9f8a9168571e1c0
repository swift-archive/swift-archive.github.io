<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 22, 2016 at 10:00:00am</p></header><div class="content"><p>on Mon Feb 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;&gt; &quot; a vision of a little guard standing at his guard post checking papers&quot;<br>&gt;<br>&gt; Raises hand. Me too. I like my little guard.<br>&gt;<br>&gt; On the other hand, I&#39;d love if assert/precondition would be combined<br>&gt; into a single call, with an optional `forReleaseBuild:` arg (better<br>&gt; named) that defaults to false.<br></p><p>I really don&#39;t want to do that.  Assert and precondition have different<br>use-cases, and I don&#39;t want people to ask “do I want this on in a<br>release build?” (which is a hard decision to make correctly and<br>consistently) when they write them.  I want them to ask, “Am I checking<br>whether this method is being called correctly or is this just a<br>self-sanity check?”<br></p><p>&gt;&gt; On Feb 22, 2016, at 10:07 AM, Shawn Erickson via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Ensure(TM) ...has a little much sugar for my wants in a drink<br>&gt;&gt; <br>&gt;&gt; I get and like the suggestion from a grammar pov however guard is a<br>&gt;&gt; little more forceful in terminology which aligns with the fact that<br>&gt;&gt; you cannot proceed past the guard unless the condition is met. (I<br>&gt;&gt; have a vision of a little guard standing at his guard post checking<br>&gt;&gt; papers)<br>&gt;&gt; <br>&gt;&gt; -Shawn<br>&gt;&gt; <br>&gt;&gt; On Mon, Feb 22, 2016 at 9:01 AM John Flanagan via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; The functionality of ‘guard’ is great and this proposal has nothing<br>&gt;&gt; to do with changing that. The only suggestion is that the word<br>&gt;&gt; ‘ensure’ would better communicate what a ‘guard’ statement does to<br>&gt;&gt; those encountering it for the first time and would make code more<br>&gt;&gt; readable in general.<br>&gt;&gt; <br>&gt;&gt; Example:<br>&gt;&gt; <br>&gt;&gt; ensure foo != nil else {<br>&gt;&gt;    return;<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; -John<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9bfba345bd373f7b8874d58fed6372ff?s=50"></div><header><strong>Rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>David Waite</string> &lt;david at alkaline-solutions.com&gt;<p>February 22, 2016 at 11:00:00am</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 11:15 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Mon Feb 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt;&gt; &quot; a vision of a little guard standing at his guard post checking papers&quot;<br>&gt;&gt; <br>&gt;&gt; Raises hand. Me too. I like my little guard.<br>&gt;&gt; <br>&gt;&gt; On the other hand, I&#39;d love if assert/precondition would be combined<br>&gt;&gt; into a single call, with an optional `forReleaseBuild:` arg (better<br>&gt;&gt; named) that defaults to false.<br>&gt; <br>&gt; I really don&#39;t want to do that.  Assert and precondition have different<br>&gt; use-cases, and I don&#39;t want people to ask “do I want this on in a<br>&gt; release build?” (which is a hard decision to make correctly and<br>&gt; consistently) when they write them.  I want them to ask, “Am I checking<br>&gt; whether this method is being called correctly or is this just a<br>&gt; self-sanity check?”<br></p><p>Agreed. There are (usually very unfortunate) reasons for me to turn on self-sanity checks for release builds, as well.<br></p><p>There is also the possibility of an assert/precondition having side-effects, and people being confused that the forReleaseBuild:false version never calls their code at all. This is exasperated IMO since the methods use @autoclosure.<br></p><p>-DW<br></p><p>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: smime.p7s<br>Type: application/pkcs7-signature<br>Size: 4139 bytes<br>Desc: not available<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160222/5d4e5868/attachment.p7s&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Rename &#39;guard&#39; to &#39;ensure&#39;</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>February 22, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 22, 2016, at 10:15 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; on Mon Feb 22 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On the other hand, I&#39;d love if assert/precondition would be combined<br>&gt;&gt; into a single call, with an optional `forReleaseBuild:` arg (better<br>&gt;&gt; named) that defaults to false.<br>&gt; <br>&gt; I really don&#39;t want to do that.  Assert and precondition have different<br>&gt; use-cases, and I don&#39;t want people to ask “do I want this on in a<br>&gt; release build?” (which is a hard decision to make correctly and<br>&gt; consistently) when they write them.  I want them to ask, “Am I checking<br>&gt; whether this method is being called correctly or is this just a<br>&gt; self-sanity check?”<br></p><p>Conversely, &quot;do I want this on in a release build&quot; is precisely the decision I usually make in my own code. The dichotomy is not parameter validation versus sanity checks. Instead the dichotomy is checks that are fast enough for release builds versus checks that are too slow or have rare false positives and must be left only for non-release builds. &quot;assert&quot; and &quot;precondition&quot; are not useful names for that usage.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com     Runtime Wrangler<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
