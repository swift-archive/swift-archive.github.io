<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/20a273b59e71d37fcfe276d923984cb8?s=50"></div><header><strong>Class Variable delayed stored</strong> from <string>jason bronson</string> &lt;jasonbronson at gmail.com&gt;<p>October  3, 2016 at 03:00:00pm</p></header><div class="content"><p>I have this class I wrote which stores the error messages from the<br>firebaseauth if a error occurs.<br>The problem is that the variable on first return is not set and on second<br>return is.<br>variable _errorMsg is empty on first return of method registerUser<br></p><p>Why is it not storing the variable when it&#39;s initially triggered?<br></p><p><br>//<br></p><p>//  Authentication.swift<br></p><p><br>import Firebase<br></p><p>import FirebaseAuth<br></p><p>import FBSDKCoreKit<br></p><p>import FBSDKLoginKit<br></p><p><br>class Authentication: UIViewController {<br></p><p><br>    public var _errorMsg: String = &quot;&quot;<br></p><p>    private var createdUser: Bool!<br></p><p>    private var _userSignedIn = false<br></p><p><br></p><p><br></p><p>   /**<br></p><p>    *  Registers a user using email/password method<br></p><p>    */<br></p><p>    func registerUser(email : String, password: String) -&gt; Bool{<br></p><p>        createdUser = false<br></p><p>        FIRAuth.auth()?.createUser(withEmail: email, password: password,<br>completion: {(user, error) in<br></p><p>            if error != nil {<br></p><p>               if let errCode = FIRAuthErrorCode(rawValue: (error?._code)!)<br>{<br></p><p>                switch errCode {<br></p><p>                    case FIRAuthErrorCode.errorCodeInvalidEmail:<br></p><p>                        self._errorMsg = &quot;Invalid Email&quot;<br></p><p>                        print(&quot;DEBUG: invalid email&quot;)<br></p><p>                    case FIRAuthErrorCode.errorCodeEmailAlreadyInUse:<br></p><p>                        self._errorMsg = &quot;Email already in use&quot;<br></p><p>                        print(&quot;DEBUG: in use&quot;)<br></p><p>                    case FIRAuthErrorCode.errorCodeWeakPassword:<br></p><p>                        self._errorMsg = &quot;Enter a stronger password&quot;<br></p><p>                        print(&quot;DEBUG: stronger password&quot;)<br></p><p>                    default:<br></p><p>                        print(&quot;DEBUG: Create User Error: &quot;)<br></p><p>                        self._errorMsg = &quot;Unknown Error &quot;<br></p><p><br></p><p>                   }<br></p><p><br></p><p>                }<br></p><p>                print(&quot;DEBUG: New user failed to create&quot;)<br></p><p><br></p><p>            }else{<br></p><p>                print(&quot;DEBUG: New user created &quot;)<br></p><p>                self.createdUser = true<br></p><p>            }<br></p><p>        })<br></p><p><br></p><p>        return self.createdUser<br></p><p><br></p><p><br></p><p>    }<br></p><p><br></p><p>   /**<br></p><p>    * Registers a user using facebook login method<br></p><p>    */<br></p><p>    func facebookLogin() -&gt; Bool{<br></p><p><br></p><p>        let facebookLogin = FBSDKLoginManager()<br></p><p>        facebookLogin.logIn(withReadPermissions: [&quot;email&quot;], from: self){<br>(result, error) in<br></p><p>            if error != nil {<br></p><p>                print(&quot;DEBUG: Unable to authenticate with Facebook \(error)&quot;<br>)<br></p><p>            }else if result?.isCancelled == true {<br></p><p>                print(&quot;DEBUG: User cancelled authenticate with Facebook \(<br>error)&quot;)<br></p><p>            }else {<br></p><p>                print(&quot;DEBUG: User success&quot;)<br></p><p>                let credential =<br>FIRFacebookAuthProvider.credential(withAccessToken:<br>FBSDKAccessToken.current().tokenString)<br></p><p>                self.firebaseAuth(credential)<br></p><p>            }<br></p><p><br></p><p>        }<br></p><p>        return _userSignedIn<br></p><p>    }<br></p><p><br></p><p>   /**<br></p><p>    * Authentication through firebase<br></p><p>    * @parameter credential<br></p><p>    */<br></p><p>    func firebaseAuth(_ credential: FIRAuthCredential){<br></p><p><br></p><p>        FIRAuth.auth()?.signIn(with: credential, completion: {(user, error)<br>in<br></p><p>            if error != nil {<br></p><p>                print(&quot;DEBUG: Failed auth with Firebase \(error)&quot;)<br></p><p>                self._userSignedIn = false<br></p><p>            }else{<br></p><p>                print(&quot;DEBUG: Success auth with Firebase&quot;)<br></p><p>                self._userSignedIn = true<br></p><p>            }<br></p><p>        })<br></p><p>    }<br></p><p><br></p><p><br>    /**<br></p><p>     * Checks if the user is already signed in and sets the variable.<br></p><p>     */<br></p><p>    func signedIn() -&gt; Bool {<br></p><p><br></p><p>        if ((FIRAuth.auth()?.currentUser) != nil) {<br></p><p>            print(&quot;DEBUG: user is signed in&quot;)<br></p><p>            _userSignedIn = true<br></p><p>        }<br></p><p><br></p><p>        return _userSignedIn<br></p><p>    }<br></p><p><br></p><p>   /**<br></p><p>    *  Stores the error messages for authentication issues<br></p><p>    */<br></p><p>    var errorMsg: String {<br></p><p>        get{<br></p><p>            return _errorMsg<br></p><p>        }<br></p><p>        set(value){<br></p><p>            _errorMsg = value<br></p><p>        }<br></p><p>    }<br></p><p><br></p><p><br></p><p>}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161003/afdb00c4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8941ad1d64fca59301084a03cb75956c?s=50"></div><header><strong>Class Variable delayed stored</strong> from <string>Fritz Anderson</string> &lt;fritza at manoverboard.org&gt;<p>October  4, 2016 at 09:00:00am</p></header><div class="content"><p>On 3 Oct 2016, at 5:46 PM, jason bronson via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; I have this class I wrote which stores the error messages from the firebaseauth if a error occurs.<br>&gt; The problem is that the variable on first return is not set and on second return is.<br>&gt; variable _errorMsg is empty on first return of method registerUser<br>&gt; <br>&gt; Why is it not storing the variable when it&#39;s initially triggered?<br></p><p>I assume you are talking about this function, which I’ll elide for purposes of discussion:<br></p><p>===<br>func registerUser(email : String, password: String) -&gt; Bool{<br>    createdUser = false<br>    <br>    FIRAuth.auth()?.createUser(withEmail: email, password: password, completion: {(user, error) in<br>        if error != nil {<br>            // ...<br>        }else{<br>            print(&quot;DEBUG: New user created &quot;)<br>            self.createdUser = true<br>        }<br>    })<br>    <br>    return self.createdUser<br>}<br>===<br></p><p>The error parameter to the closure; the nature of the task, which must surely involve turnaround from another process or host; and the compiler error telling you (I’m betting) to refer explicitly to self in the closure; are a tipoff that the closure escapes. Escaping closures do not return to the code that presented them (or they don’t promise to; see below). createUser(withEmail:password:completion:) merely registers your completion (result) handler; it does not execute it; it waits in the background until the remote process responds. registerUser(... proceeds while createUser(... waits.<br></p><p>Upon the first call with that email/password combination., none of the code in your closure — including the part that sets self.createdUser to true — will have run by the time you return self.createdUser. By the end of registerUser(..., createdUser is still false.<br></p><p>---<br></p><p>As for the second return I’m guessing something like this: createUser(... caches the success of the last time it executed with that email/password pair. It sees there’s no need for a round trip through the external process, so it executes the completion closure immediately, with error == nil. The closure sets self.createdUser = true before it returns to your function. Your function returns the true.<br></p><p>	— F<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/5ad1d07f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/20a273b59e71d37fcfe276d923984cb8?s=50"></div><header><strong>Class Variable delayed stored</strong> from <string>jason bronson</string> &lt;jasonbronson at gmail.com&gt;<p>October  4, 2016 at 08:00:00am</p></header><div class="content"><p>Thanks I&#39;ll need to find another method for handling the asynchronous<br>delays.<br></p><p>On Tuesday, October 4, 2016, Fritz Anderson &lt;fritza at manoverboard.org&gt; wrote:<br></p><p>&gt; On 3 Oct 2016, at 5:46 PM, jason bronson via swift-users &lt;<br>&gt; swift-users at swift.org<br>&gt; &lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-users at swift.org&#39;);&gt;&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I have this class I wrote which stores the error messages from the<br>&gt; firebaseauth if a error occurs.<br>&gt; The problem is that the variable on first return is not set and on second<br>&gt; return is.<br>&gt; variable _errorMsg is empty on first return of method registerUser<br>&gt;<br>&gt; Why is it not storing the variable when it&#39;s initially triggered?<br>&gt;<br>&gt;<br>&gt; I assume you are talking about this function, which I’ll elide for<br>&gt; purposes of discussion:<br>&gt;<br>&gt; ===<br>&gt; func registerUser(email : String, password: String) -&gt; Bool{<br>&gt;     createdUser = false<br>&gt;<br>&gt;     FIRAuth.auth()?.createUser(withEmail: email, password: password,<br>&gt; completion: {(user, error) in<br>&gt;         if error != nil {<br>&gt;             // ...<br>&gt;         }else{<br>&gt;             print(&quot;DEBUG: New user created &quot;)<br>&gt;             self.createdUser = true<br>&gt;         }<br>&gt;     })<br>&gt;<br>&gt;     return self.createdUser<br>&gt; }<br>&gt; ===<br>&gt;<br>&gt; The error parameter to the closure; the nature of the task, which must<br>&gt; surely involve turnaround from another process or host; and the compiler<br>&gt; error telling you (I’m betting) to refer explicitly to self in the<br>&gt; closure; are a tipoff that the closure escapes. Escaping closures do not<br>&gt; return to the code that presented them (or they don’t promise to; see<br>&gt; below). createUser(withEmail:password:completion:) merely registers your<br>&gt; completion (result) handler; it does not execute it; it waits in the<br>&gt; background until the remote process responds. registerUser(... proceeds<br>&gt; while createUser(... waits.<br>&gt;<br>&gt; Upon the first call with that email/password combination., none of the<br>&gt; code in your closure — including the part that sets self.createdUser to<br>&gt; true — will have run by the time you return self.createdUser. By the end<br>&gt; of registerUser(..., createdUser is still false.<br>&gt;<br>&gt; ---<br>&gt;<br>&gt; As for the second return I’m guessing something like this: createUser(...<br>&gt; caches the success of the last time it executed with that email/password<br>&gt; pair. It sees there’s no need for a round trip through the external<br>&gt; process, so it executes the completion closure immediately, with error ==<br>&gt; nil. The closure sets self.createdUser = true before it returns to your<br>&gt; function. Your function returns the true.<br>&gt;<br>&gt; — F<br>&gt;<br>&gt;<br></p><p>-- <br>Sent from Gmail Mobile<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161004/2d3a732a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
