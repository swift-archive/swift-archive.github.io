<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fbb2eb7db6aecac77ec563869540a874?s=50"></div><header><strong>Draft: Add @noescape and rethrows to ManagedBuffer API</strong> from <string>Arnold</string> &lt;aschwaighofer at apple.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>Your benchmark code looks fine to me.<br></p><p>You could put the individual tests into @inline(never) functions then it would be easier to look at what an individual test does in Xcode’s Instruments.<br></p><p>It is true that small changes can trigger large swings in runtime performance as a seemingly small change can for example change inlining decisions or prevent ARC operation removal and then performance is widely different.<br></p><p>Given that you only see a 3% regression in -O mode where we are not able to remove all the abstraction the performance numbers you report look good to me.<br></p><p><br></p><p>&gt; From: Károly Lőrentey via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org&gt;<br>&gt; Date: February 8, 2016 at 7:08:33 AM PST<br>&gt; To: Dave Abrahams &lt;dabrahams-2kanFRK1NckAvxtiuMwx3w at public.gmane.org&gt;<br>&gt; Cc: swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org<br>&gt; Subject: Re: Draft: Add @noescape and rethrows to ManagedBuffer API<br>&gt; <br>&gt; <br>&gt;&gt; On 2016-02-07, at 16:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; On first look this seems to be a great idea.  Have you checked for<br>&gt;&gt; performance impact?<br>&gt; <br>&gt; Yes, although I found it challenging to create a good <br>&gt; microbenchmark for this. Subtle changes in the benchmarking code<br>&gt; lead to large swings in runtime performance, which makes me question<br>&gt; the usefulness of my results.<br>&gt; <br>&gt; Keeping that in mind, for a trivial ManagedBuffer subclass, I found <br>&gt; that @noescape makes for a ~15-18% improvement when whole module <br>&gt; optimization is disabled, or when the subclass is imported.<br>&gt; <br>&gt; Throwing in the rethrows declarations reduces the improvement to <br>&gt; ~9-13%, or (in the case of a particular subscript getter test) even <br>&gt; reverses it, making the code ~3% slower.<br>&gt; <br>&gt; The proposal has no discernible impact on ManagedBuffer subclasses<br>&gt; that the optimizer has full access to. (I.e., when they’re defined<br>&gt; in the same file as the code that’s using them, or in the same <br>&gt; module with WMO.) Unoptimized code also seems unaffected by these <br>&gt; changes.<br>&gt; <br>&gt; My benchmarking code is on GitHub; feedback would be very welcome:<br>&gt; <br>&gt;    https://github.com/lorentey/ManagedBuffer-Benchmark<br>&gt; <br>&gt; -- <br>&gt; Karoly<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Draft: Add @noescape and rethrows to ManagedBuffer API</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>February  8, 2016 at 07:00:00pm</p></header><div class="content"><p>I don&#39;t expect @noescape to have much effect on optimization yet since we don&#39;t propagate that information to SIL at all.<br></p><p>-Joe<br></p><p>&gt; On Feb 8, 2016, at 7:11 PM, Arnold Schwaighofer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Your benchmark code looks fine to me.<br>&gt; <br>&gt; You could put the individual tests into @inline(never) functions then it would be easier to look at what an individual test does in Xcode’s Instruments.<br>&gt; <br>&gt; It is true that small changes can trigger large swings in runtime performance as a seemingly small change can for example change inlining decisions or prevent ARC operation removal and then performance is widely different.<br>&gt; <br>&gt; Given that you only see a 3% regression in -O mode where we are not able to remove all the abstraction the performance numbers you report look good to me.<br>&gt; <br>&gt; <br>&gt; <br>&gt;&gt; From: Károly Lőrentey via swift-evolution &lt;swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org&gt;<br>&gt;&gt; Date: February 8, 2016 at 7:08:33 AM PST<br>&gt;&gt; To: Dave Abrahams &lt;dabrahams-2kanFRK1NckAvxtiuMwx3w at public.gmane.org&gt;<br>&gt;&gt; Cc: swift-evolution-m3FHrko0VLzYtjvyW6yDsg at public.gmane.org<br>&gt;&gt; Subject: Re: Draft: Add @noescape and rethrows to ManagedBuffer API<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 2016-02-07, at 16:18, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On first look this seems to be a great idea.  Have you checked for<br>&gt;&gt;&gt; performance impact?<br>&gt;&gt; <br>&gt;&gt; Yes, although I found it challenging to create a good <br>&gt;&gt; microbenchmark for this. Subtle changes in the benchmarking code<br>&gt;&gt; lead to large swings in runtime performance, which makes me question<br>&gt;&gt; the usefulness of my results.<br>&gt;&gt; <br>&gt;&gt; Keeping that in mind, for a trivial ManagedBuffer subclass, I found <br>&gt;&gt; that @noescape makes for a ~15-18% improvement when whole module <br>&gt;&gt; optimization is disabled, or when the subclass is imported.<br>&gt;&gt; <br>&gt;&gt; Throwing in the rethrows declarations reduces the improvement to <br>&gt;&gt; ~9-13%, or (in the case of a particular subscript getter test) even <br>&gt;&gt; reverses it, making the code ~3% slower.<br>&gt;&gt; <br>&gt;&gt; The proposal has no discernible impact on ManagedBuffer subclasses<br>&gt;&gt; that the optimizer has full access to. (I.e., when they’re defined<br>&gt;&gt; in the same file as the code that’s using them, or in the same <br>&gt;&gt; module with WMO.) Unoptimized code also seems unaffected by these <br>&gt;&gt; changes.<br>&gt;&gt; <br>&gt;&gt; My benchmarking code is on GitHub; feedback would be very welcome:<br>&gt;&gt; <br>&gt;&gt;   https://github.com/lorentey/ManagedBuffer-Benchmark<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Karoly<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
