<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/07592719e6916b40622a074edee475db?s=50"></div><header><strong>OS/Environment check in Swift</strong> from <string>Muhammad Mominul Huque Nahid</string> &lt;mominul2082 at gmail.com&gt;<p>August 19, 2016 at 06:00:00pm</p></header><div class="content"><p>Hi,<br></p><p>We all know that we are lacking an environment check in Swift. It <br>shouldn&#39;t be a important feature if we were only targeting Apple(macOS, <br>iOS...) and Linux or if we are targeting only one Windows ABI. But our <br>community are working hard to port swift to Windows targeting various <br>ABIs. There are currently three main variants of Windows ABIs: MSVC, <br>Cygwin and MinGW. Of course, their ABI&#39;s varies too. So when porting <br>Swift to windows with targeting these ABIs and when writing swift code <br>on windows, we need an environment check .<br></p><p>By using the `environment check` term we are talking about the mechanism <br>that will provide us the information about the ABI that the swift <br>compiler is targeting.<br></p><p>When porting stdlib and Foundation to windows, community members are <br>using the method &#39;ad hoc -D flag&#39;. But to me and to the community this <br>method is not sufficient or a long term solution. Saleem Abdulrasool and <br>Han Sangjin have pointed out this in following threads:<br></p><p>1. <br>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160704/002360.html<br></p><p>2. <br>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160502/016381.html<br></p><p>But unfortunately the core team haven&#39;t succeeded to make or choose a <br>solution. But as we are expecting a swift release, we should make a <br>solution.<br></p><p>As Saleem pointed out that there are ABI problems in Linux also:<br></p><p> &gt; This is not a problem strictly limited to Windows.  It also appears in<br> &gt; other OSes.  As a concrete example, Linux has traditionally had the &quot;gnu&quot;<br> &gt; environment (libc).  However, there is also &quot;uclibc&quot; which is pretty<br> &gt; common, and these days, &quot;musl&quot; as different targets.<br></p><p>So we have multiple environment(ABI?) in Linux also.<br></p><p>I have seen some core members want to know how other languages handles <br>this issue like Chris Lattner wanted to know:<br></p><p> &gt; I am not a windows guru (and haven’t used it for over a decade) but <br>my understanding is that Cygwin is a different target (as in different <br>target triple, different ABI, different environment) from MSVC and <br>MinGW.  If that is the case, it should be its own “arch” or “os”.  MSVC <br>and MinGW (again, AFAIK) use the same C ABI, and thus could be treated <br>as the same target.<br></p><p> &gt; I think it would be defensible to treat MSVC/MinGW as an os(Windows) <br>but treat Cygwin as os(Cygwin).<br> &gt;<br> &gt; How do other languages handle this?  What does dlang do, for example?<br> &gt;<br> &gt; -Chris<br></p><p>So I want to put some information how other languages handles this issue.<br></p><p>## D lang<br></p><p>https://dlang.org/spec/version.html#predefined-versions<br></p><p>On D, anyone can handle this by using `version()` block.<br></p><p>```<br></p><p>version(Cygwin)<br>{<br>     // Environment is Windows Cygwin<br></p><p>} else {<br></p><p>     // Not a Windows Cygwin environment<br></p><p>}<br></p><p>```<br></p><p>## Rust<br></p><p>On windows Rust supports two ABI&#39;s: MSVC and Mingw(gnu). On rust we can <br>check the environment by:<br></p><p>```<br></p><p>#[cfg(target_env = &quot;msvc&quot;)]<br></p><p>// MSVC environment<br></p><p><br>#[cfg(target_env = &quot;gnu&quot;)]<br></p><p>// Mingw environment<br></p><p>```<br></p><p>## Environment check &amp; Swift<br></p><p>Here I want to propose some conditionals:<br></p><p>```<br></p><p>environment(MSVC)<br></p><p>environment(CYGWIN)<br></p><p>environment(MUSL)<br></p><p>// or<br></p><p>target(MSVC)<br></p><p>target(MUSL)<br></p><p>// or<br></p><p>os(Windows, target: MSVC)<br></p><p>os(Linux, target: MUSL)<br></p><p>// or<br></p><p>os(Windows, environment: MSVC)<br></p><p>os(Linux, environment: MUSL)<br></p><p>```<br></p><p><br>We can discuss about this topic and submit a proposal when everyone is <br>agreed to a decision. So lets start!<br></p><p><br>Thanks<br></p><p>Mominul<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160819/a2860620/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
