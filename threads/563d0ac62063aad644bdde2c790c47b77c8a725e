<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>August 27, 2016 at 04:00:00am</p></header><div class="content"><p>What do you find so useful about them? And in what context does it make sense to you that `nil &lt; .some(x)` always evaluates to true? When I found that out, I was very surprised by that behaviour (just like many others). Do you have examples of then an optional comparison makes the code clearer?<br></p><p>&gt; Goddammit. I completely missed this thread, because Pipermail regularly decides not to deliver the swift-evolution-announce version of review threads (which means they bypass my inbox). Why does it do this? Most of the emails get delivered, but it just skips some of them, and I keep ending up missing review threads because of it.<br>&gt; <br>&gt; This change is going to have a HUGE impact for me. I use this sort of comparison _all the time_ and find it incredibly useful, and have had literally zero bugs caused by this. Surely I can&#39;t be the only one who uses this. I am not looking forward to copying&amp;pasting a reimplementation of the comparison functions into every single project I work on.<br>&gt; <br>&gt; I&#39;m also really concerned about how fast such a hugely-impactful change was proposed, accepted, and implemented. The proposal PR was submitted on July 12, merged the same day, and a review kicked off again on the same day. And the first thread the proposal referenced only happened the previous day, on July 11. And the implementation landed only 12 days later on July 24th. This was extremely fast and didn&#39;t even have time to have the proposal listed on apple/swift-evolution for people to find before the review kicked off. It looks like this was done so the change could be made before the end of source-breaking changes, but the fast-tracking of something like this means that people like me completely missed it, and now we&#39;re stuck with a highly-impactful change that we don&#39;t want. Fast-tracking proposals is understandable when they&#39;re largely additive, or they fix something that is widely accepted as a problem. But being able to compare optionals is not universally recognized as a problem, and I know for a fact I&#39;ve weighed in on this subject in the past on swift-evolution. I do not think it was appropriate to fast-track this proposal.<br>&gt; <br>&gt; -Kevin Ballard<br>&gt; <br>&gt; On Wed, Jul 20, 2016, at 05:38 PM, Chris Lattner via swift-evolution wrote:<br>&gt; &gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt; &gt; <br>&gt; &gt; The review of &quot;SE-0121: Remove Optional Comparison Operators&quot; ran from Active review July 12...19. The proposal has been *accepted*.<br>&gt; &gt; <br>&gt; &gt; Feedback has been universally positive from both the community and the core team, because it eliminates a surprising part of the Swift model at very little utility cost.<br>&gt; &gt; <br>&gt; &gt; Thank you to Jacob Bandes-Storch for driving this discussion forward.<br>&gt; &gt; <br>&gt; &gt; -Chris Lattner<br>&gt; &gt; Review Manager<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August 27, 2016 at 08:00:00pm</p></header><div class="content"><p>I find it useful because Optionals show up all over the place, and it’s very convenient to be able to compare Optional values in a straightforward fashion. Especially when you have two Optional values to compare (as opposed to comparing an Optional with a non-Optional). `nil &lt; .some(x)` evaluating to true makes sense because it’s the logical way to define that operator if you’re trying to make Optionals comparable (and if we had conditional protocol conformances then I’d say Optional should in fact be Comparable), as the absence of a value would quite reasonably be considered to be less than the presence of a value, assuming that there is an ordered relationship at all. And there’s already precedent for “empty” values sorting less than all other values (namely, the empty string sorts less than all other strings).<br></p><p>As for optional comparisons making the code cleaner, I end up using them all over the place. The case that motivated my email looked something along the lines of<br></p><p>  if request?.httpVersion &lt; HTTPVersion(1.0) {<br>    // no keepalive<br>    disconnect()<br>  }<br></p><p>This particular case could be trivially replaced with<br></p><p>  if request.map({ $0.httpVersion &lt; HTTPVersion(1.0) }) ?? true {<br></p><p>but it’s uglier and harder to read.<br></p><p>It’s easy to come up with contrived examples of comparing two optionals as well. A simplistic example is just sorting an array of optionals, or sorting an array of structs that contain an optional value.<br></p><p>-Kevin Ballard<br></p><p>&gt; On Aug 26, 2016, at 7:36 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; What do you find so useful about them? And in what context does it make sense to you that `nil &lt; .some(x)` always evaluates to true? When I found that out, I was very surprised by that behaviour (just like many others). Do you have examples of then an optional comparison makes the code clearer?<br>&gt; <br>&gt;&gt; Goddammit. I completely missed this thread, because Pipermail regularly decides not to deliver the swift-evolution-announce version of review threads (which means they bypass my inbox). Why does it do this? Most of the emails get delivered, but it just skips some of them, and I keep ending up missing review threads because of it.<br>&gt;&gt; <br>&gt;&gt; This change is going to have a HUGE impact for me. I use this sort of comparison _all the time_ and find it incredibly useful, and have had literally zero bugs caused by this. Surely I can&#39;t be the only one who uses this. I am not looking forward to copying&amp;pasting a reimplementation of the comparison functions into every single project I work on.<br>&gt;&gt; <br>&gt;&gt; I&#39;m also really concerned about how fast such a hugely-impactful change was proposed, accepted, and implemented. The proposal PR was submitted on July 12, merged the same day, and a review kicked off again on the same day. And the first thread the proposal referenced only happened the previous day, on July 11. And the implementation landed only 12 days later on July 24th. This was extremely fast and didn&#39;t even have time to have the proposal listed on apple/swift-evolution for people to find before the review kicked off. It looks like this was done so the change could be made before the end of source-breaking changes, but the fast-tracking of something like this means that people like me completely missed it, and now we&#39;re stuck with a highly-impactful change that we don&#39;t want. Fast-tracking proposals is understandable when they&#39;re largely additive, or they fix something that is widely accepted as a problem. But being able to compare optionals is not universally recognized as a problem, and I know for a fact I&#39;ve weighed in on this subject in the past on swift-evolution. I do not think it was appropriate to fast-track this proposal.<br>&gt;&gt; <br>&gt;&gt; -Kevin Ballard<br>&gt;&gt; <br>&gt;&gt; On Wed, Jul 20, 2016, at 05:38 PM, Chris Lattner via swift-evolution wrote:<br>&gt;&gt;&gt; Proposal Link: https://github.com/apple/swift-evolution/blob/master/proposals/0121-remove-optional-comparison-operators.md<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The review of &quot;SE-0121: Remove Optional Comparison Operators&quot; ran from Active review July 12...19. The proposal has been *accepted*.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Feedback has been universally positive from both the community and the core team, because it eliminates a surprising part of the Swift model at very little utility cost.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thank you to Jacob Bandes-Storch for driving this discussion forward.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -Chris Lattner<br>&gt;&gt;&gt; Review Manager<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c74c15ba14b1096d4e42900ddd2dacd0?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Patrick Smith</string> &lt;pgwsmith at gmail.com&gt;<p>August 29, 2016 at 08:00:00pm</p></header><div class="content"><p>A little nicer I think is:<br></p><p>if request?.httpVersion.map({ $0 &lt; HTTPVersion(1.0) }) ?? true {<br></p><p>It’s very explicit what the fallback is too, the original’s ambiguity makes me uncomfortable.<br></p><p>BTW, did you want to be checking for &lt;= 1.0? With HTTP 1.0, it’s opt in. https://en.wikipedia.org/wiki/HTTP_persistent_connection<br></p><p>Patrick<br></p><p>&gt; On 28 Aug 2016, at 1:20 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; As for optional comparisons making the code cleaner, I end up using them all over the place. The case that motivated my email looked something along the lines of<br>&gt; <br>&gt;  if request?.httpVersion &lt; HTTPVersion(1.0) {<br>&gt;    // no keepalive<br>&gt;    disconnect()<br>&gt;  }<br>&gt; <br>&gt; This particular case could be trivially replaced with<br>&gt; <br>&gt;  if request.map({ $0.httpVersion &lt; HTTPVersion(1.0) }) ?? true {<br>&gt; <br>&gt; but it’s uglier and harder to read.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>August 29, 2016 at 12:00:00pm</p></header><div class="content"><p>Whenever I see such examples I feel like map is being abused because of some of its properties rather than this. Ring the best way to deal with optionals.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 29 Aug 2016, at 11:26, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; A little nicer I think is:<br>&gt; <br>&gt; if request?.httpVersion.map({ $0 &lt; HTTPVersion(1.0) }) ?? true {<br>&gt; <br>&gt; It’s very explicit what the fallback is too, the original’s ambiguity makes me uncomfortable.<br>&gt; <br>&gt; BTW, did you want to be checking for &lt;= 1.0? With HTTP 1.0, it’s opt in. https://en.wikipedia.org/wiki/HTTP_persistent_connection<br>&gt; <br>&gt; Patrick<br>&gt; <br>&gt;&gt; On 28 Aug 2016, at 1:20 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; As for optional comparisons making the code cleaner, I end up using them all over the place. The case that motivated my email looked something along the lines of<br>&gt;&gt; <br>&gt;&gt; if request?.httpVersion &lt; HTTPVersion(1.0) {<br>&gt;&gt;   // no keepalive<br>&gt;&gt;   disconnect()<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; This particular case could be trivially replaced with<br>&gt;&gt; <br>&gt;&gt; if request.map({ $0.httpVersion &lt; HTTPVersion(1.0) }) ?? true {<br>&gt;&gt; <br>&gt;&gt; but it’s uglier and harder to read.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160829/feda509d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>August 29, 2016 at 09:00:00am</p></header><div class="content"><p>I agree - I really don’t like these clever map constructs to work around optionals either and I avoid them at all costs. IMO they obscure intent pretty severely and shouldn’t be considered idiomatic Swift.<br></p><p>Depending on circumstances, I might do something along these lines:<br></p><p>guard let version = request?.httpVersion, version &gt;= HTTPVersion(1.0) else {<br>  disconnect()<br>  return<br>}<br></p><p>That’s still more verbose, though, but it seems very explicit without relying on map cleverness.<br></p><p>l8r<br>Sean<br></p><p><br>&gt; On Aug 29, 2016, at 6:05 AM, Goffredo Marocchi via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Whenever I see such examples I feel like map is being abused because of some of its properties rather than this. Ring the best way to deal with optionals.<br>&gt; <br>&gt; Sent from my iPhone<br>&gt; <br>&gt; On 29 Aug 2016, at 11:26, Patrick Smith via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; A little nicer I think is:<br>&gt;&gt; <br>&gt;&gt; if request?.httpVersion.map({ $0 &lt; HTTPVersion(1.0) }) ?? true {<br>&gt;&gt; <br>&gt;&gt; It’s very explicit what the fallback is too, the original’s ambiguity makes me uncomfortable.<br>&gt;&gt; <br>&gt;&gt; BTW, did you want to be checking for &lt;= 1.0? With HTTP 1.0, it’s opt in. https://en.wikipedia.org/wiki/HTTP_persistent_connection<br>&gt;&gt; <br>&gt;&gt; Patrick<br>&gt;&gt; <br>&gt;&gt;&gt; On 28 Aug 2016, at 1:20 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As for optional comparisons making the code cleaner, I end up using them all over the place. The case that motivated my email looked something along the lines of<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if request?.httpVersion &lt; HTTPVersion(1.0) {<br>&gt;&gt;&gt;   // no keepalive<br>&gt;&gt;&gt;   disconnect()<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This particular case could be trivially replaced with<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if request.map({ $0.httpVersion &lt; HTTPVersion(1.0) }) ?? true {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; but it’s uglier and harder to read.<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6451ee8093c9cedc94f6c813b4dde2c5?s=50"></div><header><strong>[Accepted] SE-0121: Remove Optional Comparison Operators</strong> from <string>Kevin Ballard</string> &lt;kevin at sb.org&gt;<p>August 29, 2016 at 08:00:00pm</p></header><div class="content"><p>On Mon, Aug 29, 2016, at 03:26 AM, Patrick Smith wrote:<br>&gt; A little nicer I think is:<br>&gt; <br>&gt; if request?.httpVersion.map({ $0 &lt; HTTPVersion(1.0) }) ?? true {<br>&gt; <br>&gt; It’s very explicit what the fallback is too, the original’s ambiguity makes me uncomfortable.<br></p><p>I find that much less readable.<br></p><p>&gt; BTW, did you want to be checking for &lt;= 1.0? With HTTP 1.0, it’s opt in. https://en.wikipedia.org/wiki/HTTP_persistent_connection<br></p><p>Yes I did. I have a different check for == 1.0 where I check the Connection header. The full expression looks like (from the Swift 2.2 version):<br></p><p>  if response.headers[&quot;Connection&quot;]?.caseInsensitiveCompare(&quot;close&quot;) == .OrderedSame<br>      || (request?.httpVersion == HTTPVersion(1,0) &amp;&amp; response.headers[&quot;Connection&quot;]?.caseInsensitiveCompare(&quot;keep-alive&quot;) != .OrderedSame)<br>      || request?.httpVersion &lt; HTTPVersion(1,0)<br>  {<br></p><p>-Kevin<br></p><p>&gt; Patrick<br>&gt; <br>&gt; &gt; On 28 Aug 2016, at 1:20 PM, Kevin Ballard via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; <br>&gt; &gt; As for optional comparisons making the code cleaner, I end up using them all over the place. The case that motivated my email looked something along the lines of<br>&gt; &gt; <br>&gt; &gt;  if request?.httpVersion &lt; HTTPVersion(1.0) {<br>&gt; &gt;    // no keepalive<br>&gt; &gt;    disconnect()<br>&gt; &gt;  }<br>&gt; &gt; <br>&gt; &gt; This particular case could be trivially replaced with<br>&gt; &gt; <br>&gt; &gt;  if request.map({ $0.httpVersion &lt; HTTPVersion(1.0) }) ?? true {<br>&gt; &gt; <br>&gt; &gt; but it’s uglier and harder to read.<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
