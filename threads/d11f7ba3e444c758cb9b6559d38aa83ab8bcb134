<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 13, 2016 at 02:00:00pm</p></header><div class="content"><p>It seems I can write this:<br></p><p>extension String<br>{<br>  public func deleting(prefix inPrefix: String) -&gt; String<br>  public func deleting(prefix inPrefix: String) -&gt; String?<br>}<br></p><p>But I was hoping it would do the right thing:<br></p><p>let a = s.deleting(prefix: &quot;foo&quot;)<br>if let b = s.deleting(prefix: &quot;foo&quot;) { }<br></p><p>But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br></p><p>I&#39;m having trouble googling for an answer on this. Some answers around generics, but that doesn&#39;t apply in this case.<br></p><p>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8149b5bd66abbc94babfda2995153481?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Nevin Brackett-Rozinsky</string> &lt;nevin.brackettrozinsky at gmail.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>It works if you specify the types of the variables:<br></p><p>let a: String = …<br>if let b: String = …<br></p><p>Nevin<br></p><p><br>On Thu, Oct 13, 2016 at 5:36 PM, Rick Mann via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; It seems I can write this:<br>&gt;<br>&gt; extension String<br>&gt; {<br>&gt;   public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;   public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt; }<br>&gt;<br>&gt; But I was hoping it would do the right thing:<br>&gt;<br>&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt;<br>&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br>&gt;<br>&gt; I&#39;m having trouble googling for an answer on this. Some answers around<br>&gt; generics, but that doesn&#39;t apply in this case.<br>&gt;<br>&gt; --<br>&gt; Rick Mann<br>&gt; rmann at latencyzero.com<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/dc2507bf/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/524d03ef9e95c67a7bb100ab15808133?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Luis Ferro</string> &lt;lferro9000 at gmail.com&gt;<p>October 14, 2016 at 08:00:00pm</p></header><div class="content"><p>It may also work if you create a &quot;generic&quot; extension that can only be <br>applied to strings.<br></p><p>Then i&#39;m guessing that you will not need to specify the type on the use.<br></p><p>LF<br></p><p><br></p><p>On 13/10/2016 22:44, Nevin Brackett-Rozinsky via swift-users wrote:<br>&gt; It works if you specify the types of the variables:<br>&gt;<br>&gt; let a: String = …<br>&gt; if let b: String = …<br>&gt;<br>&gt; Nevin<br>&gt;<br>&gt;<br>&gt; On Thu, Oct 13, 2016 at 5:36 PM, Rick Mann via swift-users <br>&gt; &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;     It seems I can write this:<br>&gt;<br>&gt;     extension String<br>&gt;     {<br>&gt;       public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;       public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt;     }<br>&gt;<br>&gt;     But I was hoping it would do the right thing:<br>&gt;<br>&gt;     let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt;     if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt;<br>&gt;     But it finds these ambiguous, and I&#39;m not sure how to specify<br>&gt;     which I want.<br>&gt;<br>&gt;     I&#39;m having trouble googling for an answer on this. Some answers<br>&gt;     around generics, but that doesn&#39;t apply in this case.<br>&gt;<br>&gt;     --<br>&gt;     Rick Mann<br>&gt;     rmann at latencyzero.com &lt;mailto:rmann at latencyzero.com&gt;<br>&gt;<br>&gt;<br>&gt;     _______________________________________________<br>&gt;     swift-users mailing list<br>&gt;     swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;     https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;     &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161014/7e11721c/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 2:36 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems I can write this:<br>&gt; <br>&gt; extension String<br>&gt; {<br>&gt;  public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;  public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt; }<br>&gt; <br>&gt; But I was hoping it would do the right thing:<br>&gt; <br>&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt; <br>&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br></p><p>The first one is truly ambiguous since either overload works. If you specify the type of &#39;a&#39;, you should be able to choose one or the other:<br></p><p>let a: String = s.deleting(prefix: &quot;foo&quot;)<br>let b: String? = s.deleting(prefix: &quot;foo&quot;)<br></p><p>The `if let` should not be ambiguous, since only the Optional-returning overload is a valid candidate. Got time to file a bug?<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 14:47 , Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 2:36 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It seems I can write this:<br>&gt;&gt; <br>&gt;&gt; extension String<br>&gt;&gt; {<br>&gt;&gt; public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;&gt; public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But I was hoping it would do the right thing:<br>&gt;&gt; <br>&gt;&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt;&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt;&gt; <br>&gt;&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br>&gt; <br>&gt; The first one is truly ambiguous since either overload works. If you specify the type of &#39;a&#39;, you should be able to choose one or the other:<br>&gt; <br>&gt; let a: String = s.deleting(prefix: &quot;foo&quot;)<br>&gt; let b: String? = s.deleting(prefix: &quot;foo&quot;)<br>&gt; <br>&gt; The `if let` should not be ambiguous, since only the Optional-returning overload is a valid candidate. Got time to file a bug?<br></p><p>Here you go: https://bugs.swift.org/browse/SR-2942<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 3:27 PM, Rick Mann &lt;rmann at latencyzero.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 13, 2016, at 14:47 , Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 13, 2016, at 2:36 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; It seems I can write this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension String<br>&gt;&gt;&gt; {<br>&gt;&gt;&gt; public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;&gt;&gt; public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But I was hoping it would do the right thing:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt;&gt;&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br>&gt;&gt; <br>&gt;&gt; The first one is truly ambiguous since either overload works. If you specify the type of &#39;a&#39;, you should be able to choose one or the other:<br>&gt;&gt; <br>&gt;&gt; let a: String = s.deleting(prefix: &quot;foo&quot;)<br>&gt;&gt; let b: String? = s.deleting(prefix: &quot;foo&quot;)<br>&gt;&gt; <br>&gt;&gt; The `if let` should not be ambiguous, since only the Optional-returning overload is a valid candidate. Got time to file a bug?<br>&gt; <br>&gt; Here you go: https://bugs.swift.org/browse/SR-2942<br></p><p>Thanks!<br></p><p>-Joe<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>October 13, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 2:36 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; It seems I can write this:<br>&gt; <br>&gt; extension String<br>&gt; {<br>&gt;  public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;  public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt; }<br>&gt; <br>&gt; But I was hoping it would do the right thing:<br>&gt; <br>&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt; <br>&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br></p><p>You can specify which you want by explicitly naming the type:<br>    let a = s.deleting(prefix: &quot;foo&quot;) as String<br>or<br>    let a : String = s.deleting(prefix: &quot;foo&quot;)<br></p><p>…but presumably that doesn&#39;t give you the usability that you were hoping for.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/94167462/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8809800aec2460f291384b794d7e6f8f?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Rick Mann</string> &lt;rmann at latencyzero.com&gt;<p>October 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 14:51 , Greg Parker &lt;gparker at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Oct 13, 2016, at 2:36 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; It seems I can write this:<br>&gt;&gt; <br>&gt;&gt; extension String<br>&gt;&gt; {<br>&gt;&gt;  public func deleting(prefix inPrefix: String) -&gt; String<br>&gt;&gt;  public func deleting(prefix inPrefix: String) -&gt; String?<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; But I was hoping it would do the right thing:<br>&gt;&gt; <br>&gt;&gt; let a = s.deleting(prefix: &quot;foo&quot;)<br>&gt;&gt; if let b = s.deleting(prefix: &quot;foo&quot;) { }<br>&gt;&gt; <br>&gt;&gt; But it finds these ambiguous, and I&#39;m not sure how to specify which I want.<br>&gt; <br>&gt; You can specify which you want by explicitly naming the type:<br>&gt;     let a = s.deleting(prefix: &quot;foo&quot;) as String<br>&gt; or<br>&gt;     let a : String = s.deleting(prefix: &quot;foo&quot;)<br>&gt; <br>&gt; …but presumably that doesn&#39;t give you the usability that you were hoping for.<br></p><p>Eh, it&#39;s close, especially if Joe Groff is right that the if-let case shouldn&#39;t be ambiguous.<br></p><p>A better question would be to ask, is this a reasonable approach, to overload a method like this for this kind of behavior. There are two ways to think about stripping the prefix off a string: a string minus a non-existent prefix is just the string, or you want to know that the prefix didn&#39;t exist. This gives you both, but might make for subtly unexpected behavior.<br></p><p>Would it make sense to be able to specify priority for a set of overloaded methods to help resolve ambiguity?<br></p><p><br>-- <br>Rick Mann<br>rmann at latencyzero.com<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 13, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 3:31 PM, Rick Mann via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Would it make sense to be able to specify priority for a set of overloaded methods to help resolve ambiguity?<br></p><p>This might be pretty useful in some situations, but I am not sure if the semantic complexity that it introduces is worth it.<br></p><p>Another example of how this could be useful: <br></p><p>I made a bare-bones rational number type &lt;https://gist.github.com/hooman/6e08c48e1e06ee19e06e5b09f664f9be&gt; for Swift a while ago. I would love to be able to overload “/“ operator to create fractions (rational numbers) instead of dividing two integers. <br></p><p>If I overloaded “/“ to return rational (Int / Int -&gt; Rational), the result type of the operator would become ambiguous for every use of it with integer operands. It would be nice if I could prioritize my overload of “/“ over stdlib definition to resolve the ambiguity. <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/802c558b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8e77369a540cf4d35924683e176c7a9c?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Mark Lacey</string> &lt;mark.lacey at apple.com&gt;<p>October 13, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Oct 13, 2016, at 5:37 PM, Hooman Mehr via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 3:31 PM, Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Would it make sense to be able to specify priority for a set of overloaded methods to help resolve ambiguity?<br></p><p>I don’t think we want to head down that route, partially because using a contextual type as mentioned below removes the ambiguity.<br></p><p>&gt; This might be pretty useful in some situations, but I am not sure if the semantic complexity that it introduces is worth it.<br>&gt; <br>&gt; Another example of how this could be useful: <br>&gt; <br>&gt; I made a bare-bones rational number type &lt;https://gist.github.com/hooman/6e08c48e1e06ee19e06e5b09f664f9be&gt; for Swift a while ago. I would love to be able to overload “/“ operator to create fractions (rational numbers) instead of dividing two integers. <br>&gt; <br>&gt; If I overloaded “/“ to return rational (Int / Int -&gt; Rational), the result type of the operator would become ambiguous for every use of it with integer operands.<br></p><p>That isn’t the way the type checker works. If you use an explicit type to contextualize the expression, there is no ambiguity. For example this works without any ambiguity.<br></p><p>struct Rational {}<br>func / (lhs: Int, rhs: Int) -&gt; Rational { return Rational() }<br>func + (lhs: Rational, rhs: Rational) -&gt; Rational { return Rational() }<br></p><p>func use(r: Rational) {}<br></p><p>let x: Rational = (1 / 2) + (2 / 3)  // Rational result type, no ambiguity<br>use(r: (1 / 2) + (2 / 3))  // Rational argument type, no ambiguity<br>let y = (1 / 2) as Rational    // Calls func/(Int,Int)-&gt;Rational<br></p><p>Mark<br></p><p>&gt; It would be nice if I could prioritize my overload of “/“ over stdlib definition to resolve the ambiguity. <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/3dd70da4/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e7e554db1f80d7d6041d92edd5145698?s=50"></div><header><strong>Overload by return type optionality?</strong> from <string>Hooman Mehr</string> &lt;hooman at mac.com&gt;<p>October 13, 2016 at 08:00:00pm</p></header><div class="content"><p>I know, but a simple <br></p><p>let x = 2/3<br></p><p>becomes ambiguous which I don’t like.<br></p><p>&gt; On Oct 13, 2016, at 8:00 PM, Mark Lacey &lt;mark.lacey at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 13, 2016, at 5:37 PM, Hooman Mehr via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 13, 2016, at 3:31 PM, Rick Mann via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Would it make sense to be able to specify priority for a set of overloaded methods to help resolve ambiguity?<br>&gt; <br>&gt; I don’t think we want to head down that route, partially because using a contextual type as mentioned below removes the ambiguity.<br>&gt; <br>&gt;&gt; This might be pretty useful in some situations, but I am not sure if the semantic complexity that it introduces is worth it.<br>&gt;&gt; <br>&gt;&gt; Another example of how this could be useful: <br>&gt;&gt; <br>&gt;&gt; I made a bare-bones rational number type &lt;https://gist.github.com/hooman/6e08c48e1e06ee19e06e5b09f664f9be&gt; for Swift a while ago. I would love to be able to overload “/“ operator to create fractions (rational numbers) instead of dividing two integers. <br>&gt;&gt; <br>&gt;&gt; If I overloaded “/“ to return rational (Int / Int -&gt; Rational), the result type of the operator would become ambiguous for every use of it with integer operands.<br>&gt; <br>&gt; That isn’t the way the type checker works. If you use an explicit type to contextualize the expression, there is no ambiguity. For example this works without any ambiguity.<br>&gt; <br>&gt; struct Rational {}<br>&gt; func / (lhs: Int, rhs: Int) -&gt; Rational { return Rational() }<br>&gt; func + (lhs: Rational, rhs: Rational) -&gt; Rational { return Rational() }<br>&gt; <br>&gt; func use(r: Rational) {}<br>&gt; <br>&gt; let x: Rational = (1 / 2) + (2 / 3)  // Rational result type, no ambiguity<br>&gt; use(r: (1 / 2) + (2 / 3))  // Rational argument type, no ambiguity<br>&gt; let y = (1 / 2) as Rational    // Calls func/(Int,Int)-&gt;Rational<br>&gt; <br>&gt; Mark<br>&gt; <br>&gt;&gt; It would be nice if I could prioritize my overload of “/“ over stdlib definition to resolve the ambiguity. <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20161013/61ae2284/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
