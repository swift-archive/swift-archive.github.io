<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January 27, 2016 at 11:00:00am</p></header><div class="content"><p>on Sat Jan 23 2016, Jacob Bandes-Storch &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Proposal link:<br>&gt; https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md<br>&gt;<br>&gt;&gt; What is your evaluation of the proposal?<br>&gt;<br>&gt; I think there are more things which would make a &quot;guidelines&quot; document<br>&gt; even<br>&gt; better for promoting consistent code:<br>&gt;<br>&gt; - When to use functions vs. properties for getters. The changes in<br>&gt; SE-0006<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md&gt;<br>&gt; include<br>&gt; &quot;func min()&quot; and &quot;var underestimatedCount&quot;. SE-0005<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0005-objective-c-name-translation.md&gt;<br>&gt; includes &quot;class func darkGray()&quot;. I imagine it should be implied that<br>&gt; properties are more efficient to compute, but this doesn&#39;t seem to be<br>&gt; applied consistently.<br></p><p>Separately replied to the above, continuing with the rest<br></p><p>&gt; - Edge cases of naming, such as what to do with acronyms (like URL)<br>&gt; when they appear in function and variable names, especially at the<br>&gt; beginning.<br></p><p>This is something that was still under discussion internally when the<br>review started.  The argument internally has been between whether to:<br></p><p>1. Always capitalize the whole initialism, even in variable and method<br>   names.<br>2. Capitalize or lowercase the whole initialism according to case<br>   conventions (e.g. in a type name it would be all-caps).<br></p><p>Some people in this group have expressed a strong preference for another<br>possibility, which IIUC is “All but the first letter of the initialism<br>are lower-case; capitalize according to case conventions,<br>i.e. no-special-treatment.&quot;<br></p><p>&gt; - When to use structs/classes/enums; when to use optionals; other such<br>&gt; basic API design topics.<br></p><p>Hmm, I&#39;m not sure whether that&#39;s in scope for this document.<br></p><p>&gt; While certainly not everything from the Coding Guidelines for Cocoa<br>&gt; &lt;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html&gt;<br>&gt; (linked from SE-0005) applies to Swift, the Swift guidelines would do<br>&gt; well<br>&gt; to match its thoroughness.<br></p><p>When I look at that document, the section titles at least imply it&#39;s<br>*only* about naming and not about any of those other things you just<br>mentioned.<br></p><p>&gt;     Protocols that describe what something is should read as nouns<br>&gt; (e.g.<br>&gt; Collection).<br>&gt;     Protocols that describe a capability should be named using the<br>&gt; suffixes<br>&gt; able, ible, or ing (e.g. Equatable, ProgressReporting).<br>&gt;<br>&gt; &quot;SetAlgebra&quot; (from SE-0006) doesn&#39;t really fit in with this.<br></p><p>It arguably fits in with the former, but I agree it&#39;s not a perfect<br>fit.  If you have better suggestions, I&#39;m all ears.<br></p><p>&gt; Extremely minor:<br>&gt;     text = &quot;The value is: &quot;<br>&gt;     text += String(veryLargeNumber)<br>&gt;     text += &quot; and in hexadecimal, it&#39;s&quot;<br>&gt;     text += String(veryLargeNumber, radix: 16)<br>&gt;<br>&gt; The second string literal should have a space at the end as well as<br>&gt; the<br>&gt; beginning.<br></p><p>Thanks!<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0089229ece6e648767cff4dc6c6d38ab?s=50"></div><header><strong>[Review] SE-0023 API Design Guidelines</strong> from <string>Charles Kissinger</string> &lt;crk at akkyra.com&gt;<p>January 27, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Jan 27, 2016, at 11:42 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br></p><p>&gt; Some people in this group have expressed a strong preference for another<br>&gt; possibility, which IIUC is “All but the first letter of the initialism<br>&gt; are lower-case; capitalize according to case conventions,<br>&gt; i.e. no-special-treatment.”<br></p><p>Although I have this preference, in my case it might be an overstatement to say it is a “strong” preference. I just wanted to get the rationale for it (doesn’t obliterate word boundaries; doesn’t ‘shout&#39;) out there so all points of view were considered.<br></p><p>I almost never read through any of the discussions on this list without either changing my initial opinion or having grave doubts about it. :-)<br></p><p>— CK<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
