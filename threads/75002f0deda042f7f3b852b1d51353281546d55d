<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 29, 2016 at 01:00:00pm</p></header><div class="content"><p>I may be missing something obvious, but I can’t find a library function that maps a Dictionary to another Dictionary, transforming the keys and/or values. The only method I’ve found is the regular map(), which results in an Array. Does this just not exist in the standard library?<br></p><p>—Jens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>August 29, 2016 at 11:00:00pm</p></header><div class="content"><p>On Mon, Aug 29, 2016 at 11:36 PM, Jens Alfke via swift-users<br>&lt;swift-users at swift.org&gt; wrote:<br>&gt; I may be missing something obvious, but I can’t find a library function that maps a Dictionary to another Dictionary, transforming the keys and/or values. The only method I’ve found is the regular map(), which results in an Array. Does this just not exist in the standard library?<br></p><p>Yes, this functionality does not exist.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>August 30, 2016 at 05:00:00am</p></header><div class="content"><p>I don&#39;&#39;t quite understand your question. In Swift, Dictionaries are<br>structs. You can always use `let dict2 = dict1`. That is enough. Or did you<br>mean below code?<br></p><p>var dict1 = ...<br>var dict2 = ...<br>for (key, value) in dic1 {<br>    dic2.updateValue(value, forKey:key)<br>}<br></p><p>Zhaoxin<br></p><p>On Tue, Aug 30, 2016 at 4:36 AM, Jens Alfke via swift-users &lt;<br>swift-users at swift.org&gt; wrote:<br></p><p>&gt; I may be missing something obvious, but I can’t find a library function<br>&gt; that maps a Dictionary to another Dictionary, transforming the keys and/or<br>&gt; values. The only method I’ve found is the regular map(), which results in<br>&gt; an Array. Does this just not exist in the standard library?<br>&gt;<br>&gt; —Jens<br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160830/d0fc8fd7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 29, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Aug 29, 2016, at 2:07 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;&#39;t quite understand your question. In Swift, Dictionaries are structs. You can always use `let dict2 = dict1`. <br></p><p>I’m talking about a function that does for Dictionaries what map() does for Arrays: it transforms every key and value in the input Dictionary (through a caller-provided function), producing a new Dictionary.<br></p><p>You could use this to take a dictionary [String:String] that maps user IDs to product IDs, and produce a dictionary [User:Product].<br>Or you could invert a dictionary (swapping keys and values.)<br></p><p>—Jens<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>August 30, 2016 at 07:00:00am</p></header><div class="content"><p>Jens, I see now. I believe this is talked months ago. There is no directly<br>function at the moment.  You can do:<br></p><p>var dict1:[String:String] = ...<br>var dict2: [User:Product] = [:]<br>_ = dict1.map {<br>    ....<br>    dict2.updateValue(value, forKey:key)<br></p><p>    return nil<br>}<br></p><p>// use dict2<br></p><p>It is ugly, but it works. However, some people thought this was not a good<br>use of map. And they make an extension of Dictionary themselves.<br></p><p>You can search it in [swift-user], [swift-evolution] if you can&#39;t find it<br>in [swift-user].<br></p><p>Zhaoxin<br></p><p>On Tue, Aug 30, 2016 at 5:52 AM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On Aug 29, 2016, at 2:07 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I don&#39;&#39;t quite understand your question. In Swift, Dictionaries are<br>&gt; structs. You can always use `let dict2 = dict1`.<br>&gt;<br>&gt; I’m talking about a function that does for Dictionaries what map() does<br>&gt; for Arrays: it transforms every key and value in the input Dictionary<br>&gt; (through a caller-provided function), producing a new Dictionary.<br>&gt;<br>&gt; You could use this to take a dictionary [String:String] that maps user IDs<br>&gt; to product IDs, and produce a dictionary [User:Product].<br>&gt; Or you could invert a dictionary (swapping keys and values.)<br>&gt;<br>&gt; —Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160830/2a20d20a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>August 29, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On Aug 29, 2016, at 4:38 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; ...<br>&gt; _ = dict1.map {<br></p><p>I just use a `for` loop to iterate dict1, and inside it populate dict2. Using `map` here seems wasteful since it’s building an array that’s thrown away.<br></p><p>&gt;     dict2.updateValue(value, forKey:key)<br></p><p>This is a tangent, but: Why do you use this syntax instead of the more readable `dict2[key] = value`? (I assume they’re equivalent internally.)<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160829/befa328f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/957b675456a66c394945a7361aedd51d?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Zhao Xin</string> &lt;owenzx at gmail.com&gt;<p>August 30, 2016 at 09:00:00am</p></header><div class="content"><p>I just thought updateValue(:,:) is more natural than subscript function in<br>Dictionary.<br></p><p>For example, if there is no key in the dictionary, both `dict2[key] =<br>value` and `dict2.updateValue(value, forKey:key)` will add a new key-value<br>pair. However, the subscript function does it by adding something on both<br>side of the equation mark, which seems not natural to me. So I prefer to<br>use updateValue(:,:) function instead.<br></p><p>Besides, updateValue(:,:) function can use potential conversions before<br>Swift 3.0, which makes it more convenient.<br>https://lists.swift.org/pipermail/swift-users/Week-of-Mon-20160523/002021.html<br></p><p>Zhaoxin<br></p><p>On Tue, Aug 30, 2016 at 8:13 AM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br></p><p>&gt;<br>&gt; On Aug 29, 2016, at 4:38 PM, Zhao Xin &lt;owenzx at gmail.com&gt; wrote:<br>&gt; ...<br>&gt;<br>&gt; _ = dict1.map {<br>&gt;<br>&gt;<br>&gt; I just use a `for` loop to iterate dict1, and inside it populate dict2.<br>&gt; Using `map` here seems wasteful since it’s building an array that’s thrown<br>&gt; away.<br>&gt;<br>&gt;     dict2.updateValue(value, forKey:key)<br>&gt;<br>&gt;<br>&gt; This is a tangent, but: Why do you use this syntax instead of the more<br>&gt; readable `dict2[key] = value`? (I assume they’re equivalent internally.)<br>&gt;<br>&gt; —Jens<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160830/71a6613e/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b397983c72fc0400927bd578212b8b5e?s=50"></div><header><strong>Mapping a Dictionary to a Dictionary?</strong> from <string>Lou Zell</string> &lt;lzell11 at gmail.com&gt;<p>August 29, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt;<br>&gt; I’m talking about a function that does for Dictionaries what map() does<br>&gt; for Arrays: it transforms every key and value in the input Dictionary<br>&gt; (through a caller-provided function), producing a new Dictionary.<br>&gt;<br>&gt; You could use this to take a dictionary [String:String] that maps user IDs<br>&gt; to product IDs, and produce a dictionary [User:Product].<br>&gt; Or you could invert a dictionary (swapping keys and values.)<br></p><p><br>Jens, this is untested outside of the repl, but maybe it will help:<br></p><p>extension Dictionary {<br>  func dictMap&lt;U, V&gt;(closure: @noescape (k: Key, v: Value) -&gt; (U, V)) -&gt;<br>[U:V] {<br>    var ret = [U:V]()<br>    for (k0, v0) in self {<br>      let (k1, v1) = closure(k: k0, v: v0)<br>      ret[k1] = v1<br>    }<br>    return ret<br>  }<br>}<br>let mapped = [1: 1, 2: 2].dictMap() { (k,v) in return (String(k),<br>String(v)) }<br>print(mapped)<br>// Prints:<br>// [&quot;2&quot;: &quot;2&quot;, &quot;1&quot;: &quot;1&quot;]<br></p><p>Lou<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160829/ae0e2f9d/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
