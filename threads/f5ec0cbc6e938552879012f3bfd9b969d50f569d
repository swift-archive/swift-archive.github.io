<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>February 13, 2016 at 09:00:00am</p></header><div class="content"><p>on Fri Feb 12 2016, Sébastien Blondiau &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Using only the operators | &amp; - ^ |= &amp;= -= ^= for the operations on Set<br>&gt; would simplify the code and resolve the problem of the names of these<br>&gt; functions. Set do not really need these functions as method, only the<br>&gt; operators would be enough, like the BitwiseOperationsType which do not<br>&gt; have the methods xor and orInPlace ...<br></p><p>We have a semantic muddle in this area, because:<br></p><p>* We believe that bitwise operations on integers are distinct from set<br>  operations and should use different notation.<br></p><p>* We believe that option sets are set-like and should use set notation.<br></p><p>* Yet option sets are, semantically, exactly like the bitwise aspect of<br>  integers (i.e. the set elements are the same type as the sets themselves<br>  and may subsume one-another).<br></p><p>We can&#39;t really keep all these contradictions in the air at once and not<br>end up with a naming mess.<br></p><p>&gt; With the operators, the question of &quot;does this function mutate?&quot; would<br>&gt; not be anymore. The code would get clarity and brevity without problem<br>&gt; of naming. Isn’t that the API Design Guidelines?<br>&gt;<br>&gt; --<br>&gt; Sébastien<br>&gt;<br>&gt;&gt; Le 12 févr. 2016 à 00:24, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt; <br>&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt; under development.<br>&gt;&gt; <br>&gt;&gt; My suggestions:<br>&gt;&gt; <br>&gt;&gt; 	union -&gt; union<br>&gt;&gt; 	intersect -&gt; intersection<br>&gt;&gt; 	subtract -&gt; subtraction<br>&gt;&gt; <br>&gt;&gt; 	unionInPlace -&gt; unite<br>&gt;&gt; 	intersectInPlace -&gt; intersect<br>&gt;&gt; 	subtractInPlace -&gt; subtract<br>&gt;&gt; <br>&gt;&gt; In other words, treat the mutating forms as imperative verbs and the nonmutating forms as nouns. This basically makes the nonmutating forms into accessors, which I think is a good alternative given the trouble we&#39;re having with -ing/-ed.<br>&gt;&gt; <br>&gt;&gt; That still leaves exclusiveOr, which is frankly a horrible name to begin with. I think we have to derive a name from the &quot;symmetric difference&quot; terminology, giving us<br>&gt;&gt; <br>&gt;&gt; 	exclusiveOr -&gt; difference<br>&gt;&gt; 	exclusiveOrInPlace -&gt; differ<br>&gt;&gt; <br>&gt;&gt; However, given the difficulty we&#39;re having coming up with names, we might want to explore using operators instead.<br>&gt;&gt; <br>&gt;&gt; 	union -&gt; |<br>&gt;&gt; 	intersect -&gt; &amp;<br>&gt;&gt; 	subtract -&gt; -<br>&gt;&gt; 	exclusiveOr -&gt; ^<br>&gt;&gt; <br>&gt;&gt; This gives us extremely straightforward mutating operators, of course, since we do have a convention for in-place operators:<br>&gt;&gt; <br>&gt;&gt; 	unionInPlace -&gt; |=<br>&gt;&gt; 	intersectInPlace -&gt; &amp;=<br>&gt;&gt; 	subtract -&gt; -=<br>&gt;&gt; 	exclusiveOr -&gt; ^=<br>&gt;&gt; <br>&gt;&gt; Some things to like about these operators:<br>&gt;&gt; <br>&gt;&gt; * They are not used for anything on sequences or collections, so they don&#39;t overload existing concepts like concatenation with incompatible semantics.<br>&gt;&gt; * They have the same commutativity and transitivity as the associated integer operations.<br>&gt;&gt; * The bitwise forms of `|` and `&amp;` are already documented (in `_DisallowMixedSignArithmetic`) as the union and intersection of the bits, and `^` is documented in a compatible way.  Meanwhile, `-` literally means &quot;subtraction&quot;, the exact same operation we&#39;re exposing.<br>&gt;&gt; * And of course, it&#39;s just *nice* to not have to write long, unwieldy method names for fundamental operations.<br>&gt;&gt; <br>&gt;&gt; Swift generally tries not to overload operators too much, but I think in this case, these overloads would be appropriate and helpful, while also getting us out of a sticky naming problem.<br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Brent Royal-Gordon<br>&gt;&gt; Architechies<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>-Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ece55ca3fe50dca9c70bcd914acb48a5?s=50"></div><header><strong>ed/ing, InPlace, Set/SetAlgebra naming resolution</strong> from <string>Matthew Judge</string> &lt;matthew.judge at gmail.com&gt;<p>February 13, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 13, 2016, at 12:43, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; on Fri Feb 12 2016, Sébastien Blondiau &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Using only the operators | &amp; - ^ |= &amp;= -= ^= for the operations on Set<br>&gt;&gt; would simplify the code and resolve the problem of the names of these<br>&gt;&gt; functions. Set do not really need these functions as method, only the<br>&gt;&gt; operators would be enough, like the BitwiseOperationsType which do not<br>&gt;&gt; have the methods xor and orInPlace ...<br>&gt; <br>&gt; We have a semantic muddle in this area, because:<br>&gt; <br>&gt; * We believe that bitwise operations on integers are distinct from set<br>&gt;  operations and should use different notation.<br></p><p>I&#39;m not sure I see a significant difference. (Or at least I can easily reason about bitwise operations as working on subsets of the set: 2^31, 2^30, ..., 1)<br></p><p>&gt; <br>&gt; * We believe that option sets are set-like and should use set notation.<br>&gt; <br>&gt; * Yet option sets are, semantically, exactly like the bitwise aspect of<br>&gt;  integers (i.e. the set elements are the same type as the sets themselves<br>&gt;  and may subsume one-another).<br>&gt; <br>&gt; We can&#39;t really keep all these contradictions in the air at once and not<br>&gt; end up with a naming mess.<br>&gt; <br>&gt;&gt; With the operators, the question of &quot;does this function mutate?&quot; would<br>&gt;&gt; not be anymore. The code would get clarity and brevity without problem<br>&gt;&gt; of naming. Isn’t that the API Design Guidelines?<br>&gt;&gt; <br>&gt;&gt; --<br>&gt;&gt; Sébastien<br>&gt;&gt; <br>&gt;&gt;&gt;&gt; Le 12 févr. 2016 à 00:24, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; a écrit :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The API guidelines working group took up the issue of the InPlace suffix<br>&gt;&gt;&gt;&gt; yesterday, and decided that it was not to be used anywhere in the<br>&gt;&gt;&gt;&gt; standard library.  We are planning to apply the changes shown here<br>&gt;&gt;&gt;&gt; &lt;https://gist.github.com/dabrahams/d872556291a3cb797bd5&gt; to the API of<br>&gt;&gt;&gt;&gt; SetAlgebra (and consequently Set) to make it conform to the guidelines<br>&gt;&gt;&gt;&gt; under development.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    union -&gt; union<br>&gt;&gt;&gt;    intersect -&gt; intersection<br>&gt;&gt;&gt;    subtract -&gt; subtraction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    unionInPlace -&gt; unite<br>&gt;&gt;&gt;    intersectInPlace -&gt; intersect<br>&gt;&gt;&gt;    subtractInPlace -&gt; subtract<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; In other words, treat the mutating forms as imperative verbs and the nonmutating forms as nouns. This basically makes the nonmutating forms into accessors, which I think is a good alternative given the trouble we&#39;re having with -ing/-ed.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; That still leaves exclusiveOr, which is frankly a horrible name to begin with. I think we have to derive a name from the &quot;symmetric difference&quot; terminology, giving us<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    exclusiveOr -&gt; difference<br>&gt;&gt;&gt;    exclusiveOrInPlace -&gt; differ<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; However, given the difficulty we&#39;re having coming up with names, we might want to explore using operators instead.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    union -&gt; |<br>&gt;&gt;&gt;    intersect -&gt; &amp;<br>&gt;&gt;&gt;    subtract -&gt; -<br>&gt;&gt;&gt;    exclusiveOr -&gt; ^<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This gives us extremely straightforward mutating operators, of course, since we do have a convention for in-place operators:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    unionInPlace -&gt; |=<br>&gt;&gt;&gt;    intersectInPlace -&gt; &amp;=<br>&gt;&gt;&gt;    subtract -&gt; -=<br>&gt;&gt;&gt;    exclusiveOr -&gt; ^=<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Some things to like about these operators:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; * They are not used for anything on sequences or collections, so they don&#39;t overload existing concepts like concatenation with incompatible semantics.<br>&gt;&gt;&gt; * They have the same commutativity and transitivity as the associated integer operations.<br>&gt;&gt;&gt; * The bitwise forms of `|` and `&amp;` are already documented (in `_DisallowMixedSignArithmetic`) as the union and intersection of the bits, and `^` is documented in a compatible way.  Meanwhile, `-` literally means &quot;subtraction&quot;, the exact same operation we&#39;re exposing.<br>&gt;&gt;&gt; * And of course, it&#39;s just *nice* to not have to write long, unwieldy method names for fundamental operations.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift generally tries not to overload operators too much, but I think in this case, these overloads would be appropriate and helpful, while also getting us out of a sticky naming problem.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Brent Royal-Gordon<br>&gt;&gt;&gt; Architechies<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; -- <br>&gt; -Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
