<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Review[ SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>February 17, 2016 at 08:00:00pm</p></header><div class="content"><p>Hello Swift community,<br></p><p>The review of &quot;Disambiguating Line Control Statements from Debugging Identifiers&quot; begins now and runs through February 22. The proposal is available here:<br></p><p>	https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md<br></p><p>Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>	https://lists.swift.org/mailman/listinfo/swift-evolution<br>or, if you would like to keep your feedback private, directly to the review manager.<br></p><p><br>What goes into a review?<br></p><p>The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br></p><p>	* What is your evaluation of the proposal?<br>	* Is the problem being addressed significant enough to warrant a change to Swift?<br>	* Does this proposal fit well with the feel and direction of Swift?<br>	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br>	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>More information about the Swift evolution process is available at<br></p><p>	https://github.com/apple/swift-evolution/blob/master/process.md<br></p><p>Thank you,<br></p><p>-Chris Lattner<br>Swift Intern<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09d425d65431edfdb8ce3bbb2f2e2bf0?s=50"></div><header><strong>[swift-evolution-announce] [Review[ SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Adrian Prantl</string> &lt;aprantl at apple.com&gt;<p>February 18, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; Detailed design<br>&gt; <br>&gt; line-control-statement → #setline<br>&gt; line-control-statement → #setline line-number file-name<br>&gt; line-number → A decimal integer greater than zero<br>&gt; file-name → static-string-literal­<br></p><p>Nitpick: #setline is not really a statement, a better name for the production would be “line-control-directive” as it may appear everywhere a newline character may appear in the grammar.<br></p><p>I’d like to propose “#resetline” as a more self-explanatory alternative to the empty #setline directive. (The empty #line directive restores the the parser to continue with normal source locations — a feature used by LLDB).<br></p><p>&gt; On Feb 17, 2016, at 8:39 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; 	* What is your evaluation of the proposal?<br>+1 with the above suggestions.<br>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br>Yes, we don’t want two different concepts named #line.<br>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br>Yes, since it is a stated non-goal to maintain compatibility with the C preprocessor.<br></p><p>-- adrian<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/05e222e6ef4d84013bb3baeb0e25c90b?s=50"></div><header><strong>[Review[ SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Patrick Gili</string> &lt;gili.patrick.r at gili-labs.com&gt;<p>February 18, 2016 at 03:00:00pm</p></header><div class="content"><p>&gt; On Feb 17, 2016, at 11:39 PM, Chris Lattner via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello Swift community,<br>&gt; <br>&gt; The review of &quot;Disambiguating Line Control Statements from Debugging Identifiers&quot; begins now and runs through February 22. The proposal is available here:<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md<br>&gt; <br>&gt; Reviews are an important part of the Swift evolution process. All reviews should be sent to the swift-evolution mailing list at:<br>&gt; 	https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; or, if you would like to keep your feedback private, directly to the review manager.<br>&gt; <br>&gt; <br>&gt; What goes into a review?<br>&gt; <br>&gt; The goal of the review process is to improve the proposal under review through constructive criticism and, eventually, determine the direction of Swift. When writing your review, here are some questions you might want to answer in your review:<br>&gt; <br>&gt; 	* What is your evaluation of the proposal?<br></p><p>Seems like SE-0028 created an undesirable side-effect that needs remediation, and hence I approve. Does the community needs to do a better job fleshing out these details moving forward, or was this intentional?<br></p><p>&gt; 	* Is the problem being addressed significant enough to warrant a change to Swift?<br></p><p>Yes.<br></p><p>&gt; 	* Does this proposal fit well with the feel and direction of Swift?<br></p><p>Yes.<br></p><p>&gt; 	* If you have you used other languages or libraries with a similar feature, how do you feel that this proposal compares to those?<br></p><p>Don&#39;t know.<br></p><p>&gt; 	* How much effort did you put into your review? A glance, a quick reading, or an in-depth study?<br></p><p>Quick read.<br></p><p>&gt; <br>&gt; More information about the Swift evolution process is available at<br>&gt; <br>&gt; 	https://github.com/apple/swift-evolution/blob/master/process.md<br>&gt; <br>&gt; Thank you,<br>&gt; <br>&gt; -Chris Lattner<br>&gt; Swift Intern<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>[swift-evolution-announce] [Review[ SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>February 18, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md<br></p><p>Not a full review yet, just a question:<br></p><p>&gt; line-control-statement → #setline<br>&gt; line-control-statement → #setline line-number file-name <br></p><p>Does that mean the filename is always required? This is uncommon in other languages that support #line, though it looks like Swift 2 imposes the same requirement.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[swift-evolution-announce] [Review[ SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>February 19, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;m going to defer to the team to answer this.<br></p><p>&gt; On Feb 18, 2016, at 7:16 PM, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; 	https://github.com/apple/swift-evolution/blob/master/proposals/0034-disambiguating-line.md<br>&gt; <br>&gt; Not a full review yet, just a question:<br>&gt; <br>&gt;&gt; line-control-statement → #setline<br>&gt;&gt; line-control-statement → #setline line-number file-name <br>&gt; <br>&gt; Does that mean the filename is always required? This is uncommon in other languages that support #line, though it looks like Swift 2 imposes the same requirement.<br>&gt; <br>&gt; -- <br>&gt; Brent Royal-Gordon<br>&gt; Architechies<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/23bb59b802aac41afdf8ffffae1040d5?s=50"></div><header><strong>[Review] SE-0034 Disambiguating Line Control Statements from Debugging Identifiers</strong> from <string>Alex Martini</string> &lt;amartini at apple.com&gt;<p>February 25, 2016 at 01:00:00pm</p></header><div class="content"><p>Adrian Prantl wrote:<br>&gt; Nitpick: #setline is not really a statement, a better name for the production would be “line-control-directive” as it may appear everywhere a newline character may appear in the grammar.<br></p><p>Agreed.<br></p><p>The reference doesn&#39;t currently separate directives (#if and #setline and so on) into their own chapter.  Given the list of chapters it does have, Statements was the least incorrect place to discuss these.<br></p><p>We&#39;ll have to revisit the naming on these &quot;statements&quot; that aren&#39;t quite statements in the grammar.  This is very closely related to the recent change to rename &quot;build configurations&quot; to &quot;conditional compilation blocks&quot;.  (As commit 6272941 did for compiler diagnostics.)<br></p><p><br>Brent Royal-Gordon wrote:<br>&gt; Does that mean the filename is always required? This is uncommon in other languages that support #line, though it looks like Swift 2 imposes the same requirement.<br></p><p>You&#39;re correct, that is the current behavior (see below).  Do you have an example use case for setting the line number without setting the file name?<br></p><p><br></p><p>% cat -n test.swift<br>     1	print(&quot;On line \(#line) in file \(#file)&quot;)<br>     2	<br>     3	print(&quot;On line \(#line) in file \(#file)&quot;)<br>     4	<br>     5	#line 100<br>     6	<br>     7	print(&quot;On line \(#line) in file \(#file)&quot;)<br>     8	<br>     9	#line 100 &quot;filename&quot;<br>    10	<br>    11	print(&quot;On line \(#line) in file \(#file)&quot;)<br>    12	<br>    13	#line<br>    14	<br>    15	print(&quot;On line \(#line) in file \(#file)&quot;)<br></p><p>% swift test.swift <br>test.swift:7:1: error: expected filename string literal for #line directive<br>print(&quot;On line \(#line) in file \(#file)&quot;)<br>^<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160225/c8bff8b9/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
