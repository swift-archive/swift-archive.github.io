<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d042be5dcfe90e649f760303af3e429?s=50"></div><header><strong>Language design philosophy, Swift vs Other recent languages</strong> from <string>Jens Persson</string> &lt;jens at bitcycle.com&gt;<p>February  6, 2016 at 08:00:00pm</p></header><div class="content"><p>I think Clojure is one of the most interesting new languages (besides Swift<br>of course) and it looks like it&#39;s growing steadily, despite / thanks to<br>being a lisp etc. And Rich Hickey does a great job of explaining /<br>marketing / selling the design philosophy of Clojure. He makes Clojure look<br>so obvious, wonderful and simple (not easy!). He also makes the<br>conventional languages/ways look so unnecessarily complex, convoluted and<br>bad.<br>Like in this talk:<br>https://www.youtube.com/watch?v=VSdnJDO-xdg<br>My favorite part is Death by Specificity ~49 minutes in.<br></p><p>I&#39;d like to see more things like that for Swift, showing off the language<br>and motivating its design decisions. There&#39;s of course the great WWDC 2015<br>talk Protocol Oriented Programming in Swift by Dave Abrahams. And the other<br>one about value types. I&#39;ve also seen a few very interesting talks and<br>articles about SIL and optimization, etc. But any pointers to more such<br>material would be highly appreciated.<br></p><p>It would also be interesting to hear people on this list compare the design<br>of Swift to that of some other new languages (eg Clojure, Elm or Rust).<br></p><p>For example:<br></p><p>Why didn&#39;t Swift go with S-expressions / homoiconicity? What would the<br>cost/benefits have been?<br></p><p>How does Swift tackle the problem of Death by Specificity mentioned in the<br>talk above?<br></p><p>/Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160206/04ffdc80/attachment.html&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
