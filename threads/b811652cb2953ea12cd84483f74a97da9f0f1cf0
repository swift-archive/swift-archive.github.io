<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 12, 2016 at 04:00:00pm</p></header><div class="content"><p>Hi<br></p><p>So I’ve been working on cross-compiling for ARM, and it seems pretty good - only a bit of refactoring of the build script really needed. It’s a popular request, the lack of which is hindering lots of people and businesses who would like to experiment with swift on their ARM-based devices.<br></p><p>The thing that’s really missing before I can propose merging these changes is running the in-tree tests (swift/tests/ folder) to validate the products. I basically want to copy that folder in to a package and run it on the target device, but I’m not really sure how to do that with lit. I’ve built the unit test binaries (the ones which statically link against the runtime), and those obviously are easy enough to package and script for out-of-tree use.<br></p><p>Can anybody help with this?<br></p><p>Thanks<br></p><p>Karl<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>May 12, 2016 at 09:00:00am</p></header><div class="content"><p>Hi, Karl. I don’t think it would be too hard to handle most of them. The tests are actually pretty standalone: they require the LLVM tool “lit &lt;http://llvm.org/docs/CommandGuide/lit.html&gt;”  (in llvm/utils/lit/) and some helper tools from the build directory like “FileCheck” and “not”. To run them, the build system generates a valid lit.site.cfg file from test/lit.site.cfg.in and then points lit.py at that.<br></p><p>That’s really all you need. I regularly run lit by hand just pointing to the directory containing the lit.site.cfg file.<br></p><p>% /Volumes/Data/swift-public/llvm/utils/lit/lit.py -sv /Volumes/Data/swift-public/build/ninja/swift-macosx-x86_64/test-macosx-x86_64/<br></p><p>So if you can come up with a valid lit.site.cfg file and set PATH appropriately, you’ll be most of the way there, and then you can iron out remaining issues later.<br></p><p>Jordan<br></p><p><br>&gt; On May 12, 2016, at 07:45, Karl via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi<br>&gt; <br>&gt; So I’ve been working on cross-compiling for ARM, and it seems pretty good - only a bit of refactoring of the build script really needed. It’s a popular request, the lack of which is hindering lots of people and businesses who would like to experiment with swift on their ARM-based devices.<br>&gt; <br>&gt; The thing that’s really missing before I can propose merging these changes is running the in-tree tests (swift/tests/ folder) to validate the products. I basically want to copy that folder in to a package and run it on the target device, but I’m not really sure how to do that with lit. I’ve built the unit test binaries (the ones which statically link against the runtime), and those obviously are easy enough to package and script for out-of-tree use.<br>&gt; <br>&gt; Can anybody help with this?<br>&gt; <br>&gt; Thanks<br>&gt; <br>&gt; Karl<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160512/7edddc2f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f38cb038c3d9ae705c4db3b5b5272906?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Greg Parker</string> &lt;gparker at apple.com&gt;<p>May 12, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On May 12, 2016, at 7:45 AM, Karl via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; <br>&gt; So I’ve been working on cross-compiling for ARM, and it seems pretty good - only a bit of refactoring of the build script really needed. It’s a popular request, the lack of which is hindering lots of people and businesses who would like to experiment with swift on their ARM-based devices.<br>&gt; <br>&gt; The thing that’s really missing before I can propose merging these changes is running the in-tree tests (swift/tests/ folder) to validate the products. I basically want to copy that folder in to a package and run it on the target device, but I’m not really sure how to do that with lit. I’ve built the unit test binaries (the ones which statically link against the runtime), and those obviously are easy enough to package and script for out-of-tree use.<br>&gt; <br>&gt; Can anybody help with this?<br></p><p>You should look at the iOS device and iOS simulator machinery in swift/test/lit.cfg for one solution. Both cases use lit substitutions like %target-run to execute a helper tool that can run the test in the appropriate environment and collect the output. Our iOS device testing tool is not open-source, but it uploads a test&#39;s source and build directories to the device, runs the test executable on the device, and collects stdout and stderr and any output files. Any other tools used by the test script such as FileCheck still run on the test hosting machine, not on the target device being tested.<br></p><p>Some of the test scripts are complicated, interleaving compile commands and execution commands, so they can&#39;t be cleanly separated into a cross-compilation step and an on-device execution step. The %target-run mechanism allows on-device execution without forcing test authors to separate the device-side content.<br></p><p><br>-- <br>Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160512/19951eac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 13, 2016 at 03:00:00am</p></header><div class="content"><p>&gt; On 13 May 2016, at 02:36, Greg Parker &lt;gparker at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On May 12, 2016, at 7:45 AM, Karl via swift-dev &lt;swift-dev at swift.org &lt;mailto:swift-dev at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; So I’ve been working on cross-compiling for ARM, and it seems pretty good - only a bit of refactoring of the build script really needed. It’s a popular request, the lack of which is hindering lots of people and businesses who would like to experiment with swift on their ARM-based devices.<br>&gt;&gt; <br>&gt;&gt; The thing that’s really missing before I can propose merging these changes is running the in-tree tests (swift/tests/ folder) to validate the products. I basically want to copy that folder in to a package and run it on the target device, but I’m not really sure how to do that with lit. I’ve built the unit test binaries (the ones which statically link against the runtime), and those obviously are easy enough to package and script for out-of-tree use.<br>&gt;&gt; <br>&gt;&gt; Can anybody help with this?<br>&gt; <br>&gt; You should look at the iOS device and iOS simulator machinery in swift/test/lit.cfg for one solution. Both cases use lit substitutions like %target-run to execute a helper tool that can run the test in the appropriate environment and collect the output. Our iOS device testing tool is not open-source, but it uploads a test&#39;s source and build directories to the device, runs the test executable on the device, and collects stdout and stderr and any output files. Any other tools used by the test script such as FileCheck still run on the test hosting machine, not on the target device being tested.<br>&gt; <br>&gt; Some of the test scripts are complicated, interleaving compile commands and execution commands, so they can&#39;t be cleanly separated into a cross-compilation step and an on-device execution step. The %target-run mechanism allows on-device execution without forcing test authors to separate the device-side content.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Greg Parker     gparker at apple.com &lt;mailto:gparker at apple.com&gt;     Runtime Wrangler<br>&gt; <br>&gt; <br></p><p>My original idea was a lot simpler - create a script grabbing the specific executables we need (FileCheck, llvm-link, etc) and the tests, package it up, ship it out via ssh and run it on the intended target, piping the output back. I just couldn’t really figure out what the specific dependencies where - the site config seemed to want the entire source and build tree of swift and LLVM, and I don’t want to package all of that stuff up.<br></p><p>Karl<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20160513/d5df1f27/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 12, 2016 at 06:00:00pm</p></header><div class="content"><p>On Thu, May 12, 2016 at 6:33 PM, Karl Wagner via swift-dev<br>&lt;swift-dev at swift.org&gt; wrote:<br>&gt; My original idea was a lot simpler - create a script grabbing the specific<br>&gt; executables we need (FileCheck, llvm-link, etc) and the tests, package it<br>&gt; up, ship it out via ssh and run it on the intended target, piping the output<br>&gt; back. I just couldn’t really figure out what the specific dependencies where<br>&gt; - the site config seemed to want the entire source and build tree of swift<br>&gt; and LLVM, and I don’t want to package all of that stuff up.<br></p><p>Are you building a native compiler or a cross-compiler?<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>May 13, 2016 at 04:00:00am</p></header><div class="content"><p>I’m cross-compiling a native compiler. That is to say, I’m not building a cross-compiler in the way we build for Android or iOS: a native compiler with foreign standard libraries. Both the compiler and stdlib are foreign to the build machine.<br></p><p>I’d like to produce an installable package (that much is good), and a standalone package of tests. I’ll have a go at it in the next few days, then maybe we can add an installable component to produce a test package. I was pretty disappointed that the  “testsuite-tools” component we have basically links back to the in-tree tests; It’s not really “installable&quot;.<br></p><p>Karl<br></p><p>&gt; On 13 May 2016, at 03:40, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Thu, May 12, 2016 at 6:33 PM, Karl Wagner via swift-dev<br>&gt; &lt;swift-dev at swift.org&gt; wrote:<br>&gt;&gt; My original idea was a lot simpler - create a script grabbing the specific<br>&gt;&gt; executables we need (FileCheck, llvm-link, etc) and the tests, package it<br>&gt;&gt; up, ship it out via ssh and run it on the intended target, piping the output<br>&gt;&gt; back. I just couldn’t really figure out what the specific dependencies where<br>&gt;&gt; - the site config seemed to want the entire source and build tree of swift<br>&gt;&gt; and LLVM, and I don’t want to package all of that stuff up.<br>&gt; <br>&gt; Are you building a native compiler or a cross-compiler?<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>How to run the tests out-of-tree?</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>May 12, 2016 at 09:00:00pm</p></header><div class="content"><p>On Thu, May 12, 2016 at 7:24 PM, Karl Wagner &lt;razielim at gmail.com&gt; wrote:<br>&gt; I’m cross-compiling a native compiler. That is to say, I’m not building a cross-compiler in the way we build for Android or iOS: a native compiler with foreign standard libraries. Both the compiler and stdlib are foreign to the build machine.<br>&gt;<br>&gt; I’d like to produce an installable package (that much is good), and a standalone package of tests. I’ll have a go at it in the next few days, then maybe we can add an installable component to produce a test package. I was pretty disappointed that the  “testsuite-tools” component we have basically links back to the in-tree tests; It’s not really “installable&quot;.<br></p><p>A standalone test package is something we really want, but I suspect<br>it might turn into a non-trivial project.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
