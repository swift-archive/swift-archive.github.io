<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>June 28, 2016 at 11:00:00am</p></header><div class="content"><p>on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Simpler interpretation of a reference to a generic type with no<br>&gt; arguments<br>&gt;<br>&gt; Proposal: SE-9999<br>&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt; Status: Awaiting review<br>&gt; Review manager: TBD<br>&gt;  &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;<br>&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt; when no generic arguments are applied.<br>&gt;<br>&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;  &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;<br>&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt; here are the following:<br>&gt;<br>&gt; If the scope from which the reference is made is nested inside the<br>&gt; definition of the type or an extension thereof, omitting generic<br>&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;<br>&gt; For example,<br>&gt;<br>&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;   let contents: Contents<br>&gt;<br>&gt;   // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;   func clone() -&gt; GenericBox {<br>&gt;     return GenericBox(contents: contents)<br>&gt;   }<br>&gt; }<br>&gt;<br>&gt; extension GenericBox {<br>&gt;   func print() {<br>&gt;     // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;     let cloned: GenericBox = clone()<br>&gt;     print(cloned.contents)<br>&gt;   }<br>&gt; }<br>&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt; the generic parameters.<br>&gt;<br>&gt; For example,<br>&gt;<br>&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;   // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;   return GenericBox(contents: 123)<br>&gt; }<br>&gt; The problem appears when the user expects the second behavior, but<br>&gt; instead encounters the first. For example, the following does not type<br>&gt; check:<br>&gt;<br>&gt; extension GenericBox {<br>&gt;<br>&gt;   func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;     // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;     // inferring the type parameter<br>&gt;     return GenericBox(contents: f(contents))<br>&gt;   }<br>&gt; }<br>&gt;  &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt; solution<br>&gt;<br>&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt; generic parameters cannot be inferred from context, they must be<br>&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br></p><p>SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>including in C++ where (IIUC) it originated.<br></p><p><br>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/e0a5152b275c43b493a94b5a6a868905?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Pyry Jahkola</string> &lt;pyry.jahkola at iki.fi&gt;<p>October 11, 2016 at 11:00:00pm</p></header><div class="content"><p>I was reminded of this proposal which seems like an obvious win in clarity. Still planning to submit it, Slava?<br></p><p>— Pyry<br></p><p>&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt;&gt; arguments<br>&gt;&gt; <br>&gt;&gt; Proposal: SE-9999<br>&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt;&gt; Status: Awaiting review<br>&gt;&gt; Review manager: TBD<br>&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;&gt; <br>&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt;&gt; when no generic arguments are applied.<br>&gt;&gt; <br>&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;&gt; <br>&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt;&gt; here are the following:<br>&gt;&gt; <br>&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;&gt; <br>&gt;&gt; For example,<br>&gt;&gt; <br>&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;&gt;  let contents: Contents<br>&gt;&gt; <br>&gt;&gt;  // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;&gt;  func clone() -&gt; GenericBox {<br>&gt;&gt;    return GenericBox(contents: contents)<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension GenericBox {<br>&gt;&gt;  func print() {<br>&gt;&gt;    // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;&gt;    let cloned: GenericBox = clone()<br>&gt;&gt;    print(cloned.contents)<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt;&gt; the generic parameters.<br>&gt;&gt; <br>&gt;&gt; For example,<br>&gt;&gt; <br>&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;&gt;  // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;&gt;  return GenericBox(contents: 123)<br>&gt;&gt; }<br>&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt;&gt; check:<br>&gt;&gt; <br>&gt;&gt; extension GenericBox {<br>&gt;&gt; <br>&gt;&gt;  func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;&gt;    // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;&gt;    // inferring the type parameter<br>&gt;&gt;    return GenericBox(contents: f(contents))<br>&gt;&gt;  }<br>&gt;&gt; }<br>&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt;&gt; solution<br>&gt;&gt; <br>&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt; <br>&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt; including in C++ where (IIUC) it originated.<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/569ed436467cf145f3bbdd0d53fbe115?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Slava Pestov</string> &lt;spestov at apple.com&gt;<p>October 11, 2016 at 03:00:00pm</p></header><div class="content"><p>I could if there’s interest. Since we intend on maintaining source compatibility, it will not result in a simpler implementation, though, since we’ll need to keep the old code path around for Swift 3 mode. Still worth it?<br></p><p>Slava<br></p><p>&gt; On Oct 11, 2016, at 1:58 PM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; <br>&gt; I was reminded of this proposal which seems like an obvious win in clarity. Still planning to submit it, Slava?<br>&gt; <br>&gt; — Pyry<br>&gt; <br>&gt;&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt;&gt;&gt; arguments<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-9999<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt;&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt;&gt;&gt; Status: Awaiting review<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt;&gt;&gt; when no generic arguments are applied.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt;&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt;&gt;&gt; here are the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt;&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt;&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;&gt;&gt; let contents: Contents<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt; func clone() -&gt; GenericBox {<br>&gt;&gt;&gt;   return GenericBox(contents: contents)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt; func print() {<br>&gt;&gt;&gt;   // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;   let cloned: GenericBox = clone()<br>&gt;&gt;&gt;   print(cloned.contents)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt;&gt;&gt; the generic parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;&gt;&gt; // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;&gt;&gt; return GenericBox(contents: 123)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt;&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt;&gt;&gt; check:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;&gt;&gt;   // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;&gt;&gt;   // inferring the type parameter<br>&gt;&gt;&gt;   return GenericBox(contents: f(contents))<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt;&gt;&gt; solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt;&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt;&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt;&gt; <br>&gt;&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt;&gt; including in C++ where (IIUC) it originated.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October 11, 2016 at 09:00:00pm</p></header><div class="content"><p>+1.  I don&#39;t use this feature at all and (by extension) don&#39;t think there are many situations where it&#39;s useful.<br></p><p>~Robert Widmann<br></p><p>2016/10/11 18:03、Slava Pestov via swift-evolution &lt;swift-evolution at swift.org&gt; のメッセージ:<br></p><p>&gt; I could if there’s interest. Since we intend on maintaining source compatibility, it will not result in a simpler implementation, though, since we’ll need to keep the old code path around for Swift 3 mode. Still worth it?<br>&gt; <br>&gt; Slava<br>&gt; <br>&gt;&gt; On Oct 11, 2016, at 1:58 PM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I was reminded of this proposal which seems like an obvious win in clarity. Still planning to submit it, Slava?<br>&gt;&gt; <br>&gt;&gt; ― Pyry<br>&gt;&gt; <br>&gt;&gt;&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt;&gt;&gt;&gt; arguments<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Proposal: SE-9999<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt;&gt;&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt;&gt;&gt;&gt; Status: Awaiting review<br>&gt;&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt;&gt;&gt;&gt; when no generic arguments are applied.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt;&gt;&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt;&gt;&gt;&gt; here are the following:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt;&gt;&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt;&gt;&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;&gt;&gt;&gt; let contents: Contents<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;&gt; func clone() -&gt; GenericBox {<br>&gt;&gt;&gt;&gt;  return GenericBox(contents: contents)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt;&gt; func print() {<br>&gt;&gt;&gt;&gt;  // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;&gt;  let cloned: GenericBox = clone()<br>&gt;&gt;&gt;&gt;  print(cloned.contents)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt;&gt;&gt;&gt; the generic parameters.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; For example,<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;&gt;&gt;&gt; // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;&gt;&gt;&gt; return GenericBox(contents: 123)<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt;&gt;&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt;&gt;&gt;&gt; check:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;&gt;&gt;&gt;  // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;&gt;&gt;&gt;  // inferring the type parameter<br>&gt;&gt;&gt;&gt;  return GenericBox(contents: f(contents))<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt;&gt;&gt;&gt; solution<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt;&gt;&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt;&gt;&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt;&gt;&gt; including in C++ where (IIUC) it originated.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Dave<br>&gt;&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8083ad16248b8c031cc10d44f47aa442?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>T.J. Usiyan</string> &lt;griotspeak at gmail.com&gt;<p>October 11, 2016 at 09:00:00pm</p></header><div class="content"><p>Painful +1.<br></p><p>I use the first one a whole lot in a project and it is going to get ugly.<br>That said… I can see how it is tricky in a way that doesn&#39;t really pay off<br>for most people. Removing the first feature might even be necessary for<br>what I hope will ease the ugly. I don&#39;t see &quot;Default generic arguments&quot;<br>being easy to reason about alongside the first feature.<br></p><p>TJ<br></p><p>On Tue, Oct 11, 2016 at 9:30 PM, Robert Widmann via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1.  I don&#39;t use this feature at all and (by extension) don&#39;t think there<br>&gt; are many situations where it&#39;s useful.<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt; 2016/10/11 18:03、Slava Pestov via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; のメッセージ:<br>&gt;<br>&gt; &gt; I could if there’s interest. Since we intend on maintaining source<br>&gt; compatibility, it will not result in a simpler implementation, though,<br>&gt; since we’ll need to keep the old code path around for Swift 3 mode. Still<br>&gt; worth it?<br>&gt; &gt;<br>&gt; &gt; Slava<br>&gt; &gt;<br>&gt; &gt;&gt; On Oct 11, 2016, at 1:58 PM, Pyry Jahkola &lt;pyry.jahkola at iki.fi&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I was reminded of this proposal which seems like an obvious win in<br>&gt; clarity. Still planning to submit it, Slava?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; ― Pyry<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt; &gt;&gt;&gt;&gt; arguments<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Proposal: SE-9999<br>&gt; &gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/<br>&gt; proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt; &gt;&gt;&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt; &gt;&gt;&gt;&gt; Status: Awaiting review<br>&gt; &gt;&gt;&gt;&gt; Review manager: TBD<br>&gt; &gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/<br>&gt; proposals#introduction&gt;Introduction<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt; &gt;&gt;&gt;&gt; when no generic arguments are applied.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt; &gt;&gt;&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt; &gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/<br>&gt; proposals#motivation&gt;Motivation<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt; &gt;&gt;&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt; &gt;&gt;&gt;&gt; here are the following:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt; &gt;&gt;&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt; &gt;&gt;&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; For example,<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt; &gt;&gt;&gt;&gt; let contents: Contents<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt; &gt;&gt;&gt;&gt; func clone() -&gt; GenericBox {<br>&gt; &gt;&gt;&gt;&gt;  return GenericBox(contents: contents)<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; extension GenericBox {<br>&gt; &gt;&gt;&gt;&gt; func print() {<br>&gt; &gt;&gt;&gt;&gt;  // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt; &gt;&gt;&gt;&gt;  let cloned: GenericBox = clone()<br>&gt; &gt;&gt;&gt;&gt;  print(cloned.contents)<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt; &gt;&gt;&gt;&gt; the generic parameters.<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; For example,<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt; &gt;&gt;&gt;&gt; // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt; &gt;&gt;&gt;&gt; return GenericBox(contents: 123)<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt; &gt;&gt;&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt; &gt;&gt;&gt;&gt; check:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; extension GenericBox {<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt; &gt;&gt;&gt;&gt;  // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt; &gt;&gt;&gt;&gt;  // inferring the type parameter<br>&gt; &gt;&gt;&gt;&gt;  return GenericBox(contents: f(contents))<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/<br>&gt; proposals#proposed-solution&gt;Proposed<br>&gt; &gt;&gt;&gt;&gt; solution<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt; &gt;&gt;&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt; &gt;&gt;&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt; &gt;&gt;&gt; including in C++ where (IIUC) it originated.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; --<br>&gt; &gt;&gt;&gt; Dave<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161011/b790f56c/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0d4fb9162c777a5d6d0b1fb00893d709?s=50"></div><header><strong>[Pitch] Simpler interpretation of a reference to a generic type with no arguments</strong> from <string>Haravikk</string> &lt;swift-evolution at haravikk.me&gt;<p>October 26, 2016 at 02:00:00pm</p></header><div class="content"><p>I&#39;m a +1 on the basis that I wasn&#39;t even aware of the first case, so have never used it! Although I&#39;ve used clone methods and such in the past, I&#39;ve always done so with the generics specified so never noticed that I could omit them, however I do frequently run into the unexpected case that this proposal seeks to solve.<br></p><p>&gt; On 11 Oct 2016, at 21:58, Pyry Jahkola via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I was reminded of this proposal which seems like an obvious win in clarity. Still planning to submit it, Slava?<br>&gt; <br>&gt; — Pyry<br>&gt; <br>&gt;&gt; On 28 Jun 2016, at 21:13, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; on Thu Jun 23 2016, Slava Pestov &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Simpler interpretation of a reference to a generic type with no<br>&gt;&gt;&gt; arguments<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Proposal: SE-9999<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/blob/silly-proposals/proposals/9999-simplify-unbound-generic-type.md&gt;<br>&gt;&gt;&gt; Author: Slava Pestov &lt;https://github.com/slavapestov&gt;<br>&gt;&gt;&gt; Status: Awaiting review<br>&gt;&gt;&gt; Review manager: TBD<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#introduction&gt;Introduction<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; This proposal cleans up the semantics of a reference to a generic type<br>&gt;&gt;&gt; when no generic arguments are applied.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Swift-evolution thread: Discussion thread topic for that proposal<br>&gt;&gt;&gt; &lt;http://news.gmane.org/gmane.comp.lang.swift.evolution&gt;<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#motivation&gt;Motivation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Right now, we allow a generic type to be referenced with no generic<br>&gt;&gt;&gt; arguments applied in a handful of special cases. The two primary rules<br>&gt;&gt;&gt; here are the following:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; If the scope from which the reference is made is nested inside the<br>&gt;&gt;&gt; definition of the type or an extension thereof, omitting generic<br>&gt;&gt;&gt; arguments just means to implicitly apply the arguments from context.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; struct GenericBox&lt;Contents&gt; {<br>&gt;&gt;&gt; let contents: Contents<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // Equivalent to: func clone() -&gt; GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt; func clone() -&gt; GenericBox {<br>&gt;&gt;&gt;   return GenericBox(contents: contents)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt; func print() {<br>&gt;&gt;&gt;   // Equivalent to: let cloned: GenericBox&lt;Contents&gt;<br>&gt;&gt;&gt;   let cloned: GenericBox = clone()<br>&gt;&gt;&gt;   print(cloned.contents)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; If the type is referenced from an unrelated scope, we attempt to infer<br>&gt;&gt;&gt; the generic parameters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; For example,<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func makeABox() -&gt; GenericBox&lt;Int&gt; {<br>&gt;&gt;&gt; // Equivalent to: GenericBox&lt;Int&gt;(contents: 123)<br>&gt;&gt;&gt; return GenericBox(contents: 123)<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; The problem appears when the user expects the second behavior, but<br>&gt;&gt;&gt; instead encounters the first. For example, the following does not type<br>&gt;&gt;&gt; check:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension GenericBox {<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; func transform&lt;T&gt;(f: Contents -&gt; T) -&gt; GenericBox&lt;T&gt; {<br>&gt;&gt;&gt;   // We resolve &#39;GenericBox&#39; as &#39;GenericBox&lt;Contents&gt;&#39;, rather than<br>&gt;&gt;&gt;   // inferring the type parameter<br>&gt;&gt;&gt;   return GenericBox(contents: f(contents))<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; &lt;https://github.com/slavapestov/swift-evolution/tree/silly-proposals/proposals#proposed-solution&gt;Proposed<br>&gt;&gt;&gt; solution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The proposed solution is to remove the first rule altogether. If the<br>&gt;&gt;&gt; generic parameters cannot be inferred from context, they must be<br>&gt;&gt;&gt; specified explicitly with the usual Type&lt;Args...&gt; syntax.<br>&gt;&gt; <br>&gt;&gt; SGTM.  I&#39;ve always found this shorthand to be somewhat surprising,<br>&gt;&gt; including in C++ where (IIUC) it originated.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Dave<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
