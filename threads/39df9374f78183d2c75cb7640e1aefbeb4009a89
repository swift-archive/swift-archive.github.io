<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 22, 2016 at 11:00:00am</p></header><div class="content"><p>+1, but this proposal need further work.<br>Specification of the new function grammar is needed.<br></p><p>Currently, it looks like:<br></p><p>function-type → type<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br>­throws­opt­-&gt;­type<br>&lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br></p><p>It is already false, because some attributes can only be used in function<br>types.<br></p><p>I suggest to rewrite it to something like:<br></p><p>*function-type* → ( *function-parameter-types*opt ) -&gt; *type*<br></p><p>*function-type* → ( *function-parameter-types*opt ) throws -&gt; *type*<br></p><p>*function-type* → ( *function-parameter-types*opt ) rethrows -&gt; *type*<br></p><p>*function-parameter-types* → *function-parameter-type*<br></p><p>*function-parameter-types* → *function-parameter-type* ,<br>*function-parameter-types*<br></p><p>*function-parameter-type* → *function-parameter-attributes* *type*<br>It will also eliminate situation when you can pass () argument to a () → T<br>function.<br>Function types Void-&gt;T will need to be migrated.<br></p><p>- Anton<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/39df9a89/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 01:00:00pm</p></header><div class="content"><p>IMO +1 for Антон&#39;s suggestion, but<br></p><p>&quot;It will also eliminate situation when you can pass () argument to a () → T<br>function.&quot;<br></p><p>What do you think about the result &quot;type&quot;:<br></p><p>typealias f1 = () -&gt; Void<br>typealias f2 = () -&gt; ((Void))<br>typealias f3 = () -&gt; (())<br>typealias f4 = () -&gt; ((((((()))))))<br></p><p>They are all equal definition now. In your opinion, should we change this <br>also in some way?<br></p><p>On 22.04.2016 11:12, Антон Жилин via swift-evolution wrote:<br>&gt; +1, but this proposal need further work.<br>&gt; Specification of the new function grammar is needed.<br>&gt;<br>&gt; Currently, it looks like:<br>&gt;<br>&gt; function-type → type<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;­|throws­|_opt<br>&gt; ­|-&gt;­|type<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br>&gt;<br>&gt; It is already false, because some attributes can only be used in function<br>&gt; types.<br>&gt;<br>&gt; I suggest to rewrite it to something like:<br>&gt;<br>&gt; /function-type/ → |(| /function-parameter-types/_opt  |)| |-&gt;| /type/<br>&gt;<br>&gt; /function-type/ → |(| /function-parameter-types/_opt  |)| |throws| |-&gt;| /type/<br>&gt;<br>&gt; /function-type/ → |(| /function-parameter-types/_opt<br>&gt;  |)| |rethrows| |-&gt;| /type/<br>&gt;<br>&gt; /function-parameter-types/ → /function-parameter-type/<br>&gt;<br>&gt; /function-parameter-types/ → /function-parameter-type/ |,| /function-parameter-types/<br>&gt;<br>&gt; /function-parameter-type/ → /function-parameter-attributes/ /type/<br>&gt;<br>&gt; It will also eliminate situation when you can pass () argument to a () → T<br>&gt; function.<br>&gt; Function types Void-&gt;T will need to be migrated.<br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 22, 2016 at 08:00:00pm</p></header><div class="content"><p>Vladimir, I agree with Chris Lattner that function parameters are different<br>from function return value in Swift.<br></p><p>Firstly, syntax of function call allows for easy forwarding of values,<br>which came from different places, as parameters to a single function:<br>f(g(foo, 1), h(bar(buz)))<br></p><p>On the other hand, to play with multiple return values as freely, you need<br>to perform pattern matching, which finishes current expression.<br></p><p>Secondly, there is no special sugar for tuples in return values, and<br>function grammar does not need to know about it.<br></p><p>Thirdly, there are no special attributes for elements of tuple in function<br>return type (second implies this).<br></p><p>Now, to  typealias f4 = () -&gt; ((((((()))))))<br>I think it&#39;s OK, but we can remove Void and reduce the number of possible<br>combinations.<br></p><p>The fact that () and (()) are equal types is a general limitation of Swift<br>type system: there are no single-element tuples.<br>But it is so for a reason: parentheses in expressions cannot be overloaded<br>to construct single-element tuples.<br></p><p>- Anton<br></p><p>2016-04-22 11:12 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com&gt;:<br></p><p>&gt; +1, but this proposal need further work.<br>&gt; Specification of the new function grammar is needed.<br>&gt;<br>&gt; Currently, it looks like:<br>&gt;<br>&gt; function-type → type<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br>&gt; ­throws­opt­-&gt;­type<br>&gt; &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br>&gt;<br>&gt; It is already false, because some attributes can only be used in function<br>&gt; types.<br>&gt;<br>&gt; I suggest to rewrite it to something like:<br>&gt;<br>&gt; *function-type* → ( *function-parameter-types*opt ) -&gt; *type*<br>&gt;<br>&gt; *function-type* → ( *function-parameter-types*opt ) throws -&gt; *type*<br>&gt;<br>&gt; *function-type* → ( *function-parameter-types*opt ) rethrows -&gt; *type*<br>&gt;<br>&gt; *function-parameter-types* → *function-parameter-type*<br>&gt;<br>&gt; *function-parameter-types* → *function-parameter-type* ,<br>&gt; *function-parameter-types*<br>&gt;<br>&gt; *function-parameter-type* → *function-parameter-attributes* *type*<br>&gt; It will also eliminate situation when you can pass () argument to a () → T<br>&gt; function.<br>&gt; Function types Void-&gt;T will need to be migrated.<br>&gt;<br>&gt; - Anton<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/6e0a1017/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 09:00:00pm</p></header><div class="content"><p>On 22.04.2016 20:17, Антон Жилин wrote:<br>&gt; Vladimir, I agree with Chris Lattner that function parameters are different<br>&gt; from function return value in Swift.<br>&gt;<br>&gt; Firstly, syntax of function call allows for easy forwarding of values,<br>&gt; which came from different places, as parameters to a single function:<br>&gt; f(g(foo, 1), h(bar(buz)))<br>&gt;<br>&gt; On the other hand, to play with multiple return values as freely, you need<br>&gt; to perform pattern matching, which finishes current expression.<br>&gt;<br>&gt; Secondly, there is no special sugar for tuples in return values, and<br>&gt; function grammar does not need to know about it.<br>&gt;<br>&gt; Thirdly, there are no special attributes for elements of tuple in function<br>&gt; return type (second implies this).<br>&gt;<br></p><p>I see your points regarding the function parameters. And I&#39;m ready to <br>totally agree with you.<br></p><p>&gt; Now, to  typealias f4 = () -&gt; ((((((()))))))<br>&gt; I think it&#39;s OK, but we can remove Void and reduce the number of possible<br>&gt; combinations.<br></p><p>Yes, my question was actually about the result type syntax like (Void) (()) <br>(((()))) etc, if you feel this is OK to have this in Swift.<br>I think the possibility to have (((()))) is weird, not useful, never can be <br>used and just shouldn&#39;t exist in the language. Why not prevent this just by <br>.. compiler/syntax checker/parser..<br>Probably I&#39;m missing somehting.. ?<br></p><p>About the &quot;Void&quot;.. I&#39;m +1 on this idea, but asking myself if we can freely <br>remove &#39;Void&#39; from our language at all without any problem? Can&#39;t find the <br>answer. It seems like we can, IMO using the syntax like () -&gt; () is OK, <br>clear and explicit, especially in &quot;functional&quot; word.<br></p><p>&gt;<br>&gt; The fact that () and (()) are equal types is a general limitation of Swift<br>&gt; type system: there are no single-element tuples.<br>&gt; But it is so for a reason: parentheses in expressions cannot be overloaded<br>&gt; to construct single-element tuples.<br></p><p><br>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; 2016-04-22 11:12 GMT+03:00 Антон Жилин &lt;antonyzhilin at gmail.com<br>&gt; &lt;mailto:antonyzhilin at gmail.com&gt;&gt;:<br>&gt;<br>&gt;     +1, but this proposal need further work.<br>&gt;     Specification of the new function grammar is needed.<br>&gt;<br>&gt;     Currently, it looks like:<br>&gt;<br>&gt;     function-type → type<br>&gt;     &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;­|throws­|_opt<br>&gt;     ­|-&gt;­|type<br>&gt;     &lt;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/swift/grammar/type&gt;<br>&gt;<br>&gt;     It is already false, because some attributes can only be used in<br>&gt;     function types.<br>&gt;<br>&gt;     I suggest to rewrite it to something like:<br>&gt;<br>&gt;     /function-type/ → |(| /function-parameter-types/_opt  |)| |-&gt;| /type/<br>&gt;<br>&gt;     /function-type/ → |(| /function-parameter-types/_opt<br>&gt;      |)| |throws| |-&gt;| /type/<br>&gt;<br>&gt;     /function-type/ → |(| /function-parameter-types/_opt<br>&gt;      |)| |rethrows| |-&gt;| /type/<br>&gt;<br>&gt;     /function-parameter-types/ → /function-parameter-type/<br>&gt;<br>&gt;     /function-parameter-types/ → /function-parameter-type/ |,| /function-parameter-types/<br>&gt;<br>&gt;     /function-parameter-type/ → /function-parameter-attributes/ /type/<br>&gt;<br>&gt;     It will also eliminate situation when you can pass () argument to a ()<br>&gt;     → T function.<br>&gt;     Function types Void-&gt;T will need to be migrated.<br>&gt;<br>&gt;     - Anton<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>April 22, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Apr 22, 2016, at 12:08 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; About the &quot;Void&quot;.. I&#39;m +1 on this idea, but asking myself if we can freely remove &#39;Void&#39; from our language at all without any problem? Can&#39;t find the answer. It seems like we can, IMO using the syntax like () -&gt; () is OK, clear and explicit, especially in &quot;functional&quot; word.<br></p><p>I like having Void as a typealias of (), and would prefer to retain it in the language if possible.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/8eb8072d/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/697f00e1b9be900f24cd1669cc931874?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>L. Mihalkovic</string> &lt;laurent.mihalkovic at gmail.com&gt;<p>April 22, 2016 at 09:00:00pm</p></header><div class="content"><p>Void seems unequivocal, while () seems to beg for a context to be fully understood<br></p><p>Regards<br></p><p>&gt; On Apr 22, 2016, at 8:28 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 22, 2016, at 12:08 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; About the &quot;Void&quot;.. I&#39;m +1 on this idea, but asking myself if we can freely remove &#39;Void&#39; from our language at all without any problem? Can&#39;t find the answer. It seems like we can, IMO using the syntax like () -&gt; () is OK, clear and explicit, especially in &quot;functional&quot; word.<br>&gt; <br>&gt; I like having Void as a typealias of (), and would prefer to retain it in the language if possible.<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160422/c85c5c73/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 22, 2016 at 11:00:00pm</p></header><div class="content"><p>On 22.04.2016 22:27, L. Mihalkovic wrote:<br>&gt; Void seems unequivocal, while () seems to beg for a context to be fully<br>&gt; understood<br></p><p>Personally I don&#39;t insist to remove the Void, but actually I&#39;d prefer to <br>choose some only one variant how we can express an emtpy result. IMO there <br>is something wrong for me if we have<br>func f1() -&gt; () {...}<br>func f2() -&gt; () {...}<br>in one source file and have<br>func fM() -&gt; Void {..}<br>func fN() -&gt; Void {..}<br>in another. Additionally this will cause questions of those who&#39;s new in <br>Swift. But OK. Not a huge problem.<br></p><p>What I really don&#39;t like is that we can have all this:<br>func f1() -&gt; (Void) {..}<br>func f2(Void) -&gt; ((Void)) {..}<br>func f3() -&gt; (((()))) {..}<br>func f4(((Void))) -&gt; (Void) {..}<br>func f5() -&gt; ((Void)) {..}<br>func f6((())) -&gt; (((()))) {..}<br>and all is equivalent for<br>func f() -&gt; () {..}<br></p><p>Why(what for) this all is possible? I&#39;d like to remove this weird &quot;feature&quot; <br>from Swift. Lets say compilation error if we have () in () or Void in (). <br>Opinions?<br></p><p>&gt;<br>&gt; Regards<br>&gt;<br>&gt; On Apr 22, 2016, at 8:28 PM, Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;<br>&gt;&gt;<br>&gt;&gt;&gt; On Apr 22, 2016, at 12:08 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; About the &quot;Void&quot;.. I&#39;m +1 on this idea, but asking myself if we can<br>&gt;&gt;&gt; freely remove &#39;Void&#39; from our language at all without any problem? Can&#39;t<br>&gt;&gt;&gt; find the answer. It seems like we can, IMO using the syntax like () -&gt;<br>&gt;&gt;&gt; () is OK, clear and explicit, especially in &quot;functional&quot; word.<br>&gt;&gt;<br>&gt;&gt; I like having Void as a typealias of (), and would prefer to retain it in<br>&gt;&gt; the language if possible.<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>April 23, 2016 at 12:00:00am</p></header><div class="content"><p>We can disallow putting types in parentheses in single-element tuple<br>meaning.<br>For example, (Int) -&gt; (Double) will be illegal because of (Double).<br>(Int) -&gt; (Double) -&gt; Bool will be legal, because parentheses mean function<br>type here.<br>(Int) -&gt; () will be legal, because () means Void here.<br>This can be theme of a separate proposal.<br></p><p>- Anton<br></p><p>On 22.04.16, Vladimir.S wrote:<br></p><p>What I really don&#39;t like is that we can have all this:<br>func f1() -&gt; (Void) {..}<br>func f2(Void) -&gt; ((Void)) {..}<br>func f3() -&gt; (((()))) {..}<br>func f4(((Void))) -&gt; (Void) {..}<br>func f5() -&gt; ((Void)) {..}<br>func f6((())) -&gt; (((()))) {..}<br>and all is equivalent for<br>func f() -&gt; () {..}<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160423/ebef951a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 23, 2016 at 01:00:00am</p></header><div class="content"><p>On 23.04.2016 0:52, Антон Жилин wrote:<br>&gt; We can disallow putting types in parentheses in single-element tuple meaning.<br>&gt; For example, (Int) -&gt; (Double) will be illegal because of (Double).<br>&gt; (Int) -&gt; (Double) -&gt; Bool will be legal, because parentheses mean function<br>&gt; type here.<br>&gt; (Int) -&gt; () will be legal, because () means Void here.<br>&gt; This can be theme of a separate proposal.<br></p><p>Just to clarify the proposal:<br></p><p>1. Disallow putting types in parentheses in single-element tuple meaning<br>wrong : (Int) -&gt; (Double)<br>correct: (Int) -&gt; Double<br>wrong: (Int) -&gt; (Double) -&gt; (Bool)<br>correct: (Int) -&gt; (Double) -&gt; Bool<br>* this rule also affects Void:<br>wrong: (Int) -&gt; (Void)<br>correct: (Int) -&gt; Void<br>wrong: (Int) -&gt; (Double) -&gt; (Void)<br>correct: (Int) -&gt; (Double) -&gt; Void<br>but correct: (Int) -&gt; (Void) -&gt; Void<br></p><p>2. Where it is allowed to have (Void) as parameters declaration, disallow <br>putting (Void) in parentheses<br>wrong: (Int) -&gt; ((Void)) -&gt; Int<br>correct: (Int) -&gt; (Void) -&gt; Int<br></p><p>3. Disallow putting empty tuple () in parentheses<br>wrong: ((())) -&gt; Int<br>correct: () -&gt; Int<br>wrong: () -&gt; ((()))<br>correct: () -&gt; ()<br></p><p>Correct?<br></p><p>&gt;<br>&gt; - Anton<br>&gt;<br>&gt; On 22.04.16, Vladimir.S wrote:<br>&gt;<br>&gt; What I really don&#39;t like is that we can have all this:<br>&gt; func f1() -&gt; (Void) {..}<br>&gt; func f2(Void) -&gt; ((Void)) {..}<br>&gt; func f3() -&gt; (((()))) {..}<br>&gt; func f4(((Void))) -&gt; (Void) {..}<br>&gt; func f5() -&gt; ((Void)) {..}<br>&gt; func f6((())) -&gt; (((()))) {..}<br>&gt; and all is equivalent for<br>&gt; func f() -&gt; () {..}<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/7411024ff3fb3fdbb0624c41b72a1b92?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Alan Skipp</string> &lt;al_skipp at icloud.com&gt;<p>April 22, 2016 at 11:00:00pm</p></header><div class="content"><p>&gt; On 22 Apr 2016, at 23:43, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; 3. Disallow putting empty tuple () in parentheses<br></p><p>The thing is, Void is a typealias for ()<br></p><p>Therefore the impermissible:<br>(()) -&gt; ()<br></p><p>Is identical to:<br>(Void) -&gt; ()<br></p><p>So to follow these rules, it must instead be:<br>Void -&gt; ()<br></p><p>… and we’re back to T1 -&gt; T2  <br></p><p>: )<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[pitch] Eliminate the &quot;T1 -&gt; T2&quot; syntax, require &quot;(T1) -&gt; T2&quot;</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>April 23, 2016 at 02:00:00am</p></header><div class="content"><p>Yes, I believe we all know that Void actually is () and yes, there probably <br>some difficulties in implementation of the rules.<br></p><p>The main question right now, as I see it, if we (most of us) agree with <br>these rules in general. And then, we can think/ask if such rules could be <br>implemented by core team in compiller/parser/etc<br></p><p>Personally I think we need to have just () or just Void, but I feel like <br>most of us does not support this idea.<br></p><p>On 23.04.2016 1:58, Alan Skipp wrote:<br>&gt;&gt; On 22 Apr 2016, at 23:43, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; 3. Disallow putting empty tuple () in parentheses<br>&gt;<br>&gt; The thing is, Void is a typealias for ()<br>&gt;<br>&gt; Therefore the impermissible:<br>&gt; (()) -&gt; ()<br>&gt;<br>&gt; Is identical to:<br>&gt; (Void) -&gt; ()<br>&gt;<br>&gt; So to follow these rules, it must instead be:<br>&gt; Void -&gt; ()<br>&gt;<br>&gt; … and we’re back to T1 -&gt; T2<br>&gt;<br>&gt; : )<br>&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
