<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/9f396bf037f14ac5839cb718f14e2e3d?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Kyle Bashour</string> &lt;kylebshr at gmail.com&gt;<p>December  8, 2015 at 02:00:00pm</p></header><div class="content"><p>Based on much of the discussion regarding removing C-style for-loops, I&#39;d<br>like to propose a discussion on revamping how range works in Swift. The<br>lack of a reverse range operator and the fact and the range operator and<br>stride() seem to do a lot of the same work have made me wonder why there<br>isn&#39;t merely a range() function, as in Python.<br></p><p>I believe this would be easier for newcomers to learn, remove the need for<br>stride() (though there are probably use cases for stride() I don&#39;t know<br>about, I haven&#39;t used it too much), and actually be more clear than ..&lt; and<br>...<br></p><p><br>Here are some examples of how it could work:<br></p><p>range(10) // equivalent to 0..&lt;10<br>range(-1, to: 10) // equivalent to -1..&lt;10<br>range(10, through: 0) equivalent to (0...10).reverse()<br>range(0, through: 10, by: 2) // equivalent to 0.stride(through: 10, by: 2)<br></p><p>Or, to avoid a global function, .range() should probably be a function like<br>stride, but with more features (equivalent to above)<br></p><p>10.range()<br>-1.range(to: 10)<br>10.range(through: 0)<br>0.range(through: 10, by: 2)<br></p><p>Would love thoughts on why this is good or bad, and if it&#39;s worth creating<br>an actual proposal.<br></p><p>Regards,<br></p><p>Kyle<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/537893cb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>December  8, 2015 at 11:00:00am</p></header><div class="content"><p>... and ..&lt; aren&#39;t privileged by the language in any way; they&#39;re equivalent to calling Range(start: x, end: y). It would be nice to add more convenience initializers to Range, but I don&#39;t want to see the operators go, and I don&#39;t think a free function is the best interface.<br></p><p>Austin<br></p><p>&gt; On Dec 8, 2015, at 11:01 AM, Kyle Bashour via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Based on much of the discussion regarding removing C-style for-loops, I&#39;d like to propose a discussion on revamping how range works in Swift. The lack of a reverse range operator and the fact and the range operator and stride() seem to do a lot of the same work have made me wonder why there isn&#39;t merely a range() function, as in Python. <br>&gt; <br>&gt; I believe this would be easier for newcomers to learn, remove the need for stride() (though there are probably use cases for stride() I don&#39;t know about, I haven&#39;t used it too much), and actually be more clear than ..&lt; and ...<br>&gt; <br>&gt; <br>&gt; Here are some examples of how it could work:<br>&gt; <br>&gt; range(10) // equivalent to 0..&lt;10<br>&gt; range(-1, to: 10) // equivalent to -1..&lt;10<br>&gt; range(10, through: 0) equivalent to (0...10).reverse()<br>&gt; range(0, through: 10, by: 2) // equivalent to 0.stride(through: 10, by: 2)<br>&gt; <br>&gt; Or, to avoid a global function, .range() should probably be a function like stride, but with more features (equivalent to above)<br>&gt; <br>&gt; 10.range()<br>&gt; -1.range(to: 10)<br>&gt; 10.range(through: 0)<br>&gt; 0.range(through: 10, by: 2)<br>&gt; <br>&gt; Would love thoughts on why this is good or bad, and if it&#39;s worth creating an actual proposal. <br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Kyle<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/9c8eb1c8/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5228ad4a1fad94f1a7d3d05b0c0ff6a?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Donnacha Oisín Kidney</string> &lt;oisin.kidney at gmail.com&gt;<p>December  8, 2015 at 09:00:00pm</p></header><div class="content"><p>Personally, I think that the range operator is easier to understand than a free range function. People who already program might find it easier to understand a free function rather than ..&lt;, which looks like special syntax, but I think beginners (especially in Python, actually) are really floored by range functions. Take, for example:<br></p><p>range(5)<br></p><p>To someone unfamiliar with the function, it could (quite reasonably) mean:<br></p><p>1, 2, 3, 4, 5<br>0, 1, 2, 3, 4, 5<br>0, 1, 2, 3, 4<br>None of the above<br></p><p>In fact, for people unfamiliar with programming, I’d say that the correct answer is the least obvious. Compare that to:<br></p><p>0..&lt;5<br></p><p>or:<br></p><p>0...4<br></p><p>I think the operator is much easier to understand, and more than makes up for the disadvantages associated with extra operators.<br></p><p>That said, I do think that Strideable is a little unclear. I can’t think of a much better option, though. Maybe something like:<br></p><p>extension Range where Element: Strideable {<br>  public func by(n: Element.Stride) -&gt; StrideTo&lt;Element&gt; {<br>    return startIndex.stride(to: endIndex, by: n)<br>  }<br>}<br>(0..&lt;10).by(2) // [0, 2, 4, 6, 8]<br></p><p>But I’d also want that to work as a subscript. <br></p><p>&gt; On 8 Dec 2015, at 19:01, Kyle Bashour via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Based on much of the discussion regarding removing C-style for-loops, I&#39;d like to propose a discussion on revamping how range works in Swift. The lack of a reverse range operator and the fact and the range operator and stride() seem to do a lot of the same work have made me wonder why there isn&#39;t merely a range() function, as in Python. <br>&gt; <br>&gt; I believe this would be easier for newcomers to learn, remove the need for stride() (though there are probably use cases for stride() I don&#39;t know about, I haven&#39;t used it too much), and actually be more clear than ..&lt; and ...<br>&gt; <br>&gt; <br>&gt; Here are some examples of how it could work:<br>&gt; <br>&gt; range(10) // equivalent to 0..&lt;10<br>&gt; range(-1, to: 10) // equivalent to -1..&lt;10<br>&gt; range(10, through: 0) equivalent to (0...10).reverse()<br>&gt; range(0, through: 10, by: 2) // equivalent to 0.stride(through: 10, by: 2)<br>&gt; <br>&gt; Or, to avoid a global function, .range() should probably be a function like stride, but with more features (equivalent to above)<br>&gt; <br>&gt; 10.range()<br>&gt; -1.range(to: 10)<br>&gt; 10.range(through: 0)<br>&gt; 0.range(through: 10, by: 2)<br>&gt; <br>&gt; Would love thoughts on why this is good or bad, and if it&#39;s worth creating an actual proposal. <br>&gt; <br>&gt; Regards,<br>&gt; <br>&gt; Kyle<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/860d705e/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 02:00:00pm</p></header><div class="content"><p>&gt; Based on much of the discussion regarding removing C-style for-loops, I&#39;d like to propose a discussion on revamping how range works in Swift. The lack of a reverse range operator and the fact and the range operator and stride() seem to do a lot of the same work have made me wonder why there isn&#39;t merely a range() function, as in Python. <br></p><p>I think the … and ..&lt; operators are a great, concise way to specify the bounds of an operation.<br></p><p>However, that doesn’t mean this couldn’t use some work. Suppose we removed the Range-producing … and ..&lt; operators, so that instead they always produce an IntervalType. Then we rename and rejigger Stride to work with intervals (remember, Strideable implies Comparable, and Comparable implies compatibility with IntervalType):<br></p><p>	struct Series&lt;Bounds: IntervalType where Bounds.Bound: Strideable&gt;: SequenceType {<br>		init(_ bounds: Bounds, by: Bounds.Bound.Stride) {<br>			…<br>		}<br></p><p>		…<br>	}<br>	extension Series where Bounds.Bound: DefaultStrideable {<br>		init(_ bounds: Bounds) {<br>			self.init(bounds, by: Bounds.Bound.defaultStride)<br>		}<br>	}<br>	protocol DefaultStrideable: Strideable {<br>		static var defaultStride: Self { get }<br>	}<br></p><p>The Strideable and new DefaultStrideable protocols would have to be renamed, of course; this is just a sketch.<br></p><p>Now your ordinary for loop looks like:<br></p><p>	for i in Series(1..&lt;10) {<br>		...<br>	}<br></p><p>And it’s easy to reverse it:<br></p><p>	for i in Series(1..&lt;10).reverse() {<br>		…<br>	}<br></p><p>I’m not totally convinced this is a good idea—it makes the common count-up-by-one case more difficult—but if you’re going to redesign things, I think this is a better way to do it.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 14:27, Brent Royal-Gordon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; Based on much of the discussion regarding removing C-style for-loops, I&#39;d like to propose a discussion on revamping how range works in Swift. The lack of a reverse range operator and the fact and the range operator and stride() seem to do a lot of the same work have made me wonder why there isn&#39;t merely a range() function, as in Python. <br>&gt; <br>&gt; I think the … and ..&lt; operators are a great, concise way to specify the bounds of an operation.<br>&gt; <br>&gt; However, that doesn’t mean this couldn’t use some work. Suppose we removed the Range-producing … and ..&lt; operators, so that instead they always produce an IntervalType. Then we rename and rejigger Stride to work with intervals (remember, Strideable implies Comparable, and Comparable implies compatibility with IntervalType):<br>&gt; <br>&gt; 	struct Series&lt;Bounds: IntervalType where Bounds.Bound: Strideable&gt;: SequenceType {<br>&gt; 		init(_ bounds: Bounds, by: Bounds.Bound.Stride) {<br>&gt; 			…<br>&gt; 		}<br>&gt; <br>&gt; 		…<br>&gt; 	}<br>&gt; 	extension Series where Bounds.Bound: DefaultStrideable {<br>&gt; 		init(_ bounds: Bounds) {<br>&gt; 			self.init(bounds, by: Bounds.Bound.defaultStride)<br>&gt; 		}<br>&gt; 	}<br>&gt; 	protocol DefaultStrideable: Strideable {<br>&gt; 		static var defaultStride: Self { get }<br>&gt; 	}<br>&gt; <br>&gt; The Strideable and new DefaultStrideable protocols would have to be renamed, of course; this is just a sketch.<br>&gt; <br>&gt; Now your ordinary for loop looks like:<br>&gt; <br>&gt; 	for i in Series(1..&lt;10) {<br>&gt; 		...<br>&gt; 	}<br>&gt; <br>&gt; And it’s easy to reverse it:<br>&gt; <br>&gt; 	for i in Series(1..&lt;10).reverse() {<br>&gt; 		…<br>&gt; 	}<br>&gt; <br>&gt; I’m not totally convinced this is a good idea—it makes the common count-up-by-one case more difficult—but if you’re going to redesign things, I think this is a better way to do it.<br></p><p>Don&#39;t forget that most Ranges are on collection indexes, not strideable types, and Int is used as a collection index.<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; Don&#39;t forget that most Ranges are on collection indexes, not strideable types, and Int is used as a collection index.<br></p><p>In this design, I think Range&lt;Index&gt; is replaced by Interval: IntervalType where Interval.Bound == Index.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt; On Dec 8, 2015, at 16:58, Brent Royal-Gordon &lt;brent at architechies.com&gt; wrote:<br>&gt; <br>&gt;&gt; Don&#39;t forget that most Ranges are on collection indexes, not strideable types, and Int is used as a collection index.<br>&gt; <br>&gt; In this design, I think Range&lt;Index&gt; is replaced by Interval: IntervalType where Interval.Bound == Index.<br></p><p>Not all Index types are Comparable (just like not all Comparable or Strideable types are ForwardIndex types).<br></p><p>Jordan<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Discussion: Move range (..., ..&lt;) to a range() function</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 05:00:00pm</p></header><div class="content"><p>&gt;&gt; In this design, I think Range&lt;Index&gt; is replaced by Interval: IntervalType where Interval.Bound == Index.<br>&gt; <br>&gt; Not all Index types are Comparable (just like not all Comparable or Strideable types are ForwardIndex types).<br></p><p>You’re right. Hmm, that is a pickle.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
