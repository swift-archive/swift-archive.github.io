<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8aa3a9da9a32d3e98805b4a5409e4cee?s=50"></div><header><strong>[Discussion] Zero-element tuple glitch</strong> from <string>Anton Zhilin</string> &lt;antonyzhilin at gmail.com&gt;<p>July  3, 2016 at 09:00:00pm</p></header><div class="content"><p>Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br></p><p>&gt; On 03.07.2016 23:53, Anton Zhilin via swift-evolution wrote:<br>&gt; &gt; let x = (Int, Int)(1, 2)  //=&gt; (1, 2)<br>&gt; &gt; let y = (Int)(1)          //=&gt; 1<br>&gt; &gt; let z = ()()              // error :(<br>&gt; &gt;<br>&gt; &gt; Am I requesting too much from type checker?<br>&gt; <br>&gt; As I understand, because () is Void, you can&#39;t have anything additional <br>for <br>&gt; it. It is just Void, like you write &#39;let z = Void Void&#39;. I.e. only &#39;let <br>z = <br>&gt; ()&#39; allowed.<br></p><p>In the example, that&#39;s how I expect that to parse:<br></p><p>let z = ().init()  // just demo, does not compile<br></p><p>I mean, first () is type, and second () is its initializer.<br></p><p>By the way, this is one thing that Void can do, but () cannot.<br>Are there any others?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Discussion] Zero-element tuple glitch</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July  4, 2016 at 01:00:00am</p></header><div class="content"><p>On 04.07.2016 0:47, Anton Zhilin via swift-evolution wrote:<br>&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;<br>&gt;&gt; On 03.07.2016 23:53, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt;&gt; let x = (Int, Int)(1, 2)  //=&gt; (1, 2)<br>&gt;&gt;&gt; let y = (Int)(1)          //=&gt; 1<br>&gt;&gt;&gt; let z = ()()              // error :(<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Am I requesting too much from type checker?<br>&gt;&gt;<br>&gt;&gt; As I understand, because () is Void, you can&#39;t have anything additional<br>&gt; for<br>&gt;&gt; it. It is just Void, like you write &#39;let z = Void Void&#39;. I.e. only &#39;let<br>&gt; z =<br>&gt;&gt; ()&#39; allowed.<br>&gt;<br>&gt; In the example, that&#39;s how I expect that to parse:<br>&gt;<br>&gt; let z = ().init()  // just demo, does not compile<br>&gt;<br>&gt; I mean, first () is type, and second () is its initializer.<br>&gt;<br>&gt; By the way, this is one thing that Void can do, but () cannot.<br>&gt; Are there any others?<br>&gt;<br></p><p>I believe in this case () is playing a role of instance of type Void, i.e. <br>empty tuple. I don&#39;t think you can expect ().init()<br></p><p>Also:<br>func f(_ x: ())-&gt;() {}<br>f(())<br>//f(Void) // argument passed to call that takes no arguments<br></p><p>And just some fun:<br></p><p>let x1 : Void<br>//let x2 : Void = Void // cannot convert value of type &#39;Void.Type&#39; (aka <br>&#39;().Type&#39;) to specified type &#39;Void&#39; (aka &#39;()&#39;)<br>let x3 : ()<br>let x4 : () = ()<br>let x5 : Void = ()<br>//let x4 : () = Void  // cannot convert value of type &#39;Void.Type&#39; (aka <br>&#39;().Type&#39;) to specified type &#39;()&#39;<br></p><p>print(().dynamicType) // ()<br>print(().self) // ()<br>// print(&quot;Void.dynamicType = &quot;, Void.dynamicType) // &#39;.dynamicType&#39; is not <br>allowed after a type name<br>print(Void.self) // ()<br>print(().dynamicType == Void.self) // true<br></p><p><br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Discussion] Zero-element tuple glitch</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  3, 2016 at 03:00:00pm</p></header><div class="content"><p>Void is just a typealias for (). () is the only type in Swift whose type and only instance are spelled the same way, as far as I can tell. This isn&#39;t true for Void, since Void is only a type, not the value.<br></p><p>As for the zero-argument/one-argument problem...how often does realistic code need to pass in a zero-argument function to a function type that takes one argument? If the answer is &quot;often&quot;, we should consider what it would take to define an implicit conversion. Otherwise, maybe we can get away with a standard library adapter that can be used to wrap a () -&gt; T as a U -&gt; T (where U = () or something).<br></p><p>Austin<br></p><p><br>&gt; On Jul 3, 2016, at 3:35 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; On 04.07.2016 0:47, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;&gt; <br>&gt;&gt;&gt; On 03.07.2016 23:53, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt;&gt;&gt; let x = (Int, Int)(1, 2)  //=&gt; (1, 2)<br>&gt;&gt;&gt;&gt; let y = (Int)(1)          //=&gt; 1<br>&gt;&gt;&gt;&gt; let z = ()()              // error :(<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Am I requesting too much from type checker?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I understand, because () is Void, you can&#39;t have anything additional<br>&gt;&gt; for<br>&gt;&gt;&gt; it. It is just Void, like you write &#39;let z = Void Void&#39;. I.e. only &#39;let<br>&gt;&gt; z =<br>&gt;&gt;&gt; ()&#39; allowed.<br>&gt;&gt; <br>&gt;&gt; In the example, that&#39;s how I expect that to parse:<br>&gt;&gt; <br>&gt;&gt; let z = ().init()  // just demo, does not compile<br>&gt;&gt; <br>&gt;&gt; I mean, first () is type, and second () is its initializer.<br>&gt;&gt; <br>&gt;&gt; By the way, this is one thing that Void can do, but () cannot.<br>&gt;&gt; Are there any others?<br>&gt;&gt; <br>&gt; <br>&gt; I believe in this case () is playing a role of instance of type Void, i.e. empty tuple. I don&#39;t think you can expect ().init()<br>&gt; <br>&gt; Also:<br>&gt; func f(_ x: ())-&gt;() {}<br>&gt; f(())<br>&gt; //f(Void) // argument passed to call that takes no arguments<br>&gt; <br>&gt; And just some fun:<br>&gt; <br>&gt; let x1 : Void<br>&gt; //let x2 : Void = Void // cannot convert value of type &#39;Void.Type&#39; (aka &#39;().Type&#39;) to specified type &#39;Void&#39; (aka &#39;()&#39;)<br>&gt; let x3 : ()<br>&gt; let x4 : () = ()<br>&gt; let x5 : Void = ()<br>&gt; //let x4 : () = Void  // cannot convert value of type &#39;Void.Type&#39; (aka &#39;().Type&#39;) to specified type &#39;()&#39;<br>&gt; <br>&gt; print(().dynamicType) // ()<br>&gt; print(().self) // ()<br>&gt; // print(&quot;Void.dynamicType = &quot;, Void.dynamicType) // &#39;.dynamicType&#39; is not allowed after a type name<br>&gt; print(Void.self) // ()<br>&gt; print(().dynamicType == Void.self) // true<br>&gt; <br>&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Discussion] Zero-element tuple glitch</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July  3, 2016 at 10:00:00pm</p></header><div class="content"><p>Why can&#39;t () as an argument list be regarded as the same as (()) just like<br>no return type is regarded as the same as `-&gt; ()`?<br>On Sun, Jul 3, 2016 at 17:41 Austin Zheng via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Void is just a typealias for (). () is the only type in Swift whose type<br>&gt; and only instance are spelled the same way, as far as I can tell. This<br>&gt; isn&#39;t true for Void, since Void is only a type, not the value.<br>&gt;<br>&gt; As for the zero-argument/one-argument problem...how often does realistic<br>&gt; code need to pass in a zero-argument function to a function type that takes<br>&gt; one argument? If the answer is &quot;often&quot;, we should consider what it would<br>&gt; take to define an implicit conversion. Otherwise, maybe we can get away<br>&gt; with a standard library adapter that can be used to wrap a () -&gt; T as a U<br>&gt; -&gt; T (where U = () or something).<br>&gt;<br>&gt; Austin<br>&gt;<br>&gt;<br>&gt; &gt; On Jul 3, 2016, at 3:35 PM, Vladimir.S via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; On 04.07.2016 0:47, Anton Zhilin via swift-evolution wrote:<br>&gt; &gt;&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; On 03.07.2016 23:53, Anton Zhilin via swift-evolution wrote:<br>&gt; &gt;&gt;&gt;&gt; let x = (Int, Int)(1, 2)  //=&gt; (1, 2)<br>&gt; &gt;&gt;&gt;&gt; let y = (Int)(1)          //=&gt; 1<br>&gt; &gt;&gt;&gt;&gt; let z = ()()              // error :(<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Am I requesting too much from type checker?<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt; As I understand, because () is Void, you can&#39;t have anything additional<br>&gt; &gt;&gt; for<br>&gt; &gt;&gt;&gt; it. It is just Void, like you write &#39;let z = Void Void&#39;. I.e. only &#39;let<br>&gt; &gt;&gt; z =<br>&gt; &gt;&gt;&gt; ()&#39; allowed.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; In the example, that&#39;s how I expect that to parse:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; let z = ().init()  // just demo, does not compile<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I mean, first () is type, and second () is its initializer.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; By the way, this is one thing that Void can do, but () cannot.<br>&gt; &gt;&gt; Are there any others?<br>&gt; &gt;&gt;<br>&gt; &gt;<br>&gt; &gt; I believe in this case () is playing a role of instance of type Void,<br>&gt; i.e. empty tuple. I don&#39;t think you can expect ().init()<br>&gt; &gt;<br>&gt; &gt; Also:<br>&gt; &gt; func f(_ x: ())-&gt;() {}<br>&gt; &gt; f(())<br>&gt; &gt; //f(Void) // argument passed to call that takes no arguments<br>&gt; &gt;<br>&gt; &gt; And just some fun:<br>&gt; &gt;<br>&gt; &gt; let x1 : Void<br>&gt; &gt; //let x2 : Void = Void // cannot convert value of type &#39;Void.Type&#39; (aka<br>&gt; &#39;().Type&#39;) to specified type &#39;Void&#39; (aka &#39;()&#39;)<br>&gt; &gt; let x3 : ()<br>&gt; &gt; let x4 : () = ()<br>&gt; &gt; let x5 : Void = ()<br>&gt; &gt; //let x4 : () = Void  // cannot convert value of type &#39;Void.Type&#39; (aka<br>&gt; &#39;().Type&#39;) to specified type &#39;()&#39;<br>&gt; &gt;<br>&gt; &gt; print(().dynamicType) // ()<br>&gt; &gt; print(().self) // ()<br>&gt; &gt; // print(&quot;Void.dynamicType = &quot;, Void.dynamicType) // &#39;.dynamicType&#39; is<br>&gt; not allowed after a type name<br>&gt; &gt; print(Void.self) // ()<br>&gt; &gt; print(().dynamicType == Void.self) // true<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/7908c260/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Discussion] Zero-element tuple glitch</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>July  3, 2016 at 03:00:00pm</p></header><div class="content"><p>I considered that (and I think it&#39;s a fine overall solution), but it just<br>feels weird to me to change the arity of a function like that implicitly.<br>(I consider that a separate case from the return value, since every<br>function returns exactly one thing and many, many things in Swift would<br>break if functions didn&#39;t return Void instead of nothing at all.)<br></p><p>This isn&#39;t a strong objection from me; I would just prefer to see if there<br>are any solutions that work just as well and don&#39;t require a special case.<br>In particular, I&#39;m curious about whether () -&gt; U to T -&gt; U implicit<br>conversion really is a good idea; if a parameter of function type is<br>generic on an input value I would assume it&#39;s almost certainly because it<br>intends to pass in some meaningful value into that function value. Would a<br>no-magic wrapper (like the SinkType of old) be convenient enough to do the<br>trick?<br></p><p>Austin<br></p><p>On Sun, Jul 3, 2016 at 3:44 PM, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br></p><p>&gt; Why can&#39;t () as an argument list be regarded as the same as (()) just like<br>&gt; no return type is regarded as the same as `-&gt; ()`?<br>&gt;<br>&gt; On Sun, Jul 3, 2016 at 17:41 Austin Zheng via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; Void is just a typealias for (). () is the only type in Swift whose type<br>&gt;&gt; and only instance are spelled the same way, as far as I can tell. This<br>&gt;&gt; isn&#39;t true for Void, since Void is only a type, not the value.<br>&gt;&gt;<br>&gt;&gt; As for the zero-argument/one-argument problem...how often does realistic<br>&gt;&gt; code need to pass in a zero-argument function to a function type that takes<br>&gt;&gt; one argument? If the answer is &quot;often&quot;, we should consider what it would<br>&gt;&gt; take to define an implicit conversion. Otherwise, maybe we can get away<br>&gt;&gt; with a standard library adapter that can be used to wrap a () -&gt; T as a U<br>&gt;&gt; -&gt; T (where U = () or something).<br>&gt;&gt;<br>&gt;&gt; Austin<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 3, 2016, at 3:35 PM, Vladimir.S via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On 04.07.2016 0:47, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt; &gt;&gt; Vladimir.S via swift-evolution &lt;swift-evolution at ...&gt; writes:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; On 03.07.2016 23:53, Anton Zhilin via swift-evolution wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt; let x = (Int, Int)(1, 2)  //=&gt; (1, 2)<br>&gt;&gt; &gt;&gt;&gt;&gt; let y = (Int)(1)          //=&gt; 1<br>&gt;&gt; &gt;&gt;&gt;&gt; let z = ()()              // error :(<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Am I requesting too much from type checker?<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; As I understand, because () is Void, you can&#39;t have anything<br>&gt;&gt; additional<br>&gt;&gt; &gt;&gt; for<br>&gt;&gt; &gt;&gt;&gt; it. It is just Void, like you write &#39;let z = Void Void&#39;. I.e. only<br>&gt;&gt; &#39;let<br>&gt;&gt; &gt;&gt; z =<br>&gt;&gt; &gt;&gt;&gt; ()&#39; allowed.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; In the example, that&#39;s how I expect that to parse:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; let z = ().init()  // just demo, does not compile<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I mean, first () is type, and second () is its initializer.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; By the way, this is one thing that Void can do, but () cannot.<br>&gt;&gt; &gt;&gt; Are there any others?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I believe in this case () is playing a role of instance of type Void,<br>&gt;&gt; i.e. empty tuple. I don&#39;t think you can expect ().init()<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Also:<br>&gt;&gt; &gt; func f(_ x: ())-&gt;() {}<br>&gt;&gt; &gt; f(())<br>&gt;&gt; &gt; //f(Void) // argument passed to call that takes no arguments<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; And just some fun:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; let x1 : Void<br>&gt;&gt; &gt; //let x2 : Void = Void // cannot convert value of type &#39;Void.Type&#39; (aka<br>&gt;&gt; &#39;().Type&#39;) to specified type &#39;Void&#39; (aka &#39;()&#39;)<br>&gt;&gt; &gt; let x3 : ()<br>&gt;&gt; &gt; let x4 : () = ()<br>&gt;&gt; &gt; let x5 : Void = ()<br>&gt;&gt; &gt; //let x4 : () = Void  // cannot convert value of type &#39;Void.Type&#39; (aka<br>&gt;&gt; &#39;().Type&#39;) to specified type &#39;()&#39;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; print(().dynamicType) // ()<br>&gt;&gt; &gt; print(().self) // ()<br>&gt;&gt; &gt; // print(&quot;Void.dynamicType = &quot;, Void.dynamicType) // &#39;.dynamicType&#39; is<br>&gt;&gt; not allowed after a type name<br>&gt;&gt; &gt; print(Void.self) // ()<br>&gt;&gt; &gt; print(().dynamicType == Void.self) // true<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt; swift-evolution at swift.org<br>&gt;&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160703/e538f0ec/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
