<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Validating ABI consistency between runtime C++ and standard library Swift code</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>October 16, 2016 at 01:00:00pm</p></header><div class="content"><p>on Tue Oct 11 2016, Joe Groff &lt;swift-dev-AT-swift.org&gt; wrote:<br></p><p>&gt; I just tracked down a bug due to C++ code in the Swift runtime code<br>&gt; trying to interface with standard library code written in Swift, but<br>&gt; getting the ABI slightly wrong and leading to some nasty<br>&gt; hard-to-reproduce heisenbugs. While I&#39;ve narrowed down the bug in this<br>&gt; specific case, it seems like this is a potentially continuing source<br>&gt; of maintenance bugs, especially as we try to bring up the Swift<br>&gt; calling convention in the coming year. I&#39;m wondering if there&#39;s<br>&gt; anything we could do to help validate that C++ and Swift code in the<br>&gt; runtime is correctly interfacing. We could at least check that we&#39;re<br>&gt; passing the right number of arguments by comparing the LLVM IR of the<br>&gt; runtime and stdlib, perhaps, though this would have to be a fuzzy<br>&gt; type-level match since Clang and Swift aren&#39;t normally going to agree<br>&gt; on the exact pointer types of arguments.<br></p><p>I don&#39;t know if this helps, but I think in the long run we&#39;d like to<br>code more of the runtime directly in Swift, for optimization purposes if<br>nothing else.  It won&#39;t make the problem go away completely, of course.<br></p><p>-- <br>-Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
