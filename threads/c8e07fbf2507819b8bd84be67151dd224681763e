<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  4, 2016 at 12:00:00am</p></header><div class="content"><p>I’ve been contemplating this idea for a while now, mostly because I think it’s a very important feature, but also because I can’t find a single example of a programming language getting it completely right.  In Swift, the motif of tuples throughout the language would lead one to think that they have some kind of special status in the language.  Yet, tuples are an opaque concept exposed by the compiler to the end user with no opportunity for extension.  Languages that have tried to expose tuples to their users for extension have done so in less than ideal ways (see Tuple1-Tuple22 Scala &lt;https://github.com/scala/scala/blob/2.12.x/src/library/scala/Tuple22.scala&gt;, Haskell &lt;https://github.com/ghc/ghc/blob/master/libraries/ghc-prim/GHC/Tuple.hs&gt;’s hard limit on tuples, Rust &lt;https://doc.rust-lang.org/std/primitive.tuple.html&gt;’s limitations for std::tuple), yet each implementation has something to offer a possible Swift implementation.  I see only one course of action that will bring us extensible tuples in a manner that is compatible with Swift and its overall design philosophy.  To that end, I have drawn up a draft proposal &lt;https://gist.github.com/CodaFi/18b70633b03e19161402ae3579c072b7&gt; for generic tuple extensions that I will submit to swift-evolution shortly.<br></p><p>All the best,<br></p><p>~Robert Widmann<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/c8e0763e/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/c8e0763e/attachment.sig&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  4, 2016 at 12:00:00am</p></header><div class="content"><p>The proposal draft on Github &lt;https://github.com/apple/swift-evolution/pull/290&gt; is now live.<br></p><p>&gt; On May 4, 2016, at 12:13 AM, Developer &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; I’ve been contemplating this idea for a while now, mostly because I think it’s a very important feature, but also because I can’t find a single example of a programming language getting it completely right.  In Swift, the motif of tuples throughout the language would lead one to think that they have some kind of special status in the language.  Yet, tuples are an opaque concept exposed by the compiler to the end user with no opportunity for extension.  Languages that have tried to expose tuples to their users for extension have done so in less than ideal ways (see Tuple1-Tuple22 Scala &lt;https://github.com/scala/scala/blob/2.12.x/src/library/scala/Tuple22.scala&gt;, Haskell &lt;https://github.com/ghc/ghc/blob/master/libraries/ghc-prim/GHC/Tuple.hs&gt;’s hard limit on tuples, Rust &lt;https://doc.rust-lang.org/std/primitive.tuple.html&gt;’s limitations for std::tuple), yet each implementation has something to offer a possible Swift implementation.  I see only one course of action that will bring us extensible tuples in a manner that is compatible with Swift and its overall design philosophy.  To that end, I have drawn up a draft proposal &lt;https://gist.github.com/CodaFi/18b70633b03e19161402ae3579c072b7&gt; for generic tuple extensions that I will submit to swift-evolution shortly.<br>&gt; <br>&gt; All the best,<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/498cf1a4/attachment.html&gt;<br>-------------- next part --------------<br>A non-text attachment was scrubbed...<br>Name: signature.asc<br>Type: application/pgp-signature<br>Size: 801 bytes<br>Desc: Message signed with OpenPGP using GPGMail<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160504/498cf1a4/attachment.sig&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 9:13 PM, Developer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I’ve been contemplating this idea for a while now, mostly because I think it’s a very important feature, but also because I can’t find a single example of a programming language getting it completely right.  In Swift, the motif of tuples throughout the language would lead one to think that they have some kind of special status in the language.  Yet, tuples are an opaque concept exposed by the compiler to the end user with no opportunity for extension.  Languages that have tried to expose tuples to their users for extension have done so in less than ideal ways (see Tuple1-Tuple22 Scala, Haskell’s hard limit on tuples, Rust’s limitations for std::tuple), yet each implementation has something to offer a possible Swift implementation.  I see only one course of action that will bring us extensible tuples in a manner that is compatible with Swift and its overall design philosophy.  To that end, I have drawn up a draft proposal for generic tuple extensions that I will submit to swift-evolution shortly.  <br></p><p>Tuples are a special case of a more general shortcoming, which is that you can&#39;t extend *any* of the builtin structural types, not only tuples but metatypes, function types, and existentials. I don&#39;t see any reason to address this for tuples only. In the particular case of tuples, I think you really want variadic generic parameters too, to be able to extend them to arbitrary arities without having to waste space generating boilerplate for a bunch of fixed arities. Both structural type extensions and variadic generics are covered in Doug&#39;s omnibus generics roadmap: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>+1 to the interaction between variadic generics and extension of tuple<br>types. But this is a proposal I hope to see accepted and implemented at<br>some point.<br></p><p>Is there an official formatted version of the manifesto? I put together a<br>gist with markdown formatting but would much rather direct people to an<br>official copy if one exists. (<br>https://gist.github.com/austinzheng/7cd427dd1a87efb1d94481015e5b3828)<br></p><p>Austin<br></p><p>On Tue, May 3, 2016 at 9:47 PM, Joe Groff via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt;<br>&gt; &gt; On May 3, 2016, at 9:13 PM, Developer via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I’ve been contemplating this idea for a while now, mostly because I<br>&gt; think it’s a very important feature, but also because I can’t find a single<br>&gt; example of a programming language getting it completely right.  In Swift,<br>&gt; the motif of tuples throughout the language would lead one to think that<br>&gt; they have some kind of special status in the language.  Yet, tuples are an<br>&gt; opaque concept exposed by the compiler to the end user with no opportunity<br>&gt; for extension.  Languages that have tried to expose tuples to their users<br>&gt; for extension have done so in less than ideal ways (see Tuple1-Tuple22<br>&gt; Scala, Haskell’s hard limit on tuples, Rust’s limitations for std::tuple),<br>&gt; yet each implementation has something to offer a possible Swift<br>&gt; implementation.  I see only one course of action that will bring us<br>&gt; extensible tuples in a manner that is compatible with Swift and its overall<br>&gt; design philosophy.  To that end, I have drawn up a draft proposal for<br>&gt; generic tuple extensions that I will submit to swift-evolution shortly.<br>&gt;<br>&gt; Tuples are a special case of a more general shortcoming, which is that you<br>&gt; can&#39;t extend *any* of the builtin structural types, not only tuples but<br>&gt; metatypes, function types, and existentials. I don&#39;t see any reason to<br>&gt; address this for tuples only. In the particular case of tuples, I think you<br>&gt; really want variadic generic parameters too, to be able to extend them to<br>&gt; arbitrary arities without having to waste space generating boilerplate for<br>&gt; a bunch of fixed arities. Both structural type extensions and variadic<br>&gt; generics are covered in Doug&#39;s omnibus generics roadmap:<br>&gt; https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html<br>&gt;<br>&gt; -Joe<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/8eaa8f5f/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  3, 2016 at 10:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 9:50 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to the interaction between variadic generics and extension of tuple types. But this is a proposal I hope to see accepted and implemented at some point.<br>&gt; <br>&gt; Is there an official formatted version of the manifesto? I put together a gist with markdown formatting but would much rather direct people to an official copy if one exists. (https://gist.github.com/austinzheng/7cd427dd1a87efb1d94481015e5b3828 &lt;https://gist.github.com/austinzheng/7cd427dd1a87efb1d94481015e5b3828&gt;)<br></p><p>It would be great for someone to convert it into a markdown file in swift/docs.<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160503/bd30fba1/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  4, 2016 at 12:00:00am</p></header><div class="content"><p>Trouble is that I don&#39;t want variadic generics without corresponding support from the type system which is untenable without HKTs (see last paragraph of proposal).  C++&#39;s variadic implementation of std::tuple is not elegant to my mind, and would have no place in a library I could think of writing.<br></p><p>~Robert Widmann<br></p><p>2016/05/04 0:47、Joe Groff &lt;jgroff at apple.com&gt; のメッセージ:<br></p><p>&gt; <br>&gt;&gt; On May 3, 2016, at 9:13 PM, Developer via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’ve been contemplating this idea for a while now, mostly because I think it’s a very important feature, but also because I can’t find a single example of a programming language getting it completely right.  In Swift, the motif of tuples throughout the language would lead one to think that they have some kind of special status in the language.  Yet, tuples are an opaque concept exposed by the compiler to the end user with no opportunity for extension.  Languages that have tried to expose tuples to their users for extension have done so in less than ideal ways (see Tuple1-Tuple22 Scala, Haskell’s hard limit on tuples, Rust’s limitations for std::tuple), yet each implementation has something to offer a possible Swift implementation.  I see only one course of action that will bring us extensible tuples in a manner that is compatible with Swift and its overall design philosophy.  To that end, I have drawn up a draft proposal for generic tuple extensions that I will submit to swift-evolution shortly.  <br>&gt; <br>&gt; Tuples are a special case of a more general shortcoming, which is that you can&#39;t extend *any* of the builtin structural types, not only tuples but metatypes, function types, and existentials. I don&#39;t see any reason to address this for tuples only. In the particular case of tuples, I think you really want variadic generic parameters too, to be able to extend them to arbitrary arities without having to waste space generating boilerplate for a bunch of fixed arities. Both structural type extensions and variadic generics are covered in Doug&#39;s omnibus generics roadmap: https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html<br>&gt; <br>&gt; -Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  3, 2016 at 09:00:00pm</p></header><div class="content"><p>&gt; On May 3, 2016, at 9:52 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Trouble is that I don&#39;t want variadic generics without corresponding support from the type system which is untenable without HKTs (see last paragraph of proposal).  C++&#39;s variadic implementation of std::tuple is not elegant to my mind, and would have no place in a library I could think of writing.<br></p><p>I think we&#39;d keep tuples as a builtin type. Variadics would just let you implement Equatable/Hashable/etc. once for all tuple arities. I don&#39;t see why we&#39;d need HKTs for that.<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>May  4, 2016 at 01:00:00am</p></header><div class="content"><p>Once-and-for-all implementations come in many flavors.  For now, we have clear interest in making a limited subset of possible tuples properly Comparable.  This will also make it easier to implement extensions to specific arities now and serve as a base for variadic generics if that is the path we take.  I could certainly see Future Swift™ allowing this to sit side-by-side with the finite version in this proposal, couldn&#39;t you?<br></p><p>extension (T...) : Equatable where T.Element : Equatable { }<br></p><p>func == &lt;T : Equatable&gt;(l : (T...), r : (T...)) -&gt; Bool { /* .. */ }<br></p><p>~Robert Widmann<br></p><p>2016/05/04 0:54、Joe Groff &lt;jgroff at apple.com&gt; のメッセージ:<br></p><p>&gt; <br>&gt;&gt; On May 3, 2016, at 9:52 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Trouble is that I don&#39;t want variadic generics without corresponding support from the type system which is untenable without HKTs (see last paragraph of proposal).  C++&#39;s variadic implementation of std::tuple is not elegant to my mind, and would have no place in a library I could think of writing.<br>&gt; <br>&gt; I think we&#39;d keep tuples as a builtin type. Variadics would just let you implement Equatable/Hashable/etc. once for all tuple arities. I don&#39;t see why we&#39;d need HKTs for that.<br>&gt; <br>&gt; -Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Proposal] Tuple Extensions</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>May  4, 2016 at 08:00:00am</p></header><div class="content"><p>&gt; On May 3, 2016, at 10:06 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; Once-and-for-all implementations come in many flavors.  For now, we have clear interest in making a limited subset of possible tuples properly Comparable.  This will also make it easier to implement extensions to specific arities now and serve as a base for variadic generics if that is the path we take.  I could certainly see Future Swift™ allowing this to sit side-by-side with the finite version in this proposal, couldn&#39;t you?<br>&gt; <br>&gt; extension (T...) : Equatable where T.Element : Equatable { }<br>&gt; <br>&gt; func == &lt;T : Equatable&gt;(l : (T...), r : (T...)) -&gt; Bool { /* .. */ }<br></p><p>One problem with introducing variadics later would be that, if we ship the specific-arity conformances in an ABI-stable standard library, we&#39;re stuck carrying those extensions around forever for backward compatibility.<br></p><p>-Joe<br></p><p>&gt; ~Robert Widmann<br>&gt; <br>&gt; 2016/05/04 0:54、Joe Groff &lt;jgroff at apple.com&gt; のメッセージ:<br>&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On May 3, 2016, at 9:52 PM, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Trouble is that I don&#39;t want variadic generics without corresponding support from the type system which is untenable without HKTs (see last paragraph of proposal).  C++&#39;s variadic implementation of std::tuple is not elegant to my mind, and would have no place in a library I could think of writing.<br>&gt;&gt; <br>&gt;&gt; I think we&#39;d keep tuples as a builtin type. Variadics would just let you implement Equatable/Hashable/etc. once for all tuple arities. I don&#39;t see why we&#39;d need HKTs for that.<br>&gt;&gt; <br>&gt;&gt; -Joe<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
