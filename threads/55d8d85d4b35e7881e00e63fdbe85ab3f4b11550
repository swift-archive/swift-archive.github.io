<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  9, 2016 at 12:00:00am</p></header><div class="content"><p>I’m not sure I follow, how would the two be different?<br></p><p>&gt; There might be value in entertaining the idea of unifying constructs such that they all allow arbitrary combinations of for/while/where/etc.<br>&gt; <br>&gt; Such as:<br>&gt; <br>&gt; while !stopped for unit in workToDo where unit.passesTest(condition) { unit.process() }<br>&gt; <br>&gt; Which would mean something different than:<br>&gt; <br>&gt; for unit in workToDo while !stopped where unit.passesTest(condition) { unit.process() }<br>&gt; <br>&gt; And yes, they are very similar visually but differ subtly in meaning, but the same can be said about different sentences in english that might all share the same words and differ only by their order. It’s not exactly a foreign concept! I don’t know of any languages that are quite so expressive as that might be. Are there advantages to something more outlandish like this? I don’t know. I’m not proposing it directly, just thinking out loud, I guess.<br>&gt; <br>&gt; l8r<br>&gt; Sean<br>&gt; <br>&gt; <br>&gt; &gt; On Jun 8, 2016, at 4:44 PM, Haravikk via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; &gt; On 8 Jun 2016, at 17:11, Xiaodi Wu&lt;xiaodi.wu at gmail.com&gt;wrote:<br>&gt; &gt; &gt; &gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk&lt;swift-evolution at haravikk.me&gt;wrote:<br>&gt; &gt; &gt; &gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt; &gt; &gt; <br>&gt; &gt; &gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br>&gt; &gt; <br>&gt; &gt; I’m not proposing that every single loop have all of its conditions crushed onto one line, just like I wasn’t when discussing where on the condition clause thread. The usefulness of where and the proposed while is in the common, simple cases, for example:<br>&gt; &gt; <br>&gt; &gt; for eachValue in theValues while eachValue&lt;100 where eachValue % 2 == 0 { … }<br>&gt; &gt; <br>&gt; &gt; The alternatives would be:<br>&gt; &gt; <br>&gt; &gt; for eachValue in theValues {<br>&gt; &gt; guard eachValue&lt;100 else { break }<br>&gt; &gt; guard eachValue % 2 == 0 else { continue }<br>&gt; &gt; …<br>&gt; &gt; }<br>&gt; &gt; for eachValue in theValues.prefix(while: { $0&lt;100 }).filter({ $0 % 2 == 0 }) { … } // Could also be on multiple lines<br>&gt; &gt; <br>&gt; &gt; The former wastes vertical space for what it does IMO; it’s fine if the conditions were more complicated, but since they’re not where/while is ideal. The second isn’t terrible, but it’s a pretty noisy way to handle common loop conditions.<br>&gt; &gt; <br>&gt; &gt; The use of where/while isn’t about eliminating either of these alternatives, they’re absolutely useful in cases where their drawbacks become advantages. For example the inline guards are great when the conditions are more complex, and necessary if you want to do more than the simple cases allow. The second form is best when you need more than the two methods, alternate methods, or you have predicates you can pass in directly, although personally when I do this I tend to do the chinning on its own lines outside of the loop, leaving me with a loop of: for eachValue in theFilteredValues { … } or whatever.<br>&gt; &gt; <br>&gt; &gt; &gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later”.<br>&gt; &gt; <br>&gt; &gt; Not my point at all; my point was about the shorthand for closures not closure as a whole, you can’t learn the closure shorthands without first learning what a closure is. In exactly the same way where/while are just be shorthands for inline if/guard, you don’t need to learn about these clauses to make a functioning loop if you know how to do it with your if/guard statements. In fact it’s better to learn it in this order as once you know what each clause is a shorthand form of (if/guard continue or break) then you know exactly what it does already.<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; Ignoring for a moment that you’re opposed to the where clause in general, what would your thoughts be on only permitting one of where/while in a for? i.e- you would be able to do only one of:<br>&gt; &gt; <br>&gt; &gt; for eachValue in theValues where eachValue % 2 == 0 { … }<br>&gt; &gt; for eachValue in theValues while eachValue&lt;100 { … }<br>&gt; &gt; <br>&gt; &gt; But not have both a where and a while on the same line. This eliminates the question mark around the order they are applied in, while still giving us the ability to essentially switch the behaviour of the where from continue to break. I’m not decided whether I want both in a single statement or if I just want to be able to choose between them. It also limits how much goes on one line as you have to use an inline condition to achieve both for a single loop.<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b3592d65fd9318ba2f2b70379835526b?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Sean Heber</string> &lt;sean at fifthace.com&gt;<p>June  8, 2016 at 11:00:00pm</p></header><div class="content"><p>They would differ in, what at least to me, seems pretty logical ways:<br></p><p>&gt;&gt; while !stopped for unit in workToDo where unit.passesTest(condition) { unit.process() }<br></p><p>Would be:<br></p><p>while !stopped {<br>  for unit in workToDo where unit.passesTest(condition) {<br>    unit.process()<br>  }<br>}<br></p><p><br>&gt;&gt; for unit in workToDo while !stopped where unit.passesTest(condition) { unit.process() }<br></p><p><br>Would be:<br></p><p>for unit in workToDo {<br>  guard !stopped else { break }<br>  If unit.passesTest(condition) { unit.process() }<br>}<br></p><p>This would likely read even better if &quot;where&quot; was woven into the for:<br></p><p>for unit where unit.passesTest(condition) in workToDo while !stopped { unit.process() }<br></p><p>Or possibly reformatted to something like:<br></p><p>for unit<br>  where unit.passesTest(condition)<br>  in workToDo<br>  while !stopped<br>{ unit.process() }<br></p><p>l8r<br>Sean<br></p><p>Sent from my iPad<br></p><p>&gt; On Jun 8, 2016, at 5:42 PM, Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br>&gt; <br>&gt; I’m not sure I follow, how would the two be different?<br>&gt; <br>&gt;&gt; There might be value in entertaining the idea of unifying constructs such that they all allow arbitrary combinations of for/while/where/etc.<br>&gt;&gt; <br>&gt;&gt; Such as:<br>&gt;&gt; <br>&gt;&gt; while !stopped for unit in workToDo where unit.passesTest(condition) { unit.process() }<br>&gt;&gt; <br>&gt;&gt; Which would mean something different than:<br>&gt;&gt; <br>&gt;&gt; for unit in workToDo while !stopped where unit.passesTest(condition) { unit.process() }<br>&gt;&gt; <br>&gt;&gt; And yes, they are very similar visually but differ subtly in meaning, but the same can be said about different sentences in english that might all share the same words and differ only by their order. It’s not exactly a foreign concept! I don’t know of any languages that are quite so expressive as that might be. Are there advantages to something more outlandish like this? I don’t know. I’m not proposing it directly, just thinking out loud, I guess.<br>&gt;&gt; <br>&gt;&gt; l8r<br>&gt;&gt; Sean<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 8, 2016, at 4:44 PM, Haravikk via swift-evolution&lt;swift-evolution at swift.org&gt;wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 8 Jun 2016, at 17:11, Xiaodi Wu&lt;xiaodi.wu at gmail.com&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; On Wed, Jun 8, 2016 at 3:38 AM, Haravikk&lt;swift-evolution at haravikk.me&gt;wrote:<br>&gt;&gt;&gt;&gt;&gt; Yes this could be handled by an if/guard statement with continue, and while as proposed here could be done with the same plus a break, but these things come up so often that it just makes a lot of sense to get it all neatly onto one line.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As I pointed out above with Tim&#39;s example, putting it all on one line is absolutely not &#39;neat&#39;--it reads like spaghetti. That is one major beef I have with this proposal: that it *encourages* writing on one line too many things that, whether you use `where` or not, are much more clearly written on multiple lines. If writing everything on one line is for you the major advantage of this proposal, we could agree on everything else and I would be very much opposed to this proposal on that basis alone.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’m not proposing that every single loop have all of its conditions crushed onto one line, just like I wasn’t when discussing where on the condition clause thread. The usefulness of where and the proposed while is in the common, simple cases, for example:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for eachValue in theValues while eachValue&lt;100 where eachValue % 2 == 0 { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The alternatives would be:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for eachValue in theValues {<br>&gt;&gt;&gt; guard eachValue&lt;100 else { break }<br>&gt;&gt;&gt; guard eachValue % 2 == 0 else { continue }<br>&gt;&gt;&gt; …<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; for eachValue in theValues.prefix(while: { $0&lt;100 }).filter({ $0 % 2 == 0 }) { … } // Could also be on multiple lines<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The former wastes vertical space for what it does IMO; it’s fine if the conditions were more complicated, but since they’re not where/while is ideal. The second isn’t terrible, but it’s a pretty noisy way to handle common loop conditions.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The use of where/while isn’t about eliminating either of these alternatives, they’re absolutely useful in cases where their drawbacks become advantages. For example the inline guards are great when the conditions are more complex, and necessary if you want to do more than the simple cases allow. The second form is best when you need more than the two methods, alternate methods, or you have predicates you can pass in directly, although personally when I do this I tend to do the chinning on its own lines outside of the loop, leaving me with a loop of: for eachValue in theFilteredValues { … } or whatever.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Closures are--I&#39;m sure you&#39;d agree--a far more advanced concept than loops. Concepts like closing over a variable are very, very hard. Many useful things can be written without using closures. Not so many things could do without loops. It very much matters that a learner might feel that he or she cannot understand everything about a loop with the handwavy explanation that it&#39;ll &quot;come later”.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Not my point at all; my point was about the shorthand for closures not closure as a whole, you can’t learn the closure shorthands without first learning what a closure is. In exactly the same way where/while are just be shorthands for inline if/guard, you don’t need to learn about these clauses to make a functioning loop if you know how to do it with your if/guard statements. In fact it’s better to learn it in this order as once you know what each clause is a shorthand form of (if/guard continue or break) then you know exactly what it does already.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Ignoring for a moment that you’re opposed to the where clause in general, what would your thoughts be on only permitting one of where/while in a for? i.e- you would be able to do only one of:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; for eachValue in theValues where eachValue % 2 == 0 { … }<br>&gt;&gt;&gt; for eachValue in theValues while eachValue&lt;100 { … }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But not have both a where and a while on the same line. This eliminates the question mark around the order they are applied in, while still giving us the ability to essentially switch the behaviour of the where from continue to break. I’m not decided whether I want both in a single statement or if I just want to be able to choose between them. It also limits how much goes on one line as you have to use an inline condition to achieve both for a single loop.<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160608/6a1cd84f/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
