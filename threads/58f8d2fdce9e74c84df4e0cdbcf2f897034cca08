<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 04:00:00pm</p></header><div class="content"><p>I remember that this was discussed, but can&#39;t find any decision regarding <br>this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source <br>breaking change, separate class inheritance and protocol conformance in syntax?<br></p><p>Sorry if there was a decision about this suggestions. Please let know in <br>this case.<br></p><p>I.e. when I see the following I can&#39;t understand if the class inherits from <br>base class and conforms to protocols or just conforms to two protocols:<br></p><p>class MyClass : First, Second, Third {<br>}<br></p><p>We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, <br>or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to <br>improve the clarity of code we should separate in syntax inheritance and <br>conformance.<br></p><p>As I understand we should discuss changes in these areas:<br></p><p>1. class inheritance :<br>class Child: BaseClass<br></p><p>2. class conformance :<br>class Child: SomeProtocol1, SomeProtocol2<br></p><p>3. class inheritance + conformance :<br>class Child: BaseClass, SomeProtocol1, SomeProtocol2<br></p><p>4. protocol conformance for structs:<br>struct Struct: SomeProtocol1, SomeProtocol2<br></p><p>5. protocol inheritance:<br>protocol Child: BaseProtocol1, BaseProtocol2<br></p><p><br>My suggestions:<br></p><p>I) separate inheritance with double colon :<br></p><p>1. class inheritance :<br>class Child:: BaseClass<br></p><p>2. class conformance :<br>class Child: SomeProtocol1, SomeProtocol2<br></p><p>3. class inheritance + conformance :<br>class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br></p><p>4. protocol conformance for structs:<br>struct Struct: SomeProtocol1, SomeProtocol2<br></p><p>5. protocol inheritance:<br>protocol Child:: BaseProtocol1, BaseProtocol2<br></p><p><br>II) in class definition use parenthesis to separate inheritance and <br>conformance :<br></p><p>1. class inheritance :<br>class Child: BaseClass<br></p><p>2. class conformance :<br>class Child: (SomeProtocol1, SomeProtocol2)<br></p><p>3. class inheritance + conformance :<br>class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br></p><p>4. protocol conformance for structs:<br>struct Struct: SomeProtocol1, SomeProtocol2<br>or<br>struct Struct: (SomeProtocol1, SomeProtocol2)<br>should be discussed<br></p><p>5. protocol inheritance:<br>protocol Child: BaseProtocol1, BaseProtocol2<br></p><p><br>III) special word like &#39;conforms&#39;<br></p><p>1. class inheritance :<br>class Child: BaseClass<br></p><p>2. class conformance :<br>class Child: conforms SomeProtocol1, SomeProtocol2<br>or<br>class Child conforms SomeProtocol1, SomeProtocol2<br></p><p>3. class inheritance + conformance :<br>class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br></p><p>4. protocol conformance for structs:<br>struct Struct: conforms SomeProtocol1, SomeProtocol2<br>or<br>struct Struct conforms SomeProtocol1, SomeProtocol2<br></p><p>5. protocol inheritance:<br>protocol Child: BaseProtocol1, BaseProtocol2<br></p><p><br>Thoughts?<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>July 22, 2016 at 02:00:00pm</p></header><div class="content"><p>I think we&#39;re making incremental progress here. The idea of declaring a<br>property which inherited from a given class and conformed to given<br>protocols has definitely been discussed, but hasn&#39;t been reviewed (I don&#39;t<br>know offhand whether it&#39;s scheduled or even formally written up). The idea<br>of writing this for the declaration of the type itself might be new, I&#39;m<br>not sure.<br></p><p>I think SE-0095 - declaring multiple protocol conformances with &#39;&amp;&#39; - was<br>part of that progression, which might address some of your pitch, e.g. this<br>example could be a bit clearer:<br>class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>would now be<br>class Child: BaseClass, SomeProtocol1 &amp; SomeProtocol2<br></p><p>Is some of this waiting on a fully thought out syntax for types including<br>existentials?<br></p><p><br>On Fri, Jul 22, 2016 at 2:14 PM, Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt; breaking change, separate class inheritance and protocol conformance in<br>&gt; syntax?<br>&gt;<br>&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt; this case.<br>&gt;<br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt; from base class and conforms to protocols or just conforms to two protocols:<br>&gt;<br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt;<br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I<br>&gt; believe to improve the clarity of code we should separate in syntax<br>&gt; inheritance and conformance.<br>&gt;<br>&gt; As I understand we should discuss changes in these areas:<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; My suggestions:<br>&gt;<br>&gt; I) separate inheritance with double colon :<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; conformance :<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; III) special word like &#39;conforms&#39;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/c37339d2/attachment-0001.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/90677221288dba8210194347b162bda8?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Ian Partridge</string> &lt;ian at poncho.org.uk&gt;<p>July 22, 2016 at 02:00:00pm</p></header><div class="content"><p>Now that SE-0095 is accepted, I think it would be a good idea to use<br>the infix &amp; operator for specifying protocol conformance as well.<br></p><p>1. class inheritance :<br>class Child: BaseClass<br></p><p>2. class conformance :<br>class Child: SomeProtocol1 &amp; SomeProtocol2<br></p><p>3. class inheritance + conformance :<br>class Child: BaseClass, SomeProtocol1 &amp; SomeProtocol2<br></p><p>4. protocol conformance for structs:<br>struct Struct: SomeProtocol1 &amp; SomeProtocol2<br></p><p>5. protocol inheritance:<br>protocol Child: BaseProtocol1 &amp; BaseProtocol2<br></p><p>Thanks,<br>Ian<br></p><p>On 22 July 2016 at 14:14, Vladimir.S via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt; breaking change, separate class inheritance and protocol conformance in<br>&gt; syntax?<br>&gt;<br>&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt; this case.<br>&gt;<br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;<br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt;<br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt; conformance.<br>&gt;<br>&gt; As I understand we should discuss changes in these areas:<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; My suggestions:<br>&gt;<br>&gt; I) separate inheritance with double colon :<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; conformance :<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; III) special word like &#39;conforms&#39;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br></p><p>-- <br>Ian Partridge<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 04:00:00pm</p></header><div class="content"><p>Yes, this could be a solution, but what about just one protocol conformance?<br></p><p>class Child: SomeProtocol<br>class Child: BaseClass<br></p><p>IMO we still need to separate the definition<br></p><p>.. or<br></p><p>class Child: &amp;SomeProtocol<br></p><p>but I don&#39;t believe such could be accepted/allowed.<br></p><p>And, after all, this still changes the syntaxt, so we need to decide if <br>this change should be done in Swift 3.0, or after, or never..<br></p><p><br>On 22.07.2016 16:41, Ian Partridge wrote:<br>&gt; Now that SE-0095 is accepted, I think it would be a good idea to use<br>&gt; the infix &amp; operator for specifying protocol conformance as well.<br>&gt;<br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt;<br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1 &amp; SomeProtocol2<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1 &amp; SomeProtocol2<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1 &amp; SomeProtocol2<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1 &amp; BaseProtocol2<br>&gt;<br>&gt; Thanks,<br>&gt; Ian<br>&gt;<br>&gt; On 22 July 2016 at 14:14, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt;&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt; breaking change, separate class inheritance and protocol conformance in<br>&gt;&gt; syntax?<br>&gt;&gt;<br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt; this case.<br>&gt;&gt;<br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt;&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;<br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt;&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt; conformance.<br>&gt;&gt;<br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; My suggestions:<br>&gt;&gt;<br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; conformance :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 22, 2016 at 03:00:00pm</p></header><div class="content"><p>I agree that this is an issue. Mostly nowadays when more and more classes in Swift do not have a superclass - it simply looks weird:<br></p><p>class MyClass: DataSource<br></p><p>One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc. Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC did it (which isn&#39;t possible with the generics now - is it?), but what about something like this?<br></p><p>class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>extension MyClass [OtherProtocol]<br></p><p><br>&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt; <br>&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt; <br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt; <br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt; <br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt; <br>&gt; As I understand we should discuss changes in these areas:<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; My suggestions:<br>&gt; <br>&gt; I) separate inheritance with double colon :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; III) special word like &#39;conforms&#39;<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 22, 2016 at 10:00:00am</p></header><div class="content"><p>Honest question: what is actually confusing about the current behavior?<br></p><p>I.E. What is important about knowing whether &quot;DataSource&quot; is a class or a protocol?<br></p><p>I thought the blurred distinction was intentional?<br></p><p>Brandon <br></p><p>&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that this is an issue. Mostly nowadays when more and more classes in Swift do not have a superclass - it simply looks weird:<br>&gt; <br>&gt; class MyClass: DataSource<br>&gt; <br>&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc. Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC did it (which isn&#39;t possible with the generics now - is it?), but what about something like this?<br>&gt; <br>&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; extension MyClass [OtherProtocol]<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt; <br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt; <br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; <br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt; <br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; My suggestions:<br>&gt;&gt; <br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>July 22, 2016 at 04:00:00pm</p></header><div class="content"><p>Coming to someone elses code, it adds an extra effort to understand the declaration. Putting inheritance and conformance separately makes the declaration easier to read. At least for me.<br></p><p>&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt; <br>&gt; Honest question: what is actually confusing about the current behavior?<br>&gt; <br>&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class or a protocol?<br>&gt; <br>&gt; I thought the blurred distinction was intentional?<br>&gt; <br>&gt; Brandon <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt; <br>&gt;&gt; class MyClass: DataSource<br>&gt;&gt; <br>&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc. Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC did it (which isn&#39;t possible with the generics now - is it?), but what about something like this?<br>&gt;&gt; <br>&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 22, 2016 at 10:00:00am</p></header><div class="content"><p>I understand. <br></p><p>But why would you need to know if it&#39;s a class or a protocol to use the type? What understanding comes from knowing this information?<br></p><p>I am honestly trying to understand the problem here and it feels like I&#39;m overlooking something.<br></p><p>Brandon <br></p><p>&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;charlie at charliemonroe.net&gt; wrote:<br>&gt; <br>&gt; Coming to someone elses code, it adds an extra effort to understand the declaration. Putting inheritance and conformance separately makes the declaration easier to read. At least for me.<br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Honest question: what is actually confusing about the current behavior?<br>&gt;&gt; <br>&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class or a protocol?<br>&gt;&gt; <br>&gt;&gt; I thought the blurred distinction was intentional?<br>&gt;&gt; <br>&gt;&gt; Brandon <br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class MyClass: DataSource<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc. Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC did it (which isn&#39;t possible with the generics now - is it?), but what about something like this?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/b56bd8a9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>I don&#39;t understand the question, really. I need to know because I need to <br>know :-)<br>I.e. I see new code, I&#39;m trying to understand the structure of the class, <br>its dependency, if all the base code of this class is inside this class or <br>there is some &#39;base&#39; code that is overriden, etc.. Class and Protocol two <br>different entities with their specifics, so I need to know how the class is <br>composed, if some methods without `override` keyword could be required by <br>protocol..<br>All the basic things you need to know about the new class you found in some <br>code. No?<br></p><p>Can I live with current syntax? Yes. Will change make a code more <br>understandable for viewer in area of inheritance/conformance - Yes, <br>especially if you need to review the code not in XCode/IDE but in some <br>other viewer/web page. Should we make this change? I believe yes, but <br>probably I&#39;m not right in my opinion, so we discussing it here.<br></p><p>On 22.07.2016 17:32, Brandon Knope wrote:<br>&gt; I understand.<br>&gt;<br>&gt; But why would you need to know if it&#39;s a class or a protocol to use the<br>&gt; type? What understanding comes from knowing this information?<br>&gt;<br>&gt; I am honestly trying to understand the problem here and it feels like I&#39;m<br>&gt; overlooking something.<br>&gt;<br>&gt; Brandon<br>&gt;<br>&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;charlie at charliemonroe.net<br>&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;<br>&gt;&gt; Coming to someone elses code, it adds an extra effort to understand the<br>&gt;&gt; declaration. Putting inheritance and conformance separately makes the<br>&gt;&gt; declaration easier to read. At least for me.<br>&gt;&gt;<br>&gt;&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com<br>&gt;&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Honest question: what is actually confusing about the current behavior?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class or<br>&gt;&gt;&gt; a protocol?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I thought the blurred distinction was intentional?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt;&gt;&gt;&gt; classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class MyClass: DataSource<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt;&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked, how<br>&gt;&gt;&gt;&gt; ObjC did it (which isn&#39;t possible with the generics now - is it?), but<br>&gt;&gt;&gt;&gt; what about something like this?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as<br>&gt;&gt;&gt;&gt;&gt; big source breaking change, separate class inheritance and protocol<br>&gt;&gt;&gt;&gt;&gt; conformance in syntax?<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know<br>&gt;&gt;&gt;&gt;&gt; in this case.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt;&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two<br>&gt;&gt;&gt;&gt;&gt; protocols:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this,<br>&gt;&gt;&gt;&gt;&gt; so I believe to improve the clarity of code we should separate in<br>&gt;&gt;&gt;&gt;&gt; syntax inheritance and conformance.<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt;&gt;&gt;&gt; conformance :<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9ce70a6cb7175e7a5e5db5658186a31?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Brandon Knope</string> &lt;bknope at me.com&gt;<p>July 22, 2016 at 11:00:00am</p></header><div class="content"><p>I guess my question comes down to this:<br></p><p>Is this a change for consistency OR is there actually a tangible benefit?<br></p><p>If it&#39;s a protocol: you know some methods are being implemented.<br>If it&#39;s a base class: it&#39;s possible that some methods are overridden<br></p><p>Between knowing these two things, what does the distinction *actually* bring about?<br></p><p>It&#39;s very possible I am not explaining myself properly. <br></p><p>Another way: so now you know it is most definitely a base class and not a protocol, what does this information allow you to do differently?<br></p><p>Basically, I am for introducing an &quot;implements&quot; or some new syntax for this distinction, but I just want to know if this change is just for consistency to separate inheritance and conformance OR if there is truly a benefit to knowing this distinction. <br></p><p>I think this is important to convince people to make a change like this. I understand the idea behind it but the important question is: why?<br></p><p>Thanks,<br>Brandon <br></p><p>&gt; On Jul 22, 2016, at 10:52 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt; I don&#39;t understand the question, really. I need to know because I need to know :-)<br>&gt; I.e. I see new code, I&#39;m trying to understand the structure of the class, its dependency, if all the base code of this class is inside this class or there is some &#39;base&#39; code that is overriden, etc.. Class and Protocol two different entities with their specifics, so I need to know how the class is composed, if some methods without `override` keyword could be required by protocol..<br>&gt; All the basic things you need to know about the new class you found in some code. No?<br>&gt; <br>&gt; Can I live with current syntax? Yes. Will change make a code more understandable for viewer in area of inheritance/conformance - Yes, especially if you need to review the code not in XCode/IDE but in some other viewer/web page. Should we make this change? I believe yes, but probably I&#39;m not right in my opinion, so we discussing it here.<br>&gt; <br>&gt;&gt; On 22.07.2016 17:32, Brandon Knope wrote:<br>&gt;&gt; I understand.<br>&gt;&gt; <br>&gt;&gt; But why would you need to know if it&#39;s a class or a protocol to use the<br>&gt;&gt; type? What understanding comes from knowing this information?<br>&gt;&gt; <br>&gt;&gt; I am honestly trying to understand the problem here and it feels like I&#39;m<br>&gt;&gt; overlooking something.<br>&gt;&gt; <br>&gt;&gt; Brandon<br>&gt;&gt; <br>&gt;&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;charlie at charliemonroe.net<br>&gt;&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; Coming to someone elses code, it adds an extra effort to understand the<br>&gt;&gt;&gt; declaration. Putting inheritance and conformance separately makes the<br>&gt;&gt;&gt; declaration easier to read. At least for me.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com<br>&gt;&gt;&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Honest question: what is actually confusing about the current behavior?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class or<br>&gt;&gt;&gt;&gt; a protocol?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I thought the blurred distinction was intentional?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt;&gt;&gt;&gt;&gt; classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; class MyClass: DataSource<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt;&gt;&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked, how<br>&gt;&gt;&gt;&gt;&gt; ObjC did it (which isn&#39;t possible with the generics now - is it?), but<br>&gt;&gt;&gt;&gt;&gt; what about something like this?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt;&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as<br>&gt;&gt;&gt;&gt;&gt;&gt; big source breaking change, separate class inheritance and protocol<br>&gt;&gt;&gt;&gt;&gt;&gt; conformance in syntax?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know<br>&gt;&gt;&gt;&gt;&gt;&gt; in this case.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt;&gt;&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two<br>&gt;&gt;&gt;&gt;&gt;&gt; protocols:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt;&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this,<br>&gt;&gt;&gt;&gt;&gt;&gt; so I believe to improve the clarity of code we should separate in<br>&gt;&gt;&gt;&gt;&gt;&gt; syntax inheritance and conformance.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt;&gt;&gt;&gt;&gt; conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>&gt; On 22 Jul 2016, at 17:06, Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I guess my question comes down to this:<br>&gt; <br>&gt; Is this a change for consistency OR is there actually a tangible benefit?<br></p><p>I see a fairly straightforward benefit. When studying new code, you want to get an idea for the class inheritance tree and the OP wants to make it clear when you are inheriting and what the class is.<br></p><p>&gt; If it&#39;s a protocol: you know some methods are being implemented.<br>&gt; If it&#39;s a base class: it&#39;s possible that some methods are overridden<br>&gt; <br>&gt; Between knowing these two things, what does the distinction *actually* bring about?<br>&gt; <br>&gt; It&#39;s very possible I am not explaining myself properly. <br>&gt; <br>&gt; Another way: so now you know it is most definitely a base class and not a protocol, what does this information allow you to do differently?<br>&gt; <br>&gt; Basically, I am for introducing an &quot;implements&quot; or some new syntax for this distinction, but I just want to know if this change is just for consistency to separate inheritance and conformance OR if there is truly a benefit to knowing this distinction. <br>&gt; <br>&gt; I think this is important to convince people to make a change like this. I understand the idea behind it but the important question is: why?<br>&gt; <br>&gt; Thanks,<br>&gt; Brandon <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 10:52 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I don&#39;t understand the question, really. I need to know because I need to know :-)<br>&gt;&gt; I.e. I see new code, I&#39;m trying to understand the structure of the class, its dependency, if all the base code of this class is inside this class or there is some &#39;base&#39; code that is overriden, etc.. Class and Protocol two different entities with their specifics, so I need to know how the class is composed, if some methods without `override` keyword could be required by protocol..<br>&gt;&gt; All the basic things you need to know about the new class you found in some code. No?<br>&gt;&gt; <br>&gt;&gt; Can I live with current syntax? Yes. Will change make a code more understandable for viewer in area of inheritance/conformance - Yes, especially if you need to review the code not in XCode/IDE but in some other viewer/web page. Should we make this change? I believe yes, but probably I&#39;m not right in my opinion, so we discussing it here.<br>&gt;&gt; <br>&gt;&gt;&gt; On 22.07.2016 17:32, Brandon Knope wrote:<br>&gt;&gt;&gt; I understand.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; But why would you need to know if it&#39;s a class or a protocol to use the<br>&gt;&gt;&gt; type? What understanding comes from knowing this information?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I am honestly trying to understand the problem here and it feels like I&#39;m<br>&gt;&gt;&gt; overlooking something.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;charlie at charliemonroe.net<br>&gt;&gt;&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Coming to someone elses code, it adds an extra effort to understand the<br>&gt;&gt;&gt;&gt; declaration. Putting inheritance and conformance separately makes the<br>&gt;&gt;&gt;&gt; declaration easier to read. At least for me.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com<br>&gt;&gt;&gt;&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Honest question: what is actually confusing about the current behavior?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class or<br>&gt;&gt;&gt;&gt;&gt; a protocol?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I thought the blurred distinction was intentional?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Brandon<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt;&gt;&gt;&gt;&gt;&gt; classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; class MyClass: DataSource<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt;&gt;&gt;&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked, how<br>&gt;&gt;&gt;&gt;&gt;&gt; ObjC did it (which isn&#39;t possible with the generics now - is it?), but<br>&gt;&gt;&gt;&gt;&gt;&gt; what about something like this?<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; big source breaking change, separate class inheritance and protocol<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; conformance in syntax?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; in this case.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocols:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this,<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; so I believe to improve the clarity of code we should separate in<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; syntax inheritance and conformance.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/2f4f0f04/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/242e18b243022bcb7573443e06444423?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Boris Wang</string> &lt;kona.ming at gmail.com&gt;<p>July 23, 2016 at 07:00:00am</p></header><div class="content"><p>why?<br></p><p>I think it&#39;s just because subclass, protocol are different design patterns .<br></p><p>same question:<br>    why we need man toilet and women toilet?<br>    it&#39;s culture ,it&#39;s civilization<br></p><p><br>2016年7月22日星期五，Brandon Knope via swift-evolution &lt;swift-evolution at swift.org<br>&lt;javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;swift-evolution at swift.org&#39;);&gt;&gt; 写道：<br></p><p>&gt; I guess my question comes down to this:<br>&gt;<br>&gt; Is this a change for consistency OR is there actually a tangible benefit?<br>&gt;<br>&gt; If it&#39;s a protocol: you know some methods are being implemented.<br>&gt; If it&#39;s a base class: it&#39;s possible that some methods are overridden<br>&gt;<br>&gt; Between knowing these two things, what does the distinction *actually*<br>&gt; bring about?<br>&gt;<br>&gt; It&#39;s very possible I am not explaining myself properly.<br>&gt;<br>&gt; Another way: so now you know it is most definitely a base class and not a<br>&gt; protocol, what does this information allow you to do differently?<br>&gt;<br>&gt; Basically, I am for introducing an &quot;implements&quot; or some new syntax for<br>&gt; this distinction, but I just want to know if this change is just for<br>&gt; consistency to separate inheritance and conformance OR if there is truly a<br>&gt; benefit to knowing this distinction.<br>&gt;<br>&gt; I think this is important to convince people to make a change like this. I<br>&gt; understand the idea behind it but the important question is: why?<br>&gt;<br>&gt; Thanks,<br>&gt; Brandon<br>&gt;<br>&gt; &gt; On Jul 22, 2016, at 10:52 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I don&#39;t understand the question, really. I need to know because I need<br>&gt; to know :-)<br>&gt; &gt; I.e. I see new code, I&#39;m trying to understand the structure of the<br>&gt; class, its dependency, if all the base code of this class is inside this<br>&gt; class or there is some &#39;base&#39; code that is overriden, etc.. Class and<br>&gt; Protocol two different entities with their specifics, so I need to know how<br>&gt; the class is composed, if some methods without `override` keyword could be<br>&gt; required by protocol..<br>&gt; &gt; All the basic things you need to know about the new class you found in<br>&gt; some code. No?<br>&gt; &gt;<br>&gt; &gt; Can I live with current syntax? Yes. Will change make a code more<br>&gt; understandable for viewer in area of inheritance/conformance - Yes,<br>&gt; especially if you need to review the code not in XCode/IDE but in some<br>&gt; other viewer/web page. Should we make this change? I believe yes, but<br>&gt; probably I&#39;m not right in my opinion, so we discussing it here.<br>&gt; &gt;<br>&gt; &gt;&gt; On 22.07.2016 17:32, Brandon Knope wrote:<br>&gt; &gt;&gt; I understand.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; But why would you need to know if it&#39;s a class or a protocol to use the<br>&gt; &gt;&gt; type? What understanding comes from knowing this information?<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; I am honestly trying to understand the problem here and it feels like<br>&gt; I&#39;m<br>&gt; &gt;&gt; overlooking something.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Brandon<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;charlie at charliemonroe.net<br>&gt; &gt;&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;&gt; Coming to someone elses code, it adds an extra effort to understand the<br>&gt; &gt;&gt;&gt; declaration. Putting inheritance and conformance separately makes the<br>&gt; &gt;&gt;&gt; declaration easier to read. At least for me.<br>&gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com<br>&gt; &gt;&gt;&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Honest question: what is actually confusing about the current<br>&gt; behavior?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class<br>&gt; or<br>&gt; &gt;&gt;&gt;&gt; a protocol?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; I thought the blurred distinction was intentional?<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt; Brandon<br>&gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt; &gt;&gt;&gt;&gt;&gt; classes in Swift do not have a superclass - it simply looks weird:<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; class MyClass: DataSource<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt; &gt;&gt;&gt;&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked,<br>&gt; how<br>&gt; &gt;&gt;&gt;&gt;&gt; ObjC did it (which isn&#39;t possible with the generics now - is it?),<br>&gt; but<br>&gt; &gt;&gt;&gt;&gt;&gt; what about something like this?<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; &gt;&gt;&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; &gt;&gt;&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt; wrote:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0,<br>&gt; as<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; big source breaking change, separate class inheritance and protocol<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; conformance in syntax?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let<br>&gt; know<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; in this case.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class<br>&gt; inherits<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocols:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like<br>&gt; this,<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; so I believe to improve the clarity of code we should separate in<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; syntax inheritance and conformance.<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; My suggestions:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; should be discussed<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160723/52062673/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 6:23 PM, Boris Wang via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; why?<br>&gt;<br>&gt; I think it&#39;s just because subclass, protocol are different design patterns<br>&gt; .<br></p><p><br>If you are doing the designing, you already know this information;<br>moreover, you&#39;re required to use `override` and other keywords to indicate<br>your awareness. If you are not doing the designing, you cannot understand<br>the design without knowing more about the protocol or base class in<br>question than just the fact that it is a protocol or base class. So in<br>either case, putting this information where it is being proposed is not<br>*useful*.<br></p><p><br>&gt; same question:<br>&gt;     why we need man toilet and women toilet?<br>&gt;     it&#39;s culture ,it&#39;s civilization<br>&gt;<br></p><p>You may not be aware of this, but gender-neutral toilets are increasingly<br>common in certain parts of civilization :)<br></p><p><br>&gt; 2016年7月22日星期五，Brandon Knope via swift-evolution &lt;swift-evolution at swift.org&gt;<br>&gt; 写道：<br>&gt;<br>&gt;&gt; I guess my question comes down to this:<br>&gt;&gt;<br>&gt;&gt; Is this a change for consistency OR is there actually a tangible benefit?<br>&gt;&gt;<br>&gt;&gt; If it&#39;s a protocol: you know some methods are being implemented.<br>&gt;&gt; If it&#39;s a base class: it&#39;s possible that some methods are overridden<br>&gt;&gt;<br>&gt;&gt; Between knowing these two things, what does the distinction *actually*<br>&gt;&gt; bring about?<br>&gt;&gt;<br>&gt;&gt; It&#39;s very possible I am not explaining myself properly.<br>&gt;&gt;<br>&gt;&gt; Another way: so now you know it is most definitely a base class and not a<br>&gt;&gt; protocol, what does this information allow you to do differently?<br>&gt;&gt;<br>&gt;&gt; Basically, I am for introducing an &quot;implements&quot; or some new syntax for<br>&gt;&gt; this distinction, but I just want to know if this change is just for<br>&gt;&gt; consistency to separate inheritance and conformance OR if there is truly a<br>&gt;&gt; benefit to knowing this distinction.<br>&gt;&gt;<br>&gt;&gt; I think this is important to convince people to make a change like this.<br>&gt;&gt; I understand the idea behind it but the important question is: why?<br>&gt;&gt;<br>&gt;&gt; Thanks,<br>&gt;&gt; Brandon<br>&gt;&gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 10:52 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I don&#39;t understand the question, really. I need to know because I need<br>&gt;&gt; to know :-)<br>&gt;&gt; &gt; I.e. I see new code, I&#39;m trying to understand the structure of the<br>&gt;&gt; class, its dependency, if all the base code of this class is inside this<br>&gt;&gt; class or there is some &#39;base&#39; code that is overriden, etc.. Class and<br>&gt;&gt; Protocol two different entities with their specifics, so I need to know how<br>&gt;&gt; the class is composed, if some methods without `override` keyword could be<br>&gt;&gt; required by protocol..<br>&gt;&gt; &gt; All the basic things you need to know about the new class you found in<br>&gt;&gt; some code. No?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Can I live with current syntax? Yes. Will change make a code more<br>&gt;&gt; understandable for viewer in area of inheritance/conformance - Yes,<br>&gt;&gt; especially if you need to review the code not in XCode/IDE but in some<br>&gt;&gt; other viewer/web page. Should we make this change? I believe yes, but<br>&gt;&gt; probably I&#39;m not right in my opinion, so we discussing it here.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;&gt; On 22.07.2016 17:32, Brandon Knope wrote:<br>&gt;&gt; &gt;&gt; I understand.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; But why would you need to know if it&#39;s a class or a protocol to use the<br>&gt;&gt; &gt;&gt; type? What understanding comes from knowing this information?<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; I am honestly trying to understand the problem here and it feels like<br>&gt;&gt; I&#39;m<br>&gt;&gt; &gt;&gt; overlooking something.<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; Brandon<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt; On Jul 22, 2016, at 10:12 AM, Charlie Monroe &lt;<br>&gt;&gt; charlie at charliemonroe.net<br>&gt;&gt; &gt;&gt; &lt;mailto:charlie at charliemonroe.net&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;<br>&gt;&gt; &gt;&gt;&gt; Coming to someone elses code, it adds an extra effort to understand<br>&gt;&gt; the<br>&gt;&gt; &gt;&gt;&gt; declaration. Putting inheritance and conformance separately makes the<br>&gt;&gt; &gt;&gt;&gt; declaration easier to read. At least for me.<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; On Jul 22, 2016, at 4:05 PM, Brandon Knope &lt;bknope at me.com<br>&gt;&gt; &gt;&gt;&gt;&gt; &lt;mailto:bknope at me.com&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Honest question: what is actually confusing about the current<br>&gt;&gt; behavior?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I.E. What is important about knowing whether &quot;DataSource&quot; is a class<br>&gt;&gt; or<br>&gt;&gt; &gt;&gt;&gt;&gt; a protocol?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; I thought the blurred distinction was intentional?<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt; Brandon<br>&gt;&gt; &gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 9:47 AM, Charlie Monroe via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; classes in Swift do not have a superclass - it simply looks weird:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; class MyClass: DataSource<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked,<br>&gt;&gt; how<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; ObjC did it (which isn&#39;t possible with the generics now - is it?),<br>&gt;&gt; but<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; what about something like this?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt;<br>&gt;&gt; wrote:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0,<br>&gt;&gt; as<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; big source breaking change, separate class inheritance and protocol<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; conformance in syntax?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let<br>&gt;&gt; know<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; in this case.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class<br>&gt;&gt; inherits<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocols:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like<br>&gt;&gt; this,<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; so I believe to improve the clarity of code we should separate in<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; syntax inheritance and conformance.<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; or<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; &gt;&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/189f43fd/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>I think that the current approach marks a regression in declarative expressiveness as the notion of extending a class over implementing a protocol is blurred while the concepts are IMHO not the same (the latter is about behaviour conformance not a is a relationship):<br></p><p>Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt; <br></p><p><br>would be a clear and concise way to express it that would not be confused even at a quick glance.<br></p><p>Sent from my iPhone<br></p><p>&gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I agree that this is an issue. Mostly nowadays when more and more classes in Swift do not have a superclass - it simply looks weird:<br>&gt; <br>&gt; class MyClass: DataSource<br>&gt; <br>&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc. Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC did it (which isn&#39;t possible with the generics now - is it?), but what about something like this?<br>&gt; <br>&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; extension MyClass [OtherProtocol]<br>&gt; <br>&gt; <br>&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt; <br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt; <br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; <br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt; <br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; My suggestions:<br>&gt;&gt; <br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/f0a64dd2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 22, 2016 at 02:00:00pm</p></header><div class="content"><p>It would still cause confusion if you were only to conform to a single<br>protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>solved in code but I don&#39;t think it is necessary.<br></p><p>L<br></p><p><br>On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; I think that the current approach marks a regression in declarative<br>&gt; expressiveness as the notion of extending a class over implementing a<br>&gt; protocol is blurred while the concepts are IMHO not the same (the latter is<br>&gt; about behaviour conformance not a is a relationship):<br>&gt;<br>&gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt;<br>&gt;<br>&gt; would be a clear and concise way to express it that would not be confused<br>&gt; even at a quick glance.<br>&gt;<br>&gt; Sent from my iPhone<br>&gt;<br>&gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I agree that this is an issue. Mostly nowadays when more and more classes in<br>&gt; Swift do not have a superclass - it simply looks weird:<br>&gt;<br>&gt; class MyClass: DataSource<br>&gt;<br>&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt; Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC<br>&gt; did it (which isn&#39;t possible with the generics now - is it?), but what about<br>&gt; something like this?<br>&gt;<br>&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; extension MyClass [OtherProtocol]<br>&gt;<br>&gt;<br>&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;<br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt; breaking change, separate class inheritance and protocol conformance in<br>&gt; syntax?<br>&gt;<br>&gt;<br>&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt; this case.<br>&gt;<br>&gt;<br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;<br>&gt;<br>&gt; class MyClass : First, Second, Third {<br>&gt;<br>&gt; }<br>&gt;<br>&gt;<br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt; conformance.<br>&gt;<br>&gt;<br>&gt; As I understand we should discuss changes in these areas:<br>&gt;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt;<br>&gt; class Child: BaseClass<br>&gt;<br>&gt;<br>&gt; 2. class conformance :<br>&gt;<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt;<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt;<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt;<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt;<br>&gt; My suggestions:<br>&gt;<br>&gt;<br>&gt; I) separate inheritance with double colon :<br>&gt;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt;<br>&gt; class Child:: BaseClass<br>&gt;<br>&gt;<br>&gt; 2. class conformance :<br>&gt;<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt;<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt;<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt;<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt;<br>&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; conformance :<br>&gt;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt;<br>&gt; class Child: BaseClass<br>&gt;<br>&gt;<br>&gt; 2. class conformance :<br>&gt;<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt;<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt;<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; or<br>&gt;<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;<br>&gt; should be discussed<br>&gt;<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt;<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt;<br>&gt; III) special word like &#39;conforms&#39;<br>&gt;<br>&gt;<br>&gt; 1. class inheritance :<br>&gt;<br>&gt; class Child: BaseClass<br>&gt;<br>&gt;<br>&gt; 2. class conformance :<br>&gt;<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; or<br>&gt;<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 3. class inheritance + conformance :<br>&gt;<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 4. protocol conformance for structs:<br>&gt;<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt; or<br>&gt;<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;<br>&gt;<br>&gt; 5. protocol inheritance:<br>&gt;<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;<br>&gt;<br>&gt;<br>&gt; Thoughts?<br>&gt;<br>&gt; _______________________________________________<br>&gt;<br>&gt; swift-evolution mailing list<br>&gt;<br>&gt; swift-evolution at swift.org<br>&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 22, 2016 at 06:00:00pm</p></header><div class="content"><p>class A &lt;P&gt;<br></p><p>;)?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 22 Jul 2016, at 18:42, Leonardo Pessoa &lt;me at lmpessoa.com&gt; wrote:<br>&gt; <br>&gt; It would still cause confusion if you were only to conform to a single<br>&gt; protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>&gt; solved in code but I don&#39;t think it is necessary.<br>&gt; <br>&gt; L<br>&gt; <br>&gt; <br>&gt; On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; I think that the current approach marks a regression in declarative<br>&gt;&gt; expressiveness as the notion of extending a class over implementing a<br>&gt;&gt; protocol is blurred while the concepts are IMHO not the same (the latter is<br>&gt;&gt; about behaviour conformance not a is a relationship):<br>&gt;&gt; <br>&gt;&gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; would be a clear and concise way to express it that would not be confused<br>&gt;&gt; even at a quick glance.<br>&gt;&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I agree that this is an issue. Mostly nowadays when more and more classes in<br>&gt;&gt; Swift do not have a superclass - it simply looks weird:<br>&gt;&gt; <br>&gt;&gt; class MyClass: DataSource<br>&gt;&gt; <br>&gt;&gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt; Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC<br>&gt;&gt; did it (which isn&#39;t possible with the generics now - is it?), but what about<br>&gt;&gt; something like this?<br>&gt;&gt; <br>&gt;&gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; extension MyClass [OtherProtocol]<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt;&gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt; breaking change, separate class inheritance and protocol conformance in<br>&gt;&gt; syntax?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt; this case.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt;&gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt;&gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt; conformance.<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; <br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; <br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; My suggestions:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; <br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; <br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; <br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; <br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; conformance :<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; <br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; <br>&gt;&gt; should be discussed<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; <br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 2. class conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; <br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; <br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; <br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; Thoughts?<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; <br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; <br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; <br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/145625a3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 12:42 PM, Leonardo Pessoa via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; It would still cause confusion if you were only to conform to a single<br>&gt; protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>&gt; solved in code but I don&#39;t think it is necessary.<br>&gt;<br></p><p>The point made earlier is salient: if you know what P is, no clarification<br>is necessary; on the other hand, if you don&#39;t know anything else about P,<br>knowing whether P is a class or protocol is essentially useless even if<br>you&#39;re a reader. What could you possibly do with this information?<br></p><p>L<br>&gt;<br>&gt;<br>&gt; On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt; I think that the current approach marks a regression in declarative<br>&gt; &gt; expressiveness as the notion of extending a class over implementing a<br>&gt; &gt; protocol is blurred while the concepts are IMHO not the same (the latter<br>&gt; is<br>&gt; &gt; about behaviour conformance not a is a relationship):<br>&gt; &gt;<br>&gt; &gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; would be a clear and concise way to express it that would not be confused<br>&gt; &gt; even at a quick glance.<br>&gt; &gt;<br>&gt; &gt; Sent from my iPhone<br>&gt; &gt;<br>&gt; &gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt; classes in<br>&gt; &gt; Swift do not have a superclass - it simply looks weird:<br>&gt; &gt;<br>&gt; &gt; class MyClass: DataSource<br>&gt; &gt;<br>&gt; &gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt; &gt; Nevertheless, I do not feel that :: is the answer. I really liked, how<br>&gt; ObjC<br>&gt; &gt; did it (which isn&#39;t possible with the generics now - is it?), but what<br>&gt; about<br>&gt; &gt; something like this?<br>&gt; &gt;<br>&gt; &gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; &gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt; &gt; extension MyClass [OtherProtocol]<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt; &gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt; &gt; breaking change, separate class inheritance and protocol conformance in<br>&gt; &gt; syntax?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt; &gt; this case.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt; from<br>&gt; &gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; class MyClass : First, Second, Third {<br>&gt; &gt;<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt; suffix/prefix,<br>&gt; &gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt; &gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt; &gt; conformance.<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; As I understand we should discuss changes in these areas:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 1. class inheritance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2. class conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 3. class inheritance + conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 4. protocol conformance for structs:<br>&gt; &gt;<br>&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 5. protocol inheritance:<br>&gt; &gt;<br>&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; My suggestions:<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; I) separate inheritance with double colon :<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 1. class inheritance :<br>&gt; &gt;<br>&gt; &gt; class Child:: BaseClass<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2. class conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 3. class inheritance + conformance :<br>&gt; &gt;<br>&gt; &gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 4. protocol conformance for structs:<br>&gt; &gt;<br>&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 5. protocol inheritance:<br>&gt; &gt;<br>&gt; &gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; II) in class definition use parenthesis to separate inheritance and<br>&gt; &gt; conformance :<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 1. class inheritance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2. class conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 3. class inheritance + conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 4. protocol conformance for structs:<br>&gt; &gt;<br>&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt; or<br>&gt; &gt;<br>&gt; &gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; &gt;<br>&gt; &gt; should be discussed<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 5. protocol inheritance:<br>&gt; &gt;<br>&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; III) special word like &#39;conforms&#39;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 1. class inheritance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 2. class conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt; or<br>&gt; &gt;<br>&gt; &gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 3. class inheritance + conformance :<br>&gt; &gt;<br>&gt; &gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 4. protocol conformance for structs:<br>&gt; &gt;<br>&gt; &gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt; or<br>&gt; &gt;<br>&gt; &gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; 5. protocol inheritance:<br>&gt; &gt;<br>&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; Thoughts?<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt;<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt;<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/0c140471/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>This adds information without being a burden while the current approach mixes and matches in a workable but less consistent way. Adopting a protocol is not the same as subclass for, why should it look the same syntax wise?<br></p><p>Sent from my iPhone<br></p><p>&gt; On 22 Jul 2016, at 19:00, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 12:42 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; It would still cause confusion if you were only to conform to a single<br>&gt;&gt; protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>&gt;&gt; solved in code but I don&#39;t think it is necessary.<br>&gt; <br>&gt; The point made earlier is salient: if you know what P is, no clarification is necessary; on the other hand, if you don&#39;t know anything else about P, knowing whether P is a class or protocol is essentially useless even if you&#39;re a reader. What could you possibly do with this information?<br>&gt; <br>&gt;&gt; L<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; I think that the current approach marks a regression in declarative<br>&gt;&gt; &gt; expressiveness as the notion of extending a class over implementing a<br>&gt;&gt; &gt; protocol is blurred while the concepts are IMHO not the same (the latter is<br>&gt;&gt; &gt; about behaviour conformance not a is a relationship):<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; would be a clear and concise way to express it that would not be confused<br>&gt;&gt; &gt; even at a quick glance.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sent from my iPhone<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I agree that this is an issue. Mostly nowadays when more and more classes in<br>&gt;&gt; &gt; Swift do not have a superclass - it simply looks weird:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class MyClass: DataSource<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt; &gt; Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC<br>&gt;&gt; &gt; did it (which isn&#39;t possible with the generics now - is it?), but what about<br>&gt;&gt; &gt; something like this?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt; extension MyClass [OtherProtocol]<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt;&gt; &gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt; &gt; breaking change, separate class inheritance and protocol conformance in<br>&gt;&gt; &gt; syntax?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt; &gt; this case.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt;&gt; &gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class MyClass : First, Second, Third {<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt;&gt; &gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt; &gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt; &gt; conformance.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My suggestions:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I) separate inheritance with double colon :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child:: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; &gt; conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; should be discussed<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thoughts?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/943756ba/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>July 22, 2016 at 01:00:00pm</p></header><div class="content"><p>On Fri, Jul 22, 2016 at 1:04 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt;<br>wrote:<br></p><p>&gt; This adds information without being a burden while the current approach<br>&gt; mixes and matches in a workable but less consistent way.<br>&gt;<br></p><p>It adds no *useful* information.<br></p><p>Adopting a protocol is not the same as subclass for, why should it look the<br>&gt; same syntax wise?<br>&gt;<br></p><p>As Daniel has pointed out, `class A : P { ... }` establishes a relationship<br>such that `A is P`, regardless of whether P is a protocol or base class.<br></p><p>Sent from my iPhone<br>&gt;<br>&gt; On 22 Jul 2016, at 19:00, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;<br>&gt; On Fri, Jul 22, 2016 at 12:42 PM, Leonardo Pessoa via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; It would still cause confusion if you were only to conform to a single<br>&gt;&gt; protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>&gt;&gt; solved in code but I don&#39;t think it is necessary.<br>&gt;&gt;<br>&gt;<br>&gt; The point made earlier is salient: if you know what P is, no clarification<br>&gt; is necessary; on the other hand, if you don&#39;t know anything else about P,<br>&gt; knowing whether P is a class or protocol is essentially useless even if<br>&gt; you&#39;re a reader. What could you possibly do with this information?<br>&gt;<br>&gt; L<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt; I think that the current approach marks a regression in declarative<br>&gt;&gt; &gt; expressiveness as the notion of extending a class over implementing a<br>&gt;&gt; &gt; protocol is blurred while the concepts are IMHO not the same (the<br>&gt;&gt; latter is<br>&gt;&gt; &gt; about behaviour conformance not a is a relationship):<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; would be a clear and concise way to express it that would not be<br>&gt;&gt; confused<br>&gt;&gt; &gt; even at a quick glance.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sent from my iPhone<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I agree that this is an issue. Mostly nowadays when more and more<br>&gt;&gt; classes in<br>&gt;&gt; &gt; Swift do not have a superclass - it simply looks weird:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class MyClass: DataSource<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt; &gt; Nevertheless, I do not feel that :: is the answer. I really liked, how<br>&gt;&gt; ObjC<br>&gt;&gt; &gt; did it (which isn&#39;t possible with the generics now - is it?), but what<br>&gt;&gt; about<br>&gt;&gt; &gt; something like this?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt; &gt; extension MyClass [OtherProtocol]<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt; regarding<br>&gt;&gt; &gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt; &gt; breaking change, separate class inheritance and protocol conformance in<br>&gt;&gt; &gt; syntax?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt; &gt; this case.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt;&gt; from<br>&gt;&gt; &gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class MyClass : First, Second, Third {<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; }<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt; suffix/prefix,<br>&gt;&gt; &gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt; &gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt; &gt; conformance.<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; As I understand we should discuss changes in these areas:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; My suggestions:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; I) separate inheritance with double colon :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child:: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt; &gt; conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; should be discussed<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; III) special word like &#39;conforms&#39;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; or<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; Thoughts?<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; &gt;<br>&gt;&gt; &gt; _______________________________________________<br>&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; &gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/d3d68b45/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>Sent from my iPhone<br></p><p>&gt; On 22 Jul 2016, at 19:10, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On Fri, Jul 22, 2016 at 1:04 PM, Goffredo Marocchi &lt;panajev at gmail.com&gt; wrote:<br>&gt;&gt; This adds information without being a burden while the current approach mixes and matches in a workable but less consistent way.<br>&gt; <br>&gt; It adds no *useful* information.<br>&gt; <br>&gt;&gt; Adopting a protocol is not the same as subclass for, why should it look the same syntax wise?<br>&gt; <br>&gt; As Daniel has pointed out, `class A : P { ... }` establishes a relationship such that `A is P`, regardless of whether P is a protocol or base class.<br></p><p>I do not think it is a fair statement IMHO. A can conform to P and/or be an A. I think the two concepts should stay separate as they are in many languages, but I can accept to be on the losing end of this.<br></p><p>&gt; <br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On 22 Jul 2016, at 19:00, Xiaodi Wu &lt;xiaodi.wu at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Fri, Jul 22, 2016 at 12:42 PM, Leonardo Pessoa via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; It would still cause confusion if you were only to conform to a single<br>&gt;&gt;&gt;&gt; protocol (P in &quot;class A : P&quot; is a class or a protocol?). This can be<br>&gt;&gt;&gt;&gt; solved in code but I don&#39;t think it is necessary.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; The point made earlier is salient: if you know what P is, no clarification is necessary; on the other hand, if you don&#39;t know anything else about P, knowing whether P is a class or protocol is essentially useless even if you&#39;re a reader. What could you possibly do with this information?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; L<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 22 July 2016 at 14:08, Goffredo Marocchi via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt; I think that the current approach marks a regression in declarative<br>&gt;&gt;&gt;&gt; &gt; expressiveness as the notion of extending a class over implementing a<br>&gt;&gt;&gt;&gt; &gt; protocol is blurred while the concepts are IMHO not the same (the latter is<br>&gt;&gt;&gt;&gt; &gt; about behaviour conformance not a is a relationship):<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Class/struct B : Class/struct A &lt;Protocol1 &amp; Protocol2&gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; would be a clear and concise way to express it that would not be confused<br>&gt;&gt;&gt;&gt; &gt; even at a quick glance.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Sent from my iPhone<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; On 22 Jul 2016, at 14:47, Charlie Monroe via swift-evolution<br>&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I agree that this is an issue. Mostly nowadays when more and more classes in<br>&gt;&gt;&gt;&gt; &gt; Swift do not have a superclass - it simply looks weird:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class MyClass: DataSource<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; One doesn&#39;t know whether &quot;DataSource&quot; is a class, protocol, etc.<br>&gt;&gt;&gt;&gt; &gt; Nevertheless, I do not feel that :: is the answer. I really liked, how ObjC<br>&gt;&gt;&gt;&gt; &gt; did it (which isn&#39;t possible with the generics now - is it?), but what about<br>&gt;&gt;&gt;&gt; &gt; something like this?<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt; &gt; class MyClass: BaseClass [SomeDelegate, OtherDelegate, ProtocolX]<br>&gt;&gt;&gt;&gt; &gt; extension MyClass [OtherProtocol]<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; On Jul 22, 2016, at 3:14 PM, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt; &gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I remember that this was discussed, but can&#39;t find any decision regarding<br>&gt;&gt;&gt;&gt; &gt; this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source<br>&gt;&gt;&gt;&gt; &gt; breaking change, separate class inheritance and protocol conformance in<br>&gt;&gt;&gt;&gt; &gt; syntax?<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt;&gt;&gt; &gt; this case.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I.e. when I see the following I can&#39;t understand if the class inherits from<br>&gt;&gt;&gt;&gt; &gt; base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; }<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix,<br>&gt;&gt;&gt;&gt; &gt; or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to<br>&gt;&gt;&gt;&gt; &gt; improve the clarity of code we should separate in syntax inheritance and<br>&gt;&gt;&gt;&gt; &gt; conformance.<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; My suggestions:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt;&gt;&gt; &gt; conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; or<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; should be discussed<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; or<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; or<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; Thoughts?<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; &gt; _______________________________________________<br>&gt;&gt;&gt;&gt; &gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; &gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;&gt; &gt;<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt; <br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160722/218df70a/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/831ba6eb600af4a6587f263373921bb2?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Tino Heth</string> &lt;2th at gmx.de&gt;<p>July 22, 2016 at 04:00:00pm</p></header><div class="content"><p>I have the feeling that there&#39;s to much stress right now to handle this pitch in the way it deserves… it might be better to do the split, but imho there is no obvious syntax for protocol conformance, so I expect a long discussion on the details.<br></p><p>Depending on how important protocols will become in the future, it could be really nice to have a separate namespace for them:<br>It would remove the need for a &quot;protocol-suffix&quot; (…Type), and it could even be feasible to automatically derive protocols from the interface of classes…<br>I&#39;m not sure how useful this would be, but it would be much less work to build libraries that utilizes the flexibility of protocols.<br></p><p>Example:<br>You could create a algebra-library with a standard matrix-struct, but write the majority of the functions for a derived matrix-protocol, so that users can easily write their own implementations with custom memory-layout.<br>This would be especially useful as structs don&#39;t support inheritance right now, so if I want to create a SparseMatrix-struct, it is not possible to utilize all the hypothetical SimpleMatrix-methods (unless I create a protocol manually).<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552a3e0dcef60ac896560e0c8f4baf5b?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Karl</string> &lt;razielim at gmail.com&gt;<p>July 22, 2016 at 05:00:00pm</p></header><div class="content"><p>What about if we defined subclasses with the “subclass” keyword instead of “class”? So you knew the first parameter was always going to be a base class?<br></p><p>That way we keep the single “:” everywhere else - where clauses, generic constraints lists, etc.<br></p><p>&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt; <br>&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt; <br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt; <br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt; <br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt; <br>&gt; As I understand we should discuss changes in these areas:<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; My suggestions:<br>&gt; <br>&gt; I) separate inheritance with double colon :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; III) special word like &#39;conforms&#39;<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 22, 2016 at 12:00:00pm</p></header><div class="content"><p>I don&#39;t see this as an issue and I&#39;m sure not comfortable in being<br>more verbose here or complicating the language unnecessarily. This is<br>not a change that will bring either benefit or consistency as there<br>are no other cases to compare the use of colon but these and variable<br>declarations (which also use only one).<br></p><p>Perhaps a change to Xcode so it could colour differently classes and<br>protocols could be more benefic with no impact to the language. That<br>would solve the problem.<br></p><p>L<br></p><p>On 22 July 2016 at 12:13, Karl via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; What about if we defined subclasses with the “subclass” keyword instead of “class”? So you knew the first parameter was always going to be a base class?<br>&gt;<br>&gt; That way we keep the single “:” everywhere else - where clauses, generic constraints lists, etc.<br>&gt;<br>&gt;&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;<br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;<br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;<br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;<br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; My suggestions:<br>&gt;&gt;<br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>&gt; Perhaps a change to Xcode so it could colour differently classes and<br> &gt; protocols could be more benefic with no impact to the language. That<br> &gt; would solve the problem.<br></p><p>IMO no enhancement in *IDE* could solve the problem of *language*.<br>Swift code will be written/viewed not only in XCode and even not only in IDE.<br></p><p>On 22.07.2016 18:56, Leonardo Pessoa wrote:<br>&gt; I don&#39;t see this as an issue and I&#39;m sure not comfortable in being<br>&gt; more verbose here or complicating the language unnecessarily. This is<br>&gt; not a change that will bring either benefit or consistency as there<br>&gt; are no other cases to compare the use of colon but these and variable<br>&gt; declarations (which also use only one).<br>&gt;<br>&gt; Perhaps a change to Xcode so it could colour differently classes and<br>&gt; protocols could be more benefic with no impact to the language. That<br>&gt; would solve the problem.<br>&gt;<br>&gt; L<br>&gt;<br>&gt; On 22 July 2016 at 12:13, Karl via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; What about if we defined subclasses with the “subclass” keyword instead of “class”? So you knew the first parameter was always going to be a base class?<br>&gt;&gt;<br>&gt;&gt; That way we keep the single “:” everywhere else - where clauses, generic constraints lists, etc.<br>&gt;&gt;<br>&gt;&gt;&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d02ed1b20fc3e0fa1592ce5982f24d2b?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Leonardo Pessoa</string> &lt;me at lmpessoa.com&gt;<p>July 22, 2016 at 01:00:00pm</p></header><div class="content"><p>I don&#39;t see this as a problem with the language but in how you&#39;re read<br>code, thus it&#39;s problem that could be solved on the IDE.<br></p><p>L<br></p><p><br>On 22 July 2016 at 13:13, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt;&gt; Perhaps a change to Xcode so it could colour differently classes and<br>&gt;&gt; protocols could be more benefic with no impact to the language. That<br>&gt;&gt; would solve the problem.<br>&gt;<br>&gt; IMO no enhancement in *IDE* could solve the problem of *language*.<br>&gt; Swift code will be written/viewed not only in XCode and even not only in<br>&gt; IDE.<br>&gt;<br>&gt;<br>&gt; On 22.07.2016 18:56, Leonardo Pessoa wrote:<br>&gt;&gt;<br>&gt;&gt; I don&#39;t see this as an issue and I&#39;m sure not comfortable in being<br>&gt;&gt; more verbose here or complicating the language unnecessarily. This is<br>&gt;&gt; not a change that will bring either benefit or consistency as there<br>&gt;&gt; are no other cases to compare the use of colon but these and variable<br>&gt;&gt; declarations (which also use only one).<br>&gt;&gt;<br>&gt;&gt; Perhaps a change to Xcode so it could colour differently classes and<br>&gt;&gt; protocols could be more benefic with no impact to the language. That<br>&gt;&gt; would solve the problem.<br>&gt;&gt;<br>&gt;&gt; L<br>&gt;&gt;<br>&gt;&gt; On 22 July 2016 at 12:13, Karl via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; What about if we defined subclasses with the “subclass” keyword instead<br>&gt;&gt;&gt; of “class”? So you knew the first parameter was always going to be a base<br>&gt;&gt;&gt; class?<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; That way we keep the single “:” everywhere else - where clauses, generic<br>&gt;&gt;&gt; constraints lists, etc.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision<br>&gt;&gt;&gt;&gt; regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big<br>&gt;&gt;&gt;&gt; source breaking change, separate class inheritance and protocol conformance<br>&gt;&gt;&gt;&gt; in syntax?<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in<br>&gt;&gt;&gt;&gt; this case.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits<br>&gt;&gt;&gt;&gt; from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other<br>&gt;&gt;&gt;&gt; suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I<br>&gt;&gt;&gt;&gt; believe to improve the clarity of code we should separate in syntax<br>&gt;&gt;&gt;&gt; inheritance and conformance.<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and<br>&gt;&gt;&gt;&gt; conformance :<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt; or<br>&gt;&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>On 22.07.2016 18:13, Karl wrote:<br>&gt; What about if we defined subclasses with the “subclass” keyword instead of “class”? So you knew the first parameter was always going to be a base class?<br>&gt;<br>&gt; That way we keep the single “:” everywhere else - where clauses, generic constraints lists, etc.<br></p><p>I like this idea, so when I see<br></p><p>subclass B: A, P1, P2 {<br>}<br></p><p>or<br></p><p>class B : Z {<br>}<br></p><p>it is clear when it is conformance and where it is inheritance, no need in <br>any additional rule to separate class/protocol, still will work if P1&amp;P2 <br>syntax will be allowed, i.e.<br></p><p>subclass B: A, P1&amp;P2 {<br>}<br></p><p>Also, as we are moving in Protocol-Oriented-Programming way, IMO we should <br>not somehow adds complexity to syntax of conforming value types to <br>protocols. So, seems like the only place where we can change the syntax - <br>is inheritance of class with double colon `class Derived::Base:Protocol` or <br>with this `subclass Derived: Base, Protocol`<br></p><p>&gt;<br>&gt;&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;<br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;<br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;<br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;<br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; My suggestions:<br>&gt;&gt;<br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt; .<br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 22, 2016 at 09:00:00am</p></header><div class="content"><p>The current syntax establishes a relationship.<br></p><p>  X: Y<br></p><p>means &quot;X will have interface of Y&quot;. Note there&#39;s no mention of inheritance or protocol here: they both establish this relationship. This is why we can use<br></p><p>  z is Y<br></p><p>To check whether such relationship holds. Again, there&#39;s no need to worry whether Y is a class or protocol.<br></p><p>That being said, I agree that user have to look up Y&#39;s declaration to determine which one they are writing/reading. But is that a real issue? Why would you write/use &quot;class X: Y {}&quot; before knowing what Y is?<br></p><p>Daniel Duan<br>Sent from my iPhone<br></p><p>&gt; On Jul 22, 2016, at 6:14 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt; <br>&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt; <br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt; <br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt; <br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt; <br>&gt; As I understand we should discuss changes in these areas:<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; My suggestions:<br>&gt; <br>&gt; I) separate inheritance with double colon :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; III) special word like &#39;conforms&#39;<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>July 22, 2016 at 07:00:00pm</p></header><div class="content"><p>On 22.07.2016 19:25, Duan wrote:<br>&gt; The current syntax establishes a relationship.<br>&gt;<br>&gt;   X: Y<br>&gt;<br>&gt; means &quot;X will have interface of Y&quot;. Note there&#39;s no mention of inheritance or protocol here: they both establish this relationship. This is why we can use<br>&gt;<br>&gt;   z is Y<br>&gt;<br>&gt; To check whether such relationship holds. Again, there&#39;s no need to worry whether Y is a class or protocol.<br></p><p>But we see that some mature languages like Java, C# and C++, Object Pascal <br>has this distinction: Java with &#39;implements&#39; keyword, C# with &#39;I&#39; prefix <br>for interfaces(their protocols), C++ with both `implements` and &#39;I&#39; prefix <br>conversion, Object Pascal with &#39;I&#39; prefix. I.e. I believe that in any case <br>new syntax will establish a relationship, but more clearly distinct <br>inheritance with conformance to help the reader to understand the <br>composition of the reviewed class code.<br></p><p>&gt;<br>&gt; That being said, I agree that user have to look up Y&#39;s declaration to determine which one they are writing/reading. But is that a real issue? Why would you write/use &quot;class X: Y {}&quot; before knowing what Y is?<br></p><p>The problem arises not when you write/use but when you *read* someone&#39;s <br>code, and sometimes you read that code not in XCode/IDE.<br></p><p><br>&gt;<br>&gt; Daniel Duan<br>&gt; Sent from my iPhone<br>&gt;<br>&gt;&gt; On Jul 22, 2016, at 6:14 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;<br>&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;<br>&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;<br>&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;<br>&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; My suggestions:<br>&gt;&gt;<br>&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child:: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt; should be discussed<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;<br>&gt;&gt; 1. class inheritance :<br>&gt;&gt; class Child: BaseClass<br>&gt;&gt;<br>&gt;&gt; 2. class conformance :<br>&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt; or<br>&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;<br>&gt;&gt; 5. protocol inheritance:<br>&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; Thoughts?<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f6b7154fd1d6a470d0b521a2e484bffc?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformancemo</strong> from <string>Daniel Duan</string> &lt;daniel at duan.org&gt;<p>July 22, 2016 at 10:00:00am</p></header><div class="content"><p>Daniel Duan<br>Sent from my iPhone<br></p><p>&gt; On Jul 22, 2016, at 9:52 AM, Vladimir.S &lt;svabox at gmail.com&gt; wrote:<br>&gt; <br>&gt;&gt; On 22.07.2016 19:25, Duan wrote:<br>&gt;&gt; The current syntax establishes a relationship.<br>&gt;&gt; <br>&gt;&gt;  X: Y<br>&gt;&gt; <br>&gt;&gt; means &quot;X will have interface of Y&quot;. Note there&#39;s no mention of inheritance or protocol here: they both establish this relationship. This is why we can use<br>&gt;&gt; <br>&gt;&gt;  z is Y<br>&gt;&gt; <br>&gt;&gt; To check whether such relationship holds. Again, there&#39;s no need to worry whether Y is a class or protocol.<br>&gt; <br>&gt; But we see that some mature languages like Java, C# and C++, Object Pascal has this distinction: Java with &#39;implements&#39; keyword, C# with &#39;I&#39; prefix for interfaces(their protocols), C++ with both `implements` and &#39;I&#39; prefix conversion, Object Pascal with &#39;I&#39; prefix. I.e. I believe that in any case new syntax will establish a relationship, but more clearly distinct inheritance with conformance to help the reader to understand the composition of the reviewed class code.<br>&gt; <br></p><p>I argue these syntax are ugly and unnecessary. Reason is in my initial reply.<br></p><p>&gt;&gt; <br>&gt;&gt; That being said, I agree that user have to look up Y&#39;s declaration to determine which one they are writing/reading. But is that a real issue? Why would you write/use &quot;class X: Y {}&quot; before knowing what Y is?<br>&gt; <br>&gt; The problem arises not when you write/use but when you *read* someone&#39;s code, and sometimes you read that code not in XCode/IDE.<br>&gt; <br></p><p>I repeat: when you read X: Y, you would not understand what X is without knowing about Y.<br></p><p>&gt; <br>&gt;&gt; <br>&gt;&gt; Daniel Duan<br>&gt;&gt; Sent from my iPhone<br>&gt;&gt; <br>&gt;&gt;&gt; On Jul 22, 2016, at 6:14 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; class MyClass : First, Second, Third {<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As I understand we should discuss changes in these areas:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My suggestions:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I) separate inheritance with double colon :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child:: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt;&gt;&gt; should be discussed<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; III) special word like &#39;conforms&#39;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. class inheritance :<br>&gt;&gt;&gt; class Child: BaseClass<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 2. class conformance :<br>&gt;&gt;&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 3. class inheritance + conformance :<br>&gt;&gt;&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 4. protocol conformance for structs:<br>&gt;&gt;&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; or<br>&gt;&gt;&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 5. protocol inheritance:<br>&gt;&gt;&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thoughts?<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3488bcf34d8c45d917ed27d67a0ffa45?s=50"></div><header><strong>[Pitch] separate syntax of class inheritance and protocol conformance</strong> from <string>David Hart</string> &lt;david at hartbit.com&gt;<p>July 23, 2016 at 12:00:00am</p></header><div class="content"><p>It&#39;s probably too late by now, but I&#39;ve always enjoyed C#&#39;s naming convention of having interfaces (C# protocols) names start with capitale I:<br></p><p>IEquatable, IComparable<br></p><p>You get used to it and it&#39;s a nice way of avoiding name clashes between classes and protocols, which we currently handle in Swift by suffixing Protocol.<br></p><p>&gt; On 22 Jul 2016, at 15:14, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I remember that this was discussed, but can&#39;t find any decision regarding this.. So, as a last chance, don&#39;t we want in Swift 3.0, as big source breaking change, separate class inheritance and protocol conformance in syntax?<br>&gt; <br>&gt; Sorry if there was a decision about this suggestions. Please let know in this case.<br>&gt; <br>&gt; I.e. when I see the following I can&#39;t understand if the class inherits from base class and conforms to protocols or just conforms to two protocols:<br>&gt; <br>&gt; class MyClass : First, Second, Third {<br>&gt; }<br>&gt; <br>&gt; We don&#39;t have a rule to name protocols with &#39;Protocol&#39;/other suffix/prefix, or classes with &#39;T&#39;/&#39;C&#39; prefix or something like this, so I believe to improve the clarity of code we should separate in syntax inheritance and conformance.<br>&gt; <br>&gt; As I understand we should discuss changes in these areas:<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass, SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; My suggestions:<br>&gt; <br>&gt; I) separate inheritance with double colon :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child:: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child:: BaseClass : SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child:: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; II) in class definition use parenthesis to separate inheritance and conformance :<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass (SomeProtocol1, SomeProtocol2)<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct: (SomeProtocol1, SomeProtocol2)<br>&gt; should be discussed<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; III) special word like &#39;conforms&#39;<br>&gt; <br>&gt; 1. class inheritance :<br>&gt; class Child: BaseClass<br>&gt; <br>&gt; 2. class conformance :<br>&gt; class Child: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; class Child conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 3. class inheritance + conformance :<br>&gt; class Child: BaseClass conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 4. protocol conformance for structs:<br>&gt; struct Struct: conforms SomeProtocol1, SomeProtocol2<br>&gt; or<br>&gt; struct Struct conforms SomeProtocol1, SomeProtocol2<br>&gt; <br>&gt; 5. protocol inheritance:<br>&gt; protocol Child: BaseProtocol1, BaseProtocol2<br>&gt; <br>&gt; <br>&gt; Thoughts?<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160723/13c3fa71/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
