<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/ee593093b3a4aa721ad6979c752a9c9d?s=50"></div><header><strong>RFC: Adding Optional variants of == for collections to the std lib</strong> from <string>Paul Young</string> &lt;paulyoungonline at gmail.com&gt;<p>December  5, 2015 at 07:00:00am</p></header><div class="content"><p>I’d like to get a sense from contributors to the standard library if they feel that the functionality in https://github.com/paulyoung/OptionalEquatableCollection has a place there.<br></p><p><br>The project provides Optional variants of the existing implementations of the &quot;equal to” operator (==) for Array, Dictionary, and Set.<br></p><p><br>My question is more concerned with the overall concept as opposed to my particular implementation.<br></p><p><br>Thanks.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-dev/attachments/20151205/624eb660/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/661c58274e3f437234236553e2dc156f?s=50"></div><header><strong>RFC: Adding Optional variants of == for collections to the std lib</strong> from <string>Martin Kühl</string> &lt;martin.kuehl at gmail.com&gt;<p>December  5, 2015 at 09:00:00pm</p></header><div class="content"><p>On 5 December 2015 at 16:38, Paul Young &lt;paulyoungonline at gmail.com&gt; wrote:<br>&gt;<br>&gt; I’d like to get a sense from contributors to the standard library if they feel that the functionality in https://github.com/paulyoung/OptionalEquatableCollection has a place there.<br>&gt;<br>&gt; The project provides Optional variants of the existing implementations of the &quot;equal to” operator (==) for Array, Dictionary, and Set.<br>&gt;<br>&gt; My question is more concerned with the overall concept as opposed to my particular implementation.<br></p><p><br>Wouldn’t this be solved automatically if collections of Equatable<br>could conform to Equatable themselves?<br>I.e. if this were valid<br></p><p>    extension Array: Equatable where Element: Equatable<br></p><p>then we wouldn’t need more special cases for (combinations of)<br>containers of Equatable elements, like the collection types currently<br>are.<br></p><p>(see also rdar://23433955)<br></p><p>Martin<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c69b8eb4df5af15923fd1647a8276890?s=50"></div><header><strong>RFC: Adding Optional variants of == for collections to the std lib</strong> from <string>John McCall</string> &lt;rjmccall at apple.com&gt;<p>December  5, 2015 at 01:00:00pm</p></header><div class="content"><p>&gt; On Dec 5, 2015, at 12:39 PM, Martin Kühl via swift-dev &lt;swift-dev at swift.org&gt; wrote:<br>&gt; On 5 December 2015 at 16:38, Paul Young &lt;paulyoungonline at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I’d like to get a sense from contributors to the standard library if they feel that the functionality in https://github.com/paulyoung/OptionalEquatableCollection has a place there.<br>&gt;&gt; <br>&gt;&gt; The project provides Optional variants of the existing implementations of the &quot;equal to” operator (==) for Array, Dictionary, and Set.<br>&gt;&gt; <br>&gt;&gt; My question is more concerned with the overall concept as opposed to my particular implementation.<br>&gt; <br>&gt; <br>&gt; Wouldn’t this be solved automatically if collections of Equatable<br>&gt; could conform to Equatable themselves?<br>&gt; I.e. if this were valid<br>&gt; <br>&gt;    extension Array: Equatable where Element: Equatable<br>&gt; <br>&gt; then we wouldn’t need more special cases for (combinations of)<br>&gt; containers of Equatable elements, like the collection types currently<br>&gt; are.<br></p><p>Yes.  This is an obvious limitation of the current system that we are eager to fix.  Unfortunately, it is blocked by deficiencies at several levels, most visibly (to us, at least) at the IRGen / metadata layer.  Addressing those is a priority for many reasons, but specifically unblocking this feature is one of them.<br></p><p>John.<br></p><p>&gt; <br>&gt; (see also rdar://23433955)<br>&gt; <br>&gt; Martin<br>&gt; _______________________________________________<br>&gt; swift-dev mailing list<br>&gt; swift-dev at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-dev<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
