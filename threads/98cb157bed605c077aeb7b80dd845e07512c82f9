<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>I know that there is this note in Commonly Rejected Changes:<br></p><p>Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br></p><p>I’d like to know why switches must be exhaustive.<br></p><p>switch someValue {<br>     <br>case …:<br>    // Do something<br>     <br>case …:<br>    // Do something else<br></p><p>default:  <br>    () // useless nop; do nothing when no pattern matched<br>}<br></p><p>// VS:<br></p><p>if case … {<br>     <br>} else if case … {<br>     <br>} else if case … {<br>     <br>} // No need for `else`<br>Can’t we make default optional, or at least on non-enum values?<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/98cb82f9/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>On non-enum values, yes I could support this. However I do not see this as a big enough issue.<br>On enum values? no way….<br></p><p>Btw this would get rid of:<br></p><p>        let bytesSend = send(…) // returns an Int<br>                <br>        switch bytesSend {<br>        case Int.min ... -1: {…}<br>        case 0: {…}<br>        case 1 ... Int.max: {…}         <br>        default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible<br>        }<br></p><p><br></p><p><br>&gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I know that there is this note in Commonly Rejected Changes:<br>&gt; <br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; <br>&gt; I’d like to know why switches must be exhaustive. <br>&gt; <br>&gt; switch someValue {<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something else<br>&gt; <br>&gt; default:  <br>&gt;     () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } // No need for `else`<br>&gt; <br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>This is clearly not a huge issue to solve, but a pitch is a pitch.<br></p><p>From Swift book we know this:<br></p><p>Switch Statements Must Be Exhaustive<br></p><p>In Swift, every possible value of the control expression’s type must match the value of at least one pattern of a case. When this simply isn’t feasible (for instance, when the control expression’s type is Int), you can include a default case to satisfy the requirement.<br>Even for enum values an optional default would mean that you don’t care about the other cases in your current switch, which basically again would be another useless nop.<br></p><p>enum A {<br>    case a, b, c<br>}<br></p><p>var value = A.a<br></p><p>switch value {<br>     <br>case .a:<br>    value = A.b<br>     <br>default:<br>    () // I don&#39;t care<br>}<br></p><p>// Do something else  <br></p><p>switch value {<br>     <br>case .b:<br>    value = A.c<br>     <br>default:<br>    () // I don&#39;t care<br>}<br>Sure the error message is there to notify you that you might forget to handle some case, but how we handle that specific case is still up to us.<br></p><p>I’d really like to know what could be dangerous here when default would be optional.<br></p><p>I can’t tell if this would have some impact on the ABI or not. I’d say it’s additive because it doesn’t break any existing code but removes an existing restriction.<br></p><p>The next thought might be an overkill (or maybe not):<br></p><p>How about making default optional everywhere + introducing a new attribute that allows the optional default on that particular enum, but by default every current existing enum should be handled exhaustively.<br></p><p>Bikeshedding:<br></p><p>enum A {<br>    case a, b, c<br>}<br></p><p>var value = A.a<br></p><p>switch value {<br>     <br>case .a:<br>    value = A.b<br>     <br>} // Error: switch must be exhaustive, consider adding a default clause<br></p><p>// VS:<br></p><p>@discardableCase enum B {<br>    case d, e, f<br>}<br></p><p>let anotherValue = B.d<br></p><p>switch anotherValue {<br>     <br>case .d:<br>    // Do something<br>     <br>case .e:<br>    // Do something else<br>         <br>} // Just fine; We don&#39;t care here about `.f`<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 3. Oktober 2016 um 12:28:58, Rien (rien at balancingrock.nl) schrieb:<br></p><p>On non-enum values, yes I could support this. However I do not see this as a big enough issue.  <br>On enum values? no way….  <br></p><p>Btw this would get rid of:  <br></p><p>let bytesSend = send(…) // returns an Int  <br></p><p>switch bytesSend {  <br>case Int.min ... -1: {…}  <br>case 0: {…}  <br>case 1 ... Int.max: {…}  <br>default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible  <br>}  <br></p><p><br></p><p><br>&gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:  <br>&gt;  <br>&gt; I know that there is this note in Commonly Rejected Changes:  <br>&gt;  <br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.  <br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.  <br>&gt;  <br>&gt; I’d like to know why switches must be exhaustive.  <br>&gt;  <br>&gt; switch someValue {  <br>&gt;  <br>&gt; case …:  <br>&gt; // Do something  <br>&gt;  <br>&gt; case …:  <br>&gt; // Do something else  <br>&gt;  <br>&gt; default:  <br>&gt; () // useless nop; do nothing when no pattern matched  <br>&gt; }  <br>&gt;  <br>&gt; // VS:  <br>&gt;  <br>&gt; if case … {  <br>&gt;  <br>&gt; } else if case … {  <br>&gt;  <br>&gt; } else if case … {  <br>&gt;  <br>&gt; } // No need for `else`  <br>&gt;  <br>&gt; Can’t we make default optional, or at least on non-enum values?  <br>&gt;  <br>&gt;  <br>&gt;  <br>&gt;  <br>&gt; --  <br>&gt; Adrian Zubarev  <br>&gt; Sent with Airmail  <br>&gt;  <br>&gt; _______________________________________________  <br>&gt; swift-evolution mailing list  <br>&gt; swift-evolution at swift.org  <br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution  <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/2b0564d1/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d172fa3c47108d84ee35a68e8d675c1?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Ross O&#39;Brien</string> &lt;narrativium+swift at gmail.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>There has been a little discussion on this before, and I think there&#39;s a<br>need for something along these lines - I&#39;ve written code where I&#39;ve used<br>&#39;guard&#39; to ensure that an Int was within a certain range, and then<br>performed a switch on the Int, requiring an ugly-looking &#39;default:<br>fatalError()&#39; at the end to dismiss the warning.<br></p><p>But exhaustive switches are also useful.<br></p><p>There was an elegant suggestion that we apply &#39;?&#39; and &#39;!&#39; to the switch<br>keyword. Basically:<br>- &#39;switch &lt;expression&gt;&#39; is exhaustive across values and enum states and the<br>compiler will warn you if you omit an enum state or default case.<br>- &#39;switch? &lt;expression&gt;&#39; is not exhaustive but the compiler should still<br>check the flow (to ensure all paths return values, that kind of thing).<br>- &#39;switch! &lt;expression&gt;&#39; is not exhaustive but it assumes one of the cases<br>will match, and crashes otherwise.<br></p><p>Basically, switch wouldn&#39;t change, but appending the &#39;?&#39; is equivalent to<br>typing &#39;default: break&#39; as your final case, and appending &#39;!&#39; is equivalent<br>to typing &#39;default: fatalError()&#39; as your final case. The meanings are<br>roughly analogous to their meanings for Optionals, so hopefully there<br>wouldn&#39;t be much confusion.<br></p><p><br>On Mon, Oct 3, 2016 at 11:55 AM, Adrian Zubarev via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; This is clearly not a huge issue to solve, but a pitch is a pitch.<br>&gt;<br>&gt; From Swift book we know this:<br>&gt;<br>&gt; *Switch Statements Must Be Exhaustive*<br>&gt;<br>&gt; In Swift, every possible value of the control expression’s type must match<br>&gt; the value of at least one pattern of a case. When this simply isn’t<br>&gt; feasible (for instance, when the control expression’s type is Int), you can<br>&gt; include a default case to satisfy the requirement.<br>&gt;<br>&gt; Even for enum values an optional default would mean that you don’t care<br>&gt; about the other cases in your current switch, which basically again would<br>&gt; be another useless nop.<br>&gt;<br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt;<br>&gt; var value = A.a<br>&gt;<br>&gt; switch value {<br>&gt;<br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;<br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt;<br>&gt; // Do something else<br>&gt;<br>&gt; switch value {<br>&gt;<br>&gt; case .b:<br>&gt;     value = A.c<br>&gt;<br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt;<br>&gt; Sure the error message is there to notify you that you might forget to<br>&gt; handle some case, but how we handle that specific case is still up to us.<br>&gt;<br>&gt; I’d really like to know what could be dangerous here when default would<br>&gt; be optional.<br>&gt;<br>&gt; I can’t tell if this would have some impact on the ABI or not. I’d say<br>&gt; it’s additive because it doesn’t break any existing code but removes an<br>&gt; existing restriction.<br>&gt; ------------------------------<br>&gt;<br>&gt; The next thought might be an overkill (or maybe not):<br>&gt;<br>&gt; How about making default optional everywhere + introducing a new<br>&gt; attribute that allows the optional default on that particular enum, but<br>&gt; by default every current existing enum should be handled exhaustively.<br>&gt;<br>&gt; Bikeshedding:<br>&gt;<br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt;<br>&gt; var value = A.a<br>&gt;<br>&gt; switch value {<br>&gt;<br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;<br>&gt; } // Error: switch must be exhaustive, consider adding a default clause<br>&gt;<br>&gt; // VS:<br>&gt;<br>&gt; @discardableCase enum B {<br>&gt;     case d, e, f<br>&gt; }<br>&gt;<br>&gt; let anotherValue = B.d<br>&gt;<br>&gt; switch anotherValue {<br>&gt;<br>&gt; case .d:<br>&gt;     // Do something<br>&gt;<br>&gt; case .e:<br>&gt;     // Do something else<br>&gt;<br>&gt; } // Just fine; We don&#39;t care here about `.f`<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; Am 3. Oktober 2016 um 12:28:58, Rien (rien at balancingrock.nl) schrieb:<br>&gt;<br>&gt; On non-enum values, yes I could support this. However I do not see this as<br>&gt; a big enough issue.<br>&gt; On enum values? no way….<br>&gt;<br>&gt; Btw this would get rid of:<br>&gt;<br>&gt; let bytesSend = send(…) // returns an Int<br>&gt;<br>&gt; switch bytesSend {<br>&gt; case Int.min ... -1: {…}<br>&gt; case 0: {…}<br>&gt; case 1 ... Int.max: {…}<br>&gt; default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; &gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt; &gt;<br>&gt; &gt; I know that there is this note in Commonly Rejected Changes:<br>&gt; &gt;<br>&gt; &gt; Remove support for default: in switch and just use case _:: default is<br>&gt; widely used, case _ is too magical, and default is widely precedented in<br>&gt; many C family languages.<br>&gt; &gt; I really like to use the switch instead of if case for pattern matching,<br>&gt; just because it’s neat block design. I do not want to remove default from<br>&gt; switches because it’s a must have and powerful feature.<br>&gt; &gt;<br>&gt; &gt; I’d like to know why switches must be exhaustive.<br>&gt; &gt;<br>&gt; &gt; switch someValue {<br>&gt; &gt;<br>&gt; &gt; case …:<br>&gt; &gt; // Do something<br>&gt; &gt;<br>&gt; &gt; case …:<br>&gt; &gt; // Do something else<br>&gt; &gt;<br>&gt; &gt; default:<br>&gt; &gt; () // useless nop; do nothing when no pattern matched<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; // VS:<br>&gt; &gt;<br>&gt; &gt; if case … {<br>&gt; &gt;<br>&gt; &gt; } else if case … {<br>&gt; &gt;<br>&gt; &gt; } else if case … {<br>&gt; &gt;<br>&gt; &gt; } // No need for `else`<br>&gt; &gt;<br>&gt; &gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; --<br>&gt; &gt; Adrian Zubarev<br>&gt; &gt; Sent with Airmail<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/006340b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/cce5c4aaa87dd6df9c22ede21d5d1ed6?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Adrian Zubarev</string> &lt;adrian.zubarev at devandartist.com&gt;<p>October  3, 2016 at 01:00:00pm</p></header><div class="content"><p>I’m not sure about the design itself, but the idea is great. I couldn’t even foresee that there might be a need for switch!. This is definitely better than my suggestion of a new attribute. I most cases I’d need switch? to replace the ugly-looking if case … { … } else if case … { … }.<br></p><p>Was there a rejected proposal on this that I missed?<br></p><p><br></p><p>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 3. Oktober 2016 um 13:16:54, Ross O&#39;Brien (narrativium+swift at gmail.com) schrieb:<br></p><p>There has been a little discussion on this before, and I think there&#39;s a need for something along these lines - I&#39;ve written code where I&#39;ve used &#39;guard&#39; to ensure that an Int was within a certain range, and then performed a switch on the Int, requiring an ugly-looking &#39;default: fatalError()&#39; at the end to dismiss the warning.<br></p><p>But exhaustive switches are also useful.<br></p><p>There was an elegant suggestion that we apply &#39;?&#39; and &#39;!&#39; to the switch keyword. Basically:<br>- &#39;switch &lt;expression&gt;&#39; is exhaustive across values and enum states and the compiler will warn you if you omit an enum state or default case.<br>- &#39;switch? &lt;expression&gt;&#39; is not exhaustive but the compiler should still check the flow (to ensure all paths return values, that kind of thing).<br>- &#39;switch! &lt;expression&gt;&#39; is not exhaustive but it assumes one of the cases will match, and crashes otherwise.<br></p><p>Basically, switch wouldn&#39;t change, but appending the &#39;?&#39; is equivalent to typing &#39;default: break&#39; as your final case, and appending &#39;!&#39; is equivalent to typing &#39;default: fatalError()&#39; as your final case. The meanings are roughly analogous to their meanings for Optionals, so hopefully there wouldn&#39;t be much confusion.<br></p><p><br>On Mon, Oct 3, 2016 at 11:55 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>This is clearly not a huge issue to solve, but a pitch is a pitch.<br></p><p>From Swift book we know this:<br></p><p>Switch Statements Must Be Exhaustive<br></p><p>In Swift, every possible value of the control expression’s type must match the value of at least one pattern of a case. When this simply isn’t feasible (for instance, when the control expression’s type is Int), you can include a default case to satisfy the requirement.<br>Even for enum values an optional default would mean that you don’t care about the other cases in your current switch, which basically again would be another useless nop.<br></p><p>enum A {<br>    case a, b, c<br>}<br></p><p>var value = A.a<br></p><p>switch value {<br>      <br>case .a:<br>    value = A.b<br>      <br>default:<br>    () // I don&#39;t care<br>}<br></p><p>// Do something else   <br></p><p>switch value {<br>      <br>case .b:<br>    value = A.c<br>      <br>default:<br>    () // I don&#39;t care<br>}<br>Sure the error message is there to notify you that you might forget to handle some case, but how we handle that specific case is still up to us.<br></p><p>I’d really like to know what could be dangerous here when default would be optional.<br></p><p>I can’t tell if this would have some impact on the ABI or not. I’d say it’s additive because it doesn’t break any existing code but removes an existing restriction.<br></p><p>The next thought might be an overkill (or maybe not):<br></p><p>How about making default optional everywhere + introducing a new attribute that allows the optional default on that particular enum, but by default every current existing enum should be handled exhaustively.<br></p><p>Bikeshedding:<br></p><p>enum A {<br>    case a, b, c<br>}<br></p><p>var value = A.a<br></p><p>switch value {<br>      <br>case .a:<br>    value = A.b<br>      <br>} // Error: switch must be exhaustive, consider adding a default clause<br></p><p>// VS:<br></p><p>@discardableCase enum B {<br>    case d, e, f<br>}<br></p><p>let anotherValue = B.d<br></p><p>switch anotherValue {<br>      <br>case .d:<br>    // Do something<br>      <br>case .e:<br>    // Do something else<br>          <br>} // Just fine; We don&#39;t care here about `.f`<br></p><p><br>-- <br>Adrian Zubarev<br>Sent with Airmail<br></p><p>Am 3. Oktober 2016 um 12:28:58, Rien (rien at balancingrock.nl) schrieb:<br></p><p>On non-enum values, yes I could support this. However I do not see this as a big enough issue.<br>On enum values? no way….<br></p><p>Btw this would get rid of:<br></p><p>let bytesSend = send(…) // returns an Int<br></p><p>switch bytesSend {<br>case Int.min ... -1: {…}<br>case 0: {…}<br>case 1 ... Int.max: {…}<br>default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible<br>}<br></p><p><br></p><p><br>&gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I know that there is this note in Commonly Rejected Changes:<br>&gt;<br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;<br>&gt; I’d like to know why switches must be exhaustive.<br>&gt;<br>&gt; switch someValue {<br>&gt;<br>&gt; case …:<br>&gt; // Do something<br>&gt;<br>&gt; case …:<br>&gt; // Do something else<br>&gt;<br>&gt; default:<br>&gt; () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt;<br>&gt; // VS:<br>&gt;<br>&gt; if case … {<br>&gt;<br>&gt; } else if case … {<br>&gt;<br>&gt; } else if case … {<br>&gt;<br>&gt; } // No need for `else`<br>&gt;<br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>_______________________________________________<br>swift-evolution mailing list<br>swift-evolution at swift.org<br>https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p><br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/8e52282f/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>October  3, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On 03 Oct 2016, at 13:16, Ross O&#39;Brien &lt;narrativium+swift at gmail.com&gt; wrote:<br>&gt; <br>&gt; There has been a little discussion on this before, and I think there&#39;s a need for something along these lines - I&#39;ve written code where I&#39;ve used &#39;guard&#39; to ensure that an Int was within a certain range, and then performed a switch on the Int, requiring an ugly-looking &#39;default: fatalError()&#39; at the end to dismiss the warning.<br>&gt; <br>&gt; But exhaustive switches are also useful.<br>&gt; <br>&gt; There was an elegant suggestion that we apply &#39;?&#39; and &#39;!&#39; to the switch keyword. Basically:<br>&gt; - &#39;switch &lt;expression&gt;&#39; is exhaustive across values and enum states and the compiler will warn you if you omit an enum state or default case.<br>&gt; - &#39;switch? &lt;expression&gt;&#39; is not exhaustive but the compiler should still check the flow (to ensure all paths return values, that kind of thing).<br></p><p>Swift: The questionable language… lol<br></p><p>&gt; - &#39;switch! &lt;expression&gt;&#39; is not exhaustive but it assumes one of the cases will match, and crashes otherwise.<br>&gt; <br>&gt; Basically, switch wouldn&#39;t change, but appending the &#39;?&#39; is equivalent to typing &#39;default: break&#39; as your final case, and appending &#39;!&#39; is equivalent to typing &#39;default: fatalError()&#39; as your final case. The meanings are roughly analogous to their meanings for Optionals, so hopefully there wouldn&#39;t be much confusion.<br>&gt; <br></p><p>Though I am not 100% on the “feel” of this, it would work imo.<br></p><p>Rien.<br></p><p>&gt; <br>&gt; On Mon, Oct 3, 2016 at 11:55 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; This is clearly not a huge issue to solve, but a pitch is a pitch.<br>&gt; <br>&gt; From Swift book we know this:<br>&gt; <br>&gt; Switch Statements Must Be Exhaustive<br>&gt; <br>&gt; In Swift, every possible value of the control expression’s type must match the value of at least one pattern of a case. When this simply isn’t feasible (for instance, when the control expression’s type is Int), you can include a default case to satisfy the requirement.<br>&gt; <br>&gt; Even for enum values an optional default would mean that you don’t care about the other cases in your current switch, which basically again would be another useless nop.<br>&gt; <br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt; <br>&gt; var value = A.a<br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;      <br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt; <br>&gt; // Do something else  <br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .b:<br>&gt;     value = A.c<br>&gt;      <br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt; <br>&gt; Sure the error message is there to notify you that you might forget to handle some case, but how we handle that specific case is still up to us.<br>&gt; <br>&gt; I’d really like to know what could be dangerous here when default would be optional.<br>&gt; <br>&gt; I can’t tell if this would have some impact on the ABI or not. I’d say it’s additive because it doesn’t break any existing code but removes an existing restriction.<br>&gt; <br>&gt; The next thought might be an overkill (or maybe not):<br>&gt; <br>&gt; How about making default optional everywhere + introducing a new attribute that allows the optional default on that particular enum, but by default every current existing enum should be handled exhaustively.<br>&gt; <br>&gt; Bikeshedding:<br>&gt; <br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt; <br>&gt; var value = A.a<br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;      <br>&gt; } // Error: switch must be exhaustive, consider adding a default clause<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; @discardableCase enum B {<br>&gt;     case d, e, f<br>&gt; }<br>&gt; <br>&gt; let anotherValue = B.d<br>&gt; <br>&gt; switch anotherValue {<br>&gt;      <br>&gt; case .d:<br>&gt;     // Do something<br>&gt;      <br>&gt; case .e:<br>&gt;     // Do something else<br>&gt;          <br>&gt; } // Just fine; We don&#39;t care here about `.f`<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 3. Oktober 2016 um 12:28:58, Rien (rien at balancingrock.nl) schrieb:<br>&gt; <br>&gt;&gt; On non-enum values, yes I could support this. However I do not see this as a big enough issue. <br>&gt;&gt; On enum values? no way…. <br>&gt;&gt; <br>&gt;&gt; Btw this would get rid of: <br>&gt;&gt; <br>&gt;&gt; let bytesSend = send(…) // returns an Int <br>&gt;&gt; <br>&gt;&gt; switch bytesSend { <br>&gt;&gt; case Int.min ... -1: {…} <br>&gt;&gt; case 0: {…} <br>&gt;&gt; case 1 ... Int.max: {…} <br>&gt;&gt; default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible <br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote: <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; I know that there is this note in Commonly Rejected Changes: <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages. <br>&gt;&gt; &gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature. <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; switch someValue { <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; case …: <br>&gt;&gt; &gt; // Do something <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; case …: <br>&gt;&gt; &gt; // Do something else <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; default: <br>&gt;&gt; &gt; () // useless nop; do nothing when no pattern matched <br>&gt;&gt; &gt; } <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; // VS: <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; if case … { <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; } else if case … { <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; } else if case … { <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; } // No need for `else` <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; Can’t we make default optional, or at least on non-enum values? <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; -- <br>&gt;&gt; &gt; Adrian Zubarev <br>&gt;&gt; &gt; Sent with Airmail <br>&gt;&gt; &gt; <br>&gt;&gt; &gt; _______________________________________________ <br>&gt;&gt; &gt; swift-evolution mailing list <br>&gt;&gt; &gt; swift-evolution at swift.org <br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution <br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/eddffe5cd2c817d61892d77edf66b6b2?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Rien</string> &lt;Rien at Balancingrock.nl&gt;<p>October  3, 2016 at 01:00:00pm</p></header><div class="content"><p>In my code, I ‘use’ the forced coverage of the case’s to be reminded of area’s where I have to update my code when the enum’s change.<br>I.e. choosing for an enum solution is partly motivated by the factor that case-coverage has to be complete.<br>I’d hate to miss that.<br></p><p>Rien.<br></p><p>&gt; On 03 Oct 2016, at 12:55, Adrian Zubarev &lt;adrian.zubarev at devandartist.com&gt; wrote:<br>&gt; <br>&gt; This is clearly not a huge issue to solve, but a pitch is a pitch.<br>&gt; <br>&gt; From Swift book we know this:<br>&gt; <br>&gt; Switch Statements Must Be Exhaustive<br>&gt; <br>&gt; In Swift, every possible value of the control expression’s type must match the value of at least one pattern of a case. When this simply isn’t feasible (for instance, when the control expression’s type is Int), you can include a default case to satisfy the requirement.<br>&gt; Even for enum values an optional default would mean that you don’t care about the other cases in your current switch, which basically again would be another useless nop.<br>&gt; <br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt; <br>&gt; var value = A.a<br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;      <br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt; <br>&gt; // Do something else  <br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .b:<br>&gt;     value = A.c<br>&gt;      <br>&gt; default:<br>&gt;     () // I don&#39;t care<br>&gt; }<br>&gt; <br>&gt; Sure the error message is there to notify you that you might forget to handle some case, but how we handle that specific case is still up to us.<br>&gt; <br>&gt; I’d really like to know what could be dangerous here when default would be optional.<br>&gt; <br>&gt; I can’t tell if this would have some impact on the ABI or not. I’d say it’s additive because it doesn’t break any existing code but removes an existing restriction. <br>&gt; <br>&gt; The next thought might be an overkill (or maybe not):<br>&gt; <br>&gt; How about making default optional everywhere + introducing a new attribute that allows the optional default on that particular enum, but by default every current existing enum should be handled exhaustively.<br>&gt; <br>&gt; Bikeshedding:<br>&gt; <br>&gt; enum A {<br>&gt;     case a, b, c<br>&gt; }<br>&gt; <br>&gt; var value = A.a<br>&gt; <br>&gt; switch value {<br>&gt;      <br>&gt; case .a:<br>&gt;     value = A.b<br>&gt;      <br>&gt; } // Error: switch must be exhaustive, consider adding a default clause<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; @discardableCase enum B {<br>&gt;     case d, e, f<br>&gt; }<br>&gt; <br>&gt; let anotherValue = B.d<br>&gt; <br>&gt; switch anotherValue {<br>&gt;      <br>&gt; case .d:<br>&gt;     // Do something<br>&gt;      <br>&gt; case .e:<br>&gt;     // Do something else<br>&gt;          <br>&gt; } // Just fine; We don&#39;t care here about `.f`<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; Am 3. Oktober 2016 um 12:28:58, Rien (rien at balancingrock.nl) schrieb:<br>&gt; <br>&gt;&gt; On non-enum values, yes I could support this. However I do not see this as a big enough issue. <br>&gt;&gt; On enum values? no way…. <br>&gt;&gt; <br>&gt;&gt; Btw this would get rid of: <br>&gt;&gt; <br>&gt;&gt; let bytesSend = send(…) // returns an Int <br>&gt;&gt; <br>&gt;&gt; switch bytesSend { <br>&gt;&gt; case Int.min ... -1: {…} <br>&gt;&gt; case 0: {…} <br>&gt;&gt; case 1 ... Int.max: {…}  <br>&gt;&gt; default: break // &lt;&lt;&lt;&lt;&lt;&lt; Imposible <br>&gt;&gt; } <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; &gt; On 03 Oct 2016, at 12:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote: <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; I know that there is this note in Commonly Rejected Changes: <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages. <br>&gt;&gt; &gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature. <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; I’d like to know why switches must be exhaustive.  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; switch someValue { <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; case …: <br>&gt;&gt; &gt; // Do something <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; case …: <br>&gt;&gt; &gt; // Do something else <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; default:  <br>&gt;&gt; &gt; () // useless nop; do nothing when no pattern matched <br>&gt;&gt; &gt; } <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; // VS: <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; if case … { <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; } else if case … { <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; } else if case … { <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; } // No need for `else` <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; Can’t we make default optional, or at least on non-enum values? <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; --  <br>&gt;&gt; &gt; Adrian Zubarev <br>&gt;&gt; &gt; Sent with Airmail <br>&gt;&gt; &gt;  <br>&gt;&gt; &gt; _______________________________________________ <br>&gt;&gt; &gt; swift-evolution mailing list <br>&gt;&gt; &gt; swift-evolution at swift.org <br>&gt;&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution <br>&gt;&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/be09ed656d5d90501c958b001261f218?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Jeremy Pereira</string> &lt;jeremy.j.pereira at googlemail.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On 3 Oct 2016, at 11:14, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I know that there is this note in Commonly Rejected Changes:<br>&gt; <br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; <br>&gt; I’d like to know why switches must be exhaustive. <br>&gt; <br>&gt; switch someValue {<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something else<br>&gt; <br>&gt; default:  <br>&gt;     () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } // No need for `else`<br>&gt; <br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; <br>&gt; <br></p><p>I absolutely cannot see why <br></p><p>    default: break<br></p><p>doesn’t already do this for you. It’s not a useless no-op, it signifies to the compiler that you really do want to ignore the other cases and it’s not a mistake.<br></p><p>I think there is a case for allowing default: break to be at the top of the switch but other than that, I like the fact that not having a an explicitly exhaustive switch generates an error.<br></p><p><br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>-1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt; <br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; <br>&gt; I’d like to know why switches must be exhaustive. <br>&gt; <br>&gt; switch someValue {<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something else<br>&gt; <br>&gt; default:  <br>&gt;     () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } // No need for `else`<br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/9065bb83/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>-1 from me as well. This suggestion falls into the same category as those<br>about making `else` optional after `guard`, which is repeatedly rejected.<br>Since code is read more often than written, explicit handling of the<br>default case never hurts and can increase clarity. Not having to write<br>`default: break` offers no help in writing correct code and IMO can&#39;t<br>justify new syntax or the changing of a well-known control statement.<br></p><p>On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want<br>&gt; to be able to ignore cases that “can’t happen” (so say we, writer of bugs)<br>&gt; when they’re clearly in the domain of possible values that can be fed to a<br>&gt; switch-case.  Exhaustiveness guarantees wellformedness of a program that<br>&gt; does happen to go wrong, and makes it much easier to verify the correctness<br>&gt; of the flow of control of the containing block because all points from the<br>&gt; switch must be covered.  We also don’t have the type-level tools to<br>&gt; convince the checker to allow you to remove unreachable cases.  If it’s<br>&gt; really a problem that you are writing default cases everywhere, just<br>&gt; bailout in a fatal error with a nice description.  It never hurts.<br>&gt;<br>&gt; ~Robert Widmann<br>&gt;<br>&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; I know that there is this note in Commonly Rejected Changes<br>&gt; &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;<br>&gt; :<br>&gt;<br>&gt; Remove support for default: in switch and just use case _:: default is<br>&gt; widely used, case _ is too magical, and default is widely precedented in<br>&gt; many C family languages.<br>&gt;<br>&gt; I really like to use the switch instead of if case for pattern matching,<br>&gt; just because it’s neat block design. I do not want to remove default from<br>&gt; switches because it’s a must have and powerful feature.<br>&gt;<br>&gt; I’d like to know why switches must be exhaustive.<br>&gt;<br>&gt; switch someValue {<br>&gt;<br>&gt; case …:<br>&gt;     // Do something<br>&gt;<br>&gt; case …:<br>&gt;     // Do something else<br>&gt;<br>&gt; default:<br>&gt;     () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt;<br>&gt; // VS:<br>&gt;<br>&gt; if case … {<br>&gt;<br>&gt; } else if case … {<br>&gt;<br>&gt; } else if case … {<br>&gt;<br>&gt; } // No need for `else`<br>&gt;<br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;<br>&gt;<br>&gt;<br>&gt; --<br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/5f84a8fc/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>October  3, 2016 at 12:00:00pm</p></header><div class="content"><p>I agree with previous commenters.  I very much support improved exhaustiveness analysis reducing the circumstances where a default clause is necessary.  But I think requiring it unless the compiler can *prove* you have covered every possibility communicates important information that facilitates reasoning to readers / maintainers of the code.<br></p><p><br>&gt; On Oct 3, 2016, at 12:41 PM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt; <br>&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt;&gt; <br>&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt; <br>&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt; <br>&gt;&gt; switch someValue {<br>&gt;&gt;      <br>&gt;&gt; case …:<br>&gt;&gt;     // Do something<br>&gt;&gt;      <br>&gt;&gt; case …:<br>&gt;&gt;     // Do something else<br>&gt;&gt; <br>&gt;&gt; default:  <br>&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // VS:<br>&gt;&gt; <br>&gt;&gt; if case … {<br>&gt;&gt;      <br>&gt;&gt; } else if case … {<br>&gt;&gt;      <br>&gt;&gt; } else if case … {<br>&gt;&gt;      <br>&gt;&gt; } // No need for `else`<br>&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/eef4444b/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/92adc26e3003cac88ca299a08d35b2b3?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>João Pinheiro</string> &lt;joao at joaopinheiro.org&gt;<p>October  3, 2016 at 07:00:00pm</p></header><div class="content"><p>-1 from me too.<br></p><p>Avoiding having to write &quot;default: break&quot; isn&#39;t a good justification to introduce new syntax. It would make the understanding of case switches harder without providing any real benefit for the syntax bloat.<br></p><p>João Pinheiro<br></p><p><br>&gt; On 03 Oct 2016, at 19:41, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt; <br>&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt;&gt; <br>&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt; <br>&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt; <br>&gt;&gt; switch someValue {<br>&gt;&gt;      <br>&gt;&gt; case …:<br>&gt;&gt;     // Do something<br>&gt;&gt;      <br>&gt;&gt; case …:<br>&gt;&gt;     // Do something else<br>&gt;&gt; <br>&gt;&gt; default:  <br>&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; // VS:<br>&gt;&gt; <br>&gt;&gt; if case … {<br>&gt;&gt;      <br>&gt;&gt; } else if case … {<br>&gt;&gt;      <br>&gt;&gt; } else if case … {<br>&gt;&gt;      <br>&gt;&gt; } // No need for `else`<br>&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; Adrian Zubarev<br>&gt;&gt; Sent with Airmail<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/bcbc09ca/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>October  3, 2016 at 07:00:00pm</p></header><div class="content"><p>Instead of using `fatalError(_:file:line:)` in `default` cases, would a public `unreachable()` function be more efficient?<br></p><p>e.g. &lt;https://github.com/apple/swift/pull/2379&gt;<br></p><p>-- Ben<br></p><p>&gt; On 3 Oct 2016, at 18:50, João Pinheiro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 from me too.<br>&gt; <br>&gt; Avoiding having to write &quot;default: break&quot; isn&#39;t a good justification to introduce new syntax. It would make the understanding of case switches harder without providing any real benefit for the syntax bloat.<br>&gt; <br>&gt; João Pinheiro<br>&gt; <br>&gt; <br>&gt;&gt; On 03 Oct 2016, at 19:41, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt;&gt; <br>&gt;&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; switch someValue {<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;     // Do something<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;     // Do something else<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; default:  <br>&gt;&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; // VS:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; if case … {<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;      <br>&gt;&gt;&gt; } // No need for `else`<br>&gt;&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt; Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/62dfadc0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 03:00:00pm</p></header><div class="content"><p>fatalError has defaults for its arguments so it can be used as a nullary unreachable function already.<br></p><p>~Robert Widmann<br></p><p>&gt; On Oct 3, 2016, at 2:50 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Instead of using `fatalError(_:file:line:)` in `default` cases, would a public `unreachable()` function be more efficient?<br>&gt; <br>&gt; e.g. &lt;https://github.com/apple/swift/pull/2379 &lt;https://github.com/apple/swift/pull/2379&gt;&gt;<br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt;&gt; On 3 Oct 2016, at 18:50, João Pinheiro via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 from me too.<br>&gt;&gt; <br>&gt;&gt; Avoiding having to write &quot;default: break&quot; isn&#39;t a good justification to introduce new syntax. It would make the understanding of case switches harder without providing any real benefit for the syntax bloat.<br>&gt;&gt; <br>&gt;&gt; João Pinheiro<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On 03 Oct 2016, at 19:41, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt;&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; switch someValue {<br>&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;     // Do something<br>&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;     // Do something else<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; default:  <br>&gt;&gt;&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; // VS:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; if case … {<br>&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt; } // No need for `else`<br>&gt;&gt;&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt; Sent with Airmail<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/1c038b41/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bdd257c9369fb68e1d06923d10ff789e?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Ben Rimmington</string> &lt;me at benrimmington.com&gt;<p>October  3, 2016 at 08:00:00pm</p></header><div class="content"><p>Yes, but &lt;https://github.com/apple/swift/pull/2379&gt; uses `Builtin.unreachable()` because it:<br></p><p>&gt; &quot;Saves a bit of code size in the standard library by eliminating some<br>&gt; static strings and function calls.&quot;<br></p><p>Clang has both `__builtin_unreachable()` and `llvm_unreachable()`:<br></p><p>&lt;http://clang.llvm.org/docs/LanguageExtensions.html#builtin-unreachable&gt;<br></p><p>&lt;http://llvm.org/docs/CodingStandards.html#assert-liberally&gt;<br></p><p>-- Ben<br></p><p>&gt; On 3 Oct 2016, at 20:01, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt; <br>&gt; fatalError has defaults for its arguments so it can be used as a nullary unreachable function already.<br>&gt; <br>&gt; ~Robert Widmann<br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 2:50 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Instead of using `fatalError(_:file:line:)` in `default` cases, would a public `unreachable()` function be more efficient?<br>&gt;&gt; <br>&gt;&gt; e.g. &lt;https://github.com/apple/swift/pull/2379 &lt;https://github.com/apple/swift/pull/2379&gt;&gt;<br>&gt;&gt; <br>&gt;&gt; -- Ben<br>&gt;&gt; <br>&gt;&gt;&gt; On 3 Oct 2016, at 18:50, João Pinheiro via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 from me too.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Avoiding having to write &quot;default: break&quot; isn&#39;t a good justification to introduce new syntax. It would make the understanding of case switches harder without providing any real benefit for the syntax bloat.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; João Pinheiro<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 03 Oct 2016, at 19:41, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt;&gt;&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; switch someValue {<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;&gt;     // Do something<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;&gt;     // Do something else<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; default:  <br>&gt;&gt;&gt;&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; // VS:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; if case … {<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt; } // No need for `else`<br>&gt;&gt;&gt;&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/3a279456/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/0e8516d3703e35b7df26986815b23e7a?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Robert Widmann</string> &lt;devteam.codafi at gmail.com&gt;<p>October  3, 2016 at 03:00:00pm</p></header><div class="content"><p>If you&#39;re as concerned about code size as stdlib is then I&#39;d be interested to know what you&#39;re writing!  These are paths to terminate your application which is necessarily going to be orders of magnitude larger than stdlib is and so can &quot;eat the cost&quot; of a few more global db&#39;s, some loads, and a call or three.  <br></p><p>~Robert Widmann<br></p><p>2016/10/03 15:14、Ben Rimmington &lt;me at benrimmington.com&gt; のメッセージ:<br></p><p>&gt; Yes, but &lt;https://github.com/apple/swift/pull/2379&gt; uses `Builtin.unreachable()` because it:<br>&gt; <br>&gt;&gt; &quot;Saves a bit of code size in the standard library by eliminating some<br>&gt;&gt; static strings and function calls.&quot;<br>&gt; <br>&gt; Clang has both `__builtin_unreachable()` and `llvm_unreachable()`:<br>&gt; <br>&gt; &lt;http://clang.llvm.org/docs/LanguageExtensions.html#builtin-unreachable&gt;<br>&gt; <br>&gt; &lt;http://llvm.org/docs/CodingStandards.html#assert-liberally&gt;<br>&gt; <br>&gt; -- Ben<br>&gt; <br>&gt;&gt; On 3 Oct 2016, at 20:01, Robert Widmann &lt;devteam.codafi at gmail.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; fatalError has defaults for its arguments so it can be used as a nullary unreachable function already.<br>&gt;&gt; <br>&gt;&gt; ~Robert Widmann<br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 2:50 PM, Ben Rimmington via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Instead of using `fatalError(_:file:line:)` in `default` cases, would a public `unreachable()` function be more efficient?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; e.g. &lt;https://github.com/apple/swift/pull/2379&gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- Ben<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On 3 Oct 2016, at 18:50, João Pinheiro via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; -1 from me too.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Avoiding having to write &quot;default: break&quot; isn&#39;t a good justification to introduce new syntax. It would make the understanding of case switches harder without providing any real benefit for the syntax bloat.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; João Pinheiro<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On 03 Oct 2016, at 19:41, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; -1 from me as well. This suggestion falls into the same category as those about making `else` optional after `guard`, which is repeatedly rejected. Since code is read more often than written, explicit handling of the default case never hurts and can increase clarity. Not having to write `default: break` offers no help in writing correct code and IMO can&#39;t justify new syntax or the changing of a well-known control statement.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Oct 3, 2016 at 11:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; ~Robert Widmann<br>&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; On Oct 3, 2016, at 6:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I know that there is this note in Commonly Rejected Changes:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; I’d like to know why switches must be exhaustive. <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; switch someValue {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     // Do something<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; case …:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     // Do something else<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; default:  <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;     () // useless nop; do nothing when no pattern matched<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; }<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; // VS:<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; if case … {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; } else if case … {<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;      <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; } // No need for `else`<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; -- <br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Adrian Zubarev<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sent with Airmail<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/0f4cade2/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>October  3, 2016 at 06:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 9:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br></p><p>I can see the utility of a `switch!` construct that introduces the &#39;default: fatalError()&#39; on your behalf. No matter how much analysis we do, there are always going to be cases with &#39;where&#39; guards and expr patterns that we can&#39;t decidably analyze for exhaustiveness, for which runtime safety is the best we can offer. (That said, it&#39;d fall squarely in the &quot;sugar&quot; bucket, so while it&#39;s an interesting idea to explore, it&#39;s not immediate Swift 4 Phase 1 material.)<br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>October  3, 2016 at 08:00:00pm</p></header><div class="content"><p>&gt; On Oct 3, 2016, at 8:03 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 9:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt; <br>&gt; I can see the utility of a `switch!` construct that introduces the &#39;default: fatalError()&#39; on your behalf. No matter how much analysis we do, there are always going to be cases with &#39;where&#39; guards and expr patterns that we can&#39;t decidably analyze for exhaustiveness, for which runtime safety is the best we can offer. (That said, it&#39;d fall squarely in the &quot;sugar&quot; bucket, so while it&#39;s an interesting idea to explore, it&#39;s not immediate Swift 4 Phase 1 material.)<br></p><p>This seems to me like the perfect answer for Swift.<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d8867167dba9b648c6d0746a67bbc721?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Goffredo Marocchi</string> &lt;panajev at gmail.com&gt;<p>October  4, 2016 at 07:00:00am</p></header><div class="content"><p>The best answer is always &quot;that would be an ecumenical matter...&quot;. It works here too ;).<br></p><p>Sent from my iPhone<br></p><p>&gt; On 4 Oct 2016, at 03:44, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Oct 3, 2016, at 8:03 PM, Joe Groff via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Oct 3, 2016, at 9:39 AM, Robert Widmann via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -1 in general.  I want smarter exhaustiveness analysis, but I don’t want to be able to ignore cases that “can’t happen” (so say we, writer of bugs) when they’re clearly in the domain of possible values that can be fed to a switch-case.  Exhaustiveness guarantees wellformedness of a program that does happen to go wrong, and makes it much easier to verify the correctness of the flow of control of the containing block because all points from the switch must be covered.  We also don’t have the type-level tools to convince the checker to allow you to remove unreachable cases.  If it’s really a problem that you are writing default cases everywhere, just bailout in a fatal error with a nice description.  It never hurts.<br>&gt;&gt; <br>&gt;&gt; I can see the utility of a `switch!` construct that introduces the &#39;default: fatalError()&#39; on your behalf. No matter how much analysis we do, there are always going to be cases with &#39;where&#39; guards and expr patterns that we can&#39;t decidably analyze for exhaustiveness, for which runtime safety is the best we can offer. (That said, it&#39;d fall squarely in the &quot;sugar&quot; bucket, so while it&#39;s an interesting idea to explore, it&#39;s not immediate Swift 4 Phase 1 material.)<br>&gt; <br>&gt; This seems to me like the perfect answer for Swift.<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/fab081724d16d497369e46fe76f20e12?s=50"></div><header><strong>[Pitch] Can we make `default` on switches optional?</strong> from <string>Charles Srstka</string> &lt;cocoadev at charlessoft.com&gt;<p>October  3, 2016 at 02:00:00pm</p></header><div class="content"><p>-1. The “default: break” is not only not difficult to write, it clearly communicates the programmer’s intent to only handle a subset of the cases. Without it, it is impossible to know whether that was intended, or by accident. Furthermore, the exhaustiveness by default can catch many mistakes, including after an additional case is added to an enum.<br></p><p>Charles<br></p><p>&gt; On Oct 3, 2016, at 5:14 AM, Adrian Zubarev via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I know that there is this note in Commonly Rejected Changes &lt;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&gt;:<br>&gt; <br>&gt; Remove support for default: in switch and just use case _:: default is widely used, case _ is too magical, and default is widely precedented in many C family languages.<br>&gt; I really like to use the switch instead of if case for pattern matching, just because it’s neat block design. I do not want to remove default from switches because it’s a must have and powerful feature.<br>&gt; <br>&gt; I’d like to know why switches must be exhaustive. <br>&gt; <br>&gt; switch someValue {<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something<br>&gt;      <br>&gt; case …:<br>&gt;     // Do something else<br>&gt; <br>&gt; default:  <br>&gt;     () // useless nop; do nothing when no pattern matched<br>&gt; }<br>&gt; <br>&gt; // VS:<br>&gt; <br>&gt; if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } else if case … {<br>&gt;      <br>&gt; } // No need for `else`<br>&gt; Can’t we make default optional, or at least on non-enum values?<br>&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Adrian Zubarev<br>&gt; Sent with Airmail<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20161003/704ad9de/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
