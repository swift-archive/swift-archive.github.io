<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Lazily populated dictionary</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 28, 2015 at 07:00:00pm</p></header><div class="content"><p>Hi there!<br></p><p>In my app, I have a very simple class that serves as a key-value cache. The whole thing is basically a lazily populated [String: AVAudioPCMBuffer] dictionary with a String -&gt; AVAudioPCMBuffer function that generates values as needed:<br></p><p>final class PlayerAudioCache {<br>    <br>    // MARK: Retrieving audio buffers<br>    <br>    func audioBufferForAssetWithName(name: String) -&gt; AVAudioPCMBuffer? {<br>        addAudioBufferForAssetWithNameIfNeeded(name)<br>        return cachedAudioBuffers[name]<br>    }<br>    <br>    // MARK: Adding audio buffers<br>    <br>    func addAudioBufferForAssetWithNameIfNeeded(name: String) {<br>        guard cachedAudioBuffers[name] == nil else { return }<br>        addAudioBufferForAssetWithName(name)<br>    }<br>    <br>    private func addAudioBufferForAssetWithName(name: String) {<br>        guard let dataAsset = NSDataAsset(name: name) else { fatalError() }<br>        cachedAudioBuffers[name] = dataAsset.map { URL -&gt; AVAudioPCMBuffer in<br>            AVAudioPCMBuffer(contentsOfURL: URL)!<br>        }<br>    }<br>    <br>    private var cachedAudioBuffers: [String: AVAudioPCMBuffer] = [:]<br>    <br>}<br></p><p>I feel like there is a pre-made type in Swift’s standard library for what I’m doing here. Am I right?<br></p><p>Ideas? Pointers?<br></p><p>Thank you!<br></p><p>R+<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151228/96de82e0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>Lazily populated dictionary</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>December 28, 2015 at 12:00:00pm</p></header><div class="content"><p>Maybe something like this?<br></p><p>struct KeyedLazyCache&lt;T: Hashable, U&gt; {<br>    var backingDictionary: Dictionary&lt;T, U&gt;<br>    var builderDictionary: Dictionary&lt;T, () -&gt; U&gt;<br>    mutating func clear() {backingDictionary.removeAll()}<br>    mutating func valueForKey(key: T) -&gt; U? {<br>        if let value = backingDictionary[key] {return value}<br>        if let builder = builderDictionary[key] {<br>            let value = builder()<br>            backingDictionary[key] = value<br>            return value<br>        }<br>        return nil<br>    }<br>}<br></p><p>-- E<br></p><p>&gt; On Dec 28, 2015, at 11:36 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there!<br>&gt; <br>&gt; In my app, I have a very simple class that serves as a key-value cache. The whole thing is basically a lazily populated [String: AVAudioPCMBuffer] dictionary with a String -&gt; AVAudioPCMBuffer function that generates values as needed:<br>&gt; <br>&gt; final class PlayerAudioCache {<br>&gt;     <br>&gt;     // MARK: Retrieving audio buffers<br>&gt;     <br>&gt;     func audioBufferForAssetWithName(name: String) -&gt; AVAudioPCMBuffer? {<br>&gt;         addAudioBufferForAssetWithNameIfNeeded(name)<br>&gt;         return cachedAudioBuffers[name]<br>&gt;     }<br>&gt;     <br>&gt;     // MARK: Adding audio buffers<br>&gt;     <br>&gt;     func addAudioBufferForAssetWithNameIfNeeded(name: String) {<br>&gt;         guard cachedAudioBuffers[name] == nil else { return }<br>&gt;         addAudioBufferForAssetWithName(name)<br>&gt;     }<br>&gt;     <br>&gt;     private func addAudioBufferForAssetWithName(name: String) {<br>&gt;         guard let dataAsset = NSDataAsset(name: name) else { fatalError() }<br>&gt;         cachedAudioBuffers[name] = dataAsset.map { URL -&gt; AVAudioPCMBuffer in<br>&gt;             AVAudioPCMBuffer(contentsOfURL: URL)!<br>&gt;         }<br>&gt;     }<br>&gt;     <br>&gt;     private var cachedAudioBuffers: [String: AVAudioPCMBuffer] = [:]<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; I feel like there is a pre-made type in Swift’s standard library for what I’m doing here. Am I right?<br>&gt; <br>&gt; Ideas? Pointers?<br>&gt; <br>&gt; Thank you!<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151228/61c73fac/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/f5228ad4a1fad94f1a7d3d05b0c0ff6a?s=50"></div><header><strong>Lazily populated dictionary</strong> from <string>Donnacha Oisín Kidney</string> &lt;oisin.kidney at gmail.com&gt;<p>December 28, 2015 at 07:00:00pm</p></header><div class="content"><p>This version kind of mirrors Python’s defaultdict:<br></p><p>final class DefaultDict&lt;Key: Hashable, Value&gt;: CollectionType, CustomStringConvertible {<br>  private var store: [Key:Value]<br>  private let factory: Key -&gt; Value<br>  subscript(i: DictionaryIndex&lt;Key,Value&gt;) -&gt; (Key,Value) {<br>    return store[i]<br>  }<br>  var startIndex: DictionaryIndex&lt;Key,Value&gt; { return store.startIndex }<br>  var endIndex: DictionaryIndex&lt;Key,Value&gt; { return store.endIndex }<br>  func generate() -&gt; DictionaryGenerator&lt;Key,Value&gt; {<br>    return store.generate()<br>  }<br>  subscript(key: Key) -&gt; Value {<br>    get {<br>      if let x = store[key] { return x }<br>      let x = factory(key)<br>      self.store[key] = x<br>      return x<br>    } set {<br>      store[key] = newValue<br>    }<br>  }<br>  init(_ def: Value) {<br>    self.store = [:]<br>    self.factory = { _ in def }<br>  }<br>  init(_ fac: Key -&gt; Value) {<br>    self.store = [:]<br>    self.factory = fac<br>  }<br>  init(_ fac: () -&gt; Value) {<br>    self.store = [:]<br>    self.factory = { _ in fac() }<br>  }<br>  var description: String { return store.description }<br>}<br></p><p>let dict = DefaultDict&lt;Character,Int&gt;(0)<br>for c in &quot;abcdgeaaa&quot;.characters { dict[c] += 1 }<br>dict // [&quot;b&quot;: 1, &quot;e&quot;: 1, &quot;a&quot;: 4, &quot;g&quot;: 1, &quot;d&quot;: 1, &quot;c&quot;: 1]<br></p><p>&gt; On 28 Dec 2015, at 19:26, Erica Sadun via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Maybe something like this?<br>&gt; <br>&gt; struct KeyedLazyCache&lt;T: Hashable, U&gt; {<br>&gt;     var backingDictionary: Dictionary&lt;T, U&gt;<br>&gt;     var builderDictionary: Dictionary&lt;T, () -&gt; U&gt;<br>&gt;     mutating func clear() {backingDictionary.removeAll()}<br>&gt;     mutating func valueForKey(key: T) -&gt; U? {<br>&gt;         if let value = backingDictionary[key] {return value}<br>&gt;         if let builder = builderDictionary[key] {<br>&gt;             let value = builder()<br>&gt;             backingDictionary[key] = value<br>&gt;             return value<br>&gt;         }<br>&gt;         return nil<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Dec 28, 2015, at 11:36 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi there!<br>&gt;&gt; <br>&gt;&gt; In my app, I have a very simple class that serves as a key-value cache. The whole thing is basically a lazily populated [String: AVAudioPCMBuffer] dictionary with a String -&gt; AVAudioPCMBuffer function that generates values as needed:<br>&gt;&gt; <br>&gt;&gt; final class PlayerAudioCache {<br>&gt;&gt;     <br>&gt;&gt;     // MARK: Retrieving audio buffers<br>&gt;&gt;     <br>&gt;&gt;     func audioBufferForAssetWithName(name: String) -&gt; AVAudioPCMBuffer? {<br>&gt;&gt;         addAudioBufferForAssetWithNameIfNeeded(name)<br>&gt;&gt;         return cachedAudioBuffers[name]<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     // MARK: Adding audio buffers<br>&gt;&gt;     <br>&gt;&gt;     func addAudioBufferForAssetWithNameIfNeeded(name: String) {<br>&gt;&gt;         guard cachedAudioBuffers[name] == nil else { return }<br>&gt;&gt;         addAudioBufferForAssetWithName(name)<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     private func addAudioBufferForAssetWithName(name: String) {<br>&gt;&gt;         guard let dataAsset = NSDataAsset(name: name) else { fatalError() }<br>&gt;&gt;         cachedAudioBuffers[name] = dataAsset.map { URL -&gt; AVAudioPCMBuffer in<br>&gt;&gt;             AVAudioPCMBuffer(contentsOfURL: URL)!<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     private var cachedAudioBuffers: [String: AVAudioPCMBuffer] = [:]<br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I feel like there is a pre-made type in Swift’s standard library for what I’m doing here. Am I right?<br>&gt;&gt; <br>&gt;&gt; Ideas? Pointers?<br>&gt;&gt; <br>&gt;&gt; Thank you!<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users &lt;https://lists.swift.org/mailman/listinfo/swift-users&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151228/f230d4c3/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Lazily populated dictionary</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 28, 2015 at 08:00:00pm</p></header><div class="content"><p>That’s a nice one, Erica.<br></p><p>Does this mean there’s nothing ready-made for this in the standard library?<br></p><p>P.S. No need for the builder dictionary. A simple static function (T-&gt;U) would be more enough for my use-case.<br></p><p>R+<br></p><p>&gt; On 28 Dec 2015, at 20:26, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; <br>&gt; Maybe something like this?<br>&gt; <br>&gt; struct KeyedLazyCache&lt;T: Hashable, U&gt; {<br>&gt;     var backingDictionary: Dictionary&lt;T, U&gt;<br>&gt;     var builderDictionary: Dictionary&lt;T, () -&gt; U&gt;<br>&gt;     mutating func clear() {backingDictionary.removeAll()}<br>&gt;     mutating func valueForKey(key: T) -&gt; U? {<br>&gt;         if let value = backingDictionary[key] {return value}<br>&gt;         if let builder = builderDictionary[key] {<br>&gt;             let value = builder()<br>&gt;             backingDictionary[key] = value<br>&gt;             return value<br>&gt;         }<br>&gt;         return nil<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; -- E<br>&gt; <br>&gt;&gt; On Dec 28, 2015, at 11:36 AM, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hi there!<br>&gt;&gt; <br>&gt;&gt; In my app, I have a very simple class that serves as a key-value cache. The whole thing is basically a lazily populated [String: AVAudioPCMBuffer] dictionary with a String -&gt; AVAudioPCMBuffer function that generates values as needed:<br>&gt;&gt; <br>&gt;&gt; final class PlayerAudioCache {<br>&gt;&gt;     <br>&gt;&gt;     // MARK: Retrieving audio buffers<br>&gt;&gt;     <br>&gt;&gt;     func audioBufferForAssetWithName(name: String) -&gt; AVAudioPCMBuffer? {<br>&gt;&gt;         addAudioBufferForAssetWithNameIfNeeded(name)<br>&gt;&gt;         return cachedAudioBuffers[name]<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     // MARK: Adding audio buffers<br>&gt;&gt;     <br>&gt;&gt;     func addAudioBufferForAssetWithNameIfNeeded(name: String) {<br>&gt;&gt;         guard cachedAudioBuffers[name] == nil else { return }<br>&gt;&gt;         addAudioBufferForAssetWithName(name)<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     private func addAudioBufferForAssetWithName(name: String) {<br>&gt;&gt;         guard let dataAsset = NSDataAsset(name: name) else { fatalError() }<br>&gt;&gt;         cachedAudioBuffers[name] = dataAsset.map { URL -&gt; AVAudioPCMBuffer in<br>&gt;&gt;             AVAudioPCMBuffer(contentsOfURL: URL)!<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt;     <br>&gt;&gt;     private var cachedAudioBuffers: [String: AVAudioPCMBuffer] = [:]<br>&gt;&gt;     <br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; I feel like there is a pre-made type in Swift’s standard library for what I’m doing here. Am I right?<br>&gt;&gt; <br>&gt;&gt; Ideas? Pointers?<br>&gt;&gt; <br>&gt;&gt; Thank you!<br>&gt;&gt; <br>&gt;&gt; R+<br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-users mailing list<br>&gt;&gt; swift-users at swift.org &lt;mailto:swift-users at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-users<br>&gt; <br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151228/ea838d72/attachment.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/47e3aeeaf151d4f51ee15fc7871bf584?s=50"></div><header><strong>Lazily populated dictionary</strong> from <string>Rudolf Adamkovič</string> &lt;salutis at me.com&gt;<p>December 28, 2015 at 11:00:00pm</p></header><div class="content"><p>All right, here is the outcome:<br></p><p>https://github.com/salutis/KeyedCache/blob/master/KeyedCache.swift<br></p><p>Thanks Erica and Donnacha for examples and inspiration!<br></p><p>R+<br></p><p>&gt; On 28 Dec 2015, at 19:36, Rudolf Adamkovič via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Hi there!<br>&gt; <br>&gt; In my app, I have a very simple class that serves as a key-value cache. The whole thing is basically a lazily populated [String: AVAudioPCMBuffer] dictionary with a String -&gt; AVAudioPCMBuffer function that generates values as needed:<br>&gt; <br>&gt; final class PlayerAudioCache {<br>&gt;     <br>&gt;     // MARK: Retrieving audio buffers<br>&gt;     <br>&gt;     func audioBufferForAssetWithName(name: String) -&gt; AVAudioPCMBuffer? {<br>&gt;         addAudioBufferForAssetWithNameIfNeeded(name)<br>&gt;         return cachedAudioBuffers[name]<br>&gt;     }<br>&gt;     <br>&gt;     // MARK: Adding audio buffers<br>&gt;     <br>&gt;     func addAudioBufferForAssetWithNameIfNeeded(name: String) {<br>&gt;         guard cachedAudioBuffers[name] == nil else { return }<br>&gt;         addAudioBufferForAssetWithName(name)<br>&gt;     }<br>&gt;     <br>&gt;     private func addAudioBufferForAssetWithName(name: String) {<br>&gt;         guard let dataAsset = NSDataAsset(name: name) else { fatalError() }<br>&gt;         cachedAudioBuffers[name] = dataAsset.map { URL -&gt; AVAudioPCMBuffer in<br>&gt;             AVAudioPCMBuffer(contentsOfURL: URL)!<br>&gt;         }<br>&gt;     }<br>&gt;     <br>&gt;     private var cachedAudioBuffers: [String: AVAudioPCMBuffer] = [:]<br>&gt;     <br>&gt; }<br>&gt; <br>&gt; I feel like there is a pre-made type in Swift’s standard library for what I’m doing here. Am I right?<br>&gt; <br>&gt; Ideas? Pointers?<br>&gt; <br>&gt; Thank you!<br>&gt; <br>&gt; R+<br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-users mailing list<br>&gt; swift-users at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-users<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20151228/cf1470d1/attachment.html&gt;<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
