<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Assigning [Int] to [Any] crashes Swift 2.2</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 13, 2016 at 09:00:00pm</p></header><div class="content"><p>Just ran into a weird crash with Swift 2.2 in Xcode 7.3. It reproduces in a playground:<br></p><p>import Foundation<br>let a = [88]<br>let b: [Any] = a   // CRASH<br></p><p>In my real program, the top of the crash backtrace is:<br></p><p>* thread #1: tid = 0x460b62, 0x000000010669988b libswiftCore.dylib`swift_unknownRetain + 27, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x58)<br>    frame #0: 0x000000010669988b libswiftCore.dylib`swift_unknownRetain + 27<br>    frame #1: 0x0000000106488565 libswiftCore.dylib`Swift._arrayConditionalBridgeElements &lt;A, B&gt; (Swift.Array&lt;A&gt;) -&gt; Swift.Optional&lt;Swift.Array&lt;B&gt;&gt; + 1029<br>    frame #2: 0x00000001064875a7 libswiftCore.dylib`Swift._arrayForceCast &lt;A, B&gt; (Swift.Array&lt;A&gt;) -&gt; Swift.Array&lt;B&gt; + 263<br></p><p>It’s interesting that the memory address causing the crash is 0x58, which in decimal is 88, the first item in the array. If you change the first item of the array to a different number, the crash address changes to match. So it’s misinterpreting the integer as a pointer.<br></p><p>Also interestingly, if you remove “import Foundation”, it no longer compiles — the last line gets an error “Cannot convert value of type ‘[Int]’ to expected argument type ‘[Any]’”. Is boxing of integers really dependent on Obj-C bridging?<br></p><p>—Jens<br></p><p>PS: Should I file the bug report with Apple or at swift.org?<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160413/da59e678/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Assigning [Int] to [Any] crashes Swift 2.2</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 13, 2016, at 9:09 PM, Jens Alfke via swift-users &lt;swift-users at swift.org&gt; wrote:<br>&gt; <br>&gt; Just ran into a weird crash with Swift 2.2 in Xcode 7.3. It reproduces in a playground:<br>&gt; <br>&gt; import Foundation<br>&gt; let a = [88]<br>&gt; let b: [Any] = a   // CRASH<br>&gt; <br>&gt; In my real program, the top of the crash backtrace is:<br>&gt; <br>&gt; * thread #1: tid = 0x460b62, 0x000000010669988b libswiftCore.dylib`swift_unknownRetain + 27, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x58)<br>&gt;     frame #0: 0x000000010669988b libswiftCore.dylib`swift_unknownRetain + 27<br>&gt;     frame #1: 0x0000000106488565 libswiftCore.dylib`Swift._arrayConditionalBridgeElements &lt;A, B&gt; (Swift.Array&lt;A&gt;) -&gt; Swift.Optional&lt;Swift.Array&lt;B&gt;&gt; + 1029<br>&gt;     frame #2: 0x00000001064875a7 libswiftCore.dylib`Swift._arrayForceCast &lt;A, B&gt; (Swift.Array&lt;A&gt;) -&gt; Swift.Array&lt;B&gt; + 263<br>&gt; <br>&gt; It’s interesting that the memory address causing the crash is 0x58, which in decimal is 88, the first item in the array. If you change the first item of the array to a different number, the crash address changes to match. So it’s misinterpreting the integer as a pointer.<br>&gt; <br>&gt; Also interestingly, if you remove “import Foundation”, it no longer compiles — the last line gets an error “Cannot convert value of type ‘[Int]’ to expected argument type ‘[Any]’”. Is boxing of integers really dependent on Obj-C bridging?<br>&gt; <br>&gt; —Jens<br>&gt; <br>&gt; PS: Should I file the bug report with Apple or at swift.org?<br></p><p>This is a known bug. Converting arrays of value type to arrays of protocol type is not supported—only class covariance is supported with containers—but the compiler fails to catch some cases. <br></p><p>-Joe<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/edbd5f1c2f535b14165ae883fa7c3f37?s=50"></div><header><strong>Assigning [Int] to [Any] crashes Swift 2.2</strong> from <string>Jens Alfke</string> &lt;jens at mooseyard.com&gt;<p>April 14, 2016 at 09:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 9:00 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt; <br>&gt; This is a known bug. Converting arrays of value type to arrays of protocol type is not supported—only class covariance is supported with containers—but the compiler fails to catch some cases. <br></p><p>Thanks for the info!<br></p><p>I found that if I use AnyObject instead of Any, it does work correctly. Is that because AnyObject isn’t a protocol? Or because conversion to AnyObject is a ‘magic’ case that uses Obj-C bridging?<br></p><p>My intuition is that [Any] will be more efficient than [AnyObject] for primitive values like numbers, because the AnyObject conversion boxes the value into a heap object, while converting to Any doesn’t. Or is that incorrect?<br></p><p>—Jens<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-users/attachments/20160414/a8bf51aa/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/06c1dcc7dce6a93d194b9c013376e3f0?s=50"></div><header><strong>Assigning [Int] to [Any] crashes Swift 2.2</strong> from <string>Joe Groff</string> &lt;jgroff at apple.com&gt;<p>April 14, 2016 at 10:00:00am</p></header><div class="content"><p>&gt; On Apr 14, 2016, at 9:24 AM, Jens Alfke &lt;jens at mooseyard.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Apr 14, 2016, at 9:00 AM, Joe Groff &lt;jgroff at apple.com&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; This is a known bug. Converting arrays of value type to arrays of protocol type is not supported—only class covariance is supported with containers—but the compiler fails to catch some cases. <br>&gt; <br>&gt; Thanks for the info!<br>&gt; <br>&gt; I found that if I use AnyObject instead of Any, it does work correctly. Is that because AnyObject isn’t a protocol? Or because conversion to AnyObject is a ‘magic’ case that uses Obj-C bridging?<br></p><p>Yeah, it&#39;s magic. Int is bridged to NSNumber, so converting to an array of object type works via the bridge.<br></p><p>-Joe<br></p><p>&gt; <br>&gt; My intuition is that [Any] will be more efficient than [AnyObject] for primitive values like numbers, because the AnyObject conversion boxes the value into a heap object, while converting to Any doesn’t. Or is that incorrect?<br>&gt; <br>&gt; —Jens<br></p></div></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
