<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>April 27, 2016 at 10:00:00am</p></header><div class="content"><p>on Tue Apr 26 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On Apr 26, 2016, at 7:34 PM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; Would something like this be possible? Imagine protocols defined like this:<br>&gt;&gt; <br>&gt;&gt;   public protocol Equatable {<br>&gt;&gt;       static func == (lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;   }<br>&gt;<br>&gt; The problem is that every type that conforms to Equatable has to<br>&gt; provide an overload of == in order to conform.  This is exactly what<br>&gt; having named methods as requirements solves.<br></p><p>Note that Tony is proposing to make the requirement static.  Whether<br>it&#39;s actually called “==” or isEqual is almost immaterial, because the<br>fact that it is static makes it less likely that anyone will try to call<br>it directly.  <br></p><p>However, if we allowed static operators to be defined, and called using<br>the syntax “T.==(x,y)”, as Tony has suggested, IMO it would further<br>discourage direct use, and it would avoid growing the number of<br>truly distinct spellings for the same operation.<br></p><p>That would also remove many instances of “formXXX” methods that<br>currently cause many people discomfort.  Whether that&#39;s a win or not<br>depends on whether you view widespread discomfort with “formXXX” as a<br>nuisance or a beneficial forcing function for finding something better<br>;-)<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d9b7c9b023237138ccb67df539f11b50?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Stephen Canon</string> &lt;scanon at apple.com&gt;<p>April 27, 2016 at 02:00:00pm</p></header><div class="content"><p>&gt; On Apr 27, 2016, at 1:54 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; on Tue Apr 26 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 7:34 PM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Would something like this be possible? Imagine protocols defined like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  public protocol Equatable {<br>&gt;&gt;&gt;      static func == (lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; The problem is that every type that conforms to Equatable has to<br>&gt;&gt; provide an overload of == in order to conform.  This is exactly what<br>&gt;&gt; having named methods as requirements solves.<br>&gt; <br>&gt; Note that Tony is proposing to make the requirement static.  Whether<br>&gt; it&#39;s actually called “==” or isEqual is almost immaterial, because the<br>&gt; fact that it is static makes it less likely that anyone will try to call<br>&gt; it directly.  <br>&gt; <br>&gt; However, if we allowed static operators to be defined, and called using<br>&gt; the syntax “T.==(x,y)”, as Tony has suggested, IMO it would further<br>&gt; discourage direct use, and it would avoid growing the number of<br>&gt; truly distinct spellings for the same operation.<br>&gt; <br>&gt; That would also remove many instances of “formXXX” methods that<br>&gt; currently cause many people discomfort.  Whether that&#39;s a win or not<br>&gt; depends on whether you view widespread discomfort with “formXXX” as a<br>&gt; nuisance or a beneficial forcing function for finding something better<br>&gt; ;-)<br></p><p>Personally I like this, but t’s not totally clear how it would extend to mutating operations.  `T.+=(x: inout T, y: T)`?<br></p><p>– Steve<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[swift-evolution-announce] [Review] SE-0067: Enhanced Floating Point Protocols</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>April 27, 2016 at 12:00:00pm</p></header><div class="content"><p>&gt; On Apr 27, 2016, at 10:54 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Tue Apr 26 2016, Chris Lattner &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt;&gt; On Apr 26, 2016, at 7:34 PM, Tony Allevato via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; Would something like this be possible? Imagine protocols defined like this:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  public protocol Equatable {<br>&gt;&gt;&gt;      static func == (lhs: Self, rhs: Self) -&gt; Self<br>&gt;&gt;&gt;  }<br>&gt;&gt; <br>&gt;&gt; The problem is that every type that conforms to Equatable has to<br>&gt;&gt; provide an overload of == in order to conform.  This is exactly what<br>&gt;&gt; having named methods as requirements solves.<br>&gt; <br>&gt; Note that Tony is proposing to make the requirement static.  Whether<br>&gt; it&#39;s actually called “==” or isEqual is almost immaterial, because the<br>&gt; fact that it is static makes it less likely that anyone will try to call<br>&gt; it directly.  <br>&gt; <br>&gt; However, if we allowed static operators to be defined, and called using<br>&gt; the syntax “T.==(x,y)”, as Tony has suggested, IMO it would further<br>&gt; discourage direct use, and it would avoid growing the number of<br>&gt; truly distinct spellings for the same operation.<br></p><p>Ah, that is clever!<br></p><p>-Chris<br></p></div></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
