<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>Bike-shedding alternate collections API</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>March 24, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu Mar 24 2016, Howard Lovatt &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; Detailed comments about iterator inline below.<br>&gt;<br>&gt; Big picture is:<br>&gt;<br>&gt; Separating lazy collections from eager collection with a view to a future world with lazy parallel collections.<br>&gt; Returning AnyXxx rather than a specific type to both keep types short and to be more flexible.<br>&gt; Removing constraints on Index, useful for linked lists etc.<br>&gt; Changing the way Range works to that it plays nicer with a larger range of types; range[index] = start + index * stride<br>&gt; Flattening the hierarchy, to allow a mix and match approach to features for more flexibility.<br>&gt;<br>&gt; Saying problem to be solved is too strong. There is no real problem<br>&gt; with the current collections. They work just fine. However I think<br>&gt; they could be finessed. Much like many of the things discussed on<br>&gt; swift-eveolution :(<br>&gt;<br>&gt;&gt; On 25 Mar 2016, at 8:28 AM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; on Thu Mar 24 2016, Howard Lovatt &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________ swift-evolution<br>&gt;&gt;&gt; mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/<br>&gt;&gt;&gt; swift-evolution<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Bike-shedding alternate collections API - cut down to keep them short enough to post.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; They differ from the current collections API and the new proposed collections API in that:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; 1. They use the existing external iterator, <br>&gt;&gt; <br>&gt;&gt; You mean index.<br>&gt;<br>&gt; For the proposed new collections you would write:<br>&gt;<br>&gt;     var iterator = array.iterator<br>&gt;     let element = array.next(&amp;iterator)<br></p><p>In your proposal?  That&#39;s not what we&#39;re intending to bring forward.<br></p><p><br>-- <br>Dave<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
