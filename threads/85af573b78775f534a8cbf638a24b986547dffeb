<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css?vsn=d">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg?vsn=d" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 12:00:00pm</p></header><div class="content"><p>Gist: https://gist.github.com/erica/6c3892fe603659b6e5ab<br></p><p>Feedback, corrections, suggestions requested and welcome. Thanks, -- Erica<br></p><p>Expanding Build Configuration Tests for Simulator and Device targets<br></p><p>Proposal: SE-00XX<br>Author(s): Erica Sadun &lt;http://github.com/erica&gt;<br>Status: TBD<br>Review manager: TBD<br> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#introduction&gt;Introduction<br></p><p>This proposal introduces a build configuration test to differentiate device and simulator builds. This test represent a common categorization requirement for Metal, Keychain, and AVFoundation Camera code.<br></p><p>This proposal was discussed on-list in the Expanding Build Configuration Tests for Simulator and Device targets &lt;applewebdata://E091D50D-DE8F-40D6-9BFD-E493DCEAA4F4&gt; thread.<br></p><p> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#motivation&gt;Motivation<br></p><p>Swift target detection is unnecessarily complicated and error prone as they&#39;re based on testing for target architectures that may potentially change over time. Making simulator detection dependent on a mismatch between architecture and the operating system shows an obvious gap in the current build configuration test suite.<br></p><p>// Test for a simulator destination<br>#if (arch(i386) || arch(x86_64)) &amp;&amp; (!os(OSX))<br>    print(&quot;Simulator&quot;)<br>#else<br>    print(&quot;Device&quot;)<br>#endif<br></p><p>// More restrictive test for iOS simulator<br>// Adjust the os test for watchOS, tvOS<br>#if (arch(i386) || arch(x86_64)) &amp;&amp; os(iOS)<br>    // iOS simulator code<br>#endif<br> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#detail-design&gt;Detail Design<br></p><p>This proposal adds #if target(simulator) and #if target(device) to distinguish whether application code is compiled to run in a simulated environment or on a device. Code running on desktop systems are considered to be on-device.<br></p><p> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#impact-on-existing-code&gt;Impact on Existing Code<br></p><p>This proposal does not impact existing code. As it is unnecessarily complicated to craft fixits that look for common test patterns, I recommend only that the new configurations be mentioned in release notes and added to the Using Swift with Cocoa and Objective-C document.<br></p><p> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#current-art&gt;Current Art<br></p><p>Swift currently supports the following configuration tests:<br></p><p>The literals true and false<br>The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>The arch() function that tests for x86_64, arm, arm64, and i386<br>The swift() function that tests for specific Swift language releases, e.g. swift(&gt;=2.2)<br> &lt;https://gist.github.com/erica/6c3892fe603659b6e5ab#alternatives-considered&gt;Alternatives Considered<br></p><p>There are no alternatives considered.<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/85afffeb/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 12:00:00pm</p></header><div class="content"><p>On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&lt;swift-evolution at swift.org&gt; wrote:<br>&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br></p><p>and Windows, FreeBSD.<br></p><p>&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br></p><p>and powerpc64, powerpc64le.<br></p><p>Dmitri<br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>March 14, 2016 at 02:00:00pm</p></header><div class="content"><p>Can you point me to a reference on this so I can keep up to date, or is it all just source and accepted proposals?<br></p><p>Thanks, -- E<br></p><p><br>&gt; On Mar 14, 2016, at 1:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt; <br>&gt; and Windows, FreeBSD.<br>&gt; <br>&gt;&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt; <br>&gt; and powerpc64, powerpc64le.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/969b04d28c02f951ccc03f615b9a92b3?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>Dmitri Gribenko</string> &lt;gribozavr at gmail.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>I&#39;m afraid it is just the source code.<br></p><p>Dmitri<br></p><p>On Mon, Mar 14, 2016 at 1:04 PM, Erica Sadun &lt;erica at ericasadun.com&gt; wrote:<br>&gt; Can you point me to a reference on this so I can keep up to date, or is it all just source and accepted proposals?<br>&gt;<br>&gt; Thanks, -- E<br>&gt;<br>&gt;<br>&gt;&gt; On Mar 14, 2016, at 1:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt;&gt;<br>&gt;&gt; and Windows, FreeBSD.<br>&gt;&gt;<br>&gt;&gt;&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt;&gt;<br>&gt;&gt; and powerpc64, powerpc64le.<br>&gt;&gt;<br>&gt;&gt; Dmitri<br>&gt;&gt;<br>&gt;&gt; --<br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;<br></p><p><br></p><p>-- <br>main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>(j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>That reminds me, arm64 and aarch64 are equivalent, inconsistently used, and not synonymous.  I’m not suggesting that anything change in Erica’s proposal, but it might be worth a little bit of discussion to decide whether arm64 will be the one, and only, name for 64-bit arm in swift.<br></p><p>- Will<br></p><p>&gt; On Mar 14, 2016, at 1:05 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; I&#39;m afraid it is just the source code.<br>&gt; <br>&gt; Dmitri<br>&gt; <br>&gt; On Mon, Mar 14, 2016 at 1:04 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt; Can you point me to a reference on this so I can keep up to date, or is it all just source and accepted proposals?<br>&gt;&gt; <br>&gt;&gt; Thanks, -- E<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 14, 2016, at 1:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt;&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and Windows, FreeBSD.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; and powerpc64, powerpc64le.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; --<br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com&gt;*/<br>&gt;&gt; <br>&gt; <br>&gt; <br>&gt; <br>&gt; -- <br>&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/33dc3883/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>&gt; On Mar 14, 2016, at 1:41 PM, William Dillon via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; That reminds me, arm64 and aarch64 are equivalent, inconsistently used, and not synonymous.  I’m not suggesting that anything change in Erica’s proposal, but it might be worth a little bit of discussion to decide whether arm64 will be the one, and only, name for 64-bit arm in swift.<br></p><p>What do you mean by &quot;not synonymous”?<br></p><p>-Chris<br></p><p>&gt; <br>&gt; - Will<br>&gt; <br>&gt;&gt; On Mar 14, 2016, at 1:05 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; I&#39;m afraid it is just the source code.<br>&gt;&gt; <br>&gt;&gt; Dmitri<br>&gt;&gt; <br>&gt;&gt; On Mon, Mar 14, 2016 at 1:04 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt; Can you point me to a reference on this so I can keep up to date, or is it all just source and accepted proposals?<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Thanks, -- E<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mar 14, 2016, at 1:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and Windows, FreeBSD.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; and powerpc64, powerpc64le.<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; -- <br>&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/40408ed2/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b9904260218b6d7942782c2b2355f2aa?s=50"></div><header><strong>[Draft] Expanding Build Configuration Tests for Simulator and Device targets</strong> from <string>William Dillon</string> &lt;william at housedillon.com&gt;<p>March 14, 2016 at 01:00:00pm</p></header><div class="content"><p>(didn’t reply all)<br></p><p>Synonymous is not the right word, you’re right.  I mean that you can’t use them interchangeably.<br></p><p>For example, in Foundation TargetConditionals.h, only __arm64__ was tested for (I’m assuming the build system sets that somehow when Foundation is built for iOS).  In Linux, it isn’t __aarch64__ is.  So, I can’t just interchange them. Because of this, I end up with #elif __arm64__ || __aarch64__ and that feels a little silly.<br></p><p>- Will<br></p><p>&gt; On Mar 14, 2016, at 1:41 PM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt;&gt; <br>&gt;&gt; On Mar 14, 2016, at 1:41 PM, William Dillon via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; That reminds me, arm64 and aarch64 are equivalent, inconsistently used, and not synonymous.  I’m not suggesting that anything change in Erica’s proposal, but it might be worth a little bit of discussion to decide whether arm64 will be the one, and only, name for 64-bit arm in swift.<br>&gt; <br>&gt; What do you mean by &quot;not synonymous”?<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt;&gt; <br>&gt;&gt; - Will<br>&gt;&gt; <br>&gt;&gt;&gt; On Mar 14, 2016, at 1:05 PM, Dmitri Gribenko via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; I&#39;m afraid it is just the source code.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Mar 14, 2016 at 1:04 PM, Erica Sadun &lt;erica at ericasadun.com &lt;mailto:erica at ericasadun.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt; Can you point me to a reference on this so I can keep up to date, or is it all just source and accepted proposals?<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; Thanks, -- E<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mar 14, 2016, at 1:58 PM, Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; On Mon, Mar 14, 2016 at 11:29 AM, Erica Sadun via swift-evolution<br>&gt;&gt;&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;&gt;&gt;&gt; The os() function that tests for OSX, iOS, watchOS, tvOS, and Linux<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; and Windows, FreeBSD.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt;&gt; The arch() function that tests for x86_64, arm, arm64, and i386<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; and powerpc64, powerpc64le.<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; Dmitri<br>&gt;&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt;&gt;&gt; --<br>&gt;&gt;&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; -- <br>&gt;&gt;&gt; main(i,j){for(i=2;;i++){for(j=2;j&lt;i;j++){if(!(i%j)){j=0;break;}}if<br>&gt;&gt;&gt; (j){printf(&quot;%d\n&quot;,i);}}} /*Dmitri Gribenko &lt;gribozavr at gmail.com &lt;mailto:gribozavr at gmail.com&gt;&gt;*/<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160314/08f1396b/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js?vsn=d"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
