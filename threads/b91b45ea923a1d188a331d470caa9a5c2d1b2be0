<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/6e4479b6097e171f8f46de71f35764ba?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Nikolai Vazquez</string> &lt;nvazquez1297 at gmail.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>One of the aspects of Swift that I like is computed properties for<br>structures and classes. It allows for adding logic when obtaining values or<br>for having the returned value be dependent on another.<br></p><p>As of the `ErrorType` protocol introduction in Swift 2, we can throw errors<br>when it comes to functions and initializers. However, this does not apply<br>to getters and setters.<br></p><p>```swift<br>struct File&lt;Data&gt; {<br>    var contents: Data {<br>        get throws { ... }<br>        set throws { ... }<br>    }<br>}<br>```<br></p><p>A better example would be getting and setting the current working directory<br>of the process:<br></p><p>```swift<br>import Foundation<br></p><p>extension Process {<br>    static var workingDirectory: String {<br>        get {<br>            let fileManager = NSFileManager.defaultManager()<br>            return fileManager.currentDirectoryPath<br>        }<br>        set throws {<br>            let fileManager = NSFileManager.defaultManager()<br>            guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>                throw Error(&quot;...&quot;)<br>            }<br>        }<br>    }<br>}<br></p><p><br></p><p>```<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/b91b2be0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  5, 2015 at 09:00:00pm</p></header><div class="content"><p>+1 to this.  Subscripts should also be able to throw and currently cannot.<br></p><p><br>&gt; On Dec 5, 2015, at 9:08 PM, Nikolai Vazquez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One of the aspects of Swift that I like is computed properties for structures and classes. It allows for adding logic when obtaining values or for having the returned value be dependent on another.<br>&gt; <br>&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw errors when it comes to functions and initializers. However, this does not apply to getters and setters.<br>&gt; <br>&gt; ```swift<br>&gt; struct File&lt;Data&gt; {<br>&gt;     var contents: Data {<br>&gt;         get throws { ... }<br>&gt;         set throws { ... }<br>&gt;     }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; A better example would be getting and setting the current working directory of the process:<br>&gt; <br>&gt; ```swift<br>&gt; import Foundation<br>&gt; <br>&gt; extension Process {<br>&gt;     static var workingDirectory: String {<br>&gt;         get {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             return fileManager.currentDirectoryPath<br>&gt;         }<br>&gt;         set throws {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;                 throw Error(&quot;...&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; ```<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/fd1401f0/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>December  5, 2015 at 10:00:00pm</p></header><div class="content"><p>&gt;&gt; On Dec 5, 2015, at 9:08 PM, Nikolai Vazquez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One of the aspects of Swift that I like is computed properties for structures and classes. It allows for adding logic when obtaining values or for having the returned value be <br>&gt; On Dec 5, 2015, at 7:17 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; +1 to this.  Subscripts should also be able to throw and currently cannot.<br></p><p>+1 from me as well.  Subscripts also currently cannot be generic.<br></p><p>I consider all of these implementation limitations, not intentional parts of the design of Swift.  Patches would be very very welcome to help improve these areas.<br></p><p>-Chris<br></p><p><br>&gt; <br>&gt; dependent on another.<br>&gt;&gt; <br>&gt;&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw errors when it comes to functions and initializers. However, this does not apply to getters and setters.<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; struct File&lt;Data&gt; {<br>&gt;&gt;     var contents: Data {<br>&gt;&gt;         get throws { ... }<br>&gt;&gt;         set throws { ... }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; A better example would be getting and setting the current working directory of the process:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; extension Process {<br>&gt;&gt;     static var workingDirectory: String {<br>&gt;&gt;         get {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             return fileManager.currentDirectoryPath<br>&gt;&gt;         }<br>&gt;&gt;         set throws {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;&gt;                 throw Error(&quot;...&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151205/b565797f/attachment-0001.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/bc3a9ea0c6c870343d9acb4ac3059cdc?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Matthew Johnson</string> &lt;matthew at anandabits.com&gt;<p>December  6, 2015 at 07:00:00am</p></header><div class="content"><p>Great to hear Chris and thanks for mentioning generic subscripts as well.  I have a use case for a generic throwing subscript so I hope patches will be forthcoming.<br></p><p>Sent from my iPad<br></p><p>&gt; On Dec 6, 2015, at 12:07 AM, Chris Lattner &lt;clattner at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt;&gt; On Dec 5, 2015, at 9:08 PM, Nikolai Vazquez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; One of the aspects of Swift that I like is computed properties for structures and classes. It allows for adding logic when obtaining values or for having the returned value be <br>&gt;&gt; On Dec 5, 2015, at 7:17 PM, Matthew Johnson via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; +1 to this.  Subscripts should also be able to throw and currently cannot.<br>&gt; <br>&gt; +1 from me as well.  Subscripts also currently cannot be generic.<br>&gt; <br>&gt; I consider all of these implementation limitations, not intentional parts of the design of Swift.  Patches would be very very welcome to help improve these areas.<br>&gt; <br>&gt; -Chris<br>&gt; <br>&gt; <br>&gt;&gt; <br>&gt;&gt; dependent on another.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw errors when it comes to functions and initializers. However, this does not apply to getters and setters.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; struct File&lt;Data&gt; {<br>&gt;&gt;&gt;     var contents: Data {<br>&gt;&gt;&gt;         get throws { ... }<br>&gt;&gt;&gt;         set throws { ... }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; A better example would be getting and setting the current working directory of the process:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```swift<br>&gt;&gt;&gt; import Foundation<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; extension Process {<br>&gt;&gt;&gt;     static var workingDirectory: String {<br>&gt;&gt;&gt;         get {<br>&gt;&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;&gt;             return fileManager.currentDirectoryPath<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;         set throws {<br>&gt;&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;&gt;&gt;                 throw Error(&quot;...&quot;)<br>&gt;&gt;&gt;             }<br>&gt;&gt;&gt;         }<br>&gt;&gt;&gt;     }<br>&gt;&gt;&gt; }<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt; ```<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; <br>&gt;&gt;&gt;  _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/12f9f69b/attachment-0001.html&gt;<br></p></div></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/72cc28f12d423d7d87c5e20e8de0966c?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Ilya Belenkiy</string> &lt;ilya.belenkiy at gmail.com&gt;<p>December  6, 2015 at 03:00:00am</p></header><div class="content"><p>+1<br></p><p>On Sat, Dec 5, 2015 at 10:17 PM Matthew Johnson via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; +1 to this.  Subscripts should also be able to throw and currently cannot.<br>&gt;<br>&gt;<br>&gt; On Dec 5, 2015, at 9:08 PM, Nikolai Vazquez via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt; One of the aspects of Swift that I like is computed properties for<br>&gt; structures and classes. It allows for adding logic when obtaining values or<br>&gt; for having the returned value be dependent on another.<br>&gt;<br>&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw<br>&gt; errors when it comes to functions and initializers. However, this does not<br>&gt; apply to getters and setters.<br>&gt;<br>&gt; ```swift<br>&gt; struct File&lt;Data&gt; {<br>&gt;     var contents: Data {<br>&gt;         get throws { ... }<br>&gt;         set throws { ... }<br>&gt;     }<br>&gt; }<br>&gt; ```<br>&gt;<br>&gt; A better example would be getting and setting the current working<br>&gt; directory of the process:<br>&gt;<br>&gt; ```swift<br>&gt; import Foundation<br>&gt;<br>&gt; extension Process {<br>&gt;     static var workingDirectory: String {<br>&gt;         get {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             return fileManager.currentDirectoryPath<br>&gt;         }<br>&gt;         set throws {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;                 throw Error(&quot;...&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt;<br>&gt;<br>&gt;<br>&gt; ```<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/af72ee95/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/b2f47d083afa4931ca8897e95f0cb4ab?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Morten Bek Ditlevsen</string> &lt;bek at termestrup.dk&gt;<p>December  6, 2015 at 09:00:00pm</p></header><div class="content"><p>+1 from here too!<br>søn. 6. dec. 2015 kl. 21.43 skrev Ilya Belenkiy via swift-evolution &lt;<br>swift-evolution at swift.org&gt;:<br></p><p>&gt; +1<br>&gt;<br>&gt; On Sat, Dec 5, 2015 at 10:17 PM Matthew Johnson via swift-evolution &lt;<br>&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;&gt; +1 to this.  Subscripts should also be able to throw and currently cannot.<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; On Dec 5, 2015, at 9:08 PM, Nikolai Vazquez via swift-evolution &lt;<br>&gt;&gt; swift-evolution at swift.org&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; One of the aspects of Swift that I like is computed properties for<br>&gt;&gt; structures and classes. It allows for adding logic when obtaining values or<br>&gt;&gt; for having the returned value be dependent on another.<br>&gt;&gt;<br>&gt;&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw<br>&gt;&gt; errors when it comes to functions and initializers. However, this does not<br>&gt;&gt; apply to getters and setters.<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; struct File&lt;Data&gt; {<br>&gt;&gt;     var contents: Data {<br>&gt;&gt;         get throws { ... }<br>&gt;&gt;         set throws { ... }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt; A better example would be getting and setting the current working<br>&gt;&gt; directory of the process:<br>&gt;&gt;<br>&gt;&gt; ```swift<br>&gt;&gt; import Foundation<br>&gt;&gt;<br>&gt;&gt; extension Process {<br>&gt;&gt;     static var workingDirectory: String {<br>&gt;&gt;         get {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             return fileManager.currentDirectoryPath<br>&gt;&gt;         }<br>&gt;&gt;         set throws {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;&gt;                 throw Error(&quot;...&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; ```<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151206/47ab4879/attachment.html&gt;<br></p></div></li></ul></li></ul></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  7, 2015 at 11:00:00am</p></header><div class="content"><p>Thanks for bringing this up, Nikolai. IMHO it does need a formal proposal because property (and subscript) access can be used in more interesting ways than just calling the getter or setter. In particular, how does this interact with inout? Is there a &quot;rethrows&quot; equivalent? What are the rules for overrides? (That last is probably very straightforward, but it ought to be written out explicitly.)<br></p><p>Jordan<br></p><p><br>&gt; On Dec 5, 2015, at 19:08, Nikolai Vazquez via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; One of the aspects of Swift that I like is computed properties for structures and classes. It allows for adding logic when obtaining values or for having the returned value be dependent on another.<br>&gt; <br>&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw errors when it comes to functions and initializers. However, this does not apply to getters and setters.<br>&gt; <br>&gt; ```swift<br>&gt; struct File&lt;Data&gt; {<br>&gt;     var contents: Data {<br>&gt;         get throws { ... }<br>&gt;         set throws { ... }<br>&gt;     }<br>&gt; }<br>&gt; ```<br>&gt; <br>&gt; A better example would be getting and setting the current working directory of the process:<br>&gt; <br>&gt; ```swift<br>&gt; import Foundation<br>&gt; <br>&gt; extension Process {<br>&gt;     static var workingDirectory: String {<br>&gt;         get {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             return fileManager.currentDirectoryPath<br>&gt;         }<br>&gt;         set throws {<br>&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;                 throw Error(&quot;...&quot;)<br>&gt;             }<br>&gt;         }<br>&gt;     }<br>&gt; }<br>&gt; <br>&gt; <br>&gt; <br>&gt; ```<br>&gt; <br>&gt; <br>&gt;  _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151207/4f2239b8/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d30e546d655d1c7ece0464791a9a90d5?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Adrian Kashivskyy</string> &lt;adrian.kashivskyy at me.com&gt;<p>December  9, 2015 at 12:00:00am</p></header><div class="content"><p>One could associate `throws` with getter and setter, not with the subscript itself, e.g.<br></p><p>&gt; subscript(index: Int) {<br>&gt; 	get throws {<br>&gt; 		// ...<br>&gt; 	}<br>&gt; 	set {<br>&gt; 		// ...<br>&gt; 	}<br>&gt; }<br></p><p>Pozdrawiam – Regards,<br>Adrian Kashivskyy<br></p><p>&gt; Wiadomość napisana przez Jordan Rose via swift-evolution &lt;swift-evolution at swift.org&gt; w dniu 07.12.2015, o godz. 20:59:<br>&gt; <br>&gt; Thanks for bringing this up, Nikolai. IMHO it does need a formal proposal because property (and subscript) access can be used in more interesting ways than just calling the getter or setter. In particular, how does this interact with inout? Is there a &quot;rethrows&quot; equivalent? What are the rules for overrides? (That last is probably very straightforward, but it ought to be written out explicitly.)<br>&gt; <br>&gt; Jordan<br>&gt; <br>&gt; <br>&gt;&gt; On Dec 5, 2015, at 19:08, Nikolai Vazquez via swift-evolution &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; One of the aspects of Swift that I like is computed properties for structures and classes. It allows for adding logic when obtaining values or for having the returned value be dependent on another.<br>&gt;&gt; <br>&gt;&gt; As of the `ErrorType` protocol introduction in Swift 2, we can throw errors when it comes to functions and initializers. However, this does not apply to getters and setters.<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; struct File&lt;Data&gt; {<br>&gt;&gt;     var contents: Data {<br>&gt;&gt;         get throws { ... }<br>&gt;&gt;         set throws { ... }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; A better example would be getting and setting the current working directory of the process:<br>&gt;&gt; <br>&gt;&gt; ```swift<br>&gt;&gt; import Foundation<br>&gt;&gt; <br>&gt;&gt; extension Process {<br>&gt;&gt;     static var workingDirectory: String {<br>&gt;&gt;         get {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             return fileManager.currentDirectoryPath<br>&gt;&gt;         }<br>&gt;&gt;         set throws {<br>&gt;&gt;             let fileManager = NSFileManager.defaultManager()<br>&gt;&gt;             guard fileManager.changeCurrentDirectoryPath(newValue) else {<br>&gt;&gt;                 throw Error(&quot;...&quot;)<br>&gt;&gt;             }<br>&gt;&gt;         }<br>&gt;&gt;     }<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; ```<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt;  _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151209/62c2b942/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 03:00:00pm</p></header><div class="content"><p>If I may propose some answers to your questions, to spur discussion:<br></p><p>&gt; In particular, how does this interact with inout?<br></p><p>When you use an `inout` parameter, notionally the getter is called before the function it’s passed to, and then the setter is called after. Either way, the error would be thrown at the call site and the callee would never even be aware that an error was possible. Basically, this just means that all the fancy optimizations where `swiftc` secretly elides the temporary variable used during `inout` have to be disabled, to ensure that any throw happens after the callee returns.<br></p><p>The inout parameter use will, of course, have to be marked with `try`. It would be nice if the grammar allowed you to mark only the `inout` parameter if that’s the semantic you wanted (not sure if `try &amp;property` or `&amp;try property` would be more appropriate for that); if for some reason that’s difficult to do, though, marking the entire call wouldn’t be a big deal.<br></p><p>&gt; Is there a &quot;rethrows&quot; equivalent?<br></p><p>I don’t think so. What would it be rethrowing an error from? The value if it happened to be a closure? That seems a bit esoteric.<br></p><p>&gt; What are the rules for overrides? (That last is probably very straightforward, but it ought to be written out explicitly.)<br></p><p>T -&gt; U is a subtype of T throws -&gt; U, right? So you could override a throwing accessor to make it non-throwing, but not the other way around.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/c4fe988326eed161b989d0c5521cb105?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Jordan Rose</string> &lt;jordan_rose at apple.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt;&gt; Is there a &quot;rethrows&quot; equivalent?<br>&gt; <br>&gt; I don’t think so. What would it be rethrowing an error from? The value if it happened to be a closure? That seems a bit esoteric.<br></p><p><br>This isn&#39;t particularly interesting for a property, but may be useful for a subscript that took a closure as an index. (I personally wouldn&#39;t like such an API, but think of something like XPath &lt;https://msdn.microsoft.com/en-us/library/ms256086(v=vs.110).aspx&gt;.)<br></p><p>Jordan<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20151208/edefb06a/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/76dd8f23593c1a1f5c57cc6a8982d726?s=50"></div><header><strong>Proposal: Allow Getters and Setters to Throw</strong> from <string>Brent Royal-Gordon</string> &lt;brent at architechies.com&gt;<p>December  8, 2015 at 04:00:00pm</p></header><div class="content"><p>&gt;&gt;&gt; Is there a &quot;rethrows&quot; equivalent?<br>&gt;&gt; <br>&gt;&gt; I don’t think so. What would it be rethrowing an error from? The value if it happened to be a closure? That seems a bit esoteric.<br>&gt; <br>&gt; This isn&#39;t particularly interesting for a property, but may be useful for a subscript that took a closure as an index. (I personally wouldn&#39;t like such an API, but think of something like XPath.)<br></p><p>You’re right—I wasn’t thinking of subscripts.<br></p><p>-- <br>Brent Royal-Gordon<br>Architechies<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
