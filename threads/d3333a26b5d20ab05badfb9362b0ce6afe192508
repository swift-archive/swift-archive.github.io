<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/2d569462ac92d4619342b1c5ff305043?s=50"></div><header><strong>[Pitch] inout with capture variable</strong> from <string>frogcjn at 163.com</string> &lt;frogcjn at 163.com&gt;<p>October  6, 2016 at 01:00:00pm</p></header><div class="content"><p>I just want to demo how the inout capture works.<br>the demo code just want to capture value avoiding capture self.<br></p><p><br>&gt; &gt; On Oct 5, 2016, at 10:07 PM, Cao Jiannan&lt;frogcjn at 163.com(mailto:frogcjn at 163.com)&gt;wrote:<br>&gt; &gt; so if developer want to capture an variable inference, must declare a new variable.<br>&gt; I don’t follow what you mean here.<br>&gt; <br>&gt; &gt; <br>&gt; &gt; classA {<br>&gt; &gt; varvalue = 1<br>&gt; &gt; <br>&gt; &gt; functest() -&gt;() -&gt;Int{<br>&gt; &gt; varcapturedValue =self.value<br>&gt; &gt; leteditInfo = { () -&gt;Intin<br>&gt; &gt; capturedValue += 1<br>&gt; &gt; returncapturedValue<br>&gt; &gt; }<br>&gt; &gt; returneditInfo<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; leta =A()<br>&gt; &gt; <br>&gt; &gt; leteditInfo =a.test()<br>&gt; &gt; print(editInfo()) // 2<br>&gt; &gt; print(a.value) // 1<br>&gt; &gt; <br>&gt; &gt; print(editInfo()) // 3<br>&gt; &gt; <br>&gt; &gt; print(a.value) // 1<br>&gt; &gt; <br>&gt; &gt; what about:<br>&gt; &gt; <br>&gt; &gt; classA {<br>&gt; &gt; varvalue = 1<br>&gt; &gt; <br>&gt; &gt; functest() -&gt;() -&gt;Int{<br>&gt; &gt; leteditInfo = { [inout value] () -&gt;Intin<br>&gt; &gt; capturedValue += 1<br>&gt; &gt; returncapturedValue<br>&gt; &gt; }<br>&gt; &gt; returneditInfo<br>&gt; &gt; }<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; leta =A()<br>&gt; &gt; <br>&gt; &gt; leteditInfo =a.test()<br>&gt; &gt; print(editInfo()) // 2<br>&gt; &gt; print(a.value) // 2<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; print(editInfo()) // 3<br>&gt; &gt; <br>&gt; &gt; print(a.value) // 3<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; I’m not quite sure what you’re getting at, but this prints what you’re expecting in the output you have in the comments:<br>&gt; <br>&gt; class A {<br>&gt; var value = 1<br>&gt; <br>&gt; func test() -&gt;() -&gt;Int {<br>&gt; let editInfo = { () -&gt;Int in<br>&gt; self.value += 1<br>&gt; return self.value<br>&gt; }<br>&gt; return editInfo<br>&gt; }<br>&gt; }<br>&gt; <br>&gt; let a = A()<br>&gt; <br>&gt; let editInfo = a.test()<br>&gt; print(editInfo()) // 2<br>&gt; print(a.value) // 2<br>&gt; print(editInfo()) // 3<br>&gt; print(a.value) // 3<br>&gt; <br>&gt; <br>&gt; Mark<br>&gt; <br>&gt; &gt; <br>&gt; &gt; &gt;&gt;On Oct 5, 2016, at 9:06 PM, Cao Jiannan via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;for example:<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;var a = 1<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;let block = { [inout a] in<br>&gt; &gt; &gt;&gt;a += 1<br>&gt; &gt; &gt;&gt;}<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;block()<br>&gt; &gt; &gt;&gt;block()<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;print(a) // 3<br>&gt; &gt; &gt;This is already how captures work by default in closures and nested functions in Swift:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;var a = 1<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;let block = { a += 1 }<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;block()<br>&gt; &gt; &gt;block()<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;print(a) // prints 3<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;If you want to capture something immutably you can put it in the capture list:<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;var a = 1<br>&gt; &gt; &gt;let block = { [a] in a += 1 } // error: left side of mutating operator isn&#39;t mutable: &#39;a&#39; is a &#39;let&#39; constant<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;Mark<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; <br>&gt; <br>&gt;<br></p></div></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
