<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>May  6, 2016 at 05:00:00pm</p></header><div class="content"><p>on Thu May 05 2016, Erica Sadun &lt;swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;<br>&gt;     Proposal link:<br>&gt;     https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;<br>&gt;     Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as<br>&gt;     specified in revision 3 of the proposal.<br>&gt;<br>&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs<br>&gt; that linguistically matched.<br></p><p>I think building an API family around “prefix” and “suffix” that covers<br>this and other functionality is a great idea, and would make a great<br>proposal**<br></p><p>This whole area needs some design love.  Among other things,<br></p><p>     s.prefix(4)<br></p><p>should be<br></p><p>     s.prefix(ofMaxLength: 4)<br></p><p>** though we haven&#39;t been able to completely eliminate the moral<br>equivalent of “drop” from the “dropWhile” function, whatever it&#39;s<br>eventually called, in any of our experiments<br></p><p>&gt; Nonetheless I&#39;m gratified these are hopping into the language. That<br>&gt; said, I&#39;m going to put on my painters cap to consider selecting some<br>&gt; exterior latex for the feature I was most looking forward to in this<br>&gt; proposal:<br>&gt;<br>&gt; Core team writes:<br>&gt;<br>&gt;     unfold(_:applying:) - This addition is *rejected* by the core team as<br>&gt;     written, but deserves more discussion in the community, and potentially<br>&gt;     could be the subject of a future proposal. The core team felt that the<br>&gt;     utility of this operation is high enough to be worth including in the<br>&gt;     standard library, but could not find an acceptable name for it. “unfold” is<br>&gt;     problematic, despite its precedence in other language, because Swift calls<br>&gt;     the corresponding operation “reduce” and not “fold”. No one could get<br>&gt;     excited about “unreduce”. “iterate” was also considered, but a noun is more<br>&gt;     appropriate than an verb in this case. Given the lack of a good name, the<br>&gt;     core team preferred to reject to let the community discuss it more.<br>&gt;<br>&gt; A few thoughts:<br>&gt;<br>&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun,<br>&gt; prefix isn&#39;t a noun, drop isn&#39;t a noun. <br></p><p>Can&#39;t let that one go by; prefix is definitely a noun :-)<br></p><p>&gt; <br>&gt; * Not a fan of unfold or unreduce, either.  * Why not `induce` as a<br>&gt; counter to `reduce`? (induction/reduction if you want to noun it,<br>&gt; which I don&#39;t)<br>&gt;<br>&gt; Stepping back, the definition of `reduce` is:<br>&gt;<br>&gt; Returns the result of repeatedly calling `combine` with an accumulated value <br>&gt; initialized to `initial` and each element of `self`, in turn<br>&gt;<br>&gt; public func reduce&lt;T&gt;(initial: T, @noescape combine: (T, Self.Generator.Element)<br>&gt; throws -&gt; T) rethrows -&gt; T<br>&gt;<br>&gt; e.g. print(&quot;Hello&quot;.characters.reduce(&quot; &quot;, combine: {$0 + String($1) + &quot; &quot;}))<br>&gt;<br>&gt; The definition of whatever *this* is, is more or less:<br>&gt;<br>&gt; Returns the lazy sequence of repeatedly calling `generate` with an accumulated<br>&gt; value<br>&gt; initialized to `initial`. The sequence terminates when the generation closure<br>&gt; returns `nil`.<br>&gt;<br>&gt; public func ???&lt;T&gt;(initial: T, generate: (T) -&gt; T?) -&gt; Sequence&lt;T&gt;<br>&gt;<br>&gt; So why not `induce`? It&#39;s got a cute name relationship with `reduce`?<br>&gt;<br>&gt; var seq = induce(10, generate: { $0 == 0 ? nil : $0 - 1 })<br>&gt; print(Array(seq)) // [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]<br>&gt;<br>&gt; seq = induce(1, generate:{ $0 * 2 }).prefix(while: { $0 &lt; 1000 })<br>&gt; print(Array(seq)) // [2, 4, 8, 16, 32, 64, 128, 256, 512]<br>&gt;<br>&gt; -- E<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-- <br>Dave<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/5451f7df31d36d0159a018706aec7adb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Erica Sadun</string> &lt;erica at ericasadun.com&gt;<p>May  6, 2016 at 07:00:00pm</p></header><div class="content"><p>On May 6, 2016, at 6:27 PM, Dave Abrahams via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; <br>&gt; on Thu May 05 2016, Erica Sadun &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; <br>&gt;&gt; On May 4, 2016, at 5:50 PM, Chris Lattner via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt;    Proposal link:<br>&gt;&gt;    https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md<br>&gt;&gt; <br>&gt;&gt;    Sequence.prefix(while:) &amp; Sequence.drop(while:) - These are *accepted* as<br>&gt;&gt;    specified in revision 3 of the proposal.<br>&gt;&gt; <br>&gt;&gt; I&#39;m still a little sad we didn&#39;t go for `prefix`/`suffix` or `take`/`drop` pairs<br>&gt;&gt; that linguistically matched.<br>&gt; <br>&gt; I think building an API family around “prefix” and “suffix” that covers<br>&gt; this and other functionality is a great idea, and would make a great<br>&gt; proposal**<br>&gt; <br>&gt; This whole area needs some design love.  Among other things,<br>&gt; <br>&gt;     s.prefix(4)<br>&gt; <br>&gt; should be<br>&gt; <br>&gt;     s.prefix(ofMaxLength: 4)<br>&gt; <br>&gt; ** though we haven&#39;t been able to completely eliminate the moral<br>&gt; equivalent of “drop” from the “dropWhile” function, whatever it&#39;s<br>&gt; eventually called, in any of our experiments<br></p><p>I&#39;m sure that Kevin or I or some other proposalista could put together a quick fast-track rename request for<br></p><p>* suffix(n) -&gt; Self.SubSequence // requires `n &gt;= 0`, `n &lt;= count`<br>* suffix(maxLength: n) -&gt; Self.SubSequence // requires `n &gt;= 0`<br>* suffix(while: predicate) -&gt; Self.SubSequence<br>* prefix(n) -&gt; Self.SubSequence<br>* prefix(maxLength: n) -&gt; Self.SubSequence<br>* prefix(while: predicate) -&gt; Self.SubSequence<br></p><p>&gt; Nonetheless I&#39;m gratified these are hopping into the language. That<br>&gt;&gt; said, I&#39;m going to put on my painters cap to consider selecting some<br>&gt;&gt; exterior latex for the feature I was most looking forward to in this<br>&gt;&gt; proposal:<br>&gt;&gt; <br>&gt;&gt; Core team writes:<br>&gt;&gt; <br>&gt;&gt;    unfold(_:applying:) - This addition is *rejected* by the core team as<br>&gt;&gt;    written, but deserves more discussion in the community, and potentially<br>&gt;&gt;    could be the subject of a future proposal. The core team felt that the<br>&gt;&gt;    utility of this operation is high enough to be worth including in the<br>&gt;&gt;    standard library, but could not find an acceptable name for it. “unfold” is<br>&gt;&gt;    problematic, despite its precedence in other language, because Swift calls<br>&gt;&gt;    the corresponding operation “reduce” and not “fold”. No one could get<br>&gt;&gt;    excited about “unreduce”. “iterate” was also considered, but a noun is more<br>&gt;&gt;    appropriate than an verb in this case. Given the lack of a good name, the<br>&gt;&gt;    core team preferred to reject to let the community discuss it more.<br>&gt;&gt; <br>&gt;&gt; A few thoughts:<br>&gt;&gt; <br>&gt;&gt; * I&#39;m not sure why a noun is more appropriate than a verb. Reduce isn&#39;t a noun,<br>&gt;&gt; prefix isn&#39;t a noun, drop isn&#39;t a noun. <br>&gt; <br>&gt; Can&#39;t let that one go by; prefix is definitely a noun :-)<br></p><p>I knew you&#39;d point that out. It&#39;s not a noun when it&#39;s wearing its &quot;I AM VERBING&quot; t-shirt.<br></p><p>That aside, the prevailing sentiment is to rename reduce to `fold` and partner it with `unfold`.<br>(I personally prefer Chris&#39;s `sequence` because I think it better reflects how more Swift users will<br>use it (never for;;get; never sur;;render). But I recognize that terms of art have a strength of<br>momentum and familiarity.)<br></p><p>-- E<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/88b85091/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/09b6a9b66eecf177910c8e47db78d8eb?s=50"></div><header><strong>[Accepted with modifications] SE-0045: Add scan, prefix(while:), drop(while:), and unfold to the stdlib</strong> from <string>Chris Lattner</string> &lt;clattner at apple.com&gt;<p>May  6, 2016 at 06:00:00pm</p></header><div class="content"><p>On May 6, 2016, at 6:00 PM, Erica Sadun via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; That aside, the prevailing sentiment is to rename reduce to `fold` and partner it with `unfold`.<br>&gt; (I personally prefer Chris&#39;s `sequence` because I think it better reflects how more Swift users will<br></p><p>Just giving credit where it’s due, but I believe that DaveA suggested ‘sequence’, I only propagated it. :-)<br></p><p>-Chris<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160506/c7fd7361/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
