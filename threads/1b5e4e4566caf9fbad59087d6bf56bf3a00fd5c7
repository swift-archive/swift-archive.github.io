<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[SR-119] AnySequence --&gt; Any*Collection promotion</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  2, 2016 at 09:00:00pm</p></header><div class="content"><p>Hello all,<br></p><p>Currently there exist at least four &#39;type-erased&#39; sequence/collection types: AnySequence, AnyForwardCollection, AnyBidirectionalCollection, and AnyRandomAccessCollection.<br></p><p>The three Any*Collection types can be conceptually arranged into a &#39;ladder&#39;, in which collections can be constructed unconditionally from collection types above themselves, and conditionally from collection types below themselves. I&#39;ve put together a little ASCII image of this here: (https://gist.github.com/austinzheng/829425242bef1573b668 &lt;https://gist.github.com/austinzheng/829425242bef1573b668&gt;).<br></p><p>Note that AnySequence doesn&#39;t currently fit into this ladder: Any*Collection instances can&#39;t easily be constructed from AnySequences. SR-119 (https://bugs.swift.org/browse/SR-119 &lt;https://bugs.swift.org/browse/SR-119&gt;) aims to change that. As per that ticket, I propose that we add three promotion APIs, sketched out as following:<br></p><p>extension AnyForwardCollection {<br>    init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>}<br></p><p>extension AnyBidirectionalCollection {<br>    init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>}<br></p><p>extension AnyRandomAccessCollection {<br>    init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>}<br></p><p>Like their Any*Collection --&gt; Any*Collection antecedents, these initializers construct a new Any*Collection out of an existing AnySequence, but only if the underlying sequence is compatible, and without copying the underlying sequence.<br></p><p>I&#39;ll also have to examine SE-0014 (https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md&gt;) more closely to see if it has any effects on this proposal.<br></p><p>I plan on submitting a formal proposal at some point (probably by the end of the coming week), but first wish to solicit feedback, opinions, concerns, etc. Thanks for your time.<br></p><p>Best,<br>Austin<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160102/1b5ed5c7/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/d53b7c5f9b5f5557b9082face9b632a0?s=50"></div><header><strong>[SR-119] AnySequence --&gt; Any*Collection promotion</strong> from <string>Dave Abrahams</string> &lt;dabrahams at apple.com&gt;<p>January  3, 2016 at 12:00:00am</p></header><div class="content"><p>&gt; On Jan 2, 2016, at 9:44 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Hello all,<br>&gt; <br>&gt; Currently there exist at least four &#39;type-erased&#39; sequence/collection types: AnySequence, AnyForwardCollection, AnyBidirectionalCollection, and AnyRandomAccessCollection.<br>&gt; <br>&gt; The three Any*Collection types can be conceptually arranged into a &#39;ladder&#39;, in which collections can be constructed unconditionally from collection types above themselves, and conditionally from collection types below themselves. I&#39;ve put together a little ASCII image of this here: (https://gist.github.com/austinzheng/829425242bef1573b668 &lt;https://gist.github.com/austinzheng/829425242bef1573b668&gt;).<br>&gt; <br>&gt; Note that AnySequence doesn&#39;t currently fit into this ladder: Any*Collection instances can&#39;t easily be constructed from AnySequences. SR-119 (https://bugs.swift.org/browse/SR-119 &lt;https://bugs.swift.org/browse/SR-119&gt;) aims to change that. As per that ticket, I propose that we add three promotion APIs, sketched out as following:<br>&gt; <br>&gt; extension AnyForwardCollection {<br>&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt; }<br>&gt; <br>&gt; extension AnyBidirectionalCollection {<br>&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt; }<br>&gt; <br>&gt; extension AnyRandomAccessCollection {<br>&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt; }<br>&gt; <br>&gt; Like their Any*Collection --&gt; Any*Collection antecedents, these initializers construct a new Any*Collection out of an existing AnySequence, but only if the underlying sequence is compatible, and without copying the underlying sequence.<br>&gt; <br>&gt; I&#39;ll also have to examine SE-0014 (https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md &lt;https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md&gt;) more closely to see if it has any effects on this proposal.<br>&gt; <br>&gt; I plan on submitting a formal proposal at some point (probably by the end of the coming week), but first wish to solicit feedback, opinions, concerns, etc. Thanks for your time.<br></p><p>My main concern is whether you can implement it, and do so efficiently.  I don’t have a particular reason to think you can’t, but it seems simple enough to check, so IMO such a proposal should come with an implementation.<br></p><p>-Dave<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/3c64dd2e/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/279fa63eae4ac804b4dbdb83686797bf?s=50"></div><header><strong>[SR-119] AnySequence --&gt; Any*Collection promotion</strong> from <string>Austin Zheng</string> &lt;austinzheng at gmail.com&gt;<p>January  3, 2016 at 01:00:00am</p></header><div class="content"><p>Agreed, any proposal would come with an accompanying PR. Since the API itself is pretty straightforward, I don&#39;t think this will put any undue burden on the reviewers. <br></p><p>Austin<br></p><p>&gt; On Jan 3, 2016, at 12:09 AM, Dave Abrahams &lt;dabrahams at apple.com&gt; wrote:<br>&gt; <br>&gt; <br>&gt;&gt; On Jan 2, 2016, at 9:44 PM, Austin Zheng via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt;&gt; <br>&gt;&gt; Hello all,<br>&gt;&gt; <br>&gt;&gt; Currently there exist at least four &#39;type-erased&#39; sequence/collection types: AnySequence, AnyForwardCollection, AnyBidirectionalCollection, and AnyRandomAccessCollection.<br>&gt;&gt; <br>&gt;&gt; The three Any*Collection types can be conceptually arranged into a &#39;ladder&#39;, in which collections can be constructed unconditionally from collection types above themselves, and conditionally from collection types below themselves. I&#39;ve put together a little ASCII image of this here: (https://gist.github.com/austinzheng/829425242bef1573b668).<br>&gt;&gt; <br>&gt;&gt; Note that AnySequence doesn&#39;t currently fit into this ladder: Any*Collection instances can&#39;t easily be constructed from AnySequences. SR-119 (https://bugs.swift.org/browse/SR-119) aims to change that. As per that ticket, I propose that we add three promotion APIs, sketched out as following:<br>&gt;&gt; <br>&gt;&gt; extension AnyForwardCollection {<br>&gt;&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension AnyBidirectionalCollection {<br>&gt;&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; extension AnyRandomAccessCollection {<br>&gt;&gt;     init?&lt;Element&gt;(_: AnySequence&lt; Element&gt;)<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Like their Any*Collection --&gt; Any*Collection antecedents, these initializers construct a new Any*Collection out of an existing AnySequence, but only if the underlying sequence is compatible, and without copying the underlying sequence.<br>&gt;&gt; <br>&gt;&gt; I&#39;ll also have to examine SE-0014 (https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md) more closely to see if it has any effects on this proposal.<br>&gt;&gt; <br>&gt;&gt; I plan on submitting a formal proposal at some point (probably by the end of the coming week), but first wish to solicit feedback, opinions, concerns, etc. Thanks for your time.<br>&gt; <br>&gt; My main concern is whether you can implement it, and do so efficiently.  I don’t have a particular reason to think you can’t, but it seems simple enough to check, so IMO such a proposal should come with an implementation.<br>&gt; <br>&gt; -Dave<br>&gt; <br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160103/1f8c72ff/attachment.html&gt;<br></p></div></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
