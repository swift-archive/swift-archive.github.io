<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Swift Mailing List Archive</title>
    <link rel="stylesheet" href="/css/app-13f065ae5e595562a5022c544e3b976c.css">
  </head>

  <body>
    <div class="container">
      <header class="header">
        <img src="/images/swift-d0237fc716ba0932a940049990beba1b.svg" height="70">
      </header>

      <p class="alert alert-info" role="alert"></p>
      <p class="alert alert-danger" role="alert"></p>

    </div> <!-- /container -->
    <main role="main">
<div class="comment-wrapper"><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/886f7902c986a59d5cc184425d513c36?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Tim Vermeulen</string> &lt;tvermeulen at me.com&gt;<p>June  7, 2016 at 12:00:00am</p></header><div class="content"><p>I didn’t mean we should really get rid of the `where` clause, it’s great. I guess the point I was trying to make is that we can use a `where` clause with a `for` loop in Swift, despite the existence of the `filter` method. So despite `prefix(while:)` in Swift 3, there might be room for a `while` clause. I think it makes the code a lot more readable, much like how `where` can make a `for` loop a lot more readable than using `filter`.<br></p><p>&gt; The burden of proof for adding new features is different from that for taking away existing features.<br>&gt; <br>&gt; If a feature doesn&#39;t yet exist, a successful proposal will show how it provides additional and non-trivial utility. If a feature already exists, a successful proposal to remove it will show how it is harmful to the language or contrary to the direction in which it is evolving.<br>&gt; <br>&gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com(mailto:tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; The functionality of the `where` clause in `for` loops also already can be mimicked using `filter`. Wouldn’t we have to get ride of the `where` clause by that logic?<br>&gt; &gt; <br>&gt; &gt; &gt;The functionality being asked for here is already accepted for inclusion to Swift as a method on Sequence named `prefix(while:)` (SE-0045):<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a potential point of confusion.)<br>&gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the condition isn&#39;t met. The first time that the condition isn&#39;t met, evaluation of the loop stops. I get that this is technically true for the `while` construct but I suggest that the only reason that it works there is that &#39;stopping the first time that the condition isn&#39;t met&#39; *is* the construct. Here, we have a loop that we execute for each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten Seitz&lt;tseitz42 at icloud.com(mailto:tseitz42 at icloud.com)(mailto:tseitz42 at icloud.com)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;:<br>&gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing that `where` makes sure a condition is met, while `until` makes sure the condition isn’t met. I think `while` makes more sense because it corresponds to `break` in the same way that `where` corresponds to `continue`.<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and `where` look quite similar at a glance.<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what `where` does.<br>&gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t `until` make more sense? `while`, to me, actually reads like it should do what `where` does. In any case, whether it is `while` or `where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;&gt;<br>&gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;<br>&gt; &gt; &gt;_______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; <br>&gt; <br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  6, 2016 at 11:00:00pm</p></header><div class="content"><p>Personally, given this discussion and the one about `where` in if and while<br>statements, I would not be opposed to elimination of `where` in control<br>statements altogether.<br></p><p>My reasoning would be that words like filter and prefix unambiguously<br>indicate what happens to elements of a sequence for which the predicate<br>returns false, whereas words like where and while are ambiguous.<br></p><p>On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com&gt; wrote:<br></p><p>&gt; I didn’t mean we should really get rid of the `where` clause, it’s great.<br>&gt; I guess the point I was trying to make is that we can use a `where` clause<br>&gt; with a `for` loop in Swift, despite the existence of the `filter` method.<br>&gt; So despite `prefix(while:)` in Swift 3, there might be room for a `while`<br>&gt; clause. I think it makes the code a lot more readable, much like how<br>&gt; `where` can make a `for` loop a lot more readable than using `filter`.<br>&gt;<br>&gt; &gt; The burden of proof for adding new features is different from that for<br>&gt; taking away existing features.<br>&gt; &gt;<br>&gt; &gt; If a feature doesn&#39;t yet exist, a successful proposal will show how it<br>&gt; provides additional and non-trivial utility. If a feature already exists, a<br>&gt; successful proposal to remove it will show how it is harmful to the<br>&gt; language or contrary to the direction in which it is evolving.<br>&gt; &gt;<br>&gt; &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com(mailto:<br>&gt; tvermeulen at me.com)&gt;wrote:<br>&gt; &gt; &gt; The functionality of the `where` clause in `for` loops also already<br>&gt; can be mimicked using `filter`. Wouldn’t we have to get ride of the `where`<br>&gt; clause by that logic?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;The functionality being asked for here is already accepted for<br>&gt; inclusion to Swift as a method on Sequence named `prefix(while:)` (SE-0045):<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt; potential point of confusion.)<br>&gt; &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt; condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt; evaluation of the loop stops. I get that this is technically true for the<br>&gt; `while` construct but I suggest that the only reason that it works there is<br>&gt; that &#39;stopping the first time that the condition isn&#39;t met&#39; *is* the<br>&gt; construct. Here, we have a loop that we execute for each thing and we&#39;re<br>&gt; tacking on/intermingling the `while` construct.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten Seitz&lt;tseitz42 at icloud.com<br>&gt; (mailto:tseitz42 at icloud.com)(mailto:tseitz42 at icloud.com)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)&gt;:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing that<br>&gt; `where` makes sure a condition is met, while `until` makes sure the<br>&gt; condition isn’t met. I think `while` makes more sense because it<br>&gt; corresponds to `break` in the same way that `where` corresponds to<br>&gt; `continue`.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt; `where` look quite similar at a glance.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what `where`<br>&gt; does.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt; condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt; `until` make more sense? `while`, to me, actually reads like it should do<br>&gt; what `where` does. In any case, whether it is `while` or `where`, this<br>&gt; seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution&lt;<br>&gt; swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)(mailto:swift-evolution at swift.org)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the condition<br>&gt; isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a sorted<br>&gt; array and we already know that once the condition isn’t met, it won’t be<br>&gt; met either for subsequent elements. Another use case could be an infinite<br>&gt; sequence that we want to cut off somewhere (which is simply not possible<br>&gt; using a where clause).<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org<br>&gt; )(mailto:swift-evolution at swift.org)(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org<br>&gt; )(mailto:swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;swift-evolution at swift.org(mailto:swift-evolution at swift.org)(mailto:<br>&gt; swift-evolution at swift.org)<br>&gt; &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160606/5205e67b/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/3b3f5abbe48b7127e20fd69808c714bf?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Charlie Monroe</string> &lt;charlie at charliemonroe.net&gt;<p>June  7, 2016 at 07:00:00am</p></header><div class="content"><p>I strongly disagree.<br></p><p>Exchanging<br></p><p>for result in results where result.value != .Warning while result.value != .Error {<br>	/// ...<br>}<br></p><p>for either <br></p><p>for result in results.filter({ $0.value != .Warning }).prefix(while: { $0.value != .Error })) {<br>	/// ...<br>}<br></p><p>or<br></p><p>for result in results {<br>	if result.value == .Warning { continue }<br>	if result.value == .Error { break }<br>	<br>	/// ...<br>}<br></p><p>Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t return a lazy collection, but will recreate it, while the `where` will do on-the-fly check.<br></p><p>&gt; On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; Personally, given this discussion and the one about `where` in if and while statements, I would not be opposed to elimination of `where` in control statements altogether.<br>&gt; <br>&gt; My reasoning would be that words like filter and prefix unambiguously indicate what happens to elements of a sequence for which the predicate returns false, whereas words like where and while are ambiguous.<br>&gt; <br>&gt; On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt; I didn’t mean we should really get rid of the `where` clause, it’s great. I guess the point I was trying to make is that we can use a `where` clause with a `for` loop in Swift, despite the existence of the `filter` method. So despite `prefix(while:)` in Swift 3, there might be room for a `while` clause. I think it makes the code a lot more readable, much like how `where` can make a `for` loop a lot more readable than using `filter`.<br>&gt; <br>&gt; &gt; The burden of proof for adding new features is different from that for taking away existing features.<br>&gt; &gt;<br>&gt; &gt; If a feature doesn&#39;t yet exist, a successful proposal will show how it provides additional and non-trivial utility. If a feature already exists, a successful proposal to remove it will show how it is harmful to the language or contrary to the direction in which it is evolving.<br>&gt; &gt;<br>&gt; &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com &lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; The functionality of the `where` clause in `for` loops also already can be mimicked using `filter`. Wouldn’t we have to get ride of the `where` clause by that logic?<br>&gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;The functionality being asked for here is already accepted for inclusion to Swift as a method on Sequence named `prefix(while:)` (SE-0045):<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt; &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a potential point of confusion.)<br>&gt; &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the condition isn&#39;t met. The first time that the condition isn&#39;t met, evaluation of the loop stops. I get that this is technically true for the `while` construct but I suggest that the only reason that it works there is that &#39;stopping the first time that the condition isn&#39;t met&#39; *is* the construct. Here, we have a loop that we execute for each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten Seitz&lt;tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com &lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing that `where` makes sure a condition is met, while `until` makes sure the condition isn’t met. I think `while` makes more sense because it corresponds to `break` in the same way that `where` corresponds to `continue`.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and `where` look quite similar at a glance.<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt; &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what `where` does.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the condition isn’t met, just like in a while loop.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t `until` make more sense? `while`, to me, actually reads like it should do what `where` does. In any case, whether it is `while` or `where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via swift-evolution&lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the condition isn’t met instead. I propose a while clause:<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a sorted array and we already know that once the condition isn’t met, it won’t be met either for subsequent elements. Another use case could be an infinite sequence that we want to cut off somewhere (which is simply not possible using a where clause).<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; &gt; &gt;&gt;<br>&gt; &gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt; &gt; &gt;&gt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;<br>&gt; &gt; &gt; &gt;_______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution &lt;https://lists.swift.org/mailman/listinfo/swift-evolution&gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p><p>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/760860d5/attachment.html&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/a0b362cd96d9f85beab1079ff37e3d19?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Vladimir.S</string> &lt;svabox at gmail.com&gt;<p>June  7, 2016 at 02:00:00pm</p></header><div class="content"><p>My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in `for` <br>loop would be very handy and helpful in some situations, it is a pair for <br>existed `where`, its meaning is obvious, and its existence can&#39;t depend on <br>existence of any method in collections. I&#39;d like to see a formal proposal <br>for this feature.<br></p><p>On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt; I strongly disagree.<br>&gt;<br>&gt; Exchanging<br>&gt;<br>&gt; for result in results where result.value != .Warning while result.value !=<br>&gt; .Error {<br>&gt; /// ...<br>&gt; }<br>&gt;<br>&gt; for either<br>&gt;<br>&gt; for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt; $0.value != .Error })) {<br>&gt; /// ...<br>&gt; }<br>&gt;<br>&gt; or<br>&gt;<br>&gt; for result in results {<br>&gt; if result.value == .Warning { continue }<br>&gt; if result.value == .Error { break }<br>&gt;<br>&gt; /// ...<br>&gt; }<br>&gt;<br>&gt; Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t return<br>&gt; a lazy collection, but will recreate it, while the `where` will do<br>&gt; on-the-fly check.<br>&gt;<br>&gt;&gt; On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt; Personally, given this discussion and the one about `where` in if and<br>&gt;&gt; while statements, I would not be opposed to elimination of `where` in<br>&gt;&gt; control statements altogether.<br>&gt;&gt;<br>&gt;&gt; My reasoning would be that words like filter and prefix unambiguously<br>&gt;&gt; indicate what happens to elements of a sequence for which the predicate<br>&gt;&gt; returns false, whereas words like where and while are ambiguous.<br>&gt;&gt;<br>&gt;&gt; On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com<br>&gt;&gt; &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;<br>&gt;&gt;     I didn’t mean we should really get rid of the `where` clause, it’s<br>&gt;&gt;     great. I guess the point I was trying to make is that we can use a<br>&gt;&gt;     `where` clause with a `for` loop in Swift, despite the existence of<br>&gt;&gt;     the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt;&gt;     might be room for a `while` clause. I think it makes the code a lot<br>&gt;&gt;     more readable, much like how `where` can make a `for` loop a lot more<br>&gt;&gt;     readable than using `filter`.<br>&gt;&gt;<br>&gt;&gt;     &gt; The burden of proof for adding new features is different from that<br>&gt;&gt;     for taking away existing features.<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; If a feature doesn&#39;t yet exist, a successful proposal will show how<br>&gt;&gt;     it provides additional and non-trivial utility. If a feature already<br>&gt;&gt;     exists, a successful proposal to remove it will show how it is<br>&gt;&gt;     harmful to the language or contrary to the direction in which it is<br>&gt;&gt;     evolving.<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com<br>&gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt;&gt;     &gt; &gt; The functionality of the `where` clause in `for` loops also<br>&gt;&gt;     already can be mimicked using `filter`. Wouldn’t we have to get ride<br>&gt;&gt;     of the `where` clause by that logic?<br>&gt;&gt;     &gt; &gt;<br>&gt;&gt;     &gt; &gt; &gt;The functionality being asked for here is already accepted for<br>&gt;&gt;     inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt;&gt;     (SE-0045):<br>&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;     &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt;&gt;     &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;     &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt;&gt;     potential point of confusion.)<br>&gt;&gt;     &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt;&gt;     condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt;&gt;     evaluation of the loop stops. I get that this is technically true for<br>&gt;&gt;     the `while` construct but I suggest that the only reason that it<br>&gt;&gt;     works there is that &#39;stopping the first time that the condition isn&#39;t<br>&gt;&gt;     met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt;&gt;     each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt;&gt;     Seitz&lt;tseitz42 at icloud.com<br>&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt;&gt;     that `where` makes sure a condition is met, while `until` makes sure<br>&gt;&gt;     the condition isn’t met. I think `while` makes more sense because it<br>&gt;&gt;     corresponds to `break` in the same way that `where` corresponds to<br>&gt;&gt;     `continue`.<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt;&gt;     `where` look quite similar at a glance.<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt;&gt;     `where` does.<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt;&gt;     condition isn’t met, just like in a while loop.<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt;&gt;     `until` make more sense? `while`, to me, actually reads like it<br>&gt;&gt;     should do what `where` does. In any case, whether it is `while` or<br>&gt;&gt;     `where`, this seems like a reasonable feature in my opinion.<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt;&gt;     condition isn’t met instead. I propose a while clause:<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt;&gt;     sorted array and we already know that once the condition isn’t met,<br>&gt;&gt;     it won’t be met either for subsequent elements. Another use case<br>&gt;&gt;     could be an infinite sequence that we want to cut off somewhere<br>&gt;&gt;     (which is simply not possible using a where clause).<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;     &gt; &gt; &gt;&gt;_______________________________________________<br>&gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;     &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;     &gt; &gt; &gt;_______________________________________________<br>&gt;&gt;     &gt; swift-evolution mailing list<br>&gt;&gt;     &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;<br>&gt;&gt;     &gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>&gt;<br>&gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br></p></div><ul class="comments"><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/552d80567b8f0241a53cee772470ddd0?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Rob Norback</string> &lt;rnorback at gmail.com&gt;<p>June  7, 2016 at 07:00:00am</p></header><div class="content"><p>I give my +1 to this feature, it allows you to be explicit about a for loop escape condition at the outset instead of it being contained within the loops logic making them easier to maintain.  Also it reads extremely well.<br></p><p>&gt; On Jun 7, 2016, at 5:20 AM, Vladimir.S via swift-evolution &lt;swift-evolution at swift.org&gt; wrote:<br>&gt; <br>&gt; My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in `for` loop would be very handy and helpful in some situations, it is a pair for existed `where`, its meaning is obvious, and its existence can&#39;t depend on existence of any method in collections. I&#39;d like to see a formal proposal for this feature.<br>&gt; <br>&gt;&gt; On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt;&gt; I strongly disagree.<br>&gt;&gt; <br>&gt;&gt; Exchanging<br>&gt;&gt; <br>&gt;&gt; for result in results where result.value != .Warning while result.value !=<br>&gt;&gt; .Error {<br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; for either<br>&gt;&gt; <br>&gt;&gt; for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt;&gt; $0.value != .Error })) {<br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; or<br>&gt;&gt; <br>&gt;&gt; for result in results {<br>&gt;&gt; if result.value == .Warning { continue }<br>&gt;&gt; if result.value == .Error { break }<br>&gt;&gt; <br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt; <br>&gt;&gt; Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t return<br>&gt;&gt; a lazy collection, but will recreate it, while the `where` will do<br>&gt;&gt; on-the-fly check.<br>&gt;&gt; <br>&gt;&gt;&gt; On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; Personally, given this discussion and the one about `where` in if and<br>&gt;&gt;&gt; while statements, I would not be opposed to elimination of `where` in<br>&gt;&gt;&gt; control statements altogether.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; My reasoning would be that words like filter and prefix unambiguously<br>&gt;&gt;&gt; indicate what happens to elements of a sequence for which the predicate<br>&gt;&gt;&gt; returns false, whereas words like where and while are ambiguous.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com<br>&gt;&gt;&gt; &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    I didn’t mean we should really get rid of the `where` clause, it’s<br>&gt;&gt;&gt;    great. I guess the point I was trying to make is that we can use a<br>&gt;&gt;&gt;    `where` clause with a `for` loop in Swift, despite the existence of<br>&gt;&gt;&gt;    the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt;&gt;&gt;    might be room for a `while` clause. I think it makes the code a lot<br>&gt;&gt;&gt;    more readable, much like how `where` can make a `for` loop a lot more<br>&gt;&gt;&gt;    readable than using `filter`.<br>&gt;&gt;&gt; <br>&gt;&gt;&gt;    &gt; The burden of proof for adding new features is different from that<br>&gt;&gt;&gt;    for taking away existing features.<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt; If a feature doesn&#39;t yet exist, a successful proposal will show how<br>&gt;&gt;&gt;    it provides additional and non-trivial utility. If a feature already<br>&gt;&gt;&gt;    exists, a successful proposal to remove it will show how it is<br>&gt;&gt;&gt;    harmful to the language or contrary to the direction in which it is<br>&gt;&gt;&gt;    evolving.<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com<br>&gt;&gt;&gt;    &lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt;&gt;&gt;    &lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt;&gt;&gt;    &gt; &gt; The functionality of the `where` clause in `for` loops also<br>&gt;&gt;&gt;    already can be mimicked using `filter`. Wouldn’t we have to get ride<br>&gt;&gt;&gt;    of the `where` clause by that logic?<br>&gt;&gt;&gt;    &gt; &gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;The functionality being asked for here is already accepted for<br>&gt;&gt;&gt;    inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt;&gt;&gt;    (SE-0045):<br>&gt;&gt;&gt;    &gt; &gt; &gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) { ... }`<br>&gt;&gt;&gt;    &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt;&gt;&gt;    swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt;&gt;&gt;    potential point of confusion.)<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt;&gt;&gt;    condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt;&gt;&gt;    evaluation of the loop stops. I get that this is technically true for<br>&gt;&gt;&gt;    the `while` construct but I suggest that the only reason that it<br>&gt;&gt;&gt;    works there is that &#39;stopping the first time that the condition isn&#39;t<br>&gt;&gt;&gt;    met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt;&gt;&gt;    each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt;&gt;&gt;    Seitz&lt;tseitz42 at icloud.com<br>&gt;&gt;&gt;    &lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt;&gt;&gt;    &lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt;&gt;&gt;    &lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt;&gt;&gt;    swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt;&gt;&gt;    that `where` makes sure a condition is met, while `until` makes sure<br>&gt;&gt;&gt;    the condition isn’t met. I think `while` makes more sense because it<br>&gt;&gt;&gt;    corresponds to `break` in the same way that `where` corresponds to<br>&gt;&gt;&gt;    `continue`.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt;&gt;&gt;    `where` look quite similar at a glance.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt;&gt;&gt;    `where` does.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt;&gt;&gt;    condition isn’t met, just like in a while loop.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt;&gt;&gt;    `until` make more sense? `while`, to me, actually reads like it<br>&gt;&gt;&gt;    should do what `where` does. In any case, whether it is `while` or<br>&gt;&gt;&gt;    `where`, this seems like a reasonable feature in my opinion.<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt;&gt;&gt;    swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt;&gt;&gt;    condition isn’t met instead. I propose a while clause:<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt;&gt;&gt;    sorted array and we already know that once the condition isn’t met,<br>&gt;&gt;&gt;    it won’t be met either for subsequent elements. Another use case<br>&gt;&gt;&gt;    could be an infinite sequence that we want to cut off somewhere<br>&gt;&gt;&gt;    (which is simply not possible using a where clause).<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;_______________________________________________<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;    &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;    &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;    &gt; &gt; &gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;<br>&gt;&gt;&gt;    &gt; &gt; &gt;_______________________________________________<br>&gt;&gt;&gt;    &gt; swift-evolution mailing list<br>&gt;&gt;&gt;    &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;    &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt;    &gt;<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; <br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/60dcb74d816e29b2aa6b9c0b5969670e?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Xiaodi Wu</string> &lt;xiaodi.wu at gmail.com&gt;<p>June  7, 2016 at 05:00:00pm</p></header><div class="content"><p>filter() is and prefix(while:) will be available on all sequences. The<br>for...in loop only traverses through sequences.<br></p><p>The meaning of the proposed while is not at all a pair for where, since<br>where clauses in while loops would do the same thing as while clauses in<br>for loops. That&#39;s crazy.<br></p><p>On Tue, Jun 7, 2016 at 06:20 Vladimir.S via swift-evolution &lt;<br>swift-evolution at swift.org&gt; wrote:<br></p><p>&gt; My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in `for`<br>&gt; loop would be very handy and helpful in some situations, it is a pair for<br>&gt; existed `where`, its meaning is obvious, and its existence can&#39;t depend on<br>&gt; existence of any method in collections. I&#39;d like to see a formal proposal<br>&gt; for this feature.<br>&gt;<br>&gt; On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt; &gt; I strongly disagree.<br>&gt; &gt;<br>&gt; &gt; Exchanging<br>&gt; &gt;<br>&gt; &gt; for result in results where result.value != .Warning while result.value<br>&gt; !=<br>&gt; &gt; .Error {<br>&gt; &gt; /// ...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; for either<br>&gt; &gt;<br>&gt; &gt; for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt; &gt; $0.value != .Error })) {<br>&gt; &gt; /// ...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; or<br>&gt; &gt;<br>&gt; &gt; for result in results {<br>&gt; &gt; if result.value == .Warning { continue }<br>&gt; &gt; if result.value == .Error { break }<br>&gt; &gt;<br>&gt; &gt; /// ...<br>&gt; &gt; }<br>&gt; &gt;<br>&gt; &gt; Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t<br>&gt; return<br>&gt; &gt; a lazy collection, but will recreate it, while the `where` will do<br>&gt; &gt; on-the-fly check.<br>&gt; &gt;<br>&gt; &gt;&gt; On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt; &gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; Personally, given this discussion and the one about `where` in if and<br>&gt; &gt;&gt; while statements, I would not be opposed to elimination of `where` in<br>&gt; &gt;&gt; control statements altogether.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; My reasoning would be that words like filter and prefix unambiguously<br>&gt; &gt;&gt; indicate what happens to elements of a sequence for which the predicate<br>&gt; &gt;&gt; returns false, whereas words like where and while are ambiguous.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com<br>&gt; &gt;&gt; &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     I didn’t mean we should really get rid of the `where` clause, it’s<br>&gt; &gt;&gt;     great. I guess the point I was trying to make is that we can use a<br>&gt; &gt;&gt;     `where` clause with a `for` loop in Swift, despite the existence of<br>&gt; &gt;&gt;     the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt; &gt;&gt;     might be room for a `while` clause. I think it makes the code a lot<br>&gt; &gt;&gt;     more readable, much like how `where` can make a `for` loop a lot<br>&gt; more<br>&gt; &gt;&gt;     readable than using `filter`.<br>&gt; &gt;&gt;<br>&gt; &gt;&gt;     &gt; The burden of proof for adding new features is different from that<br>&gt; &gt;&gt;     for taking away existing features.<br>&gt; &gt;&gt;     &gt;<br>&gt; &gt;&gt;     &gt; If a feature doesn&#39;t yet exist, a successful proposal will show<br>&gt; how<br>&gt; &gt;&gt;     it provides additional and non-trivial utility. If a feature already<br>&gt; &gt;&gt;     exists, a successful proposal to remove it will show how it is<br>&gt; &gt;&gt;     harmful to the language or contrary to the direction in which it is<br>&gt; &gt;&gt;     evolving.<br>&gt; &gt;&gt;     &gt;<br>&gt; &gt;&gt;     &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com<br>&gt; &gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt; &gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt; &gt;&gt;     &gt; &gt; The functionality of the `where` clause in `for` loops also<br>&gt; &gt;&gt;     already can be mimicked using `filter`. Wouldn’t we have to get ride<br>&gt; &gt;&gt;     of the `where` clause by that logic?<br>&gt; &gt;&gt;     &gt; &gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;The functionality being asked for here is already accepted for<br>&gt; &gt;&gt;     inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt; &gt;&gt;     (SE-0045):<br>&gt; &gt;&gt;     &gt; &gt; &gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) {<br>&gt; ... }`<br>&gt; &gt;&gt;     &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt; &gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt; &gt;&gt;     potential point of confusion.)<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt; &gt;&gt;     condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt; &gt;&gt;     evaluation of the loop stops. I get that this is technically true<br>&gt; for<br>&gt; &gt;&gt;     the `while` construct but I suggest that the only reason that it<br>&gt; &gt;&gt;     works there is that &#39;stopping the first time that the condition<br>&gt; isn&#39;t<br>&gt; &gt;&gt;     met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt; &gt;&gt;     each thing and we&#39;re tacking on/intermingling the `while` construct.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt; &gt;&gt;     Seitz&lt;tseitz42 at icloud.com<br>&gt; &gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt; &gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt; &gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt; &gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt; &gt;&gt;     that `where` makes sure a condition is met, while `until` makes sure<br>&gt; &gt;&gt;     the condition isn’t met. I think `while` makes more sense because it<br>&gt; &gt;&gt;     corresponds to `break` in the same way that `where` corresponds to<br>&gt; &gt;&gt;     `continue`.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while` and<br>&gt; &gt;&gt;     `where` look quite similar at a glance.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt; &gt;&gt;     `where` does.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt; &gt;&gt;     condition isn’t met, just like in a while loop.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt; &gt;&gt;     `until` make more sense? `while`, to me, actually reads like it<br>&gt; &gt;&gt;     should do what `where` does. In any case, whether it is `while` or<br>&gt; &gt;&gt;     `where`, this seems like a reasonable feature in my opinion.<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt; &gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like this:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt; &gt;&gt;     condition isn’t met instead. I propose a while clause:<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// …<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;…<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt; &gt;&gt;     sorted array and we already know that once the condition isn’t met,<br>&gt; &gt;&gt;     it won’t be met either for subsequent elements. Another use case<br>&gt; &gt;&gt;     could be an infinite sequence that we want to cut off somewhere<br>&gt; &gt;&gt;     (which is simply not possible using a where clause).<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;_______________________________________________<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)(mailto:<br>&gt; swift-evolution at swift.org<br>&gt; &gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt; &gt;&gt;     &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;     &gt; &gt; &gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;<br>&gt; &gt;&gt;     &gt; &gt; &gt;_______________________________________________<br>&gt; &gt;&gt;     &gt; swift-evolution mailing list<br>&gt; &gt;&gt;     &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;&gt;     &gt;<br>&gt; &gt;&gt;     &gt;<br>&gt; &gt;&gt;     &gt;<br>&gt; &gt;&gt;<br>&gt; &gt;&gt; _______________________________________________<br>&gt; &gt;&gt; swift-evolution mailing list<br>&gt; &gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt; &gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt;<br>&gt; &gt; _______________________________________________<br>&gt; &gt; swift-evolution mailing list<br>&gt; &gt; swift-evolution at swift.org<br>&gt; &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt; &gt;<br>&gt; _______________________________________________<br>&gt; swift-evolution mailing list<br>&gt; swift-evolution at swift.org<br>&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;<br>-------------- next part --------------<br>An HTML attachment was scrubbed...<br>URL: &lt;https://lists.swift.org/pipermail/swift-evolution/attachments/20160607/47bbb553/attachment.html&gt;<br></p></div></li><li class="comment"><div class="avatar"><img src="https://www.gravatar.com/avatar/8d2a6dc9b1ae925320d253a48b6fa775?s=50"></div><header><strong>Add a while clause to for loops</strong> from <string>Hignite, Jamie</string> &lt;Jamie.Hignite at kindred.com&gt;<p>June  8, 2016 at 03:00:00pm</p></header><div class="content"><p>+1 as well<br></p><p><br>Thanks!<br></p><p>Jamie<br></p><p><br>On 6/7/16, 7:20 AM, &quot;swift-evolution-bounces at swift.org on behalf of<br>Vladimir.S via swift-evolution&quot; &lt;swift-evolution-bounces at swift.org on<br>behalf of swift-evolution at swift.org&gt; wrote:<br></p><p><br>&gt;My +1 to the proposal and for Charlie&#39;s opinion. I believe `while` in<br>&gt;`for` <br>&gt;loop would be very handy and helpful in some situations, it is a pair for<br>&gt;existed `where`, its meaning is obvious, and its existence can&#39;t depend<br>&gt;on <br>&gt;existence of any method in collections. I&#39;d like to see a formal proposal<br>&gt;for this feature.<br>&gt;<br>&gt;On 07.06.2016 8:18, Charlie Monroe via swift-evolution wrote:<br>&gt;&gt; I strongly disagree.<br>&gt;&gt;<br>&gt;&gt; Exchanging<br>&gt;&gt;<br>&gt;&gt; for result in results where result.value != .Warning while result.value<br>&gt;&gt;!=<br>&gt;&gt; .Error {<br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; for either<br>&gt;&gt;<br>&gt;&gt; for result in results.filter({ $0.value != .Warning }).prefix(while: {<br>&gt;&gt; $0.value != .Error })) {<br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; or<br>&gt;&gt;<br>&gt;&gt; for result in results {<br>&gt;&gt; if result.value == .Warning { continue }<br>&gt;&gt; if result.value == .Error { break }<br>&gt;&gt;<br>&gt;&gt; /// ...<br>&gt;&gt; }<br>&gt;&gt;<br>&gt;&gt; Seems like an absolute step back. Not to mention filter(_:) doesn&#39;t<br>&gt;&gt;return<br>&gt;&gt; a lazy collection, but will recreate it, while the `where` will do<br>&gt;&gt; on-the-fly check.<br>&gt;&gt;<br>&gt;&gt;&gt; On Jun 7, 2016, at 1:34 AM, Xiaodi Wu via swift-evolution<br>&gt;&gt;&gt; &lt;swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; Personally, given this discussion and the one about `where` in if and<br>&gt;&gt;&gt; while statements, I would not be opposed to elimination of `where` in<br>&gt;&gt;&gt; control statements altogether.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; My reasoning would be that words like filter and prefix unambiguously<br>&gt;&gt;&gt; indicate what happens to elements of a sequence for which the predicate<br>&gt;&gt;&gt; returns false, whereas words like where and while are ambiguous.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; On Mon, Jun 6, 2016 at 17:52 Tim Vermeulen &lt;tvermeulen at me.com<br>&gt;&gt;&gt; &lt;mailto:tvermeulen at me.com&gt;&gt; wrote:<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     I didn¹t mean we should really get rid of the `where` clause, it¹s<br>&gt;&gt;&gt;     great. I guess the point I was trying to make is that we can use a<br>&gt;&gt;&gt;     `where` clause with a `for` loop in Swift, despite the existence of<br>&gt;&gt;&gt;     the `filter` method. So despite `prefix(while:)` in Swift 3, there<br>&gt;&gt;&gt;     might be room for a `while` clause. I think it makes the code a lot<br>&gt;&gt;&gt;     more readable, much like how `where` can make a `for` loop a lot<br>&gt;&gt;&gt;more<br>&gt;&gt;&gt;     readable than using `filter`.<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; The burden of proof for adding new features is different from<br>&gt;&gt;&gt;that<br>&gt;&gt;&gt;     for taking away existing features.<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; If a feature doesn&#39;t yet exist, a successful proposal will show<br>&gt;&gt;&gt;how<br>&gt;&gt;&gt;     it provides additional and non-trivial utility. If a feature<br>&gt;&gt;&gt;already<br>&gt;&gt;&gt;     exists, a successful proposal to remove it will show how it is<br>&gt;&gt;&gt;     harmful to the language or contrary to the direction in which it is<br>&gt;&gt;&gt;     evolving.<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt; On Mon, Jun 6, 2016 at 15:38 Tim Vermeulen&lt;tvermeulen at me.com<br>&gt;&gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;(mailto:tvermeulen at me.com<br>&gt;&gt;&gt;     &lt;mailto:tvermeulen at me.com&gt;)&gt;wrote:<br>&gt;&gt;&gt;     &gt; &gt; The functionality of the `where` clause in `for` loops also<br>&gt;&gt;&gt;     already can be mimicked using `filter`. Wouldn¹t we have to get<br>&gt;&gt;&gt;ride<br>&gt;&gt;&gt;     of the `where` clause by that logic?<br>&gt;&gt;&gt;     &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;The functionality being asked for here is already accepted for<br>&gt;&gt;&gt;     inclusion to Swift as a method on Sequence named `prefix(while:)`<br>&gt;&gt;&gt;     (SE-0045):<br>&gt;&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;`for element in array.prefix(while: { someCondition($0) }) {<br>&gt;&gt;&gt;... }`<br>&gt;&gt;&gt;     &gt; &gt; &gt;On Mon, Jun 6, 2016 at 14:31 T.J. Usiyan via<br>&gt;&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;(As I said, I can live with `while`. I am simply presenting a<br>&gt;&gt;&gt;     potential point of confusion.)<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;You aren&#39;t evaluating the statements in the loop &#39;while&#39; the<br>&gt;&gt;&gt;     condition isn&#39;t met. The first time that the condition isn&#39;t met,<br>&gt;&gt;&gt;     evaluation of the loop stops. I get that this is technically true<br>&gt;&gt;&gt;for<br>&gt;&gt;&gt;     the `while` construct but I suggest that the only reason that it<br>&gt;&gt;&gt;     works there is that &#39;stopping the first time that the condition<br>&gt;&gt;&gt;isn&#39;t<br>&gt;&gt;&gt;     met&#39; *is* the construct. Here, we have a loop that we execute for<br>&gt;&gt;&gt;     each thing and we&#39;re tacking on/intermingling the `while`<br>&gt;&gt;&gt;construct.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;On Mon, Jun 6, 2016 at 2:19 PM, Thorsten<br>&gt;&gt;&gt;     Seitz&lt;tseitz42 at icloud.com<br>&gt;&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;(mailto:tseitz42 at icloud.com<br>&gt;&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)(mailto:tseitz42 at icloud.com<br>&gt;&gt;&gt;     &lt;mailto:tseitz42 at icloud.com&gt;)&gt;wrote:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;Am 06.06.2016 um 19:43 schrieb Tim Vermeulen via<br>&gt;&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;I also considered `until`, but it would be a bit confusing<br>&gt;&gt;&gt;     that `where` makes sure a condition is met, while `until` makes<br>&gt;&gt;&gt;sure<br>&gt;&gt;&gt;     the condition isn¹t met. I think `while` makes more sense because<br>&gt;&gt;&gt;it<br>&gt;&gt;&gt;     corresponds to `break` in the same way that `where` corresponds to<br>&gt;&gt;&gt;     `continue`.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;That&#39;s a good argument! The only drawback is that `while`<br>&gt;&gt;&gt;and<br>&gt;&gt;&gt;     `where` look quite similar at a glance.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;-Thorsten<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;`while`, to me, actually reads like it should do what<br>&gt;&gt;&gt;     `where` does.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;To me, `while` reads like it should stop the loop once the<br>&gt;&gt;&gt;     condition isn¹t met, just like in a while loop.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;I hadn&#39;t thought about `while` in this regard but wouldn&#39;t<br>&gt;&gt;&gt;     `until` make more sense? `while`, to me, actually reads like it<br>&gt;&gt;&gt;     should do what `where` does. In any case, whether it is `while` or<br>&gt;&gt;&gt;     `where`, this seems like a reasonable feature in my opinion.<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;TJ<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;On Mon, Jun 6, 2016 at 5:15 AM, Tim Vermeulen via<br>&gt;&gt;&gt;     swift-evolution&lt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)&gt;wrote:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;We can already use a where clause in a for loop like<br>&gt;&gt;&gt;this:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array where someCondition(element) {<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// Š<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which basically acts like<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { continue }<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// Š<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Sometimes you want to break out of the loop when the<br>&gt;&gt;&gt;     condition isn¹t met instead. I propose a while clause:<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array while someCondition(element) {<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;// Š<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;which would be syntactic sugar for<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;for element in array {<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;guard someCondition(element) else { break }<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;Š<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;}<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;I can see this particularly being useful if we have a<br>&gt;&gt;&gt;     sorted array and we already know that once the condition isn¹t met,<br>&gt;&gt;&gt;     it won¹t be met either for subsequent elements. Another use case<br>&gt;&gt;&gt;     could be an infinite sequence that we want to cut off somewhere<br>&gt;&gt;&gt;     (which is simply not possible using a where clause).<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;_______________________________________________<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;&gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;_______________________________________________<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution mailing list<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     <br>&gt;&gt;&gt;&lt;mailto:swift-evolution at swift.org&gt;)(mailto:swift-evolution at swift.org<br>&gt;&gt;&gt;     &lt;mailto:swift-evolution at swift.org&gt;)<br>&gt;&gt;&gt;     &gt; &gt; &gt;&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;<br>&gt;&gt;&gt;     &gt; &gt; &gt;_______________________________________________<br>&gt;&gt;&gt;     &gt; swift-evolution mailing list<br>&gt;&gt;&gt;     &gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt;     &gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;     &gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; _______________________________________________<br>&gt;&gt;&gt; swift-evolution mailing list<br>&gt;&gt;&gt; swift-evolution at swift.org &lt;mailto:swift-evolution at swift.org&gt;<br>&gt;&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; swift-evolution mailing list<br>&gt;&gt; swift-evolution at swift.org<br>&gt;&gt; https://lists.swift.org/mailman/listinfo/swift-evolution<br>&gt;&gt;<br>&gt;_______________________________________________<br>&gt;swift-evolution mailing list<br>&gt;swift-evolution at swift.org<br>&gt;https://lists.swift.org/mailman/listinfo/swift-evolution<br></p></div></li></ul></li></ul></li></ul></li></ul></li></ul></div>    </main>
    <script src="/js/app-c283ee129de63ad743722e9511e67a5d.js"></script>
  </body>
  <footer>
    <p>Swift and the Swift logo are trademarks of Apple Inc.</p>
  </footer>
</html>
